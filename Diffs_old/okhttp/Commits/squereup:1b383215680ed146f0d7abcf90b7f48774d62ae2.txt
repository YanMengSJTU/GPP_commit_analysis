diff --git a/.buildscript/deploy_snapshot.sh b/.buildscript/deploy_snapshot.sh
deleted file mode 100755
index 7dfe3f41bf..0000000000
--- a/.buildscript/deploy_snapshot.sh
+++ /dev/null
@@ -1,26 +0,0 @@
-#!/bin/bash
-#
-# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
-#
-# Adapted from https://coderwall.com/p/9b_lfq and
-# https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
-
-SLUG="square/okhttp"
-JDK="oraclejdk8"
-BRANCH="master"
-
-set -e
-
-if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then
-  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'."
-elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then
-  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'."
-elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
-  echo "Skipping snapshot deployment: was pull request."
-elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then
-  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'."
-else
-  echo "Deploying snapshot..."
-  ./gradlew clean uploadArchives
-  echo "Snapshot deployed!"
-fi
diff --git a/.circleci/config.yml b/.circleci/config.yml
deleted file mode 100644
index 9f7d51ff11..0000000000
--- a/.circleci/config.yml
+++ /dev/null
@@ -1,274 +0,0 @@
-version: 2.1
-
-commands:
-  runtests:
-    description: "Run tests"
-    parameters:
-      platform:
-        type: string
-      testjdk:
-        type: string
-        default: ""
-    steps:
-      - restore_cache:
-          keys:
-            # restore compilation and wrapper from previous branch/job build or master
-            - v4-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
-            - v4-master-compile
-
-      - run:
-          name: Run tests
-          command: ./gradlew --build-cache --parallel --continue test
-          environment:
-            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dokhttp.platform=<< parameters.platform >> -Dorg.gradle.workers.max=3 -Xmx1G << parameters.testjdk >>
-
-      - save_cache:
-          paths:
-            - ~/.gradle/caches
-            - ~/.gradle/wrapper
-          key: v4-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
-          when: always
-
-      - run:
-          name: Save test results
-          command: |
-            mkdir -p ~/test-results/junit/
-            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
-          when: always
-
-      - store_test_results:
-          name: Store test results
-          path: ~/test-results
-
-      - run:
-          name: Save gradle reports
-          command: |
-            mkdir -p ~/reports/
-            tar cf - */build/reports | (cd ~/reports/; tar xf -)
-          when: always
-
-      - store_artifacts:
-          name: Store gradle reports
-          path: ~/reports
-
-jobs:
-  compile:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - run:
-          name: Compile
-          command: ./gradlew --parallel --build-cache downloadDependencies testClasses
-          environment:
-            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=3 -Xmx768m
-
-      - run:
-          name: Run tests
-          command: ./gradlew --parallel --build-cache test
-          environment:
-            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dokhttp.platform=jdk9 -Dorg.gradle.workers.max=3 -Xmx1G
-
-      - save_cache:
-          paths:
-            - ~/.gradle/caches
-            - ~/.gradle/wrapper
-          # Under normal usage, saves compiled results from master at least once a day
-          key: v4-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
-
-  checkjdk11:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - restore_cache:
-          keys:
-            # restore compilation and wrapper from master build
-            - v4-master-compile
-
-      - run:
-          name: Run checks
-          command: ./gradlew --parallel --continue --build-cache check -x test
-          environment:
-            GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=3 -Xmx1G
-
-      - run:
-          name: Save gradle reports
-          command: |
-            mkdir -p ~/reports/
-            tar cf - */build/reports | (cd ~/reports/; tar xf -)
-          when: always
-
-      - store_artifacts:
-          name: Store gradle reports
-          path: ~/reports
-
-  testjdk8:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - runtests:
-          platform: jdk8
-          testjdk: -Dtest.java.home=/usr/lib/jvm/java-8-openjdk-amd64
-
-  testjdk8alpn:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - runtests:
-          platform: jdk8alpn
-          testjdk: -Dtest.java.home=/usr/lib/jvm/java-8-openjdk-amd64 -Dalpn.boot.version=8.1.13.v20181017
-
-  testopenjsse:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - runtests:
-          platform: openjsse
-          testjdk: -Dtest.java.home=/usr/lib/jvm/java-8-openjdk-amd64
-
-  testjdk11:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - runtests:
-          platform: jdk9
-
-  testjdk12:
-    docker:
-      # best source of JDK 12 for now
-      - image: circleci/dynamodb:12.0.2-jdk
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - runtests:
-          platform: jdk9
-
-  testconscrypt:
-    docker:
-      - image: circleci/openjdk:11.0.4-jdk-stretch
-
-    environment:
-      JVM_OPTS: -Xmx1g
-      TERM: dumb
-
-    steps:
-      - checkout
-
-      - runtests:
-          platform: conscrypt
-
-workflows:
-  version: 2
-  commit:
-    jobs:
-      - compile:
-          filters:
-            branches:
-              only: master
-      - checkjdk11:
-          filters:
-            branches:
-              ignore:
-                - master
-                - gh-pages
-      - testjdk8:
-          filters:
-            branches:
-              only: master
-      - testjdk8alpn:
-          filters:
-            branches:
-              only: master
-      - testopenjsse:
-          filters:
-            branches:
-              only: master
-      - testjdk11:
-          filters:
-            branches:
-              ignore:
-                - gh-pages
-      - testjdk12:
-          filters:
-            branches:
-              only: master
-      - testconscrypt:
-          filters:
-            branches:
-              only: master
-  nightly:
-    triggers:
-      - schedule:
-          cron: "4 1 * * *"
-          filters:
-            branches:
-              only: master
-    jobs:
-      - compile
-      - checkjdk11:
-          requires:
-            - compile
-      - testjdk8:
-          requires:
-            - compile
-      - testjdk8alpn:
-          requires:
-            - compile
-      - testopenjsse:
-          requires:
-            - compile
-      - testjdk11:
-          requires:
-            - compile
-      - testjdk12:
-          requires:
-            - compile
-      - testconscrypt:
-          requires:
-            - compile
diff --git a/.github/CONTRIBUTING.md b/.github/CONTRIBUTING.md
deleted file mode 100644
index 01431c6e87..0000000000
--- a/.github/CONTRIBUTING.md
+++ /dev/null
@@ -1,25 +0,0 @@
-Contributing
-============
-
-If you would like to contribute code to OkHttp you can do so through GitHub by
-forking the repository and sending a pull request.
-
-When submitting code, please make every effort to follow existing conventions
-and style in order to keep the code as readable as possible. Please also make
-sure your code compiles by running `./gradlew check`. Checkstyle failures
-during compilation indicate errors in your style and can be viewed in the
-`checkstyle-result.xml` file.
-
-Some general advice
-
-- Don’t change public API lightly, avoid if possible, and include your reasoning in the PR if essential.  It causes pain for developers who use OkHttp and sometimes runtime errors.
-- Favour a working external library if appropriate.  There are many examples of OkHttp libraries that can sit on top or hook in via existing APIs.
-- Get working code on a personal branch with tests before you submit a PR.
-- OkHttp is a small and light dependency.  Don't introduce new dependencies or major new functionality.
-- OkHttp targets the intersection of RFC correct *and* widely implemented.  Incorrect implementations that are very widely implemented e.g. a bug in Apache, Nginx, Google, Firefox should also be handled.
-
-Before your code can be accepted into the project you must also sign the
-[Individual Contributor License Agreement (CLA)][1].
-
-
- [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1
diff --git a/.github/ISSUE_TEMPLATE/bug_report.md b/.github/ISSUE_TEMPLATE/bug_report.md
deleted file mode 100644
index 8b276c7dea..0000000000
--- a/.github/ISSUE_TEMPLATE/bug_report.md
+++ /dev/null
@@ -1,13 +0,0 @@
----
-name: Bug report
-about: A reproducible problem
-title: ''
-labels: bug
-assignees: ''
-
----
-
-Good bug reports include a failing test! Writing a test helps you to isolate and describe the problem, and it helps us to fix it fast. Bug reports without a failing test or reproduction steps are likely to be closed.
-
-Here’s an example test to get you started.
-https://gist.github.com/swankjesse/981fcae102f513eb13ed
diff --git a/.github/ISSUE_TEMPLATE/feature_request.md b/.github/ISSUE_TEMPLATE/feature_request.md
deleted file mode 100644
index e320e37f4a..0000000000
--- a/.github/ISSUE_TEMPLATE/feature_request.md
+++ /dev/null
@@ -1,12 +0,0 @@
----
-name: Feature request
-about: Suggest an idea
-title: ''
-labels: enhancement
-assignees: ''
-
----
-
-Start by telling us what problem you’re trying to solve. Often a solution already exists!
-
-Don’t send pull requests to implement new features without first getting our support. Sometimes we leave features out on purpose to keep the project small.
diff --git a/.github/ISSUE_TEMPLATE/question.md b/.github/ISSUE_TEMPLATE/question.md
deleted file mode 100644
index 73f2b5c1af..0000000000
--- a/.github/ISSUE_TEMPLATE/question.md
+++ /dev/null
@@ -1,16 +0,0 @@
----
-name: Question
-about: Use Stack Overflow instead
-title: "\U0001F649"
-labels: ''
-assignees: ''
-
----
-
-🛑 𝙎𝙏𝙊𝙋
-
-This issue tracker is not the place for questions!
-
-If you want to ask how to do something, or to understand why something isn't working the way you expect it to, use Stack Overflow. https://stackoverflow.com/questions/tagged/okhttp
-
-We close all questions without reading them.
diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 143348a630..0000000000
--- a/.travis.yml
+++ /dev/null
@@ -1,39 +0,0 @@
-language: java
-
-dist: trusty
-
-jdk:
-  - oraclejdk8
-
-# avoid ./gradlew assemble default which builds docs
-install:
- - ./gradlew jar --parallel
-
-script:
- - ./gradlew test --parallel
-
-after_success:
-  - .buildscript/deploy_snapshot.sh
-
-env:
-  global:
-    - secure: "fELrorBJHDz+Xk9iSVMnamu0qC0+pYnFvjnEIcGnmKMMxLI/CIMACghIfSkqZhKAcU3hvxgWzyY8JBMnf5tykUjjOwmubAjZ9qIvwujtrUoUitUkpvVaPtqF0d1Yx0Xq4qt3NB9cOugPR/cPGnoEvSKfND3g+o5ta7KzdjwMBCY="
-    - secure: "WMkcWrsvzJNf48w7DJwipUNbhAoggCkC+NM31esq9/GDceGtVWj4hssQETynG4+ckxr0wGqUxsTRTz0uGhX6Fi58haG8yKp+g/HVClqI5EYjI44ptPcwlqlbYjuGbk65k1OGGZLctA6fQA3uT0zee05/yBjJx/jOqrN+PD1tW38="
-
-branches:
-  only:
-    - master
-
-notifications:
-  email: false
-
-sudo: false
-
-before_cache:
-  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
-  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
-
-cache:
-  directories:
-    - $HOME/.gradle/caches/
-    - $HOME/.gradle/wrapper/
diff --git a/BUG-BOUNTY.md b/BUG-BOUNTY.md
deleted file mode 100644
index b2c35b2da0..0000000000
--- a/BUG-BOUNTY.md
+++ /dev/null
@@ -1,10 +0,0 @@
-Serious about security
-======================
-
-Square recognizes the important contributions the security research community
-can make. We therefore encourage reporting security issues with the code
-contained in this repository.
-
-If you believe you have discovered a security vulnerability, please follow the
-guidelines at https://hackerone.com/square-open-source
-
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 26fa988932..0000000000
--- a/CHANGELOG.md
+++ /dev/null
@@ -1,166 +0,0 @@
-Change Log
-==========
-
-## Version 4.2.2
-
-_2019-10-06_
-
- *  Fix: When closing a canceled HTTP/2 stream, don't send the `END_STREAM` flag. This could cause
-    the server to incorrectly interpret the stream as having completed normally. This is most useful
-    when a request body needs to cancel its own call.
-
-
-## Version 4.2.1
-
-_2019-10-02_
-
- *  Fix: In 4.1.0 we introduced a performance regression that prevented connections from being
-    pooled in certain situations. We have good test coverage for connection pooling but we missed
-    this because it only occurs if you have proxy configured and you share a connection pool among
-    multiple `OkHttpClient` instances.
-
-    This particularly-subtle bug was caused by us assigning each `OkHttpClient` instance its own
-    `NullProxySelector` when an explicit proxy is configured. But we don't share connections when
-    the proxy selectors are different. Ugh!
-
-
-## Version 4.2.0
-
-_2019-09-10_
-
- *  New: API to decode a certificate and private key to create a `HeldCertificate`. This accepts a
-    string containing both a certificate and PKCS #8-encoded private key.
-
-    ```kotlin
-    val heldCertificate = HeldCertificate.decode("""
-        |-----BEGIN CERTIFICATE-----
-        |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl
-        |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx
-        |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h
-        |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD
-        |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw
-        |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF
-        |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT
-        |yyaoEufLKVXhrTQhRfodTeigi4RX
-        |-----END CERTIFICATE-----
-        |-----BEGIN PRIVATE KEY-----
-        |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J
-        |lu/GJQZoU9lDrCPeUcQ28tzOWw==
-        |-----END PRIVATE KEY-----
-        """.trimMargin())
-    val handshakeCertificates = HandshakeCertificates.Builder()
-        .heldCertificate(heldCertificate)
-        .build()
-    val server = MockWebServer()
-    server.useHttps(handshakeCertificates.sslSocketFactory(), false)
-    ```
-
-    Get these strings with `HeldCertificate.certificatePem()` and `privateKeyPkcs8Pem()`.
-
- *  Fix: Handshake now returns peer certificates in canonical order: each certificate is signed by
-    the certificate that follows and the last certificate is signed by a trusted root.
-
- *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this
-    happened enough then eventually the connection would stall.
-
- *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we
-    could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to
-    fail the call.
-
-
-## Version 4.1.1
-
-_2019-09-05_
-
- *  Fix: Don't drop repeated headers when validating cached responses. In our Kotlin upgrade we
-    introduced a regression where we iterated the number of unique header names rather than then
-    number of unique headers. If you're using OkHttp's response cache this may impact you.
-
-
-## Version 4.1.0
-
-_2019-08-12_
-
- [brotli]: https://github.com/google/brotli
-
- *  **OkHttp's new okhttp-brotli module implements Brotli compression.** Install the interceptor to
-    enable [Brotli compression][brotli], which compresses 5-20% smaller than gzip.
-
-    ```
-    val client = OkHttpClient.Builder()
-        .addInterceptor(BrotliInterceptor)
-        .build()
-    ```
-
-    This artifact has a dependency on Google's Brotli decoder (95 KiB).
-
- *  New: `EventListener.proxySelectStart()`, `proxySelectEnd()` events give visibility into the
-    proxy selection process.
- *  New: `Response.byteString()` reads the entire response into memory as a byte string.
- *  New: `OkHttpClient.x509TrustManager` accessor.
- *  New: Permit [new WebSocket response codes][iana_websocket]: 1012 (Service Restart), 1013 (Try
-    Again Later), and 1014 (invalid response from the upstream).
- *  New: Build with Kotlin 1.3.41, BouncyCastle 1.62, and Conscrypt 2.2.1.
- *  Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.
- *  Fix: Defer the `SecurityException` when looking up the default proxy selector.
- *  Fix: Don't use brackets formatting IPv6 host names in MockWebServer.
- *  Fix: Don't permit cache iterators to remove entries that are being written.
-
-
-## Version 4.0.1
-
-_2019-07-10_
-
- *  Fix: Tolerate null-hostile lists in public API. Lists created with `List.of(...)` don't like it
-    when you call `contains(null)` on them!
- *  Fix: Retain binary-compatibility in `okhttp3.internal.HttpHeaders.hasBody()`. Some unscrupulous
-    coders call this and we don't want their users to suffer.
-
-
-## Version 4.0.0
-
-_2019-06-26_
-
-**This release upgrades OkHttp to Kotlin.** We tried our best to make fast and safe to upgrade
-from OkHttp 3.x. We wrote an [upgrade guide][upgrading_to_okhttp_4] to help with the migration and a
-[blog post][okhttp4_blog_post] to explain it.
-
- *  Fix: Target Java 8 bytecode for Java and Kotlin.
-
-
-## Version 4.0.0-RC3
-
-_2019-06-24_
-
- *  Fix: Retain binary-compatibility in `okhttp3.internal.HttpMethod`. Naughty third party SDKs
-    import this and we want to ease upgrades for their users.
-
-
-## Version 4.0.0-RC2
-
-_2019-06-21_
-
- *  New: Require Kotlin 1.3.40.
- *  New: Change the Kotlin API from `File.toRequestBody()` to `File.asRequestBody()` and
-    `BufferedSource.toResponseBody()` to `BufferedSource.asResponseBody()`. If the returned value
-    is a view of what created it, we use _as_.
- *  Fix: Permit response codes of zero for compatibility with OkHttp 3.x.
- *  Fix: Change the return type of `MockWebServer.takeRequest()` to be nullable.
- *  Fix: Make `Call.clone()` public to Kotlin callers.
-
-
-## Version 4.0.0-RC1
-
-_2019-06-03_
-
- *  First stable preview of OkHttp 4.
-
-
-## Version 3.x
-
-[Change log](http://square.github.io/okhttp/changelog_3x/)
-
-
- [iana_websocket]: https://www.iana.org/assignments/websocket/websocket.txt
- [okhttp4_blog_post]: https://cashapp.github.io/2019-06-26/okhttp-4-goes-kotlin
- [upgrading_to_okhttp_4]: https://square.github.io/okhttp/upgrading_to_okhttp_4/
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
deleted file mode 100644
index e0e216ec47..0000000000
--- a/CONTRIBUTING.md
+++ /dev/null
@@ -1,45 +0,0 @@
-Contributing
-============
-
-Keeping the project small and stable limits our ability to accept new contributors. We are not
-seeking new committers at this time, but some small contributions are welcome.
-
-If you've found a security problem, please follow our [bug bounty][security] program.
-
-If you've found a bug, please contribute a failing test case so we can study and fix it.
-
-If you have a new feature idea, please build it in an external library. There are
-[many libraries][works_with_okhttp] that sit on top or hook in via existing APIs. If you build
-something that integrates with OkHttp, tell us so that we can link it!
-
-Before code can be accepted all contributors must complete our
-[Individual Contributor License Agreement (CLA)][cla].
-
-
-Code Contributions
-------------------
-
-Get working code on a personal branch with tests passing before you submit a PR:
-
-```
-./gradlew clean check
-```
-
-Please make every effort to follow existing conventions and style in order to keep the code as
-readable as possible.
-
-Contribute code changes through GitHub by forking the repository and sending a pull request. We
-squash all pull requests on merge.
-
-
-Committer's Guides
-------------------
-
- * [Concurrency][concurrency]
- * [Releasing][releasing]
-
- [cla]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1
- [concurrency]: http://square.github.io/okhttp/concurrency/
- [releasing]: http://square.github.io/okhttp/releasing/
- [security]: http://square.github.io/okhttp/security/
- [works_with_okhttp]: http://square.github.io/okhttp/works_with_okhttp/
diff --git a/LICENSE.txt b/LICENSE.txt
deleted file mode 100644
index d645695673..0000000000
--- a/LICENSE.txt
+++ /dev/null
@@ -1,202 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright [yyyy] [name of copyright owner]
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
diff --git a/README.md b/README.md
deleted file mode 100644
index b70a70c3a5..0000000000
--- a/README.md
+++ /dev/null
@@ -1,157 +0,0 @@
-OkHttp
-======
-
-See the [project website][okhttp] for documentation and APIs.
-
-HTTP is the way modern applications network. It’s how we exchange data & media. Doing HTTP
-efficiently makes your stuff load faster and saves bandwidth.
-
-OkHttp is an HTTP client that’s efficient by default:
-
- * HTTP/2 support allows all requests to the same host to share a socket.
- * Connection pooling reduces request latency (if HTTP/2 isn’t available).
- * Transparent GZIP shrinks download sizes.
- * Response caching avoids the network completely for repeat requests.
-
-OkHttp perseveres when the network is troublesome: it will silently recover from common connection
-problems. If your service has multiple IP addresses OkHttp will attempt alternate addresses if the
-first connect fails. This is necessary for IPv4+IPv6 and for services hosted in redundant data
-centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be
-configured to fall back for broad connectivity.
-
-Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It
-supports both synchronous blocking calls and async calls with callbacks.
-
-
-Get a URL
----------
-
-This program downloads a URL and prints its contents as a string. [Full source][get_example].
-
-```java
-OkHttpClient client = new OkHttpClient();
-
-String run(String url) throws IOException {
-  Request request = new Request.Builder()
-      .url(url)
-      .build();
-
-  try (Response response = client.newCall(request).execute()) {
-    return response.body().string();
-  }
-}
-```
-
-
-Post to a Server
-----------------
-
-This program posts data to a service. [Full source][post_example].
-
-```java
-public static final MediaType JSON
-    = MediaType.get("application/json; charset=utf-8");
-
-OkHttpClient client = new OkHttpClient();
-
-String post(String url, String json) throws IOException {
-  RequestBody body = RequestBody.create(JSON, json);
-  Request request = new Request.Builder()
-      .url(url)
-      .post(body)
-      .build();
-  try (Response response = client.newCall(request).execute()) {
-    return response.body().string();
-  }
-}
-```
-
-Further examples are on the [OkHttp Recipes page][recipes].
-
-
-Requirements
-------------
-
-OkHttp works on Android 5.0+ (API level 21+) and on Java 8+.
-
-OkHttp depends on [Okio][okio] for high-performance I/O and the [Kotlin standard library][kotlin]. Both are small libraries with strong backwards-compatibility.
-
-We highly recommend you keep OkHttp up-to-date. As with auto-updating web browsers, staying current
-with HTTPS clients is an important defense against potential security problems. [We
-track][tls_history] the dynamic TLS ecosystem and adjust OkHttp to improve connectivity and
-security.
-
-OkHttp uses your platform's built-in TLS implementation. On Java platforms OkHttp also supports
-[Conscrypt][conscrypt], which integrates BoringSSL with Java. OkHttp will use Conscrypt if it is
-the first security provider:
-
-```java
-Security.insertProviderAt(Conscrypt.newProvider(), 1);
-```
-
-The OkHttp 3.12.x branch supports Android 2.3+ (API level 9+) and Java 7+. These platforms lack
-support for TLS 1.2 and should not be used. But because upgrading is difficult we will backport
-critical fixes to the [3.12.x branch][okhttp_312x] through December 31, 2020.
-
-
-Releases
---------
-
-Our [change log][changelog] has release history.
-
-```kotlin
-implementation("com.squareup.okhttp3:okhttp:4.2.1")
-```
-
-Snapshot builds are [available][snap].
-
-
-R8 / ProGuard
--------------
-
-If you are using R8 or ProGuard add the options from [`okhttp3.pro`][okhttp3_pro].
-
-You might also need rules for Okio which is a dependency of this library.
-
-
-MockWebServer
--------------
-
-OkHttp includes a library for testing HTTP, HTTPS, and HTTP/2 clients.
-
-```kotlin
-testImplementation("com.squareup.okhttp3:mockwebserver:4.2.1")
-```
-
-
-License
--------
-
-```
-Copyright 2019 Square, Inc.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-   http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-```
-
- [changelog]: http://square.github.io/okhttp/changelog/
- [conscrypt]: https://github.com/google/conscrypt/
- [get_example]: https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/GetExample.java
- [kotlin]: https://kotlinlang.org/
- [okhttp3_pro]: https://github.com/square/okhttp/blob/master/okhttp/src/main/resources/META-INF/proguard/okhttp3.pro
- [okhttp_312x]: https://github.com/square/okhttp/tree/okhttp_3.12.x
- [okhttp]: https://square.github.io/okhttp/
- [okio]: https://github.com/square/okio
- [post_example]: https://raw.github.com/square/okhttp/master/samples/guide/src/main/java/okhttp3/guide/PostExample.java
- [recipes]: http://square.github.io/okhttp/recipes/
- [snap]: https://oss.sonatype.org/content/repositories/snapshots/
- [tls_history]: https://square.github.io/okhttp/tls_configuration_history/
diff --git a/android-test/build.gradle b/android-test/build.gradle
deleted file mode 100644
index 1f6c8248aa..0000000000
--- a/android-test/build.gradle
+++ /dev/null
@@ -1,50 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'org.jetbrains.kotlin.android'
-
-repositories {
-  jcenter {
-    // Required for a dependency of Android lint.
-    content {
-      includeGroup 'org.jetbrains.trove4j'
-    }
-  }
-}
-
-android {
-  compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_8
-    targetCompatibility JavaVersion.VERSION_1_8
-  }
-
-  compileSdkVersion 29
-
-  defaultConfig {
-    minSdkVersion 21
-    targetSdkVersion 29
-    versionCode 1
-    versionName "1.0"
-
-    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-    testInstrumentationRunnerArguments(['notClass': 'org.conscrypt.KitKatPlatformOpenSSLSocketImplAdapter'])
-  }
-}
-
-dependencies {
-  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
-  implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
-  implementation project(':okhttp')
-  testImplementation 'junit:junit:4.12'
-  androidTestImplementation(project(':okhttp-testing-support')) {
-    exclude group: 'org.openjsse', module: 'openjsse'
-    exclude group: 'org.conscrypt', module: 'conscrypt-openjdk-uber'
-  }
-  androidTestImplementation "org.conscrypt:conscrypt-android:2.2.1"
-  androidTestImplementation project(':mockwebserver')
-  androidTestImplementation project(':okhttp-tls')
-  androidTestImplementation project(':okhttp-dnsoverhttps')
-  androidTestImplementation project(':okhttp-logging-interceptor')
-  androidTestImplementation 'com.android.support.test:runner:1.0.2'
-  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
-  androidTestImplementation 'com.squareup.moshi:moshi:1.8.0'
-  androidTestImplementation 'com.squareup.moshi:moshi-kotlin:1.8.0'
-}
diff --git a/android-test/settings.gradle b/android-test/settings.gradle
deleted file mode 100644
index fa80fbee19..0000000000
--- a/android-test/settings.gradle
+++ /dev/null
@@ -1 +0,0 @@
-project.name = 'android-test'
\ No newline at end of file
diff --git a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt b/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
deleted file mode 100644
index f605522ee9..0000000000
--- a/android-test/src/androidTest/java/okhttp/android/test/OkHttpTest.kt
+++ /dev/null
@@ -1,411 +0,0 @@
-/*
- * Copyright (C) 2019 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp.android.test
-
-import android.os.Build
-import android.support.test.runner.AndroidJUnit4
-import com.squareup.moshi.Moshi
-import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
-import okhttp3.Call
-import okhttp3.CertificatePinner
-import okhttp3.Connection
-import okhttp3.EventListener
-import okhttp3.HttpUrl.Companion.toHttpUrl
-import okhttp3.OkHttpClient
-import okhttp3.Protocol
-import okhttp3.RecordingEventListener
-import okhttp3.Request
-import okhttp3.TlsVersion
-import okhttp3.dnsoverhttps.DnsOverHttps
-import okhttp3.internal.asFactory
-import okhttp3.internal.platform.Platform
-import okhttp3.logging.LoggingEventListener
-import okhttp3.mockwebserver.MockResponse
-import okhttp3.mockwebserver.MockWebServer
-import okhttp3.tls.internal.TlsUtil.localhost
-import okio.ByteString.Companion.toByteString
-import org.conscrypt.Conscrypt
-import org.junit.After
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertTrue
-import org.junit.Assert.fail
-import org.junit.Assume.assumeNoException
-import org.junit.Assume.assumeTrue
-import org.junit.Before
-import org.junit.Ignore
-import org.junit.Rule
-import org.junit.Test
-import org.junit.runner.RunWith
-import java.net.InetAddress
-import java.net.UnknownHostException
-import java.security.cert.X509Certificate
-import java.security.Security
-import javax.net.ssl.SSLPeerUnverifiedException
-import javax.net.ssl.SSLSocket
-import okhttp3.internal.platform.AndroidPlatform
-import okhttp3.internal.platform.Android10Platform
-
-/**
- * Run with "./gradlew :android-test:connectedCheck" and make sure ANDROID_SDK_ROOT is set.
- */
-@RunWith(AndroidJUnit4::class)
-class OkHttpTest {
-  private lateinit var client: OkHttpClient
-
-  private val moshi = Moshi.Builder()
-      .add(KotlinJsonAdapterFactory())
-      .build()
-
-  @JvmField
-  @Rule
-  val server = MockWebServer()
-  private val handshakeCertificates = localhost()
-
-  @Before
-  fun createClient() {
-    client = OkHttpClient.Builder().build()
-  }
-
-  @After
-  fun cleanup() {
-    client.dispatcher.executorService.shutdownNow()
-  }
-
-  @Test
-  fun testPlatform() {
-    if (Build.VERSION.SDK_INT >= 29) {
-      assertTrue(Platform.get() is Android10Platform)
-    } else {
-      assertTrue(Platform.get() is AndroidPlatform)
-    }
-  }
-
-  @Test
-  fun testRequest() {
-    assumeNetwork()
-
-    val request = Request.Builder().url("https://api.twitter.com/robots.txt").build()
-
-    val response = client.newCall(request).execute()
-
-    response.use {
-      assertEquals(200, response.code)
-    }
-  }
-
-  @Test
-  fun testConscryptRequest() {
-    assumeNetwork()
-
-    try {
-      Security.insertProviderAt(Conscrypt.newProviderBuilder().build(), 1)
-
-      val request = Request.Builder().url("https://facebook.com/robots.txt").build()
-
-      var socketClass: String? = null
-
-      client = OkHttpClient.Builder().eventListener(object : EventListener() {
-        override fun connectionAcquired(call: Call, connection: Connection) {
-          socketClass = connection.socket().javaClass.name
-        }
-      }).build()
-
-      val response = client.newCall(request).execute()
-
-      response.use {
-        assertEquals(Protocol.HTTP_2, response.protocol)
-        assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
-        assertEquals(200, response.code)
-        // see https://github.com/google/conscrypt/blob/b9463b2f74df42d85c73715a5f19e005dfb7b802/android/src/main/java/org/conscrypt/Platform.java#L613
-        if (Build.VERSION.SDK_INT >= 24) {
-          assertEquals("org.conscrypt.Java8FileDescriptorSocket", socketClass)
-        } else {
-          assertEquals("org.conscrypt.ConscryptFileDescriptorSocket", socketClass)
-        }
-      }
-    } finally {
-      Security.removeProvider("Conscrypt")
-    }
-  }
-
-  @Test
-  fun testRequestUsesAndroidConscrypt() {
-    assumeNetwork()
-
-    val request = Request.Builder().url("https://facebook.com/robots.txt").build()
-
-    var socketClass: String? = null
-
-    val client2 = client.newBuilder()
-        .eventListener(object : EventListener() {
-          override fun connectionAcquired(call: Call, connection: Connection) {
-            socketClass = connection.socket().javaClass.name
-          }
-        })
-        .build()
-
-    val response = client2.newCall(request).execute()
-
-    response.use {
-      assertEquals(Protocol.HTTP_2, response.protocol)
-      if (Build.VERSION.SDK_INT >= 29) {
-        assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
-      } else {
-        assertEquals(TlsVersion.TLS_1_2, response.handshake?.tlsVersion)
-      }
-      assertEquals(200, response.code)
-      assertTrue(socketClass?.startsWith("com.android.org.conscrypt.") == true)
-    }
-  }
-
-  @Test
-  fun testHttpRequestNotBlockedOnLegacyAndroid() {
-    assumeTrue(Build.VERSION.SDK_INT < 23)
-
-    val request = Request.Builder().url("http://squareup.com/robots.txt").build()
-
-    val response = client.newCall(request).execute()
-
-    response.use {
-      assertEquals(200, response.code)
-    }
-  }
-
-  @Test
-  fun testHttpRequestBlocked() {
-    assumeTrue(Build.VERSION.SDK_INT >= 23)
-
-    val request = Request.Builder().url("http://squareup.com/robots.txt").build()
-
-    try {
-      client.newCall(request).execute()
-      fail("expected cleartext blocking")
-    } catch (_: java.net.UnknownServiceException) {
-    }
-  }
-
-  data class HowsMySslResults(
-    val unknown_cipher_suite_supported: Boolean,
-    val beast_vuln: Boolean,
-    val session_ticket_supported: Boolean,
-    val tls_compression_supported: Boolean,
-    val ephemeral_keys_supported: Boolean,
-    val rating: String,
-    val tls_version: String,
-    val able_to_detect_n_minus_one_splitting: Boolean,
-    val insecure_cipher_suites: Map<String, List<String>>,
-    val given_cipher_suites: List<String>?
-  )
-
-  @Test
-  @Ignore
-  fun testSSLFeatures() {
-    assumeNetwork()
-
-    val request = Request.Builder().url("https://www.howsmyssl.com/a/check").build()
-
-    val response = client.newCall(request).execute()
-
-    val results = response.use {
-      moshi.adapter(HowsMySslResults::class.java).fromJson(response.body!!.string())!!
-    }
-
-    Platform.get().log("results $results", Platform.WARN)
-
-    assertTrue(results.session_ticket_supported)
-    assertEquals("Probably Okay", results.rating)
-    // TODO map to expected versions automatically, test ignored for now.  Run manually.
-    assertEquals("TLS 1.3", results.tls_version)
-    assertEquals(0, results.insecure_cipher_suites.size)
-
-    assertEquals(TlsVersion.TLS_1_3, response.handshake?.tlsVersion)
-    assertEquals(Protocol.HTTP_2, response.protocol)
-  }
-
-  @Test
-  fun testMockWebserverRequest() {
-    enableTls()
-
-    server.enqueue(MockResponse().setBody("abc"))
-
-    val request = Request.Builder().url(server.url("/")).build()
-
-    val response = client.newCall(request).execute()
-
-    response.use {
-      assertEquals(200, response.code)
-      assertEquals("CN=localhost",
-          (response.handshake!!.peerCertificates.single() as X509Certificate).subjectDN.name)
-    }
-  }
-
-  @Test
-  fun testCertificatePinningFailure() {
-    enableTls()
-
-    val certificatePinner = CertificatePinner.Builder()
-        .add(server.hostName, "sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")
-        .build()
-    client = client.newBuilder().certificatePinner(certificatePinner).build()
-
-    server.enqueue(MockResponse().setBody("abc"))
-
-    val request = Request.Builder().url(server.url("/")).build()
-
-    try {
-      client.newCall(request).execute()
-      fail()
-    } catch (_: SSLPeerUnverifiedException) {
-    }
-  }
-
-  @Test
-  fun testCertificatePinningSuccess() {
-    enableTls()
-
-    val certificatePinner = CertificatePinner.Builder()
-        .add(server.hostName,
-            CertificatePinner.pin(handshakeCertificates.trustManager.acceptedIssuers[0]))
-        .build()
-    client = client.newBuilder().certificatePinner(certificatePinner).build()
-
-    server.enqueue(MockResponse().setBody("abc"))
-
-    val request = Request.Builder().url(server.url("/")).build()
-
-    val response = client.newCall(request).execute()
-
-    response.use {
-      assertEquals(200, response.code)
-    }
-  }
-
-  @Test
-  fun testEventListener() {
-    val eventListener = RecordingEventListener()
-
-    enableTls()
-
-    client = client.newBuilder().eventListener(eventListener).build()
-
-    server.enqueue(MockResponse().setBody("abc1"))
-    server.enqueue(MockResponse().setBody("abc2"))
-
-    val request = Request.Builder().url(server.url("/")).build()
-
-    client.newCall(request).execute().use { response ->
-      assertEquals(200, response.code)
-    }
-
-    assertEquals(listOf("CallStart", "ProxySelectStart", "ProxySelectEnd", "DnsStart", "DnsEnd",
-        "ConnectStart", "SecureConnectStart", "SecureConnectEnd", "ConnectEnd",
-        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
-        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",
-        "CallEnd"), eventListener.recordedEventTypes())
-
-    eventListener.clearAllEvents()
-
-    client.newCall(request).execute().use { response ->
-      assertEquals(200, response.code)
-    }
-
-    assertEquals(listOf("CallStart", "ProxySelectStart", "ProxySelectEnd",
-        "ConnectionAcquired", "RequestHeadersStart", "RequestHeadersEnd", "ResponseHeadersStart",
-        "ResponseHeadersEnd", "ResponseBodyStart", "ResponseBodyEnd", "ConnectionReleased",
-        "CallEnd"), eventListener.recordedEventTypes())
-  }
-
-  @Test
-  fun testSessionReuse() {
-    val sessionIds = mutableListOf<String>()
-
-    enableTls()
-
-    client = client.newBuilder().eventListener(object : EventListener() {
-      override fun connectionAcquired(call: Call, connection: Connection) {
-        val sslSocket = connection.socket() as SSLSocket
-
-        sessionIds.add(sslSocket.session.id.toByteString().hex())
-      }
-    }).build()
-
-    server.enqueue(MockResponse().setBody("abc1"))
-    server.enqueue(MockResponse().setBody("abc2"))
-
-    val request = Request.Builder().url(server.url("/")).build()
-
-    client.newCall(request).execute().use { response ->
-      assertEquals(200, response.code)
-    }
-
-    client.connectionPool.evictAll()
-    assertEquals(0, client.connectionPool.connectionCount())
-
-    client.newCall(request).execute().use { response ->
-      assertEquals(200, response.code)
-    }
-
-    assertEquals(2, sessionIds.size)
-    assertEquals(sessionIds[0], sessionIds[1])
-  }
-
-  @Test
-  fun testDnsOverHttps() {
-    assumeNetwork()
-
-    client = client.newBuilder()
-        .eventListenerFactory(LoggingEventListener.Factory())
-        .build()
-
-    val dohDns = buildCloudflareIp(client)
-    val dohEnabledClient =
-        client.newBuilder().eventListenerFactory(EventListener.NONE.asFactory()).dns(dohDns).build()
-
-    dohEnabledClient.get("https://www.twitter.com/robots.txt")
-    dohEnabledClient.get("https://www.facebook.com/robots.txt")
-  }
-
-  private fun OkHttpClient.get(url: String) {
-    val request = Request.Builder().url(url).build()
-    val response = this.newCall(request).execute()
-
-    response.use {
-      assertEquals(200, response.code)
-    }
-  }
-
-  fun buildCloudflareIp(bootstrapClient: OkHttpClient): DnsOverHttps {
-    return DnsOverHttps.Builder().client(bootstrapClient)
-        .url("https://1.1.1.1/dns-query".toHttpUrl())
-        .build()
-  }
-
-  private fun enableTls() {
-    client = client.newBuilder()
-        .sslSocketFactory(
-            handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager)
-        .build()
-    server.useHttps(handshakeCertificates.sslSocketFactory(), false)
-  }
-
-  private fun assumeNetwork() {
-    try {
-      InetAddress.getByName("www.google.com")
-    } catch (uhe: UnknownHostException) {
-      assumeNoException(uhe)
-    }
-  }
-}
diff --git a/android-test/src/main/AndroidManifest.xml b/android-test/src/main/AndroidManifest.xml
deleted file mode 100644
index b1a394fecc..0000000000
--- a/android-test/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="okhttp.android.test">
-  <uses-permission android:name="android.permission.INTERNET" />
-</manifest>
diff --git a/android-test/src/main/res/values/strings.xml b/android-test/src/main/res/values/strings.xml
deleted file mode 100644
index 3f2b0bb232..0000000000
--- a/android-test/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<resources>
-  <string name="app_name">android-test</string>
-</resources>
diff --git a/android-test/src/main/res/xml/network_security_config.xml b/android-test/src/main/res/xml/network_security_config.xml
deleted file mode 100644
index 786dddecc7..0000000000
--- a/android-test/src/main/res/xml/network_security_config.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<network-security-config>
-  <base-config cleartextTrafficPermitted="false">
-  </base-config>
-</network-security-config>
\ No newline at end of file
diff --git a/checkstyle.xml b/checkstyle.xml
deleted file mode 100644
index f66aad53f8..0000000000
--- a/checkstyle.xml
+++ /dev/null
@@ -1,145 +0,0 @@
-<?xml version="1.0"?>
-<!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
-
-<module name="Checker">
-  <module name="SuppressWarningsFilter"/>
-  <module name="NewlineAtEndOfFile"/>
-  <module name="FileLength"/>
-  <module name="FileTabCharacter"/>
-
-  <!-- Trailing spaces -->
-  <module name="RegexpSingleline">
-    <property name="format" value="\s+$"/>
-    <property name="message" value="Line has trailing spaces."/>
-  </module>
-
-  <!-- Space after 'for' and 'if' -->
-  <module name="RegexpSingleline">
-    <property name="format" value="^\s*(for|if)\b[^ ]"/>
-    <property name="message" value="Space needed before opening parenthesis."/>
-  </module>
-
-  <!-- For each spacing -->
-  <module name="RegexpSingleline">
-    <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>
-    <property name="message" value="Space needed around ':' character."/>
-  </module>
-
-  <module name="TreeWalker">
-    <!-- Checks for Javadoc comments.                     -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-    <!--module name="JavadocMethod"/-->
-    <!--module name="JavadocType"/-->
-    <!--module name="JavadocVariable"/-->
-    <module name="JavadocStyle"/>
-
-
-    <!-- Checks for Naming Conventions.                  -->
-    <!-- See http://checkstyle.sf.net/config_naming.html -->
-    <!--<module name="ConstantName"/>-->
-    <module name="LocalFinalVariableName"/>
-    <module name="LocalVariableName"/>
-    <module name="MemberName"/>
-    <module name="MethodName"/>
-    <!--<module name="PackageName"/>-->
-    <module name="ParameterName"/>
-    <module name="StaticVariableName"/>
-    <module name="TypeName"/>
-
-
-    <!-- Checks for imports                              -->
-    <!-- See http://checkstyle.sf.net/config_import.html -->
-    <module name="AvoidStarImport"/>
-    <module name="IllegalImport"/>
-    <!-- defaults to sun.* packages -->
-    <module name="RedundantImport"/>
-    <module name="UnusedImports">
-      <property name="processJavadoc" value="true"/>
-    </module>
-
-
-    <!-- Checks for Size Violations.                    -->
-    <!-- See http://checkstyle.sf.net/config_sizes.html -->
-    <module name="LineLength">
-      <property name="max" value="100"/>
-    </module>
-    <module name="MethodLength">
-      <property name="max" value="200"/>
-    </module>
-
-
-    <!-- Checks for whitespace                               -->
-    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-    <module name="GenericWhitespace"/>
-    <!--<module name="EmptyForIteratorPad"/>-->
-    <module name="MethodParamPad"/>
-    <!--<module name="NoWhitespaceAfter"/>-->
-    <!--<module name="NoWhitespaceBefore"/>-->
-    <module name="OperatorWrap"/>
-    <module name="ParenPad"/>
-    <module name="TypecastParenPad"/>
-    <module name="WhitespaceAfter"/>
-    <module name="WhitespaceAround">
-      <property name="tokens"
-          value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN,
-          COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH,
-          LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
-          LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
-          MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST,
-          SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
-    </module>
-
-
-    <!-- Modifier Checks                                    -->
-    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-    <module name="ModifierOrder"/>
-    <module name="RedundantModifier"/>
-
-
-    <!-- Checks for blocks. You know, those {}'s         -->
-    <!-- See http://checkstyle.sf.net/config_blocks.html -->
-    <module name="AvoidNestedBlocks"/>
-    <!--module name="EmptyBlock"/-->
-    <module name="LeftCurly"/>
-    <!--<module name="NeedBraces"/>-->
-    <module name="RightCurly"/>
-
-
-    <!-- Checks for common coding problems               -->
-    <!-- See http://checkstyle.sf.net/config_coding.html -->
-    <!--module name="AvoidInlineConditionals"/-->
-    <module name="CovariantEquals"/>
-    <module name="EmptyStatement"/>
-    <!--<module name="EqualsAvoidNull"/>-->
-    <module name="EqualsHashCode"/>
-    <!--module name="HiddenField"/-->
-    <module name="IllegalInstantiation"/>
-    <!--module name="InnerAssignment"/-->
-    <!--module name="MagicNumber"/-->
-    <!--module name="MissingSwitchDefault"/-->
-    <!--<module name="RedundantThrows"/>-->
-    <module name="SimplifyBooleanExpression"/>
-    <module name="SimplifyBooleanReturn"/>
-
-    <!-- Checks for class design                         -->
-    <!-- See http://checkstyle.sf.net/config_design.html -->
-    <!--module name="DesignForExtension"/-->
-    <!--<module name="FinalClass"/>-->
-    <module name="HideUtilityClassConstructor"/>
-    <module name="InterfaceIsType"/>
-    <!--module name="VisibilityModifier"/-->
-
-
-    <!-- Miscellaneous other checks.                   -->
-    <!-- See http://checkstyle.sf.net/config_misc.html -->
-    <module name="ArrayTypeStyle"/>
-    <!--module name="FinalParameters"/-->
-    <!--module name="TodoComment"/-->
-    <module name="UpperEll"/>
-
-    <!-- Make the @SuppressWarnings annotations available to Checkstyle -->
-    <module name="SuppressWarningsHolder"/>
-  </module>
-</module>
diff --git a/deploy_website.sh b/deploy_website.sh
deleted file mode 100755
index 43fb0f485f..0000000000
--- a/deploy_website.sh
+++ /dev/null
@@ -1,70 +0,0 @@
-#!/bin/bash
-
-# The website is built using MkDocs with the Material theme.
-# https://squidfunk.github.io/mkdocs-material/
-# It requires Python to run.
-# Install the packages with the following command:
-# pip install mkdocs mkdocs-material
-
-set -ex
-
-REPO="git@github.com:square/okhttp.git"
-DIR=temp-clone
-
-# Delete any existing temporary website clone
-rm -rf $DIR
-
-# Clone the current repo into temp folder
-git clone $REPO $DIR
-
-# Move working directory into temp folder
-cd $DIR
-
-# Generate the API docs
-./gradlew \
-  :mockwebserver:dokka \
-  :okhttp-brotli:dokka \
-  :okhttp-dnsoverhttps:dokka \
-  :okhttp-logging-interceptor:dokka \
-  :okhttp-sse:dokka \
-  :okhttp-tls:dokka \
-  :okhttp-urlconnection:dokka \
-  :okhttp:dokka
-
-# Dokka filenames like `-http-url/index.md` don't work well with MkDocs <title> tags.
-# Assign metadata to the file's first Markdown heading.
-# https://www.mkdocs.org/user-guide/writing-your-docs/#meta-data
-title_markdown_file() {
-  TITLE_PATTERN="s/^[#]+ *(.*)/title: \1 - OkHttp/"
-  echo "---"                                                     > "$1.fixed"
-  cat $1 | sed -E "$TITLE_PATTERN" | grep "title: " | head -n 1 >> "$1.fixed"
-  echo "---"                                                    >> "$1.fixed"
-  echo                                                          >> "$1.fixed"
-  cat $1                                                        >> "$1.fixed"
-  mv "$1.fixed" "$1"
-}
-
-set +x
-for MARKDOWN_FILE in $(find docs/4.x/ -name '*.md'); do
-  echo $MARKDOWN_FILE
-  title_markdown_file $MARKDOWN_FILE
-done
-set -x
-
-# Copy in special files that GitHub wants in the project root.
-cat README.md | grep -v 'project website' > docs/index.md
-cp CHANGELOG.md docs/changelog.md
-cp CONTRIBUTING.md docs/contributing.md
-
-# Build the site and push the new files up to GitHub
-mkdocs gh-deploy
-
-# Restore Javadocs from 1.x, 2.x, and 3.x.
-git checkout gh-pages
-git cherry-pick bb229b9dcc9a21a73edbf8d936bea88f52e0a3ff
-git cherry-pick c695732f1d4aea103b826876c077fbfea630e244
-git push
-
-# Delete our temp folder
-cd ..
-rm -rf $DIR
diff --git a/docs/calls.md b/docs/calls.md
deleted file mode 100644
index 38b7c25cd6..0000000000
--- a/docs/calls.md
+++ /dev/null
@@ -1,52 +0,0 @@
-# Calls
-
-The HTTP client’s job is to accept your request and produce its response. This is simple in theory but it gets tricky in practice.
-
-## [Requests](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-request/)
-
-Each HTTP request contains a URL, a method (like `GET` or `POST`), and a list of headers. Requests may also contain a body: a data stream of a specific content type.
-
-## [Responses](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-response/)
-
-The response answers the request with a code (like 200 for success or 404 for not found), headers, and its own optional body.
-
-## Rewriting Requests
-
-When you provide OkHttp with an HTTP request, you’re describing the request at a high-level: _“fetch me this URL with these headers.”_ For correctness and efficiency, OkHttp rewrites your request before transmitting it.
-
-OkHttp may add headers that are absent from the original request, including `Content-Length`, `Transfer-Encoding`, `User-Agent`, `Host`, `Connection`, and `Content-Type`. It will add an `Accept-Encoding` header for transparent response compression unless the header is already present. If you’ve got cookies, OkHttp will add a `Cookie` header with them.
-
-Some requests will have a cached response. When this cached response isn’t fresh, OkHttp can do a _conditional GET_ to download an updated response if it’s newer than what’s cached. This requires headers like `If-Modified-Since` and `If-None-Match` to be added.
-
-## Rewriting Responses
-
-If transparent compression was used, OkHttp will drop the corresponding response headers `Content-Encoding` and `Content-Length` because they don’t apply to the decompressed response body.
-
-If a conditional GET was successful, responses from the network and cache are merged as directed by the spec.
-
-## Follow-up Requests
-
-When your requested URL has moved, the webserver will return a response code like `302` to indicate the document’s new URL. OkHttp will follow the redirect to retrieve a final response.
-
-If the response issues an authorization challenge, OkHttp will ask the [`Authenticator`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-authenticator/) (if one is configured) to satisfy the challenge. If the authenticator supplies a credential, the request is retried with that credential included.
-
-## Retrying Requests
-
-Sometimes connections fail: either a pooled connection was stale and disconnected, or the webserver itself couldn’t be reached. OkHttp will retry the request with a different route if one is available.
-
-## [Calls](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-call/)
-
-With rewrites, redirects, follow-ups and retries, your simple request may yield many requests and responses. OkHttp uses `Call` to model the task of satisfying your request through however many intermediate requests and responses are necessary. Typically this isn’t many! But it’s comforting to know that your code will continue to work if your URLs are redirected or if you failover to an alternate IP address.
-
-Calls are executed in one of two ways:
-
- * **Synchronous:** your thread blocks until the response is readable.
- * **Asynchronous:** you enqueue the request on any thread, and get [called back](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-callback/) on another thread when the response is readable.
-
-Calls can be canceled from any thread. This will fail the call if it hasn’t yet completed! Code that is writing the request body or reading the response body will suffer an `IOException` when its call is canceled.
-
-## Dispatch
-
-For synchronous calls, you bring your own thread and are responsible for managing how many simultaneous requests you make. Too many simultaneous connections wastes resources; too few harms latency.
-
-For asynchronous calls, [`Dispatcher`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-dispatcher/) implements policy for maximum simultaneous requests. You can set maximums per-webserver (default is 5), and overall (default is 64).
diff --git a/docs/changelog_1x.md b/docs/changelog_1x.md
deleted file mode 100644
index fba6c701f9..0000000000
--- a/docs/changelog_1x.md
+++ /dev/null
@@ -1,195 +0,0 @@
-OkHttp 1.x Change Log
-=====================
-
-## Version 1.6.0
-
-_2014-05-23_
-
- * Offer bridges to make it easier to migrate from OkHttp 1.x to OkHttp 2.0.
-   This adds `OkUrlFactory`, `Cache`, and `@Deprecated` annotations for APIs
-   dropped in 2.0.
-
-## Version 1.5.4
-
-_2014-04-14_
-
- * Drop ALPN support in Android. There's a concurrency bug in all
-   currently-shipping versions.
- * Support asynchronous disconnects by breaking the socket only. This should
-   prevent flakiness from multiple threads concurrently accessing a stream.
-
-## Version 1.5.3
-
-_2014-03-29_
-
- * Fix bug where the Content-Length header was not always dropped when
-   following a redirect from a POST to a GET.
- * Implement basic support for `Thread.interrupt()`. OkHttp now checks
-   for an interruption before doing a blocking call. If it is interrupted,
-   it throws an `InterruptedIOException`.
-
-## Version 1.5.2
-
-_2014-03-17_
-
- * Fix bug where deleting a file that was absent from the `HttpResponseCache`
-   caused an IOException.
- * Fix bug in HTTP/2 where our HPACK decoder wasn't emitting entries in
-   certain eviction scenarios, leading to dropped response headers.
-
-## Version 1.5.1
-
-_2014-03-11_
-
- * Fix 1.5.0 regression where connections should not have been recycled.
- * Fix 1.5.0 regression where transparent Gzip was broken by attempting to
-   recover from another I/O failure.
- * Fix problems where spdy/3.1 headers may not have been compressed properly.
- * Fix problems with spdy/3.1 and http/2 where the wrong window size was being
-   used.
- * Fix 1.5.0 regression where conditional cache responses could corrupt the
-   connection pool.
-
-
-## Version 1.5.0
-
-_2014-03-07_
-
-
-##### OkHttp no longer uses the default SSL context.
-
-Applications that want to use the global SSL context with OkHttp should configure their
-OkHttpClient instances with the following:
-
-```java
-okHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());
-```
-
-A simpler solution is to avoid the shared default SSL socket factory. Instead, if you
-need to customize SSL, do so for your specific OkHttpClient instance only.
-
-##### Synthetic headers have changed
-
-Previously OkHttp added a synthetic response header, `OkHttp-Selected-Transport`. It
-has been replaced with a new synthetic header, `OkHttp-Selected-Protocol`.
-
-##### Changes
-
- * New: Support for `HTTP-draft-09/2.0`.
- * New: Support for `spdy/3.1`. Dropped support for `spdy/3`.
- * New: Use ALPN on Android platforms that support it (4.4+)
- * New: CacheControl model and parser.
- * New: Protocol selection in MockWebServer.
- * Fix: Route selection shouldn't use TLS modes that we know will fail.
- * Fix: Cache SPDY responses even if the response body is closed prematurely.
- * Fix: Use strict timeouts when aborting a download.
- * Fix: Support Shoutcast HTTP responses like `ICY 200 OK`.
- * Fix: Don't unzip if there isn't a response body.
- * Fix: Don't leak gzip streams on redirects.
- * Fix: Don't do DNS lookups on invalid hosts.
- * Fix: Exhaust the underlying stream when reading gzip streams.
- * Fix: Support the `PATCH` method.
- * Fix: Support request bodies on `DELETE` method.
- * Fix: Drop the `okhttp-protocols` module.
- * Internal: Replaced internal byte array buffers with pooled buffers ("OkBuffer").
-
-
-## Version 1.3.0
-
-_2014-01-11_
-
- * New: Support for "PATCH" HTTP method in client and MockWebServer.
- * Fix: Drop `Content-Length` header when redirected from POST to GET.
- * Fix: Correctly read cached header entries with malformed header names.
- * Fix: Do not directly support any authentication schemes other than "Basic".
- * Fix: Respect read timeouts on recycled connections.
- * Fix: Transmit multiple cookie values as a single header with delimiter.
- * Fix: Ensure `null` is never returned from a connection's `getHeaderFields()`.
- * Fix: Persist proper `Content-Encoding` header to cache for GZip responses.
- * Fix: Eliminate rare race condition in SPDY streams that would prevent connection reuse.
- * Fix: Change HTTP date formats to UTC to conform to RFC2616 section 3.3.
- * Fix: Support SPDY header blocks with trailing bytes.
- * Fix: Allow `;` as separator for `Cache-Control` header.
- * Fix: Correct bug where HTTPS POST requests were always automatically buffered.
- * Fix: Honor read timeout when parsing SPDY headers.
-
-
-## Version 1.2.1
-
-_2013-08-23_
-
- * Resolve issue with 'jar-with-dependencies' artifact creation.
- * Fix: Support empty SPDY header values.
-
-
-## Version 1.2.0
-
-_2013-08-11_
-
- *  New APIs on OkHttpClient to set default timeouts for connect and read.
- *  Fix bug when caching SPDY responses.
- *  Fix a bug with SPDY plus half-closed streams. (thanks kwuollett)
- *  Fix a bug in `Content-Length` reporting for gzipped streams in the Apache
-    HTTP client adapter. (thanks kwuollett)
- *  Work around the Alcatel `getByInetAddress` bug (thanks k.kocel)
- *  Be more aggressive about testing pooled sockets before reuse. (thanks
-    warpspin)
- *  Include `Content-Type` and `Content-Encoding` in the Apache HTTP client
-    adapter. (thanks kwuollett)
- *  Add a media type class to OkHttp.
- *  Change custom header prefix:
-
-    ```
-    X-Android-Sent-Millis is now OkHttp-Sent-Millis
-    X-Android-Received-Millis is now OkHttp-Received-Millis
-    X-Android-Response-Source is now OkHttp-Response-Source
-    X-Android-Selected-Transport is now OkHttp-Selected-Transport
-    ```
- *  Improve cache invalidation for POST-like requests.
- *  Bring MockWebServer into OkHttp and teach it SPDY.
-
-
-## Version 1.1.1
-
-_2013-06-23_
-
- * Fix: ClassCastException when caching responses that were redirected from
-   HTTP to HTTPS.
-
-
-## Version 1.1.0
-
-_2013-06-15_
-
- * Fix: Connection reuse was broken for most HTTPS connections due to a bug in
-   the way the hostname verifier was selected.
- * Fix: Locking bug in SpdyConnection.
- * Fix: Ignore null header values (for compatibility with HttpURLConnection).
- * Add URLStreamHandlerFactory support so that `URL.openConnection()` uses
-   OkHttp.
- * Expose the transport ("http/1.1", "spdy/3", etc.) via magic request headers.
-   Use `X-Android-Transports` to write the preferred transports and
-   `X-Android-Selected-Transport` to read the negotiated transport.
-
-
-## Version 1.0.2
-
-_2013-05-11_
-
- * Fix: Remove use of Java 6-only APIs.
- * Fix: Properly handle exceptions from `NetworkInterface` when querying MTU.
- * Fix: Ensure MTU has a reasonable default and upper-bound.
-
-
-## Version 1.0.1
-
-_2013-05-06_
-
- * Correct casing of SSL in method names (`getSslSocketFactory`/`setSslSocketFactory`).
-
-
-## Version 1.0.0
-
-_2013-05-06_
-
-Initial release.
diff --git a/docs/changelog_2x.md b/docs/changelog_2x.md
deleted file mode 100644
index b64593efab..0000000000
--- a/docs/changelog_2x.md
+++ /dev/null
@@ -1,630 +0,0 @@
-OkHttp 2.x Change Log
-=====================
-
-## Version 2.7.5
-
-_2016-02-25_
-
- *  Fix: Change the certificate pinner to always build full chains. This
-    prevents a potential crash when using certificate pinning with the Google
-    Play Services security provider.
-
-
-## Version 2.7.4
-
-_2016-02-07_
-
- *  Fix: Don't crash when finding the trust manager if the Play Services (GMS)
-    security provider is installed.
- *  Fix: The previous release introduced a performance regression on Android,
-    caused by looking up CA certificates. This is now fixed.
-
-
-## Version 2.7.3
-
-_2016-02-06_
-
- *  Fix: Permit the trusted CA root to be pinned by `CertificatePinner`.
-
-
-## Version 2.7.2
-
-_2016-01-07_
-
- *  Fix: Don't eagerly release stream allocations on cache hits. We might still
-    need them to handle redirects.
-
-
-## Version 2.7.1
-
-_2016-01-01_
-
- *  Fix: Don't do a health check on newly-created connections. This is
-    unnecessary work that could put the client in an inconsistent state if the
-    health check fails.
-
-
-## Version 2.7.0
-
-_2015-12-13_
-
- *  **Rewritten connection management.** Previously OkHttp's connection pool
-    managed both idle and active connections for HTTP/2, but only idle
-    connections for HTTP/1.x. With this update the connection pool manages both
-    idle and active connections for everything. OkHttp now detects and warns on
-    connections that were allocated but never released, and will enforce HTTP/2
-    stream limits. This update also fixes `Call.cancel()` to not do I/O on the
-    calling thread.
- *  Fix: Don't log gzipped data in the logging interceptor.
- *  Fix: Don't resolve DNS addresses when connecting through a SOCKS proxy.
- *  Fix: Drop the synthetic `OkHttp-Selected-Protocol` response header.
- *  Fix: Support 204 and 205 'No Content' replies in the logging interceptor.
- *  New: Add `Call.isExecuted()`.
-
-
-## Version 2.6.0
-
-_2015-11-22_
-
- *  **New Logging Interceptor.** The `logging-interceptor` subproject offers
-    simple request and response logging. It may be configured to log headers and
-    bodies for debugging. It requires this Maven dependency:
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okhttp</groupId>
-       <artifactId>logging-interceptor</artifactId>
-       <version>2.6.0</version>
-     </dependency>
-     ```
-
-    Configure basic logging like this:
-
-    ```java
-    HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
-    loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);
-    client.networkInterceptors().add(loggingInterceptor);
-    ```
-
-    **Warning:** Avoid `Level.HEADERS` and `Level.BODY` in production because
-    they could leak passwords and other authentication credentials to insecure
-    logs.
-
- *  **WebSocket API now uses `RequestBody` and `ResponseBody` for messages.**
-    This is a backwards-incompatible API change.
-
- *  **The DNS service is now pluggable.** In some situations this may be useful
-    to manually prioritize specific IP addresses.
-
- *  Fix: Don't throw when converting an `HttpUrl` to a `java.net.URI`.
-    Previously URLs with special characters like `|` and `[` would break when
-    subjected to URI’s overly-strict validation.
- *  Fix: Don't re-encode `+` as `%20` in encoded URL query strings. OkHttp
-    prefers `%20` when doing its own encoding, but will retain `+` when that is
-    provided.
- *  Fix: Enforce that callers call `WebSocket.close()` on IO errors. Error
-    handling in WebSockets is significantly improved.
- *  Fix: Don't use SPDY/3 style header concatenation for HTTP/2 request headers.
-    This could have corrupted requests where multiple headers had the same name,
-    as in cookies.
- *  Fix: Reject bad characters in the URL hostname. Previously characters like
-    `\0` would cause a late crash when building the request.
- *  Fix: Allow interceptors to change the request method.
- *  Fix: Don’t use the request's `User-Agent` or `Proxy-Authorization` when
-    connecting to an HTTPS server via an HTTP tunnel. The `Proxy-Authorization`
-    header was being leaked to the origin server.
- *  Fix: Digits may be used in a URL scheme.
- *  Fix: Improve connection timeout recovery.
- *  Fix: Recover from `getsockname` crashes impacting Android releases prior to
-    4.2.2.
- *  Fix: Drop partial support for HTTP/1.0. Previously OkHttp would send
-    `HTTP/1.0` on connections after seeing a response with `HTTP/1.0`. The fixed
-    behavior is consistent with Firefox and Chrome.
- *  Fix: Allow a body in `OPTIONS` requests.
- *  Fix: Don't percent-encode non-ASCII characters in URL fragments.
- *  Fix: Handle null fragments.
- *  Fix: Don’t crash on interceptors that throw `IOException` before a
-    connection is attempted.
- *  New: Support [WebDAV][webdav] HTTP methods.
- *  New: Buffer WebSocket frames for better performance.
- *  New: Drop support for `TLS_DHE_DSS_WITH_AES_128_CBC_SHA`, our only remaining
-    DSS cipher suite. This is consistent with Firefox and Chrome which have also
-    dropped these cipher suite.
-
-## Version 2.5.0
-
-_2015-08-25_
-
- *  **Timeouts now default to 10 seconds.** Previously we defaulted to never
-    timing out, and that was a lousy policy. If establishing a connection,
-    reading the next byte from a connection, or writing the next byte to a
-    connection takes more than 10 seconds to complete, you’ll need to adjust
-    the timeouts manually.
-
- *  **OkHttp now rejects request headers that contain invalid characters.** This
-    includes potential security problems (newline characters) as well as simple
-    non-ASCII characters (including international characters and emoji).
-
- *  **Call canceling is more reliable.**  We had a bug where a socket being
-     connected wasn't being closed when the application used `Call.cancel()`.
-
- *  **Changing a HttpUrl’s scheme now tracks the default port.** We had a bug
-    where changing a URL from `http` to `https` would leave it on port 80.
-
- *  **Okio has been updated to 1.6.0.**
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.6.0</version>
-     </dependency>
-     ```
-
- *  New: `Cache.initialize()`. Call this on a background thread to eagerly
-    initialize the response cache.
- *  New: Fold `MockWebServerRule` into `MockWebServer`. This makes it easier to
-    write JUnit tests with `MockWebServer`. The `MockWebServer` library now
-    depends on JUnit, though it continues to work with all testing frameworks.
- *  Fix: `FormEncodingBuilder` is now consistent with browsers in which
-    characters it escapes. Previously we weren’t percent-encoding commas,
-    parens, and other characters.
- *  Fix: Relax `FormEncodingBuilder` to support building empty forms.
- *  Fix: Timeouts throw `SocketTimeoutException`, not `InterruptedIOException`.
- *  Fix: Change `MockWebServer` to use the same logic as OkHttp when determining
-    whether an HTTP request permits a body.
- *  Fix: `HttpUrl` now uses the canonical form for IPv6 addresses.
- *  Fix: Use `HttpUrl` internally.
- *  Fix: Recover from Android 4.2.2 EBADF crashes.
- *  Fix: Don't crash with an `IllegalStateException` if an HTTP/2 or SPDY
-    write fails, leaving the connection in an inconsistent state.
- *  Fix: Make sure the default user agent is ASCII.
-
-
-## Version 2.4.0
-
-_2015-05-22_
-
- *  **Forbid response bodies on HTTP 204 and 205 responses.** Webservers that
-    return such malformed responses will now trigger a `ProtocolException` in
-    the client.
-
- *  **WebSocketListener has incompatible changes.** The `onOpen()` method is now
-    called on the reader thread, so implementations must return before further
-    websocket messages will be delivered. The `onFailure()` method now includes
-    an HTTP response if one was returned.
-
-## Version 2.4.0-RC1
-
-_2015-05-16_
-
- *  **New HttpUrl API.** It's like `java.net.URL` but good. Note that
-    `Request.Builder.url()` now throws `IllegalArgumentException` on malformed
-    URLs. (Previous releases would throw a `MalformedURLException` when calling
-    a malformed URL.)
-
- *  **We've improved connect failure recovery.** We now differentiate between
-    setup, connecting, and connected and implement appropriate recovery rules
-    for each. This changes `Address` to no longer use `ConnectionSpec`. (This is
-    an incompatible API change).
-
- *  **`FormEncodingBuilder` now uses `%20` instead of `+` for encoded spaces.**
-    Both are permitted-by-spec, but `%20` requires fewer special cases.
-
- *  **Okio has been updated to 1.4.0.**
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.4.0</version>
-     </dependency>
-     ```
-
- *  **`Request.Builder` no longer accepts null if a request body is required.**
-    Passing null will now fail for request methods that require a body. Instead
-    use an empty body such as this one:
-
-    ```java
-        RequestBody.create(null, new byte[0]);
-    ```
-
- * **`CertificatePinner` now supports wildcard hostnames.** As always with
-   certificate pinning, you must be very careful to avoid [bricking][brick]
-   your app. You'll need to pin both the top-level domain and the `*.` domain
-   for full coverage.
-
-    ```java
-     client.setCertificatePinner(new CertificatePinner.Builder()
-         .add("publicobject.com",   "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
-         .add("*.publicobject.com", "sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=")
-         .add("publicobject.com",   "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
-         .add("*.publicobject.com", "sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=")
-         .add("publicobject.com",   "sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=")
-         .add("*.publicobject.com", "sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=")
-         .add("publicobject.com",   "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=")
-         .add("*.publicobject.com", "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=")
-         .build());
-    ```
-
- *  **Interceptors lists are now deep-copied by `OkHttpClient.clone()`.**
-    Previously clones shared interceptors, which made it difficult to customize
-    the interceptors on a request-by-request basis.
-
- *  New: `Headers.toMultimap()`.
- *  New: `RequestBody.create(MediaType, ByteString)`.
- *  New: `ConnectionSpec.isCompatible(SSLSocket)`.
- *  New: `Dispatcher.getQueuedCallCount()` and
-    `Dispatcher.getRunningCallCount()`. These can be useful in diagnostics.
- *  Fix: OkHttp no longer shares timeouts between pooled connections. This was
-    causing some applications to crash when connections were reused.
- *  Fix: `OkApacheClient` now allows an empty `PUT` and `POST`.
- *  Fix: Websockets no longer rebuffer socket streams.
- *  Fix: Websockets are now better at handling close frames.
- *  Fix: Content type matching is now case insensitive.
- *  Fix: `Vary` headers are not lost with `android.net.http.HttpResponseCache`.
- *  Fix: HTTP/2 wasn't enforcing stream timeouts when writing the underlying
-    connection. Now it is.
- *  Fix: Never return null on `call.proceed()`. This was a bug in call
-    cancelation.
- *  Fix: When a network interceptor mutates a request, that change is now
-    reflected in `Response.networkResponse()`.
- *  Fix: Badly-behaving caches now throw a checked exception instead of a
-    `NullPointerException`.
- *  Fix: Better handling of uncaught exceptions in MockWebServer with HTTP/2.
-
-## Version 2.3.0
-
-_2015-03-16_
-
- *  **HTTP/2 support.** We've done interop testing and haven't seen any
-    problems. HTTP/2 support has been a big effort and we're particularly
-    thankful to Adrian Cole who has helped us to reach this milestone.
-
- *  **RC4 cipher suites are no longer supported by default.** To connect to
-    old, obsolete servers relying on these cipher suites, you must create a
-    custom `ConnectionSpec`.
-
- *  **Beta WebSockets support.**. The `okhttp-ws` subproject offers a new
-    websockets client. Please try it out! When it's ready we intend to include
-    it with the core OkHttp library.
-
- *  **Okio updated to 1.3.0.**
-
-    ```xml
-    <dependency>
-      <groupId>com.squareup.okio</groupId>
-      <artifactId>okio</artifactId>
-      <version>1.3.0</version>
-    </dependency>
-    ```
-
- *  **Fix: improve parallelism of async requests.** OkHttp's Dispatcher had a
-    misconfigured `ExecutorService` that limited the number of worker threads.
-    If you're using `Call.enqueue()` this update should significantly improve
-    request concurrency.
-
- *  **Fix: Lazily initialize the response cache.** This avoids strict mode
-    warnings when initializing OkHttp on Android‘s main thread.
-
- *  **Fix: Disable ALPN on Android 4.4.** That release of the feature was
-    unstable and prone to native crashes in the underlying OpenSSL code.
- *  Fix: Don't send both `If-None-Match` and `If-Modified-Since` cache headers
-    when both are applicable.
- *  Fix: Fail early when a port is out of range.
- *  Fix: Offer `Content-Length` headers for multipart request bodies.
- *  Fix: Throw `UnknownServiceException` if a cleartext connection is attempted
-    when explicitly forbidden.
- *  Fix: Throw a `SSLPeerUnverifiedException` when host verification fails.
- *  Fix: MockWebServer explicitly closes sockets. (On some Android releases,
-    closing the input stream and output stream of a socket is not sufficient.
- *  Fix: Buffer outgoing HTTP/2 frames to limit how many outgoing frames are
-    created.
- *  Fix: Avoid crashing when cache writing fails due to a full disk.
- *  Fix: Improve caching of private responses.
- *  Fix: Update cache-by-default response codes.
- *  Fix: Reused `Request.Builder` instances no longer hold stale URL fields.
- *  New: ConnectionSpec can now be configured to use the SSL socket's default
-    cipher suites. To use, set the cipher suites to `null`.
- *  New: Support `DELETE` with a request body.
- *  New: `Headers.of(Map)` creates headers from a Map.
-
-
-## Version 2.2.0
-
-_2014-12-30_
-
- *  **`RequestBody.contentLength()` now throws `IOException`.**
-    This is a source-incompatible change. If you have code that calls
-    `RequestBody.contentLength()`, your compile will break with this
-    update. The change is binary-compatible, however: code compiled
-    for OkHttp 2.0 and 2.1 will continue to work with this update.
-
- *  **`COMPATIBLE_TLS` no longer supports SSLv3.** In response to the
-    [POODLE](https://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html)
-    vulnerability, OkHttp no longer offers SSLv3 when negotiation an
-    HTTPS connection. If you continue to need to connect to webservers
-    running SSLv3, you must manually configure your own `ConnectionSpec`.
-
- *  **OkHttp now offers interceptors.** Interceptors are a powerful mechanism
-    that can monitor, rewrite, and retry calls. The [interceptors doc][interceptors] is a full
-    introduction to this new API.
-
- *  New: APIs to iterate and selectively clear the response cache.
- *  New: Support for SOCKS proxies.
- *  New: Support for `TLS_FALLBACK_SCSV`.
- *  New: Update HTTP/2 support to `h2-16` and `hpack-10`.
- *  New: APIs to prevent retrying non-idempotent requests.
- *  Fix: Drop NPN support. Going forward we support ALPN only.
- *  Fix: The hostname verifier is now strict. This is consistent with the hostname
-    verifier in modern browsers.
- *  Fix: Improve `CONNECT` handling for misbehaving HTTP proxies.
- *  Fix: Don't retry requests that failed due to timeouts.
- *  Fix: Cache 302s and 308s that include appropriate response headers.
- *  Fix: Improve pooling of connections that use proxy selectors.
- *  Fix: Don't leak connections when using ALPN on the desktop.
- *  Fix: Update Jetty ALPN to `7.1.2.v20141202` (Java 7) and `8.1.2.v20141202` (Java 8).
-    This fixes a bug in resumed TLS sessions where the wrong protocol could be
-    selected.
- *  Fix: Don't crash in SPDY and HTTP/2 when disconnecting before connecting.
- *  Fix: Avoid a reverse DNS-lookup for a numeric proxy address
- *  Fix: Resurrect http/2 frame logging.
- *  Fix: Limit to 20 authorization attempts.
-
-## Version 2.1.0
-
-_2014-11-11_
-
- *  New: Typesafe APIs for interacting with cipher suites and TLS versions.
- *  Fix: Don't crash when mixing authorization challenges with upload retries.
-
-
-## Version 2.1.0-RC1
-
-_2014-11-04_
-
- *  **OkHttp now caches private responses**. We've changed from a shared cache
-    to a private cache, and will now store responses that use an `Authorization`
-    header. This means OkHttp's cache shouldn't be used on middleboxes that sit
-    between user agents and the origin server.
-
- *  **TLS configuration updated.** OkHttp now explicitly enables TLSv1.2,
-    TLSv1.1 and TLSv1.0 where they are supported. It will continue to perform
-    only one fallback, to SSLv3. Applications can now configure this with the
-    `ConnectionSpec` class.
-
-    To disable TLS fallback:
-
-    ```java
-    client.setConnectionSpecs(Arrays.asList(
-        ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));
-    ```
-
-    To disable cleartext connections, permitting `https` URLs only:
-
-    ```java
-    client.setConnectionSpecs(Arrays.asList(
-        ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));
-    ```
-
- *  **New cipher suites.** Please confirm that your webservers are reachable
-    with this limited set of cipher suites.
-
-    ```
-                                             Android
-    Name                                     Version
-
-    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  5.0
-    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    5.0
-    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      5.0
-    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     4.0
-    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     4.0
-    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       4.0
-    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       4.0
-    TLS_ECDHE_ECDSA_WITH_RC4_128_SHA         4.0
-    TLS_ECDHE_RSA_WITH_RC4_128_SHA           4.0
-    TLS_DHE_RSA_WITH_AES_128_CBC_SHA         2.3
-    TLS_DHE_DSS_WITH_AES_128_CBC_SHA         2.3
-    TLS_DHE_RSA_WITH_AES_256_CBC_SHA         2.3
-    TLS_RSA_WITH_AES_128_GCM_SHA256          5.0
-    TLS_RSA_WITH_AES_128_CBC_SHA             2.3
-    TLS_RSA_WITH_AES_256_CBC_SHA             2.3
-    SSL_RSA_WITH_3DES_EDE_CBC_SHA            2.3  (Deprecated in 5.0)
-    SSL_RSA_WITH_RC4_128_SHA                 2.3
-    SSL_RSA_WITH_RC4_128_MD5                 2.3  (Deprecated in 5.0)
-    ```
-
- *  **Okio updated to 1.0.1.**
-
-    ```xml
-    <dependency>
-      <groupId>com.squareup.okio</groupId>
-      <artifactId>okio</artifactId>
-      <version>1.0.1</version>
-    </dependency>
-    ```
-
- *  **New APIs to permit easy certificate pinning.** Be warned, certificate
-    pinning is dangerous and could prevent your application from trusting your
-    server!
-
- *  **Cache improvements.** This release fixes some severe cache problems
-    including a bug where the cache could be corrupted upon certain access
-    patterns. We also fixed a bug where the cache was being cleared due to a
-    corrupted journal. We've added APIs to configure a request's `Cache-Control`
-    headers, and to manually clear the cache.
-
- *  **Request cancellation fixes.** This update fixes a bug where synchronous
-    requests couldn't be canceled by tag. This update avoids crashing when
-    `onResponse()` throws an `IOException`. That failure will now be logged
-    instead of notifying the thread's uncaught exception handler. We've added a
-    new API, `Call.isCanceled()` to check if a call has been canceled.
-
- *  New: Update `MultipartBuilder` to support content length.
- *  New: Make it possible to mock `OkHttpClient` and `Call`.
- *  New: Update to h2-14 and hpack-9.
- *  New: OkHttp includes a user-agent by default, like `okhttp/2.1.0-RC1`.
- *  Fix: Handle response code `308 Permanent Redirect`.
- *  Fix: Don't skip the callback if a call is canceled.
- *  Fix: Permit hostnames with underscores.
- *  Fix: Permit overriding the content-type in `OkApacheClient`.
- *  Fix: Use the socket factory for direct connections.
- *  Fix: Honor `OkUrlFactory` APIs that disable redirects.
- *  Fix: Don't crash on concurrent modification of `SPDY` SPDY settings.
-
-## Version 2.0.0
-
-This release commits to a stable 2.0 API. Read the 2.0.0-RC1 changes for advice
-on upgrading from 1.x to 2.x.
-
-_2014-06-21_
-
- *  **API Change**: Use `IOException` in `Callback.onFailure()`. This is
-    a source-incompatible change, and is different from OkHttp 2.0.0-RC2 which
-    used `Throwable`.
- *  Fix: Fixed a caching bug where we weren't storing rewritten request headers
-    like `Accept-Encoding`.
- *  Fix: Fixed bugs in handling the SPDY window size. This was stalling certain
-    large downloads
- *  Update the language level to Java 7. (OkHttp requires Android 2.3+ or Java 7+.)
-
-## Version 2.0.0-RC2
-
-_2014-06-11_
-
-This update fixes problems in 2.0.0-RC1. Read the 2.0.0-RC1 changes for
-advice on upgrading from 1.x to 2.x.
-
- *  Fix: Don't leak connections! There was a regression in 2.0.0-RC1 where
-    connections were neither closed nor pooled.
- *  Fix: Revert builder-style return types from OkHttpClient's timeout methods
-    for binary compatibility with OkHttp 1.x.
- *  Fix: Don't skip client stream 1 on SPDY/3.1. This fixes SPDY connectivity to
-    `https://google.com`, which doesn't follow the SPDY/3.1 spec!
- *  Fix: Always configure NPN headers. This fixes connectivity to
-    `https://facebook.com` when SPDY and HTTP/2 are both disabled. Otherwise an
-    unexpected NPN response is received and OkHttp crashes.
- *  Fix: Write continuation frames when HPACK data is larger than 16383 bytes.
- *  Fix: Don't drop uncaught exceptions thrown in async calls.
- *  Fix: Throw an exception eagerly when a request body is not legal. Previously
-    we ignored the problem at request-building time, only to crash later with a
-    `NullPointerException`.
- *  Fix: Include a backwards-compatible `OkHttp-Response-Source` header with
-    `OkUrlFactory `responses.
- *  Fix: Don't include a default User-Agent header in requests made with the Call
-    API. Requests made with OkUrlFactory will continue to have a default user
-    agent.
- *  New: Guava-like API to create headers:
-
-    ```java
-    Headers headers = Headers.of(name1, value1, name2, value2, ...).
-    ```
-
- *  New: Make the content-type header optional for request bodies.
- *  New: `Response.isSuccessful()` is a convenient API to check response codes.
- *  New: The response body can now be read outside of the callback. Response
-    bodies must always be closed, otherwise they will leak connections!
- *  New: APIs to create multipart request bodies (`MultipartBuilder`) and form
-    encoding bodies (`FormEncodingBuilder`).
-
-## Version 2.0.0-RC1
-
-_2014-05-23_
-
-OkHttp 2 is designed around a new API that is true to HTTP, with classes for
-requests, responses, headers, and calls. It uses modern Java patterns like
-immutability and chained builders. The API now offers asynchronous callbacks
-in addition to synchronous blocking calls.
-
-#### API Changes
-
- *  **New Request and Response types,** each with their own builder. There's also
-    a `RequestBody` class to write the request body to the network and a
-    `ResponseBody` to read the response body from the network. The standalone
-    `Headers` class offers full access to the HTTP headers.
-
- *  **Okio dependency added.** OkHttp now depends on
-    [Okio](https://github.com/square/okio), an I/O library that makes it easier
-    to access, store and process data. Using this library internally makes OkHttp
-    faster while consuming less memory. You can write a `RequestBody` as an Okio
-    `BufferedSink` and a `ResponseBody` as an Okio `BufferedSource`. Standard
-    `InputStream` and `OutputStream` access is also available.
-
- *  **New Call and Callback types** execute requests and receive their
-    responses. Both types of calls can be canceled via the `Call` or the
-    `OkHttpClient`.
-
- *  **URLConnection support has moved to the okhttp-urlconnection module.**
-    If you're upgrading from 1.x, this change will impact you. You will need to
-    add the `okhttp-urlconnection` module to your project and use the
-    `OkUrlFactory` to create new instances of `HttpURLConnection`:
-
-    ```java
-    // OkHttp 1.x:
-    HttpURLConnection connection = client.open(url);
-
-    // OkHttp 2.x:
-    HttpURLConnection connection = new OkUrlFactory(client).open(url);
-    ```
-
- *  **Custom caches are no longer supported.** In OkHttp 1.x it was possible to
-    define your own response cache with the `java.net.ResponseCache` and OkHttp's
-    `OkResponseCache` interfaces. Both of these APIs have been dropped. In
-    OkHttp 2 the built-in disk cache is the only supported response cache.
-
- *  **HttpResponseCache has been renamed to Cache.** Install it with
-    `OkHttpClient.setCache(...)` instead of `OkHttpClient.setResponseCache(...)`.
-
- *  **OkAuthenticator has been replaced with Authenticator.** This new
-    authenticator has access to the full incoming response and can respond with
-    whichever followup request is appropriate. The `Challenge` class is now a
-    top-level class and `Credential` is replaced with a utility class called
-    `Credentials`.
-
- *  **OkHttpClient.getFollowProtocolRedirects() renamed to
-    getFollowSslRedirects()**. We reserve the word _protocol_ for the HTTP
-    version being used (HTTP/1.1, HTTP/2). The old name of this method was
-    misleading; it was always used to configure redirects between `https://` and
-    `http://` schemes.
-
- *  **RouteDatabase is no longer public API.** OkHttp continues to track which
-    routes have failed but this is no exposed in the API.
-
- *  **ResponseSource is gone.** This enum exposed whether a response came from
-    the cache, network, or both. OkHttp 2 offers more detail with raw access to
-    the cache and network responses in the new `Response` class.
-
- *  **TunnelRequest is gone.** It specified how to connect to an HTTP proxy.
-    OkHttp 2 uses the new `Request` class for this.
-
- *  **Dispatcher** is a new class that manages the queue of asynchronous calls. It
-    implements limits on total in-flight calls and in-flight calls per host.
-
-#### Implementation changes
-
- * Support Android `TrafficStats` socket tagging.
- * Drop authentication headers on redirect.
- * Added support for compressed data frames.
- * Process push promise callbacks in order.
- * Update to http/2 draft 12.
- * Update to HPACK draft 07.
- * Add ALPN support. Maven will use ALPN on OpenJDK 8.
- * Update NPN dependency to target `jdk7u60-b13` and `Oracle jdk7u55-b13`.
- * Ensure SPDY variants support zero-length DELETE and POST.
- * Prevent leaking a cache item's InputStreams when metadata read fails.
- * Use a string to identify TLS versions in routes.
- * Add frame logger for HTTP/2.
- * Replacing `httpMinorVersion` with `Protocol`. Expose HTTP/1.0 as a potential protocol.
- * Use `Protocol` to describe framing.
- * Implement write timeouts for HTTP/1.1 streams.
- * Avoid use of SPDY stream ID 1, as that's typically used for UPGRADE.
- * Support OAuth in `Authenticator`.
- * Permit a dangling semicolon in media type parsing.
-
-
-## Version 1.x
-
-[Change log](changelog_1x.md)
-
-
- [brick]: https://noncombatant.org/2015/05/01/about-http-public-key-pinning/
- [interceptors]: https://square.github.io/okhttp/interceptors/
- [webdav]: https://tools.ietf.org/html/rfc4918
diff --git a/docs/changelog_3x.md b/docs/changelog_3x.md
deleted file mode 100644
index a54dc7d4f7..0000000000
--- a/docs/changelog_3x.md
+++ /dev/null
@@ -1,1032 +0,0 @@
-OkHttp 3.x Change Log
-=====================
-
-## Version 3.14.4
-
-_2019-09-29_
-
- *  Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call
-    would never call back if it crashed with an unchecked throwable, such as a
-    `NullPointerException` or `OutOfMemoryError`. We now call `Callback.onFailure()` with an
-    `IOException` that reports the call as canceled. The triggering exception is still delivered to
-    the thread's `UncaughtExceptionHandler`.
- *  Fix: Don't evict incomplete entries when iterating the cache. We had a bug where iterating
-    `Cache.urls()` would prevent in-flight entries from being written.
-
-
-## Version 3.14.3
-
-_2019-09-10_
-
- *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this
-    happened enough then eventually the connection would stall.
-
- *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we
-    could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to
-    fail the call.
-
- *  Fix: Recover gracefully when a coalesced connection immediately goes unhealthy.
-
-## Version 3.14.2
-
-_2019-05-19_
-
- *  Fix: Lock in a route when recovering from an HTTP/2 connection error. We had a bug where two
-    calls that failed at the same time could cause OkHttp to crash with a `NoSuchElementException`
-    instead of the expected `IOException`.
-
- *  Fix: Don't crash with a `NullPointerException` when formatting an error message describing a
-    truncated response from an HTTPS proxy.
-
-
-## Version 3.14.1
-
-_2019-04-10_
-
- *  Fix: Don't crash when an interceptor retries when there are no more routes. This was an
-    edge-case regression introduced with the events cleanup in 3.14.0.
-
- *  Fix: Provide actionable advice when the exchange is non-null. Prior to 3.14, OkHttp would
-    silently leak connections when an interceptor retries without closing the response body. With
-    3.14 we detect this problem but the exception was not helpful.
-
-## Version 3.14.0
-
-_2019-03-14_
-
- *  **This release deletes the long-deprecated `OkUrlFactory` and `OkApacheClient` APIs.** These
-    facades hide OkHttp's implementation behind another client's API. If you still need this please
-    copy and paste [ObsoleteUrlFactory.java][obsolete_url_factory] or
-    [ObsoleteApacheClient.java][obsolete_apache_client] into your project.
-
- *  **OkHttp now supports duplex calls over HTTP/2.** With normal HTTP calls the request must finish
-    before the response starts. With duplex, request and response bodies are transmitted
-    simultaneously. This can be used to implement interactive conversations within a single HTTP
-    call.
-
-    Create duplex calls by overriding the new `RequestBody.isDuplex()` method to return true.
-    This simple option dramatically changes the behavior of the request body and of the entire
-    call.
-
-    The `RequestBody.writeTo()` method may now retain a reference to the provided sink and
-    hand it off to another thread to write to it after `writeTo` returns.
-
-    The `EventListener` may now see requests and responses interleaved in ways not previously
-    permitted. For example, a listener may receive `responseHeadersStart()` followed by
-    `requestBodyEnd()`, both on the same call. Such events may be triggered by different threads
-    even for a single call.
-
-    Interceptors that rewrite or replace the request body may now inadvertently interfere with
-    duplex request bodies. Such interceptors should check `RequestBody.isDuplex()` and avoid
-    accessing the request body when it is.
-
-    Duplex calls require HTTP/2. If HTTP/1 is established instead the duplex call will fail. The
-    most common use of duplex calls is [gRPC][grpc_http2].
-
- *  New: Prevent OkHttp from retransmitting a request body by overriding `RequestBody.isOneShot()`.
-    This is most useful when writing the request body is destructive.
-
- *  New: We've added `requestFailed()` and `responseFailed()` methods to `EventListener`. These
-    are called instead of `requestBodyEnd()` and `responseBodyEnd()` in some failure situations.
-    They may also be fired in cases where no event was published previously. In this release we did
-    an internal rewrite of our event code to fix problems where events were lost or unbalanced.
-
- *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`
-    callback.
-
- *  Fix: Apply call timeouts when connecting duplex calls, web sockets, and server-sent events.
-    Once the streams are established no further timeout is enforced.
-
- *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was
-    causing some `Authenticator` calls to see a null route when non-null was expected.
-
- *  Fix: Use the correct key size in the name of `TLS_AES_128_CCM_8_SHA256` which is a TLS 1.3
-    cipher suite. We accidentally specified a key size of 256, preventing that cipher suite from
-    being selected for any TLS handshakes. We didn't notice because this cipher suite isn't
-    supported on Android, Java, or Conscrypt.
-
-    We removed this cipher suite and `TLS_AES_128_CCM_SHA256` from the restricted, modern, and
-    compatible sets of cipher suites. These two cipher suites aren't enabled by default in either
-    Firefox or Chrome.
-
-    See our [TLS Configuration History][tls_configuration_history] tracker for a log of all changes
-    to OkHttp's default TLS options.
-
- *  New: Upgrade to Conscrypt 2.0.0. OkHttp works with other versions of Conscrypt but this is the
-    version we're testing against.
-
-    ```kotlin
-    implementation("org.conscrypt:conscrypt-openjdk-uber:2.0.0")
-    ```
-
- *  New: Update the embedded public suffixes list.
-
-
-## Version 3.13.1
-
-_2019-02-05_
-
- *  Fix: Don't crash when using a custom `X509TrustManager` or `SSLSocket` on Android. When we
-    removed obsolete code for Android 4.4 we inadvertently also removed support for custom
-    subclasses. We've restored that support!
-
-
-## Version 3.13.0
-
-_2019-02-04_
-
- *  **This release bumps our minimum requirements to Java 8+ or Android 5+.** Cutting off old
-    devices is a serious change and we don't do it lightly! [This post][require_android_5] explains
-    why we're doing this and how to upgrade.
-
-    The OkHttp 3.12.x branch will be our long-term branch for Android 2.3+ (API level 9+) and Java
-    7+. These platforms lack support for TLS 1.2 and should not be used. But because upgrading is
-    difficult we will backport critical fixes to the 3.12.x branch through December 31, 2020.
-
- *  **TLSv1 and TLSv1.1 are no longer enabled by default.** Major web browsers are working towards
-    removing these versions altogether in early 2020. If your servers aren't ready yet you can
-    configure OkHttp 3.13 to allow TLSv1 and TLSv1.1 connections:
-
-    ```
-    OkHttpClient client = new OkHttpClient.Builder()
-        .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS))
-        .build();
-    ```
-
- *  New: You can now access HTTP trailers with `Response.trailers()`. This method may only be called
-    after the entire HTTP response body has been read.
-
- *  New: Upgrade to Okio 1.17.3. If you're on Kotlin-friendly Okio 2.x this release requires 2.2.2
-    or newer.
-
-    ```kotlin
-    implementation("com.squareup.okio:okio:1.17.3")
-    ```
-
- *  Fix: Don't miss cancels when sending HTTP/2 request headers.
- *  Fix: Don't miss whole operation timeouts when calls redirect.
- *  Fix: Don't leak connections if web sockets have malformed responses or if `onOpen()` throws.
- *  Fix: Don't retry when request bodies fail due to `FileNotFoundException`.
- *  Fix: Don't crash when URLs have IPv4-mapped IPv6 addresses.
- *  Fix: Don't crash when building `HandshakeCertificates` on Android API 28.
- *  Fix: Permit multipart file names to contain non-ASCII characters.
- *  New: API to get MockWebServer's dispatcher.
- *  New: API to access headers as `java.time.Instant`.
- *  New: Fail fast if a `SSLSocketFactory` is used as a `SocketFactory`.
- *  New: Log the TLS handshake in `LoggingEventListener`.
-
-
-## Version 3.12.6
-
-_2019-09-29_
-
- *  Fix: Cancel calls that fail due to unexpected exceptions. We had a bug where an enqueued call
-    would never call back if it crashed with an unchecked throwable, such as a
-    `NullPointerException` or `OutOfMemoryError`. We now call `Callback.onFailure()` with an
-    `IOException` that reports the call as canceled. The triggering exception is still delivered to
-    the thread's `UncaughtExceptionHandler`.
- *  Fix: Don't evict incomplete entries when iterating the cache. We had a bug where iterating
-    `Cache.urls()` would prevent in-flight entries from being written.
-
-
-## Version 3.12.5
-
-_2019-09-10_
-
- *  Fix: Don't lose HTTP/2 flow control bytes when incoming data races with a stream close. If this
-    happened enough then eventually the connection would stall.
-
- *  Fix: Acknowledge and apply inbound HTTP/2 settings atomically. Previously we had a race where we
-    could use new flow control capacity before acknowledging it, causing strict HTTP/2 servers to
-    fail the call.
-
-
-## Version 3.12.4
-
-_2019-09-04_
-
- *  Fix: Don't crash looking up an absent class on certain buggy Android 4.x devices.
-
-
-## Version 3.12.3
-
-_2019-05-07_
-
- *  Fix: Permit multipart file names to contain non-ASCII characters.
- *  Fix: Retain the `Route` when a connection is reused on a redirect or other follow-up. This was
-    causing some `Authenticator` calls to see a null route when non-null was expected.
-
-
-## Version 3.12.2
-
-_2019-03-14_
-
- *  Fix: Don't crash if the HTTPS server returns no certificates in the TLS handshake.
- *  Fix: Don't leak a connection when a call is canceled immediately preceding the `onFailure()`
-    callback.
-
-
-## Version 3.12.1
-
-_2018-12-23_
-
- *  Fix: Remove overlapping `package-info.java`. This caused issues with some build tools.
-
-
-## Version 3.12.0
-
-_2018-11-16_
-
- *  **OkHttp now supports TLS 1.3.** This requires either Conscrypt or Java 11+.
-
- *  **Proxy authenticators are now asked for preemptive authentication.** OkHttp will now request
-    authentication credentials before creating TLS tunnels through HTTP proxies (HTTP `CONNECT`).
-    Authenticators should identify preemptive authentications by the presence of a challenge whose
-    scheme is "OkHttp-Preemptive".
-
- *  **OkHttp now offers full-operation timeouts.** This sets a limit on how long the entire call may
-    take and covers resolving DNS, connecting, writing the request body, server processing, and
-    reading the full response body. If a call requires redirects or retries all must complete within
-    one timeout period.
-
-    Use `OkHttpClient.Builder.callTimeout()` to specify the default duration and `Call.timeout()` to
-    specify the timeout of an individual call.
-
- *  New: Return values and fields are now non-null unless otherwise annotated.
- *  New: `LoggingEventListener` makes it easy to get basic visibility into a call's performance.
-    This class is in the `logging-interceptor` artifact.
- *  New: `Headers.Builder.addUnsafeNonAscii()` allows non-ASCII values to be added without an
-    immediate exception.
- *  New: Headers can be redacted in `HttpLoggingInterceptor`.
- *  New: `Headers.Builder` now accepts dates.
- *  New: OkHttp now accepts `java.time.Duration` for timeouts on Java 8+ and Android 26+.
- *  New: `Challenge` includes all authentication parameters.
- *  New: Upgrade to BouncyCastle 1.60, Conscrypt 1.4.0, and Okio 1.15.0. We don't yet require
-    Kotlin-friendly Okio 2.x but OkHttp works fine with that series.
-
-    ```kotlin
-    implementation("org.bouncycastle:bcprov-jdk15on:1.60")
-    implementation("org.conscrypt:conscrypt-openjdk-uber:1.4.0")
-    implementation("com.squareup.okio:okio:1.15.0")
-    ```
-
- *  Fix: Handle dispatcher executor shutdowns gracefully. When there aren't any threads to carry a
-    call its callback now gets a `RejectedExecutionException`.
- *  Fix: Don't permanently cache responses with `Cache-Control: immutable`. We misunderstood the
-    original `immutable` proposal!
- *  Fix: Change `Authenticator`'s `Route` parameter to be nullable. This was marked as non-null but
-    could be called with null in some cases.
- *  Fix: Don't create malformed URLs when `MockWebServer` is reached via an IPv6 address.
- *  Fix: Don't crash if the system default authenticator is null.
- *  Fix: Don't crash generating elliptic curve certificates on Android.
- *  Fix: Don't crash doing platform detection on RoboVM.
- *  Fix: Don't leak socket connections when web socket upgrades fail.
-
-
-## Version 3.11.0
-
-_2018-07-12_
-
- *  **OkHttp's new okhttp-tls submodule tames HTTPS and TLS.**
-
-    `HeldCertificate` is a TLS certificate and its private key. Generate a certificate with its
-    builder then use it to sign another certificate or perform a TLS handshake. The
-    `certificatePem()` method encodes the certificate in the familiar PEM format
-    (`--- BEGIN CERTIFICATE ---`); the `privateKeyPkcs8Pem()` does likewise for the private key.
-
-    `HandshakeCertificates` holds the TLS certificates required for a TLS handshake. On the server
-    it keeps your `HeldCertificate` and its chain. On the client it keeps the root certificates
-    that are trusted to sign a server's certificate chain. `HandshakeCertificates` also works with
-    mutual TLS where these roles are reversed.
-
-    These classes make it possible to enable HTTPS in MockWebServer in [just a few lines of
-    code][https_server_sample].
-
- *  **OkHttp now supports prior knowledge cleartext HTTP/2.** Enable this by setting
-    `Protocol.H2_PRIOR_KNOWLEDGE` as the lone protocol on an `OkHttpClient.Builder`. This mode
-    only supports `http:` URLs and is best suited in closed environments where HTTPS is
-    inappropriate.
-
- *  New: `HttpUrl.get(String)` is an alternative to `HttpUrl.parse(String)` that throws an exception
-    when the URL is malformed instead of returning null. Use this to avoid checking for null in
-    situations where the input is known to be well-formed. We've also added `MediaType.get(String)`
-    which is an exception-throwing alternative to `MediaType.parse(String)`.
- *  New: The `EventListener` API previewed in OkHttp 3.9 has graduated to a stable API. Use this
-    interface to track metrics and monitor HTTP requests' size and duration.
- *  New: `okhttp-dnsoverhttps` is an experimental API for doing DNS queries over HTTPS. Using HTTPS
-    for DNS offers better security and potentially better performance. This feature is a preview:
-    the API is subject to change.
- *  New: `okhttp-sse` is an early preview of Server-Sent Events (SSE). This feature is incomplete
-    and is only suitable for experimental use.
- *  New: MockWebServer now supports client authentication (mutual TLS). Call `requestClientAuth()`
-    to permit an optional client certificate or `requireClientAuth()` to require one.
- *  New: `RecordedRequest.getHandshake()` returns the HTTPS handshake of a request sent to
-    `MockWebServer`.
- *  Fix: Honor the `MockResponse` header delay in MockWebServer.
- *  Fix: Don't release HTTP/2 connections that have multiple canceled calls. We had a bug where
-    canceling calls would cause the shared HTTP/2 connection to be unnecessarily released. This
-    harmed connection reuse.
- *  Fix: Ensure canceled and discarded HTTP/2 data is not permanently counted against the limited
-    flow control window. We had a few bugs where window size accounting was broken when streams
-    were canceled or reset.
- *  Fix: Recover gracefully if the TLS session returns an unexpected version (`NONE`) or cipher
-    suite (`SSL_NULL_WITH_NULL_NULL`).
- *  Fix: Don't change Conscrypt configuration globally. We migrated from a process-wide setting to
-    configuring only OkHttp's TLS sockets.
- *  Fix: Prefer TLSv1.2 where it is available. On certain older platforms it is necessary to opt-in
-    to TLSv1.2.
- *  New: `Request.tag()` permits multiple tags. Use a `Class<?>` as a key to identify tags. Note
-    that `tag()` now returns null if the request has no tag. Previously this would return the
-    request itself.
- *  New: `Headers.Builder.addAll(Headers)`.
- *  New: `ResponseBody.create(MediaType, ByteString)`.
- *  New: Embed R8/ProGuard rules in the jar. These will be applied automatically by R8.
- *  Fix: Release the connection if `Authenticator` throws an exception.
- *  Fix: Change the declaration of `OkHttpClient.cache()` to return a `@Nullable Cache`. The return
-    value has always been nullable but it wasn't declared properly.
- *  Fix: Reverse suppression of connect exceptions. When both a call and its retry fail, we now
-    throw the initial exception which is most likely to be actionable.
- *  Fix: Retain interrupted state when throwing `InterruptedIOException`. A single interrupt should
-    now be sufficient to break out an in-flight OkHttp call.
- *  Fix: Don't drop a call to `EventListener.callEnd()` when the response body is consumed inside an
-    interceptor.
-
-
-## Version 3.10.0
-
-_2018-02-24_
-
- *  **The pingInterval() feature now aggressively checks connectivity for web
-    sockets and HTTP/2 connections.**
-
-    Previously if you configured a ping interval that would cause OkHttp to send
-    pings, but it did not track whether the reply pongs were received. With this
-    update OkHttp requires that every ping receive a response: if it does not
-    the connection will be closed and the listener's `onFailure()` method will
-    be called.
-
-    Web sockets have always been had pings, but pings on HTTP/2 connections is
-    new in this release. Pings are used for connections that are busy carrying
-    calls and for idle connections in the connection pool. (Pings do not impact
-    when pooled connections are evicted).
-
-    If you have a configured ping interval, you should confirm that it is long
-    enough for a roundtrip from client to server. If your ping interval is too
-    short, slow connections may be misinterpreted as failed connections. A ping
-    interval of 30 seconds is reasonable for most use cases.
-
- *  **OkHttp now supports [Conscrypt][conscrypt].** Conscrypt is a Java Security
-    Provider that integrates BoringSSL into the Java platform. Conscrypt
-    supports more cipher suites than the JVM’s default provider and may also
-    execute more efficiently.
-
-    To use it, first register a [Conscrypt dependency][conscrypt_dependency] in
-    your build system.
-
-    OkHttp will use Conscrypt if you set the `okhttp.platform` system property
-    to `conscrypt`.
-
-    Alternatively, OkHttp will also use Conscrypt if you install it as your
-    preferred security provider. To do so, add the following code to execute
-    before you create your `OkHttpClient`.
-
-    ```
-    Security.insertProviderAt(
-        new org.conscrypt.OpenSSLProvider(), 1);
-    ```
-
-    Conscrypt is the bundled security provider on Android so it is not necessary
-    to configure it on that platform.
-
- *  New: `HttpUrl.addQueryParameter()` percent-escapes more characters.
-    Previously several ASCII punctuation characters were not percent-escaped
-    when used with this method. This does not impact already-encoded query
-    parameters in APIs like `HttpUrl.parse()` and
-    `HttpUrl.Builder.addEncodedQueryParameter()`.
- *  New: CBC-mode ECDSA cipher suites have been removed from OkHttp's default
-    configuration: `TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA` and
-    `TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA`. This tracks a [Chromium
-    change][remove_cbc_ecdsa] to remove these cipher suites because they are
-    fragile and rarely-used.
- *  New: Don't fall back to common name (CN) verification for hostnames. This
-    behavior was deprecated with RFC 2818 in May 2000 and was recently dropped
-    from major web browsers.
- *  New: Honor the `Retry-After` response header. HTTP 503 (Unavailable)
-    responses are retried automatically if this header is present and its delay
-    is 0 seconds. HTTP 408 (Client Timeout) responses are retried automatically
-    if the header is absent or its delay is 0 seconds.
- *  New: Allow request bodies for all HTTP methods except GET and HEAD.
- *  New: Automatic module name of `okhttp3` for use with the Java Platform
-    Module System.
- *  New: Log gzipped bodies when `HttpLoggingInterceptor` is used as a network
-    interceptor.
- *  New: `Protocol.QUIC` constant. This protocol is not supported but this
-    constant is included for completeness.
- *  New: Upgrade to Okio 1.14.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.14.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.14.0
-     ```
-
- *  Fix: Handle `HTTP/1.1 100 Continue` status lines, even on requests that did
-    not send the `Expect: continue` request header.
- *  Fix: Do not count web sockets toward the dispatcher's per-host connection
-    limit.
- *  Fix: Avoid using invalid HTTPS sessions. This prevents OkHttp from crashing
-    with the error, `Unexpected TLS version: NONE`.
- *  Fix: Don't corrupt the response cache when a 304 (Not Modified) response
-    overrides the stored "Content-Encoding" header.
- *  Fix: Gracefully shut down the HTTP/2 connection before it exhausts the
-    namespace of stream IDs (~536 million streams).
- *  Fix: Never pass a null `Route` to `Authenticator`. There was a bug where
-    routes were omitted for eagerly-closed connections.
-
-## Version 3.9.1
-
-_2017-11-18_
-
- *  New: Recover gracefully when Android's DNS crashes with an unexpected
-    `NullPointerException`.
- *  New: Recover gracefully when Android's socket connections crash with an
-    unexpected `ClassCastException`.
- *  Fix: Don't include the URL's fragment in `encodedQuery()` when the query
-    itself is empty.
-
-## Version 3.9.0
-
-_2017-09-03_
-
- *  **Interceptors are more capable.** The `Chain` interface now offers access
-    to the call and can adjust all call timeouts. Note that this change is
-    source-incompatible for code that implements the `Chain` interface.
-    We don't expect this to be a problem in practice!
-
- *  **OkHttp has an experimental new API for tracking metrics.** The new
-    `EventListener` API is designed to help developers monitor HTTP requests'
-    size and duration. This feature is an unstable preview: the API is subject
-    to change, and the implementation is incomplete. This is a big new API we
-    are eager for feedback.
-
- *  New: Support ALPN via Google Play Services' Dynamic Security Provider. This
-    expands HTTP/2 support to older Android devices that have Google Play
-    Services.
- *  New: Consider all routes when looking for candidate coalesced connections.
-    This increases the likelihood that HTTP/2 connections will be shared.
- *  New: Authentication challenges and credentials now use a charset. Use this in
-    your authenticator to support user names and passwords with non-ASCII
-    characters.
- *  New: Accept a charset in `FormBody.Builder`. Previously form bodies were
-    always UTF-8.
- *  New: Support the `immutable` cache-control directive.
- *  Fix: Don't crash when an HTTP/2 call is redirected while the connection is
-    being shut down.
- *  Fix: Don't drop headers of healthy streams that raced with `GOAWAY` frames.
-    This bug would cause HTTP/2 streams to occasional hang when the connection
-    was shutting down.
- *  Fix: Honor `OkHttpClient.retryOnConnectionFailure()` when the response is a
-    HTTP 408 Request Timeout. If retries are enabled, OkHttp will retry exactly
-    once in response to a 408.
- *  Fix: Don't crash when reading the empty `HEAD` response body if it specifies
-    a `Content-Length`.
- *  Fix: Don't crash if the thread is interrupted while reading the public
-    suffix database.
- *  Fix: Use relative resource path when loading the public suffix database.
-    Loading the resource using a path relative to the class prevents conflicts
-    when the OkHttp classes are relocated (shaded) by allowing multiple private
-    copies of the database.
- *  Fix: Accept cookies for URLs that have an IPv6 address for a host.
- *  Fix: Don't log the protocol (HTTP/1.1, h2) in HttpLoggingInterceptor if the
-    protocol isn't negotiated yet! Previously we'd log HTTP/1.1 by default, and
-    this was confusing.
- *  Fix: Omit the message from MockWebServer's HTTP/2 `:status` header.
- *  Fix: Handle 'Expect: 100 Continue' properly in MockWebServer.
-
-
-## Version 3.8.1
-
-_2017-06-18_
-
- *  Fix: Recover gracefully from stale coalesced connections. We had a bug where
-    connection coalescing (introduced in OkHttp 3.7.0) and stale connection
-    recovery could interact to cause a `NoSuchElementException` crash in the
-    `RouteSelector`.
-
-
-## Version 3.8.0
-
-_2017-05-13_
-
-
- *  **OkHttp now uses `@Nullable` to annotate all possibly-null values.** We've
-    added a compile-time dependency on the JSR 305 annotations. This is a
-    [provided][maven_provided] dependency and does not need to be included in
-    your build configuration, `.jar` file, or `.apk`. We use
-    `@ParametersAreNonnullByDefault` and all parameters and return types are
-    never null unless explicitly annotated `@Nullable`.
-
- *  **Warning: this release is source-incompatible for Kotlin users.**
-    Nullability was previously ambiguous and lenient but now the compiler will
-    enforce strict null checks.
-
- *  New: The response message is now non-null. This is the "Not Found" in the
-    status line "HTTP 404 Not Found". If you are building responses
-    programmatically (with `new Response.Builder()`) you must now always supply
-    a message. An empty string `""` is permitted. This value was never null on
-    responses returned by OkHttp itself, and it was an old mistake to permit
-    application code to omit a message.
-
- *  The challenge's scheme and realm are now non-null. If you are calling
-    `new Challenge(scheme, realm)` you must provide non-null values. These were
-    never null in challenges created by OkHttp, but could have been null in
-    application code that creates challenges.
-
- *  New: The `TlsVersion` of a `Handshake` is now non-null. If you are calling
-    `Handshake.get()` with a null TLS version, you must instead now provide a
-    non-null `TlsVersion`. Cache responses persisted prior to OkHttp 3.0 did not
-    store a TLS version; for these unknown values the handshake is defaulted to
-    `TlsVersion.SSL_3_0`.
-
- *  New: Upgrade to Okio 1.13.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.13.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.13.0
-     ```
-
- *  Fix: gracefully recover when Android 7.0's sockets throw an unexpected
-    `NullPointerException`.
-
-## Version 3.7.0
-
-_2017-04-15_
-
- *  **OkHttp no longer recovers from TLS handshake failures by attempting a TLSv1 connection.**
-    The fallback was necessary for servers that implemented version negotiation incorrectly. Now
-    that 99.99% of servers do it right this fallback is obsolete.
- *  Fix: Do not honor cookies set on a public domain. Previously a malicious site could inject
-    cookies on top-level domains like `co.uk` because our cookie parser didn't honor the [public
-    suffix][public_suffix] list. Alongside this fix is a new API, `HttpUrl.topPrivateDomain()`,
-    which returns the privately domain name if the URL has one.
- *  Fix: Change `MediaType.charset()` to return null for unexpected charsets.
- *  Fix: Don't skip cache invalidation if the invalidating response has no body.
- *  Fix: Don't use a cryptographic random number generator for web sockets. Some Android devices
-    implement `SecureRandom` incorrectly!
- *  Fix: Correctly canonicalize IPv6 addresses in `HttpUrl`. This prevented OkHttp from trusting
-    HTTPS certificates issued to certain IPv6 addresses.
- *  Fix: Don't reuse connections after an unsuccessful `Expect: 100-continue`.
- *  Fix: Handle either `TLS_` or `SSL_` prefixes for cipher suite names. This is necessary for
-    IBM JVMs that use the `SSL_` prefix exclusively.
- *  Fix: Reject HTTP/2 data frames if the stream ID is 0.
- *  New: Upgrade to Okio 1.12.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.12.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.12.0
-     ```
-
- *  New: Connection coalescing. OkHttp may reuse HTTP/2 connections across calls that share an IP
-    address and HTTPS certificate, even if their domain names are different.
- *  New: MockWebServer's `RecordedRequest` exposes the requested `HttpUrl` with `getRequestUrl()`.
-
-
-## Version 3.6.0
-
-_2017-01-29_
-
- *  Fix: Don't crash with a "cache is closed" error when there is an error initializing the cache.
- *  Fix: Calling `disconnect()` on a connecting `HttpUrlConnection` could cause it to retry in an
-    infinite loop! This regression was introduced in OkHttp 2.7.0.
- *  Fix: Drop cookies that contain ASCII NULL and other bad characters. Previously such cookies
-    would cause OkHttp to crash when they were included in a request.
- *  Fix: Release duplicated multiplexed connections. If we concurrently establish connections to an
-    HTTP/2 server, close all but the first connection.
- *  Fix: Fail the HTTP/2 connection if first frame isn't `SETTINGS`.
- *  Fix: Forbid spaces in header names.
- *  Fix: Don't offer to do gzip if the request is partial.
- *  Fix: MockWebServer is now usable with JUnit 5. That update [broke the rules][junit_5_rules].
- *  New: Support `Expect: 100-continue` as a request header. Callers can use this header to
-    pessimistically hold off on transmitting a request body until a server gives the go-ahead.
- *  New: Permit network interceptors to rewrite the host header for HTTP/2. This makes it possible
-    to do domain fronting.
- *  New: charset support for `Credentials.basic()`.
-
-
-## Version 3.5.0
-
-_2016-11-30_
-
- *  **Web Sockets are now a stable feature of OkHttp.** Since being introduced as a beta feature in
-    OkHttp 2.3 our web socket client has matured. Connect to a server's web socket with
-    `OkHttpClient.newWebSocket()`, send messages with `send()`, and receive messages with the
-    `WebSocketListener`.
-
-    The `okhttp-ws` submodule is no longer available and `okhttp-ws` artifacts from previous
-    releases of OkHttp are not compatible with OkHttp 3.5. When upgrading to the new package
-    please note that the `WebSocket` and `WebSocketCall` classes have been merged. Sending messages
-    is now asynchronous and they may be enqueued before the web socket is connected.
-
- *  **OkHttp no longer attempts a direct connection if the system's HTTP proxy fails.** This
-    behavior was surprising because OkHttp was disregarding the user's specified configuration. If
-    you need to customize proxy fallback behavior, implement your own `java.net.ProxySelector`.
-
- *  Fix: Support TLSv1.3 on devices that support it.
-
- *  Fix: Share pooled connections across equivalent `OkHttpClient` instances. Previous releases had
-    a bug where a shared connection pool did not guarantee shared connections in some cases.
- *  Fix: Prefer the server's response body on all conditional cache misses. Previously we would
-    return the cached response's body if it had a newer `Last-Modified` date.
- *  Fix: Update the stored timestamp on conditional cache hits.
- *  New: Optimized HTTP/2 request header encoding. More headers are HPACK-encoded and string
-    literals are now Huffman-encoded.
- *  New: Expose `Part` headers and body in `Multipart`.
- *  New: Make `ResponseBody.string()` and `ResponseBody.charStream()` BOM-aware. If your HTTP
-    response body begins with a [byte order mark][bom] it will be consumed and used to select a
-    charset for the remaining bytes. Most applications should not need a byte order mark.
-
- *  New: Upgrade to Okio 1.11.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.11.0</version>
-     </dependency>
-
-     com.squareup.okio:okio:1.11.0
-     ```
-
- *  Fix: Avoid sending empty HTTP/2 data frames when there is no request body.
- *  Fix: Add a leading `.` for better domain matching in `JavaNetCookieJar`.
- *  Fix: Gracefully recover from HTTP/2 connection shutdowns at start of request.
- *  Fix: Be lenient if a `MediaType`'s character set is `'single-quoted'`.
- *  Fix: Allow horizontal tab characters in header values.
- *  Fix: When parsing HTTP authentication headers permit challenge parameters in any order.
-
-
-## Version 3.4.2
-
-_2016-11-03_
-
- *  Fix: Recover gracefully when an HTTP/2 connection is shutdown. We had a
-    bug where shutdown HTTP/2 connections were considered usable. This caused
-    infinite loops when calls attempted to recover.
-
-
-## Version 3.4.1
-
-_2016-07-10_
-
- *  **Fix a major bug in encoding HTTP headers.** In 3.4.0 and 3.4.0-RC1 OkHttp
-    had an off-by-one bug in our HPACK encoder. This bug could have caused the
-    wrong headers to be emitted after a sequence of HTTP/2 requests! Everyone
-    who is using OkHttp 3.4.0 or 3.4.0-RC1 should upgrade for this bug fix.
-
-
-## Version 3.4.0
-
-_2016-07-08_
-
- *  New: Support dynamic table size changes to HPACK Encoder.
- *  Fix: Use `TreeMap` in `Headers.toMultimap()`. This makes string lookups on
-    the returned map case-insensitive.
- *  Fix: Don't share the OkHttpClient's `Dispatcher` in `HttpURLConnection`.
-
-
-## Version 3.4.0-RC1
-
-_2016-07-02_
-
- *  **We’ve rewritten HttpURLConnection and HttpsURLConnection.** Previously we
-    shared a single HTTP engine between two frontend APIs: `HttpURLConnection`
-    and `Call`. With this release we’ve rearranged things so that the
-    `HttpURLConnection` frontend now delegates to the `Call` APIs internally.
-    This has enabled substantial simplifications and optimizations in the OkHttp
-    core for both frontends.
-
-    For most HTTP requests the consequences of this change will be negligible.
-    If your application uses `HttpURLConnection.connect()`,
-    `setFixedLengthStreamingMode()`, or `setChunkedStreamingMode()`, OkHttp will
-    now use a async dispatcher thread to establish the HTTP connection.
-
-    We don’t expect this change to have any behavior or performance
-    consequences. Regardless, please exercise your `OkUrlFactory` and
-    `HttpURLConnection` code when applying this update.
-
- *  **Cipher suites may now have arbitrary names.** Previously `CipherSuite` was
-    a Java enum and it was impossible to define new cipher suites without first
-    upgrading OkHttp. With this change it is now a regular Java class with
-    enum-like constants. Application code that uses enum methods on cipher
-    suites (`ordinal()`, `name()`, etc.) will break with this change.
-
- *  Fix: `CertificatePinner` now matches canonicalized hostnames. Previously
-    this was case sensitive. This change should also make it easier to configure
-    certificate pinning for internationalized domain names.
- *  Fix: Don’t crash on non-ASCII `ETag` headers. Previously OkHttp would reject
-    these headers when validating a cached response.
- *  Fix: Don’t allow remote peer to arbitrarily size the HPACK decoder dynamic
-    table.
- *  Fix: Honor per-host configuration in Android’s network security config.
-    Previously disabling cleartext for any host would disable cleartext for all
-    hosts. Note that this setting is only available on Android 24+.
- *  New: HPACK compression is now dynamic. This should improve performance when
-    transmitting request headers over HTTP/2.
- *  New: `Dispatcher.setIdleCallback()` can be used to signal when there are no
-    calls in flight. This is useful for [testing with
-    Espresso][okhttp_idling_resource].
- *  New: Upgrade to Okio 1.9.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.9.0</version>
-     </dependency>
-     ```
-
-
-## Version 3.3.1
-
-_2016-05-28_
-
- *  Fix: The plaintext check in HttpLoggingInterceptor incorrectly classified
-    newline characters as control characters. This is fixed.
- *  Fix: Don't crash reading non-ASCII characters in HTTP/2 headers or in cached
-    HTTP headers.
- *  Fix: Retain the response body when an attempt to open a web socket returns a
-    non-101 response code.
-
-
-## Version 3.3.0
-
-_2016-05-24_
-
- *  New: `Response.sentRequestAtMillis()` and `receivedResponseAtMillis()`
-    methods track the system's local time when network calls are made. These
-    replace the `OkHttp-Sent-Millis` and `OkHttp-Received-Millis` headers that were
-    present in earlier versions of OkHttp.
- *  New: Accept user-provided trust managers in `OkHttpClient.Builder`. This
-    allows OkHttp to satisfy its TLS requirements directly. Otherwise OkHttp
-    will use reflection to extract the `TrustManager` from the
-    `SSLSocketFactory`.
- *  New: Support prerelease Java 9. This gets ALPN from the platform rather than
-    relying on the alpn-boot bootclasspath override.
- *  New: `HttpLoggingInterceptor` now logs connection failures.
- *  New: Upgrade to Okio 1.8.0.
-
-     ```xml
-     <dependency>
-       <groupId>com.squareup.okio</groupId>
-       <artifactId>okio</artifactId>
-       <version>1.8.0</version>
-     </dependency>
-     ```
-
- *  Fix: Gracefully recover from a failure to rebuild the cache journal.
- *  Fix: Don't corrupt cache entries when a cache entry is evicted while it is
-    being updated.
- *  Fix: Make logging more consistent throughout OkHttp.
- *  Fix: Log plaintext bodies only. This uses simple heuristics to differentiate
-    text from other data.
- *  Fix: Recover from `REFUSED_STREAM` errors in HTTP/2. This should improve
-    interoperability with Nginx 1.10.0, which [refuses][nginx_959] streams
-    created before HTTP/2 settings have been acknowledged.
- *  Fix: Improve recovery from failed routes.
- *  Fix: Accommodate tunneling proxies that close the connection after an auth
-    challenge.
- *  Fix: Use the proxy authenticator when authenticating HTTP proxies. This
-    regression was introduced in OkHttp 3.0.
- *  Fix: Fail fast if network interceptors transform the response body such that
-    closing it doesn't also close the underlying stream. We had a bug where
-    OkHttp would attempt to reuse a connection but couldn't because it was still
-    held by a prior request.
- *  Fix: Ensure network interceptors always have access to the underlying
-    connection.
- *  Fix: Use `X509TrustManagerExtensions` on Android 17+.
- *  Fix: Unblock waiting dispatchers on MockWebServer shutdown.
-
-
-## Version 3.2.0
-
-_2016-02-25_
-
- *  Fix: Change the certificate pinner to always build full chains. This
-    prevents a potential crash when using certificate pinning with the Google
-    Play Services security provider.
- *  Fix: Make IPv6 request lines consistent with Firefox and Chrome.
- *  Fix: Recover gracefully when trimming the response cache fails.
- *  New: Add multiple path segments using a single string in `HttpUrl.Builder`.
- *  New: Support SHA-256 pins in certificate pinner.
-
-
-## Version 3.1.2
-
-_2016-02-10_
-
- *  Fix: Don’t crash when finding the trust manager on Robolectric. We attempted
-    to detect the host platform and got confused because Robolectric looks like
-    Android but isn’t!
- *  Fix: Change `CertificatePinner` to skip sanitizing the certificate chain
-    when no certificates were pinned. This avoids an SSL failure in insecure
-    “trust everyone” configurations, such as when talking to a development
-    HTTPS server that has a self-signed certificate.
-
-
-## Version 3.1.1
-
-_2016-02-07_
-
- *  Fix: Don't crash when finding the trust manager if the Play Services (GMS)
-    security provider is installed.
- *  Fix: The previous release introduced a performance regression on Android,
-    caused by looking up CA certificates. This is now fixed.
-
-
-## Version 3.1.0
-
-_2016-02-06_
-
- *  New: WebSockets now defer some writes. This should improve performance for
-    some applications.
- *  New: Override `equals()` and `hashCode()` in our new cookie class. This
-    class now defines equality by value rather than by reference.
- *  New: Handle 408 responses by retrying the request. This allows servers to
-    direct clients to retry rather than failing permanently.
- *  New: Expose the framed protocol in `Connection`. Previously this would
-    return the application-layer protocol (HTTP/1.1 or HTTP/1.0); now it always
-    returns the wire-layer protocol (HTTP/2, SPDY/3.1, or HTTP/1.1).
- *  Fix: Permit the trusted CA root to be pinned by `CertificatePinner`.
- *  Fix: Silently ignore unknown HTTP/2 settings. Previously this would cause
-    the entire connection to fail.
- *  Fix: Don’t crash on unexpected charsets in the logging interceptor.
- *  Fix: `OkHttpClient` is now non-final for the benefit of mocking frameworks.
-    Mocking sophisticated classes like `OkHttpClient` is fragile and you
-    shouldn’t do it. But if that’s how you want to live your life we won’t stand
-    in your way!
-
-
-## Version 3.0.1
-
-_2016-01-14_
-
- *  Rollback OSGi support. This was causing library jars to include more classes
-    than expected, which interfered with Gradle builds.
-
-
-## Version 3.0.0
-
-_2016-01-13_
-
-This release commits to a stable 3.0 API. Read the 3.0.0-RC1 changes for advice
-on upgrading from 2.x to 3.x.
-
- *  **The `Callback` interface now takes a `Call`**. This makes it easier to
-    check if the call was canceled from within the callback. When migrating
-    async calls to this new API, `Call` is now the first parameter for both
-    `onResponse()` and `onFailure()`.
- *  Fix: handle multiple cookies in `JavaNetCookieJar` on Android.
- *  Fix: improve the default HTTP message in MockWebServer responses.
- *  Fix: don't leak file handles when a conditional GET throws.
- *  Fix: Use charset specified by the request body content type in OkHttp's
-    logging interceptor.
- *  Fix: Don't eagerly release pools on cache hits.
- *  New: Make OkHttp OSGi ready.
- *  New: Add already-implemented interfaces Closeable and Flushable to the cache.
-
-
-## Version 3.0.0-RC1
-
-_2016-01-02_
-
-OkHttp 3 is a major release focused on API simplicity and consistency. The API
-changes are numerous but most are cosmetic. Applications should be able to
-upgrade from the 2.x API to the 3.x API mechanically and without risk.
-
-Because the release includes breaking API changes, we're changing the project's
-package name from `com.squareup.okhttp` to `okhttp3`. This should make it
-possible for large applications to migrate incrementally. The Maven group ID
-is now `com.squareup.okhttp3`. For an explanation of this strategy, see Jake
-Wharton's post, [Java Interoperability Policy for Major Version
-Updates][major_versions].
-
-This release obsoletes OkHttp 2.x, and all code that uses OkHttp's
-`com.squareup.okhttp` package should upgrade to the `okhttp3` package. Libraries
-that depend on OkHttp should upgrade quickly to prevent applications from being
-stuck on the old version.
-
- *  **There is no longer a global singleton connection pool.** In OkHttp 2.x,
-    all `OkHttpClient` instances shared a common connection pool by default.
-    In OkHttp 3.x, each new `OkHttpClient` gets its own private connection pool.
-    Applications should avoid creating many connection pools as doing so
-    prevents connection reuse. Each connection pool holds its own set of
-    connections alive so applications that have many pools also risk exhausting
-    memory!
-
-    The best practice in OkHttp 3 is to create a single OkHttpClient instance
-    and share it throughout the application. Requests that needs a customized
-    client should call `OkHttpClient.newBuilder()` on that shared instance.
-    This allows customization without the drawbacks of separate connection
-    pools.
-
- *  **OkHttpClient is now stateless.** In the 2.x API `OkHttpClient` had getters
-    and setters. Internally each request was forced to make its own complete
-    snapshot of the `OkHttpClient` instance to defend against racy configuration
-    changes. In 3.x, `OkHttpClient` is now stateless and has a builder. Note
-    that this class is not strictly immutable as it has stateful members like
-    the connection pool and cache.
-
- *  **Get and Set prefixes are now avoided.** With ubiquitous builders
-    throughout OkHttp these accessor prefixes aren't necessary. Previously
-    OkHttp used _get_ and _set_ prefixes sporadically which make the API
-    inconsistent and awkward to explore.
-
- *  **OkHttpClient now implements the new `Call.Factory` interface.** This
-    interface will make your code easier to test. When you test code that makes
-    HTTP requests, you can use this interface to replace the real `OkHttpClient`
-    with your own mocks or fakes.
-
-    The interface will also let you use OkHttp's API with another HTTP client's
-    implementation. This is useful in sandboxed environments like Google App
-    Engine.
-
- *  **OkHttp now does cookies.** We've replaced `java.net.CookieHandler` with
-    a new interface, `CookieJar` and added our own `Cookie` model class. This
-    new cookie follows the latest RFC and supports the same cookie attributes
-    as modern web browsers.
-
- *  **Form and Multipart bodies are now modeled.** We've replaced the opaque
-    `FormEncodingBuilder` with the more powerful `FormBody` and
-    `FormBody.Builder` combo. Similarly we've upgraded `MultipartBuilder` into
-    `MultipartBody`, `MultipartBody.Part`, and `MultipartBody.Builder`.
-
- *  **The Apache HTTP client and HttpURLConnection APIs are deprecated.** They
-    continue to work as they always have, but we're moving everything to the new
-    OkHttp 3 API. The `okhttp-apache` and `okhttp-urlconnection` modules should
-    be only be used to accelerate a transition to OkHttp's request/response API.
-    These deprecated modules will be dropped in an upcoming OkHttp 3.x release.
-
- *  **Canceling batches of calls is now the application's responsibility.**
-    The API to cancel calls by tag has been removed and replaced with a more
-    general mechanism. The dispatcher now exposes all in-flight calls via its
-    `runningCalls()` and `queuedCalls()` methods. You can write code that
-    selects calls by tag, host, or whatever, and invokes `Call.cancel()` on the
-    ones that are no longer necessary.
-
- *  **OkHttp no longer uses the global `java.net.Authenticator` by default.**
-    We've changed our `Authenticator` interface to authenticate web and proxy
-    authentication failures through a single method. An adapter for the old
-    authenticator is available in the `okhttp-urlconnection` module.
-
- *  Fix: Don't throw `IOException` on `ResponseBody.contentLength()` or `close()`.
- *  Fix: Never throw converting an `HttpUrl` to a `java.net.URI`. This changes
-    the `uri()` method to handle malformed percent-escapes and characters
-    forbidden by `URI`.
- *  Fix: When a connect times out, attempt an alternate route. Previously route
-    selection was less efficient when differentiating failures.
- *  New: `Response.peekBody()` lets you access the response body without
-    consuming it. This may be handy for interceptors!
- *  New: `HttpUrl.newBuilder()` resolves a link to a builder.
- *  New: Add the TLS version to the `Handshake`.
- *  New: Drop `Request.uri()` and `Request#urlString()`. Just use
-    `Request.url().uri()` and `Request.url().toString()`.
- *  New: Add URL to HTTP response logging.
- *  New: Make `HttpUrl` the blessed URL method of `Request`.
-
-
-## Version 2.x
-
-[Change log](changelog_2x.md)
-
-
- [bom]: https://en.wikipedia.org/wiki/Byte_order_mark
- [conscrypt]: https://github.com/google/conscrypt/
- [conscrypt_dependency]: https://github.com/google/conscrypt/#download
- [grpc_http2]: https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
- [https_server_sample]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
- [junit_5_rules]: https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rulesupport
- [major_versions]: https://jakewharton.com/java-interoperability-policy-for-major-version-updates/
- [maven_provided]: https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
- [nginx_959]: https://trac.nginx.org/nginx/ticket/959
- [obsolete_apache_client]: https://gist.github.com/swankjesse/09721f72039e3a46cf50f94323deb82d
- [obsolete_url_factory]: https://gist.github.com/swankjesse/dd91c0a8854e1559b00f5fc9c7bfae70
- [okhttp_idling_resource]: https://github.com/JakeWharton/okhttp-idling-resource
- [public_suffix]: https://publicsuffix.org/
- [remove_cbc_ecdsa]: https://developers.google.com/web/updates/2016/12/chrome-56-deprecations#remove_cbc-mode_ecdsa_ciphers_in_tls
- [require_android_5]: https://cashapp.github.io/2019-02-05/okhttp-3-13-requires-android-5
- [tls_configuration_history]: https://square.github.io/okhttp/tls_configuration_history/
- [upgrading_to_okhttp_4]: https://square.github.io/okhttp/upgrading_to_okhttp_4/
diff --git a/docs/code_of_conduct.md b/docs/code_of_conduct.md
deleted file mode 100644
index 6a97690c5c..0000000000
--- a/docs/code_of_conduct.md
+++ /dev/null
@@ -1,102 +0,0 @@
-Open Source Code of Conduct
-===========================
-
-At Square, we are committed to contributing to the open source community and simplifying the process
-of releasing and managing open source software. We’ve seen incredible support and enthusiasm from
-thousands of people who have already contributed to our projects — and we want to ensure our community
-continues to be truly open for everyone.
-
-This code of conduct outlines our expectations for participants, as well as steps to reporting
-unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and
-expect our code of conduct to be honored.
-
-Square’s open source community strives to:
-
- * **Be open**: We invite anyone to participate in any aspect of our projects. Our community is
-   open, and any responsibility can be carried by a contributor who demonstrates the required
-   capacity and competence.
-
- * **Be considerate**: People use our work, and we depend on the work of others. Consider users and
-   colleagues before taking action. For example, changes to code, infrastructure, policy, and
-   documentation may negatively impact others.
-
- * **Be respectful**: We expect people to work together to resolve conflict, assume good intentions,
-   and act with empathy. Do not turn disagreements into personal attacks.
-
- * **Be collaborative**: Collaboration reduces redundancy and improves the quality of our work. We
-   strive for transparency within our open source community, and we work closely with upstream
-   developers and others in the free software community to coordinate our efforts.
-
- * **Be pragmatic**: Questions are encouraged and should be asked early in the process to avoid
-   problems later. Be thoughtful and considerate when seeking out the appropriate forum for your
-   questions. Those who are asked should be responsive and helpful.
-
- * **Step down considerately**: Members of every project come and go. When somebody leaves or
-   disengages from the project, they should make it known and take the proper steps to ensure that
-   others can pick up where they left off.
-
-This code is not exhaustive or complete. It serves to distill our common understanding of a
-collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in
-the letter.
-
-Diversity Statement
--------------------
-
-We encourage everyone to participate and are committed to building a community for all. Although we
-may not be able to satisfy everyone, we all agree that everyone is equal.
-
-Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone
-has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do
-our best to right the wrong.
-
-Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity,
-gender identity or expression, language, national origin, political beliefs, profession, race,
-religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate
-discrimination based on any of the protected characteristics above, including participants with
-disabilities.
-
-Reporting Issues
-----------------
-
-If you experience or witness unacceptable behavior — or have any other concerns — please report it by
-emailing [codeofconduct@squareup.com][codeofconduct_at]. For more details, please see our Reporting
-Guidelines below.
-
-Thanks
-------
-
-Some of the ideas and wording for the statements and guidelines above were based on work by the
-[Twitter][twitter_coc], [Ubuntu][ubuntu_coc], [GDC][gdc_coc], and [Django][django_coc] communities.
-We are thankful for their work.
-
-Reporting Guide
----------------
-
-If you experience or witness unacceptable behavior — or have any other concerns — please report it by
-emailing [codeofconduct@squareup.com][codeofconduct_at]. All reports will be handled with
-discretion.
-
-In your report please include:
-
- * Your contact information.
- * Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional
-   witnesses, please include them as well.
- * Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly
-   available record (e.g. a mailing list archive or a public IRC logger), please include a link.
- * Any additional information that may be helpful.
-
-After filing a report, a representative from the Square Code of Conduct committee will contact you
-personally. The committee will then review the incident, follow up with any additional questions,
-and make a decision as to how to respond.
-
-Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual
-engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem
-appropriate, up to and including a permanent ban from all of Square spaces without warning.
-
-
-[codeofconduct_at]: mailto:codeofconduct@squareup.com
-[twitter_coc]: https://github.com/twitter/code-of-conduct/blob/master/code-of-conduct.md
-[ubuntu_coc]: https://ubuntu.com/community/code-of-conduct
-[gdc_coc]: https://www.gdconf.com/code-of-conduct
-[django_coc]: https://www.djangoproject.com/conduct/reporting/
-
diff --git a/docs/concurrency.md b/docs/concurrency.md
deleted file mode 100644
index eeb0fa219a..0000000000
--- a/docs/concurrency.md
+++ /dev/null
@@ -1,98 +0,0 @@
-Concurrency
-===========
-
-This document describes the concurrency considerations for http/2 connections and the connection pool within OkHttp.
-
-## HTTP/2 Connections
-
-The HttpURLConnection API is a blocking API. You make a blocking write to send a request, and a blocking read to receive the response.
-
-#### Blocking APIs
-
-Blocking APIs are convenient because you get top-to-bottom procedural code without indirection. Network calls work like regular method calls: ask for data and it is returned. If the request fails, you get a stacktrace right were the call was made.
-
-Blocking APIs may be inefficient because you hold a thread idle while waiting on the network. Threads are expensive because they have both a memory overhead and a context-switching overhead.
-
-#### Framed protocols
-
-Framed protocols like http/2 don't lend themselves to blocking APIs. Each application-layer thread wants to do blocking I/O for a specific stream, but the streams are multiplexed on the socket. You can't just talk to the socket, you need to cooperate with the other application-layer threads that you're sharing it with.
-
-Framing rules make it impractical to implement http/2 correctly on a single blocking thread. The flow-control features introduce feedback between reads and writes, requiring writes to acknowledge reads and reads to throttle writes.
-
-In OkHttp we expose a blocking API over a framed protocol. This document explains the code and policy that makes that work.
-
-### Threads
-
-#### Application's calling thread
-
-The application-layer must block on writing I/O. We can't return from a write until we've pushed its bytes onto the socket. Otherwise, if the write fails we are unable to deliver its IOException to the application. We would have told the application layer that the write succeeded, but it didn't!
-
-The application-layer can also do blocking reads. If the application asks to read and there's nothing available, we need to hold that thread until either the bytes arrive, the stream is closed, or a timeout elapses. If we get bytes but there's nobody asking for them, we buffer them. We don't consider bytes as delivered for flow control until they're consumed by the application.
-
-Consider an application streaming a video over http/2. Perhaps the user pauses the video and the application stops reading bytes from this stream. The buffer will fill up, and flow control prevents the server from sending more data on this stream. When the user unpauses her video the buffer drains, the read is acknowledged, and the server proceeds to stream data.
-
-#### Shared reader thread
-
-We can't rely on application threads to read data from the socket. Application threads are transient: sometimes they're reading and writing and sometimes they're off doing application-layer things. But the socket is permanent, and it needs constant attention: we dispatch all incoming frames so the connection is good-to-go when the application layer needs it.
-
-So we have a dedicated thread for every socket that just reads frames and dispatches them.
-
-The reader thread must never run application-layer code. Otherwise one slow stream can hold up the entire connection.
-
-Similarly, the reader thread must never block on writing because this can deadlock the connection. Consider a client and server that both violate this rule. If you get unlucky, they could fill up their TCP buffers (so that writes block) and then use their reader threads to write a frame. Nobody is reading on either end, and the buffers are never drained.
-
-#### Do-stuff-later pool
-
-Sometimes there's an action required like calling the application layer or responding to a ping, and the thread discovering the action is not the thread that should do the work. We enqueue a runnable on this executor and it gets handled by one of the executor's threads.
-
-### Locks
-
-We have 3 different things that we synchronize on.
-
-#### Http2Connection
-
-This lock guards internal state of each connection. This lock is never held for blocking operations. That means that we acquire the lock, read or write a few fields and release the lock. No I/O and no application-layer callbacks.
-
-#### Http2Stream
-
-This lock guards the internal state of each stream. As above, it is never held for blocking operations. When we need to hold an application thread to block a read, we use wait/notify on this lock. This works because the lock is released while `wait()` is waiting.
-
-#### Http2Writer
-
-Socket writes are guarded by the Http2Writer. Only one stream can write at a time so that messages are not interleaved. Writes are either made by application-layer threads or the do-stuff-later pool.
-
-### Holding multiple locks
-
-You're allowed to take the Http2Connection lock while holding the Http2Writer lock. But not vice-versa. Because taking the Http2Writer lock can block.
-
-This is necessary for bookkeeping when creating new streams. Correct framing requires that stream IDs are sequential on the socket, so we need to bundle assigning the ID with sending the `SYN_STREAM` frame.
-
-## Connection Pool
-
-### Background
-
-A primary responsibility for any HTTP client is to efficiently manage network connections. Creating and establishing new connections require a fair amount of overhead and added latency. OkHttp will make every effort to reuse existing connections to avoid this overhead and added latency.
-
-Every OkHttpClient uses a connection pool. Its job is to maintain a reference to all open connections. When an HTTP request is started, OkHttp will attempt to reuse an existing connection from the pool. If there are no existing connections, a new one is created and put into the connection pool. For http/2, the connection can be reused immediately. For http/1, the request must be completed before it can be reused.
-
-Since HTTP requests frequently happen in parallel, the connection pool implementation must be thread-safe.
-
-### ConnectionPool, RealConnection, and StreamAllocation
-
-The primary classes involved with establishing, sharing and terminating connections are ConnectionPool, RealConnection and StreamAllocation.
-
-**ConnectionPool**: Manages reuse of HTTP and HTTP/2 connections for reduced latency. Every OkHttpClient has one, and its lifetime spans the lifetime of the OkHttpClient.
-
-**RealConnection**: The socket and streams of an HTTP and HTTP/2 connection. These are created on demand to fulfill HTTP requests. They may be reused for many HTTP request/response exchanges. Their lifetime is typically shorter than ConnectionPool.
-
-**StreamAllocation**: Coordinates the relationship between connections, streams and calls. These are created for a single HTTP request/response exchange. Their lifetime is typically shorter than RealConnection.
-
-### Locks
-
-A single lock is used to synchronize and guard the state of ConnectionPool, RealConnection and StreamAllocation.
-
-### ConnectionPool
-
-The fields in ConnectionPool, RealConnection and StreamAllocation are all guarded by the connection pool instance. This lock is never held while doing I/O (even closing a socket) to prevent contention.
-
-A single lock is preferred to avoid deadlock scenarios and the added overhead of aggregate lock/unlock that would occur if multiple locks were used.
\ No newline at end of file
diff --git a/docs/connections.md b/docs/connections.md
deleted file mode 100644
index 37bba50de4..0000000000
--- a/docs/connections.md
+++ /dev/null
@@ -1,43 +0,0 @@
-Connections
-===========
-
-Although you provide only the URL, OkHttp plans its connection to your webserver using three types: URL, Address, and Route.
-
-### [URLs](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-http-url/)
-
-URLs (like `https://github.com/square/okhttp`) are fundamental to HTTP and the Internet. In addition to being a universal, decentralized naming scheme for everything on the web, they also specify how to access web resources.
-
-URLs are abstract:
-
- * They specify that the call may be plaintext (`http`) or encrypted (`https`), but not which cryptographic algorithms should be used. Nor do they specify how to verify the peer's certificates (the [HostnameVerifier](http://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html)) or which certificates can be trusted (the [SSLSocketFactory](http://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html)).
- * They don't specify whether a specific proxy server should be used or how to authenticate with that proxy server.
-
-They're also concrete: each URL identifies a specific path (like `/square/okhttp`) and query (like `?q=sharks&lang=en`). Each webserver hosts many URLs.
-
-### [Addresses](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-address/)
-
-Addresses specify a webserver (like `github.com`) and all of the **static** configuration necessary to connect to that server: the port number, HTTPS settings, and preferred network protocols (like HTTP/2 or SPDY).
-
-URLs that share the same address may also share the same underlying TCP socket connection. Sharing a connection has substantial performance benefits: lower latency, higher throughput (due to [TCP slow start](http://www.igvita.com/2011/10/20/faster-web-vs-tcp-slow-start/)) and conserved battery. OkHttp uses a [ConnectionPool](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection-pool/) that automatically reuses HTTP/1.x connections and multiplexes HTTP/2 and SPDY connections.
-
-In OkHttp some fields of the address come from the URL (scheme, hostname, port) and the rest come from the [OkHttpClient](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/).
-
-### [Routes](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-route/)
-
-Routes supply the **dynamic** information necessary to actually connect to a webserver. This is the specific IP address to attempt (as discovered by a DNS query), the exact proxy server to use (if a [ProxySelector](http://developer.android.com/reference/java/net/ProxySelector.html) is in use), and which version of TLS to negotiate (for HTTPS connections).
-
-There may be many routes for a single address. For example, a webserver that is hosted in multiple datacenters may yield multiple IP addresses in its DNS response.
-
-### [Connections](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection/)
-
-When you request a URL with OkHttp, here's what it does:
-
- 1. It uses the URL and configured OkHttpClient to create an **address**. This address specifies how we'll connect to the webserver.
- 2. It attempts to retrieve a connection with that address from the **connection pool**.
- 3. If it doesn't find a connection in the pool, it selects a **route** to attempt. This usually means making a DNS request to get the server's IP addresses. It then selects a TLS version and proxy server if necessary.
- 4. If it's a new route, it connects by building either a direct socket connection, a TLS tunnel (for HTTPS over an HTTP proxy), or a direct TLS connection. It does TLS handshakes as necessary.
- 5. It sends the HTTP request and reads the response.
-
-If there's a problem with the connection, OkHttp will select another route and try again. This allows OkHttp to recover when a subset of a server's addresses are unreachable. It's also useful when a pooled connection is stale or if the attempted TLS version is unsupported.
-
-Once the response has been received, the connection will be returned to the pool so it can be reused for a future request. Connections are evicted from the pool after a period of inactivity.
diff --git a/docs/css/app.css b/docs/css/app.css
deleted file mode 100644
index 48136b7efc..0000000000
--- a/docs/css/app.css
+++ /dev/null
@@ -1,48 +0,0 @@
-@font-face {
-    font-family: cash-market;
-    src: url("https://cash-f.squarecdn.com/static/fonts/cash-market/v2/CashMarket-Regular.woff2") format("woff2");
-    font-weight: 400;
-    font-style: normal
-}
-
-@font-face {
-    font-family: cash-market;
-    src: url("https://cash-f.squarecdn.com/static/fonts/cash-market/v2/CashMarket-Medium.woff2") format("woff2");
-    font-weight: 500;
-    font-style: normal
-}
-
-@font-face {
-    font-family: cash-market;
-    src: url("https://cash-f.squarecdn.com/static/fonts/cash-market/v2/CashMarket-Bold.woff2") format("woff2");
-    font-weight: 700;
-    font-style: normal
-}
-
-body, input {
-    font-family: cash-market,"Helvetica Neue",helvetica,sans-serif;
-}
-
-.md-typeset h1, .md-typeset h2, .md-typeset h3, .md-typeset h4 {
-    font-family: cash-market,"Helvetica Neue",helvetica,sans-serif;
-    line-height: normal;
-    font-weight: bold;
-    color: #353535;
-}
-
-button.dl {
-  font-weight: 300;
-  font-size: 25px;
-  line-height: 40px;
-  padding: 3px 10px;
-  display: inline-block;
-  border-radius: 6px;
-  color: #f0f0f0;
-  margin: 5px 0;
-  width: auto;
-}
-
-.logo {
-  text-align: center;
-  margin-top: 150px;
-}
diff --git a/docs/events.md b/docs/events.md
deleted file mode 100644
index db8e346036..0000000000
--- a/docs/events.md
+++ /dev/null
@@ -1,239 +0,0 @@
-Events
-======
-
-Events allow you to capture metrics on your application’s HTTP calls. Use events to monitor:
-
- * The size and frequency of the HTTP calls your application makes. If you’re making too many calls, or your calls are too large, you should know about it!
- * The performance of these calls on the underlying network. If the network’s performance isn’t sufficient, you need to either improve the network or use less of it.
-
-### EventListener
-
-Subclass [EventListener](https://square.github.io/okhttp/3.x/okhttp/okhttp3/EventListener.html) and override methods for the events you are interested in. In a successful HTTP call with no redirects or retries the sequence of events is described by this flow.
-
-![Events Diagram](images/events@2x.png)
-
-Here’s a [sample event listener](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java) that prints each event with a timestamp.
-
-```java
-class PrintingEventListener extends EventListener {
-  private long callStartNanos;
-
-  private void printEvent(String name) {
-    long nowNanos = System.nanoTime();
-    if (name.equals("callStart")) {
-      callStartNanos = nowNanos;
-    }
-    long elapsedNanos = nowNanos - callStartNanos;
-    System.out.printf("%.3f %s%n", elapsedNanos / 1000000000d, name);
-  }
-
-  @Override public void callStart(Call call) {
-    printEvent("callStart");
-  }
-
-  @Override public void callEnd(Call call) {
-    printEvent("callEnd");
-  }
-
-  @Override public void dnsStart(Call call, String domainName) {
-    printEvent("dnsStart");
-  }
-
-  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {
-    printEvent("dnsEnd");
-  }
-
-  ...
-}
-```
-
-We make a couple calls:
-
-```java
-Request request = new Request.Builder()
-    .url("https://publicobject.com/helloworld.txt")
-    .build();
-
-System.out.println("REQUEST 1 (new connection)");
-try (Response response = client.newCall(request).execute()) {
-  // Consume and discard the response body.
-  response.body().source().readByteString();
-}
-
-System.out.println("REQUEST 2 (pooled connection)");
-try (Response response = client.newCall(request).execute()) {
-  // Consume and discard the response body.
-  response.body().source().readByteString();
-}
-```
-
-And the listener prints the corresponding events:
-
-```
-REQUEST 1 (new connection)
-0.000 callStart
-0.010 dnsStart
-0.017 dnsEnd
-0.025 connectStart
-0.117 secureConnectStart
-0.586 secureConnectEnd
-0.586 connectEnd
-0.587 connectionAcquired
-0.588 requestHeadersStart
-0.590 requestHeadersEnd
-0.591 responseHeadersStart
-0.675 responseHeadersEnd
-0.676 responseBodyStart
-0.679 responseBodyEnd
-0.679 connectionReleased
-0.680 callEnd
-REQUEST 2 (pooled connection)
-0.000 callStart
-0.001 connectionAcquired
-0.001 requestHeadersStart
-0.001 requestHeadersEnd
-0.002 responseHeadersStart
-0.082 responseHeadersEnd
-0.082 responseBodyStart
-0.082 responseBodyEnd
-0.083 connectionReleased
-0.083 callEnd
-```
-
-Notice how no connect events are fired for the second call. It reused the connection from the first request for dramatically better performance.
-
-### EventListener.Factory
-
-In the preceding example we used a field, `callStartNanos`, to track the elapsed time of each event. This is handy, but it won’t work if multiple calls are executing concurrently. To accommodate this, use a `Factory` to create a new `EventListener` instance for each `Call`. This allows each listener to keep call-specific state.
-
-This [sample factory](https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java) creates a unique ID for each call and uses that ID to differentiate calls in log messages.
-
-```java
-class PrintingEventListener extends EventListener {
-  public static final Factory FACTORY = new Factory() {
-    final AtomicLong nextCallId = new AtomicLong(1L);
-
-    @Override public EventListener create(Call call) {
-      long callId = nextCallId.getAndIncrement();
-      System.out.printf("%04d %s%n", callId, call.request().url());
-      return new PrintingEventListener(callId, System.nanoTime());
-    }
-  };
-
-  final long callId;
-  final long callStartNanos;
-
-  public PrintingEventListener(long callId, long callStartNanos) {
-    this.callId = callId;
-    this.callStartNanos = callStartNanos;
-  }
-
-  private void printEvent(String name) {
-    long elapsedNanos = System.nanoTime() - callStartNanos;
-    System.out.printf("%04d %.3f %s%n", callId, elapsedNanos / 1000000000d, name);
-  }
-
-  @Override public void callStart(Call call) {
-    printEvent("callStart");
-  }
-
-  @Override public void callEnd(Call call) {
-    printEvent("callEnd");
-  }
-
-  ...
-}
-```
-
-We can use this listener to race a pair of concurrent HTTP requests:
-
-```java
-Request washingtonPostRequest = new Request.Builder()
-    .url("https://www.washingtonpost.com/")
-    .build();
-client.newCall(washingtonPostRequest).enqueue(new Callback() {
-  ...
-});
-
-Request newYorkTimesRequest = new Request.Builder()
-    .url("https://www.nytimes.com/")
-    .build();
-client.newCall(newYorkTimesRequest).enqueue(new Callback() {
-  ...
-});
-```
-
-Running this race over home WiFi shows the Times (`0002`) completes just slightly sooner than the Post (`0001`):
-
-```
-0001 https://www.washingtonpost.com/
-0001 0.000 callStart
-0002 https://www.nytimes.com/
-0002 0.000 callStart
-0002 0.010 dnsStart
-0001 0.013 dnsStart
-0001 0.022 dnsEnd
-0002 0.019 dnsEnd
-0001 0.028 connectStart
-0002 0.025 connectStart
-0002 0.072 secureConnectStart
-0001 0.075 secureConnectStart
-0001 0.386 secureConnectEnd
-0002 0.390 secureConnectEnd
-0002 0.400 connectEnd
-0001 0.403 connectEnd
-0002 0.401 connectionAcquired
-0001 0.404 connectionAcquired
-0001 0.406 requestHeadersStart
-0002 0.403 requestHeadersStart
-0001 0.414 requestHeadersEnd
-0002 0.411 requestHeadersEnd
-0002 0.412 responseHeadersStart
-0001 0.415 responseHeadersStart
-0002 0.474 responseHeadersEnd
-0002 0.475 responseBodyStart
-0001 0.554 responseHeadersEnd
-0001 0.555 responseBodyStart
-0002 0.554 responseBodyEnd
-0002 0.554 connectionReleased
-0002 0.554 callEnd
-0001 0.624 responseBodyEnd
-0001 0.624 connectionReleased
-0001 0.624 callEnd
-```
-
-The `EventListener.Factory` also makes it possible to limit metrics to a subset of calls. This one captures metrics on a random 10%:
-
-```java
-class MetricsEventListener extends EventListener {
-  private static final Factory FACTORY = new Factory() {
-    @Override public EventListener create(Call call) {
-      if (Math.random() < 0.10) {
-        return new MetricsEventListener(call);
-      } else {
-        return EventListener.NONE;
-      }
-    }
-  };
-
-  ...
-}
-```
-
-### Events with Failures
-
-When an operation fails, a failure method is called. This is `connectFailed()` for failures while building a connection to the server, and `callFailed()` when the HTTP call fails permanently. When a failure happens it is possible that a `start` event won’t have a corresponding `end` event.
-
-![Events Diagram](images/events_with_failures@2x.png)
-
-### Events with Retries and Follow-Ups
-
-OkHttp is resilient and can automatically recover from some connectivity failures. In this case, the `connectFailed()` event is not terminal and not followed by `callFailed()`. Event listeners will receive multiple events of the same type when retries are attempted.
-
-A single HTTP call may require follow-up requests to be made to handle authentication challenges, redirects, and HTTP-layer timeouts. In such cases multiple connections, requests, and responses may be attempted. Follow-ups are another reason a single call may trigger multiple events of the same type.
-
-![Events Diagram](images/events_with_failures_and_retries@2x.png)
-
-### Availability
-
-Events is available as a public API in OkHttp 3.11. Future releases may introduce new event types; you will need to override the corresponding methods to handle them.
diff --git a/docs/https.md b/docs/https.md
deleted file mode 100644
index a4c8a0301b..0000000000
--- a/docs/https.md
+++ /dev/null
@@ -1,187 +0,0 @@
-HTTPS
-=====
-
-OkHttp attempts to balance two competing concerns:
-
- * **Connectivity** to as many hosts as possible. That includes advanced hosts that run the latest versions of [boringssl](https://boringssl.googlesource.com/boringssl/) and less out of date hosts running older versions of [OpenSSL](https://www.openssl.org/).
- * **Security** of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers.
-
-When negotiating a connection to an HTTPS server, OkHttp needs to know which [TLS versions](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-tls-version/) and [cipher suites](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cipher-suite/) to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites.
-
-Specific security vs. connectivity decisions are implemented by [ConnectionSpec](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-connection-spec/). OkHttp includes four built-in connection specs:
-
- * `RESTRICTED_TLS` is a secure configuration, intended to meet stricter compliance requirements.
- * `MODERN_TLS` is a secure configuration that connects to modern HTTPS servers.
- * `COMPATIBLE_TLS` is a secure configuration that connects to secure–but not current–HTTPS servers.
- * `CLEARTEXT` is an insecure configuration that is used for `http://` URLs.
-
-These loosely follow the model set in [Google Cloud Policies](https://cloud.google.com/load-balancing/docs/ssl-policies-concepts). We [track changes](tls_configuration_history.md) to this policy.
-
-By default, OkHttp will attempt a `MODERN_TLS` connection.  However by configuring the client connectionSpecs you can allow a fall back to `COMPATIBLE_TLS` connection if the modern configuration fails.
-
-```java
-OkHttpClient client = new OkHttpClient.Builder()
-    .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS))
-    .build();
-```
-
-The TLS versions and cipher suites in each spec can change with each release. For example, in OkHttp 2.2 we dropped support for SSL 3.0 in response to the [POODLE](http://googleonlinesecurity.blogspot.ca/2014/10/this-poodle-bites-exploiting-ssl-30.html) attack. And in OkHttp 2.3 we dropped support for [RC4](http://en.wikipedia.org/wiki/RC4#Security). As with your desktop web browser, staying up-to-date with OkHttp is the best way to stay secure.
-
-You can build your own connection spec with a custom set of TLS versions and cipher suites. For example, this configuration is limited to three highly-regarded cipher suites. Its drawback is that it requires Android 5.0+ and a similarly current webserver.
-
-```java
-ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
-    .tlsVersions(TlsVersion.TLS_1_2)
-    .cipherSuites(
-          CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
-          CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
-          CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)
-    .build();
-
-OkHttpClient client = new OkHttpClient.Builder()
-    .connectionSpecs(Collections.singletonList(spec))
-    .build();
-```
-
-### Certificate Pinning ([.kt][CertificatePinningKotlin], [.java][CertificatePinningJava]) 
-
-By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the [2011 DigiNotar attack](http://www.computerworld.com/article/2510951/cybercrime-hacking/hackers-spied-on-300-000-iranians-using-fake-google-certificate.html). It also assumes your HTTPS servers’ certificates are signed by a certificate authority.
-
-Use [CertificatePinner](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-certificate-pinner/) to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team’s abilities to update their TLS certificates. **Do not use certificate pinning without the blessing of your server’s TLS administrator!**
-
-```Kotlin tab=
-  private val client = OkHttpClient.Builder()
-      .certificatePinner(
-          CertificatePinner.Builder()
-              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
-              .build())
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://publicobject.com/robots.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      for (certificate in response.handshake!!.peerCertificates) {
-        println(CertificatePinner.pin(certificate))
-      }
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .certificatePinner(
-          new CertificatePinner.Builder()
-              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
-              .build())
-      .build();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/robots.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      for (Certificate certificate : response.handshake().peerCertificates()) {
-        System.out.println(CertificatePinner.pin(certificate));
-      }
-    }
-  }
-```
-
-### Customizing Trusted Certificates ([.kt][CustomTrustKotlin], [.java][CustomTrustJava])
-
-The full code sample shows how to replace the host platform’s certificate authorities with your own set. As above, **do not use custom certificates without the blessing of your server’s TLS administrator!**
-
-```Kotlin tab=
-  private val client: OkHttpClient
-
-  init {
-    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())
-    val sslContext = SSLContext.getInstance("TLS")
-    sslContext.init(null, arrayOf<TrustManager>(trustManager), null)
-    val sslSocketFactory = sslContext.socketFactory
-
-    client = OkHttpClient.Builder()
-        .sslSocketFactory(sslSocketFactory, trustManager)
-        .build()
-  }
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      for ((name, value) in response.headers) {
-        println("$name: $value")
-      }
-
-      println(response.body!!.string())
-    }
-  }
-
-  /**
-   * Returns an input stream containing one or more certificate PEM files. This implementation just
-   * embeds the PEM files in Java strings; most applications will instead read this from a resource
-   * file that gets bundled with the application.
-   */
-  private fun trustedCertificatesInputStream(): InputStream {
-    ... // Full source omitted. See sample.
-  }
-
-  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {
-    ... // Full source omitted. See sample.
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client;
-
-  public CustomTrust() {
-    X509TrustManager trustManager;
-    SSLSocketFactory sslSocketFactory;
-    try {
-      trustManager = trustManagerForCertificates(trustedCertificatesInputStream());
-      SSLContext sslContext = SSLContext.getInstance("TLS");
-      sslContext.init(null, new TrustManager[] { trustManager }, null);
-      sslSocketFactory = sslContext.getSocketFactory();
-    } catch (GeneralSecurityException e) {
-      throw new RuntimeException(e);
-    }
-
-    client = new OkHttpClient.Builder()
-        .sslSocketFactory(sslSocketFactory, trustManager)
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    Response response = client.newCall(request).execute();
-    System.out.println(response.body().string());
-  }
-
-  private InputStream trustedCertificatesInputStream() {
-    ... // Full source omitted. See sample.
-  }
-
-  public SSLContext sslContextForTrustedCertificates(InputStream in) {
-    ... // Full source omitted. See sample.
-  }
-```
-
- [CustomTrustJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
- [CustomTrustKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt
- [CertificatePinningJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
- [CertificatePinningKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt
diff --git a/docs/images/disable_advanced_profiling@2x.png b/docs/images/disable_advanced_profiling@2x.png
deleted file mode 100644
index 672fb514b5..0000000000
Binary files a/docs/images/disable_advanced_profiling@2x.png and /dev/null differ
diff --git a/docs/images/events@2x.png b/docs/images/events@2x.png
deleted file mode 100644
index 24a2084772..0000000000
Binary files a/docs/images/events@2x.png and /dev/null differ
diff --git a/docs/images/events_with_failures@2x.png b/docs/images/events_with_failures@2x.png
deleted file mode 100644
index 7578c646fe..0000000000
Binary files a/docs/images/events_with_failures@2x.png and /dev/null differ
diff --git a/docs/images/events_with_failures_and_retries@2x.png b/docs/images/events_with_failures_and_retries@2x.png
deleted file mode 100644
index 55348a2681..0000000000
Binary files a/docs/images/events_with_failures_and_retries@2x.png and /dev/null differ
diff --git a/docs/images/icon-square.png b/docs/images/icon-square.png
deleted file mode 100644
index bdc98d1c2f..0000000000
Binary files a/docs/images/icon-square.png and /dev/null differ
diff --git a/docs/images/interceptors@2x.png b/docs/images/interceptors@2x.png
deleted file mode 100644
index 3a832cffd0..0000000000
Binary files a/docs/images/interceptors@2x.png and /dev/null differ
diff --git a/docs/images/logo-square.png b/docs/images/logo-square.png
deleted file mode 100644
index 788b301adb..0000000000
Binary files a/docs/images/logo-square.png and /dev/null differ
diff --git a/docs/interceptors.md b/docs/interceptors.md
deleted file mode 100644
index e040b23f6c..0000000000
--- a/docs/interceptors.md
+++ /dev/null
@@ -1,193 +0,0 @@
-Interceptors
-============
-
-Interceptors are a powerful mechanism that can monitor, rewrite, and retry calls. Here's a simple interceptor that logs the outgoing request and the incoming response.
-
-```java
-class LoggingInterceptor implements Interceptor {
-  @Override public Response intercept(Interceptor.Chain chain) throws IOException {
-    Request request = chain.request();
-
-    long t1 = System.nanoTime();
-    logger.info(String.format("Sending request %s on %s%n%s",
-        request.url(), chain.connection(), request.headers()));
-
-    Response response = chain.proceed(request);
-
-    long t2 = System.nanoTime();
-    logger.info(String.format("Received response for %s in %.1fms%n%s",
-        response.request().url(), (t2 - t1) / 1e6d, response.headers()));
-
-    return response;
-  }
-}
-```
-
-A call to `chain.proceed(request)` is a critical part of each interceptor’s implementation. This simple-looking method is where all the HTTP work happens, producing a response to satisfy the request. If `chain.proceed(request)` is being called more than once previous response bodies must be closed.
-
-Interceptors can be chained. Suppose you have both a compressing interceptor and a checksumming interceptor: you'll need to decide whether data is compressed and then checksummed, or checksummed and then compressed. OkHttp uses lists to track interceptors, and interceptors are called in order.
-
-![Interceptors Diagram](images/interceptors@2x.png)
-
-### Application Interceptors
-
-Interceptors are registered as either _application_ or _network_ interceptors. We'll use the `LoggingInterceptor` defined above to show the difference.
-
-Register an _application_ interceptor by calling `addInterceptor()` on `OkHttpClient.Builder`:
-
-```java
-OkHttpClient client = new OkHttpClient.Builder()
-    .addInterceptor(new LoggingInterceptor())
-    .build();
-
-Request request = new Request.Builder()
-    .url("http://www.publicobject.com/helloworld.txt")
-    .header("User-Agent", "OkHttp Example")
-    .build();
-
-Response response = client.newCall(request).execute();
-response.body().close();
-```
-
-The URL `http://www.publicobject.com/helloworld.txt` redirects to `https://publicobject.com/helloworld.txt`, and OkHttp follows this redirect automatically. Our application interceptor is called **once** and the response returned from `chain.proceed()` has the redirected response:
-
-```
-INFO: Sending request http://www.publicobject.com/helloworld.txt on null
-User-Agent: OkHttp Example
-
-INFO: Received response for https://publicobject.com/helloworld.txt in 1179.7ms
-Server: nginx/1.4.6 (Ubuntu)
-Content-Type: text/plain
-Content-Length: 1759
-Connection: keep-alive
-```
-
-We can see that we were redirected because `response.request().url()` is different from `request.url()`. The two log statements log two different URLs.
-
-### Network Interceptors
-
-Registering a network interceptor is quite similar. Call `addNetworkInterceptor()` instead of `addInterceptor()`:
-
-```java
-OkHttpClient client = new OkHttpClient.Builder()
-    .addNetworkInterceptor(new LoggingInterceptor())
-    .build();
-
-Request request = new Request.Builder()
-    .url("http://www.publicobject.com/helloworld.txt")
-    .header("User-Agent", "OkHttp Example")
-    .build();
-
-Response response = client.newCall(request).execute();
-response.body().close();
-```
-
-When we run this code, the interceptor runs twice. Once for the initial request to `http://www.publicobject.com/helloworld.txt`, and another for the redirect to `https://publicobject.com/helloworld.txt`.
-
-```
-INFO: Sending request http://www.publicobject.com/helloworld.txt on Connection{www.publicobject.com:80, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=none protocol=http/1.1}
-User-Agent: OkHttp Example
-Host: www.publicobject.com
-Connection: Keep-Alive
-Accept-Encoding: gzip
-
-INFO: Received response for http://www.publicobject.com/helloworld.txt in 115.6ms
-Server: nginx/1.4.6 (Ubuntu)
-Content-Type: text/html
-Content-Length: 193
-Connection: keep-alive
-Location: https://publicobject.com/helloworld.txt
-
-INFO: Sending request https://publicobject.com/helloworld.txt on Connection{publicobject.com:443, proxy=DIRECT hostAddress=54.187.32.157 cipherSuite=TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA protocol=http/1.1}
-User-Agent: OkHttp Example
-Host: publicobject.com
-Connection: Keep-Alive
-Accept-Encoding: gzip
-
-INFO: Received response for https://publicobject.com/helloworld.txt in 80.9ms
-Server: nginx/1.4.6 (Ubuntu)
-Content-Type: text/plain
-Content-Length: 1759
-Connection: keep-alive
-```
-
-The network requests also contain more data, such as the `Accept-Encoding: gzip` header added by OkHttp to advertise support for response compression. The network interceptor's `Chain` has a non-null `Connection` that can be used to interrogate the IP address and TLS configuration that were used to connect to the webserver.
-
-### Choosing between application and network interceptors
-
-Each interceptor chain has relative merits.
-
-**Application interceptors**
-
- * Don't need to worry about intermediate responses like redirects and retries.
- * Are always invoked once, even if the HTTP response is served from the cache.
- * Observe the application's original intent. Unconcerned with OkHttp-injected headers like `If-None-Match`.
- * Permitted to short-circuit and not call `Chain.proceed()`.
- * Permitted to retry and make multiple calls to `Chain.proceed()`.
-
-**Network Interceptors**
-
- * Able to operate on intermediate responses like redirects and retries.
- * Not invoked for cached responses that short-circuit the network.
- * Observe the data just as it will be transmitted over the network.
- * Access to the `Connection` that carries the request.
-
-### Rewriting Requests
-
-Interceptors can add, remove, or replace request headers. They can also transform the body of those requests that have one. For example, you can use an application interceptor to add request body compression if you're connecting to a webserver known to support it.
-
-```java
-/** This interceptor compresses the HTTP request body. Many webservers can't handle this! */
-final class GzipRequestInterceptor implements Interceptor {
-  @Override public Response intercept(Interceptor.Chain chain) throws IOException {
-    Request originalRequest = chain.request();
-    if (originalRequest.body() == null || originalRequest.header("Content-Encoding") != null) {
-      return chain.proceed(originalRequest);
-    }
-
-    Request compressedRequest = originalRequest.newBuilder()
-        .header("Content-Encoding", "gzip")
-        .method(originalRequest.method(), gzip(originalRequest.body()))
-        .build();
-    return chain.proceed(compressedRequest);
-  }
-
-  private RequestBody gzip(final RequestBody body) {
-    return new RequestBody() {
-      @Override public MediaType contentType() {
-        return body.contentType();
-      }
-
-      @Override public long contentLength() {
-        return -1; // We don't know the compressed length in advance!
-      }
-
-      @Override public void writeTo(BufferedSink sink) throws IOException {
-        BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));
-        body.writeTo(gzipSink);
-        gzipSink.close();
-      }
-    };
-  }
-}
-```
-
-### Rewriting Responses
-
-Symmetrically, interceptors can rewrite response headers and transform the response body. This is generally more dangerous than rewriting request headers because it may violate the webserver's expectations!
-
-If you're in a tricky situation and prepared to deal with the consequences, rewriting response headers is a powerful way to work around problems. For example, you can fix a server's misconfigured `Cache-Control` response header to enable better response caching:
-
-```java
-/** Dangerous interceptor that rewrites the server's cache-control header. */
-private static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor() {
-  @Override public Response intercept(Interceptor.Chain chain) throws IOException {
-    Response originalResponse = chain.proceed(chain.request());
-    return originalResponse.newBuilder()
-        .header("Cache-Control", "max-age=60")
-        .build();
-  }
-};
-```
-
-Typically this approach works best when it complements a corresponding fix on the webserver!
diff --git a/docs/recipes.md b/docs/recipes.md
deleted file mode 100644
index fb153c3abf..0000000000
--- a/docs/recipes.md
+++ /dev/null
@@ -1,939 +0,0 @@
-Recipes
-=======
-
-We've written some recipes that demonstrate how to solve common problems with OkHttp. Read through them to learn about how everything works together. Cut-and-paste these examples freely; that's what they're for.
- 
-### Synchronous Get ([.kt][SynchronousGetKotlin], [.java][SynchronousGetJava])
-
-Download a file, print its headers, and print its response body as a string.
-
-The `string()` method on response body is convenient and efficient for small documents. But if the response body is large (greater than 1 MiB), avoid `string()` because it will load the entire document into memory. In that case, prefer to process the body as a stream.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      for ((name, value) in response.headers) {
-        println("$name: $value")
-      }
-
-      println(response.body!!.string())
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      Headers responseHeaders = response.headers();
-      for (int i = 0; i < responseHeaders.size(); i++) {
-        System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
-      }
-
-      System.out.println(response.body().string());
-    }
-  }
-```
- 
-### Asynchronous Get ([.kt][AsynchronousGetKotlin], [.java][AsynchronousGetJava])
-
-Download a file on a worker thread, and get called back when the response is readable. The callback is made after the response headers are ready. Reading the response body may still block. OkHttp doesn't currently offer asynchronous APIs to receive a response body in parts.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build()
-
-    client.newCall(request).enqueue(object : Callback {
-      override fun onFailure(call: Call, e: IOException) {
-        e.printStackTrace()
-      }
-
-      override fun onResponse(call: Call, response: Response) {
-        response.use {
-          if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-          for ((name, value) in response.headers) {
-            println("$name: $value")
-          }
-
-          println(response.body!!.string())
-        }
-      }
-    })
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build();
-
-    client.newCall(request).enqueue(new Callback() {
-      @Override public void onFailure(Call call, IOException e) {
-        e.printStackTrace();
-      }
-
-      @Override public void onResponse(Call call, Response response) throws IOException {
-        try (ResponseBody responseBody = response.body()) {
-          if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-          Headers responseHeaders = response.headers();
-          for (int i = 0, size = responseHeaders.size(); i < size; i++) {
-            System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
-          }
-
-          System.out.println(responseBody.string());
-        }
-      }
-    });
-  }
-```
- 
-### Accessing Headers ([.kt][AccessHeadersKotlin], [.java][AccessHeadersJava])
-
-Typically HTTP headers work like a `Map<String, String>`: each field has one value or none. But some headers permit multiple values, like Guava's [Multimap](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Multimap.html). For example, it's legal and common for an HTTP response to supply multiple `Vary` headers. OkHttp's APIs attempt to make both cases comfortable.
-
-When writing request headers, use `header(name, value)` to set the only occurrence of `name` to `value`. If there are existing values, they will be removed before the new value is added. Use `addHeader(name, value)` to add a header without removing the headers already present.
-
-When reading response a header, use `header(name)` to return the _last_ occurrence of the named value. Usually this is also the only occurrence! If no value is present, `header(name)` will return null. To read all of a field's values as a list, use `headers(name)`.
-
-To visit all headers, use the `Headers` class which supports access by index.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://api.github.com/repos/square/okhttp/issues")
-        .header("User-Agent", "OkHttp Headers.java")
-        .addHeader("Accept", "application/json; q=0.5")
-        .addHeader("Accept", "application/vnd.github.v3+json")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println("Server: ${response.header("Server")}")
-      println("Date: ${response.header("Date")}")
-      println("Vary: ${response.headers("Vary")}")
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://api.github.com/repos/square/okhttp/issues")
-        .header("User-Agent", "OkHttp Headers.java")
-        .addHeader("Accept", "application/json; q=0.5")
-        .addHeader("Accept", "application/vnd.github.v3+json")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println("Server: " + response.header("Server"));
-      System.out.println("Date: " + response.header("Date"));
-      System.out.println("Vary: " + response.headers("Vary"));
-    }
-  }
-```
- 
-### Posting a String ([.kt][PostStringKotlin], [.java][PostStringJava])
-
-Use an HTTP POST to send a request body to a service. This example posts a markdown document to a web service that renders markdown as HTML. Because the entire request body is in memory simultaneously, avoid posting large (greater than 1 MiB) documents using this API.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val postBody = """
-        |Releases
-        |--------
-        |
-        | * _1.0_ May 6, 2013
-        | * _1.1_ June 15, 2013
-        | * _1.2_ August 11, 2013
-        |""".trimMargin()
-
-    val request = Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
-  }
-```
-
-```Java tab=
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.parse("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    String postBody = ""
-        + "Releases\n"
-        + "--------\n"
-        + "\n"
-        + " * _1.0_ May 6, 2013\n"
-        + " * _1.1_ June 15, 2013\n"
-        + " * _1.2_ August 11, 2013\n";
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-```
- 
-### Post Streaming ([.kt][PostStreamingKotlin], [.java][PostStreamingJava])
- 
-Here we `POST` a request body as a stream. The content of this request body is being generated as it's being written. This example streams directly into the [Okio](https://github.com/square/okio) buffered sink. Your programs may prefer an `OutputStream`, which you can get from `BufferedSink.outputStream()`.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val requestBody = object : RequestBody() {
-      override fun contentType() = MEDIA_TYPE_MARKDOWN
-
-      override fun writeTo(sink: BufferedSink) {
-        sink.writeUtf8("Numbers\n")
-        sink.writeUtf8("-------\n")
-        for (i in 2..997) {
-          sink.writeUtf8(String.format(" * $i = ${factor(i)}\n"))
-        }
-      }
-
-      private fun factor(n: Int): String {
-        for (i in 2 until n) {
-          val x = n / i
-          if (x * i == n) return "${factor(x)} × $i"
-        }
-        return n.toString()
-      }
-    }
-
-    val request = Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(requestBody)
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
-  }
-```
-
-```Java tab=
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.parse("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    RequestBody requestBody = new RequestBody() {
-      @Override public MediaType contentType() {
-        return MEDIA_TYPE_MARKDOWN;
-      }
-
-      @Override public void writeTo(BufferedSink sink) throws IOException {
-        sink.writeUtf8("Numbers\n");
-        sink.writeUtf8("-------\n");
-        for (int i = 2; i <= 997; i++) {
-          sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i)));
-        }
-      }
-
-      private String factor(int n) {
-        for (int i = 2; i < n; i++) {
-          int x = n / i;
-          if (x * i == n) return factor(x) + " × " + i;
-        }
-        return Integer.toString(n);
-      }
-    };
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(requestBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-```
- 
-### Posting a File ([.kt][PostFileKotlin], [.java][PostFileJava])
-
-It's easy to use a file as a request body.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val file = File("README.md")
-
-    val request = Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
-  }
-```
-
-```Java tab=
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.parse("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    File file = new File("README.md");
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-```
- 
-### Posting form parameters ([.kt][PostFormKotlin], [.java][PostFormJava])
-
-Use `FormBody.Builder` to build a request body that works like an HTML `<form>` tag. Names and values will be encoded using an HTML-compatible form URL encoding.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val formBody = FormBody.Builder()
-        .add("search", "Jurassic Park")
-        .build()
-    val request = Request.Builder()
-        .url("https://en.wikipedia.org/w/index.php")
-        .post(formBody)
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    RequestBody formBody = new FormBody.Builder()
-        .add("search", "Jurassic Park")
-        .build();
-    Request request = new Request.Builder()
-        .url("https://en.wikipedia.org/w/index.php")
-        .post(formBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-```
- 
-### Posting a multipart request ([.kt][PostMultipartKotlin], [.java][PostMultipartJava])
-
-`MultipartBody.Builder` can build sophisticated request bodies compatible with HTML file upload forms. Each part of a multipart request body is itself a request body, and can define its own headers. If present, these headers should describe the part body, such as its `Content-Disposition`. The `Content-Length` and `Content-Type` headers are added automatically if they're available.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
-    val requestBody = MultipartBody.Builder()
-        .setType(MultipartBody.FORM)
-        .addFormDataPart("title", "Square Logo")
-        .addFormDataPart("image", "logo-square.png",
-            File("docs/images/logo-square.png").asRequestBody(MEDIA_TYPE_PNG))
-        .build()
-
-    val request = Request.Builder()
-        .header("Authorization", "Client-ID $IMGUR_CLIENT_ID")
-        .url("https://api.imgur.com/3/image")
-        .post(requestBody)
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    /**
-     * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
-     * these examples, please request your own client ID! https://api.imgur.com/oauth2
-     */
-    private val IMGUR_CLIENT_ID = "9199fdef135c122"
-    private val MEDIA_TYPE_PNG = "image/png".toMediaType()
-  }
-```
-
-```Java tab=
-  /**
-   * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
-   * these examples, please request your own client ID! https://api.imgur.com/oauth2
-   */
-  private static final String IMGUR_CLIENT_ID = "...";
-  private static final MediaType MEDIA_TYPE_PNG = MediaType.parse("image/png");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
-    RequestBody requestBody = new MultipartBody.Builder()
-        .setType(MultipartBody.FORM)
-        .addFormDataPart("title", "Square Logo")
-        .addFormDataPart("image", "logo-square.png",
-            RequestBody.create(MEDIA_TYPE_PNG, new File("website/static/logo-square.png")))
-        .build();
-
-    Request request = new Request.Builder()
-        .header("Authorization", "Client-ID " + IMGUR_CLIENT_ID)
-        .url("https://api.imgur.com/3/image")
-        .post(requestBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-```
- 
-### Parse a JSON Response With Moshi ([.kt][ParseResponseWithMoshiKotlin], [.java][ParseResponseWithMoshiJava])
-  
-[Moshi](https://github.com/square/moshi) is a handy API for converting between JSON and Java objects. Here we're using it to decode a JSON response from a GitHub API.
-
-Note that `ResponseBody.charStream()` uses the `Content-Type` response header to select which charset to use when decoding the response body. It defaults to `UTF-8` if no charset is specified.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-  private val moshi = Moshi.Builder().build()
-  private val gistJsonAdapter = moshi.adapter(Gist::class.java)
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://api.github.com/gists/c2a7c39532239ff261be")
-        .build()
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      val gist = gistJsonAdapter.fromJson(response.body!!.source())
-
-      for ((key, value) in gist!!.files!!) {
-        println(key)
-        println(value.content)
-      }
-    }
-  }
-
-  @JsonClass(generateAdapter = true)
-  data class Gist(var files: Map<String, GistFile>?)
-
-  @JsonClass(generateAdapter = true)
-  data class GistFile(var content: String?)
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient();
-  private final Moshi moshi = new Moshi.Builder().build();
-  private final JsonAdapter<Gist> gistJsonAdapter = moshi.adapter(Gist.class);
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://api.github.com/gists/c2a7c39532239ff261be")
-        .build();
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      Gist gist = gistJsonAdapter.fromJson(response.body().source());
-
-      for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {
-        System.out.println(entry.getKey());
-        System.out.println(entry.getValue().content);
-      }
-    }
-  }
-
-  static class Gist {
-    Map<String, GistFile> files;
-  }
-
-  static class GistFile {
-    String content;
-  }
-```
- 
-### Response Caching ([.kt][CacheResponseKotlin], [.java][CacheResponseJava])
-
-To cache responses, you'll need a cache directory that you can read and write to, and a limit on the cache's size. The cache directory should be private, and untrusted applications should not be able to read its contents!
-
-It is an error to have multiple caches accessing the same cache directory simultaneously. Most applications should call `new OkHttpClient()` exactly once, configure it with their cache, and use that same instance everywhere. Otherwise the two cache instances will stomp on each other, corrupt the response cache, and possibly crash your program.
-
-Response caching uses HTTP headers for all configuration. You can add request headers like `Cache-Control: max-stale=3600` and OkHttp's cache will honor them. Your webserver configures how long responses are cached with its own response headers, like `Cache-Control: max-age=9600`. There are cache headers to force a cached response, force a network response, or force the network response to be validated with a conditional GET.
-
-```Kotlin tab=
-  private val client: OkHttpClient = OkHttpClient.Builder()
-      .cache(Cache(
-          directory = cacheDirectory,
-          maxSize = 10L * 1024L * 1024L // 1 MiB
-      ))
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build()
-
-    val response1Body = client.newCall(request).execute().use {
-      if (!it.isSuccessful) throw IOException("Unexpected code $it")
-
-      println("Response 1 response:          $it")
-      println("Response 1 cache response:    ${it.cacheResponse}")
-      println("Response 1 network response:  ${it.networkResponse}")
-      return@use it.body!!.string()
-    }
-
-    val response2Body = client.newCall(request).execute().use {
-      if (!it.isSuccessful) throw IOException("Unexpected code $it")
-
-      println("Response 2 response:          $it")
-      println("Response 2 cache response:    ${it.cacheResponse}")
-      println("Response 2 network response:  ${it.networkResponse}")
-      return@use it.body!!.string()
-    }
-
-    println("Response 2 equals Response 1? " + (response1Body == response2Body))
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client;
-
-  public CacheResponse(File cacheDirectory) throws Exception {
-    int cacheSize = 10 * 1024 * 1024; // 10 MiB
-    Cache cache = new Cache(cacheDirectory, cacheSize);
-
-    client = new OkHttpClient.Builder()
-        .cache(cache)
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build();
-
-    String response1Body;
-    try (Response response1 = client.newCall(request).execute()) {
-      if (!response1.isSuccessful()) throw new IOException("Unexpected code " + response1);
-
-      response1Body = response1.body().string();
-      System.out.println("Response 1 response:          " + response1);
-      System.out.println("Response 1 cache response:    " + response1.cacheResponse());
-      System.out.println("Response 1 network response:  " + response1.networkResponse());
-    }
-
-    String response2Body;
-    try (Response response2 = client.newCall(request).execute()) {
-      if (!response2.isSuccessful()) throw new IOException("Unexpected code " + response2);
-
-      response2Body = response2.body().string();
-      System.out.println("Response 2 response:          " + response2);
-      System.out.println("Response 2 cache response:    " + response2.cacheResponse());
-      System.out.println("Response 2 network response:  " + response2.networkResponse());
-    }
-
-    System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
-  }
-```
-
-To prevent a response from using the cache, use [`CacheControl.FORCE_NETWORK`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-n-e-t-w-o-r-k/). To prevent it from using the network, use [`CacheControl.FORCE_CACHE`](http://square.github.io/okhttp/4.x/okhttp/okhttp3/-cache-control/-f-o-r-c-e_-c-a-c-h-e/). Be warned: if you use `FORCE_CACHE` and the response requires the network, OkHttp will return a `504 Unsatisfiable Request` response.
- 
-### Canceling a Call ([.kt][CancelCallKotlin], [.java][CancelCallJava])
-
-Use `Call.cancel()` to stop an ongoing call immediately. If a thread is currently writing a request or reading a response, it will receive an `IOException`. Use this to conserve the network when a call is no longer necessary; for example when your user navigates away from an application. Both synchronous and asynchronous calls can be canceled.
-
-```Kotlin tab=
-  private val executor = Executors.newScheduledThreadPool(1)
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build()
-
-    val startNanos = System.nanoTime()
-    val call = client.newCall(request)
-
-    // Schedule a job to cancel the call in 1 second.
-    executor.schedule({
-      System.out.printf("%.2f Canceling call.%n", (System.nanoTime() - startNanos) / 1e9f)
-      call.cancel()
-      System.out.printf("%.2f Canceled call.%n", (System.nanoTime() - startNanos) / 1e9f)
-    }, 1, TimeUnit.SECONDS)
-
-    System.out.printf("%.2f Executing call.%n", (System.nanoTime() - startNanos) / 1e9f)
-    try {
-      call.execute().use { response ->
-        System.out.printf("%.2f Call was expected to fail, but completed: %s%n",
-            (System.nanoTime() - startNanos) / 1e9f, response)
-      }
-    } catch (e: IOException) {
-      System.out.printf("%.2f Call failed as expected: %s%n",
-          (System.nanoTime() - startNanos) / 1e9f, e)
-    }
-  }
-```
-
-```Java tab=
-  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build();
-
-    final long startNanos = System.nanoTime();
-    final Call call = client.newCall(request);
-
-    // Schedule a job to cancel the call in 1 second.
-    executor.schedule(new Runnable() {
-      @Override public void run() {
-        System.out.printf("%.2f Canceling call.%n", (System.nanoTime() - startNanos) / 1e9f);
-        call.cancel();
-        System.out.printf("%.2f Canceled call.%n", (System.nanoTime() - startNanos) / 1e9f);
-      }
-    }, 1, TimeUnit.SECONDS);
-
-    System.out.printf("%.2f Executing call.%n", (System.nanoTime() - startNanos) / 1e9f);
-    try (Response response = call.execute()) {
-      System.out.printf("%.2f Call was expected to fail, but completed: %s%n",
-          (System.nanoTime() - startNanos) / 1e9f, response);
-    } catch (IOException e) {
-      System.out.printf("%.2f Call failed as expected: %s%n",
-          (System.nanoTime() - startNanos) / 1e9f, e);
-    }
-  }
-```
- 
-### Timeouts ([.kt][ConfigureTimeoutsKotlin], [.java][ConfigureTimeoutsJava])
-
-Use timeouts to fail a call when its peer is unreachable. Network partitions can be due to client connectivity problems, server availability problems, or anything between. OkHttp supports connect, write, read, and full call timeouts.
-
-```Kotlin tab=
-  private val client: OkHttpClient = OkHttpClient.Builder()
-      .connectTimeout(5, TimeUnit.SECONDS)
-      .writeTimeout(5, TimeUnit.SECONDS)
-      .readTimeout(5, TimeUnit.SECONDS)
-      .callTimeout(10, TimeUnit.SECONDS)
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      println("Response completed: $response")
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client;
-
-  public ConfigureTimeouts() throws Exception {
-    client = new OkHttpClient.Builder()
-        .connectTimeout(10, TimeUnit.SECONDS)
-        .writeTimeout(10, TimeUnit.SECONDS)
-        .readTimeout(30, TimeUnit.SECONDS)
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      System.out.println("Response completed: " + response);
-    }
-  }
-```
- 
-### Per-call Configuration ([.kt][PerCallSettingsKotlin], [.java][PerCallSettingsJava])
-
-All the HTTP client configuration lives in `OkHttpClient` including proxy settings, timeouts, and caches. When you need to change the configuration of a single call, call `OkHttpClient.newBuilder()`. This returns a builder that shares the same connection pool, dispatcher, and configuration with the original client. In the example below, we make one request with a 500 ms timeout and another with a 3000 ms timeout.
-
-```Kotlin tab=
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
-        .build()
-
-    // Copy to customize OkHttp for this request.
-    val client1 = client.newBuilder()
-        .readTimeout(500, TimeUnit.MILLISECONDS)
-        .build()
-    try {
-      client1.newCall(request).execute().use { response ->
-        println("Response 1 succeeded: $response")
-      }
-    } catch (e: IOException) {
-      println("Response 1 failed: $e")
-    }
-
-    // Copy to customize OkHttp for this request.
-    val client2 = client.newBuilder()
-        .readTimeout(3000, TimeUnit.MILLISECONDS)
-        .build()
-    try {
-      client2.newCall(request).execute().use { response ->
-        println("Response 2 succeeded: $response")
-      }
-    } catch (e: IOException) {
-      println("Response 2 failed: $e")
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
-        .build();
-
-    // Copy to customize OkHttp for this request.
-    OkHttpClient client1 = client.newBuilder()
-        .readTimeout(500, TimeUnit.MILLISECONDS)
-        .build();
-    try (Response response = client1.newCall(request).execute()) {
-      System.out.println("Response 1 succeeded: " + response);
-    } catch (IOException e) {
-      System.out.println("Response 1 failed: " + e);
-    }
-
-    // Copy to customize OkHttp for this request.
-    OkHttpClient client2 = client.newBuilder()
-        .readTimeout(3000, TimeUnit.MILLISECONDS)
-        .build();
-    try (Response response = client2.newCall(request).execute()) {
-      System.out.println("Response 2 succeeded: " + response);
-    } catch (IOException e) {
-      System.out.println("Response 2 failed: " + e);
-    }
-  }
-```
- 
-### Handling authentication ([.kt][AuthenticateKotlin], [.java][AuthenticateJava])
-
-OkHttp can automatically retry unauthenticated requests. When a response is `401 Not Authorized`, an `Authenticator` is asked to supply credentials. Implementations should build a new request that includes the missing credentials. If no credentials are available, return null to skip the retry.
-
-Use `Response.challenges()` to get the schemes and realms of any authentication challenges. When fulfilling a `Basic` challenge, use `Credentials.basic(username, password)` to encode the request header.
-
-```Kotlin tab=
-  private val client = OkHttpClient.Builder()
-      .authenticator(object : Authenticator {
-        @Throws(IOException::class)
-        override fun authenticate(route: Route?, response: Response): Request? {
-          if (response.request.header("Authorization") != null) {
-            return null // Give up, we've already attempted to authenticate.
-          }
-
-          println("Authenticating for response: $response")
-          println("Challenges: ${response.challenges()}")
-          val credential = Credentials.basic("jesse", "password1")
-          return response.request.newBuilder()
-              .header("Authorization", credential)
-              .build()
-        }
-      })
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://publicobject.com/secrets/hellosecret.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-```
-
-```Java tab=
-  private final OkHttpClient client;
-
-  public Authenticate() {
-    client = new OkHttpClient.Builder()
-        .authenticator(new Authenticator() {
-          @Override public Request authenticate(Route route, Response response) throws IOException {
-            if (response.request().header("Authorization") != null) {
-              return null; // Give up, we've already attempted to authenticate.
-            }
-
-            System.out.println("Authenticating for response: " + response);
-            System.out.println("Challenges: " + response.challenges());
-            String credential = Credentials.basic("jesse", "password1");
-            return response.request().newBuilder()
-                .header("Authorization", credential)
-                .build();
-          }
-        })
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/secrets/hellosecret.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-```
-
-To avoid making many retries when authentication isn't working, you can return null to give up. For example, you may want to skip the retry when these exact credentials have already been attempted:
-
-```java
-  if (credential.equals(response.request().header("Authorization"))) {
-    return null; // If we already failed with these credentials, don't retry.
-   }
-```
-
-You may also skip the retry when you’ve hit an application-defined attempt limit:
-
-```java
-  if (responseCount(response) >= 3) {
-    return null; // If we've failed 3 times, give up.
-  }
-```
-
-This above code relies on this `responseCount()` method:
-
-```java
-  private int responseCount(Response response) {
-    int result = 1;
-    while ((response = response.priorResponse()) != null) {
-      result++;
-    }
-    return result;
-  }
-```
-
- [SynchronousGetJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java 
- [SynchronousGetKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt
- [AsynchronousGetJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java 
- [AsynchronousGetKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt
- [AccessHeadersJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java 
- [AccessHeadersKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt
- [PostStringJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostString.java 
- [PostStringKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt
- [PostStreamingJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java 
- [PostStreamingKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt
- [PostFileJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostFile.java 
- [PostFileKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt
- [PostFormJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostForm.java 
- [PostFormKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt
- [PostMultipartJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java 
- [PostMultipartKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt
- [ParseResponseWithMoshiJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java 
- [ParseResponseWithMoshiKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt
- [CacheResponseJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java 
- [CacheResponseKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt
- [CancelCallJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java 
- [CancelCallKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt
- [ConfigureTimeoutsJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java 
- [ConfigureTimeoutsKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt
- [PerCallSettingsJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java 
- [PerCallSettingsKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt
- [AuthenticateJava]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java 
- [AuthenticateKotlin]: https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt
diff --git a/docs/releasing.md b/docs/releasing.md
deleted file mode 100644
index b19b2b8eaf..0000000000
--- a/docs/releasing.md
+++ /dev/null
@@ -1,105 +0,0 @@
-Releasing
-=========
-
-### Prerequisite: Sonatype (Maven Central) Account
-
-Create an account on the [Sonatype issues site][sonatype_issues]. Ask an existing publisher to open
-an issue requesting publishing permissions for `com.squareup` projects.
-
-### Prerequisite: GPG Keys
-
-Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the
-password empty for this key.
-
-```
-$ gpg --full-generate-key
-```
-
-Upload the GPG keys to public servers:
-
-```
-$ gpg --list-keys --keyid-format LONG
-/Users/johnbarber/.gnupg/pubring.kbx
-------------------------------
-pub   rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13]
-      YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
-uid           [ultimate] John Barber <jbarber@squareup.com>
-sub   rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13]
-
-$ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX
-```
-
-### Prerequisite: Gradle Properties
-
-Define publishing properties in `~/.gradle/gradle.properties`:
-
-```
-signing.keyId=1A2345F8
-signing.password=
-signing.secretKeyRingFile=/Users/jbarber/.gnupg/secring.gpg
-```
-
-`signing.keyId` is the GPG key's ID. Get it with this:
-
-   ```
-   $ gpg --list-keys --keyid-format SHORT
-   ```
-
-`signing.password` is the password for this key. This might be empty!
-
-`signing.secretKeyRingFile` is the absolute path for `secring.gpg`. You may need to export this
-file manually with the following command where `XXXXXXXX` is the `keyId` above:
-
-   ```
-   $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg
-   ```
-
-
-Cutting a Release
------------------
-
-1. Update `CHANGELOG.md`.
-
-2. Set versions:
-
-    ```
-    export RELEASE_VERSION=X.Y.Z
-    export NEXT_VERSION=X.Y.Z-SNAPSHOT
-    ```
-
-3. Set environment variables with your [Sonatype credentials][sonatype_issues].
-
-    ```
-    export SONATYPE_NEXUS_USERNAME=johnbarber
-    export SONATYPE_NEXUS_PASSWORD=`pbpaste`
-    ```
-
-4. Update, build, and upload:
-
-    ```
-    sed -i "" \
-      "s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g" \
-      gradle.properties
-    sed -i "" \
-      "s/\"com.squareup.okhttp3:\([^\:]*\):[^\"]*\"/\"com.squareup.okhttp3:\1:$RELEASE_VERSION\"/g" \
-      `find . -name "README.md"`
-    ./gradlew clean uploadArchives
-    ```
-
-5. Visit [Sonatype Nexus][sonatype_nexus] to promote (close then release) the artifact. Or drop it
-   if there is a problem!
-
-6. Tag the release, prepare for the next one, and push to GitHub.
-
-    ```
-    git commit -am "Prepare for release $RELEASE_VERSION."
-    git tag -a parent-$RELEASE_VERSION -m "Version $RELEASE_VERSION"
-    sed -i "" \
-      "s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g" \
-      gradle.properties
-    git commit -am "Prepare next development version."
-    git push && git push --tags
-    ```
-
- [sonatype_issues]: https://issues.sonatype.org/
- [sonatype_nexus]: https://oss.sonatype.org/
\ No newline at end of file
diff --git a/docs/security.md b/docs/security.md
deleted file mode 100644
index eb0bfcad27..0000000000
--- a/docs/security.md
+++ /dev/null
@@ -1,20 +0,0 @@
-Security Policy
-===============
-
-## Supported Versions
-
-| Version | Supported  | Notes          |
-| ------- | ---------- | -------------- |
-| 4.x     | ✅         |                |
-| 3.14.x  | ✅         |                |
-| 3.12.x  | ✅         | Android 2.3+ (API level 9+) and Java 7+. Platforms may not support TLSv1.2. Until December 31, 2020  |
-
-
-## Reporting a Vulnerability
-
-Square recognizes the important contributions the security research community
-can make. We therefore encourage reporting security issues with the code
-contained in this repository.
-
-If you believe you have discovered a security vulnerability, please follow the
-guidelines at https://hackerone.com/square-open-source
diff --git a/docs/tls_configuration_history.md b/docs/tls_configuration_history.md
deleted file mode 100644
index 7ed6e3f5c0..0000000000
--- a/docs/tls_configuration_history.md
+++ /dev/null
@@ -1,264 +0,0 @@
-TLS Configuration History
-=========================
-
-OkHttp tracks the dynamic TLS ecosystem to balance connectivity and security. This page is a log of
-changes we've made over time to OkHttp's default TLS options.
-
-[OkHttp 3.14][OkHttp314]
-------------------------
-
-_2019-03-14_
-
-Remove 2 TLSv1.3 cipher suites that are neither available on OkHttp’s host platforms nor enabled in releases of Chrome and Firefox.
-
-##### RESTRICTED_TLS cipher suites
-
- * TLS_AES_128_GCM_SHA256[¹][tlsv13_only]
- * TLS_AES_256_GCM_SHA384[¹][tlsv13_only]
- * TLS_CHACHA20_POLY1305_SHA256[¹][tlsv13_only]
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
- * **REMOVED:** ~~TLS_AES_128_CCM_SHA256[¹][tlsv13_only]~~
- * **REMOVED:** ~~TLS_AES_128_CCM_8_SHA256[¹][tlsv13_only]~~
-
-##### MODERN_TLS / COMPATIBLE_TLS cipher suites
-
- * TLS_AES_128_GCM_SHA256[¹][tlsv13_only]
- * TLS_AES_256_GCM_SHA384[¹][tlsv13_only]
- * TLS_CHACHA20_POLY1305_SHA256[¹][tlsv13_only]
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_GCM_SHA256[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_GCM_SHA384[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_3DES_EDE_CBC_SHA[²][http2_naughty]
- * **REMOVED:** ~~TLS_AES_128_CCM_SHA256[¹][tlsv13_only]~~
- * **REMOVED:** ~~TLS_AES_128_CCM_8_SHA256[¹][tlsv13_only]~~
-
-[OkHttp 3.13][OkHttp313]
-------------------------
-
-_2019-02-04_
-
-Remove TLSv1.1 and TLSv1 from MODERN_TLS. Change COMPATIBLE_TLS to support all TLS versions.
-
-##### RESTRICTED_TLS versions
-
-* TLSv1.3
-* TLSv1.2
-
-##### MODERN_TLS versions
-
-* TLSv1.3
-* TLSv1.2
-* **REMOVED:** ~~TLSv1.1~~
-* **REMOVED:** ~~TLSv1~~
-
-##### COMPATIBLE_TLS versions
-
-* **NEW:** TLSv1.3
-* **NEW:** TLSv1.2
-* **NEW:** TLSv1.1
-* TLSv1
-
-[OkHttp 3.12][OkHttp312]
-------------------------
-
-_2018-11-16_
-
-Added support for TLSv1.3.
-
-##### RESTRICTED_TLS cipher suites
-
- * **NEW:** TLS_AES_128_GCM_SHA256[¹][tlsv13_only]
- * **NEW:** TLS_AES_256_GCM_SHA384[¹][tlsv13_only]
- * **NEW:** TLS_CHACHA20_POLY1305_SHA256[¹][tlsv13_only]
- * **NEW:** TLS_AES_128_CCM_SHA256[¹][tlsv13_only]
- * **NEW:** TLS_AES_128_CCM_8_SHA256[¹][tlsv13_only]
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
-
-##### MODERN_TLS / COMPATIBLE_TLS cipher suites
-
- * **NEW:** TLS_AES_128_GCM_SHA256[¹][tlsv13_only]
- * **NEW:** TLS_AES_256_GCM_SHA384[¹][tlsv13_only]
- * **NEW:** TLS_CHACHA20_POLY1305_SHA256[¹][tlsv13_only]
- * **NEW:** TLS_AES_128_CCM_SHA256[¹][tlsv13_only]
- * **NEW:** TLS_AES_128_CCM_8_SHA256[¹][tlsv13_only]
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_GCM_SHA256[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_GCM_SHA384[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_3DES_EDE_CBC_SHA[²][http2_naughty]
-
-##### RESTRICTED_TLS versions
-
-* **NEW:** TLSv1.3
-* TLSv1.2
-
-##### MODERN_TLS versions
-
-* **NEW:** TLSv1.3
-* TLSv1.2
-* TLSv1.1
-* TLSv1
-
-##### COMPATIBLE_TLS versions
-
-* TLSv1
-
-[OkHttp 3.11][OkHttp311]
-------------------------
-
-_2018-07-12_
-
-Added a new extra strict RESTRICTED_TLS configuration inspired by [Google Cloud’s similar policy][googlecloud_ssl_policy]. It is appropriate when both the host platform
-(JVM/Conscrypt/Android) and target webserver are current.
-
-##### RESTRICTED_TLS cipher suites
-
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
-
-##### RESTRICTED_TLS versions
-
- * TLSv1.2
-
-[OkHttp 3.10][OkHttp310]
-------------------------
-
-_2018-02-24_
-
-Remove two rarely-used cipher suites from the default set. This tracks a <a href="https://developers.google.com/web/updates/2016/12/chrome-56-deprecations#remove_cbc-mode_ecdsa_ciphers_in_tls">Chromium change</a> to remove these cipher suites because they are fragile and rarely-used.
-
-##### MODERN_TLS / COMPATIBLE_TLS cipher suites
-
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_GCM_SHA256[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_GCM_SHA384[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_3DES_EDE_CBC_SHA[²][http2_naughty]
- * **REMOVED:** ~~TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA~~
- * **REMOVED:** ~~TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA~~
-
-
-[OkHttp 3.5][OkHttp35]
-----------------------
-
-_2016-11-30_
-
-Remove three old cipher suites and add five new ones. This tracks changes in what's available on
-Android and Java, and also what cipher suites recent releases of Chrome and Firefox support by
-default.
-
-##### MODERN_TLS / COMPATIBLE_TLS cipher suites
-
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * **NEW:** TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
- * **NEW:** TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
- * **NEW:** TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
- * **NEW:** TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_GCM_SHA256[²][http2_naughty]
- * **NEW:** TLS_RSA_WITH_AES_256_GCM_SHA384[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_3DES_EDE_CBC_SHA[²][http2_naughty]
- * **REMOVED:** ~~TLS_DHE_RSA_WITH_AES_128_CBC_SHA~~
- * **REMOVED:** ~~TLS_DHE_RSA_WITH_AES_128_GCM_SHA256~~
- * **REMOVED:** ~~TLS_DHE_RSA_WITH_AES_256_CBC_SHA~~
-
-[OkHttp 3.0][OkHttp30]
-----------------------
-
-_2016-01-13_
-
-##### MODERN_TLS / COMPATIBLE_TLS cipher suites
-
- * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
- * TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_DHE_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_DHE_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_GCM_SHA256[²][http2_naughty]
- * TLS_RSA_WITH_AES_128_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_AES_256_CBC_SHA[²][http2_naughty]
- * TLS_RSA_WITH_3DES_EDE_CBC_SHA[²][http2_naughty]
-</dl>
-
-##### MODERN_TLS versions
-
- * TLSv1.2
- * TLSv1.1
- * TLSv1
-
-##### COMPATIBLE_TLS versions
-
- * TLSv1
-
----
-
-<a name="tlsv13_only"></a>
-#### ¹ TLSv1.3 Only
-
-Cipher suites that are only available with TLSv1.3.
-
-<a name="http2_naughty"></a>
-#### ² HTTP/2 Cipher Suite Denylist
-
-Cipher suites that are [discouraged for use][http2_denylist] with HTTP/2. OkHttp includes them because better suites are not commonly available. For example, none of the better cipher suites listed above shipped with Android 4.4 or Java 7.
-
- [OkHttp314]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-3140
- [OkHttp313]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-3130
- [OkHttp312]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-3120
- [OkHttp311]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-3110
- [OkHttp310]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-3100
- [OkHttp35]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-350
- [OkHttp30]: https://github.com/square/okhttp/blob/master/CHANGELOG.md#version-300
- [googlecloud_ssl_policy]: https://cloud.google.com/load-balancing/docs/ssl-policies-concepts
- [tlsv13_only]: #tlsv13_only
- [http2_naughty]: #http2_naughty
- [http2_denylist]: https://tools.ietf.org/html/rfc7540#appendix-A
diff --git a/docs/upgrading_to_okhttp_4.md b/docs/upgrading_to_okhttp_4.md
deleted file mode 100644
index 0d3c53917e..0000000000
--- a/docs/upgrading_to_okhttp_4.md
+++ /dev/null
@@ -1,279 +0,0 @@
-Upgrading to OkHttp 4
-=====================
-
-OkHttp 4.x upgrades our implementation language from Java to Kotlin and keeps everything else the
-same. We’ve chosen Kotlin because it gives us powerful new capabilities while integrating closely
-with Java.
-
-We spent a lot of time and energy on retaining strict compatibility with OkHttp 3.x. We’re even
-keeping the package name the same: `okhttp3`!
-
-There are three kinds of compatibility we’re tracking:
-
- * **Binary compatibility** is the ability to compile a program against OkHttp 3.x, and then to run
-   it against OkHttp 4.x. We’re using the excellent [japicmp][japicmp] library via its
-   [Gradle plugin][japicmp_gradle] to enforce binary compatibility.
-
- * **Java source compatibility** is the ability to upgrade Java uses of OkHttp 3.x to 4.x without
-   changing `.java` files.
-
- * **Kotlin source compatibility** is the ability to upgrade Kotlin uses of OkHttp 3.x to 4.x
-   without changing `.kt` files.
-
-With a few small exceptions (below), OkHttp 4.x is both binary- and Java source-compatible with
-OkHttp 3.x. You can use an OkHttp 4.x .jar file with applications or libraries built for OkHttp 3.x.
-
-OkHttp is **not** source-compatible for Kotlin callers, but upgrading should be automatic thanks to
-Kotlin’s powerful deprecation features. Most developers should be able to use IntelliJ’s _Code
-Cleanup_ for a safe and fast upgrade.
-
-
-Backwards-Incompatible Changes
-------------------------------
-
-#### OkHttpClient final methods
-
-`OkHttpClient` has 26 accessors like `interceptors()` and `writeTimeoutMillis()` that were non-final
-in OkHttp 3.x and are final in 4.x. These were made non-final for use with mocking frameworks like
-[Mockito][mockito]. We believe subtyping `OkHttpClient` is the wrong way to test with OkHttp. If
-you must, mock `Call.Factory` which is the interface that `OkHttpClient` implements.
-
-#### Internal API changes
-
-The `okhttp3.internal` package is not a published API and we change it frequently without warning.
-Depending on code in this package is bad and will cause you problems with any upgrade! But the 4.x
-will be particularly painful to naughty developers that import from this package! We changed a lot
-to take advantage of sweet Kotlin features.
-
-#### Credentials.basic()
-
-The username and password parameters to `Credentials.basic()` are now non-null strings. In OkHttp
-3.x, null would yield a username or password of "null".
-
-#### HttpUrl.queryParameterValues()
-
-The return type of `HttpUrl.queryParameterValues()` is `List<String?>`. Lists that may contain null
-are uncommon and Kotlin callers may have incorrectly assigned the result to `List<String>`.
-
-
-Code Cleanup
-------------
-
-IntelliJ and Android Studio offer a **Code Cleanup** feature that will automatically update
-deprecated APIs with their replacements. Access this feature from the _Search Anywhere_ dialog
-(double-press shift) or under the _Analyze_ menu.
-
-We’ve included deprecated APIs in OkHttp 4.0 because they make migration easy. We will remove them
-in a future release! If you’re skipping releases, it’ll be much easier if you upgrade to OkHttp 4.0
-as an intermediate step.
-
-#### Vars and Vals
-
-Java doesn’t have language support for properties so developers make do with getters and setters.
-Kotlin does have properties and we take advantage of them in OkHttp.
-
- * **Address**: certificatePinner, connectionSpecs, dns, hostnameVerifier, protocols, proxy,
-   proxyAuthenticator, proxySelector, socketFactory, sslSocketFactory, url
- * **Cache**: directory
- * **CacheControl**: immutable, maxAgeSeconds, maxStaleSeconds, minFreshSeconds, mustRevalidate,
-   noCache, noStore, noTransform, onlyIfCached, sMaxAgeSeconds
- * **Challenge**: authParams, charset, realm, scheme
- * **CipherSuite**: javaName
- * **ConnectionSpec**: cipherSuites, supportsTlsExtensions, tlsVersions
- * **Cookie**: domain, expiresAt, hostOnly, httpOnly, name, path, persistent, value
- * **Dispatcher**: executorService
- * **FormBody**: size
- * **Handshake**: cipherSuite, localCertificates, localPrincipal, peerCertificates, peerPrincipal,
-   tlsVersion
- * **HandshakeCertificates**: keyManager, trustManager
- * **Headers**: size
- * **HeldCertificate**: certificate, keyPair
- * **HttpLoggingInterceptor**: level
- * **HttpUrl**: encodedFragment, encodedPassword, encodedPath, encodedPathSegments, encodedQuery,
-   encodedUsername, fragment, host, password, pathSegments, pathSize, port, query,
-   queryParameterNames, querySize, scheme, username
- * **MockResponse**: headers, http2ErrorCode, socketPolicy, status, trailers
- * **MockWebServer**: bodyLimit, port, protocolNegotiationEnabled, protocols, requestCount,
-   serverSocketFactory
- * **MultipartBody.Part**: body, headers
- * **MultipartBody.**: boundary, parts, size, type
- * **OkHttpClient**: authenticator, cache, callTimeoutMillis, certificatePinner,
-   connectTimeoutMillis, connectionPool, connectionSpecs, cookieJar, dispatcher, dns,
-   eventListenerFactory, followRedirects, followSslRedirects, hostnameVerifier, interceptors,
-   networkInterceptors, pingIntervalMillis, protocols, proxy, proxyAuthenticator, proxySelector,
-   readTimeoutMillis, retryOnConnectionFailure, socketFactory, sslSocketFactory, writeTimeoutMillis
- * **PushPromise**: headers, method, path, response
- * **Request**: body, cacheControl, headers, method, url
- * **Response**: body, cacheControl, cacheResponse, code, handshake, headers, message,
-   networkResponse, priorResponse, protocol, receivedResponseAtMillis, request, sentRequestAtMillis
- * **Route**: address, proxy, socketAddress
- * **TlsVersion**: javaName
-
-#### Renamed Functions
-
-* **Headers.of()**: for symmetry with `listOf()`, `setOf()`, etc., we’ve replaced
-  `Headers.of(String...)` with `headersOf(vararg String)`.
-
-#### Extension Functions
-
-We’ve migrated from static functions to extension functions where we think they fit.
-
-| Java                                | Kotlin                          |
-| :---------------------------------- | :------------------------------ |
-| Handshake.get(SSLSession)           | SSLSession.handshake()          |
-| Headers.of(Map<String, String>)     | Map<String, String>.toHeaders() |
-| HttpUrl.get(String)                 | String.toHttpUrl()              |
-| HttpUrl.get(URI)                    | URI.toHttpUrlOrNull()           |
-| HttpUrl.get(URL)                    | URL.toHttpUrlOrNull()           |
-| HttpUrl.parse(String)               | String.toHttpUrlOrNull()        |
-| HttpUrl.uri()                       | HttpUrl.toUri()                 |
-| HttpUrl.url()                       | HttpUrl.toUrl()                 |
-| MediaType.get(String)               | String.toMediaType()            |
-| MediaType.parse(String)             | String.toMediaTypeOrNull()      |
-| RequestBody.create(ByteArray)       | ByteArray.toRequestBody()       |
-| RequestBody.create(ByteString)      | ByteString.toRequestBody()      |
-| RequestBody.create(File)            | File.asRequestBody()            |
-| RequestBody.create(String)          | String.toRequestBody()          |
-| ResponseBody.create(BufferedSource) | BufferedSource.asResponseBody() |
-| ResponseBody.create(ByteArray)      | ByteArray.toResponseBody()      |
-| ResponseBody.create(ByteString)     | ByteString.toResponseBody()     |
-| ResponseBody.create(String)         | String.toResponseBody()         |
-
-
-SAM Conversions
----------------
-
-When you use Java APIs from Kotlin you can operate on Java interfaces as if they were Kotlin
-lambdas. The [feature][java_sams] is available for interfaces that define a Single Abstract Method
-(SAM).
-
-But when you use Kotlin APIs from Kotlin there’s no automatic conversion. Code that used SAM lambdas
-with OkHttp 3.x: must use `object :` with OkHttp 4.x:
-
-Kotlin calling OkHttp 3.x:
-
-```kotlin
-val client = OkHttpClient.Builder()
-    .dns { hostname -> InetAddress.getAllByName(hostname).toList() }
-    .build()
-```
-
-Kotlin calling OkHttp 4.x:
-
-```kotlin
-val client = OkHttpClient.Builder()
-    .dns(object : Dns {
-      override fun lookup(hostname: String) =
-          InetAddress.getAllByName(hostname).toList()
-    })
-    .build()
-```
-
-SAM conversion impacts these APIs:
-
- * Authenticator
- * Dispatcher.setIdleCallback(Runnable)
- * Dns
- * EventListener.Factory
- * HttpLoggingInterceptor.Logger
- * LoggingEventListener.Factory
- * OkHttpClient.Builder.hostnameVerifier(HostnameVerifier)
-
-JetBrains [is working on][kotlin_sams] SAM conversions of Kotlin interfaces. Expect it in a future
-release of the Kotlin language.
-
-
-Companion Imports
------------------
-
-The equivalent of static methods in Java is companion object functions in Kotlin. The bytecode is
-the same but `.kt` files now need `Companion` in the import.
-
-This works with OkHttp 3.x:
-
-```kotlin
-import okhttp3.CipherSuite.forJavaName
-```
-
-But OkHttp 4.x needs a `Companion`:
-
-```kotlin
-import okhttp3.CipherSuite.Companion.forJavaName
-```
-
-In the unlikely event that you have a lot of these, run this:
-
-```bash
-sed -i "" \
-  's/^\(import okhttp3\.[^.]*\)\.\([a-z][a-zA-Z]*\)$/\1.Companion.\2/g' \
-  `find . -name "*.kt"`
-```
-
-
-Advanced Profiling
-------------------
-
-Android Studio’s Advanced Profiling feature rewrites OkHttp bytecode for instrumentation.
-Unfortunately it crashes on OkHttp 4.x’s bytecode. Until [Google’s bug][advanced_profiling_bug] is
-fixed you must disable advanced profiling in Android Studio.
-
-![Disable Advanced Profiling](images/disable_advanced_profiling@2x.png)
-
-
-R8 / ProGuard
--------------
-
-R8 and ProGuard are both code optimizers for `.class` files.
-
-R8 is the [default optimizer][r8] in Android Studio 3.4 and newer. It works well with all
-releases of OkHttp.
-
-ProGuard was the previous default. We’re [tracking problems][proguard_problems] with interactions
-between ProGuard, OkHttp 4.x, and Kotlin-originated `.class` files. Make sure you’re on the latest
-release if you’re using ProGuard,
-
-
-Gradle
-------
-
-OkHttp 4’s minimum requirements are Java 8+ and Android 5+. These requirements were
-[first introduced][require_android_5] with OkHttp 3.13.
-
-Here’s what you need in `build.gradle` to target Java 8 byte code for Kotlin, Java, and Android
-plugins respectively.
-
-```
-compileKotlin {
-  kotlinOptions {
-    jvmTarget = "1.8"
-  }
-}
-compileTestKotlin {
-  kotlinOptions {
-    jvmTarget = "1.8"
-  }
-}
-
-compileJava {
-  sourceCompatibility = JavaVersion.VERSION_1_8
-  targetCompatibility = JavaVersion.VERSION_1_8
-}
-
-android {
-  compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_8
-    targetCompatibility JavaVersion.VERSION_1_8
-  }
-}
-```
-
-
- [advanced_profiling_bug]: https://issuetracker.google.com/issues/135141615
- [japicmp]: https://github.com/siom79/japicmp
- [japicmp_gradle]: https://github.com/melix/japicmp-gradle-plugin
- [java_sams]: https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions
- [kotlin_sams]: https://youtrack.jetbrains.com/issue/KT-11129
- [mockito]: https://site.mockito.org/
- [proguard_problems]: https://github.com/square/okhttp/issues/5167
- [require_android_5]: https://cashapp.github.io/2019-02-05/okhttp-3-13-requires-android-5
- [r8]: https://developer.android.com/studio/releases#r8-default
diff --git a/docs/works_with_okhttp.md b/docs/works_with_okhttp.md
deleted file mode 100644
index 8bb7716109..0000000000
--- a/docs/works_with_okhttp.md
+++ /dev/null
@@ -1,34 +0,0 @@
-Works with OkHttp
-=================
-
-Here’s some libraries that work nicely with OkHttp.
-
- * [Chucker](https://github.com/ChuckerTeam/chucker): An in-app HTTP inspector for Android OkHttp clients.
- * [Coil](https://github.com/coil-kt/coil): An image loading library for Android backed by Kotlin Coroutines.
- * [Communicator](https://github.com/Taig/Communicator): An OkHttp wrapper for Scala built with Android in mind.
- * [CWAC-NetSecurity](https://github.com/commonsguy/cwac-netsecurity): Simplifying Secure Internet Access.
- * [Flipper](https://fbflipper.com/): A desktop debugging platform for mobile developers.
- * [Fresco](https://github.com/facebook/fresco): An Android library for managing images and the memory they use.
- * [Glide](https://github.com/bumptech/glide): An image loading and caching library for Android focused on smooth scrolling.
- * [GoogleAppEngineOkHttp](https://github.com/apkelly/GoogleAppEngineOkHttp): An OkHttp Call that works on Google App Engine.
- * [Hunter](https://github.com/Leaking/Hunter): Configure all OkHttpClients centrally.
- * ⬜️ [Moshi](https://github.com/square/moshi): A modern JSON library for Android and Java.
- * [Ok2Curl](https://github.com/mrmike/Ok2Curl): Convert OkHttp requests into curl logs.
- * [OkHttp AWS Signer](https://github.com/babbel/okhttp-aws-signer): AWS V4 signing algorithm for OkHttp requests
- * [okhttp-digest](https://github.com/rburgst/okhttp-digest): A digest authenticator for OkHttp.
- * [OkHttp Idling Resource](https://github.com/JakeWharton/okhttp-idling-resource): An Espresso IdlingResource for OkHttp.
- * [okhttp-client-mock](https://github.com/gmazzo/okhttp-client-mock): A simple OKHttp client mock, using a programmable request interceptor.
- * [OkHttp Profiler](https://plugins.jetbrains.com/plugin/11249-okhttp-profiler): An IntelliJ plugin for monitoring OkHttp calls.
- * [OkReplay](https://github.com/airbnb/okreplay): Record and replay OkHttp network interaction in your tests.
- * [okhttp-signpost](https://github.com/pakerfeldt/okhttp-signpost): OAuth signing with signpost and OkHttp.
- * [okhttp-staleiferror-interceptor](https://github.com/PeelTechnologies/okhttp-staleiferror-interceptor/): serve stale responses when the server isn’t reachable.
- * [okhttp-stats](https://github.com/flipkart-incubator/okhttp-stats): Get stats like average network speed.
- * ⬜️ [Okio](https://github.com/square/okio/): A modern I/O API for Java.
- * [OkLog](https://github.com/simonpercic/OkLog): Response logging interceptor for OkHttp. Logs a URL link with URL-encoded response for every OkHttp call.
- * [Okurl](https://github.com/yschimke/okurl/wiki) A curl-like client for social networks and other APIs.
- * [PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar): A persistent `CookieJar`.
- * ⬜️ [Picasso](https://github.com/square/picasso): A powerful image downloading and caching library for Android.
- * ⬜️ [Retrofit](https://github.com/square/retrofit): Type-safe HTTP client for Android and Java by Square.
- * [Stetho](https://github.com/facebook/stetho): Stetho is a debug bridge for Android applications.
- * [Thrifty](https://github.com/Microsoft/thrifty): An implementation of Apache Thrift for Android.
- * ⬜️ [Wire](https://github.com/square/wire): Clean, lightweight protocol buffers for Android and Java.
diff --git a/mkdocs.yml b/mkdocs.yml
deleted file mode 100644
index ba91c4d1c2..0000000000
--- a/mkdocs.yml
+++ /dev/null
@@ -1,70 +0,0 @@
-site_name: OkHttp
-repo_name: OkHttp
-repo_url: https://github.com/square/okhttp
-site_description: "An HTTP & HTTP/2 client for Android and Java applications"
-site_author: Square, Inc.
-remote_branch: gh-pages
-
-copyright: 'Copyright &copy; 2019 Square, Inc.'
-
-theme:
-  name: 'material'
-  favicon: images/icon-square.png
-  logo: images/icon-square.png
-  palette:
-    primary: 'teal'
-    accent: 'white'
-
-extra_css:
-  - 'css/app.css'
-
-markdown_extensions:
-  - smarty
-  - codehilite:
-      guess_lang: false
-  - footnotes
-  - meta
-  - toc:
-      permalink: true
-  - pymdownx.betterem:
-      smart_enable: all
-  - pymdownx.caret
-  - pymdownx.inlinehilite
-  - pymdownx.magiclink
-  - pymdownx.smartsymbols
-  - pymdownx.superfences
-  - pymdownx.tilde
-  - tables
-
-nav:
-  - 'Overview': index.md
-  - 'Calls': calls.md
-  - 'Connections': connections.md
-  - 'Recipes': recipes.md
-  - 'Interceptors': interceptors.md
-  - 'HTTPS': https.md
-  - 'Events': events.md
-  - 'Works with OkHttp': works_with_okhttp.md
-  - 'Stack Overflow ⏏': https://stackoverflow.com/questions/tagged/okhttp?sort=active
-  - '4.x API':
-    - 'okhttp': 4.x/okhttp/okhttp3/index.md
-    - 'brotli': 4.x/okhttp-brotli/okhttp3.brotli/index.md
-    - 'dnsoverhttps': 4.x/okhttp-dnsoverhttps/okhttp3.dnsoverhttps/index.md
-    - 'logging-interceptor': 4.x/okhttp-logging-interceptor/okhttp3.logging/index.md
-    - 'sse': 4.x/okhttp-sse/okhttp3.sse/index.md
-    - 'tls': 4.x/okhttp-tls/okhttp3.tls/index.md
-    - 'urlconnection': 4.x/okhttp-urlconnection/okhttp3/index.md
-    - 'mockwebserver': 4.x/mockwebserver/okhttp3.mockwebserver/index.md
-  - '3.x API':
-    - 'okhttp ⏏': https://square.github.io/okhttp/3.x/okhttp/
-    - 'dnsoverhttps ⏏': https://square.github.io/okhttp/3.x/okhttp-dnsoverhttps/
-    - 'logging-interceptor ⏏': https://square.github.io/okhttp/3.x/logging-interceptor/
-    - 'sse ⏏': https://square.github.io/okhttp/3.x/okhttp-sse/
-    - 'tls ⏏': https://square.github.io/okhttp/3.x/okhttp-tls/
-    - 'urlconnection ⏏': https://square.github.io/okhttp/3.x/okhttp-urlconnection/
-    - 'mockwebserver ⏏': https://square.github.io/okhttp/3.x/mockwebserver/
-  - 'Change Log': changelog.md
-  - 'Upgrading to OkHttp 4': upgrading_to_okhttp_4.md
-  - 'Contributing': contributing.md
-  - 'Code of Conduct': code_of_conduct.md
-
diff --git a/okhttp-hpacktests/src/test/resources/hpack-test-case b/okhttp-hpacktests/src/test/resources/hpack-test-case
index a5652bc2bc..0251074ca8 160000
--- a/okhttp-hpacktests/src/test/resources/hpack-test-case
+++ b/okhttp-hpacktests/src/test/resources/hpack-test-case
@@ -1 +1 @@
-Subproject commit a5652bc2bc3d2a992f39446369fb004a72e881d4
+Subproject commit 0251074ca8d7673307b915c235688cb1d6b0a950
diff --git a/samples/crawler/build.gradle b/samples/crawler/build.gradle
deleted file mode 100644
index 7bcfa55a08..0000000000
--- a/samples/crawler/build.gradle
+++ /dev/null
@@ -1,8 +0,0 @@
-dependencies {
-  implementation project(':okhttp')
-  implementation deps.jsoup
-}
-
-tasks.withType(JavaCompile) {
-  options.warnings = false
-}
\ No newline at end of file
diff --git a/samples/crawler/src/main/java/okhttp3/sample/Crawler.java b/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
deleted file mode 100644
index 36d7971e80..0000000000
--- a/samples/crawler/src/main/java/okhttp3/sample/Crawler.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.sample;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Collections;
-import java.util.LinkedHashSet;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.atomic.AtomicInteger;
-import okhttp3.Cache;
-import okhttp3.HttpUrl;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-import org.jsoup.nodes.Element;
-
-/**
- * Fetches HTML from a requested URL, follows the links, and repeats.
- */
-public final class Crawler {
-  private final OkHttpClient client;
-  private final Set<HttpUrl> fetchedUrls = Collections.synchronizedSet(new LinkedHashSet<>());
-  private final LinkedBlockingQueue<HttpUrl> queue = new LinkedBlockingQueue<>();
-  private final ConcurrentHashMap<String, AtomicInteger> hostnames = new ConcurrentHashMap<>();
-
-  public Crawler(OkHttpClient client) {
-    this.client = client;
-  }
-
-  private void parallelDrainQueue(int threadCount) {
-    ExecutorService executor = Executors.newFixedThreadPool(threadCount);
-    for (int i = 0; i < threadCount; i++) {
-      executor.execute(() -> {
-        try {
-          drainQueue();
-        } catch (Exception e) {
-          e.printStackTrace();
-        }
-      });
-    }
-    executor.shutdown();
-  }
-
-  private void drainQueue() throws Exception {
-    for (HttpUrl url; (url = queue.take()) != null; ) {
-      if (!fetchedUrls.add(url)) {
-        continue;
-      }
-
-      Thread currentThread = Thread.currentThread();
-      String originalName = currentThread.getName();
-      currentThread.setName("Crawler " + url.toString());
-      try {
-        fetch(url);
-      } catch (IOException e) {
-        System.out.printf("XXX: %s %s%n", url, e);
-      } finally {
-        currentThread.setName(originalName);
-      }
-    }
-  }
-
-  public void fetch(HttpUrl url) throws IOException {
-    // Skip hosts that we've visited many times.
-    AtomicInteger hostnameCount = new AtomicInteger();
-    AtomicInteger previous = hostnames.putIfAbsent(url.host(), hostnameCount);
-    if (previous != null) hostnameCount = previous;
-    if (hostnameCount.incrementAndGet() > 100) return;
-
-    Request request = new Request.Builder()
-        .url(url)
-        .build();
-    try (Response response = client.newCall(request).execute()) {
-      String responseSource = response.networkResponse() != null ? ("(network: "
-          + response.networkResponse().code()
-          + " over "
-          + response.protocol()
-          + ")") : "(cache)";
-      int responseCode = response.code();
-
-      System.out.printf("%03d: %s %s%n", responseCode, url, responseSource);
-
-      String contentType = response.header("Content-Type");
-      if (responseCode != 200 || contentType == null) {
-        return;
-      }
-
-      MediaType mediaType = MediaType.parse(contentType);
-      if (mediaType == null || !mediaType.subtype().equalsIgnoreCase("html")) {
-        return;
-      }
-
-      Document document = Jsoup.parse(response.body().string(), url.toString());
-      for (Element element : document.select("a[href]")) {
-        String href = element.attr("href");
-        HttpUrl link = response.request().url().resolve(href);
-        if (link == null) continue; // URL is either invalid or its scheme isn't http/https.
-        queue.add(link.newBuilder().fragment(null).build());
-      }
-    }
-  }
-
-  public static void main(String[] args) throws IOException {
-    if (args.length != 2) {
-      System.out.println("Usage: Crawler <cache dir> <root>");
-      return;
-    }
-
-    int threadCount = 20;
-    long cacheByteCount = 1024L * 1024L * 100L;
-
-    Cache cache = new Cache(new File(args[0]), cacheByteCount);
-    OkHttpClient client = new OkHttpClient.Builder()
-        .cache(cache)
-        .build();
-
-    Crawler crawler = new Crawler(client);
-    crawler.queue.add(HttpUrl.get(args[1]));
-    crawler.parallelDrainQueue(threadCount);
-  }
-}
diff --git a/samples/guide/README.md b/samples/guide/README.md
deleted file mode 100644
index 43787700f1..0000000000
--- a/samples/guide/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-Samples
-=======
diff --git a/samples/guide/build.gradle b/samples/guide/build.gradle
deleted file mode 100644
index 493dbe78bf..0000000000
--- a/samples/guide/build.gradle
+++ /dev/null
@@ -1,13 +0,0 @@
-apply plugin: 'kotlin-kapt'
-
-dependencies {
-  implementation project(':okhttp')
-  implementation project(':mockwebserver')
-  implementation project(':okhttp-tls')
-  implementation deps.moshi
-  kapt deps.moshiKotlin
-}
-
-tasks.withType(JavaCompile) {
-  options.warnings = false
-}
diff --git a/samples/guide/docs/images/logo-square.png b/samples/guide/docs/images/logo-square.png
deleted file mode 100644
index 788b301adb..0000000000
Binary files a/samples/guide/docs/images/logo-square.png and /dev/null differ
diff --git a/samples/guide/src/main/java/okhttp3/guide/GetExample.java b/samples/guide/src/main/java/okhttp3/guide/GetExample.java
deleted file mode 100644
index 35a1cc658c..0000000000
--- a/samples/guide/src/main/java/okhttp3/guide/GetExample.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package okhttp3.guide;
-
-import java.io.IOException;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public class GetExample {
-  OkHttpClient client = new OkHttpClient();
-
-  String run(String url) throws IOException {
-    Request request = new Request.Builder()
-        .url(url)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      return response.body().string();
-    }
-  }
-
-  public static void main(String[] args) throws IOException {
-    GetExample example = new GetExample();
-    String response = example.run("https://raw.github.com/square/okhttp/master/README.md");
-    System.out.println(response);
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/guide/PostExample.java b/samples/guide/src/main/java/okhttp3/guide/PostExample.java
deleted file mode 100644
index d505beba3a..0000000000
--- a/samples/guide/src/main/java/okhttp3/guide/PostExample.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package okhttp3.guide;
-
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-public class PostExample {
-  public static final MediaType JSON = MediaType.get("application/json; charset=utf-8");
-
-  OkHttpClient client = new OkHttpClient();
-
-  String post(String url, String json) throws IOException {
-    RequestBody body = RequestBody.create(json, JSON);
-    Request request = new Request.Builder()
-        .url(url)
-        .post(body)
-        .build();
-    try (Response response = client.newCall(request).execute()) {
-      return response.body().string();
-    }
-  }
-
-  String bowlingJson(String player1, String player2) {
-    return "{'winCondition':'HIGH_SCORE',"
-        + "'name':'Bowling',"
-        + "'round':4,"
-        + "'lastSaved':1367702411696,"
-        + "'dateStarted':1367702378785,"
-        + "'players':["
-        + "{'name':'" + player1 + "','history':[10,8,6,7,8],'color':-13388315,'total':39},"
-        + "{'name':'" + player2 + "','history':[6,10,5,10,10],'color':-48060,'total':41}"
-        + "]}";
-  }
-
-  public static void main(String[] args) throws IOException {
-    PostExample example = new PostExample();
-    String json = example.bowlingJson("Jesse", "Jake");
-    String response = example.post("http://www.roundsapp.com/post", json);
-    System.out.println(response);
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java b/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
deleted file mode 100644
index 95fa49241c..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/AccessHeaders.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class AccessHeaders {
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://api.github.com/repos/square/okhttp/issues")
-        .header("User-Agent", "OkHttp Headers.java")
-        .addHeader("Accept", "application/json; q=0.5")
-        .addHeader("Accept", "application/vnd.github.v3+json")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println("Server: " + response.header("Server"));
-      System.out.println("Date: " + response.header("Date"));
-      System.out.println("Vary: " + response.headers("Vary"));
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new AccessHeaders().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java b/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
deleted file mode 100644
index 68f1c2d591..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/AsynchronousGet.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.Call;
-import okhttp3.Callback;
-import okhttp3.Headers;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.ResponseBody;
-
-public final class AsynchronousGet {
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build();
-
-    client.newCall(request).enqueue(new Callback() {
-      @Override public void onFailure(Call call, IOException e) {
-        e.printStackTrace();
-      }
-
-      @Override public void onResponse(Call call, Response response) throws IOException {
-        try (ResponseBody responseBody = response.body()) {
-          if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-          Headers responseHeaders = response.headers();
-          for (int i = 0, size = responseHeaders.size(); i < size; i++) {
-            System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
-          }
-
-          System.out.println(responseBody.string());
-        }
-      }
-    });
-  }
-
-  public static void main(String... args) throws Exception {
-    new AsynchronousGet().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java b/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
deleted file mode 100644
index 4eb09d8f11..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/Authenticate.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.Authenticator;
-import okhttp3.Credentials;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.Route;
-
-public final class Authenticate {
-  private final OkHttpClient client;
-
-  public Authenticate() {
-    client = new OkHttpClient.Builder()
-        .authenticator(new Authenticator() {
-          @Override public Request authenticate(Route route, Response response) throws IOException {
-            if (response.request().header("Authorization") != null) {
-              return null; // Give up, we've already attempted to authenticate.
-            }
-
-            System.out.println("Authenticating for response: " + response);
-            System.out.println("Challenges: " + response.challenges());
-            String credential = Credentials.basic("jesse", "password1");
-            return response.request().newBuilder()
-                .header("Authorization", credential)
-                .build();
-          }
-        })
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/secrets/hellosecret.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new Authenticate().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java b/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
deleted file mode 100644
index c43f9214ab..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CacheResponse.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.File;
-import java.io.IOException;
-import okhttp3.Cache;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class CacheResponse {
-  private final OkHttpClient client;
-
-  public CacheResponse(File cacheDirectory) throws Exception {
-    int cacheSize = 10 * 1024 * 1024; // 10 MiB
-    Cache cache = new Cache(cacheDirectory, cacheSize);
-
-    client = new OkHttpClient.Builder()
-        .cache(cache)
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build();
-
-    String response1Body;
-    try (Response response1 = client.newCall(request).execute()) {
-      if (!response1.isSuccessful()) throw new IOException("Unexpected code " + response1);
-
-      response1Body = response1.body().string();
-      System.out.println("Response 1 response:          " + response1);
-      System.out.println("Response 1 cache response:    " + response1.cacheResponse());
-      System.out.println("Response 1 network response:  " + response1.networkResponse());
-    }
-
-    String response2Body;
-    try (Response response2 = client.newCall(request).execute()) {
-      if (!response2.isSuccessful()) throw new IOException("Unexpected code " + response2);
-
-      response2Body = response2.body().string();
-      System.out.println("Response 2 response:          " + response2);
-      System.out.println("Response 2 cache response:    " + response2.cacheResponse());
-      System.out.println("Response 2 network response:  " + response2.networkResponse());
-    }
-
-    System.out.println("Response 2 equals Response 1? " + response1Body.equals(response2Body));
-  }
-
-  public static void main(String... args) throws Exception {
-    new CacheResponse(new File("CacheResponse.tmp")).run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java b/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
deleted file mode 100644
index 58a791adc7..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CancelCall.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
-import okhttp3.Call;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public class CancelCall {
-  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build();
-
-    final long startNanos = System.nanoTime();
-    final Call call = client.newCall(request);
-
-    // Schedule a job to cancel the call in 1 second.
-    executor.schedule(() -> {
-      System.out.printf("%.2f Canceling call.%n", (System.nanoTime() - startNanos) / 1e9f);
-      call.cancel();
-      System.out.printf("%.2f Canceled call.%n", (System.nanoTime() - startNanos) / 1e9f);
-    }, 1, TimeUnit.SECONDS);
-
-    System.out.printf("%.2f Executing call.%n", (System.nanoTime() - startNanos) / 1e9f);
-    try (Response response = call.execute()) {
-      System.out.printf("%.2f Call was expected to fail, but completed: %s%n",
-          (System.nanoTime() - startNanos) / 1e9f, response);
-    } catch (IOException e) {
-      System.out.printf("%.2f Call failed as expected: %s%n",
-          (System.nanoTime() - startNanos) / 1e9f, e);
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new CancelCall().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java b/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
deleted file mode 100644
index 87ea039730..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CertificatePinning.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.security.cert.Certificate;
-import okhttp3.CertificatePinner;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class CertificatePinning {
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .certificatePinner(
-          new CertificatePinner.Builder()
-              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
-              .build())
-      .build();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/robots.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      for (Certificate certificate : response.handshake().peerCertificates()) {
-        System.out.println(CertificatePinner.pin(certificate));
-      }
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new CertificatePinning().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java b/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
deleted file mode 100644
index befd80983c..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CheckHandshake.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.security.cert.Certificate;
-import java.util.Collections;
-import java.util.Set;
-import okhttp3.CertificatePinner;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class CheckHandshake {
-  /** Rejects otherwise-trusted certificates. */
-  private static final Interceptor CHECK_HANDSHAKE_INTERCEPTOR = new Interceptor() {
-    Set<String> blacklist = Collections.singleton(
-        "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=");
-
-    @Override public Response intercept(Chain chain) throws IOException {
-      for (Certificate certificate : chain.connection().handshake().peerCertificates()) {
-        String pin = CertificatePinner.pin(certificate);
-        if (blacklist.contains(pin)) {
-          throw new IOException("Blacklisted peer certificate: " + pin);
-        }
-      }
-      return chain.proceed(chain.request());
-    }
-  };
-
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .addNetworkInterceptor(CHECK_HANDSHAKE_INTERCEPTOR)
-      .build();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new CheckHandshake().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java b/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
deleted file mode 100644
index 3c429bf23b..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/ConfigureTimeouts.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.util.concurrent.TimeUnit;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class ConfigureTimeouts {
-  private final OkHttpClient client;
-
-  public ConfigureTimeouts() throws Exception {
-    client = new OkHttpClient.Builder()
-        .connectTimeout(5, TimeUnit.SECONDS)
-        .writeTimeout(5, TimeUnit.SECONDS)
-        .readTimeout(5, TimeUnit.SECONDS)
-        .callTimeout(10, TimeUnit.SECONDS)
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      System.out.println("Response completed: " + response);
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new ConfigureTimeouts().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java b/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java
deleted file mode 100644
index 6c15d700df..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CurrentDateHeader.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.util.Date;
-import okhttp3.Headers;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class CurrentDateHeader {
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .addInterceptor(new CurrentDateInterceptor())
-      .build();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      System.out.println(response.request().header("Date"));
-    }
-  }
-
-  static class CurrentDateInterceptor implements Interceptor {
-    @Override public Response intercept(Chain chain) throws IOException {
-      Request request = chain.request();
-      Headers newHeaders = request.headers()
-          .newBuilder()
-          .add("Date", new Date())
-          .build();
-      Request newRequest = request.newBuilder()
-          .headers(newHeaders)
-          .build();
-      return chain.proceed(newRequest);
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new CurrentDateHeader().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java b/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java
deleted file mode 100644
index 228956ec10..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CustomCipherSuites.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.Socket;
-import java.security.GeneralSecurityException;
-import java.security.KeyManagementException;
-import java.security.KeyStore;
-import java.security.NoSuchAlgorithmException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.SSLSocketFactory;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509TrustManager;
-import okhttp3.CipherSuite;
-import okhttp3.ConnectionSpec;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-import static java.util.Arrays.asList;
-
-public final class CustomCipherSuites {
-  private final OkHttpClient client;
-
-  public CustomCipherSuites() throws GeneralSecurityException {
-    // Configure cipher suites to demonstrate how to customize which cipher suites will be used for
-    // an OkHttp request. In order to be selected a cipher suite must be included in both OkHttp's
-    // connection spec and in the SSLSocket's enabled cipher suites array. Most applications should
-    // not customize the cipher suites list.
-    List<CipherSuite> customCipherSuites = asList(
-        CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
-        CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
-        CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
-        CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384);
-    final ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
-        .cipherSuites(customCipherSuites.toArray(new CipherSuite[0]))
-        .build();
-
-    X509TrustManager trustManager = defaultTrustManager();
-    SSLSocketFactory sslSocketFactory = defaultSslSocketFactory(trustManager);
-    SSLSocketFactory customSslSocketFactory = new DelegatingSSLSocketFactory(sslSocketFactory) {
-      @Override protected SSLSocket configureSocket(SSLSocket socket) throws IOException {
-        socket.setEnabledCipherSuites(javaNames(spec.cipherSuites()));
-        return socket;
-      }
-    };
-
-    client = new OkHttpClient.Builder()
-        .connectionSpecs(Collections.singletonList(spec))
-        .sslSocketFactory(customSslSocketFactory, trustManager)
-        .build();
-  }
-
-  /**
-   * Returns the VM's default SSL socket factory, using {@code trustManager} for trusted root
-   * certificates.
-   */
-  private SSLSocketFactory defaultSslSocketFactory(X509TrustManager trustManager)
-      throws NoSuchAlgorithmException, KeyManagementException {
-    SSLContext sslContext = SSLContext.getInstance("TLS");
-    sslContext.init(null, new TrustManager[] { trustManager }, null);
-
-    return sslContext.getSocketFactory();
-  }
-
-  /** Returns a trust manager that trusts the VM's default certificate authorities. */
-  private X509TrustManager defaultTrustManager() throws GeneralSecurityException {
-    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
-        TrustManagerFactory.getDefaultAlgorithm());
-    trustManagerFactory.init((KeyStore) null);
-    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
-    if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {
-      throw new IllegalStateException("Unexpected default trust managers:"
-          + Arrays.toString(trustManagers));
-    }
-    return (X509TrustManager) trustManagers[0];
-  }
-
-  private String[] javaNames(List<CipherSuite> cipherSuites) {
-    String[] result = new String[cipherSuites.size()];
-    for (int i = 0; i < result.length; i++) {
-      result[i] = cipherSuites.get(i).javaName();
-    }
-    return result;
-  }
-
-  /**
-   * An SSL socket factory that forwards all calls to a delegate. Override {@link #configureSocket}
-   * to customize a created socket before it is returned.
-   */
-  static class DelegatingSSLSocketFactory extends SSLSocketFactory {
-    protected final SSLSocketFactory delegate;
-
-    DelegatingSSLSocketFactory(SSLSocketFactory delegate) {
-      this.delegate = delegate;
-    }
-
-    @Override public String[] getDefaultCipherSuites() {
-      return delegate.getDefaultCipherSuites();
-    }
-
-    @Override public String[] getSupportedCipherSuites() {
-      return delegate.getSupportedCipherSuites();
-    }
-
-    @Override public Socket createSocket(
-        Socket socket, String host, int port, boolean autoClose) throws IOException {
-      return configureSocket((SSLSocket) delegate.createSocket(socket, host, port, autoClose));
-    }
-
-    @Override public Socket createSocket(String host, int port) throws IOException {
-      return configureSocket((SSLSocket) delegate.createSocket(host, port));
-    }
-
-    @Override public Socket createSocket(
-        String host, int port, InetAddress localHost, int localPort) throws IOException {
-      return configureSocket((SSLSocket) delegate.createSocket(host, port, localHost, localPort));
-    }
-
-    @Override public Socket createSocket(InetAddress host, int port) throws IOException {
-      return configureSocket((SSLSocket) delegate.createSocket(host, port));
-    }
-
-    @Override public Socket createSocket(
-        InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {
-      return configureSocket((SSLSocket) delegate.createSocket(
-          address, port, localAddress, localPort));
-    }
-
-    protected SSLSocket configureSocket(SSLSocket socket) throws IOException {
-      return socket;
-    }
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.handshake().cipherSuite());
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new CustomCipherSuites().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java b/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
deleted file mode 100644
index a8df15ba32..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/CustomTrust.java
+++ /dev/null
@@ -1,221 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.security.GeneralSecurityException;
-import java.security.KeyStore;
-import java.security.cert.Certificate;
-import java.security.cert.CertificateFactory;
-import java.util.Arrays;
-import java.util.Collection;
-import javax.net.ssl.KeyManagerFactory;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocketFactory;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509TrustManager;
-import okhttp3.CertificatePinner;
-import okhttp3.Headers;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okio.Buffer;
-
-public final class CustomTrust {
-  private final OkHttpClient client;
-
-  public CustomTrust() {
-    X509TrustManager trustManager;
-    SSLSocketFactory sslSocketFactory;
-    try {
-      trustManager = trustManagerForCertificates(trustedCertificatesInputStream());
-      SSLContext sslContext = SSLContext.getInstance("TLS");
-      sslContext.init(null, new TrustManager[] { trustManager }, null);
-      sslSocketFactory = sslContext.getSocketFactory();
-    } catch (GeneralSecurityException e) {
-      throw new RuntimeException(e);
-    }
-
-    client = new OkHttpClient.Builder()
-        .sslSocketFactory(sslSocketFactory, trustManager)
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      Headers responseHeaders = response.headers();
-      for (int i = 0; i < responseHeaders.size(); i++) {
-        System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
-      }
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  /**
-   * Returns an input stream containing one or more certificate PEM files. This implementation just
-   * embeds the PEM files in Java strings; most applications will instead read this from a resource
-   * file that gets bundled with the application.
-   */
-  private InputStream trustedCertificatesInputStream() {
-    // PEM files for root certificates of Comodo and Entrust. These two CAs are sufficient to view
-    // https://publicobject.com (Comodo) and https://squareup.com (Entrust). But they aren't
-    // sufficient to connect to most HTTPS sites including https://godaddy.com and https://visa.com.
-    // Typically developers will need to get a PEM file from their organization's TLS administrator.
-    String comodoRsaCertificationAuthority = ""
-        + "-----BEGIN CERTIFICATE-----\n"
-        + "MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB\n"
-        + "hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n"
-        + "A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV\n"
-        + "BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5\n"
-        + "MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT\n"
-        + "EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR\n"
-        + "Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh\n"
-        + "dGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR\n"
-        + "6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X\n"
-        + "pz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC\n"
-        + "9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV\n"
-        + "/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf\n"
-        + "Zd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z\n"
-        + "+pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w\n"
-        + "qP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah\n"
-        + "SL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC\n"
-        + "u9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf\n"
-        + "Fobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq\n"
-        + "crxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E\n"
-        + "FgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB\n"
-        + "/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl\n"
-        + "wFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM\n"
-        + "4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV\n"
-        + "2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna\n"
-        + "FxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ\n"
-        + "CuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK\n"
-        + "boHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke\n"
-        + "jkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL\n"
-        + "S0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb\n"
-        + "QOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl\n"
-        + "0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB\n"
-        + "NVOFBkpdn627G190\n"
-        + "-----END CERTIFICATE-----\n";
-    String entrustRootCertificateAuthority = ""
-        + "-----BEGIN CERTIFICATE-----\n"
-        + "MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC\n"
-        + "VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0\n"
-        + "Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW\n"
-        + "KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl\n"
-        + "cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw\n"
-        + "NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw\n"
-        + "NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy\n"
-        + "ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV\n"
-        + "BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ\n"
-        + "KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo\n"
-        + "Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4\n"
-        + "4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9\n"
-        + "KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI\n"
-        + "rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi\n"
-        + "94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB\n"
-        + "sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi\n"
-        + "gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo\n"
-        + "kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE\n"
-        + "vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA\n"
-        + "A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t\n"
-        + "O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua\n"
-        + "AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP\n"
-        + "9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/\n"
-        + "eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m\n"
-        + "0vdXcDazv/wor3ElhVsT/h5/WrQ8\n"
-        + "-----END CERTIFICATE-----\n";
-    return new Buffer()
-        .writeUtf8(comodoRsaCertificationAuthority)
-        .writeUtf8(entrustRootCertificateAuthority)
-        .inputStream();
-  }
-
-  /**
-   * Returns a trust manager that trusts {@code certificates} and none other. HTTPS services whose
-   * certificates have not been signed by these certificates will fail with a {@code
-   * SSLHandshakeException}.
-   *
-   * <p>This can be used to replace the host platform's built-in trusted certificates with a custom
-   * set. This is useful in development where certificate authority-trusted certificates aren't
-   * available. Or in production, to avoid reliance on third-party certificate authorities.
-   *
-   * <p>See also {@link CertificatePinner}, which can limit trusted certificates while still using
-   * the host platform's built-in trust store.
-   *
-   * <h3>Warning: Customizing Trusted Certificates is Dangerous!</h3>
-   *
-   * <p>Relying on your own trusted certificates limits your server team's ability to update their
-   * TLS certificates. By installing a specific set of trusted certificates, you take on additional
-   * operational complexity and limit your ability to migrate between certificate authorities. Do
-   * not use custom trusted certificates in production without the blessing of your server's TLS
-   * administrator.
-   */
-  private X509TrustManager trustManagerForCertificates(InputStream in)
-      throws GeneralSecurityException {
-    CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
-    Collection<? extends Certificate> certificates = certificateFactory.generateCertificates(in);
-    if (certificates.isEmpty()) {
-      throw new IllegalArgumentException("expected non-empty set of trusted certificates");
-    }
-
-    // Put the certificates a key store.
-    char[] password = "password".toCharArray(); // Any password will work.
-    KeyStore keyStore = newEmptyKeyStore(password);
-    int index = 0;
-    for (Certificate certificate : certificates) {
-      String certificateAlias = Integer.toString(index++);
-      keyStore.setCertificateEntry(certificateAlias, certificate);
-    }
-
-    // Use it to build an X509 trust manager.
-    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(
-        KeyManagerFactory.getDefaultAlgorithm());
-    keyManagerFactory.init(keyStore, password);
-    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(
-        TrustManagerFactory.getDefaultAlgorithm());
-    trustManagerFactory.init(keyStore);
-    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
-    if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {
-      throw new IllegalStateException("Unexpected default trust managers:"
-          + Arrays.toString(trustManagers));
-    }
-    return (X509TrustManager) trustManagers[0];
-  }
-
-  private KeyStore newEmptyKeyStore(char[] password) throws GeneralSecurityException {
-    try {
-      KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
-      InputStream in = null; // By convention, 'null' creates an empty key store.
-      keyStore.load(in, password);
-      return keyStore;
-    } catch (IOException e) {
-      throw new AssertionError(e);
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new CustomTrust().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java b/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
deleted file mode 100644
index dd537f52b2..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/HttpsServer.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.net.InetAddress;
-import okhttp3.Call;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.tls.HandshakeCertificates;
-import okhttp3.tls.HeldCertificate;
-
-/**
- * Create an HTTPS server with a self-signed certificate that OkHttp trusts.
- */
-public class HttpsServer {
-  public void run() throws Exception {
-    String localhost = InetAddress.getByName("localhost").getCanonicalHostName();
-    HeldCertificate localhostCertificate = new HeldCertificate.Builder()
-        .addSubjectAlternativeName(localhost)
-        .build();
-
-    HandshakeCertificates serverCertificates = new HandshakeCertificates.Builder()
-        .heldCertificate(localhostCertificate)
-        .build();
-    MockWebServer server = new MockWebServer();
-    server.useHttps(serverCertificates.sslSocketFactory(), false);
-    server.enqueue(new MockResponse());
-
-    HandshakeCertificates clientCertificates = new HandshakeCertificates.Builder()
-        .addTrustedCertificate(localhostCertificate.certificate())
-        .build();
-    OkHttpClient client = new OkHttpClient.Builder()
-        .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager())
-        .build();
-
-    Call call = client.newCall(new Request.Builder()
-        .url(server.url("/"))
-        .build());
-    Response response = call.execute();
-    System.out.println(response.handshake().tlsVersion());
-  }
-
-  public static void main(String... args) throws Exception {
-    new HttpsServer().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java b/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
deleted file mode 100644
index 8cb72b4bc8..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/LoggingInterceptors.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.util.logging.Logger;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class LoggingInterceptors {
-  private static final Logger logger = Logger.getLogger(LoggingInterceptors.class.getName());
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .addInterceptor(new LoggingInterceptor())
-      .build();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    Response response = client.newCall(request).execute();
-    response.body().close();
-  }
-
-  private static class LoggingInterceptor implements Interceptor {
-    @Override public Response intercept(Chain chain) throws IOException {
-      long t1 = System.nanoTime();
-      Request request = chain.request();
-      logger.info(String.format("Sending request %s on %s%n%s",
-          request.url(), chain.connection(), request.headers()));
-      Response response = chain.proceed(request);
-
-      long t2 = System.nanoTime();
-      logger.info(String.format("Received response for %s in %.1fms%n%s",
-          request.url(), (t2 - t1) / 1e6d, response.headers()));
-      return response;
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new LoggingInterceptors().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java b/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java
deleted file mode 100644
index 68570bf13f..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/ParseResponseWithMoshi.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import com.squareup.moshi.JsonAdapter;
-import com.squareup.moshi.Moshi;
-import java.io.IOException;
-import java.util.Map;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class ParseResponseWithMoshi {
-  private final OkHttpClient client = new OkHttpClient();
-  private final Moshi moshi = new Moshi.Builder().build();
-  private final JsonAdapter<Gist> gistJsonAdapter = moshi.adapter(Gist.class);
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://api.github.com/gists/c2a7c39532239ff261be")
-        .build();
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      Gist gist = gistJsonAdapter.fromJson(response.body().source());
-
-      for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {
-        System.out.println(entry.getKey());
-        System.out.println(entry.getValue().content);
-      }
-    }
-  }
-
-  static class Gist {
-    Map<String, GistFile> files;
-  }
-
-  static class GistFile {
-    String content;
-  }
-
-  public static void main(String... args) throws Exception {
-    new ParseResponseWithMoshi().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java b/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
deleted file mode 100644
index 6aa266c11d..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PerCallSettings.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.util.concurrent.TimeUnit;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class PerCallSettings {
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
-        .build();
-
-    // Copy to customize OkHttp for this request.
-    OkHttpClient client1 = client.newBuilder()
-        .readTimeout(500, TimeUnit.MILLISECONDS)
-        .build();
-    try (Response response = client1.newCall(request).execute()) {
-      System.out.println("Response 1 succeeded: " + response);
-    } catch (IOException e) {
-      System.out.println("Response 1 failed: " + e);
-    }
-
-    // Copy to customize OkHttp for this request.
-    OkHttpClient client2 = client.newBuilder()
-        .readTimeout(3000, TimeUnit.MILLISECONDS)
-        .build();
-    try (Response response = client2.newCall(request).execute()) {
-      System.out.println("Response 2 succeeded: " + response);
-    } catch (IOException e) {
-      System.out.println("Response 2 failed: " + e);
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PerCallSettings().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostFile.java b/samples/guide/src/main/java/okhttp3/recipes/PostFile.java
deleted file mode 100644
index a59259b504..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PostFile.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.File;
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-public final class PostFile {
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.get("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    File file = new File("README.md");
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(RequestBody.create(file, MEDIA_TYPE_MARKDOWN))
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PostFile().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostForm.java b/samples/guide/src/main/java/okhttp3/recipes/PostForm.java
deleted file mode 100644
index eab32b01ab..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PostForm.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.FormBody;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-public final class PostForm {
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    RequestBody formBody = new FormBody.Builder()
-        .add("search", "Jurassic Park")
-        .build();
-    Request request = new Request.Builder()
-        .url("https://en.wikipedia.org/w/index.php")
-        .post(formBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PostForm().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java b/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
deleted file mode 100644
index aa7ea2974f..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PostMultipart.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.File;
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.MultipartBody;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-public final class PostMultipart {
-  /**
-   * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
-   * these examples, please request your own client ID! https://api.imgur.com/oauth2
-   */
-  private static final String IMGUR_CLIENT_ID = "9199fdef135c122";
-  private static final MediaType MEDIA_TYPE_PNG = MediaType.get("image/png");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
-    RequestBody requestBody = new MultipartBody.Builder()
-        .setType(MultipartBody.FORM)
-        .addFormDataPart("title", "Square Logo")
-        .addFormDataPart("image", "logo-square.png",
-            RequestBody.create(
-                new File("docs/images/logo-square.png"),
-                MEDIA_TYPE_PNG))
-        .build();
-
-    Request request = new Request.Builder()
-        .header("Authorization", "Client-ID " + IMGUR_CLIENT_ID)
-        .url("https://api.imgur.com/3/image")
-        .post(requestBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PostMultipart().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java b/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
deleted file mode 100644
index 90ec01c6b8..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PostStreaming.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import okio.BufferedSink;
-
-public final class PostStreaming {
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.get("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    RequestBody requestBody = new RequestBody() {
-      @Override public MediaType contentType() {
-        return MEDIA_TYPE_MARKDOWN;
-      }
-
-      @Override public void writeTo(BufferedSink sink) throws IOException {
-        sink.writeUtf8("Numbers\n");
-        sink.writeUtf8("-------\n");
-        for (int i = 2; i <= 997; i++) {
-          sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i)));
-        }
-      }
-
-      private String factor(int n) {
-        for (int i = 2; i < n; i++) {
-          int x = n / i;
-          if (x * i == n) return factor(x) + " × " + i;
-        }
-        return Integer.toString(n);
-      }
-    };
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(requestBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PostStreaming().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostStreamingWithPipe.java b/samples/guide/src/main/java/okhttp3/recipes/PostStreamingWithPipe.java
deleted file mode 100644
index c73b9154ed..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PostStreamingWithPipe.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import okio.BufferedSink;
-import okio.Okio;
-import okio.Pipe;
-
-public final class PostStreamingWithPipe {
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.get("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    final PipeBody pipeBody = new PipeBody();
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(pipeBody)
-        .build();
-
-    streamPrimesToSinkAsynchronously(pipeBody.sink());
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  private void streamPrimesToSinkAsynchronously(final BufferedSink sink) {
-    Thread thread = new Thread("writer") {
-      @Override public void run() {
-        try {
-          sink.writeUtf8("Numbers\n");
-          sink.writeUtf8("-------\n");
-          for (int i = 2; i <= 997; i++) {
-            System.out.println(i);
-            Thread.sleep(10);
-            sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i)));
-          }
-          sink.close();
-        } catch (IOException | InterruptedException e) {
-          e.printStackTrace();
-        }
-      }
-
-      private String factor(int n) {
-        for (int i = 2; i < n; i++) {
-          int x = n / i;
-          if (x * i == n) return factor(x) + " × " + i;
-        }
-        return Integer.toString(n);
-      }
-    };
-
-    thread.start();
-  }
-
-  /**
-   * This request body makes it possible for another thread to stream data to the uploading request.
-   * This is potentially useful for posting live event streams like video capture. Callers should
-   * write to {@code sink()} and close it to complete the post.
-   */
-  static final class PipeBody extends RequestBody {
-    private final Pipe pipe = new Pipe(8192);
-    private final BufferedSink sink = Okio.buffer(pipe.sink());
-
-    public BufferedSink sink() {
-      return sink;
-    }
-
-    @Override public MediaType contentType() {
-      return MEDIA_TYPE_MARKDOWN;
-    }
-
-    @Override public void writeTo(BufferedSink sink) throws IOException {
-      sink.writeAll(pipe.source());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PostStreamingWithPipe().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PostString.java b/samples/guide/src/main/java/okhttp3/recipes/PostString.java
deleted file mode 100644
index 05766fe38e..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PostString.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-public final class PostString {
-  public static final MediaType MEDIA_TYPE_MARKDOWN
-      = MediaType.get("text/x-markdown; charset=utf-8");
-
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    String postBody = ""
-        + "Releases\n"
-        + "--------\n"
-        + "\n"
-        + " * _1.0_ May 6, 2013\n"
-        + " * _1.1_ June 15, 2013\n"
-        + " * _1.2_ August 11, 2013\n";
-
-    Request request = new Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(RequestBody.create(postBody, MEDIA_TYPE_MARKDOWN))
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PostString().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PreemptiveAuth.java b/samples/guide/src/main/java/okhttp3/recipes/PreemptiveAuth.java
deleted file mode 100644
index abbf0eb0c0..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PreemptiveAuth.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.Credentials;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class PreemptiveAuth {
-  private final OkHttpClient client;
-
-  public PreemptiveAuth() {
-    client = new OkHttpClient.Builder()
-        .addInterceptor(
-            new BasicAuthInterceptor("publicobject.com", "jesse", "password1"))
-        .build();
-  }
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/secrets/hellosecret.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PreemptiveAuth().run();
-  }
-
-  static final class BasicAuthInterceptor implements Interceptor {
-    private final String credentials;
-    private final String host;
-
-    BasicAuthInterceptor(String host, String username, String password) {
-      this.credentials = Credentials.basic(username, password);
-      this.host = host;
-    }
-
-    @Override public Response intercept(Chain chain) throws IOException {
-      Request request = chain.request();
-      if (request.url().host().equals(host)) {
-        request = request.newBuilder()
-            .header("Authorization", credentials)
-            .build();
-      }
-      return chain.proceed(request);
-    }
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java b/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
deleted file mode 100644
index 8111761dbf..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEvents.java
+++ /dev/null
@@ -1,200 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Proxy;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicLong;
-import okhttp3.Call;
-import okhttp3.Callback;
-import okhttp3.Connection;
-import okhttp3.EventListener;
-import okhttp3.Handshake;
-import okhttp3.HttpUrl;
-import okhttp3.OkHttpClient;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.ResponseBody;
-
-public final class PrintEvents {
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .eventListenerFactory(PrintingEventListener.FACTORY)
-      .build();
-
-  public void run() throws Exception {
-    Request washingtonPostRequest = new Request.Builder()
-        .url("https://www.washingtonpost.com/")
-        .build();
-    client.newCall(washingtonPostRequest).enqueue(new Callback() {
-      @Override public void onFailure(Call call, IOException e) {
-      }
-
-      @Override public void onResponse(Call call, Response response) throws IOException {
-        try (ResponseBody body = response.body()) {
-          // Consume and discard the response body.
-          body.source().readByteString();
-        }
-      }
-    });
-
-    Request newYorkTimesRequest = new Request.Builder()
-        .url("https://www.nytimes.com/")
-        .build();
-    client.newCall(newYorkTimesRequest).enqueue(new Callback() {
-      @Override public void onFailure(Call call, IOException e) {
-      }
-
-      @Override public void onResponse(Call call, Response response) throws IOException {
-        try (ResponseBody body = response.body()) {
-          // Consume and discard the response body.
-          body.source().readByteString();
-        }
-      }
-    });
-  }
-
-  public static void main(String... args) throws Exception {
-    new PrintEvents().run();
-  }
-
-  private static final class PrintingEventListener extends EventListener {
-    private static final Factory FACTORY = new Factory() {
-      final AtomicLong nextCallId = new AtomicLong(1L);
-
-      @Override public EventListener create(Call call) {
-        long callId = nextCallId.getAndIncrement();
-        System.out.printf("%04d %s%n", callId, call.request().url());
-        return new PrintingEventListener(callId, System.nanoTime());
-      }
-    };
-
-    final long callId;
-    final long callStartNanos;
-
-    PrintingEventListener(long callId, long callStartNanos) {
-      this.callId = callId;
-      this.callStartNanos = callStartNanos;
-    }
-
-    private void printEvent(String name) {
-      long elapsedNanos = System.nanoTime() - callStartNanos;
-      System.out.printf("%04d %.3f %s%n", callId, elapsedNanos / 1000000000d, name);
-    }
-
-    @Override public void proxySelectStart(Call call, HttpUrl url) {
-      printEvent("proxySelectStart");
-    }
-
-    @Override public void proxySelectEnd(Call call, HttpUrl url, List<Proxy> proxies) {
-      printEvent("proxySelectEnd");
-    }
-
-    @Override public void callStart(Call call) {
-      printEvent("callStart");
-    }
-
-    @Override public void dnsStart(Call call, String domainName) {
-      printEvent("dnsStart");
-    }
-
-    @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {
-      printEvent("dnsEnd");
-    }
-
-    @Override public void connectStart(
-        Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {
-      printEvent("connectStart");
-    }
-
-    @Override public void secureConnectStart(Call call) {
-      printEvent("secureConnectStart");
-    }
-
-    @Override public void secureConnectEnd(Call call, Handshake handshake) {
-      printEvent("secureConnectEnd");
-    }
-
-    @Override public void connectEnd(
-        Call call, InetSocketAddress inetSocketAddress, Proxy proxy, Protocol protocol) {
-      printEvent("connectEnd");
-    }
-
-    @Override public void connectFailed(Call call, InetSocketAddress inetSocketAddress, Proxy proxy,
-        Protocol protocol, IOException ioe) {
-      printEvent("connectFailed");
-    }
-
-    @Override public void connectionAcquired(Call call, Connection connection) {
-      printEvent("connectionAcquired");
-    }
-
-    @Override public void connectionReleased(Call call, Connection connection) {
-      printEvent("connectionReleased");
-    }
-
-    @Override public void requestHeadersStart(Call call) {
-      printEvent("requestHeadersStart");
-    }
-
-    @Override public void requestHeadersEnd(Call call, Request request) {
-      printEvent("requestHeadersEnd");
-    }
-
-    @Override public void requestBodyStart(Call call) {
-      printEvent("requestBodyStart");
-    }
-
-    @Override public void requestBodyEnd(Call call, long byteCount) {
-      printEvent("requestBodyEnd");
-    }
-
-    @Override public void requestFailed(Call call, IOException ioe) {
-      printEvent("requestFailed");
-    }
-
-    @Override public void responseHeadersStart(Call call) {
-      printEvent("responseHeadersStart");
-    }
-
-    @Override public void responseHeadersEnd(Call call, Response response) {
-      printEvent("responseHeadersEnd");
-    }
-
-    @Override public void responseBodyStart(Call call) {
-      printEvent("responseBodyStart");
-    }
-
-    @Override public void responseBodyEnd(Call call, long byteCount) {
-      printEvent("responseBodyEnd");
-    }
-
-    @Override public void responseFailed(Call call, IOException ioe) {
-      printEvent("responseFailed");
-    }
-
-    @Override public void callEnd(Call call) {
-      printEvent("callEnd");
-    }
-
-    @Override public void callFailed(Call call, IOException ioe) {
-      printEvent("callFailed");
-    }
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java b/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
deleted file mode 100644
index ea0b1fb619..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/PrintEventsNonConcurrent.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/*
- * Copyright (C) 2017 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Proxy;
-import java.util.List;
-import okhttp3.Call;
-import okhttp3.Connection;
-import okhttp3.EventListener;
-import okhttp3.Handshake;
-import okhttp3.HttpUrl;
-import okhttp3.OkHttpClient;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-
-/**
- * This prints events for a single in-flight call. It won't work for multiple concurrent calls
- * because we don't know what callStartNanos refers to.
- */
-public final class PrintEventsNonConcurrent {
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .eventListener(new PrintingEventListener())
-      .build();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    System.out.println("REQUEST 1 (new connection)");
-    try (Response response = client.newCall(request).execute()) {
-      // Consume and discard the response body.
-      response.body().source().readByteString();
-    }
-
-    System.out.println("REQUEST 2 (pooled connection)");
-    try (Response response = client.newCall(request).execute()) {
-      // Consume and discard the response body.
-      response.body().source().readByteString();
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new PrintEventsNonConcurrent().run();
-  }
-
-  private static final class PrintingEventListener extends EventListener {
-    long callStartNanos;
-
-    private void printEvent(String name) {
-      long nowNanos = System.nanoTime();
-      if (name.equals("callStart")) {
-        callStartNanos = nowNanos;
-      }
-      long elapsedNanos = nowNanos - callStartNanos;
-      System.out.printf("%.3f %s%n", elapsedNanos / 1000000000d, name);
-    }
-
-    @Override public void callStart(Call call) {
-      printEvent("callStart");
-    }
-
-    @Override public void proxySelectStart(Call call, HttpUrl url) {
-      printEvent("proxySelectStart");
-    }
-
-    @Override public void proxySelectEnd(Call call, HttpUrl url, List<Proxy> proxies) {
-      printEvent("proxySelectEnd");
-    }
-
-    @Override public void dnsStart(Call call, String domainName) {
-      printEvent("dnsStart");
-    }
-
-    @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {
-      printEvent("dnsEnd");
-    }
-
-    @Override public void connectStart(
-        Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {
-      printEvent("connectStart");
-    }
-
-    @Override public void secureConnectStart(Call call) {
-      printEvent("secureConnectStart");
-    }
-
-    @Override public void secureConnectEnd(Call call, Handshake handshake) {
-      printEvent("secureConnectEnd");
-    }
-
-    @Override public void connectEnd(
-        Call call, InetSocketAddress inetSocketAddress, Proxy proxy, Protocol protocol) {
-      printEvent("connectEnd");
-    }
-
-    @Override public void connectFailed(Call call, InetSocketAddress inetSocketAddress, Proxy proxy,
-        Protocol protocol, IOException ioe) {
-      printEvent("connectFailed");
-    }
-
-    @Override public void connectionAcquired(Call call, Connection connection) {
-      printEvent("connectionAcquired");
-    }
-
-    @Override public void connectionReleased(Call call, Connection connection) {
-      printEvent("connectionReleased");
-    }
-
-    @Override public void requestHeadersStart(Call call) {
-      printEvent("requestHeadersStart");
-    }
-
-    @Override public void requestHeadersEnd(Call call, Request request) {
-      printEvent("requestHeadersEnd");
-    }
-
-    @Override public void requestBodyStart(Call call) {
-      printEvent("requestBodyStart");
-    }
-
-    @Override public void requestBodyEnd(Call call, long byteCount) {
-      printEvent("requestBodyEnd");
-    }
-
-    @Override public void requestFailed(Call call, IOException ioe) {
-      printEvent("requestFailed");
-    }
-
-    @Override public void responseHeadersStart(Call call) {
-      printEvent("responseHeadersStart");
-    }
-
-    @Override public void responseHeadersEnd(Call call, Response response) {
-      printEvent("responseHeadersEnd");
-    }
-
-    @Override public void responseBodyStart(Call call) {
-      printEvent("responseBodyStart");
-    }
-
-    @Override public void responseBodyEnd(Call call, long byteCount) {
-      printEvent("responseBodyEnd");
-    }
-
-    @Override public void responseFailed(Call call, IOException ioe) {
-      printEvent("responseFailed");
-    }
-
-    @Override public void callEnd(Call call) {
-      printEvent("callEnd");
-    }
-
-    @Override public void callFailed(Call call, IOException ioe) {
-      printEvent("callFailed");
-    }
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/Progress.java b/samples/guide/src/main/java/okhttp3/recipes/Progress.java
deleted file mode 100644
index 197401f205..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/Progress.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.ResponseBody;
-import okio.Buffer;
-import okio.BufferedSource;
-import okio.ForwardingSource;
-import okio.Okio;
-import okio.Source;
-
-public final class Progress {
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    final ProgressListener progressListener = new ProgressListener() {
-      boolean firstUpdate = true;
-
-      @Override public void update(long bytesRead, long contentLength, boolean done) {
-        if (done) {
-          System.out.println("completed");
-        } else {
-          if (firstUpdate) {
-            firstUpdate = false;
-            if (contentLength == -1) {
-              System.out.println("content-length: unknown");
-            } else {
-              System.out.format("content-length: %d\n", contentLength);
-            }
-          }
-
-          System.out.println(bytesRead);
-
-          if (contentLength != -1) {
-            System.out.format("%d%% done\n", (100 * bytesRead) / contentLength);
-          }
-        }
-      }
-    };
-
-    OkHttpClient client = new OkHttpClient.Builder()
-        .addNetworkInterceptor(chain -> {
-          Response originalResponse = chain.proceed(chain.request());
-          return originalResponse.newBuilder()
-              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
-              .build();
-        })
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new Progress().run();
-  }
-
-  private static class ProgressResponseBody extends ResponseBody {
-
-    private final ResponseBody responseBody;
-    private final ProgressListener progressListener;
-    private BufferedSource bufferedSource;
-
-    ProgressResponseBody(ResponseBody responseBody, ProgressListener progressListener) {
-      this.responseBody = responseBody;
-      this.progressListener = progressListener;
-    }
-
-    @Override public MediaType contentType() {
-      return responseBody.contentType();
-    }
-
-    @Override public long contentLength() {
-      return responseBody.contentLength();
-    }
-
-    @Override public BufferedSource source() {
-      if (bufferedSource == null) {
-        bufferedSource = Okio.buffer(source(responseBody.source()));
-      }
-      return bufferedSource;
-    }
-
-    private Source source(Source source) {
-      return new ForwardingSource(source) {
-        long totalBytesRead = 0L;
-
-        @Override public long read(Buffer sink, long byteCount) throws IOException {
-          long bytesRead = super.read(sink, byteCount);
-          // read() returns the number of bytes read, or -1 if this source is exhausted.
-          totalBytesRead += bytesRead != -1 ? bytesRead : 0;
-          progressListener.update(totalBytesRead, responseBody.contentLength(), bytesRead == -1);
-          return bytesRead;
-        }
-      };
-    }
-  }
-
-  interface ProgressListener {
-    void update(long bytesRead, long contentLength, boolean done);
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java b/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
deleted file mode 100644
index c069a8f7a5..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/RequestBodyCompression.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import com.squareup.moshi.JsonAdapter;
-import com.squareup.moshi.Moshi;
-import com.squareup.moshi.Types;
-import java.io.IOException;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import okhttp3.Interceptor;
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import okio.BufferedSink;
-import okio.GzipSink;
-import okio.Okio;
-
-public final class RequestBodyCompression {
-  /**
-   * The Google API KEY for OkHttp recipes. If you're using Google APIs for anything other than
-   * running these examples, please request your own client ID!
-   *
-   * https://console.developers.google.com/project
-   */
-  public static final String GOOGLE_API_KEY = "AIzaSyAx2WZYe0My0i-uGurpvraYJxO7XNbwiGs";
-  public static final MediaType MEDIA_TYPE_JSON = MediaType.get("application/json");
-
-  private final OkHttpClient client = new OkHttpClient.Builder()
-      .addInterceptor(new GzipRequestInterceptor())
-      .build();
-  private final Moshi moshi = new Moshi.Builder().build();
-  private final JsonAdapter<Map<String, String>> mapJsonAdapter = moshi.adapter(
-      Types.newParameterizedType(Map.class, String.class, String.class));
-
-  public void run() throws Exception {
-    Map<String, String> requestBody = new LinkedHashMap<>();
-    requestBody.put("longUrl", "https://publicobject.com/2014/12/04/html-formatting-javadocs/");
-    RequestBody jsonRequestBody = RequestBody.create(
-        mapJsonAdapter.toJson(requestBody), MEDIA_TYPE_JSON);
-    Request request = new Request.Builder()
-        .url("https://www.googleapis.com/urlshortener/v1/url?key=" + GOOGLE_API_KEY)
-        .post(jsonRequestBody)
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new RequestBodyCompression().run();
-  }
-
-  /** This interceptor compresses the HTTP request body. Many webservers can't handle this! */
-  static class GzipRequestInterceptor implements Interceptor {
-    @Override public Response intercept(Chain chain) throws IOException {
-      Request originalRequest = chain.request();
-      if (originalRequest.body() == null || originalRequest.header("Content-Encoding") != null) {
-        return chain.proceed(originalRequest);
-      }
-
-      Request compressedRequest = originalRequest.newBuilder()
-          .header("Content-Encoding", "gzip")
-          .method(originalRequest.method(), gzip(originalRequest.body()))
-          .build();
-      return chain.proceed(compressedRequest);
-    }
-
-    private RequestBody gzip(final RequestBody body) {
-      return new RequestBody() {
-        @Override public MediaType contentType() {
-          return body.contentType();
-        }
-
-        @Override public long contentLength() {
-          return -1; // We don't know the compressed length in advance!
-        }
-
-        @Override public void writeTo(BufferedSink sink) throws IOException {
-          BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));
-          body.writeTo(gzipSink);
-          gzipSink.close();
-        }
-      };
-    }
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java b/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
deleted file mode 100644
index 4d876bb201..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/RewriteResponseCacheControl.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.File;
-import java.io.IOException;
-import okhttp3.Cache;
-import okhttp3.Interceptor;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class RewriteResponseCacheControl {
-  /** Dangerous interceptor that rewrites the server's cache-control header. */
-  private static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = chain -> {
-    Response originalResponse = chain.proceed(chain.request());
-    return originalResponse.newBuilder()
-        .header("Cache-Control", "max-age=60")
-        .build();
-  };
-
-  private final OkHttpClient client;
-
-  public RewriteResponseCacheControl(File cacheDirectory) throws Exception {
-    Cache cache = new Cache(cacheDirectory, 1024 * 1024);
-    cache.evictAll();
-
-    client = new OkHttpClient.Builder()
-        .cache(cache)
-        .build();
-  }
-
-  public void run() throws Exception {
-    for (int i = 0; i < 5; i++) {
-      System.out.println("    Request: " + i);
-
-      Request request = new Request.Builder()
-          .url("https://api.github.com/search/repositories?q=http")
-          .build();
-
-      OkHttpClient clientForCall;
-      if (i == 2) {
-        // Force this request's response to be written to the cache. This way, subsequent responses
-        // can be read from the cache.
-        System.out.println("Force cache: true");
-        clientForCall = client.newBuilder()
-            .addNetworkInterceptor(REWRITE_CACHE_CONTROL_INTERCEPTOR)
-            .build();
-      } else {
-        System.out.println("Force cache: false");
-        clientForCall = client;
-      }
-
-      try (Response response = clientForCall.newCall(request).execute()) {
-        if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-        System.out.println("    Network: " + (response.networkResponse() != null));
-        System.out.println();
-      }
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new RewriteResponseCacheControl(new File("RewriteResponseCacheControl.tmp")).run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java b/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
deleted file mode 100644
index 38c91a50c2..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/SynchronousGet.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes;
-
-import java.io.IOException;
-import okhttp3.Headers;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-
-public final class SynchronousGet {
-  private final OkHttpClient client = new OkHttpClient();
-
-  public void run() throws Exception {
-    Request request = new Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
-
-      Headers responseHeaders = response.headers();
-      for (int i = 0; i < responseHeaders.size(); i++) {
-        System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
-      }
-
-      System.out.println(response.body().string());
-    }
-  }
-
-  public static void main(String... args) throws Exception {
-    new SynchronousGet().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
deleted file mode 100644
index f0407db87f..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package okhttp3.recipes;
-
-import java.util.concurrent.TimeUnit;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.WebSocket;
-import okhttp3.WebSocketListener;
-import okio.ByteString;
-
-public final class WebSocketEcho extends WebSocketListener {
-  private void run() {
-    OkHttpClient client = new OkHttpClient.Builder()
-        .readTimeout(0,  TimeUnit.MILLISECONDS)
-        .build();
-
-    Request request = new Request.Builder()
-        .url("ws://echo.websocket.org")
-        .build();
-    client.newWebSocket(request, this);
-
-    // Trigger shutdown of the dispatcher's executor so this process can exit cleanly.
-    client.dispatcher().executorService().shutdown();
-  }
-
-  @Override public void onOpen(WebSocket webSocket, Response response) {
-    webSocket.send("Hello...");
-    webSocket.send("...World!");
-    webSocket.send(ByteString.decodeHex("deadbeef"));
-    webSocket.close(1000, "Goodbye, World!");
-  }
-
-  @Override public void onMessage(WebSocket webSocket, String text) {
-    System.out.println("MESSAGE: " + text);
-  }
-
-  @Override public void onMessage(WebSocket webSocket, ByteString bytes) {
-    System.out.println("MESSAGE: " + bytes.hex());
-  }
-
-  @Override public void onClosing(WebSocket webSocket, int code, String reason) {
-    webSocket.close(1000, null);
-    System.out.println("CLOSE: " + code + " " + reason);
-  }
-
-  @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
-    t.printStackTrace();
-  }
-
-  public static void main(String... args) {
-    new WebSocketEcho().run();
-  }
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt
deleted file mode 100644
index ca9a946615..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/AccessHeaders.kt
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-
-class AccessHeaders {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://api.github.com/repos/square/okhttp/issues")
-        .header("User-Agent", "OkHttp Headers.java")
-        .addHeader("Accept", "application/json; q=0.5")
-        .addHeader("Accept", "application/vnd.github.v3+json")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println("Server: ${response.header("Server")}")
-      println("Date: ${response.header("Date")}")
-      println("Vary: ${response.headers("Vary")}")
-    }
-  }
-}
-
-fun main() {
-  AccessHeaders().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt
deleted file mode 100644
index ca35b3906c..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/AsynchronousGet.kt
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.Call
-import okhttp3.Callback
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okhttp3.Response
-import java.io.IOException
-
-class AsynchronousGet {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build()
-
-    client.newCall(request).enqueue(object : Callback {
-      override fun onFailure(call: Call, e: IOException) {
-        e.printStackTrace()
-      }
-
-      override fun onResponse(call: Call, response: Response) {
-        response.use {
-          if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-          for ((name, value) in response.headers) {
-            println("$name: $value")
-          }
-
-          println(response.body!!.string())
-        }
-      }
-    })
-  }
-}
-
-fun main() {
-  AsynchronousGet().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt
deleted file mode 100644
index 7a56b425cd..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/Authenticate.kt
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.Authenticator
-import okhttp3.Credentials
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okhttp3.Response
-import okhttp3.Route
-import java.io.IOException
-
-class Authenticate {
-  private val client = OkHttpClient.Builder()
-      .authenticator(object : Authenticator {
-        @Throws(IOException::class)
-        override fun authenticate(route: Route?, response: Response): Request? {
-          if (response.request.header("Authorization") != null) {
-            return null // Give up, we've already attempted to authenticate.
-          }
-
-          println("Authenticating for response: $response")
-          println("Challenges: ${response.challenges()}")
-          val credential = Credentials.basic("jesse", "password1")
-          return response.request.newBuilder()
-              .header("Authorization", credential)
-              .build()
-        }
-      })
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://publicobject.com/secrets/hellosecret.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-}
-
-fun main() {
-  Authenticate().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt
deleted file mode 100644
index b700690f80..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/CacheResponse.kt
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.Cache
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.File
-import java.io.IOException
-
-class CacheResponse(cacheDirectory: File) {
-  private val client: OkHttpClient = OkHttpClient.Builder()
-      .cache(Cache(
-          directory = cacheDirectory,
-          maxSize = 10L * 1024L * 1024L // 1 MiB
-      ))
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build()
-
-    val response1Body = client.newCall(request).execute().use {
-      if (!it.isSuccessful) throw IOException("Unexpected code $it")
-
-      println("Response 1 response:          $it")
-      println("Response 1 cache response:    ${it.cacheResponse}")
-      println("Response 1 network response:  ${it.networkResponse}")
-      return@use it.body!!.string()
-    }
-
-    val response2Body = client.newCall(request).execute().use {
-      if (!it.isSuccessful) throw IOException("Unexpected code $it")
-
-      println("Response 2 response:          $it")
-      println("Response 2 cache response:    ${it.cacheResponse}")
-      println("Response 2 network response:  ${it.networkResponse}")
-      return@use it.body!!.string()
-    }
-
-    println("Response 2 equals Response 1? " + (response1Body == response2Body))
-  }
-}
-
-fun main() {
-  CacheResponse(File("CacheResponse.tmp")).run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt
deleted file mode 100644
index b1932a3c30..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/CancelCall.kt
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-import java.util.concurrent.Executors
-import java.util.concurrent.TimeUnit
-
-class CancelCall {
-  private val executor = Executors.newScheduledThreadPool(1)
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build()
-
-    val startNanos = System.nanoTime()
-    val call = client.newCall(request)
-
-    // Schedule a job to cancel the call in 1 second.
-    executor.schedule({
-      System.out.printf("%.2f Canceling call.%n", (System.nanoTime() - startNanos) / 1e9f)
-      call.cancel()
-      System.out.printf("%.2f Canceled call.%n", (System.nanoTime() - startNanos) / 1e9f)
-    }, 1, TimeUnit.SECONDS)
-
-    System.out.printf("%.2f Executing call.%n", (System.nanoTime() - startNanos) / 1e9f)
-    try {
-      call.execute().use { response ->
-        System.out.printf("%.2f Call was expected to fail, but completed: %s%n",
-            (System.nanoTime() - startNanos) / 1e9f, response)
-      }
-    } catch (e: IOException) {
-      System.out.printf("%.2f Call failed as expected: %s%n",
-          (System.nanoTime() - startNanos) / 1e9f, e)
-    }
-  }
-}
-
-fun main() {
-  CancelCall().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt
deleted file mode 100644
index ec3b79f452..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/CertificatePinning.kt
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.CertificatePinner
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-
-class CertificatePinning {
-  private val client = OkHttpClient.Builder()
-      .certificatePinner(
-          CertificatePinner.Builder()
-              .add("publicobject.com", "sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=")
-              .build())
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://publicobject.com/robots.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      for (certificate in response.handshake!!.peerCertificates) {
-        println(CertificatePinner.pin(certificate))
-      }
-    }
-  }
-}
-
-fun main() {
-  CertificatePinning().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt
deleted file mode 100644
index 4ffeeab97c..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/ConfigureTimeouts.kt
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.util.concurrent.TimeUnit
-
-class ConfigureTimeouts {
-  private val client: OkHttpClient = OkHttpClient.Builder()
-      .connectTimeout(5, TimeUnit.SECONDS)
-      .writeTimeout(5, TimeUnit.SECONDS)
-      .readTimeout(5, TimeUnit.SECONDS)
-      .callTimeout(10, TimeUnit.SECONDS)
-      .build()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://httpbin.org/delay/2") // This URL is served with a 2 second delay.
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      println("Response completed: $response")
-    }
-  }
-}
-
-fun main() {
-  ConfigureTimeouts().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt
deleted file mode 100644
index cae979e1a1..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/CustomTrust.kt
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.CertificatePinner
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okio.Buffer
-import java.io.IOException
-import java.io.InputStream
-import java.security.KeyStore
-import java.security.cert.CertificateFactory
-import java.util.Arrays
-import javax.net.ssl.KeyManagerFactory
-import javax.net.ssl.SSLContext
-import javax.net.ssl.TrustManager
-import javax.net.ssl.TrustManagerFactory
-import javax.net.ssl.X509TrustManager
-
-class CustomTrust {
-  private val client: OkHttpClient
-
-  init {
-    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())
-    val sslContext = SSLContext.getInstance("TLS")
-    sslContext.init(null, arrayOf<TrustManager>(trustManager), null)
-    val sslSocketFactory = sslContext.socketFactory
-
-    client = OkHttpClient.Builder()
-        .sslSocketFactory(sslSocketFactory, trustManager)
-        .build()
-  }
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      for ((name, value) in response.headers) {
-        println("$name: $value")
-      }
-
-      println(response.body!!.string())
-    }
-  }
-
-  /**
-   * Returns an input stream containing one or more certificate PEM files. This implementation just
-   * embeds the PEM files in Java strings; most applications will instead read this from a resource
-   * file that gets bundled with the application.
-   */
-  private fun trustedCertificatesInputStream(): InputStream {
-    // PEM files for root certificates of Comodo and Entrust. These two CAs are sufficient to view
-    // https://publicobject.com (Comodo) and https://squareup.com (Entrust). But they aren't
-    // sufficient to connect to most HTTPS sites including https://godaddy.com and https://visa.com.
-    // Typically developers will need to get a PEM file from their organization's TLS administrator.
-    val comodoRsaCertificationAuthority = """
-        |-----BEGIN CERTIFICATE-----
-        |MIIF2DCCA8CgAwIBAgIQTKr5yttjb+Af907YWwOGnTANBgkqhkiG9w0BAQwFADCB
-        |hTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
-        |A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNV
-        |BAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTAwMTE5
-        |MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCBhTELMAkGA1UEBhMCR0IxGzAZBgNVBAgT
-        |EkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMR
-        |Q09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMTIkNPTU9ETyBSU0EgQ2VydGlmaWNh
-        |dGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCR
-        |6FSS0gpWsawNJN3Fz0RndJkrN6N9I3AAcbxT38T6KhKPS38QVr2fcHK3YX/JSw8X
-        |pz3jsARh7v8Rl8f0hj4K+j5c+ZPmNHrZFGvnnLOFoIJ6dq9xkNfs/Q36nGz637CC
-        |9BR++b7Epi9Pf5l/tfxnQ3K9DADWietrLNPtj5gcFKt+5eNu/Nio5JIk2kNrYrhV
-        |/erBvGy2i/MOjZrkm2xpmfh4SDBF1a3hDTxFYPwyllEnvGfDyi62a+pGx8cgoLEf
-        |Zd5ICLqkTqnyg0Y3hOvozIFIQ2dOciqbXL1MGyiKXCJ7tKuY2e7gUYPDCUZObT6Z
-        |+pUX2nwzV0E8jVHtC7ZcryxjGt9XyD+86V3Em69FmeKjWiS0uqlWPc9vqv9JWL7w
-        |qP/0uK3pN/u6uPQLOvnoQ0IeidiEyxPx2bvhiWC4jChWrBQdnArncevPDt09qZah
-        |SL0896+1DSJMwBGB7FY79tOi4lu3sgQiUpWAk2nojkxl8ZEDLXB0AuqLZxUpaVIC
-        |u9ffUGpVRr+goyhhf3DQw6KqLCGqR84onAZFdr+CGCe01a60y1Dma/RMhnEw6abf
-        |Fobg2P9A3fvQQoh/ozM6LlweQRGBY84YcWsr7KaKtzFcOmpH4MN5WdYgGq/yapiq
-        |crxXStJLnbsQ/LBMQeXtHT1eKJ2czL+zUdqnR+WEUwIDAQABo0IwQDAdBgNVHQ4E
-        |FgQUu69+Aj36pvE8hI6t7jiY7NkyMtQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB
-        |/wQFMAMBAf8wDQYJKoZIhvcNAQEMBQADggIBAArx1UaEt65Ru2yyTUEUAJNMnMvl
-        |wFTPoCWOAvn9sKIN9SCYPBMtrFaisNZ+EZLpLrqeLppysb0ZRGxhNaKatBYSaVqM
-        |4dc+pBroLwP0rmEdEBsqpIt6xf4FpuHA1sj+nq6PK7o9mfjYcwlYRm6mnPTXJ9OV
-        |2jeDchzTc+CiR5kDOF3VSXkAKRzH7JsgHAckaVd4sjn8OoSgtZx8jb8uk2Intzna
-        |FxiuvTwJaP+EmzzV1gsD41eeFPfR60/IvYcjt7ZJQ3mFXLrrkguhxuhoqEwWsRqZ
-        |CuhTLJK7oQkYdQxlqHvLI7cawiiFwxv/0Cti76R7CZGYZ4wUAc1oBmpjIXUDgIiK
-        |boHGhfKppC3n9KUkEEeDys30jXlYsQab5xoq2Z0B15R97QNKyvDb6KkBPvVWmcke
-        |jkk9u+UJueBPSZI9FoJAzMxZxuY67RIuaTxslbH9qh17f4a+Hg4yRvv7E491f0yL
-        |S0Zj/gA0QHDBw7mh3aZw4gSzQbzpgJHqZJx64SIDqZxubw5lT2yHh17zbqD5daWb
-        |QOhTsiedSrnAdyGN/4fy3ryM7xfft0kL0fJuMAsaDk527RH89elWsn2/x20Kk4yl
-        |0MC2Hb46TpSi125sC8KKfPog88Tk5c0NqMuRkrF8hey1FGlmDoLnzc7ILaZRfyHB
-        |NVOFBkpdn627G190
-        |-----END CERTIFICATE-----
-        |""".trimMargin()
-    val entrustRootCertificateAuthority = """
-        |-----BEGIN CERTIFICATE-----
-        |MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC
-        |VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0
-        |Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW
-        |KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl
-        |cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw
-        |NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw
-        |NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy
-        |ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV
-        |BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ
-        |KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo
-        |Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4
-        |4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9
-        |KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI
-        |rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi
-        |94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB
-        |sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi
-        |gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo
-        |kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE
-        |vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA
-        |A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t
-        |O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua
-        |AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP
-        |9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/
-        |eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m
-        |0vdXcDazv/wor3ElhVsT/h5/WrQ8
-        |-----END CERTIFICATE-----
-        |""".trimMargin()
-    return Buffer()
-        .writeUtf8(comodoRsaCertificationAuthority)
-        .writeUtf8(entrustRootCertificateAuthority)
-        .inputStream()
-  }
-
-  /**
-   * Returns a trust manager that trusts `certificates` and none other. HTTPS services whose
-   * certificates have not been signed by these certificates will fail with a
-   * `SSLHandshakeException`.
-   *
-   * This can be used to replace the host platform's built-in trusted certificates with a custom
-   * set. This is useful in development where certificate authority-trusted certificates aren't
-   * available. Or in production, to avoid reliance on third-party certificate authorities.
-   *
-   * See also [CertificatePinner], which can limit trusted certificates while still using
-   * the host platform's built-in trust store.
-   *
-   * Warning: Customizing Trusted Certificates is Dangerous!
-   * -------------------------------------------------------
-   *
-   * Relying on your own trusted certificates limits your server team's ability to update their
-   * TLS certificates. By installing a specific set of trusted certificates, you take on additional
-   * operational complexity and limit your ability to migrate between certificate authorities. Do
-   * not use custom trusted certificates in production without the blessing of your server's TLS
-   * administrator.
-   */
-  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {
-    val certificateFactory = CertificateFactory.getInstance("X.509")
-    val certificates = certificateFactory.generateCertificates(inputStream)
-    require(!certificates.isEmpty()) { "expected non-empty set of trusted certificates" }
-
-    // Put the certificates a key store.
-    val password = "password".toCharArray() // Any password will work.
-    val keyStore = newEmptyKeyStore(password)
-    for ((index, certificate) in certificates.withIndex()) {
-      val certificateAlias = index.toString()
-      keyStore.setCertificateEntry(certificateAlias, certificate)
-    }
-
-    // Use it to build an X509 trust manager.
-    val keyManagerFactory = KeyManagerFactory.getInstance(
-        KeyManagerFactory.getDefaultAlgorithm()
-    )
-    keyManagerFactory.init(keyStore, password)
-    val trustManagerFactory = TrustManagerFactory.getInstance(
-        TrustManagerFactory.getDefaultAlgorithm()
-    )
-    trustManagerFactory.init(keyStore)
-    val trustManagers = trustManagerFactory.trustManagers
-    check(trustManagers.size == 1 && trustManagers[0] is X509TrustManager) {
-      "Unexpected default trust managers: ${Arrays.toString(trustManagers)}"
-    }
-    return trustManagers[0] as X509TrustManager
-  }
-
-  private fun newEmptyKeyStore(password: CharArray): KeyStore {
-    val keyStore = KeyStore.getInstance(KeyStore.getDefaultType())
-    val inputStream: InputStream? = null // By convention, 'null' creates an empty key store.
-    keyStore.load(inputStream, password)
-    return keyStore
-  }
-}
-
-fun main() {
-  CustomTrust().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt
deleted file mode 100644
index a5a8ac4633..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/ParseResponseWithMoshi.kt
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import com.squareup.moshi.JsonClass
-import com.squareup.moshi.Moshi
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-
-class ParseResponseWithMoshi {
-  private val client = OkHttpClient()
-  private val moshi = Moshi.Builder().build()
-  private val gistJsonAdapter = moshi.adapter(Gist::class.java)
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://api.github.com/gists/c2a7c39532239ff261be")
-        .build()
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      val gist = gistJsonAdapter.fromJson(response.body!!.source())
-
-      for ((key, value) in gist!!.files!!) {
-        println(key)
-        println(value.content)
-      }
-    }
-  }
-
-  @JsonClass(generateAdapter = true)
-  data class Gist(var files: Map<String, GistFile>?)
-
-  @JsonClass(generateAdapter = true)
-  data class GistFile(var content: String?)
-}
-
-fun main() {
-  ParseResponseWithMoshi().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt
deleted file mode 100644
index 4ff5f5a027..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/PerCallSettings.kt
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-import java.util.concurrent.TimeUnit
-
-class PerCallSettings {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("http://httpbin.org/delay/1") // This URL is served with a 1 second delay.
-        .build()
-
-    // Copy to customize OkHttp for this request.
-    val client1 = client.newBuilder()
-        .readTimeout(500, TimeUnit.MILLISECONDS)
-        .build()
-    try {
-      client1.newCall(request).execute().use { response ->
-        println("Response 1 succeeded: $response")
-      }
-    } catch (e: IOException) {
-      println("Response 1 failed: $e")
-    }
-
-    // Copy to customize OkHttp for this request.
-    val client2 = client.newBuilder()
-        .readTimeout(3000, TimeUnit.MILLISECONDS)
-        .build()
-    try {
-      client2.newCall(request).execute().use { response ->
-        println("Response 2 succeeded: $response")
-      }
-    } catch (e: IOException) {
-      println("Response 2 failed: $e")
-    }
-  }
-}
-
-fun main() {
-  PerCallSettings().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt
deleted file mode 100644
index cfb983a02d..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/PostFile.kt
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.MediaType.Companion.toMediaType
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okhttp3.RequestBody.Companion.asRequestBody
-import java.io.File
-import java.io.IOException
-
-class PostFile {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val file = File("README.md")
-
-    val request = Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
-  }
-}
-
-fun main() {
-  PostFile().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt
deleted file mode 100644
index 189c6f1d7d..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/PostForm.kt
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.FormBody
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-
-class PostForm {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val formBody = FormBody.Builder()
-        .add("search", "Jurassic Park")
-        .build()
-    val request = Request.Builder()
-        .url("https://en.wikipedia.org/w/index.php")
-        .post(formBody)
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-}
-
-fun main() {
-  PostForm().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt
deleted file mode 100644
index 7a56bd3a7f..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/PostMultipart.kt
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.MediaType.Companion.toMediaType
-import okhttp3.MultipartBody
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okhttp3.RequestBody.Companion.asRequestBody
-import java.io.File
-import java.io.IOException
-
-class PostMultipart {
-  private val client = OkHttpClient()
-
-  fun run() {
-    // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image
-    val requestBody = MultipartBody.Builder()
-        .setType(MultipartBody.FORM)
-        .addFormDataPart("title", "Square Logo")
-        .addFormDataPart("image", "logo-square.png",
-            File("docs/images/logo-square.png").asRequestBody(MEDIA_TYPE_PNG))
-        .build()
-
-    val request = Request.Builder()
-        .header("Authorization", "Client-ID $IMGUR_CLIENT_ID")
-        .url("https://api.imgur.com/3/image")
-        .post(requestBody)
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    /**
-     * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running
-     * these examples, please request your own client ID! https://api.imgur.com/oauth2
-     */
-    private val IMGUR_CLIENT_ID = "9199fdef135c122"
-    private val MEDIA_TYPE_PNG = "image/png".toMediaType()
-  }
-}
-
-fun main() {
-  PostMultipart().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt
deleted file mode 100644
index 5cfcd96a06..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/PostStreaming.kt
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.MediaType.Companion.toMediaType
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okhttp3.RequestBody
-import okio.BufferedSink
-import java.io.IOException
-
-class PostStreaming {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val requestBody = object : RequestBody() {
-      override fun contentType() = MEDIA_TYPE_MARKDOWN
-
-      override fun writeTo(sink: BufferedSink) {
-        sink.writeUtf8("Numbers\n")
-        sink.writeUtf8("-------\n")
-        for (i in 2..997) {
-          sink.writeUtf8(String.format(" * $i = ${factor(i)}\n"))
-        }
-      }
-
-      private fun factor(n: Int): String {
-        for (i in 2 until n) {
-          val x = n / i
-          if (x * i == n) return "${factor(x)} × $i"
-        }
-        return n.toString()
-      }
-    }
-
-    val request = Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(requestBody)
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
-  }
-}
-
-fun main() {
-  PostStreaming().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt
deleted file mode 100644
index d77fda90f8..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/PostString.kt
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.MediaType.Companion.toMediaType
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import okhttp3.RequestBody.Companion.toRequestBody
-import java.io.IOException
-
-class PostString {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val postBody = """
-        |Releases
-        |--------
-        |
-        | * _1.0_ May 6, 2013
-        | * _1.1_ June 15, 2013
-        | * _1.2_ August 11, 2013
-        |""".trimMargin()
-
-    val request = Request.Builder()
-        .url("https://api.github.com/markdown/raw")
-        .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      println(response.body!!.string())
-    }
-  }
-
-  companion object {
-    val MEDIA_TYPE_MARKDOWN = "text/x-markdown; charset=utf-8".toMediaType()
-  }
-}
-
-fun main() {
-  PostString().run()
-}
diff --git a/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt b/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt
deleted file mode 100644
index d5e0634d17..0000000000
--- a/samples/guide/src/main/java/okhttp3/recipes/kt/SynchronousGet.kt
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (C) 2014 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.recipes.kt
-
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.io.IOException
-
-class SynchronousGet {
-  private val client = OkHttpClient()
-
-  fun run() {
-    val request = Request.Builder()
-        .url("https://publicobject.com/helloworld.txt")
-        .build()
-
-    client.newCall(request).execute().use { response ->
-      if (!response.isSuccessful) throw IOException("Unexpected code $response")
-
-      for ((name, value) in response.headers) {
-        println("$name: $value")
-      }
-
-      println(response.body!!.string())
-    }
-  }
-}
-
-fun main() {
-  SynchronousGet().run()
-}
diff --git a/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt b/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt
deleted file mode 100644
index 21c932c464..0000000000
--- a/samples/guide/src/test/kotlin/okhttp3/AllMainsTest.kt
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2019 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3
-
-import org.junit.Ignore
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.junit.runners.Parameterized
-import java.io.File
-import java.lang.reflect.InvocationTargetException
-
-@RunWith(Parameterized::class)
-@Ignore
-class AllMainsTest(val className: String) {
-  @Test
-  fun runMain() {
-    val mainMethod = Class.forName(className).methods.find { it.name == "main" }
-    try {
-      mainMethod?.invoke(null, arrayOf<String>())
-    } catch (ite: InvocationTargetException) {
-      if (!expectedFailure(className, ite.cause!!)) {
-        throw ite.cause!!
-      }
-    }
-  }
-
-  private fun expectedFailure(className: String, cause: Throwable): Boolean {
-    return when (className) {
-      "okhttp3.recipes.CheckHandshake" -> true // by design
-      "okhttp3.recipes.RequestBodyCompression" -> true // expired token
-      else -> false
-    }
-  }
-
-  companion object {
-    private val prefix = if (File("samples").exists()) "" else "../../"
-
-    @JvmStatic
-    @Parameterized.Parameters(name = "{0}")
-    fun data(): List<String> {
-      val mainFiles = mainFiles()
-      return mainFiles.map {
-        it.path.substring("$prefix/samples/guide/src/main/java".length, it.path.length - 5)
-            .replace('/', '.')
-      }.sorted()
-    }
-
-    private fun mainFiles(): List<File> {
-      return File("$prefix/samples/guide/src/main/java/okhttp3").listFiles()?.flatMap {
-        it?.listFiles()?.toList().orEmpty()
-      }.orEmpty()
-    }
-  }
-}
diff --git a/samples/simple-client/build.gradle b/samples/simple-client/build.gradle
deleted file mode 100644
index f47e38b46c..0000000000
--- a/samples/simple-client/build.gradle
+++ /dev/null
@@ -1,4 +0,0 @@
-dependencies {
-  implementation project(':okhttp')
-  implementation deps.moshi
-}
diff --git a/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java b/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
deleted file mode 100644
index cfd8632cb8..0000000000
--- a/samples/simple-client/src/main/java/okhttp3/sample/OkHttpContributors.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package okhttp3.sample;
-
-import com.squareup.moshi.JsonAdapter;
-import com.squareup.moshi.Moshi;
-import com.squareup.moshi.Types;
-import java.util.Collections;
-import java.util.List;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.ResponseBody;
-
-public class OkHttpContributors {
-  private static final String ENDPOINT = "https://api.github.com/repos/square/okhttp/contributors";
-  private static final Moshi MOSHI = new Moshi.Builder().build();
-  private static final JsonAdapter<List<Contributor>> CONTRIBUTORS_JSON_ADAPTER = MOSHI.adapter(
-      Types.newParameterizedType(List.class, Contributor.class));
-
-  static class Contributor {
-    String login;
-    int contributions;
-  }
-
-  public static void main(String... args) throws Exception {
-    OkHttpClient client = new OkHttpClient();
-
-    // Create request for remote resource.
-    Request request = new Request.Builder()
-        .url(ENDPOINT)
-        .build();
-
-    // Execute the request and retrieve the response.
-    try (Response response = client.newCall(request).execute()) {
-      // Deserialize HTTP response to concrete type.
-      ResponseBody body = response.body();
-      List<Contributor> contributors = CONTRIBUTORS_JSON_ADAPTER.fromJson(body.source());
-
-      // Sort list by the most contributions.
-      Collections.sort(contributors, (c1, c2) -> c2.contributions - c1.contributions);
-
-      // Output list of contributors.
-      for (Contributor contributor : contributors) {
-        System.out.println(contributor.login + ": " + contributor.contributions);
-      }
-    }
-  }
-
-  private OkHttpContributors() {
-    // No instances.
-  }
-}
diff --git a/samples/slack/build.gradle b/samples/slack/build.gradle
deleted file mode 100644
index b47f85b5a4..0000000000
--- a/samples/slack/build.gradle
+++ /dev/null
@@ -1,4 +0,0 @@
-dependencies {
-  implementation project(':mockwebserver')
-  implementation deps.moshi
-}
diff --git a/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java b/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java
deleted file mode 100644
index 9a6869d2fb..0000000000
--- a/samples/slack/src/main/java/okhttp3/slack/OAuthSession.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.slack;
-
-/** Authorization for an application to make Slack API calls on behalf of a user. */
-@SuppressWarnings("checkstyle:membername")
-public final class OAuthSession {
-  public final boolean ok;
-  public final String access_token;
-  public final String scope;
-  public final String user_id;
-  public final String team_name;
-  public final String team_id;
-
-  public OAuthSession(
-      boolean ok, String accessToken, String scope, String userId, String teamName, String teamId) {
-    this.ok = ok;
-    this.access_token = accessToken;
-    this.scope = scope;
-    this.user_id = userId;
-    this.team_name = teamName;
-    this.team_id = teamId;
-  }
-
-  @Override public String toString() {
-    return String.format("(ok=%s, access_token=%s, scope=%s, user_id=%s, team_name=%s, team_id=%s)",
-        ok, access_token, scope, user_id, team_name, team_id);
-  }
-}
diff --git a/samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java b/samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java
deleted file mode 100644
index c0ad139aed..0000000000
--- a/samples/slack/src/main/java/okhttp3/slack/OAuthSessionFactory.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.slack;
-
-import java.io.Closeable;
-import java.io.IOException;
-import java.security.SecureRandom;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import okhttp3.HttpUrl;
-import okhttp3.mockwebserver.Dispatcher;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okio.ByteString;
-
-/**
- * Runs a MockWebServer on localhost and uses it as the backend to receive an OAuth session.
- *
- * <p>Clients should call {@link #start}, {@link #newAuthorizeUrl} and {@link #close} in that order.
- * Clients may request multiple sessions.
- */
-public final class OAuthSessionFactory extends Dispatcher implements Closeable {
-  private final SecureRandom secureRandom = new SecureRandom();
-
-  private final SlackApi slackApi;
-  private MockWebServer mockWebServer;
-
-  /** Guarded by this. */
-  private Map<ByteString, Listener> listeners = new LinkedHashMap<>();
-
-  public OAuthSessionFactory(SlackApi slackApi) {
-    this.slackApi = slackApi;
-  }
-
-  public void start() throws Exception {
-    if (mockWebServer != null) throw new IllegalStateException();
-
-    mockWebServer = new MockWebServer();
-    mockWebServer.setDispatcher(this);
-    mockWebServer.start(slackApi.port);
-  }
-
-  public HttpUrl newAuthorizeUrl(String scopes, String team, Listener listener) {
-    if (mockWebServer == null) throw new IllegalStateException();
-
-    ByteString state = randomToken();
-    synchronized (this) {
-      listeners.put(state, listener);
-    }
-
-    return slackApi.authorizeUrl(scopes, redirectUrl(), state, team);
-  }
-
-  private ByteString randomToken() {
-    byte[] bytes = new byte[16];
-    secureRandom.nextBytes(bytes);
-    return ByteString.of(bytes);
-  }
-
-  private HttpUrl redirectUrl() {
-    return mockWebServer.url("/oauth/");
-  }
-
-  /** When the browser hits the redirect URL, use the provided code to ask Slack for a session. */
-  @Override public MockResponse dispatch(RecordedRequest request) {
-    HttpUrl requestUrl = mockWebServer.url(request.getPath());
-    String code = requestUrl.queryParameter("code");
-    String stateString = requestUrl.queryParameter("state");
-    ByteString state = stateString != null ? ByteString.decodeBase64(stateString) : null;
-
-    Listener listener;
-    synchronized (this) {
-      listener = listeners.get(state);
-    }
-
-    if (code == null || listener == null) {
-      return new MockResponse()
-          .setResponseCode(404)
-          .setBody("unexpected request");
-    }
-
-    try {
-      OAuthSession session = slackApi.exchangeCode(code, redirectUrl());
-      listener.sessionGranted(session);
-    } catch (IOException e) {
-      return new MockResponse()
-          .setResponseCode(400)
-          .setBody("code exchange failed: " + e.getMessage());
-    }
-
-    synchronized (this) {
-      listeners.remove(state);
-    }
-
-    // Success!
-    return new MockResponse()
-        .setResponseCode(302)
-        .addHeader("Location", "https://twitter.com/CuteEmergency/status/789457462864863232");
-  }
-
-  public interface Listener {
-    void sessionGranted(OAuthSession session);
-  }
-
-  @Override public void close() {
-    if (mockWebServer == null) throw new IllegalStateException();
-    try {
-      mockWebServer.close();
-    } catch (IOException ignored) {
-    }
-  }
-}
diff --git a/samples/slack/src/main/java/okhttp3/slack/RtmSession.java b/samples/slack/src/main/java/okhttp3/slack/RtmSession.java
deleted file mode 100644
index b5802ef4ad..0000000000
--- a/samples/slack/src/main/java/okhttp3/slack/RtmSession.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.slack;
-
-import java.io.Closeable;
-import java.io.IOException;
-import okhttp3.WebSocket;
-import okhttp3.Response;
-import okhttp3.WebSocketListener;
-
-/** A realtime messaging session. */
-public final class RtmSession extends WebSocketListener implements Closeable {
-  private final SlackApi slackApi;
-
-  /** Guarded by this. */
-  private WebSocket webSocket;
-
-  public RtmSession(SlackApi slackApi) {
-    this.slackApi = slackApi;
-  }
-
-  public void open(String accessToken) throws IOException {
-    if (webSocket != null) throw new IllegalStateException();
-
-    RtmStartResponse rtmStartResponse = slackApi.rtmStart(accessToken);
-    webSocket = slackApi.rtm(rtmStartResponse.url, this);
-  }
-
-  // TODO(jwilson): can I read the response body? Do I have to?
-  //                the body from slack is a 0-byte-buffer
-  @Override public synchronized void onOpen(WebSocket webSocket, Response response) {
-    System.out.println("onOpen: " + response);
-  }
-
-  // TOOD(jwilson): decode incoming messages and dispatch them somewhere.
-  @Override public void onMessage(WebSocket webSocket, String text) {
-    System.out.println("onMessage: " + text);
-  }
-
-  @Override public void onClosing(WebSocket webSocket, int code, String reason) {
-    webSocket.close(1000, null);
-    System.out.println("onClose (" + code + "): " + reason);
-  }
-
-  @Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {
-    // TODO(jwilson): can I read the response body? Do I have to?
-    System.out.println("onFailure " + response);
-  }
-
-  @Override public void close() throws IOException {
-    if (webSocket == null) return;
-
-    WebSocket webSocket;
-    synchronized (this) {
-      webSocket = this.webSocket;
-    }
-
-    if (webSocket != null) {
-      webSocket.close(1000, "bye");
-    }
-  }
-}
diff --git a/samples/slack/src/main/java/okhttp3/slack/RtmStartResponse.java b/samples/slack/src/main/java/okhttp3/slack/RtmStartResponse.java
deleted file mode 100644
index b19fff6256..0000000000
--- a/samples/slack/src/main/java/okhttp3/slack/RtmStartResponse.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.slack;
-
-import java.util.List;
-import okhttp3.HttpUrl;
-
-/** See https://api.slack.com/methods/rtm.start. */
-public final class RtmStartResponse {
-  HttpUrl url;
-  Object self;
-  Object team;
-  List<Object> users;
-  List<Object> channels;
-  List<Object> groups;
-  List<Object> mpims;
-  List<Object> ims;
-  List<Object> bots;
-}
diff --git a/samples/slack/src/main/java/okhttp3/slack/SlackApi.java b/samples/slack/src/main/java/okhttp3/slack/SlackApi.java
deleted file mode 100644
index 4ab8565942..0000000000
--- a/samples/slack/src/main/java/okhttp3/slack/SlackApi.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.slack;
-
-import com.squareup.moshi.FromJson;
-import com.squareup.moshi.JsonAdapter;
-import com.squareup.moshi.Moshi;
-import com.squareup.moshi.ToJson;
-import java.io.IOException;
-import okhttp3.Call;
-import okhttp3.HttpUrl;
-import okhttp3.WebSocket;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.WebSocketListener;
-import okio.ByteString;
-
-/**
- * API access to the <a href="https://api.slack.com/apps">Slack API</a> as an application. One
- * instance of this class may operate without a user, or on behalf of many users. Use the Slack API
- * dashboard to create a client ID and secret for this application.
- *
- * <p>You must configure your Slack API OAuth and Permissions page with a localhost URL like {@code
- * http://localhost:53203/oauth/}, passing the same port to this class’ constructor.
- */
-public final class SlackApi {
-  private final HttpUrl baseUrl = HttpUrl.get("https://slack.com/api/");
-  private final OkHttpClient httpClient;
-  private final Moshi moshi;
-
-  public final String clientId;
-  public final String clientSecret;
-  public final int port;
-
-  public SlackApi(String clientId, String clientSecret, int port) {
-    this.httpClient = new OkHttpClient.Builder()
-        .build();
-    this.moshi = new Moshi.Builder()
-        .add(new SlackJsonAdapters())
-        .build();
-    this.clientId = clientId;
-    this.clientSecret = clientSecret;
-    this.port = port;
-  }
-
-  /** See https://api.slack.com/docs/oauth. */
-  public HttpUrl authorizeUrl(String scopes, HttpUrl redirectUrl, ByteString state, String team) {
-    HttpUrl.Builder builder = baseUrl.newBuilder("/oauth/authorize")
-        .addQueryParameter("client_id", clientId)
-        .addQueryParameter("scope", scopes)
-        .addQueryParameter("redirect_uri", redirectUrl.toString())
-        .addQueryParameter("state", state.base64());
-
-    if (team != null) {
-      builder.addQueryParameter("team", team);
-    }
-
-    return builder.build();
-  }
-
-  /** See https://api.slack.com/methods/oauth.access. */
-  public OAuthSession exchangeCode(String code, HttpUrl redirectUrl) throws IOException {
-    HttpUrl url = baseUrl.newBuilder("oauth.access")
-        .addQueryParameter("client_id", clientId)
-        .addQueryParameter("client_secret", clientSecret)
-        .addQueryParameter("code", code)
-        .addQueryParameter("redirect_uri", redirectUrl.toString())
-        .build();
-    Request request = new Request.Builder()
-        .url(url)
-        .build();
-    Call call = httpClient.newCall(request);
-    try (Response response = call.execute()) {
-      JsonAdapter<OAuthSession> jsonAdapter = moshi.adapter(OAuthSession.class);
-      return jsonAdapter.fromJson(response.body().source());
-    }
-  }
-
-  /** See https://api.slack.com/methods/rtm.start. */
-  public RtmStartResponse rtmStart(String accessToken) throws IOException {
-    HttpUrl url = baseUrl.newBuilder("rtm.start")
-        .addQueryParameter("token", accessToken)
-        .build();
-    Request request = new Request.Builder()
-        .url(url)
-        .build();
-    Call call = httpClient.newCall(request);
-    try (Response response = call.execute()) {
-      JsonAdapter<RtmStartResponse> jsonAdapter = moshi.adapter(RtmStartResponse.class);
-      return jsonAdapter.fromJson(response.body().source());
-    }
-  }
-
-  /** See https://api.slack.com/rtm. */
-  public WebSocket rtm(HttpUrl url, WebSocketListener listener) {
-    return httpClient.newWebSocket(new Request.Builder()
-        .url(url)
-        .build(), listener);
-  }
-
-  static final class SlackJsonAdapters {
-    @ToJson String urlToJson(HttpUrl httpUrl) {
-      return httpUrl.toString();
-    }
-
-    @FromJson HttpUrl urlFromJson(String urlString) {
-      if (urlString.startsWith("wss:")) urlString = "https:" + urlString.substring(4);
-      if (urlString.startsWith("ws:")) urlString = "http:" + urlString.substring(3);
-      return HttpUrl.get(urlString);
-    }
-  }
-}
diff --git a/samples/slack/src/main/java/okhttp3/slack/SlackClient.java b/samples/slack/src/main/java/okhttp3/slack/SlackClient.java
deleted file mode 100644
index 508a5fd467..0000000000
--- a/samples/slack/src/main/java/okhttp3/slack/SlackClient.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Copyright (C) 2016 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.slack;
-
-import java.io.IOException;
-import java.io.InterruptedIOException;
-import okhttp3.HttpUrl;
-import okio.Timeout;
-
-/** A connection to Slack as a single user. */
-public final class SlackClient {
-  private final SlackApi slackApi;
-  private OAuthSessionFactory sessionFactory;
-
-  /** Guarded by this. */
-  private OAuthSession session;
-
-  public SlackClient(SlackApi slackApi) {
-    this.slackApi = slackApi;
-  }
-
-  /** Shows a browser URL to authorize this app to act as this user. */
-  public void requestOauthSession(String scopes, String team) throws Exception {
-    if (sessionFactory == null) {
-      sessionFactory = new OAuthSessionFactory(slackApi);
-      sessionFactory.start();
-    }
-
-    HttpUrl authorizeUrl = sessionFactory.newAuthorizeUrl(scopes, team, session -> {
-      initOauthSession(session);
-      System.out.printf("session granted: %s\n", session);
-    });
-
-    System.out.printf("open this URL in a browser: %s\n", authorizeUrl);
-  }
-
-  /** Set the OAuth session for this client. */
-  public synchronized void initOauthSession(OAuthSession session) {
-    this.session = session;
-    this.notifyAll();
-  }
-
-  /** Waits for an OAuth session for this client to be set. */
-  public synchronized void awaitAccessToken(Timeout timeout) throws InterruptedIOException {
-    while (session == null) {
-      timeout.waitUntilNotified(this);
-    }
-  }
-
-  /** Starts a real time messaging session. */
-  public void startRtm() throws IOException {
-    String accessToken;
-    synchronized (this) {
-      accessToken = session.access_token;
-    }
-
-    RtmSession rtmSession = new RtmSession(slackApi);
-    rtmSession.open(accessToken);
-  }
-
-  public static void main(String... args) throws Exception {
-    String clientId = "0000000000.00000000000";
-    String clientSecret = "00000000000000000000000000000000";
-    int port = 53203;
-    SlackApi slackApi = new SlackApi(clientId, clientSecret, port);
-
-    SlackClient client = new SlackClient(slackApi);
-    String scopes = "channels:history channels:read channels:write chat:write:bot chat:write:user "
-        + "dnd:read dnd:write emoji:read files:read files:write:user groups:history groups:read "
-        + "groups:write im:history im:read im:write mpim:history mpim:read mpim:write pins:read "
-        + "pins:write reactions:read reactions:write search:read stars:read stars:write team:read "
-        + "usergroups:read usergroups:write users:read users:write identify";
-
-    if (true) {
-      client.requestOauthSession(scopes, null);
-    } else {
-      OAuthSession session = new OAuthSession(true,
-          "xoxp-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
-          scopes, "UXXXXXXXX", "My Slack Group", "TXXXXXXXX");
-      client.initOauthSession(session);
-    }
-
-    client.awaitAccessToken(Timeout.NONE);
-    client.startRtm();
-  }
-}
diff --git a/samples/static-server/build.gradle b/samples/static-server/build.gradle
deleted file mode 100644
index 7b03c052c1..0000000000
--- a/samples/static-server/build.gradle
+++ /dev/null
@@ -1,19 +0,0 @@
-apply plugin: 'com.github.johnrengelman.shadow'
-
-tasks.withType(JavaCompile) {
-  options.warnings = false
-}
-
-jar {
-  manifest {
-    attributes 'Main-Class': 'okhttp3.sample.SampleServer'
-  }
-}
-
-dependencies {
-  implementation project(':mockwebserver')
-}
-
-shadowJar {
-  mergeServiceFiles()
-}
diff --git a/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java b/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
deleted file mode 100644
index 88e0251bdb..0000000000
--- a/samples/static-server/src/main/java/okhttp3/sample/SampleServer.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package okhttp3.sample;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.security.GeneralSecurityException;
-import java.security.KeyStore;
-import java.security.SecureRandom;
-import javax.net.ssl.KeyManagerFactory;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.TrustManagerFactory;
-import okhttp3.mockwebserver.Dispatcher;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-import okhttp3.mockwebserver.RecordedRequest;
-import okio.Buffer;
-import okio.Okio;
-
-public class SampleServer extends Dispatcher {
-  private final SSLContext sslContext;
-  private final String root;
-  private final int port;
-
-  public SampleServer(SSLContext sslContext, String root, int port) {
-    this.sslContext = sslContext;
-    this.root = root;
-    this.port = port;
-  }
-
-  public void run() throws IOException {
-    MockWebServer server = new MockWebServer();
-    server.useHttps(sslContext.getSocketFactory(), false);
-    server.setDispatcher(this);
-    server.start(port);
-  }
-
-  @Override public MockResponse dispatch(RecordedRequest request) {
-    String path = request.getPath();
-    try {
-      if (!path.startsWith("/") || path.contains("..")) throw new FileNotFoundException();
-
-      File file = new File(root + path);
-      return file.isDirectory()
-          ? directoryToResponse(path, file)
-          : fileToResponse(path, file);
-    } catch (FileNotFoundException e) {
-      return new MockResponse()
-          .setStatus("HTTP/1.1 404")
-          .addHeader("content-type: text/plain; charset=utf-8")
-          .setBody("NOT FOUND: " + path);
-    } catch (IOException e) {
-      return new MockResponse()
-          .setStatus("HTTP/1.1 500")
-          .addHeader("content-type: text/plain; charset=utf-8")
-          .setBody("SERVER ERROR: " + e);
-    }
-  }
-
-  private MockResponse directoryToResponse(String basePath, File directory) {
-    if (!basePath.endsWith("/")) basePath += "/";
-
-    StringBuilder response = new StringBuilder();
-    response.append(String.format("<html><head><title>%s</title></head><body>", basePath));
-    response.append(String.format("<h1>%s</h1>", basePath));
-    for (String file : directory.list()) {
-      response.append(String.format("<div class='file'><a href='%s'>%s</a></div>",
-          basePath + file, file));
-    }
-    response.append("</body></html>");
-
-    return new MockResponse()
-        .setStatus("HTTP/1.1 200")
-        .addHeader("content-type: text/html; charset=utf-8")
-        .setBody(response.toString());
-  }
-
-  private MockResponse fileToResponse(String path, File file) throws IOException {
-    return new MockResponse()
-        .setStatus("HTTP/1.1 200")
-        .setBody(fileToBytes(file))
-        .addHeader("content-type: " + contentType(path));
-  }
-
-  private Buffer fileToBytes(File file) throws IOException {
-    Buffer result = new Buffer();
-    result.writeAll(Okio.source(file));
-    return result;
-  }
-
-  private String contentType(String path) {
-    if (path.endsWith(".png")) return "image/png";
-    if (path.endsWith(".jpg")) return "image/jpeg";
-    if (path.endsWith(".jpeg")) return "image/jpeg";
-    if (path.endsWith(".gif")) return "image/gif";
-    if (path.endsWith(".html")) return "text/html; charset=utf-8";
-    if (path.endsWith(".txt")) return "text/plain; charset=utf-8";
-    return "application/octet-stream";
-  }
-
-  public static void main(String[] args) throws Exception {
-    if (args.length != 4) {
-      System.out.println("Usage: SampleServer <keystore> <password> <root file> <port>");
-      return;
-    }
-
-    String keystoreFile = args[0];
-    String password = args[1];
-    String root = args[2];
-    int port = Integer.parseInt(args[3]);
-
-    SSLContext sslContext = sslContext(keystoreFile, password);
-    SampleServer server = new SampleServer(sslContext, root, port);
-    server.run();
-  }
-
-  private static SSLContext sslContext(String keystoreFile, String password)
-      throws GeneralSecurityException, IOException {
-    KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
-    try (InputStream in = new FileInputStream(keystoreFile)) {
-      keystore.load(in, password.toCharArray());
-    }
-    KeyManagerFactory keyManagerFactory =
-        KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
-    keyManagerFactory.init(keystore, password.toCharArray());
-
-    TrustManagerFactory trustManagerFactory =
-        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
-    trustManagerFactory.init(keystore);
-
-    SSLContext sslContext = SSLContext.getInstance("TLS");
-    sslContext.init(
-        keyManagerFactory.getKeyManagers(),
-        trustManagerFactory.getTrustManagers(),
-        new SecureRandom());
-
-    return sslContext;
-  }
-}
diff --git a/samples/unixdomainsockets/build.gradle b/samples/unixdomainsockets/build.gradle
deleted file mode 100644
index ea86233a50..0000000000
--- a/samples/unixdomainsockets/build.gradle
+++ /dev/null
@@ -1,5 +0,0 @@
-dependencies {
-  implementation project(':okhttp')
-  implementation project(':mockwebserver')
-  implementation deps.jnrUnixsocket
-}
diff --git a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java
deleted file mode 100644
index f897565f52..0000000000
--- a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/ClientAndServer.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.unixdomainsockets;
-
-import java.io.File;
-import java.util.Collections;
-import okhttp3.OkHttpClient;
-import okhttp3.Protocol;
-import okhttp3.Request;
-import okhttp3.Response;
-import okhttp3.mockwebserver.MockResponse;
-import okhttp3.mockwebserver.MockWebServer;
-
-/**
- * Create UNIX domain sockets for MockWebServer and OkHttp and connect 'em together. Note that we
- * cannot do TLS over domain sockets.
- */
-public class ClientAndServer {
-  public void run() throws Exception {
-    File socketFile = new File("/tmp/ClientAndServer.sock");
-    socketFile.delete(); // Clean up from previous runs.
-
-    MockWebServer server = new MockWebServer();
-    server.setServerSocketFactory(new UnixDomainServerSocketFactory(socketFile));
-    server.setProtocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE));
-    server.enqueue(new MockResponse().setBody("hello"));
-    server.start();
-
-    OkHttpClient client = new OkHttpClient.Builder()
-        .socketFactory(new UnixDomainSocketFactory(socketFile))
-        .protocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE))
-        .build();
-
-    Request request = new Request.Builder()
-        .url("http://publicobject.com/helloworld.txt")
-        .build();
-
-    try (Response response = client.newCall(request).execute()) {
-      System.out.println(response.body().string());
-    }
-
-    server.shutdown();
-    socketFile.delete();
-  }
-
-  public static void main(String... args) throws Exception {
-    new ClientAndServer().run();
-  }
-}
diff --git a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/TunnelingUnixSocket.java b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/TunnelingUnixSocket.java
deleted file mode 100644
index 678e04d4f7..0000000000
--- a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/TunnelingUnixSocket.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.unixdomainsockets;
-
-import java.io.File;
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import jnr.unixsocket.UnixSocket;
-import jnr.unixsocket.UnixSocketAddress;
-import jnr.unixsocket.UnixSocketChannel;
-
-/**
- * Subtype UNIX socket for a higher-fidelity impersonation of TCP sockets. This is named "tunneling"
- * because it assumes the ultimate destination has a hostname and port.
- */
-final class TunnelingUnixSocket extends UnixSocket {
-  private final File path;
-  private InetSocketAddress inetSocketAddress;
-
-  TunnelingUnixSocket(File path, UnixSocketChannel channel) {
-    super(channel);
-    this.path = path;
-  }
-
-  TunnelingUnixSocket(File path, UnixSocketChannel channel, InetSocketAddress address) {
-    this(path, channel);
-    this.inetSocketAddress = address;
-  }
-
-  @Override public void connect(SocketAddress endpoint) throws IOException {
-    this.inetSocketAddress = (InetSocketAddress) endpoint;
-    super.connect(new UnixSocketAddress(path), 0);
-  }
-
-  @Override public void connect(SocketAddress endpoint, int timeout) throws IOException {
-    this.inetSocketAddress = (InetSocketAddress) endpoint;
-    super.connect(new UnixSocketAddress(path), timeout);
-  }
-
-  @Override public InetAddress getInetAddress() {
-    return inetSocketAddress.getAddress();
-  }
-}
diff --git a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/UnixDomainServerSocketFactory.java b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/UnixDomainServerSocketFactory.java
deleted file mode 100644
index a96649e425..0000000000
--- a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/UnixDomainServerSocketFactory.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.unixdomainsockets;
-
-import java.io.File;
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.ServerSocket;
-import java.net.Socket;
-import java.net.SocketAddress;
-import java.net.SocketException;
-import java.nio.channels.ClosedChannelException;
-import javax.net.ServerSocketFactory;
-import jnr.unixsocket.UnixServerSocketChannel;
-import jnr.unixsocket.UnixSocketAddress;
-import jnr.unixsocket.UnixSocketChannel;
-
-/** Impersonate TCP-style ServerSocketFactory over UNIX domain sockets. */
-public final class UnixDomainServerSocketFactory extends ServerSocketFactory {
-  private final File path;
-
-  public UnixDomainServerSocketFactory(File path) {
-    this.path = path;
-  }
-
-  @Override public ServerSocket createServerSocket() throws IOException {
-    return new UnixDomainServerSocket();
-  }
-
-  @Override public ServerSocket createServerSocket(int port) throws IOException {
-    return createServerSocket();
-  }
-
-  @Override public ServerSocket createServerSocket(int port, int backlog) throws IOException {
-    return createServerSocket();
-  }
-
-  @Override public ServerSocket createServerSocket(
-      int port, int backlog, InetAddress inetAddress) throws IOException {
-    return createServerSocket();
-  }
-
-  final class UnixDomainServerSocket extends ServerSocket {
-    private UnixServerSocketChannel serverSocketChannel;
-    private InetSocketAddress endpoint;
-
-    UnixDomainServerSocket() throws IOException {
-    }
-
-    @Override public void bind(SocketAddress endpoint, int backlog) throws IOException {
-      this.endpoint = (InetSocketAddress) endpoint;
-
-      UnixSocketAddress address = new UnixSocketAddress(path);
-      serverSocketChannel = UnixServerSocketChannel.open();
-      serverSocketChannel.configureBlocking(true);
-      serverSocketChannel.socket().bind(address);
-    }
-
-    @Override public int getLocalPort() {
-      return 1; // A white lie. There is no local port.
-    }
-
-    @Override public SocketAddress getLocalSocketAddress() {
-      return endpoint;
-    }
-
-    @Override public Socket accept() throws IOException {
-      try {
-        UnixSocketChannel channel = serverSocketChannel.accept();
-        return new TunnelingUnixSocket(path, channel, endpoint);
-      } catch (ClosedChannelException e) {
-        SocketException exception = new SocketException();
-        exception.initCause(e);
-        throw exception;
-      }
-    }
-
-    @Override public void close() throws IOException {
-      serverSocketChannel.close();
-    }
-  }
-}
diff --git a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/UnixDomainSocketFactory.java b/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/UnixDomainSocketFactory.java
deleted file mode 100644
index fc1c8e05a6..0000000000
--- a/samples/unixdomainsockets/src/main/java/okhttp3/unixdomainsockets/UnixDomainSocketFactory.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2018 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package okhttp3.unixdomainsockets;
-
-import java.io.File;
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Socket;
-import javax.net.SocketFactory;
-import jnr.unixsocket.UnixSocketChannel;
-
-/** Impersonate TCP-style SocketFactory over UNIX domain sockets. */
-public final class UnixDomainSocketFactory extends SocketFactory {
-  private final File path;
-
-  public UnixDomainSocketFactory(File path) {
-    this.path = path;
-  }
-
-  @Override public Socket createSocket() throws IOException {
-    UnixSocketChannel channel = UnixSocketChannel.open();
-    return new TunnelingUnixSocket(path, channel);
-  }
-
-  @Override public Socket createSocket(String host, int port) throws IOException {
-    Socket result = createSocket();
-    result.connect(new InetSocketAddress(host, port));
-    return result;
-  }
-
-  @Override public Socket createSocket(
-      String host, int port, InetAddress localHost, int localPort) throws IOException {
-    return createSocket(host, port);
-  }
-
-  @Override public Socket createSocket(InetAddress host, int port) throws IOException {
-    Socket result = createSocket();
-    result.connect(new InetSocketAddress(host, port));
-    return result;
-  }
-
-  @Override public Socket createSocket(
-      InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException {
-    return createSocket(host, port);
-  }
-}
