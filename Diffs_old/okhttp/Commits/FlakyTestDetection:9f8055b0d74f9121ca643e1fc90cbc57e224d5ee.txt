diff --git a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
index d767ab240b..b3dedd6893 100644
--- a/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/EventListenerTest.java
@@ -25,7 +25,9 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
+import okhttp3.RecordingEventListener.CallFailed;
 import okhttp3.RecordingEventListener.ConnectEnd;
+import okhttp3.RecordingEventListener.ConnectFailed;
 import okhttp3.RecordingEventListener.ConnectStart;
 import okhttp3.RecordingEventListener.ConnectionAcquired;
 import okhttp3.RecordingEventListener.DnsEnd;
@@ -51,6 +53,7 @@
 import org.hamcrest.Matcher;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -114,6 +117,22 @@
     assertEquals(expectedEvents, listener.recordedEventTypes());
   }
 
+  @Test public void canceledCallEventSequence() throws IOException {
+    Call call = client.newCall(new Request.Builder()
+        .url(server.url("/"))
+        .build());
+    call.cancel();
+    try {
+      call.execute();
+      fail();
+    } catch (IOException expected) {
+      assertEquals("Canceled", expected.getMessage());
+    }
+
+    List<String> expectedEvents = Arrays.asList("CallStart", "CallFailed");
+    assertEquals(expectedEvents, listener.recordedEventTypes());
+  }
+
   private void assertSuccessfulEventOrder(Matcher<Response> responseMatcher) throws IOException {
     Call call = client.newCall(new Request.Builder()
         .url(server.url("/"))
@@ -267,7 +286,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertSame(call, dnsEnd.call);
     assertEquals("localhost", dnsEnd.domainName);
     assertEquals(1, dnsEnd.inetAddressList.size());
-    assertNull(dnsEnd.ioe);
   }
 
   @Test public void noDnsLookupOnPooledConnection() throws IOException {
@@ -338,11 +356,9 @@ private void assertBytesReadWritten(RecordingEventListener listener,
 
     listener.removeUpToEvent(DnsStart.class);
 
-    DnsEnd dnsEnd = listener.removeUpToEvent(DnsEnd.class);
-    assertSame(call, dnsEnd.call);
-    assertEquals("fakeurl", dnsEnd.domainName);
-    assertNull(dnsEnd.inetAddressList);
-    assertTrue(dnsEnd.ioe instanceof UnknownHostException);
+    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);
+    assertSame(call, callFailed.call);
+    assertTrue(callFailed.ioe instanceof UnknownHostException);
   }
 
   @Test public void emptyDnsLookup() {
@@ -366,11 +382,9 @@ private void assertBytesReadWritten(RecordingEventListener listener,
 
     listener.removeUpToEvent(DnsStart.class);
 
-    DnsEnd dnsEnd = listener.removeUpToEvent(DnsEnd.class);
-    assertSame(call, dnsEnd.call);
-    assertEquals("fakeurl", dnsEnd.domainName);
-    assertNull(dnsEnd.inetAddressList);
-    assertTrue(dnsEnd.ioe instanceof UnknownHostException);
+    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);
+    assertSame(call, callFailed.call);
+    assertTrue(callFailed.ioe instanceof UnknownHostException);
   }
 
   @Test public void successfulConnect() throws IOException {
@@ -395,7 +409,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertSame(call, connectEnd.call);
     assertEquals(expectedAddress, connectEnd.inetSocketAddress);
     assertEquals(Protocol.HTTP_1_1, connectEnd.protocol);
-    assertNull(connectEnd.ioe);
   }
 
   @Test public void failedConnect() throws UnknownHostException {
@@ -420,11 +433,11 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertEquals(expectedAddress, connectStart.inetSocketAddress);
     assertEquals(Proxy.NO_PROXY, connectStart.proxy);
 
-    ConnectEnd connectEnd = listener.removeUpToEvent(ConnectEnd.class);
-    assertSame(call, connectEnd.call);
-    assertEquals(expectedAddress, connectEnd.inetSocketAddress);
-    assertNull(connectEnd.protocol);
-    assertNotNull(connectEnd.ioe);
+    ConnectFailed connectFailed = listener.removeUpToEvent(ConnectFailed.class);
+    assertSame(call, connectFailed.call);
+    assertEquals(expectedAddress, connectFailed.inetSocketAddress);
+    assertNull(connectFailed.protocol);
+    assertNotNull(connectFailed.ioe);
   }
 
   @Test public void multipleConnectsForSingleCall() throws IOException {
@@ -445,7 +458,7 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     response.body().close();
 
     listener.removeUpToEvent(ConnectStart.class);
-    listener.removeUpToEvent(ConnectEnd.class);
+    listener.removeUpToEvent(ConnectFailed.class);
     listener.removeUpToEvent(ConnectStart.class);
     listener.removeUpToEvent(ConnectEnd.class);
   }
@@ -476,7 +489,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertSame(call, connectEnd.call);
     assertEquals(expectedAddress, connectEnd.inetSocketAddress);
     assertEquals(Protocol.HTTP_1_1, connectEnd.protocol);
-    assertNull(connectEnd.ioe);
   }
 
   @Test public void successfulSocksProxyConnect() throws Exception {
@@ -509,7 +521,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     assertSame(call, connectEnd.call);
     assertEquals(expectedAddress, connectEnd.inetSocketAddress);
     assertEquals(Protocol.HTTP_1_1, connectEnd.protocol);
-    assertNull(connectEnd.ioe);
   }
 
   @Test public void authenticatingTunnelProxyConnect() throws IOException {
@@ -538,7 +549,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
 
     ConnectEnd connectEnd = listener.removeUpToEvent(ConnectEnd.class);
     assertNull(connectEnd.protocol);
-    assertNull(connectEnd.ioe);
 
     listener.removeUpToEvent(ConnectStart.class);
     listener.removeUpToEvent(ConnectEnd.class);
@@ -561,7 +571,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     SecureConnectEnd secureEnd = listener.removeUpToEvent(SecureConnectEnd.class);
     assertSame(call, secureEnd.call);
     assertNotNull(secureEnd.handshake);
-    assertNull(secureEnd.ioe);
   }
 
   @Test public void failedSecureConnect() {
@@ -581,10 +590,9 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     SecureConnectStart secureStart = listener.removeUpToEvent(SecureConnectStart.class);
     assertSame(call, secureStart.call);
 
-    SecureConnectEnd secureEnd = listener.removeUpToEvent(SecureConnectEnd.class);
-    assertSame(call, secureEnd.call);
-    assertNull(secureEnd.handshake);
-    assertNotNull(secureEnd.ioe);
+    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);
+    assertSame(call, callFailed.call);
+    assertNotNull(callFailed.ioe);
   }
 
   @Test public void secureConnectWithTunnel() throws IOException {
@@ -610,7 +618,6 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     SecureConnectEnd secureEnd = listener.removeUpToEvent(SecureConnectEnd.class);
     assertSame(call, secureEnd.call);
     assertNotNull(secureEnd.handshake);
-    assertNull(secureEnd.ioe);
   }
 
   @Test public void multipleSecureConnectsForSingleCall() throws IOException {
@@ -631,7 +638,7 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     response.body().close();
 
     listener.removeUpToEvent(SecureConnectStart.class);
-    listener.removeUpToEvent(SecureConnectEnd.class);
+    listener.removeUpToEvent(ConnectFailed.class);
 
     listener.removeUpToEvent(SecureConnectStart.class);
     listener.removeUpToEvent(SecureConnectEnd.class);
@@ -746,18 +753,21 @@ private void assertBytesReadWritten(RecordingEventListener listener,
     listener.removeUpToEvent(ConnectionAcquired.class);
   }
 
+  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd")
   @Test public void responseBodyFailHttp1OverHttps() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_1_1));
     responseBodyFail(Protocol.HTTP_1_1);
   }
 
+  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd")
   @Test public void responseBodyFailHttp2OverHttps() throws IOException {
     enableTlsWithTunnel(false);
     server.setProtocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1));
     responseBodyFail(Protocol.HTTP_2);
   }
 
+  @Ignore("TODO(jwilson): move callEnd/callFail to follow the responseBodyEnd")
   @Test public void responseBodyFailHttp() throws IOException {
     responseBodyFail(Protocol.HTTP_1_1);
   }
@@ -784,9 +794,8 @@ private void responseBodyFail(Protocol expectedProtocol) throws IOException {
     } catch (IOException expected) {
     }
 
-    ResponseBodyEnd responseBodyEnd = listener.removeUpToEvent(ResponseBodyEnd.class);
-    assertNotNull(responseBodyEnd.ioe);
-    assertThat("response body bytes", responseBodyEnd.bytesRead, lessThan(responseBodySize));
+    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);
+    assertNotNull(callFailed.ioe);
   }
 
   @Test public void requestBodyFailHttp1OverHttps() throws IOException {
@@ -837,8 +846,8 @@ private void requestBodyFail() throws IOException {
     } catch (IOException expected) {
     }
 
-    RequestBodyEnd responseBodyEnd = listener.removeUpToEvent(RequestBodyEnd.class);
-    assertNotNull(responseBodyEnd.ioe);
+    CallFailed callFailed = listener.removeUpToEvent(CallFailed.class);
+    assertNotNull(callFailed.ioe);
   }
 
   @Test public void requestBodySuccessHttp1OverHttps() throws IOException {
diff --git a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
index 9a7d667614..5be182829d 100644
--- a/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
+++ b/okhttp-tests/src/test/java/okhttp3/RecordingEventListener.java
@@ -49,7 +49,7 @@ public void forbidLock(Object lock) {
       event = eventSequence.poll();
     }
     if (event == null) throw new AssertionError();
-    return (T) event;
+    return eventClass.cast(event);
   }
 
   List<String> recordedEventTypes() {
@@ -83,9 +83,8 @@ private void logEvent(CallEvent e) {
     logEvent(new DnsStart(call, domainName));
   }
 
-  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList,
-      IOException ioe) {
-    logEvent(new DnsEnd(call, domainName, inetAddressList, ioe));
+  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {
+    logEvent(new DnsEnd(call, domainName, inetAddressList));
   }
 
   @Override public void connectStart(Call call, InetSocketAddress inetSocketAddress,
@@ -97,13 +96,18 @@ private void logEvent(CallEvent e) {
     logEvent(new SecureConnectStart(call));
   }
 
-  @Override public void secureConnectEnd(Call call, Handshake handshake, IOException ioe) {
-    logEvent(new SecureConnectEnd(call, handshake, ioe));
+  @Override public void secureConnectEnd(Call call, Handshake handshake) {
+    logEvent(new SecureConnectEnd(call, handshake));
   }
 
   @Override public void connectEnd(Call call, InetSocketAddress inetSocketAddress,
-      @Nullable Proxy proxy, Protocol protocol, IOException ioe) {
-    logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol, ioe));
+      @Nullable Proxy proxy, Protocol protocol) {
+    logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol));
+  }
+
+  @Override public void connectFailed(Call call, InetSocketAddress inetSocketAddress,
+      @Nullable Proxy proxy, @Nullable Protocol protocol, @Nullable IOException ioe) {
+    logEvent(new ConnectFailed(call, inetSocketAddress, proxy, protocol, ioe));
   }
 
   @Override public void connectionAcquired(Call call, Connection connection) {
@@ -122,36 +126,40 @@ private void logEvent(CallEvent e) {
     logEvent(new RequestHeadersStart(call));
   }
 
-  @Override public void requestHeadersEnd(Call call, long headerLength, IOException ioe) {
-    logEvent(new RequestHeadersEnd(call, headerLength, ioe));
+  @Override public void requestHeadersEnd(Call call, long headerLength) {
+    logEvent(new RequestHeadersEnd(call, headerLength));
   }
 
   @Override public void requestBodyStart(Call call) {
     logEvent(new RequestBodyStart(call));
   }
 
-  @Override public void requestBodyEnd(Call call, long bytesWritten, IOException ioe) {
-    logEvent(new RequestBodyEnd(call, bytesWritten, ioe));
+  @Override public void requestBodyEnd(Call call, long bytesWritten) {
+    logEvent(new RequestBodyEnd(call, bytesWritten));
   }
 
   @Override public void responseHeadersStart(Call call) {
     logEvent(new ResponseHeadersStart(call));
   }
 
-  @Override public void responseHeadersEnd(Call call, long headerLength, IOException ioe) {
-    logEvent(new ResponseHeadersEnd(call, headerLength, ioe));
+  @Override public void responseHeadersEnd(Call call, long headerLength) {
+    logEvent(new ResponseHeadersEnd(call, headerLength));
   }
 
   @Override public void responseBodyStart(Call call) {
     logEvent(new ResponseBodyStart(call));
   }
 
-  @Override public void responseBodyEnd(Call call, long bytesRead, IOException ioe) {
-    logEvent(new ResponseBodyEnd(call, bytesRead, ioe));
+  @Override public void responseBodyEnd(Call call, long bytesRead) {
+    logEvent(new ResponseBodyEnd(call, bytesRead));
+  }
+
+  @Override public void callEnd(Call call) {
+    logEvent(new CallEnd(call));
   }
 
-  @Override public void callEnd(Call call, IOException ioe) {
-    logEvent(new CallEnd(call, ioe));
+  @Override public void callFailed(Call call, IOException ioe) {
+    logEvent(new CallFailed(call, ioe));
   }
 
   static class CallEvent {
@@ -202,13 +210,11 @@ public String getName() {
   static final class DnsEnd extends CallEvent {
     final String domainName;
     final List<InetAddress> inetAddressList;
-    final IOException ioe;
 
-    DnsEnd(Call call, String domainName, List<InetAddress> inetAddressList, IOException ioe) {
-      super(call, domainName, inetAddressList, ioe);
+    DnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {
+      super(call, domainName, inetAddressList);
       this.domainName = domainName;
       this.inetAddressList = inetAddressList;
-      this.ioe = ioe;
     }
 
     @Nullable @Override public CallEvent closes() {
@@ -230,10 +236,27 @@ public String getName() {
   static final class ConnectEnd extends CallEvent {
     final InetSocketAddress inetSocketAddress;
     final Protocol protocol;
-    final IOException ioe;
     final Proxy proxy;
 
-    ConnectEnd(Call call, InetSocketAddress inetSocketAddress, Proxy proxy, Protocol protocol,
+    ConnectEnd(Call call, InetSocketAddress inetSocketAddress, Proxy proxy, Protocol protocol) {
+      super(call, inetSocketAddress, proxy, protocol);
+      this.inetSocketAddress = inetSocketAddress;
+      this.proxy = proxy;
+      this.protocol = protocol;
+    }
+
+    @Override public CallEvent closes() {
+      return new ConnectStart(call, inetSocketAddress, proxy);
+    }
+  }
+
+  static final class ConnectFailed extends CallEvent {
+    final InetSocketAddress inetSocketAddress;
+    final Protocol protocol;
+    final Proxy proxy;
+    final IOException ioe;
+
+    ConnectFailed(Call call, InetSocketAddress inetSocketAddress, Proxy proxy, Protocol protocol,
         IOException ioe) {
       super(call, inetSocketAddress, proxy, protocol, ioe);
       this.inetSocketAddress = inetSocketAddress;
@@ -255,12 +278,10 @@ public String getName() {
 
   static final class SecureConnectEnd extends CallEvent {
     final Handshake handshake;
-    final IOException ioe;
 
-    SecureConnectEnd(Call call, Handshake handshake, IOException ioe) {
-      super(call, handshake, ioe);
+    SecureConnectEnd(Call call, Handshake handshake) {
+      super(call, handshake);
       this.handshake = handshake;
-      this.ioe = ioe;
     }
 
     @Nullable @Override public CallEvent closes() {
@@ -297,11 +318,8 @@ public String getName() {
   }
 
   static final class CallEnd extends CallEvent {
-    final IOException ioe;
-
-    CallEnd(Call call, IOException ioe) {
-      super(call, ioe);
-      this.ioe = ioe;
+    CallEnd(Call call) {
+      super(call);
     }
 
     @Nullable @Override public CallEvent closes() {
@@ -309,6 +327,15 @@ public String getName() {
     }
   }
 
+  static final class CallFailed extends CallEvent {
+    final IOException ioe;
+
+    CallFailed(Call call, IOException ioe) {
+      super(call, ioe);
+      this.ioe = ioe;
+    }
+  }
+
   static final class RequestHeadersStart extends CallEvent {
     RequestHeadersStart(Call call) {
       super(call);
@@ -316,12 +343,10 @@ public String getName() {
   }
 
   static final class RequestHeadersEnd extends CallEvent {
-    final IOException ioe;
     final long headerLength;
 
-    RequestHeadersEnd(Call call, long headerLength, IOException ioe) {
-      super(call, headerLength, ioe);
-      this.ioe = ioe;
+    RequestHeadersEnd(Call call, long headerLength) {
+      super(call, headerLength);
       this.headerLength = headerLength;
     }
 
@@ -337,12 +362,10 @@ public String getName() {
   }
 
   static final class RequestBodyEnd extends CallEvent {
-    final IOException ioe;
     final long bytesWritten;
 
-    RequestBodyEnd(Call call, long bytesWritten, IOException ioe) {
-      super(call, bytesWritten, ioe);
-      this.ioe = ioe;
+    RequestBodyEnd(Call call, long bytesWritten) {
+      super(call, bytesWritten);
       this.bytesWritten = bytesWritten;
     }
 
@@ -358,12 +381,10 @@ public String getName() {
   }
 
   static final class ResponseHeadersEnd extends CallEvent {
-    final IOException ioe;
     final long headerLength;
 
-    ResponseHeadersEnd(Call call, long headerLength, IOException ioe) {
-      super(call, headerLength, ioe);
-      this.ioe = ioe;
+    ResponseHeadersEnd(Call call, long headerLength) {
+      super(call, headerLength);
       this.headerLength = headerLength;
     }
 
@@ -379,12 +400,10 @@ public String getName() {
   }
 
   static final class ResponseBodyEnd extends CallEvent {
-    final IOException ioe;
     final long bytesRead;
 
-    ResponseBodyEnd(Call call, long bytesRead, IOException ioe) {
-      super(call, bytesRead, ioe);
-      this.ioe = ioe;
+    ResponseBodyEnd(Call call, long bytesRead) {
+      super(call, bytesRead);
       this.bytesRead = bytesRead;
     }
 
diff --git a/okhttp/src/main/java/okhttp3/EventListener.java b/okhttp/src/main/java/okhttp3/EventListener.java
index 1f25074522..2a2e1cebe2 100644
--- a/okhttp/src/main/java/okhttp3/EventListener.java
+++ b/okhttp/src/main/java/okhttp3/EventListener.java
@@ -64,8 +64,8 @@ public EventListener create(Call call) {
    * limits, this call may be executed well before processing the request is able to begin.
    *
    * <p>This will be invoked only once for a single {@link Call}. Retries of different routes
-   * or redirects will be handled within the boundaries of a single callStart and
-   * {@link #callEnd(Call, IOException)} pair.
+   * or redirects will be handled within the boundaries of a single callStart and {@link
+   * #callEnd}/{@link #callFailed} pair.
    */
   public void callStart(Call call) {
   }
@@ -85,16 +85,9 @@ public void dnsStart(Call call, String domainName) {
   /**
    * Invoked immediately after a DNS lookup.
    *
-   * <p>This method is always invoked after {@link #dnsStart(Call, String)}.
-   *
-   * <p>{@code inetAddressList} will be non-null and {@code ioe} will be null in the case of a
-   * successful DNS lookup.
-   *
-   * <p>{@code inetAddressList} will be null and {@code ioe} will be non-null in the case of a
-   * failed DNS lookup.
+   * <p>This method is invoked after {@link #dnsStart}.
    */
-  public void dnsEnd(Call call, String domainName, @Nullable List<InetAddress> inetAddressList,
-      @Nullable IOException ioe) {
+  public void dnsEnd(Call call, String domainName, @Nullable List<InetAddress> inetAddressList) {
   }
 
   /**
@@ -127,34 +120,32 @@ public void secureConnectStart(Call call) {
   /**
    * Invoked immediately after a TLS connection was attempted.
    *
-   * <p>This method is always invoked after {@link #secureConnectStart(Call)}.
-   *
-   * <p>{@code handshake} will be non-null and {@code ioe} will be null in the case of a
-   * successful TLS connection.
-   *
-   * <p>{@code handshake} will be null and {@code ioe} will be non-null in the case of a
-   * failed TLS connection attempt.
+   * <p>This method is invoked after {@link #secureConnectStart}.
    */
-  public void secureConnectEnd(Call call, @Nullable Handshake handshake,
-      @Nullable IOException ioe) {
+  public void secureConnectEnd(Call call, @Nullable Handshake handshake) {
   }
 
   /**
    * Invoked immediately after a socket connection was attempted.
    *
    * <p>If the {@code call} uses HTTPS, this will be invoked after
-   * {@link #secureConnectEnd(Call, Handshake, IOException)}, otherwise it will invoked after
+   * {@link #secureConnectEnd(Call, Handshake)}, otherwise it will invoked after
    * {@link #connectStart(Call, InetSocketAddress, Proxy)}.
-   *
-   * <p>{@code protocol} and {@code proxy} will be non-null and {@code ioe} will be null when
-   * the connection is successfully established.
-   *
-   * <p>{@code protocol} and {@code proxy} will be null and {@code ioe} will be non-null in
-   * the case of a failed connection attempt.
    */
   public void connectEnd(Call call, InetSocketAddress inetSocketAddress,
-      @Nullable Proxy proxy, @Nullable Protocol protocol,
-      @Nullable IOException ioe) {
+      @Nullable Proxy proxy, @Nullable Protocol protocol) {
+  }
+
+  /**
+   * Invoked when a connection attempt fails. This failure is not terminal if further routes are
+   * available and failure recovery is enabled.
+   *
+   * <p>If the {@code call} uses HTTPS, this will be invoked after {@link #secureConnectEnd(Call,
+   * Handshake)}, otherwise it will invoked after {@link #connectStart(Call, InetSocketAddress,
+   * Proxy)}.
+   */
+  public void connectFailed(Call call, InetSocketAddress inetSocketAddress,
+      @Nullable Proxy proxy, @Nullable Protocol protocol, @Nullable IOException ioe) {
   }
 
   /**
@@ -195,9 +186,8 @@ public void requestHeadersStart(Call call) {
    * <p>This method is always invoked after {@link #requestHeadersStart(Call)}.
    *
    * @param headerLength the length in java characters of headers to be written.
-   * @param ioe null if request body was successfully written, non-null otherwise.
    */
-  public void requestHeadersEnd(Call call, long headerLength, @Nullable IOException ioe) {
+  public void requestHeadersEnd(Call call, long headerLength) {
   }
 
   /**
@@ -218,14 +208,9 @@ public void requestBodyStart(Call call) {
    *
    * <p>This method is always invoked after {@link #requestBodyStart(Call)}.
    *
-   * <p>{@code ioe} will be null in the case of a successful attempt to send the body.
-   *
-   * <p>{@code ioe} will be non-null in the case of a failed attempt to send the body.
-   *
    * @param bytesWritten the length in bytes of body written, including partial success.
-   * @param ioe null if request body was successfully written, non-null otherwise.
    */
-  public void requestBodyEnd(Call call, long bytesWritten, @Nullable IOException ioe) {
+  public void requestBodyEnd(Call call, long bytesWritten) {
   }
 
   /**
@@ -246,9 +231,8 @@ public void responseHeadersStart(Call call) {
    * <p>This method is always invoked after {@link #responseHeadersStart(Call)}.
    *
    * @param headerLength the length in bytes of headers read, or -1 if failed to read.
-   * @param ioe null if response headers were successfully received, non-null otherwise.
    */
-  public void responseHeadersEnd(Call call, long headerLength, @Nullable IOException ioe) {
+  public void responseHeadersEnd(Call call, long headerLength) {
   }
 
   /**
@@ -272,9 +256,8 @@ public void responseBodyStart(Call call) {
    * <p>This method is always invoked after {@link #requestBodyStart(Call)}.
    *
    * @param bytesRead the length in bytes of the body read, including partial success.
-   * @param ioe null if response body was successfully received, non-null otherwise.
    */
-  public void responseBodyEnd(Call call, long bytesRead, @Nullable IOException ioe) {
+  public void responseBodyEnd(Call call, long bytesRead) {
   }
 
   /**
@@ -287,7 +270,15 @@ public void responseBodyEnd(Call call, long bytesRead, @Nullable IOException ioe
    *
    * <p>{@code ioe} will be non-null in the case of a failed attempt to execute the call.
    */
-  public void callEnd(Call call, @Nullable IOException ioe) {
+  public void callEnd(Call call) {
+  }
+
+  /**
+   * Invoked when a call fails permanently.
+   *
+   * <p>This method is always invoked after {@link #callStart(Call)}.
+   */
+  public void callFailed(Call call, IOException ioe) {
   }
 
   public interface Factory {
diff --git a/okhttp/src/main/java/okhttp3/RealCall.java b/okhttp/src/main/java/okhttp3/RealCall.java
index ceaad906f7..375cb6e88a 100644
--- a/okhttp/src/main/java/okhttp3/RealCall.java
+++ b/okhttp/src/main/java/okhttp3/RealCall.java
@@ -76,10 +76,10 @@ static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolea
       client.dispatcher().executed(this);
       Response result = getResponseWithInterceptorChain();
       if (result == null) throw new IOException("Canceled");
-      eventListener.callEnd(this, null);
+      eventListener.callEnd(this);
       return result;
     } catch (IOException e) {
-      eventListener.callEnd(this, e);
+      eventListener.callFailed(this, e);
       throw e;
     } finally {
       client.dispatcher().finished(this);
@@ -153,13 +153,13 @@ RealCall get() {
           signalledCallback = true;
           responseCallback.onResponse(RealCall.this, response);
         }
-        eventListener.callEnd(RealCall.this, null);
+        eventListener.callEnd(RealCall.this);
       } catch (IOException e) {
         if (signalledCallback) {
           // Do not signal the callback twice!
           Platform.get().log(INFO, "Callback failure for " + toLoggableString(), e);
         } else {
-          eventListener.callEnd(RealCall.this, e);
+          eventListener.callFailed(RealCall.this, e);
           responseCallback.onFailure(RealCall.this, e);
         }
       } finally {
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
index 148cb2c640..3f72dab950 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RealConnection.java
@@ -158,7 +158,7 @@ public void connect(int connectTimeout, int readTimeout, int writeTimeout,
           connectSocket(connectTimeout, readTimeout, call, eventListener);
         }
         establishProtocol(connectionSpecSelector, call, eventListener);
-        eventListener.connectEnd(call, route.socketAddress(), route.proxy(), protocol, null);
+        eventListener.connectEnd(call, route.socketAddress(), route.proxy(), protocol);
         break;
       } catch (IOException e) {
         closeQuietly(socket);
@@ -171,7 +171,7 @@ public void connect(int connectTimeout, int readTimeout, int writeTimeout,
         protocol = null;
         http2Connection = null;
 
-        eventListener.connectEnd(call, route.socketAddress(), route.proxy(), null, e);
+        eventListener.connectFailed(call, route.socketAddress(), route.proxy(), null, e);
 
         if (routeException == null) {
           routeException = new RouteException(e);
@@ -218,7 +218,7 @@ private void connectTunnel(int connectTimeout, int readTimeout, int writeTimeout
       rawSocket = null;
       sink = null;
       source = null;
-      eventListener.connectEnd(call, route.socketAddress(), route.proxy(), null, null);
+      eventListener.connectEnd(call, route.socketAddress(), route.proxy(), null);
     }
   }
 
@@ -265,13 +265,8 @@ private void establishProtocol(ConnectionSpecSelector connectionSpecSelector, Ca
     }
 
     eventListener.secureConnectStart(call);
-    try {
-      connectTls(connectionSpecSelector);
-      eventListener.secureConnectEnd(call, handshake, null);
-    } catch (IOException ioe) {
-      eventListener.secureConnectEnd(call, null, ioe);
-      throw ioe;
-    }
+    connectTls(connectionSpecSelector);
+    eventListener.secureConnectEnd(call, handshake);
 
     if (protocol == Protocol.HTTP_2) {
       socket.setSoTimeout(0); // HTTP/2 connection timeouts are set per-stream.
diff --git a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
index 9a17852269..40752ce23d 100644
--- a/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
+++ b/okhttp/src/main/java/okhttp3/internal/connection/RouteSelector.java
@@ -182,21 +182,12 @@ private void resetNextInetSocketAddress(Proxy proxy) throws IOException {
       eventListener.dnsStart(call, socketHost);
 
       // Try each address for best behavior in mixed IPv4/IPv6 environments.
-      List<InetAddress> addresses;
-      try {
-        addresses = address.dns().lookup(socketHost);
-      } catch (IOException ioe) {
-        eventListener.dnsEnd(call, socketHost, null, ioe);
-        throw ioe;
-      }
+      List<InetAddress> addresses = address.dns().lookup(socketHost);
       if (addresses.isEmpty()) {
-        UnknownHostException exception = new UnknownHostException(
-            address.dns() + " returned no addresses for " + socketHost);
-        eventListener.dnsEnd(call, socketHost, null, exception);
-        throw exception;
+        throw new UnknownHostException(address.dns() + " returned no addresses for " + socketHost);
       }
 
-      eventListener.dnsEnd(call, socketHost, addresses, null);
+      eventListener.dnsEnd(call, socketHost, addresses);
 
       for (int i = 0, size = addresses.size(); i < size; i++) {
         InetAddress inetAddress = addresses.get(i);
diff --git a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
index c976c69f2a..24413763be 100644
--- a/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
+++ b/okhttp/src/main/java/okhttp3/internal/http/CallServerInterceptor.java
@@ -48,15 +48,8 @@ public CallServerInterceptor(boolean forWebSocket) {
     long sentRequestMillis = System.currentTimeMillis();
 
     realChain.eventListener().requestHeadersStart(realChain.call());
-    try {
-      httpCodec.writeRequestHeaders(request);
-      realChain.eventListener()
-          .requestHeadersEnd(realChain.call(), headerLength(request.headers()), null);
-    } catch (IOException ioe) {
-      realChain.eventListener()
-          .requestHeadersEnd(realChain.call(), headerLength(request.headers()), ioe);
-      throw ioe;
-    }
+    httpCodec.writeRequestHeaders(request);
+    realChain.eventListener().requestHeadersEnd(realChain.call(), headerLength(request.headers()));
 
     Response.Builder responseBuilder = null;
     if (HttpMethod.permitsRequestBody(request.method()) && request.body() != null) {
@@ -65,32 +58,22 @@ public CallServerInterceptor(boolean forWebSocket) {
       // what we did get (such as a 4xx response) without ever transmitting the request body.
       if ("100-continue".equalsIgnoreCase(request.header("Expect"))) {
         httpCodec.flushRequest();
-        try {
-          realChain.eventListener().responseHeadersStart(realChain.call());
-          responseBuilder = httpCodec.readResponseHeaders(true);
-        } catch (IOException ioe) {
-          realChain.eventListener().responseHeadersEnd(realChain.call(), -1, ioe);
-          throw ioe;
-        }
+        realChain.eventListener().responseHeadersStart(realChain.call());
+        responseBuilder = httpCodec.readResponseHeaders(true);
       }
 
       if (responseBuilder == null) {
         // Write the request body if the "Expect: 100-continue" expectation was met.
         realChain.eventListener().requestBodyStart(realChain.call());
-        try {
-          long contentLength = request.body().contentLength();
-          CountingSink requestBodyOut =
-              new CountingSink(httpCodec.createRequestBody(request, contentLength));
-          BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);
-
-          request.body().writeTo(bufferedRequestBody);
-          bufferedRequestBody.close();
-          realChain.eventListener()
-              .requestBodyEnd(realChain.call(), requestBodyOut.successfulCount, null);
-        } catch (IOException ioe) {
-          realChain.eventListener().requestBodyEnd(realChain.call(), -1, ioe);
-          throw ioe;
-        }
+        long contentLength = request.body().contentLength();
+        CountingSink requestBodyOut =
+            new CountingSink(httpCodec.createRequestBody(request, contentLength));
+        BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);
+
+        request.body().writeTo(bufferedRequestBody);
+        bufferedRequestBody.close();
+        realChain.eventListener()
+            .requestBodyEnd(realChain.call(), requestBodyOut.successfulCount);
       } else if (!connection.isMultiplexed()) {
         // If the "Expect: 100-continue" expectation wasn't met, prevent the HTTP/1 connection
         // from being reused. Otherwise we're still obligated to transmit the request body to
@@ -102,13 +85,8 @@ public CallServerInterceptor(boolean forWebSocket) {
     httpCodec.finishRequest();
 
     if (responseBuilder == null) {
-      try {
-        realChain.eventListener().responseHeadersStart(realChain.call());
-        responseBuilder = httpCodec.readResponseHeaders(false);
-      } catch (IOException ioe) {
-        realChain.eventListener().responseHeadersEnd(realChain.call(), -1, ioe);
-        throw ioe;
-      }
+      realChain.eventListener().responseHeadersStart(realChain.call());
+      responseBuilder = httpCodec.readResponseHeaders(false);
     }
 
     Response response = responseBuilder
@@ -119,7 +97,7 @@ public CallServerInterceptor(boolean forWebSocket) {
         .build();
 
     realChain.eventListener()
-        .responseHeadersEnd(realChain.call(), headerLength(response.headers()), null);
+        .responseHeadersEnd(realChain.call(), headerLength(response.headers()));
 
     int code = response.code();
     if (forWebSocket && code == 101) {
diff --git a/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java
index ee5c74f2de..f69aabcfb4 100644
--- a/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http1/Http1Codec.java
@@ -375,7 +375,7 @@ protected final void endOfInput(boolean reuseConnection, IOException e) throws I
 
       state = STATE_CLOSED;
       if (streamAllocation != null) {
-        streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, bytesRead, e);
+        streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, bytesRead);
         streamAllocation.streamFinished(!reuseConnection, Http1Codec.this);
       }
     }
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
index bd4af1fcbb..c4859d5892 100644
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
@@ -223,7 +223,7 @@ public Http2Codec(OkHttpClient client, Interceptor.Chain chain, StreamAllocation
     private void endOfInput(IOException e) {
       if (completed) return;
       completed = true;
-      streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, bytesRead, e);
+      streamAllocation.eventListener.responseBodyEnd(streamAllocation.call, bytesRead);
       streamAllocation.streamFinished(false, Http2Codec.this);
     }
   }
