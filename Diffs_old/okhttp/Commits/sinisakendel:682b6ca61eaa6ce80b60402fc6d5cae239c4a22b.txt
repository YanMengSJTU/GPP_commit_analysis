diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index 61b2cc3d80..ae924e42cd 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -15,61 +15,35 @@
  */
 package com.squareup.okhttp;
 
-import com.squareup.okhttp.internal.Internal;
-import com.squareup.okhttp.internal.RecordingHostnameVerifier;
-import com.squareup.okhttp.internal.RecordingOkAuthenticator;
-import com.squareup.okhttp.internal.SingleInetAddressNetwork;
-import com.squareup.okhttp.internal.SslContextBuilder;
+import com.squareup.okhttp.internal.*;
 import com.squareup.okhttp.mockwebserver.Dispatcher;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.mockwebserver.RecordedRequest;
-import com.squareup.okhttp.mockwebserver.SocketPolicy;
+import com.squareup.okhttp.mockwebserver.*;
+import okio.*;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLPeerUnverifiedException;
+import javax.net.ssl.SSLProtocolException;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.CookieManager;
-import java.net.HttpCookie;
-import java.net.HttpURLConnection;
-import java.net.SocketException;
-import java.net.URL;
+import java.net.*;
 import java.security.cert.Certificate;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.UUID;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLPeerUnverifiedException;
-import javax.net.ssl.SSLProtocolException;
-import okio.Buffer;
-import okio.BufferedSink;
-import okio.BufferedSource;
-import okio.GzipSink;
-import okio.Okio;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
 
 import static com.squareup.okhttp.internal.Internal.logger;
 import static java.lang.Thread.UncaughtExceptionHandler;
 import static java.net.CookiePolicy.ACCEPT_ORIGINAL_SERVER;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 public final class CallTest {
   private MockWebServer server = new MockWebServer();
@@ -471,11 +445,11 @@
         .build();
 
     client.newCall(request).enqueue(new Callback() {
-      @Override public void onFailure(Request request, IOException e) {
+      @Override public void onFailure(Request request, Exception e) {
         fail();
       }
 
-      @Override public void onResponse(Response response) throws IOException {
+      @Override public void onResponse(Response response) throws Exception {
         throw new IOException("a");
       }
     });
@@ -531,11 +505,11 @@
 
     Request request = new Request.Builder().url(server.getUrl("/a")).build();
     client.newCall(request).enqueue(new Callback() {
-      @Override public void onFailure(Request request, IOException e) {
+      @Override public void onFailure(Request request, Exception e) {
         throw new AssertionError();
       }
 
-      @Override public void onResponse(Response response) throws IOException {
+      @Override public void onResponse(Response response) throws Exception {
         InputStream bytes = response.body().byteStream();
         assertEquals('a', bytes.read());
         assertEquals('b', bytes.read());
@@ -1361,12 +1335,12 @@
     Request request = new Request.Builder().url(server.getUrl("/a")).tag("request A").build();
     final Call call = client.newCall(request);
     call.enqueue(new Callback() {
-      @Override public void onFailure(Request request, IOException e) {
+      @Override public void onFailure(Request request, Exception e) {
         failureRef.set(true);
         latch.countDown();
       }
 
-      @Override public void onResponse(Response response) throws IOException {
+      @Override public void onResponse(Response response) throws Exception {
         call.cancel();
         try {
           bodyRef.set(response.body().string());
@@ -1437,11 +1411,11 @@
 
     final BlockingQueue<Response> responseRef = new SynchronousQueue<>();
     client.newCall(request).enqueue(new Callback() {
-      @Override public void onFailure(Request request, IOException e) {
+      @Override public void onFailure(Request request, Exception e) {
         throw new AssertionError();
       }
 
-      @Override public void onResponse(Response response) throws IOException {
+      @Override public void onResponse(Response response) throws Exception {
         try {
           responseRef.put(response);
         } catch (InterruptedException e) {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/MyTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/MyTest.java
new file mode 100644
index 0000000000..e7d15eebc0
--- /dev/null
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/MyTest.java
@@ -0,0 +1,48 @@
+package com.squareup.okhttp;
+
+import org.junit.Test;
+
+/**
+ * Created by SiniÅ¡a on 1.11.2014..
+ */
+public class MyTest {
+
+    @Test
+    public void myTest() throws InterruptedException {
+
+//        new Thread(new Runnable() {
+//            @Override
+//            public void run() {
+//            }
+//        }).start();
+
+
+        OkHttpClient client = new OkHttpClient();
+
+        Request request = new Request.Builder()
+                .url("http://www.google.com")
+                .build();
+
+        Call call = client.newCall(request);
+        call.enqueue(new Callback() {
+            @Override
+            public void onFailure(Request request, Exception e) {
+                System.out.println("error > " + e.getMessage());
+            }
+
+            @Override
+            public void onResponse(Response response) throws Exception {
+                Thread.sleep(2000);
+                System.out.println(response.body().string());
+            }
+        });
+
+Thread.sleep(1000);
+//        call.cancel();
+
+
+        Thread.sleep(10000);
+
+    }
+
+}
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
index 4140b3b2f4..6d36933a0c 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
@@ -15,15 +15,10 @@
  */
 package com.squareup.okhttp;
 
-import java.io.IOException;
 import java.net.URL;
 import java.util.Arrays;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 /**
  * A received response or failure recorded by the response recorder.
@@ -32,9 +27,8 @@
   public final Request request;
   public final Response response;
   public final String body;
-  public final IOException failure;
-
-  RecordedResponse(Request request, Response response, String body, IOException failure) {
+  public final Exception failure;
+  RecordedResponse(Request request, Response response, String body, Exception failure) {
     this.request = request;
     this.response = response;
     this.body = body;
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
index 040c15652f..05fa195983 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
@@ -15,13 +15,13 @@
  */
 package com.squareup.okhttp;
 
-import java.io.IOException;
+import okio.Buffer;
+
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import okio.Buffer;
 
 /**
  * Records received HTTP responses so they can be later retrieved by tests.
@@ -31,12 +31,12 @@
 
   private final List<RecordedResponse> responses = new ArrayList<>();
 
-  @Override public synchronized void onFailure(Request request, IOException e) {
+  @Override public synchronized void onFailure(Request request, Exception e) {
     responses.add(new RecordedResponse(request, null, null, e));
     notifyAll();
   }
 
-  @Override public synchronized void onResponse(Response response) throws IOException {
+  @Override public synchronized void onResponse(Response response) throws Exception {
     Buffer buffer = new Buffer();
     ResponseBody body = response.body();
     body.source().readAll(buffer);
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Call.java b/okhttp/src/main/java/com/squareup/okhttp/Call.java
index 8719fe7856..900f8d5c99 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Call.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java
@@ -21,15 +21,15 @@
 import com.squareup.okhttp.internal.http.HttpMethod;
 import com.squareup.okhttp.internal.http.OkHeaders;
 import com.squareup.okhttp.internal.http.RetryableSink;
+import okio.BufferedSink;
+import okio.BufferedSource;
+
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.ProtocolException;
 import java.net.URL;
-import java.util.logging.Level;
-import okio.BufferedSink;
-import okio.BufferedSource;
+import java.util.concurrent.Future;
 
-import static com.squareup.okhttp.internal.Internal.logger;
 import static com.squareup.okhttp.internal.http.HttpEngine.MAX_REDIRECTS;
 
 /**
@@ -48,6 +48,7 @@
   /** The request; possibly a consequence of redirects or auth headers. */
   private Request request;
   HttpEngine engine;
+  private AsyncCall executedAsyncCall;
 
   protected Call(OkHttpClient client, Request request) {
     // Copy the client. Otherwise changes (socket factory, redirect policy,
@@ -114,7 +115,8 @@ public void enqueue(Callback responseCallback) {
       if (executed) throw new IllegalStateException("Already Executed");
       executed = true;
     }
-    client.getDispatcher().enqueue(new AsyncCall(responseCallback));
+    executedAsyncCall = new AsyncCall(responseCallback);
+    client.getDispatcher().enqueue(executedAsyncCall);
   }
 
   /**
@@ -124,6 +126,9 @@ public void enqueue(Callback responseCallback) {
   public void cancel() {
     canceled = true;
     if (engine != null) engine.disconnect();
+    if(executedAsyncCall != null && executedAsyncCall.future()  != null) {
+      executedAsyncCall.future().cancel(true);
+    }
   }
 
   public boolean isCanceled() {
@@ -138,6 +143,14 @@ private AsyncCall(Callback responseCallback) {
       this.responseCallback = responseCallback;
     }
 
+    private Future future;
+    Future future() {
+      return this.future;
+    }
+    void future(Future<?> future) {
+      this.future = future;
+    }
+
     String host() {
       return request.url().getHost();
     }
@@ -159,22 +172,28 @@ Call get() {
       try {
         Response response = getResponse();
         if (canceled) {
-          signalledCallback = true;
+//          signalledCallback = true;
           responseCallback.onFailure(request, new IOException("Canceled"));
         } else {
-          signalledCallback = true;
+//          signalledCallback = true;
           engine.releaseConnection();
           responseCallback.onResponse(response);
         }
-      } catch (IOException e) {
-        if (signalledCallback) {
+      } catch (Exception e) {
+//        if (signalledCallback) {
           // Do not signal the callback twice!
-          logger.log(Level.INFO, "Callback failure for " + toLoggableString(), e);
-        } else {
+//          e.printStackTrace();
+//          logger.log(Level.INFO, "Callback failure for " + toLoggableString(), e);
+//        } else {
           responseCallback.onFailure(request, e);
-        }
+//        }
       } finally {
-        client.getDispatcher().finished(this);
+          try {
+              engine.releaseConnection();
+          } catch (IOException e) {
+              e.printStackTrace();
+          }
+          client.getDispatcher().finished(this);
       }
     }
   }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Callback.java b/okhttp/src/main/java/com/squareup/okhttp/Callback.java
index d86960fe05..206dd85038 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Callback.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Callback.java
@@ -15,8 +15,6 @@
  */
 package com.squareup.okhttp;
 
-import java.io.IOException;
-
 public interface Callback {
   /**
    * Called when the request could not be executed due to cancellation, a
@@ -24,7 +22,7 @@
    * exchange, it is possible that the remote server accepted the request
    * before the failure.
    */
-  void onFailure(Request request, IOException e);
+  void onFailure(Request request, Exception e);
 
   /**
    * Called when the HTTP response was successfully returned by the remote
@@ -38,5 +36,5 @@
    * success: {@code response} may still indicate an unhappy HTTP response
    * code like 404 or 500.
    */
-  void onResponse(Response response) throws IOException;
+  void onResponse(Response response) throws Exception;
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
index 21f60254a2..26d9054ef8 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Dispatcher.java
@@ -21,10 +21,7 @@
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.Iterator;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 
 /**
  * Policy on when async requests are executed.
@@ -107,7 +104,8 @@ public synchronized int getMaxRequestsPerHost() {
   synchronized void enqueue(AsyncCall call) {
     if (runningCalls.size() < maxRequests && runningCallsForHost(call) < maxRequestsPerHost) {
       runningCalls.add(call);
-      getExecutorService().execute(call);
+      Future<?> futureCall = getExecutorService().submit(call);
+      call.future(futureCall);
     } else {
       readyCalls.add(call);
     }
