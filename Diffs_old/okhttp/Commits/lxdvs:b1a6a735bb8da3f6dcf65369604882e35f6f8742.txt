diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java
index 5e5c3dfca3..2be314dca1 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpURLConnectionImpl.java
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.lang.reflect.Field;
 import java.net.HttpRetryException;
 import java.net.HttpURLConnection;
 import java.net.InetSocketAddress;
@@ -58,7 +59,7 @@
  * connection} field on this class for null/non-null to determine of an instance
  * is currently connected to a server.
  */
-public class HttpURLConnectionImpl extends HttpURLConnection implements Policy {
+public class HttpURLConnectionImpl extends HttpURLConnection implements Policy, ReflectMethod {
 
     /** Numeric status code, 307: Temporary Redirect. */
     static final int HTTP_TEMP_REDIRECT = 307;
@@ -600,4 +601,20 @@ public void setFixedLengthStreamingMode(long contentLength) {
         fixedContentLength = contentLength;
         super.fixedContentLength = (int) Math.min(contentLength, Integer.MAX_VALUE);
     }
+    
+    public void setMethodReflect(String method) throws SecurityException, NoSuchFieldException {
+        applyPatchMethodToHttpURLConnection(this, method);
+    }
+    
+    static void applyPatchMethodToHttpURLConnection(HttpURLConnection connection, String method) throws SecurityException, NoSuchFieldException {
+        Field methodField = HttpURLConnection.class.getDeclaredField("method");
+        methodField.setAccessible(true);
+        try {
+            methodField.set(connection, method);
+        } catch (IllegalAccessException e) {
+            throw new IllegalStateException("Unsupported PATCH type", e);
+        }
+    }
+    
+    
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java
index 87aa90735d..cb020feba7 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpsURLConnectionImpl.java
@@ -16,7 +16,6 @@
  */
 package com.squareup.okhttp.internal.http;
 
-import com.squareup.okhttp.OkHttpClient;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -29,13 +28,16 @@
 import java.security.cert.Certificate;
 import java.util.List;
 import java.util.Map;
+
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLPeerUnverifiedException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
-public final class HttpsURLConnectionImpl extends HttpsURLConnection {
+import com.squareup.okhttp.OkHttpClient;
+
+public final class HttpsURLConnectionImpl extends HttpsURLConnection implements ReflectMethod {
 
   /** HttpUrlConnectionDelegate allows reuse of HttpURLConnectionImpl. */
   private final HttpUrlConnectionDelegate delegate;
@@ -362,4 +364,9 @@ public SecureCacheResponse getSecureCacheResponse() {
           : null;
     }
   }
+
+    @Override
+    public void setMethodReflect(String method) throws SecurityException, NoSuchFieldException {
+        HttpURLConnectionImpl.applyPatchMethodToHttpURLConnection(delegate, method);
+    }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/ReflectMethod.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ReflectMethod.java
new file mode 100644
index 0000000000..60ab6bcb1f
--- /dev/null
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/ReflectMethod.java
@@ -0,0 +1,5 @@
+package com.squareup.okhttp.internal.http;
+
+public interface ReflectMethod {
+    public void setMethodReflect(String method) throws SecurityException, NoSuchFieldException;
+}
\ No newline at end of file
