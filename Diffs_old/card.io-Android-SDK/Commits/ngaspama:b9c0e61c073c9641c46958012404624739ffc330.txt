diff --git a/SampleApp/.classpath b/SampleApp/.classpath
new file mode 100644
index 0000000..7bc01d9
--- /dev/null
+++ b/SampleApp/.classpath
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/SampleApp/.project b/SampleApp/.project
new file mode 100644
index 0000000..725a750
--- /dev/null
+++ b/SampleApp/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>MyScanActivity</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/SampleApp/AndroidManifest.xml b/SampleApp/AndroidManifest.xml
index 2499d43..3d3f323 100644
--- a/SampleApp/AndroidManifest.xml
+++ b/SampleApp/AndroidManifest.xml
@@ -1,28 +1,61 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="org.my.scanExample"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8" />
+    package="org.my.scanExample"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="19"
+        android:targetSdkVersion="19" />
+
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.CAMERA" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <uses-permission android:name="android.permission.VIBRATE" />
+    <uses-permission android:name="android.permission.NFC"/>
 
-    <uses-feature android:name="android.hardware.camera" android:required="false" />
-    <uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />
+    <uses-feature
+        android:name="android.hardware.camera"
+        android:required="false" />
+    <uses-feature
+        android:name="android.hardware.camera.autofocus"
+        android:required="false" />
     
-    <application android:label="card.io example" >
-        <activity android:name="MyScanActivity"
-                  android:label="card.io example">
+    <uses-feature android:name="android.hardware.nfc.hce"/>
+    <uses-feature android:name="FEATURE_NFC_HOST_CARD_EMULATION"/>
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="HCE_NFC with card.io" >
+        <activity
+            android:name="MyScanActivity"
+            android:label="HCE_NFC with card.io" >
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        
-        <activity android:name="io.card.payment.CardIOActivity" android:configChanges="keyboardHidden|orientation" />
-    	<activity android:name="io.card.payment.DataEntryActivity" android:screenOrientation="portrait"/>
-            
+        <activity
+            android:name="io.card.payment.CardIOActivity"
+            android:configChanges="keyboardHidden|orientation" />
+        <activity
+            android:name="io.card.payment.DataEntryActivity"
+            android:screenOrientation="portrait" />
+
+        <service
+            android:name=".MyHostApduService"
+            android:exported="true"
+            android:permission="android.permission.BIND_NFC_SERVICE" >
+            <intent-filter>
+                <action android:name="android.nfc.cardemulation.action.HOST_APDU_SERVICE" />
+            </intent-filter>
+
+            <meta-data
+                android:name="android.nfc.cardemulation.host_apdu_service"
+                android:resource="@xml/apduservice" />
+        </service>
     </application>
-</manifest> 
+
+</manifest>
\ No newline at end of file
diff --git a/SampleApp/ic_launcher-web.png b/SampleApp/ic_launcher-web.png
new file mode 100644
index 0000000..26b788f
Binary files /dev/null and b/SampleApp/ic_launcher-web.png differ
diff --git a/SampleApp/project.properties b/SampleApp/project.properties
index 2236f1f..668aca3 100644
--- a/SampleApp/project.properties
+++ b/SampleApp/project.properties
@@ -8,5 +8,5 @@
 # project structure.
 
 # Project target.
-target=android-17
+target=android-19
 proguard.config=proguard.cfg
diff --git a/SampleApp/res/drawable-hdpi/ic_launcher.png b/SampleApp/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000..40786d8
Binary files /dev/null and b/SampleApp/res/drawable-hdpi/ic_launcher.png differ
diff --git a/SampleApp/res/drawable-mdpi/ic_launcher.png b/SampleApp/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000..2d14862
Binary files /dev/null and b/SampleApp/res/drawable-mdpi/ic_launcher.png differ
diff --git a/SampleApp/res/drawable-xhdpi/ic_launcher.png b/SampleApp/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..b68ab62
Binary files /dev/null and b/SampleApp/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/SampleApp/res/drawable-xxhdpi/ic_launcher.png b/SampleApp/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..74666f7
Binary files /dev/null and b/SampleApp/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/SampleApp/res/layout/main.xml b/SampleApp/res/layout/main.xml
index a8e525b..9e44e4d 100644
--- a/SampleApp/res/layout/main.xml
+++ b/SampleApp/res/layout/main.xml
@@ -9,14 +9,30 @@
         android:id="@+id/scanButton"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:text="Scan a credit card with card.io"
+        android:text="@string/scan_with_cardIO"
         android:onClick="onScanPress" />
 
     <TextView
         android:id="@+id/resultTextView"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:layout_weight="0.95"
         android:text="" />
 
+    <Button
+        android:id="@+id/shareButton"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/share_nfc" 
+        android:onClick="shareOnClick"/>
+    
+    <TextView
+        android:id="@+id/nfc_not_supported"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="20dp"
+        android:gravity="center_horizontal"
+        android:text="@string/no_nfc"
+        android:textColor="@android:color/holo_red_dark"
+        android:visibility="gone" />
+
 </LinearLayout>
diff --git a/SampleApp/res/values/strings.xml b/SampleApp/res/values/strings.xml
new file mode 100644
index 0000000..df038b4
--- /dev/null
+++ b/SampleApp/res/values/strings.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="activity_into">Reader mode active</string>
+    <string name="aiddescription">application ID description</string>
+    <string name="scan_with_cardIO">Scan a credit card with card.io</string>
+    <string name="servicedesc">This service encrypts the card data and passes them 
+        						to another Android device via NFC</string>
+    <string name="share_nfc">Exchange via NFC</string>
+    <string name="no_nfc">NFC feature not found on your device, you can\'t Exchange via NFC.</string>
+    <string name="yes">Yes</string>
+    <string name="no">No</string>
+    <string name="alert">Alert</string>
+    <string name="settings">Settings</string>
+    <string name="get_nfc_details">Do you want to receive Credit Card details via NFC ?</string>
+    <string name="transfer_cc_details">Tap a device to transfer/receive Credit Card details.</string>
+    <string name="enable_nfc_msg">Please go to Settings and enable NFC to use this feature</string>
+    
+    <string name="info">Welcome to Credit Card scan and Exchange via NFC. \n\nHow to use.. \n1. Click on \"Scan Your Credit Card\" to scan your credit card. \n2. Click on
+        \"Exchange via NFC\" on both devices and tap to transfer Credit Card details. </string>
+</resources>
diff --git a/SampleApp/res/xml/apduservice.xml b/SampleApp/res/xml/apduservice.xml
new file mode 100644
index 0000000..ecc1933
--- /dev/null
+++ b/SampleApp/res/xml/apduservice.xml
@@ -0,0 +1,12 @@
+<host-apdu-service xmlns:android="http://schemas.android.com/apk/res/android"
+    android:description="@string/servicedesc"
+    android:requireDeviceUnlock="false" >
+
+    <aid-group
+        android:category="payment"
+        android:description="@string/aiddescription" >
+        <aid-filter android:name="F0010203040506" />
+        <aid-filter android:name="F0394148148100" />
+    </aid-group>
+
+</host-apdu-service>
diff --git a/SampleApp/src/com/ngaspama/utils/AESEncryptionHelper.java b/SampleApp/src/com/ngaspama/utils/AESEncryptionHelper.java
new file mode 100644
index 0000000..a39fa23
--- /dev/null
+++ b/SampleApp/src/com/ngaspama/utils/AESEncryptionHelper.java
@@ -0,0 +1,72 @@
+package com.ngaspama.utils;
+
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.NoSuchPaddingException;
+import javax.crypto.spec.SecretKeySpec;
+
+import android.util.Base64;
+
+// Encrypt and Decrypt string data.
+
+public class AESEncryptionHelper {
+	private static byte[] keyBytes = new byte[] { 0x0f, 0x01, 0x07, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
+		0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x00, 0x10, 0x11, 0x12, 0x09, 0x14, 0x15, 0x11, 0x17 };
+
+
+	// encrypt the clearText, base64 encode the cipher text and return it.
+	public static byte[] encrypt(String clearText) {
+		SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
+		Cipher cipher = null;
+		byte[] cipherText = null;
+
+		try {
+			// initialize cipher
+			cipher = Cipher.getInstance("AES");
+			cipher.init(Cipher.ENCRYPT_MODE, keySpec);
+			cipherText = cipher.doFinal(clearText.getBytes());
+		} catch (IllegalBlockSizeException  e) {
+			e.printStackTrace();
+		} catch (BadPaddingException e) {
+			e.printStackTrace();
+		} catch (InvalidKeyException e) {
+			e.printStackTrace();
+		} catch(NoSuchAlgorithmException e) {
+			e.printStackTrace();
+		} catch(NoSuchPaddingException e) {
+			e.printStackTrace();
+		}
+		return Base64.encode(cipherText, 10);
+	}
+
+	//Decrypt the bytes data to clearText..
+	public static String decrypt(byte[] cipherText) {
+		SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
+
+		Cipher cipher = null;
+		byte[] clearText = null;
+
+		try {
+			// initialize cipher
+			cipher = Cipher.getInstance("AES");		
+			cipher.init(Cipher.DECRYPT_MODE, keySpec);
+			clearText = cipher.doFinal(Base64.decode(new String(cipherText), 10));
+		} catch (IllegalBlockSizeException e) {
+			e.printStackTrace();
+		} catch (BadPaddingException e) {
+			e.printStackTrace();
+		} catch (NoSuchPaddingException e) {
+			e.printStackTrace();
+		} catch (NoSuchAlgorithmException  e) {
+			e.printStackTrace();
+		} catch (InvalidKeyException e) {// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+
+		return new String(clearText);
+	}
+}
diff --git a/SampleApp/src/com/ngaspama/utils/AppUtils.java b/SampleApp/src/com/ngaspama/utils/AppUtils.java
new file mode 100644
index 0000000..94ce538
--- /dev/null
+++ b/SampleApp/src/com/ngaspama/utils/AppUtils.java
@@ -0,0 +1,40 @@
+package com.ngaspama.utils;
+
+import android.content.Context;
+import android.nfc.NfcAdapter;
+import android.nfc.NfcManager;
+import android.util.Log;
+
+
+public class AppUtils {
+
+	private static final String TAG = AppUtils.class.getSimpleName();
+	public static final String CARD_KEY = "card_key";
+
+	// Check whether device supports NFC or not
+	public static boolean isNFCSupported(Context appContext) {
+		NfcManager nfcManager = (NfcManager) appContext.getSystemService(Context.NFC_SERVICE);
+		NfcAdapter nfcAdapter = nfcManager.getDefaultAdapter();
+		if (nfcAdapter != null) {
+			Log.i(TAG, "NFC Supproted");
+			return true;
+			// Device compatible for NFC support
+		} 
+		Log.i(TAG, "NFC not Supproted");
+		return false;
+	}
+
+	// Check whether NFC is enabled on the device on not
+	public static boolean isNFCEnabled(Context appContext){
+		NfcManager manager = (NfcManager) appContext.getSystemService(Context.NFC_SERVICE);
+		NfcAdapter adapter = manager.getDefaultAdapter();
+		if (adapter != null && adapter.isEnabled()) {
+			Log.i(TAG, "NFC Supproted and Enabled");
+			return true;
+		} else if(adapter != null && !adapter.isEnabled()) { 
+			Log.i(TAG, "NFC Supproted and Disabled");
+			return false;
+		}
+		return false;
+	}
+}
\ No newline at end of file
diff --git a/SampleApp/src/org/my/scanExample/MyHostApduService.java b/SampleApp/src/org/my/scanExample/MyHostApduService.java
new file mode 100644
index 0000000..1c11788
--- /dev/null
+++ b/SampleApp/src/org/my/scanExample/MyHostApduService.java
@@ -0,0 +1,90 @@
+package org.my.scanExample;
+
+import com.ngaspama.utils.AESEncryptionHelper;
+import com.ngaspama.utils.AppUtils;
+
+import android.content.Intent;
+import android.nfc.cardemulation.HostApduService;
+import android.os.Bundle;
+import android.util.Log;
+
+public class MyHostApduService extends HostApduService {
+
+	final static String TAG = MyHostApduService.class.getSimpleName();
+	private String cardInfo = null;
+	private static byte[] AID = { (byte) 0x00, (byte) 0xA4, (byte) 0x04,
+			(byte) 0x00, (byte) 0x07, (byte) 0xF0, (byte) 0x39, (byte) 0x41,
+			(byte) 0x48, (byte) 0x14, (byte) 0x81, (byte) 0x00, (byte) 0x00 };
+
+	// This function start the service, collect credit card information passed
+	// from MyScanActivity
+	// and pass to the Android Device.
+	@Override
+	public int onStartCommand(Intent intent, int flags, int startId) {
+
+		Log.i(TAG, "HostAdpuService Started!!!");
+
+		Bundle bundle = intent.getExtras();
+		cardInfo = bundle.getString(AppUtils.CARD_KEY);
+
+		// encrypt the card data
+		final byte[] apdu = AESEncryptionHelper.encrypt(cardInfo);
+
+		// This thread is created to perform data transfer so that main thread
+		// can relieved to perform its tasks.
+		new Thread(new Runnable() {
+
+			@Override
+			public void run() {
+
+				Log.i(TAG, "Inside new Thread!");
+
+				// This function send data from MyHostApduService to Android
+				// Device
+				sendResponseApdu(apdu);
+			}
+		}).start();
+
+		// re-deliver intent in case service's process get killed after it
+		// started
+		return START_REDELIVER_INTENT;
+	}
+
+	// This function receive response from Android Device
+	@Override
+	public byte[] processCommandApdu(byte[] commandApdu, Bundle extras) {
+
+		Log.i(TAG, "Inside processCommandApdu!");
+
+		byte CMD = commandApdu[0];
+		String response = null;
+		
+		// check if the device is configured
+		if (CMD == 0x00) {
+			
+			// decrypt the card data 
+			response = AESEncryptionHelper.decrypt(commandApdu);
+
+		}
+
+		Log.i(TAG, response);
+
+		return commandApdu;
+
+	}
+
+	@Override
+	public void onDeactivated(int reason) {
+		/*
+		 * Android will keep forwarding new APDUs from the reader to your
+		 * service, until either:
+		 * 
+		 * 1. The NFC reader sends another "SELECT AID" APDU, which the OS
+		 * resolves to a different service; 2. The NFC link between the NFC
+		 * reader and your device is broken.
+		 */
+		Log.i("CardIOViaHCEDEMO", "Deactivated: " + reason);
+
+	}
+
+}
diff --git a/SampleApp/src/org/my/scanExample/MyScanActivity.java b/SampleApp/src/org/my/scanExample/MyScanActivity.java
index 9a9b528..4ce6529 100644
--- a/SampleApp/src/org/my/scanExample/MyScanActivity.java
+++ b/SampleApp/src/org/my/scanExample/MyScanActivity.java
@@ -2,37 +2,57 @@
 
 import io.card.payment.CardIOActivity;
 import io.card.payment.CreditCard;
-import org.my.scanExample.R;
 import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
 
-public class MyScanActivity extends Activity
-{
-	// You MUST register with card.io to get an app token. Go to https://card.io/apps/new/
-    private static final String MY_CARDIO_APP_TOKEN = "MY APP TOKEN HERE";
+import com.ngaspama.utils.AppUtils;
 
-	final String TAG = getClass().getName();
+public class MyScanActivity extends Activity {
+	// You MUST register with card.io to get an App token. Go to
+	// https://card.io/apps/new/
+	private static final String MY_CARDIO_APP_TOKEN = "ebfa3f0cbee74dec840766fd6b1b7a5e";
+
+	final String TAG = MyScanActivity.class.getSimpleName();
 
 	private Button scanButton;
-	private TextView resultTextView;
+	private TextView resultTextView = null;
+
+	private String cardData = null;
 
-	private int MY_SCAN_REQUEST_CODE = 100; // arbitrary int
+	private int MY_SCAN_REQUEST_CODE = 100; // arbitrary integer
 
 	/** Called when the activity is first created. */
 	@Override
-	public void onCreate(Bundle savedInstanceState)
-	{
+	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.main);
 
-		resultTextView = (TextView)findViewById(R.id.resultTextView);
-		scanButton = (Button)findViewById(R.id.scanButton);
-		
-		resultTextView.setText("card.io library version: " + CardIOActivity.sdkVersion() + "\nBuilt: " + CardIOActivity.sdkBuildDate());
+		final Intent intent = getIntent();
+		final String action = intent.getAction();
+		if (Intent.ACTION_MAIN.equals(action)) {
+			final Intent homeIntent = new Intent(getApplicationContext(),
+					MyScanActivity.class);
+			startActivity(homeIntent);
+			finish();
+		}
+		resultTextView = (TextView) findViewById(R.id.resultTextView);
+		scanButton = (Button) findViewById(R.id.scanButton);
+
+		resultTextView.setText("card.io library version: "
+				+ CardIOActivity.sdkVersion() + "\nBuilt: "
+				+ CardIOActivity.sdkBuildDate());
+
+		if (!AppUtils.isNFCSupported(getApplicationContext())) {
+			// Disable the NFC button if NFC hardware not found.
+			findViewById(R.id.shareButton).setEnabled(false);
+			findViewById(R.id.nfc_not_supported).setVisibility(View.VISIBLE);
+		}
 	}
 
 	@Override
@@ -41,8 +61,7 @@ protected void onResume() {
 
 		if (CardIOActivity.canReadCardWithCamera(this)) {
 			scanButton.setText("Scan a credit card with card.io");
-		}
-		else {
+		} else {
 			scanButton.setText("Enter credit card information");
 		}
 	}
@@ -54,53 +73,110 @@ public void onScanPress(View v) {
 		Intent scanIntent = new Intent(this, CardIOActivity.class);
 
 		// required for authentication with card.io
-		scanIntent.putExtra(CardIOActivity.EXTRA_APP_TOKEN, MY_CARDIO_APP_TOKEN);
+		scanIntent
+				.putExtra(CardIOActivity.EXTRA_APP_TOKEN, MY_CARDIO_APP_TOKEN);
 
 		// customize these values to suit your needs.
-		scanIntent.putExtra(CardIOActivity.EXTRA_REQUIRE_EXPIRY, true); // default: true
-		scanIntent.putExtra(CardIOActivity.EXTRA_REQUIRE_CVV, false); // default: false
-		scanIntent.putExtra(CardIOActivity.EXTRA_REQUIRE_POSTAL_CODE, false); // default: false
+		scanIntent.putExtra(CardIOActivity.EXTRA_REQUIRE_EXPIRY, true); // default:
+																		// true
+		scanIntent.putExtra(CardIOActivity.EXTRA_REQUIRE_CVV, false); // default:
+																		// false
+		scanIntent.putExtra(CardIOActivity.EXTRA_REQUIRE_POSTAL_CODE, false); // default:
+																				// false
 
 		// hides the manual entry button
-		// if set, developers should provide their own manual entry mechanism in the app
-		scanIntent.putExtra(CardIOActivity.EXTRA_SUPPRESS_MANUAL_ENTRY, false); // default: false
+		// if set, developers should provide their own manual entry mechanism in
+		// the app
+		scanIntent.putExtra(CardIOActivity.EXTRA_SUPPRESS_MANUAL_ENTRY, false); // default:
+																				// false
 
-		// MY_SCAN_REQUEST_CODE is arbitrary and is only used within this activity.
+		// MY_SCAN_REQUEST_CODE is arbitrary and is only used within this
+		// activity.
 		startActivityForResult(scanIntent, MY_SCAN_REQUEST_CODE);
 	}
 
-	@Override
-	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-		super.onActivityResult(requestCode, resultCode, data);
-
-		String resultStr;
-		if (data != null && data.hasExtra(CardIOActivity.EXTRA_SCAN_RESULT)) {
-			CreditCard scanResult = data.getParcelableExtra(CardIOActivity.EXTRA_SCAN_RESULT);
+	// Click Lister for NFC Sharing button.
+	public void shareOnClick(View v) {
 
-			// Never log a raw card number. Avoid displaying it, but if necessary use getFormattedCardNumber()
-			resultStr = "Card Number: " + scanResult.getRedactedCardNumber() + "\n";
+		if (!AppUtils.isNFCEnabled(getApplicationContext())) {
+			promptForNFCEnable();
+		} else {
 
-			// Do something with the raw number, e.g.:
-			// myService.setCardNumber( scanResult.cardNumber );
+			// Start Service MyHostApduService and pass card information stored
+			// in
+			// resultStr to the Service.
+			final Intent nfcIntent = new Intent(getApplicationContext(),
+					MyHostApduService.class);
+			if (cardData != null) {
 
-			if (scanResult.isExpiryValid()) {
-				resultStr += "Expiration Date: " + scanResult.expiryMonth + "/" + scanResult.expiryYear + "\n"; 
+				Bundle bundle = new Bundle();
+				bundle.putString(AppUtils.CARD_KEY, cardData);
+				nfcIntent.putExtras(bundle);
 			}
+			startService(nfcIntent);
+		}
+	}
 
-			if (scanResult.cvv != null) { 
-				// Never log or display a CVV
-				resultStr += "CVV has " + scanResult.cvv.length() + " digits.\n";
-			}
+	// Prompt User to enable NFC if disabled.
+	private void promptForNFCEnable() {
+		new AlertDialog.Builder(this)
+				.setTitle(getString(R.string.alert))
+				.setMessage(getString(R.string.enable_nfc_msg))
+				.setPositiveButton(getString(R.string.settings),
+						new DialogInterface.OnClickListener() {
+							@Override
+							public void onClick(DialogInterface arg0, int arg1) {
+								startActivity(new Intent(
+										android.provider.Settings.ACTION_NFC_SETTINGS));
+							}
+						})
+				.setNegativeButton(getString(R.string.no),
+						new DialogInterface.OnClickListener() {
+							@Override
+							public void onClick(DialogInterface arg0, int arg1) {
+
+							}
+						}).show();
+	}
 
-			if (scanResult.postalCode != null) {
-				resultStr += "Postal Code: " + scanResult.postalCode + "\n";
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+		super.onActivityResult(requestCode, resultCode, data);
+
+		if (resultCode == MY_SCAN_REQUEST_CODE) {
+			String resultStr;
+			if (data != null && data.hasExtra(CardIOActivity.EXTRA_SCAN_RESULT)) {
+				CreditCard scanResult = data
+						.getParcelableExtra(CardIOActivity.EXTRA_SCAN_RESULT);
+
+				// Never log a raw card number. Avoid displaying it, but if
+				// necessary use getFormattedCardNumber()
+				resultStr = "Card Number: "
+						+ scanResult.getRedactedCardNumber() + "\n";
+
+				// Do something with the raw number, e.g.:
+				// myService.setCardNumber( scanResult.cardNumber );
+
+				if (scanResult.isExpiryValid()) {
+					resultStr += "Expiration Date: " + scanResult.expiryMonth
+							+ "/" + scanResult.expiryYear + "\n";
+				}
+
+				if (scanResult.cvv != null) {
+					// Never log or display a CVV
+					resultStr += "CVV has " + scanResult.cvv.length()
+							+ " digits.\n";
+				}
+
+				if (scanResult.postalCode != null) {
+					resultStr += "Postal Code: " + scanResult.postalCode + "\n";
+				}
+				cardData = resultStr;
+			} else {
+				resultStr = "Scan was canceled.";
 			}
-		}
-		else {
-			resultStr = "Scan was canceled.";
-		}
-		resultTextView.setText(resultStr);
 
+			resultTextView.setText(resultStr);
+		}
 	}
 }
-
