diff --git a/build.gradle b/build.gradle
index 977b2d77e..3ec5138a6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,5 +1,5 @@
 buildscript {
-    ext.kotlin_version = '1.1.51'
+    ext.kotlin_version = '1.2.30'
     repositories {
         jcenter()
         google()
diff --git a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/TypeConverterDefinition.kt b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/TypeConverterDefinition.kt
index 0f4e698c0..e137e18a6 100644
--- a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/TypeConverterDefinition.kt
+++ b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/TypeConverterDefinition.kt
@@ -10,6 +10,7 @@ import javax.lang.model.element.TypeElement
 import javax.lang.model.type.DeclaredType
 import javax.lang.model.type.MirroredTypesException
 import javax.lang.model.type.TypeMirror
+import javax.tools.Diagnostic
 
 /**
  * Description: Holds data about type converters in order to write them.
@@ -41,22 +42,30 @@ class TypeConverterDefinition(val className: ClassName,
 
         val types = manager.typeUtils
 
-        var typeConverterSuper: DeclaredType? = null
+
         val typeConverter = manager.typeUtils.getDeclaredType(manager.elements
-                .getTypeElement(ClassNames.TYPE_CONVERTER.toString()))
+            .getTypeElement(ClassNames.TYPE_CONVERTER.toString()))
+        var typeConverterSuper: DeclaredType = findSuperType(manager, typeMirror, typeConverter)
+
+        val typeArgs = typeConverterSuper.typeArguments
+        dbTypeName = ClassName.get(typeArgs[0])
+        modelTypeName = ClassName.get(typeArgs[1])
+
+    }
 
+    private fun findSuperType(manager: ProcessorManager, typeMirror: TypeMirror, typeConverter: DeclaredType): DeclaredType {
+        val types = manager.typeUtils
         for (superType in types.directSupertypes(typeMirror)) {
             val erasure = types.erasure(superType)
-            if (types.isAssignable(erasure, typeConverter) || erasure.toString() == typeConverter.toString()) {
-                typeConverterSuper = superType as DeclaredType
+            if (types.isSameType(erasure, typeConverter) || erasure.toString() == typeConverter.toString()) {
+                return superType as DeclaredType
             }
-        }
 
-        if (typeConverterSuper != null) {
-            val typeArgs = typeConverterSuper.typeArguments
-            dbTypeName = ClassName.get(typeArgs[0])
-            modelTypeName = ClassName.get(typeArgs[1])
+            return findSuperType(manager, superType, typeConverter)
         }
-    }
 
+        manager.messager.printMessage(Diagnostic.Kind.ERROR, "TypeConverters must extend the TypeConverter class",
+            types.asElement(typeMirror))
+        throw UnsupportedOperationException()
+    }
 }
