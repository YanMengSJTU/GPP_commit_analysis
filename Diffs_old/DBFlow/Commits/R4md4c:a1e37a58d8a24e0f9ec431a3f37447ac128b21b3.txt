diff --git a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/Classes.java b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/Classes.java
index c11a65820..b7a404da0 100644
--- a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/Classes.java
+++ b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/Classes.java
@@ -39,6 +39,8 @@
 
     public static final String SELECT = SQL + "language.Select";
 
+    public static final String WHERE = SQL + "language.Where";
+
     public static final String FLOW_MANAGER = CONFIG + "FlowManager";
 
     public static final String SQL_UTILS = SQL + "SqlUtils";
diff --git a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/definition/ContentProviderDefinition.java b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/definition/ContentProviderDefinition.java
index 7421c81af..d053b746e 100644
--- a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/definition/ContentProviderDefinition.java
+++ b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/definition/ContentProviderDefinition.java
@@ -92,6 +92,7 @@ protected String getExtendsClass() {
                 Classes.URI_MATCHER,
                 Classes.BASE_CONTENT_PROVIDER,
                 Classes.SELECT,
+                Classes.WHERE,
                 Classes.CONTENT_VALUES,
                 Classes.CONTENT_URIS,
                 Classes.MODEL_ADAPTER,
diff --git a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/model/builder/SqlQueryBuilder.java b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/model/builder/SqlQueryBuilder.java
index d80572f0f..8ccb4d3d4 100644
--- a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/model/builder/SqlQueryBuilder.java
+++ b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/model/builder/SqlQueryBuilder.java
@@ -57,6 +57,10 @@ public SqlQueryBuilder appendWhere() {
         return append("\n.where(selection, selectionArgs)");
     }
 
+    public SqlQueryBuilder appendOrderBy() {
+        return append("\n.orderBy(sortOrder)");
+    }
+
     public SqlQueryBuilder appendPathSegments(ProcessorManager processorManager, String databaseName, String tableName, ContentUri.PathSegment[] pathSegments) {
         TableDefinition tableDefinition = processorManager.getTableDefinition(databaseName, tableName);
         if (tableDefinition == null) {
diff --git a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/writer/provider/QueryWriter.java b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/writer/provider/QueryWriter.java
index 9a9cd6c55..dedd28736 100644
--- a/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/writer/provider/QueryWriter.java
+++ b/DBFlow-Compiler/src/main/java/com/raizlabs/android/dbflow/processor/writer/provider/QueryWriter.java
@@ -41,12 +41,20 @@ public void write(JavaWriter javaWriter) throws IOException {
                                 if (uriDefinition.queryEnabled) {
                                     javaWriter.beginControlFlow("case %1s:", uriDefinition.name);
 
-                                    SqlQueryBuilder select = new SqlQueryBuilder("cursor = ")
+                                    SqlQueryBuilder where = new SqlQueryBuilder("Where where = ")
                                             .appendSelect()
                                             .appendFromTable(contentProviderDefinition.databaseName, tableEndpointDefinition.tableName)
                                             .appendWhere().appendPathSegments(manager, contentProviderDefinition.databaseName,
-                                                    tableEndpointDefinition.tableName, uriDefinition.segments)
-                                            .appendQuery();
+                                                    tableEndpointDefinition.tableName, uriDefinition.segments);
+                                    javaWriter.emitStatement(where.getQuery());
+
+                                    javaWriter.beginControlFlow("if (sortOrder != null && !sortOrder.isEmpty())");
+                                    SqlQueryBuilder orderBy = new SqlQueryBuilder("where = ");
+                                    javaWriter.emitStatement(orderBy.append("where").appendOrderBy().getQuery());
+                                    javaWriter.endControlFlow();
+
+                                    SqlQueryBuilder select = new SqlQueryBuilder("cursor = ")
+                                            .append("where").appendQuery();
                                     javaWriter.emitStatement(select.getQuery());
                                     javaWriter.emitStatement("break");
                                     javaWriter.endControlFlow();
