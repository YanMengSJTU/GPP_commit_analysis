diff --git a/README.md b/README.md
index e727f3ac6..7f4cbf354 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 ![Image](https://github.com/agrosner/DBFlow/blob/develop/dbflow_banner.png?raw=true)
 
-[![JitPack.io](https://img.shields.io/badge/JitPack.io-3.1.0-red.svg?style=flat)](https://jitpack.io/#Raizlabs/DBFlow) [![Android Weekly](http://img.shields.io/badge/Android%20Weekly-%23129-2CB3E5.svg?style=flat)](http://androidweekly.net/issues/issue-129) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-DBFlow-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1134)
+[![JitPack.io](https://img.shields.io/badge/JitPack.io-3.1.1-red.svg?style=flat)](https://jitpack.io/#Raizlabs/DBFlow) [![Android Weekly](http://img.shields.io/badge/Android%20Weekly-%23129-2CB3E5.svg?style=flat)](http://androidweekly.net/issues/issue-129) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-DBFlow-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/1134)
 
 A robust, powerful, and very simple ORM android database library with **annotation processing**.
 
@@ -57,7 +57,7 @@ Add the library to the project-level build.gradle, using the apt plugin to enabl
 
   apply plugin: 'com.neenbedankt.android-apt'
 
-  def dbflow_version = "3.1.0"
+  def dbflow_version = "3.1.1"
   // or dbflow_version = "develop-SNAPSHOT" for grabbing latest dependency in your project on the develop branch
   // or 10-digit short-hash of a specific commit. (Useful for bugs fixed in develop, but not in a release yet)
 
diff --git a/dbflow-core/src/main/java/com/raizlabs/android/dbflow/annotation/ForeignKeyReference.java b/dbflow-core/src/main/java/com/raizlabs/android/dbflow/annotation/ForeignKeyReference.java
index f41612fa3..0b1d23eac 100644
--- a/dbflow-core/src/main/java/com/raizlabs/android/dbflow/annotation/ForeignKeyReference.java
+++ b/dbflow-core/src/main/java/com/raizlabs/android/dbflow/annotation/ForeignKeyReference.java
@@ -6,7 +6,7 @@
 /**
  * Description: Used inside of {@link ForeignKey#references()}, describes the
  * local column name, type, and referencing table column name.
- *
+ * <p></p>
  * Note: the type of the local column must match the
  * column type of the referenced column. By using a field as a Model object,
  * you will need to ensure the same types are used.
diff --git a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/BaseDefinition.java b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/BaseDefinition.java
index a157e02dc..7ceb2324f 100644
--- a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/BaseDefinition.java
+++ b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/BaseDefinition.java
@@ -2,6 +2,7 @@
 
 import com.raizlabs.android.dbflow.processor.model.ProcessorManager;
 import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 
@@ -101,6 +102,9 @@ protected void setOutputClassName(String postfix) {
         if (elementClassName == null) {
             if (elementTypeName instanceof ClassName) {
                 outputName = ((ClassName) elementTypeName).simpleName();
+            } else if(elementTypeName instanceof ParameterizedTypeName) {
+                outputName = ((ParameterizedTypeName) elementTypeName).rawType.simpleName();
+                elementClassName = ((ParameterizedTypeName) elementTypeName).rawType;
             } else {
                 outputName = elementTypeName.toString();
             }
diff --git a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/ColumnDefinition.java b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/ColumnDefinition.java
index 1121ef45e..026ad981d 100644
--- a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/ColumnDefinition.java
+++ b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/ColumnDefinition.java
@@ -356,10 +356,6 @@ public String getColumnAccessString(boolean isModelContainerAdapter, boolean isS
         return columnAccess.getColumnAccessString(elementTypeName, containerKeyName, elementName, ModelUtils.getVariable(isModelContainerAdapter), isModelContainerAdapter, isSqliteStatment);
     }
 
-    /**
-     * @param isModelContainerAdapter
-     * @param codeBuilder
-     */
     public void appendPropertyComparisonAccessStatement(boolean isModelContainerAdapter, CodeBlock.Builder codeBuilder) {
         codeBuilder.add("\nclause.and($T.$L.eq(", tableDefinition.getPropertyClassName(), columnName);
         if (columnAccess instanceof TypeConverterAccess) {
diff --git a/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/ImmediateTransactionManager.kt b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/ImmediateTransactionManager.kt
new file mode 100644
index 000000000..4efaa175d
--- /dev/null
+++ b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/ImmediateTransactionManager.kt
@@ -0,0 +1,39 @@
+package com.raizlabs.android.dbflow.test
+
+import com.raizlabs.android.dbflow.config.DatabaseDefinition
+import com.raizlabs.android.dbflow.runtime.BaseTransactionManager
+import com.raizlabs.android.dbflow.structure.database.transaction.ITransactionQueue
+import com.raizlabs.android.dbflow.structure.database.transaction.Transaction
+
+/**
+ * Description:
+ */
+class ImmediateTransactionManager(databaseDefinition: DatabaseDefinition)
+: BaseTransactionManager(ImmediateTransactionQueue(), databaseDefinition)
+
+
+class ImmediateTransactionQueue : ITransactionQueue {
+
+    override fun add(transaction: Transaction?) {
+        if (transaction != null) {
+            transaction.newBuilder()
+                    .runCallbacksOnSameThread(true)
+                    .build()
+                    .executeSync()
+        }
+    }
+
+    override fun cancel(transaction: Transaction?) {
+
+    }
+
+    override fun startIfNotAlive() {
+    }
+
+    override fun cancel(name: String?) {
+    }
+
+    override fun quit() {
+    }
+
+}
\ No newline at end of file
diff --git a/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinDB.kt b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinDB.kt
index 4ff72b067..fcfbdbb11 100644
--- a/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinDB.kt
+++ b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinDB.kt
@@ -3,7 +3,7 @@ package com.raizlabs.android.dbflow.test.kotlin
 import com.raizlabs.android.dbflow.annotation.Column
 import com.raizlabs.android.dbflow.annotation.PrimaryKey
 import com.raizlabs.android.dbflow.annotation.Table
-import com.raizlabs.android.dbflow.config.FlowManager
+import com.raizlabs.android.dbflow.kotlinextensions.modelAdapter
 import com.raizlabs.android.dbflow.structure.Model
 
 /**
@@ -12,13 +12,13 @@ import com.raizlabs.android.dbflow.structure.Model
 @Table(database = KotlinTestDatabase::class)
 data class Car(@PrimaryKey var id: Int = 0, @Column var name: String? = null) : Model {
 
-    override fun save() = FlowManager.getModelAdapter(javaClass).save(this)
+    override fun save() = modelAdapter<Car>().save(this)
 
-    override fun delete() = FlowManager.getModelAdapter(javaClass).delete(this)
+    override fun delete() = modelAdapter<Car>().delete(this)
 
-    override fun update() = FlowManager.getModelAdapter(javaClass).update(this)
+    override fun update() = modelAdapter<Car>().update(this)
 
-    override fun insert() = FlowManager.getModelAdapter(javaClass).insert(this)
+    override fun insert() = modelAdapter<Car>().insert(this)
 
-    override fun exists() = FlowManager.getModelAdapter(javaClass).exists(this)
+    override fun exists() = modelAdapter<Car>().exists(this)
 }
\ No newline at end of file
diff --git a/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinModel.kt b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinModel.kt
new file mode 100644
index 000000000..66e2f951d
--- /dev/null
+++ b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/KotlinModel.kt
@@ -0,0 +1,16 @@
+package com.raizlabs.android.dbflow.test.kotlin
+
+import com.raizlabs.android.dbflow.annotation.Column
+import com.raizlabs.android.dbflow.annotation.PrimaryKey
+import com.raizlabs.android.dbflow.annotation.Table
+import com.raizlabs.android.dbflow.structure.BaseModel
+
+/**
+ * Description:
+ */
+@Table(database = KotlinDatabase::class)
+class KotlinModel() : BaseModel() {
+    @PrimaryKey var id: Int = 0
+
+    @Column var name: String? = null
+}
\ No newline at end of file
diff --git a/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/QueryExtensionsAsyncTest.kt b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/QueryExtensionsAsyncTest.kt
new file mode 100644
index 000000000..f698e5674
--- /dev/null
+++ b/dbflow-tests/src/test/java/com/raizlabs/android/dbflow/test/kotlin/QueryExtensionsAsyncTest.kt
@@ -0,0 +1,49 @@
+package com.raizlabs.android.dbflow.test.kotlin
+
+import android.os.Build
+import com.raizlabs.android.dbflow.config.DatabaseConfig
+import com.raizlabs.android.dbflow.config.FlowConfig
+import com.raizlabs.android.dbflow.config.FlowManager
+import com.raizlabs.android.dbflow.kotlinextensions.async
+import com.raizlabs.android.dbflow.kotlinextensions.from
+import com.raizlabs.android.dbflow.kotlinextensions.select
+import com.raizlabs.android.dbflow.sql.queriable.AsyncQuery
+import com.raizlabs.android.dbflow.structure.AsyncModel
+import com.raizlabs.android.dbflow.test.BuildConfig
+import com.raizlabs.android.dbflow.test.ImmediateTransactionManager
+import org.junit.Assert.assertTrue
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.RobolectricGradleTestRunner
+import org.robolectric.RuntimeEnvironment
+import org.robolectric.annotation.Config
+
+/**
+ * Description:
+ */
+@RunWith(RobolectricGradleTestRunner::class)
+@Config(constants = BuildConfig::class, sdk = intArrayOf(Build.VERSION_CODES.LOLLIPOP))
+class QueryExtensionsAsyncTest {
+
+    @Before
+    fun setup_test() {
+        FlowManager.init(FlowConfig.Builder(RuntimeEnvironment.application)
+                .addDatabaseConfig(DatabaseConfig.Builder(KotlinDatabase::class.java)
+                        .transactionManagerCreator { ImmediateTransactionManager(it) }
+                        .build())
+                .build())
+    }
+
+    @Test
+    fun test_asyncMethodCall() {
+        val model = KotlinModel().async
+        assertTrue(model is AsyncModel)
+    }
+
+    @Test
+    fun test_asyncQuery() {
+        val query = (select from KotlinModel::class).async
+        assertTrue(query is AsyncQuery)
+    }
+}
\ No newline at end of file
diff --git a/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/ProcessModelTransaction.java b/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/ProcessModelTransaction.java
index 0a6bef765..d84129d7b 100644
--- a/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/ProcessModelTransaction.java
+++ b/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/ProcessModelTransaction.java
@@ -72,7 +72,7 @@ public void execute(DatabaseWrapper databaseWrapper) {
                         processListener.onModelProcessed(i, size, model);
                     } else {
                         final int finalI = i;
-                        Transaction.TRANSACTION_HANDLER.post(new Runnable() {
+                        Transaction.getTransactionHandler().post(new Runnable() {
                             @Override
                             public void run() {
                                 processListener.onModelProcessed(finalI, size, model);
diff --git a/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/QueryTransaction.java b/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/QueryTransaction.java
index 8c18aca74..325b3902e 100644
--- a/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/QueryTransaction.java
+++ b/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/QueryTransaction.java
@@ -84,7 +84,7 @@ public void execute(DatabaseWrapper databaseWrapper) {
             if (runResultCallbacksOnSameThread) {
                 queryResultCallback.onQueryResult(this, cursorResult);
             } else {
-                Transaction.TRANSACTION_HANDLER.post(new Runnable() {
+                Transaction.getTransactionHandler().post(new Runnable() {
                     @Override
                     public void run() {
                         queryResultCallback.onQueryResult(QueryTransaction.this, cursorResult);
@@ -98,7 +98,7 @@ public void run() {
             if (runResultCallbacksOnSameThread) {
                 queryResultListCallback.onListQueryResult(this, resultList);
             } else {
-                Transaction.TRANSACTION_HANDLER.post(new Runnable() {
+                Transaction.getTransactionHandler().post(new Runnable() {
                     @Override
                     public void run() {
                         queryResultListCallback.onListQueryResult(QueryTransaction.this, resultList);
@@ -112,7 +112,7 @@ public void run() {
             if (runResultCallbacksOnSameThread) {
                 queryResultSingleCallback.onSingleQueryResult(this, result);
             } else {
-                Transaction.TRANSACTION_HANDLER.post(new Runnable() {
+                Transaction.getTransactionHandler().post(new Runnable() {
                     @Override
                     public void run() {
                         queryResultSingleCallback.onSingleQueryResult(QueryTransaction.this, result);
diff --git a/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/Transaction.java b/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/Transaction.java
index b941835da..7489a2b43 100644
--- a/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/Transaction.java
+++ b/dbflow/src/main/java/com/raizlabs/android/dbflow/structure/database/transaction/Transaction.java
@@ -5,6 +5,7 @@
 import android.support.annotation.NonNull;
 
 import com.raizlabs.android.dbflow.config.DatabaseDefinition;
+import com.raizlabs.android.dbflow.config.FlowLog;
 import com.raizlabs.android.dbflow.runtime.BaseTransactionManager;
 
 /**
@@ -12,7 +13,7 @@
  * This is a handy class that allows you to wrap up a set of database modification (or queries) into
  * a code block that gets accessed all on the same thread, in the same queue. This can prevent locking
  * and synchronization issues when trying to read and write from the database at the same time.
- * <p>
+ * <p/>
  * To create one, the recommended method is to use the {@link DatabaseDefinition#beginTransactionAsync(ITransaction)}.
  */
 public final class Transaction {
@@ -44,7 +45,14 @@
         void onSuccess(Transaction transaction);
     }
 
-    static final Handler TRANSACTION_HANDLER = new Handler(Looper.getMainLooper());
+    private static Handler TRANSACTION_HANDLER;
+
+    static Handler getTransactionHandler() {
+        if (TRANSACTION_HANDLER == null) {
+            TRANSACTION_HANDLER = new Handler(Looper.getMainLooper());
+        }
+        return TRANSACTION_HANDLER;
+    }
 
 
     final Error errorCallback;
@@ -112,7 +120,7 @@ public void executeSync() {
                 if (runCallbacksOnSameThread) {
                     successCallback.onSuccess(this);
                 } else {
-                    TRANSACTION_HANDLER.post(new Runnable() {
+                    getTransactionHandler().post(new Runnable() {
                         @Override
                         public void run() {
                             successCallback.onSuccess(Transaction.this);
@@ -121,11 +129,12 @@ public void run() {
                 }
             }
         } catch (final Throwable throwable) {
+            FlowLog.logError(throwable);
             if (errorCallback != null) {
                 if (runCallbacksOnSameThread) {
                     errorCallback.onError(this, throwable);
                 } else {
-                    TRANSACTION_HANDLER.post(new Runnable() {
+                    getTransactionHandler().post(new Runnable() {
                         @Override
                         public void run() {
                             errorCallback.onError(Transaction.this, throwable);
@@ -138,6 +147,15 @@ public void run() {
         }
     }
 
+    public Builder newBuilder() {
+        return new Builder(transaction, databaseDefinition)
+                .error(errorCallback)
+                .success(successCallback)
+                .name(name)
+                .shouldRunInTransaction(shouldRunInTransaction)
+                .runCallbacksOnSameThread(runCallbacksOnSameThread);
+    }
+
     /**
      * The main entry point into {@link Transaction}, this provides an easy way to build up transactions.
      */
diff --git a/gradle.properties b/gradle.properties
index a3a741643..7e09b1d3b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-version=3.1.0
+version=3.1.1
 version_code=1
 group=com.raizlabs.android
 
