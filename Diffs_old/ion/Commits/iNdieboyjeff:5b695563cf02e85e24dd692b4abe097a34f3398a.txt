diff --git a/README.md b/README.md
index d69134b7..f93c5f01 100644
--- a/README.md
+++ b/README.md
@@ -378,10 +378,16 @@ dependencies {
 git clone git://github.com/koush/AndroidAsync.git
 git clone git://github.com/koush/ion.git
 cd ion/ion
-ant release install
+ant -Dsdk.dir=$ANDROID_HOME release install
 ```
 Jars are at
  * ion/ion/bin/classes.jar
  * AndroidAsync/AndroidAsync/bin/classes.jar
 
-
+#### Hack in Eclipse
+```
+git clone git://github.com/koush/AndroidAsync.git
+git clone git://github.com/koush/ion.git
+```
+* Import the project from AndroidAsync/AndroidAsync into your workspace
+* Import all the ion projects (ion/ion, ion/ion-test, ion/ion-sample) into your workspace.
diff --git a/ion-sample/AndroidManifest.xml b/ion-sample/AndroidManifest.xml
index fef3c2d1..0a964c5b 100644
--- a/ion-sample/AndroidManifest.xml
+++ b/ion-sample/AndroidManifest.xml
@@ -24,6 +24,9 @@
         <activity
                 android:name=".ProgressBarDownload"
                 android:label="Progress Bar Download"/>
+        <activity
+                android:name=".ProgressBarUpload"
+                android:label="Progress Bar Upload"/>
         <activity
             android:name=".GoogleImageSearch"
             android:label="Google Image Search"/>
diff --git a/ion-sample/res/layout/progress_upload.xml b/ion-sample/res/layout/progress_upload.xml
new file mode 100644
index 00000000..c85b0d48
--- /dev/null
+++ b/ion-sample/res/layout/progress_upload.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:gravity="center"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
+
+    <TextView
+            style="@android:style/TextAppearance.Large"
+            android:layout_gravity="center"
+            android:text="File Upload"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            />
+
+    <ProgressBar
+            android:minHeight="20dp"
+            android:maxHeight="20dp"
+            android:id="@+id/progress"
+            style="?android:attr/progressBarStyleHorizontal"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"/>
+
+    <TextView
+            android:layout_gravity="center"
+            android:id="@+id/upload_count"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            />
+
+    <Button
+            android:layout_gravity="center"
+            android:id="@+id/upload"
+            android:text="Upload"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            />
+</LinearLayout>
\ No newline at end of file
diff --git a/ion-sample/res/layout/samples.xml b/ion-sample/res/layout/samples.xml
index d0d2bc38..09b0bbf3 100644
--- a/ion-sample/res/layout/samples.xml
+++ b/ion-sample/res/layout/samples.xml
@@ -18,6 +18,10 @@
             android:layout_height="wrap_content"
             android:text="Progress Bar Download"
             />
+    <Button android:id="@+id/upload" android:layout_width="240dp"
+            android:layout_height="wrap_content"
+            android:text="Progress Bar Upload"
+            />
     <Button android:id="@+id/image_view" android:layout_width="240dp"
             android:layout_height="wrap_content"
             android:text="ImageView Sample"
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
index b0c36567..9b72179d 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
@@ -69,10 +69,10 @@ public void onProgress(int downloaded, int total) {
                         public void onCompleted(Exception e, File result) {
                             resetDownload();
                             if (e != null) {
-                                Toast.makeText(ProgressBarDownload.this, "Error downloading file", Toast.LENGTH_LONG).show();
+                                Toast.makeText(ProgressBarDownload.this, "Error uploading file", Toast.LENGTH_LONG).show();
                                 return;
                             }
-                            Toast.makeText(ProgressBarDownload.this, "File download complete", Toast.LENGTH_LONG).show();
+                            Toast.makeText(ProgressBarDownload.this, "File upload complete", Toast.LENGTH_LONG).show();
                         }
                     });
             }
@@ -80,7 +80,7 @@ public void onCompleted(Exception e, File result) {
     }
 
     void resetDownload() {
-        // cancel any pending download
+        // cancel any pending upload
         downloading.cancel();
         downloading = null;
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
new file mode 100644
index 00000000..a9660171
--- /dev/null
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
@@ -0,0 +1,104 @@
+package com.koushikdutta.ion.sample;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ProgressCallback;
+
+import java.io.File;
+import java.io.RandomAccessFile;
+
+/**
+ * Created by koush on 5/31/13.
+ */
+public class ProgressBarUpload extends Activity {
+    Button upload;
+    TextView uploadCount;
+    ProgressBar progressBar;
+
+    Future<File> uploading;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Enable global Ion logging
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
+
+        setContentView(R.layout.progress_upload);
+
+        upload = (Button)findViewById(R.id.upload);
+        uploadCount = (TextView)findViewById(R.id.upload_count);
+        progressBar = (ProgressBar)findViewById(R.id.progress);
+
+        upload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (uploading != null && !uploading.isCancelled()) {
+                    resetUpload();
+                    return;
+                }
+
+                File f = getFileStreamPath("largefile");
+                try {
+                    RandomAccessFile rf = new RandomAccessFile(f, "rw");
+                    rf.setLength(1024 * 1024 * 2);
+                } catch (Exception e) {
+                    System.err.println(e);
+                }
+                File echoedFile = getFileStreamPath("echo");
+
+                upload.setText("Cancel");
+                // this is a 180MB zip file to test with
+                uploading = Ion.with(ProgressBarUpload.this, "http://koush.clockworkmod.com/test/echo")
+                // attach the percentage report to a progress bar.
+                // can also attach to a ProgressDialog with progressDialog.
+                .uploadProgressBar(progressBar)
+                // callbacks on progress can happen on the UI thread
+                // via progressHandler. This is useful if you need to update a TextView.
+                // Updates to TextViews MUST happen on the UI thread.
+                .uploadProgressHandler(new ProgressCallback() {
+                    @Override
+                    public void onProgress(int downloaded, int total) {
+                        uploadCount.setText("" + downloaded + " / " + total);
+                    }
+                })
+                // write to a file
+                .setMultipartFile("largefile", f)
+                .write(echoedFile)
+                // run a callback on completion
+                .setCallback(new FutureCallback<File>() {
+                    @Override
+                    public void onCompleted(Exception e, File result) {
+                        resetUpload();
+                        if (e != null) {
+                            Toast.makeText(ProgressBarUpload.this, "Error uploading file", Toast.LENGTH_LONG).show();
+                            return;
+                        }
+                        Toast.makeText(ProgressBarUpload.this, "File upload complete", Toast.LENGTH_LONG).show();
+                    }
+                });
+            }
+        });
+    }
+
+    void resetUpload() {
+        // cancel any pending upload
+        uploading.cancel();
+        uploading = null;
+
+        // reset the ui
+        upload.setText("Upload");
+        uploadCount.setText(null);
+        progressBar.setProgress(0);
+    }
+}
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/Samples.java b/ion-sample/src/com/koushikdutta/ion/sample/Samples.java
index f54db0d1..3a7172f5 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/Samples.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/Samples.java
@@ -40,6 +40,14 @@ public void onClick(View v) {
             }
         });
 
+        Button fileUpload = (Button)findViewById(R.id.upload);
+        fileUpload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, ProgressBarUpload.class));
+            }
+        });
+
         Button googleImageSearch = (Button)findViewById(R.id.google_image_search);
         googleImageSearch.setOnClickListener(new View.OnClickListener() {
             @Override
diff --git a/ion-test/res/.gitignore b/ion-test/res/.gitignore
new file mode 100644
index 00000000..e69de29b
diff --git a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
index 156dfe05..a6e4ab30 100644
--- a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
@@ -66,4 +66,21 @@ public void onCompleted(Exception e, Bitmap result) {
             AsyncServer.getDefault().stop();
         }
     }
+
+    public void testCropping() throws Exception {
+        Bitmap result = Ion.with(getContext())
+        .load("https://raw.github.com/koush/ion/master/ion-test/testdata/exif.jpg")
+        .withBitmap()
+        .resize(1080, 1845)
+        .centerCrop()
+        .asBitmap()
+        .get();
+
+        assertEquals(result.getWidth(), 1080);
+        assertEquals(result.getHeight(), 1845);
+        // pixel should not be clear
+        int pixel = result.getPixel(1079, 1844);
+        System.out.println(String.format("%x", pixel));
+        assertFalse(0 == pixel);
+    }
 }
diff --git a/ion-test/src/com/koushikdutta/ion/test/CustomParserTests.java b/ion-test/src/com/koushikdutta/ion/test/CustomParserTests.java
new file mode 100644
index 00000000..e42f28bc
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/CustomParserTests.java
@@ -0,0 +1,16 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+
+import com.koushikdutta.async.parser.StringParser;
+import com.koushikdutta.ion.Ion;
+
+/**
+ * Created by koush on 12/17/13.
+ */
+public class CustomParserTests extends AndroidTestCase {
+    public void testCustomParser() throws Exception {
+        assertNotNull(Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .as(new StringParser()).get());
+    }
+}
diff --git a/ion/Android.mk b/ion/Android.mk
index 5310f095..49b9fc64 100644
--- a/ion/Android.mk
+++ b/ion/Android.mk
@@ -21,7 +21,7 @@ include $(CLEAR_VARS)
 LOCAL_STATIC_JAVA_LIBRARIES := AndroidAsync gson
 
 LOCAL_MODULE := ion
-LOCAL_SDK_VERSION := 9
+LOCAL_SDK_VERSION := 19
 LOCAL_SRC_FILES := $(call all-java-files-under, src)
 
 include $(BUILD_STATIC_JAVA_LIBRARY)
diff --git a/ion/src/com/koushikdutta/ion/DefaultTransform.java b/ion/src/com/koushikdutta/ion/DefaultTransform.java
index 24e92878..c60a4824 100644
--- a/ion/src/com/koushikdutta/ion/DefaultTransform.java
+++ b/ion/src/com/koushikdutta/ion/DefaultTransform.java
@@ -38,7 +38,7 @@ public Bitmap transform(Bitmap b) {
             float postHeight = b.getHeight() * ratio;
             float transx = (resizeWidth - postWidth) / 2;
             float transy = (resizeHeight - postHeight) / 2;
-            destination.set(transx, transy, transx + postWidth, transy + postHeight);
+            destination.set(transx, transy, resizeWidth - transx, resizeHeight - transy);
         }
 
         canvas.drawBitmap(b, null, destination, null);
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index e12654f6..41d8a524 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -38,6 +38,7 @@
 import com.koushikdutta.ion.loader.FileLoader;
 import com.koushikdutta.ion.loader.HttpLoader;
 import com.koushikdutta.ion.loader.PackageIconLoader;
+import com.koushikdutta.ion.loader.VideoLoader;
 
 /**
  * Created by koush on 5/21/13.
@@ -116,6 +117,8 @@ public static Ion getInstance(Context context, String name) {
     DiskLruCache storeCache;
     HttpLoader httpLoader;
     ContentLoader contentLoader;
+    VideoLoader videoLoader;
+    PackageIconLoader packageIconLoader;
     FileLoader fileLoader;
     String logtag;
     int logLevel;
@@ -156,7 +159,8 @@ private Ion(Context context, String name) {
         bitmapCache = new IonBitmapCache(this);
 
         configure()
-                .addLoader(new PackageIconLoader())
+                .addLoader(videoLoader = new VideoLoader())
+                .addLoader(packageIconLoader = new PackageIconLoader())
                 .addLoader(httpLoader = new HttpLoader())
                 .addLoader(contentLoader = new ContentLoader())
                 .addLoader(fileLoader = new FileLoader());
@@ -312,7 +316,6 @@ private void addCookieMiddleware() {
 
     /**
      * Get or put an item from the cache
-     * @param key
      * @return
      */
     public DiskLruCacheStore cache() {
@@ -321,7 +324,6 @@ public DiskLruCacheStore cache() {
 
     /**
      * Get or put an item in the persistent store
-     * @param key
      * @return
      */
     public DiskLruCacheStore store() {
@@ -361,6 +363,14 @@ public HttpLoader getHttpLoader() {
             return httpLoader;
         }
 
+        public VideoLoader getVideoLoader() {
+            return videoLoader;
+        }
+
+        public PackageIconLoader getPackageIconLoader() {
+            return packageIconLoader;
+        }
+
         public ContentLoader getContentLoader() {
             return contentLoader;
         }
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index fd61a795..08149ea9 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -191,16 +191,32 @@ public void setDither(boolean dither) {
         invalidateSelf();
     }
 
+    private Drawable tryGetErrorResource() {
+        if (error != null)
+            return error;
+        if (errorResource == 0)
+            return null;
+        return error = resources.getDrawable(errorResource);
+    }
+
     @Override
     public int getIntrinsicWidth() {
         if (info != null && info.bitmaps != null)
             return info.bitmaps[0].getScaledWidth(resources.getDisplayMetrics().densityDpi);
         if (resizeWidth > 0)
             return resizeWidth;
-        if (error != null)
-            return error.getIntrinsicWidth();
-        if (placeholder != null)
+        if (info != null) {
+            Drawable error = tryGetErrorResource();
+            if (error != null)
+                return error.getIntrinsicWidth();
+        }
+        if (placeholder != null) {
             return placeholder.getIntrinsicWidth();
+        } else if (placeholderResource != 0) {
+            Drawable d = resources.getDrawable(placeholderResource);
+            assert d != null;
+            return d.getIntrinsicWidth();
+        }
         return -1;
     }
 
@@ -210,10 +226,22 @@ public int getIntrinsicHeight() {
             return info.bitmaps[0].getScaledHeight(resources.getDisplayMetrics().densityDpi);
         if (resizeHeight > 0)
             return resizeHeight;
-        if (error != null)
-            return error.getIntrinsicHeight();
-        if (placeholder != null)
+        if (info != null) {
+            if (error != null) {
+                return error.getIntrinsicHeight();
+            } else if (errorResource != 0) {
+                Drawable d = resources.getDrawable(errorResource);
+                assert d != null;
+                return d.getIntrinsicHeight();
+            }
+        }
+        if (placeholder != null) {
             return placeholder.getIntrinsicHeight();
+        } else if (placeholderResource != 0) {
+            Drawable d = resources.getDrawable(placeholderResource);
+            assert d != null;
+            return d.getIntrinsicHeight();
+        }
         return -1;
     }
 
@@ -272,8 +300,7 @@ public void draw(Canvas canvas) {
             }
         }
         else {
-            if (error == null && errorResource != 0)
-                error = resources.getDrawable(errorResource);
+            Drawable error = tryGetErrorResource();
             if (error != null) {
                 error.setAlpha((int)destAlpha);
                 error.setBounds(getBounds());
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index a2f4ca46..9e267444 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -304,7 +304,7 @@ private AsyncHttpRequest prepareRequest(URI uri, AsyncHttpRequestBody wrappedBod
                 public void onProgress(final int downloaded, final int total) {
                     assert Thread.currentThread() != Looper.getMainLooper().getThread();
 
-                    int percent = (int)((float)total / total * 100f);
+                    final int percent = (int)((float)downloaded / total * 100f);
 
                     if (uploadProgressBar != null)
                         uploadProgressBar.setProgress(percent);
@@ -602,6 +602,11 @@ public void onCompleted(Exception e, T result) {
         return execute(new InputStreamParser());
     }
 
+    @Override
+    public <T> ResponseFuture<T> as(AsyncParser<T> parser) {
+        return execute(parser);
+    }
+
     @Override
     public <F extends OutputStream> ResponseFuture<F> write(F outputStream, boolean close) {
         return execute(new OutputStreamDataSink(ion.getServer(), outputStream, false), close, outputStream);
diff --git a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
index f18dcb84..dad38128 100644
--- a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
@@ -5,6 +5,7 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.reflect.TypeToken;
+import com.koushikdutta.async.parser.AsyncParser;
 import com.koushikdutta.ion.future.ResponseFuture;
 
 import org.w3c.dom.Document;
@@ -94,6 +95,14 @@
      */
     public <T> ResponseFuture<T> as(TypeToken<T> token);
 
+    /**
+     * Deserialize a response into an object given a custom parser.
+     * @param parser
+     * @param <T>
+     * @return
+     */
+    public <T> ResponseFuture<T> as(AsyncParser<T> parser);
+
     /**
      * Add this request to a group specified by groupKey. This key can be used in a later call to
      * Ion.cancelAll(groupKey) to cancel all the requests in the same group.
diff --git a/ion/src/com/koushikdutta/ion/loader/MediaFile.java b/ion/src/com/koushikdutta/ion/loader/MediaFile.java
new file mode 100644
index 00000000..90912a01
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/loader/MediaFile.java
@@ -0,0 +1,359 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (c) 2012, The Linux Foundation. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.koushikdutta.ion.loader;
+
+import android.mtp.MtpConstants;
+
+import java.util.HashMap;
+import java.util.Locale;
+
+/**
+ * MediaScanner helper class.
+ *
+ * {@hide}
+ */
+public class MediaFile {
+
+    // Audio file types
+    public static final int FILE_TYPE_MP3     = 1;
+    public static final int FILE_TYPE_M4A     = 2;
+    public static final int FILE_TYPE_WAV     = 3;
+    public static final int FILE_TYPE_AMR     = 4;
+    public static final int FILE_TYPE_AWB     = 5;
+    public static final int FILE_TYPE_WMA     = 6;
+    public static final int FILE_TYPE_OGG     = 7;
+    public static final int FILE_TYPE_AAC     = 8;
+    public static final int FILE_TYPE_MKA     = 9;
+    public static final int FILE_TYPE_FLAC    = 10;
+    public static final int FILE_TYPE_3GPA    = 11;
+    public static final int FILE_TYPE_AC3     = 12;
+    public static final int FILE_TYPE_QCP     = 13;
+    public static final int FILE_TYPE_WEBMA   = 14;
+    public static final int FILE_TYPE_PCM     = 15;
+    public static final int FILE_TYPE_EC3     = 16;
+    private static final int FIRST_AUDIO_FILE_TYPE = FILE_TYPE_MP3;
+    private static final int LAST_AUDIO_FILE_TYPE = FILE_TYPE_EC3;
+
+    // More audio file types
+    public static final int FILE_TYPE_DTS   = 300;
+    private static final int FIRST_AUDIO_FILE_TYPE2 = FILE_TYPE_DTS;
+    private static final int LAST_AUDIO_FILE_TYPE2 = FILE_TYPE_DTS;
+
+    // MIDI file types
+    public static final int FILE_TYPE_MID     = 17;
+    public static final int FILE_TYPE_SMF     = 18;
+    public static final int FILE_TYPE_IMY     = 19;
+    private static final int FIRST_MIDI_FILE_TYPE = FILE_TYPE_MID;
+    private static final int LAST_MIDI_FILE_TYPE = FILE_TYPE_IMY;
+
+    // Video file types
+    public static final int FILE_TYPE_MP4     = 21;
+    public static final int FILE_TYPE_M4V     = 22;
+    public static final int FILE_TYPE_3GPP    = 23;
+    public static final int FILE_TYPE_3GPP2   = 24;
+    public static final int FILE_TYPE_WMV     = 25;
+    public static final int FILE_TYPE_ASF     = 26;
+    public static final int FILE_TYPE_MKV     = 27;
+    public static final int FILE_TYPE_MP2TS   = 28;
+    public static final int FILE_TYPE_AVI     = 29;
+    public static final int FILE_TYPE_WEBM    = 30;
+    public static final int FILE_TYPE_DIVX    = 31;
+    private static final int FIRST_VIDEO_FILE_TYPE = FILE_TYPE_MP4;
+    private static final int LAST_VIDEO_FILE_TYPE = FILE_TYPE_DIVX;
+
+    // More video file types
+    public static final int FILE_TYPE_MP2PS   = 200;
+    private static final int FIRST_VIDEO_FILE_TYPE2 = FILE_TYPE_MP2PS;
+    private static final int LAST_VIDEO_FILE_TYPE2 = FILE_TYPE_MP2PS;
+
+    // Image file types
+    public static final int FILE_TYPE_JPEG    = 32;
+    public static final int FILE_TYPE_GIF     = 33;
+    public static final int FILE_TYPE_PNG     = 34;
+    public static final int FILE_TYPE_BMP     = 35;
+    public static final int FILE_TYPE_WBMP    = 36;
+    public static final int FILE_TYPE_WEBP    = 37;
+    private static final int FIRST_IMAGE_FILE_TYPE = FILE_TYPE_JPEG;
+    private static final int LAST_IMAGE_FILE_TYPE = FILE_TYPE_WEBP;
+
+    // Playlist file types
+    public static final int FILE_TYPE_M3U      = 41;
+    public static final int FILE_TYPE_PLS      = 42;
+    public static final int FILE_TYPE_WPL      = 43;
+    public static final int FILE_TYPE_HTTPLIVE = 44;
+
+    private static final int FIRST_PLAYLIST_FILE_TYPE = FILE_TYPE_M3U;
+    private static final int LAST_PLAYLIST_FILE_TYPE = FILE_TYPE_HTTPLIVE;
+
+    // Drm file types
+    public static final int FILE_TYPE_FL      = 51;
+    private static final int FIRST_DRM_FILE_TYPE = FILE_TYPE_FL;
+    private static final int LAST_DRM_FILE_TYPE = FILE_TYPE_FL;
+
+    // Other popular file types
+    public static final int FILE_TYPE_TEXT          = 100;
+    public static final int FILE_TYPE_HTML          = 101;
+    public static final int FILE_TYPE_PDF           = 102;
+    public static final int FILE_TYPE_XML           = 103;
+    public static final int FILE_TYPE_MS_WORD       = 104;
+    public static final int FILE_TYPE_MS_EXCEL      = 105;
+    public static final int FILE_TYPE_MS_POWERPOINT = 106;
+    public static final int FILE_TYPE_ZIP           = 107;
+
+    public static class MediaFileType {
+        public final int fileType;
+        public final String mimeType;
+
+        MediaFileType(int fileType, String mimeType) {
+            this.fileType = fileType;
+            this.mimeType = mimeType;
+        }
+    }
+
+    private static final HashMap<String, MediaFileType> sFileTypeMap
+            = new HashMap<String, MediaFileType>();
+    private static final HashMap<String, Integer> sMimeTypeMap
+            = new HashMap<String, Integer>();
+    // maps file extension to MTP format code
+    private static final HashMap<String, Integer> sFileTypeToFormatMap
+            = new HashMap<String, Integer>();
+    // maps mime type to MTP format code
+    private static final HashMap<String, Integer> sMimeTypeToFormatMap
+            = new HashMap<String, Integer>();
+    // maps MTP format code to mime type
+    private static final HashMap<Integer, String> sFormatToMimeTypeMap
+            = new HashMap<Integer, String>();
+
+    static void addFileType(String extension, int fileType, String mimeType) {
+        sFileTypeMap.put(extension, new MediaFileType(fileType, mimeType));
+        sMimeTypeMap.put(mimeType, Integer.valueOf(fileType));
+    }
+
+    static void addFileType(String extension, int fileType, String mimeType, int mtpFormatCode) {
+        addFileType(extension, fileType, mimeType);
+        sFileTypeToFormatMap.put(extension, Integer.valueOf(mtpFormatCode));
+        sMimeTypeToFormatMap.put(mimeType, Integer.valueOf(mtpFormatCode));
+        sFormatToMimeTypeMap.put(mtpFormatCode, mimeType);
+    }
+
+    /*
+    private static boolean isWMAEnabled() {
+        List<AudioDecoder> decoders = DecoderCapabilities.getAudioDecoders();
+        int count = decoders.size();
+        for (int i = 0; i < count; i++) {
+            AudioDecoder decoder = decoders.get(i);
+            if (decoder == AudioDecoder.AUDIO_DECODER_WMA) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private static boolean isWMVEnabled() {
+        List<VideoDecoder> decoders = DecoderCapabilities.getVideoDecoders();
+        int count = decoders.size();
+        for (int i = 0; i < count; i++) {
+            VideoDecoder decoder = decoders.get(i);
+            if (decoder == VideoDecoder.VIDEO_DECODER_WMV) {
+                return true;
+            }
+        }
+        return false;
+    }
+    */
+
+    static {
+        addFileType("MP3", FILE_TYPE_MP3, "audio/mpeg", MtpConstants.FORMAT_MP3);
+        addFileType("MPGA", FILE_TYPE_MP3, "audio/mpeg", MtpConstants.FORMAT_MP3);
+        addFileType("M4A", FILE_TYPE_M4A, "audio/mp4", MtpConstants.FORMAT_MPEG);
+        addFileType("WAV", FILE_TYPE_WAV, "audio/x-wav", MtpConstants.FORMAT_WAV);
+        addFileType("WAV", FILE_TYPE_PCM, "audio/wav");
+        addFileType("AMR", FILE_TYPE_AMR, "audio/amr");
+        addFileType("AWB", FILE_TYPE_AWB, "audio/amr-wb");
+        addFileType("DIVX", FILE_TYPE_DIVX, "video/divx");
+        /*
+        if (isWMAEnabled()) {
+            addFileType("WMA", FILE_TYPE_WMA, "audio/x-ms-wma", MtpConstants.FORMAT_WMA);
+        }
+        */
+        addFileType("QCP", FILE_TYPE_QCP, "audio/qcelp");
+        addFileType("OGG", FILE_TYPE_OGG, "audio/ogg", MtpConstants.FORMAT_OGG);
+        addFileType("OGG", FILE_TYPE_OGG, "application/ogg", MtpConstants.FORMAT_OGG);
+        addFileType("OGA", FILE_TYPE_OGG, "audio/ogg", MtpConstants.FORMAT_OGG);
+        addFileType("OGA", FILE_TYPE_OGG, "application/ogg", MtpConstants.FORMAT_OGG);
+        addFileType("AAC", FILE_TYPE_AAC, "audio/aac", MtpConstants.FORMAT_AAC);
+        addFileType("AAC", FILE_TYPE_AAC, "audio/aac-adts", MtpConstants.FORMAT_AAC);
+        addFileType("MKA", FILE_TYPE_MKA, "audio/x-matroska");
+
+        addFileType("MID", FILE_TYPE_MID, "audio/midi");
+        addFileType("MIDI", FILE_TYPE_MID, "audio/midi");
+        addFileType("XMF", FILE_TYPE_MID, "audio/midi");
+        addFileType("RTTTL", FILE_TYPE_MID, "audio/midi");
+        addFileType("SMF", FILE_TYPE_SMF, "audio/sp-midi");
+        addFileType("IMY", FILE_TYPE_IMY, "audio/imelody");
+        addFileType("RTX", FILE_TYPE_MID, "audio/midi");
+        addFileType("OTA", FILE_TYPE_MID, "audio/midi");
+        addFileType("MXMF", FILE_TYPE_MID, "audio/midi");
+
+        addFileType("MPEG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
+        addFileType("MPG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
+        addFileType("MP4", FILE_TYPE_MP4, "video/mp4", MtpConstants.FORMAT_MPEG);
+        addFileType("M4V", FILE_TYPE_M4V, "video/mp4", MtpConstants.FORMAT_MPEG);
+        addFileType("3GP", FILE_TYPE_3GPP, "video/3gpp",  MtpConstants.FORMAT_3GP_CONTAINER);
+        addFileType("3GPP", FILE_TYPE_3GPP, "video/3gpp", MtpConstants.FORMAT_3GP_CONTAINER);
+        addFileType("3G2", FILE_TYPE_3GPP2, "video/3gpp2", MtpConstants.FORMAT_3GP_CONTAINER);
+        addFileType("3GPP2", FILE_TYPE_3GPP2, "video/3gpp2", MtpConstants.FORMAT_3GP_CONTAINER);
+        addFileType("MKV", FILE_TYPE_MKV, "video/x-matroska");
+        addFileType("WEBM", FILE_TYPE_WEBM, "video/webm");
+        addFileType("TS", FILE_TYPE_MP2TS, "video/mp2ts");
+        addFileType("MPG", FILE_TYPE_MP2TS, "video/mp2ts");
+
+        addFileType("AVI", FILE_TYPE_AVI, "video/avi");
+
+        /*
+        if (isWMVEnabled()) {
+            addFileType("WMV", FILE_TYPE_WMV, "video/x-ms-wmv", MtpConstants.FORMAT_WMV);
+            addFileType("ASF", FILE_TYPE_ASF, "video/x-ms-asf");
+        }
+        */
+
+        addFileType("JPG", FILE_TYPE_JPEG, "image/jpeg", MtpConstants.FORMAT_EXIF_JPEG);
+        addFileType("JPEG", FILE_TYPE_JPEG, "image/jpeg", MtpConstants.FORMAT_EXIF_JPEG);
+        addFileType("GIF", FILE_TYPE_GIF, "image/gif", MtpConstants.FORMAT_GIF);
+        addFileType("PNG", FILE_TYPE_PNG, "image/png", MtpConstants.FORMAT_PNG);
+        addFileType("BMP", FILE_TYPE_BMP, "image/x-ms-bmp", MtpConstants.FORMAT_BMP);
+        addFileType("WBMP", FILE_TYPE_WBMP, "image/vnd.wap.wbmp");
+        addFileType("WEBP", FILE_TYPE_WEBP, "image/webp");
+
+        addFileType("M3U", FILE_TYPE_M3U, "audio/x-mpegurl", MtpConstants.FORMAT_M3U_PLAYLIST);
+        addFileType("M3U", FILE_TYPE_M3U, "application/x-mpegurl", MtpConstants.FORMAT_M3U_PLAYLIST);
+        addFileType("PLS", FILE_TYPE_PLS, "audio/x-scpls", MtpConstants.FORMAT_PLS_PLAYLIST);
+        addFileType("WPL", FILE_TYPE_WPL, "application/vnd.ms-wpl", MtpConstants.FORMAT_WPL_PLAYLIST);
+        addFileType("M3U8", FILE_TYPE_HTTPLIVE, "application/vnd.apple.mpegurl");
+        addFileType("M3U8", FILE_TYPE_HTTPLIVE, "audio/mpegurl");
+        addFileType("M3U8", FILE_TYPE_HTTPLIVE, "audio/x-mpegurl");
+
+        addFileType("FL", FILE_TYPE_FL, "application/x-android-drm-fl");
+
+        addFileType("TXT", FILE_TYPE_TEXT, "text/plain", MtpConstants.FORMAT_TEXT);
+        addFileType("HTM", FILE_TYPE_HTML, "text/html", MtpConstants.FORMAT_HTML);
+        addFileType("HTML", FILE_TYPE_HTML, "text/html", MtpConstants.FORMAT_HTML);
+        addFileType("PDF", FILE_TYPE_PDF, "application/pdf");
+        addFileType("DOC", FILE_TYPE_MS_WORD, "application/msword", MtpConstants.FORMAT_MS_WORD_DOCUMENT);
+        addFileType("XLS", FILE_TYPE_MS_EXCEL, "application/vnd.ms-excel", MtpConstants.FORMAT_MS_EXCEL_SPREADSHEET);
+        addFileType("PPT", FILE_TYPE_MS_POWERPOINT, "application/mspowerpoint", MtpConstants.FORMAT_MS_POWERPOINT_PRESENTATION);
+        addFileType("FLAC", FILE_TYPE_FLAC, "audio/flac", MtpConstants.FORMAT_FLAC);
+        addFileType("ZIP", FILE_TYPE_ZIP, "application/zip");
+        addFileType("MPG", FILE_TYPE_MP2PS, "video/mp2p");
+        addFileType("MPEG", FILE_TYPE_MP2PS, "video/mp2p");
+    }
+
+    public static boolean isAudioFileType(int fileType) {
+        return ((fileType >= FIRST_AUDIO_FILE_TYPE &&
+                fileType <= LAST_AUDIO_FILE_TYPE) ||
+                (fileType >= FIRST_MIDI_FILE_TYPE &&
+                fileType <= LAST_MIDI_FILE_TYPE) ||
+                (fileType >= FIRST_AUDIO_FILE_TYPE2 &&
+                fileType <= LAST_AUDIO_FILE_TYPE2));
+    }
+
+    public static boolean isVideoFileType(int fileType) {
+        return (fileType >= FIRST_VIDEO_FILE_TYPE &&
+                fileType <= LAST_VIDEO_FILE_TYPE)
+            || (fileType >= FIRST_VIDEO_FILE_TYPE2 &&
+                fileType <= LAST_VIDEO_FILE_TYPE2);
+    }
+
+    public static boolean isImageFileType(int fileType) {
+        return (fileType >= FIRST_IMAGE_FILE_TYPE &&
+                fileType <= LAST_IMAGE_FILE_TYPE);
+    }
+
+    public static boolean isPlayListFileType(int fileType) {
+        return (fileType >= FIRST_PLAYLIST_FILE_TYPE &&
+                fileType <= LAST_PLAYLIST_FILE_TYPE);
+    }
+
+    public static boolean isDrmFileType(int fileType) {
+        return (fileType >= FIRST_DRM_FILE_TYPE &&
+                fileType <= LAST_DRM_FILE_TYPE);
+    }
+
+    public static MediaFileType getFileType(String path) {
+        int lastDot = path.lastIndexOf('.');
+        if (lastDot < 0)
+            return null;
+        return sFileTypeMap.get(path.substring(lastDot + 1).toUpperCase(Locale.ROOT));
+    }
+
+    public static boolean isMimeTypeMedia(String mimeType) {
+        int fileType = getFileTypeForMimeType(mimeType);
+        return isAudioFileType(fileType) || isVideoFileType(fileType)
+                || isImageFileType(fileType) || isPlayListFileType(fileType);
+    }
+
+    // generates a title based on file name
+    public static String getFileTitle(String path) {
+        // extract file name after last slash
+        int lastSlash = path.lastIndexOf('/');
+        if (lastSlash >= 0) {
+            lastSlash++;
+            if (lastSlash < path.length()) {
+                path = path.substring(lastSlash);
+            }
+        }
+        // truncate the file extension (if any)
+        int lastDot = path.lastIndexOf('.');
+        if (lastDot > 0) {
+            path = path.substring(0, lastDot);
+        }
+        return path;
+    }
+
+    public static int getFileTypeForMimeType(String mimeType) {
+        Integer value = sMimeTypeMap.get(mimeType);
+        return (value == null ? 0 : value.intValue());
+    }
+
+    public static String getMimeTypeForFile(String path) {
+        MediaFileType mediaFileType = getFileType(path);
+        return (mediaFileType == null ? null : mediaFileType.mimeType);
+    }
+
+    public static int getFormatCode(String fileName, String mimeType) {
+        if (mimeType != null) {
+            Integer value = sMimeTypeToFormatMap.get(mimeType);
+            if (value != null) {
+                return value.intValue();
+            }
+        }
+        int lastDot = fileName.lastIndexOf('.');
+        if (lastDot > 0) {
+            String extension = fileName.substring(lastDot + 1).toUpperCase(Locale.ROOT);
+            Integer value = sFileTypeToFormatMap.get(extension);
+            if (value != null) {
+                return value.intValue();
+            }
+        }
+        return MtpConstants.FORMAT_UNDEFINED;
+    }
+
+    public static String getMimeTypeForFormatCode(int formatCode) {
+        return sFormatToMimeTypeMap.get(formatCode);
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
new file mode 100644
index 00000000..b1b9128c
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
@@ -0,0 +1,120 @@
+package com.koushikdutta.ion.loader;
+
+import android.content.ContentResolver;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Build;
+import android.util.Log;
+
+import com.koushikdutta.async.DataEmitter;
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.future.SimpleFuture;
+import com.koushikdutta.async.http.AsyncHttpRequest;
+import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.bitmap.BitmapInfo;
+
+import java.io.File;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.net.URI;
+
+/**
+ * Created by koush on 11/6/13.
+ */
+public class VideoLoader implements Loader {
+    private static final String TAG = "IonVideoLoader";
+    @Override
+    public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, FutureCallback<LoaderEmitter> callback) {
+        return null;
+    }
+
+    @Override
+    public Future<InputStream> load(Ion ion, AsyncHttpRequest request) {
+        return null;
+    }
+
+    public static Bitmap createVideoThumbnail(String filePath) {
+        // MediaMetadataRetriever is available on API Level 8
+        // but is hidden until API Level 10
+        Class<?> clazz = null;
+        Object instance = null;
+        try {
+            clazz = Class.forName("android.media.MediaMetadataRetriever");
+            instance = clazz.newInstance();
+
+            Method method = clazz.getMethod("setDataSource", String.class);
+            method.invoke(instance, filePath);
+
+            // The method name changes between API Level 9 and 10.
+            if (Build.VERSION.SDK_INT <= 9) {
+                return (Bitmap) clazz.getMethod("captureFrame").invoke(instance);
+            } else {
+                byte[] data = (byte[]) clazz.getMethod("getEmbeddedPicture").invoke(instance);
+                if (data != null) {
+                    Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
+                    if (bitmap != null) return bitmap;
+                }
+                return (Bitmap) clazz.getMethod("getFrameAtTime").invoke(instance);
+            }
+        } catch (IllegalArgumentException ex) {
+            // Assume this is a corrupt video file
+        } catch (RuntimeException ex) {
+            // Assume this is a corrupt video file.
+        } catch (InstantiationException e) {
+            Log.e(TAG, "createVideoThumbnail", e);
+        } catch (InvocationTargetException e) {
+            Log.e(TAG, "createVideoThumbnail", e);
+        } catch (ClassNotFoundException e) {
+            Log.e(TAG, "createVideoThumbnail", e);
+        } catch (NoSuchMethodException e) {
+            Log.e(TAG, "createVideoThumbnail", e);
+        } catch (IllegalAccessException e) {
+            Log.e(TAG, "createVideoThumbnail", e);
+        } finally {
+            try {
+                if (instance != null) {
+                    clazz.getMethod("release").invoke(instance);
+                }
+            } catch (Exception ignored) {
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Future<BitmapInfo> loadBitmap(Ion ion, String uri) {
+        if (Build.VERSION.SDK_INT < 12)
+            return null;
+
+        if (!uri.startsWith(ContentResolver.SCHEME_FILE))
+            return null;
+
+        final File file = new File(URI.create(uri));
+
+        MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
+        if (!MediaFile.isVideoFileType(type.fileType))
+            return null;
+
+        final SimpleFuture<BitmapInfo> ret = new SimpleFuture<BitmapInfo>();
+        ion.getBitmapLoadExecutorService().execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    Bitmap bmp = createVideoThumbnail(file.getAbsolutePath());
+                    if (bmp == null)
+                        throw new Exception("bitmap failed to load");
+                    BitmapInfo info = new BitmapInfo();
+                    info.bitmaps = new Bitmap[] {bmp};
+                    info.loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
+                    ret.setComplete(info);
+                } catch (Exception e) {
+                    ret.setComplete(e);
+                }
+            }
+        });
+        return ret;
+    }
+}
