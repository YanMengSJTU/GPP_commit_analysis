diff --git a/ion-test/src/com/koushikdutta/ion/test/HeadersTests.java b/ion-test/src/com/koushikdutta/ion/test/HeadersTests.java
index 36f3a282..aa4c4b29 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HeadersTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/HeadersTests.java
@@ -2,6 +2,7 @@
 
 import android.test.AndroidTestCase;
 
+import com.google.gson.JsonObject;
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.libcore.RawHeaders;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
@@ -66,18 +67,44 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
             final Semaphore semaphore = new Semaphore(0);
 
             Ion.with(getContext())
-            .load("http://localhost:5555/")
-            .asString()
-            .withResponse()
-            .setCallback(new FutureCallback<Response<String>>() {
+                    .load("http://localhost:5555/")
+                    .asString()
+                    .withResponse()
+                    .setCallback(new FutureCallback<Response<String>>() {
+                        @Override
+                        public void onCompleted(Exception e, Response<String> result) {
+                            assertEquals(result.getHeaders().getResponseCode(), 200);
+                            semaphore.release();
+                        }
+                    });
+
+            assertTrue(semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS));
+        }
+        finally {
+            httpServer.stop();
+            Ion.getDefault(getContext()).getServer().stop();
+        }
+    }
+
+    public void testBustedJson() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        try {
+            httpServer.get("/", new HttpServerRequestCallback() {
                 @Override
-                public void onCompleted(Exception e, Response<String> result) {
-                    assertEquals(result.getHeaders().getResponseCode(), 200);
-                    semaphore.release();
+                public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                    response.send("hello");
                 }
             });
+            httpServer.listen(Ion.getDefault(getContext()).getServer(), 5555);
 
-            assertTrue(semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS));
+            Response<JsonObject> response = Ion.with(getContext())
+                    .load("http://localhost:5555/")
+                    .asJsonObject()
+                    .withResponse()
+                    .get();
+
+            assertNull(response.getResult());
+            assertNotNull(response.getException());
         }
         finally {
             httpServer.stop();
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issue74.java b/ion-test/src/com/koushikdutta/ion/test/Issue74.java
new file mode 100644
index 00000000..be8b92c1
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/Issue74.java
@@ -0,0 +1,25 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+import android.util.Log;
+
+import com.koushikdutta.ion.Ion;
+
+/**
+ * Created by koush on 10/27/13.
+ */
+public class Issue74 extends AndroidTestCase {
+    public void testIssue() throws Exception {
+        Ion.getDefault(getContext()).getResponseCache().clear();
+
+        String data = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        String data2 = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        assertEquals(data, data2);
+    }
+}
diff --git a/ion/AndroidManifest.xml b/ion/AndroidManifest.xml
index 7fdf0097..86bd8a08 100644
--- a/ion/AndroidManifest.xml
+++ b/ion/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.koushikdutta.ion"
-          android:versionCode="118"
-          android:versionName="1.1.8">
+          android:versionCode="119"
+          android:versionName="1.1.9">
     <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />
     <application />
 </manifest>
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 32b74d5e..56f1e5e6 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -26,6 +26,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.future.TransformFuture;
 import com.koushikdutta.async.http.AsyncHttpGet;
 import com.koushikdutta.async.http.AsyncHttpPost;
@@ -339,29 +340,24 @@ public void run() {
         RawHeaders headers;
         DataEmitter emitter;
 
-        class ResponseFutureImpl extends TransformFuture<Response<T>, T> {
-            @Override
-            protected void error(Exception e) {
-                Response<T> response = new Response<T>();
-                response.headers = headers;
-                response.request = finalRequest;
-                setComplete(e, response);
-            }
-
-            @Override
-            protected void transform(T result) throws Exception {
-                Response<T> response = new Response<T>();
-                response.headers = headers;
-                response.result = result;
-                response.request = finalRequest;
-                setComplete(response);
-            }
-        }
-
         @Override
         public Future<Response<T>> withResponse() {
-            final ResponseFutureImpl ret = new ResponseFutureImpl();
-            setCallback(ret);
+            final SimpleFuture<Response<T>> ret = new SimpleFuture<Response<T>>();
+            setCallback(new FutureCallback<T>() {
+                @Override
+                public void onCompleted(Exception e, T result) {
+                    if (emitter != null) {
+                        Response<T> response = new Response<T>();
+                        response.headers = headers;
+                        response.request = finalRequest;
+                        response.result = result;
+                        response.exception = e;
+                        ret.setComplete(response);
+                        return;
+                    }
+                    ret.setComplete(e, null);
+                }
+            });
             return ret;
         }
 
diff --git a/ion/src/com/koushikdutta/ion/Response.java b/ion/src/com/koushikdutta/ion/Response.java
index b473d0ae..a7df64cc 100644
--- a/ion/src/com/koushikdutta/ion/Response.java
+++ b/ion/src/com/koushikdutta/ion/Response.java
@@ -12,6 +12,11 @@ public T getResult() {
         return result;
     }
 
+    Exception exception;
+    public Exception getException() {
+        return exception;
+    }
+
     RawHeaders headers;
     public RawHeaders getHeaders() {
         return headers;
