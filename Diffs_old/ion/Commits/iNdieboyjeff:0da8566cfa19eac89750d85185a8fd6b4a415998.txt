diff --git a/ion-sample/ion-sample.iml b/ion-sample/ion-sample.iml
index 751611c4..13c37c87 100644
--- a/ion-sample/ion-sample.iml
+++ b/ion-sample/ion-sample.iml
@@ -19,7 +19,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Android 4.2.2 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="ion" />
   </component>
diff --git a/ion-sample/project.properties b/ion-sample/project.properties
index 5f8422a2..fc12c4df 100644
--- a/ion-sample/project.properties
+++ b/ion-sample/project.properties
@@ -11,6 +11,6 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-17
+target=android-19
 android.library.reference.1=../ion
 
diff --git a/ion-test/ion-test.iml b/ion-test/ion-test.iml
index c089e12a..13c37c87 100644
--- a/ion-test/ion-test.iml
+++ b/ion-test/ion-test.iml
@@ -19,7 +19,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Android 4.3 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="ion" />
   </component>
diff --git a/ion-test/project.properties b/ion-test/project.properties
index 66efd6aa..e2b2c2ac 100644
--- a/ion-test/project.properties
+++ b/ion-test/project.properties
@@ -1,5 +1,5 @@
 # This file is automatically generated by IntelliJ IDEA
 # Project target.
-target=android-18
+target=android-19
 android.library.reference.1=../ion
 
diff --git a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
index df5d1f4d..156dfe05 100644
--- a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
@@ -3,7 +3,9 @@
 import android.graphics.Bitmap;
 import android.test.AndroidTestCase;
 
+import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.ion.Ion;
 
 import java.util.concurrent.Semaphore;
@@ -15,6 +17,7 @@
 public class BitmapTests extends AndroidTestCase {
     public void testBitmapCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
+        // todo: local resource
         Ion.with(getContext())
         .load("http://media.salon.com/2013/05/original.jpg")
         .asBitmap()
@@ -28,4 +31,39 @@ public void onCompleted(Exception e, Bitmap result) {
         });
         semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
     }
+
+    public void test404() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.listen(5566);
+        try {
+            final Semaphore semaphore = new Semaphore(0);
+            Ion.with(getContext())
+            .load("http://localhost:5566/foo.png")
+            .asBitmap()
+            .setCallback(new FutureCallback<Bitmap>() {
+                @Override
+                public void onCompleted(Exception e, Bitmap result) {
+                    semaphore.release();
+                    assertNotNull(e);
+                }
+            });
+            semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
+
+            Ion.with(getContext())
+            .load("http://localhost:5566/foo.png")
+            .asBitmap()
+            .setCallback(new FutureCallback<Bitmap>() {
+                @Override
+                public void onCompleted(Exception e, Bitmap result) {
+                    semaphore.release();
+                    assertNotNull(e);
+                }
+            });
+            semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
+        }
+        finally {
+            httpServer.stop();
+            AsyncServer.getDefault().stop();
+        }
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/BitmapCallback.java b/ion/src/com/koushikdutta/ion/BitmapCallback.java
index 6fecf7e5..a5a1ba3b 100644
--- a/ion/src/com/koushikdutta/ion/BitmapCallback.java
+++ b/ion/src/com/koushikdutta/ion/BitmapCallback.java
@@ -35,6 +35,7 @@ public void run() {
                     result = new BitmapInfo();
                     result.bitmaps = null;
                     result.key = key;
+                    result.exception = e;
                     ion.getBitmapCache().put(result);
                 } else if (put()) {
                     ion.getBitmapCache().put(result);
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index f0431aa9..c636b822 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -240,7 +240,8 @@ protected void transform(BitmapInfo result) throws Exception {
         BitmapInfo info = execute();
         if (info != null) {
             SimpleFuture<Bitmap> ret = new SimpleFuture<Bitmap>();
-            ret.setComplete(info.bitmaps[0]);
+            Bitmap bitmap = info.bitmaps == null ? null : info.bitmaps[0];
+            ret.setComplete(info.exception, bitmap);
             return ret;
         }
 
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index 3e9c486f..e818916e 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -12,6 +12,7 @@
     public int loadedFrom;
     public Bitmap[] bitmaps;
     public int[] delays;
+    public Exception exception;
 
     public int sizeOf() {
         if (bitmaps == null)
diff --git a/ion/src/com/koushikdutta/ion/bitmap/Exif.java b/ion/src/com/koushikdutta/ion/bitmap/Exif.java
index 4d6ad255..1b819c61 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/Exif.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/Exif.java
@@ -115,7 +115,7 @@ public static int getOrientation(byte[] jpeg, int offset, int size) {
             }
         }
 
-        Log.i(TAG, "Orientation not found");
+//        Log.i(TAG, "Orientation not found");
         return 0;
     }
 
