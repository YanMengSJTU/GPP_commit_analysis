diff --git a/ion-sample/build.gradle b/ion-sample/build.gradle
new file mode 100644
index 00000000..ef9add84
--- /dev/null
+++ b/ion-sample/build.gradle
@@ -0,0 +1,45 @@
+task wrapper(type: Wrapper) {
+    gradleVersion = '1.6'
+}
+
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.12.+'
+    }
+}
+apply plugin: 'com.android.application'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile 'com.github.chrisbanes.photoview:library:+'
+    compile project(':ion:ion')
+}
+
+android {
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            res.srcDirs = ['res/']
+            java.srcDirs = ['src/']
+        }
+    }
+
+    compileSdkVersion 19
+    buildToolsVersion "20.0.0"
+
+    defaultConfig {
+        minSdkVersion 9
+        targetSdkVersion 21
+    }
+}
+
+// upload to maven task
+//if (System.getenv().I_AM_KOUSH == 'true') {
+//  apply from: 'https://raw.github.com/koush/mvn-repo/master/maven.gradle'
+//}
diff --git a/ion-sample/ion-sample.iml b/ion-sample/ion-sample.iml
index f99e4e75..42cfd27c 100644
--- a/ion-sample/ion-sample.iml
+++ b/ion-sample/ion-sample.iml
@@ -1,42 +1,74 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
+<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="Gradle.ion" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
   <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":ion:ion-sample" />
+      </configuration>
+    </facet>
+    <facet type="java-gradle" name="Java-Gradle">
+      <configuration>
+        <option name="BUILD_FOLDER_PATH" />
+      </configuration>
+    </facet>
     <facet type="android" name="Android">
       <configuration>
-        <proGuardCfgFiles>
-          <file>file://$APPLICATION_HOME_DIR$/sdk/tools/proguard/proguard-android.txt</file>
-        </proGuardCfgFiles>
-        <option name="UPDATE_PROPERTY_FILES" value="true" />
-        <notImportedProperties>
-          <property>MANIFEST_FILE_PATH</property>
-          <property>RESOURCES_DIR_PATH</property>
-          <property>ASSETS_DIR_PATH</property>
-          <property>NATIVE_LIBS_DIR_PATH</property>
-        </notImportedProperties>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugJava" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
+        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
       </configuration>
     </facet>
   </component>
   <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="ion" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/libs" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-        <jarDirectory url="file://$MODULE_DIR$/libs" recursive="false" />
-      </library>
-    </orderEntry>
+    <orderEntry type="library" exported="" name="gson-2.2.4" level="project" />
+    <orderEntry type="library" exported="" name="library-1.2.3" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-20.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-20.0.0" level="project" />
+    <orderEntry type="module" module-name="ion-ion" exported="" />
   </component>
 </module>
 
diff --git a/ion-test/.classpath b/ion-test/.classpath
deleted file mode 100644
index 7bc01d9a..00000000
--- a/ion-test/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/ion-test/.project b/ion-test/.project
deleted file mode 100644
index d82c8736..00000000
--- a/ion-test/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>ion-test</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/ion-test/AndroidManifest.xml b/ion-test/AndroidManifest.xml
deleted file mode 100644
index 71283fa8..00000000
--- a/ion-test/AndroidManifest.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.koushikdutta.ion.test">
-    <uses-sdk
-            android:minSdkVersion="9"
-            android:targetSdkVersion="17"/>
-    <instrumentation android:name="android.test.InstrumentationTestRunner"
-                     android:targetPackage="com.koushikdutta.ion.test"/>
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-    <uses-permission android:name="android.permission.READ_CONTACTS" />
-    <application android:debuggable="true">
-        <uses-library android:name="android.test.runner"/>
-    </application>
-</manifest>
diff --git a/ion-test/ion-test.iml b/ion-test/ion-test.iml
deleted file mode 100644
index 08cc3fc3..00000000
--- a/ion-test/ion-test.iml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <proGuardCfgFiles>
-          <file>file://$APPLICATION_HOME_DIR$/sdk/tools/proguard/proguard-android.txt</file>
-        </proGuardCfgFiles>
-        <option name="UPDATE_PROPERTY_FILES" value="true" />
-        <notImportedProperties>
-          <property>MANIFEST_FILE_PATH</property>
-          <property>RESOURCES_DIR_PATH</property>
-          <property>ASSETS_DIR_PATH</property>
-          <property>NATIVE_LIBS_DIR_PATH</property>
-        </notImportedProperties>
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="ion" />
-  </component>
-</module>
-
diff --git a/ion-test/project.properties b/ion-test/project.properties
deleted file mode 100644
index 5eba079a..00000000
--- a/ion-test/project.properties
+++ /dev/null
@@ -1,5 +0,0 @@
-# This file is automatically generated by IntelliJ IDEA
-# Project target.
-target=android-L
-android.library.reference.1=../ion
-
diff --git a/ion-test/src/com/koushikdutta/ion/test/ContentTests.java b/ion-test/src/com/koushikdutta/ion/test/ContentTests.java
deleted file mode 100644
index e4dd6baf..00000000
--- a/ion-test/src/com/koushikdutta/ion/test/ContentTests.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.koushikdutta.ion.test;
-
-import android.content.Context;
-import android.database.Cursor;
-import android.graphics.Bitmap;
-import android.provider.ContactsContract;
-import android.test.AndroidTestCase;
-import com.koushikdutta.ion.Ion;
-
-import java.io.File;
-import java.io.FileOutputStream;
-
-/**
- * Created by koush on 5/22/13.
- */
-public class ContentTests extends AndroidTestCase {
-    public void testContact() throws Exception {
-        Cursor c = getContext().getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
-        String id = null;
-        while (c.moveToNext()) {
-            id = c.getString(c.getColumnIndex(ContactsContract.Contacts.PHOTO_URI));
-            if (id != null)
-                break;
-        }
-        Ion.with(getContext())
-        .load(id)
-        .write(getContext().openFileOutput("test.png", Context.MODE_PRIVATE)).get();
-        assertNotNull(id);
-        assertNotNull(c);
-    }
-
-    public void testContactToFile() throws Exception {
-        Cursor c = getContext().getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
-        String id = null;
-        while (c.moveToNext()) {
-            id = c.getString(c.getColumnIndex(ContactsContract.Contacts.PHOTO_URI));
-            if (id != null)
-                break;
-        }
-        Ion.with(getContext())
-        .load(id)
-        .write(getContext().openFileOutput("test2.png", Context.MODE_PRIVATE)).get();
-        assertNotNull(id);
-        assertNotNull(c);
-    }
-
-    public void testContactBitmap() throws Exception {
-        Cursor c = getContext().getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
-        String id = null;
-        while (c.moveToNext()) {
-            id = c.getString(c.getColumnIndex(ContactsContract.Contacts.PHOTO_URI));
-            if (id != null)
-                break;
-        }
-        Bitmap b =
-        Ion.with(getContext())
-        .load(id)
-        .asBitmap()
-        .get();
-        assertNotNull(b);
-        assertNotNull(id);
-        assertNotNull(c);
-    }
-}
diff --git a/ion/build.gradle b/ion/build.gradle
index b8c17ee6..2f8ac7fb 100644
--- a/ion/build.gradle
+++ b/ion/build.gradle
@@ -6,44 +6,46 @@ buildscript {
     repositories {
         mavenCentral()
     }
-
     dependencies {
-      classpath 'com.android.tools.build:gradle:0.10.+'
+        classpath 'com.android.tools.build:gradle:0.12.+'
     }
 }
-
-apply plugin: 'android-library'
+apply plugin: 'com.android.library'
 
 repositories {
     mavenCentral()
 }
 
 dependencies {
-    compile project(':AndroidAsync')
-    compile 'com.google.code.gson:gson:2.2.4'
+    compile 'com.android.support:support-v4:20.+'
+    compile project(':AndroidAsync:AndroidAsync')
+    compile 'com.google.code.gson:gson:+'
 }
 
 android {
-  sourceSets {
-      main {
-          manifest.srcFile 'AndroidManifest.xml'
-      
-          java {
-              srcDir 'src/'
-          }
-      }
-  }
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+
+            java {
+                srcDir 'src/'
+            }
+        }
+        androidTest.java.srcDirs=['test/src/']
+        androidTest.res.srcDirs=['test/res/']
+        androidTest.assets.srcDirs=['test/assets/']
+    }
 
     compileSdkVersion 19
-    buildToolsVersion "19.0.3"
+    buildToolsVersion '20.0.0'
 
     defaultConfig {
-        minSdkVersion 7
-        targetSdkVersion 19
+        minSdkVersion 9
+        targetSdkVersion 21
     }
 }
 
 // upload to maven task
-if (System.getenv().I_AM_KOUSH == 'true') {
-  apply from: 'https://raw.github.com/koush/mvn-repo/master/maven.gradle'
-}
+//if (System.getenv().I_AM_KOUSH == 'true') {
+//  apply from: 'https://raw.github.com/koush/mvn-repo/master/maven.gradle'
+//}
diff --git a/ion/ion-ion.iml b/ion/ion-ion.iml
new file mode 100644
index 00000000..08ec8a14
--- /dev/null
+++ b/ion/ion-ion.iml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="Gradle.ion" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":ion:ion" />
+      </configuration>
+    </facet>
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugJava" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
+        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
+        <option name="LIBRARY_PROJECT" value="true" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/test/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/test/assets" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/test/src" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="gson-2.2.4" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-20.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-20.0.0" level="project" />
+    <orderEntry type="module" module-name="AndroidAsync-AndroidAsync" exported="" />
+  </component>
+</module>
+
diff --git a/ion/libs/gson-2.2.4.jar b/ion/libs/gson-2.2.4.jar
deleted file mode 100644
index 75fe27c5..00000000
Binary files a/ion/libs/gson-2.2.4.jar and /dev/null differ
diff --git a/ion/settings.gradle b/ion/settings.gradle
index 4e0c424d..5484eea4 100644
--- a/ion/settings.gradle
+++ b/ion/settings.gradle
@@ -1,2 +1,2 @@
-include ':AndroidAsync'
-project(':AndroidAsync').projectDir = new File('../../AndroidAsync/AndroidAsync')
+include ':AndroidAsync:AndroidAsync'
+project(':AndroidAsync:AndroidAsync').projectDir = new File('../../AndroidAsync/AndroidAsync')
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index b733fe40..730c9d40 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -27,7 +27,7 @@
     int resizeHeight;
     boolean animateGif;
     boolean deepZoom;
-    PostProcess postProcess;
+    ArrayList<PostProcess> postProcess;
 
     private boolean fastLoad(String uri) {
         Ion ion = builder.ion;
diff --git a/ion/src/com/koushikdutta/ion/DefaultTransform.java b/ion/src/com/koushikdutta/ion/DefaultTransform.java
index f429a0a7..ffc8a278 100644
--- a/ion/src/com/koushikdutta/ion/DefaultTransform.java
+++ b/ion/src/com/koushikdutta/ion/DefaultTransform.java
@@ -9,9 +9,9 @@
 import java.io.FileOutputStream;
 
 class DefaultTransform implements Transform {
-    ScaleMode scaleMode;
-    int resizeWidth;
-    int resizeHeight;
+    final ScaleMode scaleMode;
+    final int resizeWidth;
+    final int resizeHeight;
 
     public DefaultTransform(int width, int height, ScaleMode scaleMode) {
         resizeWidth = width;
@@ -24,6 +24,17 @@ public Bitmap transform(Bitmap b) {
         Bitmap.Config config = b.getConfig();
         if (config == null)
             config = Bitmap.Config.ARGB_8888;
+        int resizeWidth = this.resizeWidth;
+        int resizeHeight = this.resizeHeight;
+        if (resizeWidth <= 0) {
+            float ratio = (float)b.getWidth() / (float)b.getHeight();
+            resizeWidth = (int)(ratio * resizeHeight);
+        }
+        else if (resizeHeight <= 0) {
+            float ratio = (float)b.getHeight() / (float)b.getWidth();
+            resizeHeight = (int)(ratio * resizeWidth);
+        }
+
         Bitmap ret = Bitmap.createBitmap(resizeWidth, resizeHeight, config);
         Canvas canvas = new Canvas(ret);
 
diff --git a/ion/src/com/koushikdutta/ion/FileCacheStore.java b/ion/src/com/koushikdutta/ion/FileCacheStore.java
index f86290cd..82c68445 100644
--- a/ion/src/com/koushikdutta/ion/FileCacheStore.java
+++ b/ion/src/com/koushikdutta/ion/FileCacheStore.java
@@ -46,7 +46,7 @@ public void run() {
                 parser.write(sink, value, new CompletedCallback() {
                     @Override
                     public void onCompleted(Exception ex) {
-                        sink.close();
+                        sink.end();
                         if (ex != null) {
                             file.delete();
                             ret.setComplete(ex);
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index fad87f38..2eba7bb3 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -37,6 +37,8 @@
 import com.koushikdutta.ion.loader.ResourceLoader;
 import com.koushikdutta.ion.loader.VideoLoader;
 
+import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
+
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
@@ -163,10 +165,11 @@ public static Ion getInstance(Context context, String name) {
     Config config = new Config();
     IonBitmapCache bitmapCache;
     Context context;
-    IonBitmapRequestBuilder bitmapBuilder = new IonBitmapRequestBuilder(this);
+    IonImageViewRequestBuilder bitmapBuilder = new IonImageViewRequestBuilder(this);
 
     private Ion(Context context, String name) {
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
+        httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
         this.context = context = context.getApplicationContext();
         this.name = name;
 
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 4c739fe9..93e770f5 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -1,9 +1,7 @@
 package com.koushikdutta.ion;
 
 import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
 import android.os.Build;
-import android.os.Looper;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 import android.widget.ImageView;
@@ -12,25 +10,19 @@
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
-import com.koushikdutta.ion.bitmap.PostProcess;
 import com.koushikdutta.ion.bitmap.LocallyCachedStatus;
+import com.koushikdutta.ion.bitmap.PostProcess;
 import com.koushikdutta.ion.bitmap.Transform;
+import com.koushikdutta.ion.builder.BitmapBuilder;
 import com.koushikdutta.ion.builder.BitmapFutureBuilder;
 import com.koushikdutta.ion.builder.Builders;
-import com.koushikdutta.ion.builder.ImageViewFutureBuilder;
-import com.koushikdutta.ion.future.ImageViewFuture;
 
 import java.util.ArrayList;
 
 /**
  * Created by koush on 5/23/13.
  */
-class IonBitmapRequestBuilder implements Builders.IV.F, ImageViewFutureBuilder, BitmapFutureBuilder, Builders.Any.BF {
-    private static final IonDrawable.ImageViewFutureImpl FUTURE_IMAGEVIEW_NULL_URI = new IonDrawable.ImageViewFutureImpl() {
-        {
-            setComplete(new NullPointerException("uri"));
-        }
-    };
+abstract class IonBitmapRequestBuilder implements BitmapFutureBuilder, Builders.Any.BF {
     private static final SimpleFuture<Bitmap> FUTURE_BITMAP_NULL_URI = new SimpleFuture<Bitmap>() {
         {
             setComplete(new NullPointerException("uri"));
@@ -39,36 +31,18 @@
 
     IonRequestBuilder builder;
     Ion ion;
-    ContextReference.ImageViewContextReference imageViewPostRef;
     ArrayList<Transform> transforms;
-    Drawable placeholderDrawable;
-    int placeholderResource;
-    Drawable errorDrawable;
-    int errorResource;
-    Animation inAnimation;
-    Animation loadAnimation;
-    int loadAnimationResource;
-    int inAnimationResource;
     ScaleMode scaleMode = ScaleMode.FitXY;
     int resizeWidth;
     int resizeHeight;
     boolean disableFadeIn;
     boolean animateGif = true;
     boolean deepZoom;
-    PostProcess postProcess;
+    ArrayList<PostProcess> postProcess;
 
     void reset() {
-        placeholderDrawable = null;
-        placeholderResource = 0;
-        errorDrawable = null;
-        errorResource = 0;
         ion = null;
-        imageViewPostRef = null;
         transforms = null;
-        inAnimation = null;
-        inAnimationResource = 0;
-        loadAnimation = null;
-        loadAnimationResource = 0;
         scaleMode = ScaleMode.FitXY;
         resizeWidth = 0;
         resizeHeight = 0;
@@ -101,31 +75,10 @@ static void doAnimation(ImageView imageView, Animation animation, int animationR
         imageView.startAnimation(animation);
     }
 
-    private IonRequestBuilder ensureBuilder() {
-        if (builder == null)
-            builder = new IonRequestBuilder(ContextReference.fromContext(imageViewPostRef.getContext().getApplicationContext()), ion);
+    protected IonRequestBuilder ensureBuilder() {
         return builder;
     }
 
-    @Override
-    public ImageViewFuture load(String uri) {
-        ensureBuilder();
-        builder.load(uri);
-        return intoImageView(imageViewPostRef.get());
-    }
-
-    @Override
-    public Future<ImageView> load(String method, String url) {
-        ensureBuilder();
-        builder.load(method, url);
-        return intoImageView(imageViewPostRef.get());
-    }
-
-    IonBitmapRequestBuilder withImageView(ImageView imageView) {
-        imageViewPostRef = new ContextReference.ImageViewContextReference(imageView);
-        return this;
-    }
-
     @Override
     public IonBitmapRequestBuilder transform(Transform transform) {
         if (transform == null)
@@ -138,9 +91,9 @@ public IonBitmapRequestBuilder transform(Transform transform) {
 
     @Override
     public IonBitmapRequestBuilder postProcess(PostProcess postProcess) {
-        if (this.postProcess != null)
-            throw new IllegalStateException("only one post processor may be used.");
-        this.postProcess = postProcess;
+        if (this.postProcess == null)
+            this.postProcess = new ArrayList<PostProcess>();
+        this.postProcess.add(postProcess);
         return transform(new TransformBitmap.PostProcessNullTransform(postProcess.key()));
     }
 
@@ -154,10 +107,21 @@ private String computeDownloadKey() {
         return FileCache.toKeyString(downloadKey);
     }
 
+    protected void finalizeResize() {
+    }
+
     public String computeBitmapKey(String downloadKey) {
         assert downloadKey != null;
 
-        if (resizeHeight > 0 || resizeWidth > 0) {
+        if (resizeHeight > 0 || resizeWidth > 0 || scaleMode != ScaleMode.FitXY) {
+            finalizeResize();
+            if (resizeWidth < 0 && resizeHeight < 0) {
+                throw new IllegalStateException("must provide valid resize dimensions if using" +
+                "centerCrop or centerInside\n\n" +
+                "Valid values: (<=0, Y) or (X, <=0), or (X, Y), where:\n" +
+                "X and Y are greater than 0. Specifying <=0 values will scale proportionately.\n" +
+                "Values can also be implied through layout parameters.");
+            }
             if (transforms == null)
                 transforms = new ArrayList<Transform>();
             transforms.add(0, new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
@@ -195,7 +159,6 @@ public LocallyCachedStatus isLocallyCached() {
 
     @Override
     public BitmapInfo asCachedBitmap() {
-        assert Thread.currentThread() == Looper.getMainLooper().getThread() || imageViewPostRef == null;
         final String downloadKey = computeDownloadKey();
         String bitmapKey = computeBitmapKey(downloadKey);
         return builder.ion.bitmapCache.get(bitmapKey);
@@ -230,60 +193,6 @@ BitmapFetcher executeCache() {
         return ret;
     }
 
-    private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loadedFrom) {
-        IonDrawable ret = IonDrawable.getOrCreateIonDrawable(imageView)
-        .ion(ion)
-        .setBitmap(info, loadedFrom)
-        .setSize(resizeWidth, resizeHeight)
-        .setError(errorResource, errorDrawable)
-        .setPlaceholder(placeholderResource, placeholderDrawable)
-        .setInAnimation(inAnimation, inAnimationResource)
-        .setDisableFadeIn(disableFadeIn);
-        imageView.setImageDrawable(ret);
-        return ret;
-    }
-
-    @Override
-    public ImageViewFuture intoImageView(ImageView imageView) {
-        assert Thread.currentThread() == Looper.getMainLooper().getThread();
-        if (imageView == null)
-            throw new NullPointerException("imageView");
-
-        // no uri? just set a placeholder and bail
-        if (builder.uri == null) {
-            setIonDrawable(imageView, null, 0).cancel();
-            return FUTURE_IMAGEVIEW_NULL_URI;
-        }
-
-        // executeCache the request, see if we get a bitmap from cache.
-        BitmapFetcher bitmapFetcher = executeCache();
-        if (bitmapFetcher.info != null) {
-            doAnimation(imageView, null, 0);
-            IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher.info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
-            drawable.cancel();
-            IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
-            imageViewFuture.reset();
-            imageViewFuture.setComplete(bitmapFetcher.info.exception, imageView);
-            return imageViewFuture;
-        }
-
-        // nothing from cache, check to see if there's too many imageview loads
-        // already in progress
-        if (BitmapFetcher.shouldDeferImageView(ion)) {
-            bitmapFetcher.defer();
-        }
-        else {
-            bitmapFetcher.execute();
-        }
-
-        IonDrawable drawable = setIonDrawable(imageView, null, 0);
-        doAnimation(imageView, loadAnimation, loadAnimationResource);
-        IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
-        imageViewFuture.reset();
-        drawable.register(ion, bitmapFetcher.bitmapKey);
-        return imageViewFuture;
-    }
-
     @Override
     public Future<Bitmap> asBitmap() {
         if (builder.uri == null) {
@@ -306,65 +215,6 @@ public ImageViewFuture intoImageView(ImageView imageView) {
         return ret;
     }
 
-    @Override
-    public IonBitmapRequestBuilder crossfade() {
-        ImageView iv = imageViewPostRef.get();
-        Drawable drawable = iv.getDrawable();
-        if (drawable instanceof IonDrawable) {
-            IonDrawable ionDrawable = (IonDrawable)drawable;
-            drawable = ionDrawable.getCurrentDrawable();
-        }
-        return placeholder(drawable);
-    }
-
-    @Override
-    public IonBitmapRequestBuilder placeholder(Drawable drawable) {
-        placeholderDrawable = drawable;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder placeholder(int resourceId) {
-        placeholderResource = resourceId;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder error(Drawable drawable) {
-        errorDrawable = drawable;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder error(int resourceId) {
-        errorResource = resourceId;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder animateIn(Animation in) {
-        inAnimation = in;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder animateLoad(Animation load) {
-        loadAnimation = load;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder animateLoad(int animationResource) {
-        loadAnimationResource = animationResource;
-        return this;
-    }
-
-    @Override
-    public IonBitmapRequestBuilder animateIn(int animationResource) {
-        inAnimationResource = animationResource;
-        return this;
-    }
-
     @Override
     public IonBitmapRequestBuilder centerCrop() {
         if (hasTransforms()) {
@@ -403,6 +253,16 @@ public IonBitmapRequestBuilder resize(int width, int height) {
         return this;
     }
 
+    @Override
+    public IonBitmapRequestBuilder resizeWidth(int width) {
+        return resize(width, 0);
+    }
+
+    @Override
+    public IonBitmapRequestBuilder resizeHeight(int height) {
+        return resize(0, height);
+    }
+
     @Override
     public IonBitmapRequestBuilder disableFadeIn() {
         this.disableFadeIn = true;
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 5f15fce7..8cd3219f 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -1,12 +1,15 @@
 package com.koushikdutta.ion;
 
 import android.content.res.Resources;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.ColorFilter;
+import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
 import android.graphics.Rect;
+import android.graphics.RectF;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Looper;
@@ -42,11 +45,6 @@
     private int resizeHeight;
     private Ion ion;
 
-    public IonDrawable cancel() {
-        requestCount++;
-        return this;
-    }
-
     public IonDrawable ion(Ion ion) {
         this.ion = ion;
         return this;
@@ -64,6 +62,10 @@ public Drawable getCurrentDrawable() {
         return null;
     }
 
+    public BitmapInfo getBitmapInfo() {
+        return info;
+    }
+
     public static class ImageViewFutureImpl extends SimpleFuture<ImageView> implements ImageViewFuture {
         @Override
         public Future<ImageViewBitmapInfo> withBitmapInfo() {
@@ -113,7 +115,6 @@ public IonDrawable setInAnimation(Animation inAnimation, int inAnimationResource
         private ImageViewFutureImpl imageViewFuture = new ImageViewFutureImpl();
         private Animation inAnimation;
         private int inAnimationResource;
-        private int requestId;
 
         public IonDrawableCallback(IonDrawable drawable, ImageView imageView) {
             ionDrawableRef = new WeakReference<IonDrawable>(drawable);
@@ -136,10 +137,6 @@ public void onCompleted(Exception e, BitmapInfo result) {
             if (imageView.getDrawable() != drawable)
                 return;
 
-            // see if the ImageView is still waiting for the same request
-            if (drawable.requestCount != requestId)
-                return;
-
             imageView.setImageDrawable(null);
             drawable.setBitmap(result, result.loadedFrom);
             imageView.setImageDrawable(drawable);
@@ -154,26 +151,25 @@ public void onCompleted(Exception e, BitmapInfo result) {
         }
     }
 
-    int requestCount;
-    public void register(Ion ion, String bitmapKey) {
-        callback.requestId = ++requestCount;
-        String previousKey = callback.bitmapKey;
-        if (TextUtils.equals(previousKey, bitmapKey))
-            return;
-        callback.bitmapKey = bitmapKey;
-        ion.bitmapsPending.add(bitmapKey, callback);
-        if (previousKey == null)
+    public void cancel() {
+        if (callback.bitmapKey == null)
             return;
+        ion.bitmapsPending.removeItem(callback.bitmapKey, callback);
+        callback.bitmapKey = null;
+    }
 
+    private static void unregister(Ion ion, String key, IonDrawableCallback callback) {
+        if (key == null)
+            return;
         // unregister this drawable from the bitmaps that are
         // pending.
 
         // if this drawable was the only thing waiting for this bitmap,
         // then the removeItem call will return the TransformBitmap/LoadBitmap instance
         // that was providing the result.
-        if (ion.bitmapsPending.removeItem(previousKey, callback)) {
+        if (ion.bitmapsPending.removeItem(key, callback)) {
             // find out who owns this thing, to see if it is a candidate for removal
-            Object owner = ion.bitmapsPending.tag(previousKey);
+            Object owner = ion.bitmapsPending.tag(key);
             if (owner instanceof TransformBitmap) {
                 TransformBitmap info = (TransformBitmap)owner;
                 ion.bitmapsPending.remove(info.key);
@@ -191,6 +187,15 @@ public void register(Ion ion, String bitmapKey) {
         ion.processDeferred();
     }
 
+    public void register(Ion ion, String bitmapKey) {
+        String previousKey = callback.bitmapKey;
+        if (TextUtils.equals(previousKey, bitmapKey))
+            return;
+        callback.bitmapKey = bitmapKey;
+        ion.bitmapsPending.add(bitmapKey, callback);
+        unregister(ion, previousKey, callback);
+    }
+
     private static final int DEFAULT_PAINT_FLAGS = Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG;
 
     public IonDrawable(Resources resources, ImageView imageView) {
@@ -205,7 +210,6 @@ public IonDrawable(Resources resources, ImageView imageView) {
     private int maxLevel;
     public IonDrawable setBitmap(BitmapInfo info, int loadedFrom) {
         this.loadedFrom = loadedFrom;
-        requestCount++;
 
         if (this.info == info)
             return this;
@@ -251,21 +255,25 @@ public IonDrawable setSize(int resizeWidth, int resizeHeight) {
     }
 
     public IonDrawable setError(int resource, Drawable drawable) {
-        if ((drawable != null && drawable == this.error) || (resource != 0 && resource == errorResource))
+        if ((drawable != null && drawable == error) || (resource != 0 && resource == errorResource))
             return this;
 
-        this.errorResource = resource;
-        this.error = drawable;
+        errorResource = resource;
+        if (error != null)
+            error.setCallback(null);
+        error = drawable;
         invalidateSelf();
         return this;
     }
 
     public IonDrawable setPlaceholder(int resource, Drawable drawable) {
-        if ((drawable != null && drawable == this.placeholder) || (resource != 0 && resource == placeholderResource))
+        if ((drawable != null && drawable == placeholder) || (resource != 0 && resource == placeholderResource))
             return this;
 
-        this.placeholderResource = resource;
-        this.placeholder = drawable;
+        placeholderResource = resource;
+        if (placeholder != null)
+            placeholder.setCallback(null);
+        placeholder = drawable;
         invalidateSelf();
 
         return this;
@@ -283,36 +291,66 @@ public void setDither(boolean dither) {
         invalidateSelf();
     }
 
+    Callback drawableCallback = new Callback() {
+        @Override
+        public void invalidateDrawable(Drawable who) {
+            IonDrawable.this.invalidateSelf();
+        }
+
+        @Override
+        public void scheduleDrawable(Drawable who, Runnable what, long when) {
+            IonDrawable.this.scheduleSelf(what, when);
+        }
+
+        @Override
+        public void unscheduleDrawable(Drawable who, Runnable what) {
+            IonDrawable.this.unscheduleSelf(what);
+        }
+    };
+
     private Drawable tryGetErrorResource() {
         if (error != null)
             return error;
         if (errorResource == 0)
             return null;
-        return error = resources.getDrawable(errorResource);
+        error = resources.getDrawable(errorResource);
+        error.setCallback(drawableCallback);
+        return error;
+    }
+
+    private Drawable tryGetPlaceholderResource() {
+        if (placeholder != null)
+            return placeholder;
+        if (placeholderResource == 0)
+            return null;
+        placeholder = resources.getDrawable(placeholderResource);
+        placeholder.setCallback(drawableCallback);
+        return placeholder;
     }
 
     @Override
     public int getIntrinsicWidth() {
+        // first check if image was loaded
         if (info != null) {
             if (info.decoder != null)
                 return info.originalSize.x;
             if (info.bitmaps != null)
                 return info.bitmaps[0].getScaledWidth(resources.getDisplayMetrics().densityDpi);
         }
+        // check eventual image size...
         if (resizeWidth > 0)
             return resizeWidth;
+        // no image, but there was an error
         if (info != null) {
             Drawable error = tryGetErrorResource();
             if (error != null)
                 return error.getIntrinsicWidth();
         }
-        if (placeholder != null) {
+        // check placeholder
+        Drawable placeholder = tryGetPlaceholderResource();
+        if (placeholder != null)
             return placeholder.getIntrinsicWidth();
-        } else if (placeholderResource != 0) {
-            Drawable d = resources.getDrawable(placeholderResource);
-            assert d != null;
-            return d.getIntrinsicWidth();
-        }
+        // we're SOL
         return -1;
     }
 
@@ -327,21 +365,13 @@ public int getIntrinsicHeight() {
         if (resizeHeight > 0)
             return resizeHeight;
         if (info != null) {
-            if (error != null) {
+            Drawable error = tryGetErrorResource();
+            if (error != null)
                 return error.getIntrinsicHeight();
-            } else if (errorResource != 0) {
-                Drawable d = resources.getDrawable(errorResource);
-                assert d != null;
-                return d.getIntrinsicHeight();
-            }
         }
-        if (placeholder != null) {
+        Drawable placeholder = tryGetPlaceholderResource();
+        if (placeholder != null)
             return placeholder.getIntrinsicHeight();
-        } else if (placeholderResource != 0) {
-            Drawable d = resources.getDrawable(placeholderResource);
-            assert d != null;
-            return d.getIntrinsicHeight();
-        }
         return -1;
     }
 
@@ -365,16 +395,59 @@ public void onCompleted(Exception e, BitmapInfo result) {
         }
     };
 
+    private void drawDrawable(Canvas canvas, Drawable d) {
+        if (d == null)
+            return;
+
+        if (false) {
+            // this centers inside and draws the drawable
+            d.setBounds(0 , 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());
+            int count = canvas.save();
+            Matrix matrix = new Matrix();
+            matrix.setRectToRect(new RectF(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight()),
+            new RectF(canvas.getClipBounds()), Matrix.ScaleToFit.CENTER);
+            canvas.concat(matrix);
+
+            float scale = (float)canvas.getClipBounds().width() / canvas.getWidth();
+            canvas.scale(scale, scale, d.getIntrinsicWidth() / 2, d.getIntrinsicHeight() / 2);
+
+            d.draw(canvas);
+            canvas.restoreToCount(count);
+            return;
+        }
+        else if (false) {
+            // this centers fits and draws the drawable
+            int iw = d.getIntrinsicWidth();
+            int ih = d.getIntrinsicHeight();
+
+            Rect b = copyBounds();
+            int w = b.width();
+            int h = b.height();
+            if (iw >= 0) {
+                int wp = (w - iw) / 2;
+                b.left += wp;
+                b.right = b.left + iw;
+            }
+            if (ih >= 0) {
+                int hp = (h - ih) / 2;
+                b.top += hp;
+                b.bottom = b.top + ih;
+            }
+            d.setBounds(b);
+        }
+        else {
+            // fitxy the drwable
+            d.setBounds(getBounds());
+        }
+
+        d.draw(canvas);
+    }
+
     @Override
     public void draw(Canvas canvas) {
         // TODO: handle animated drawables
         if (info == null) {
-            if (placeholder == null && placeholderResource != 0)
-                placeholder = resources.getDrawable(placeholderResource);
-            if (placeholder != null) {
-                placeholder.setBounds(getBounds());
-                placeholder.draw(canvas);
-            }
+            drawDrawable(canvas, tryGetPlaceholderResource());
             return;
         }
 
@@ -389,11 +462,9 @@ public void draw(Canvas canvas) {
         }
 
         if (destAlpha != 255) {
-            if (placeholder == null && placeholderResource != 0)
-                placeholder = resources.getDrawable(placeholderResource);
+            Drawable placeholder = tryGetPlaceholderResource();
             if (placeholder != null) {
-                placeholder.setBounds(getBounds());
-                placeholder.draw(canvas);
+                drawDrawable(canvas, placeholder);
             }
         }
 
@@ -565,8 +636,7 @@ else if (info.bitmaps != null) {
             Drawable error = tryGetErrorResource();
             if (error != null) {
                 error.setAlpha((int)destAlpha);
-                error.setBounds(getBounds());
-                error.draw(canvas);
+                drawDrawable(canvas, error);
                 error.setAlpha(0xFF);
             }
         }
diff --git a/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
new file mode 100644
index 00000000..b116e163
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
@@ -0,0 +1,246 @@
+package com.koushikdutta.ion;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.os.Looper;
+import android.view.ViewGroup;
+import android.view.animation.Animation;
+import android.widget.ImageView;
+
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.builder.Builders;
+import com.koushikdutta.ion.builder.ImageViewFutureBuilder;
+import com.koushikdutta.ion.future.ImageViewFuture;
+
+/**
+ * Created by koush on 7/4/14.
+ */
+public class IonImageViewRequestBuilder extends IonBitmapRequestBuilder implements Builders.IV.F, ImageViewFutureBuilder {
+    private static final IonDrawable.ImageViewFutureImpl FUTURE_IMAGEVIEW_NULL_URI = new IonDrawable.ImageViewFutureImpl() {
+        {
+            setComplete(new NullPointerException("uri"));
+        }
+    };
+
+    Drawable placeholderDrawable;
+    int placeholderResource;
+    Drawable errorDrawable;
+    int errorResource;
+    Animation inAnimation;
+    Animation loadAnimation;
+    int loadAnimationResource;
+    int inAnimationResource;
+    ContextReference.ImageViewContextReference imageViewPostRef;
+
+    public IonImageViewRequestBuilder(IonRequestBuilder builder) {
+        super(builder);
+    }
+
+    public IonImageViewRequestBuilder(Ion ion) {
+        super(ion);
+    }
+
+    @Override
+    void reset() {
+        super.reset();
+        imageViewPostRef = null;
+        placeholderDrawable = null;
+        placeholderResource = 0;
+        errorDrawable = null;
+        errorResource = 0;
+        inAnimation = null;
+        inAnimationResource = 0;
+        loadAnimation = null;
+        loadAnimationResource = 0;
+    }
+
+    @Override
+    protected IonRequestBuilder ensureBuilder() {
+        if (builder == null)
+            builder = new IonRequestBuilder(ContextReference.fromContext(imageViewPostRef.getContext().getApplicationContext()), ion);
+        return builder;
+    }
+
+    @Override
+    public ImageViewFuture load(String uri) {
+        ensureBuilder();
+        builder.load(uri);
+        return intoImageView(imageViewPostRef.get());
+    }
+
+    @Override
+    public Future<ImageView> load(String method, String url) {
+        ensureBuilder();
+        builder.load(method, url);
+        return intoImageView(imageViewPostRef.get());
+    }
+
+    IonImageViewRequestBuilder withImageView(ImageView imageView) {
+        imageViewPostRef = new ContextReference.ImageViewContextReference(imageView);
+        return this;
+    }
+
+    private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loadedFrom) {
+        IonDrawable ret = IonDrawable.getOrCreateIonDrawable(imageView)
+        .ion(ion)
+        .setBitmap(info, loadedFrom)
+        .setSize(resizeWidth, resizeHeight)
+        .setError(errorResource, errorDrawable)
+        .setPlaceholder(placeholderResource, placeholderDrawable)
+        .setInAnimation(inAnimation, inAnimationResource)
+        .setDisableFadeIn(disableFadeIn);
+        imageView.setImageDrawable(ret);
+        return ret;
+    }
+
+    @Override
+    public ImageViewFuture intoImageView(ImageView imageView) {
+        assert Thread.currentThread() == Looper.getMainLooper().getThread();
+        if (imageView == null)
+            throw new NullPointerException("imageView");
+
+        // no uri? just set a placeholder and bail
+        if (builder.uri == null) {
+            setIonDrawable(imageView, null, 0).cancel();
+            return FUTURE_IMAGEVIEW_NULL_URI;
+        }
+
+        // executeCache the request, see if we get a bitmap from cache.
+        BitmapFetcher bitmapFetcher = executeCache();
+        if (bitmapFetcher.info != null) {
+            doAnimation(imageView, null, 0);
+            IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher.info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
+            drawable.cancel();
+            IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
+            imageViewFuture.reset();
+            imageViewFuture.setComplete(bitmapFetcher.info.exception, imageView);
+            return imageViewFuture;
+        }
+
+        // nothing from cache, check to see if there's too many imageview loads
+        // already in progress
+        if (BitmapFetcher.shouldDeferImageView(ion)) {
+            bitmapFetcher.defer();
+        }
+        else {
+            bitmapFetcher.execute();
+        }
+
+        IonDrawable drawable = setIonDrawable(imageView, null, 0);
+        doAnimation(imageView, loadAnimation, loadAnimationResource);
+        IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
+        imageViewFuture.reset();
+        drawable.register(ion, bitmapFetcher.bitmapKey);
+        return imageViewFuture;
+    }
+
+    private Drawable getImageViewDrawable() {
+        ImageView iv = imageViewPostRef.get();
+        if (iv == null)
+            return null;
+        return iv.getDrawable();
+    }
+
+    @Override
+    public Bitmap getBitmap() {
+        Drawable d = getImageViewDrawable();
+        if (d == null)
+            return null;
+        if (d instanceof BitmapDrawable)
+            return ((BitmapDrawable)d).getBitmap();
+        if (!(d instanceof IonDrawable))
+            return null;
+        IonDrawable id = (IonDrawable)d;
+        d = id.getCurrentDrawable();
+        if (d instanceof BitmapDrawable)
+            return ((BitmapDrawable)d).getBitmap();
+        return null;
+    }
+
+    @Override
+    public BitmapInfo getBitmapInfo() {
+        Drawable d = getImageViewDrawable();
+        if (d == null)
+            return null;
+        if (!(d instanceof IonDrawable))
+            return null;
+        IonDrawable id = (IonDrawable)d;
+        return id.getBitmapInfo();
+    }
+
+
+    @Override
+    public IonImageViewRequestBuilder crossfade() {
+        ImageView iv = imageViewPostRef.get();
+        Drawable drawable = iv.getDrawable();
+        if (drawable instanceof IonDrawable) {
+            IonDrawable ionDrawable = (IonDrawable)drawable;
+            drawable = ionDrawable.getCurrentDrawable();
+        }
+        return placeholder(drawable);
+    }
+
+    @Override
+    protected void finalizeResize() {
+        if (resizeWidth > 0 && resizeHeight > 0)
+            return;
+        ImageView iv = imageViewPostRef.get();
+        ViewGroup.LayoutParams lp = iv.getLayoutParams();
+        if (lp == null)
+            return;
+        if (resizeWidth <= 0 && lp.width > 0)
+            resizeWidth = lp.width;
+        if (resizeHeight <= 0 && lp.height > 0)
+            resizeHeight = lp.height;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder placeholder(Drawable drawable) {
+        placeholderDrawable = drawable;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder placeholder(int resourceId) {
+        placeholderResource = resourceId;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder error(Drawable drawable) {
+        errorDrawable = drawable;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder error(int resourceId) {
+        errorResource = resourceId;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder animateIn(Animation in) {
+        inAnimation = in;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder animateLoad(Animation load) {
+        loadAnimation = load;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder animateLoad(int animationResource) {
+        loadAnimationResource = animationResource;
+        return this;
+    }
+
+    @Override
+    public IonImageViewRequestBuilder animateIn(int animationResource) {
+        inAnimationResource = animationResource;
+        return this;
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 1186af24..44c18b5b 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -59,7 +59,6 @@
 import com.koushikdutta.ion.gson.GsonArrayParser;
 import com.koushikdutta.ion.gson.GsonBody;
 import com.koushikdutta.ion.gson.GsonObjectParser;
-import com.koushikdutta.ion.gson.GsonParser;
 import com.koushikdutta.ion.gson.GsonSerializer;
 import com.koushikdutta.ion.gson.PojoBody;
 
@@ -583,7 +582,7 @@ public IonRequestBuilder progressHandler(ProgressCallback callback) {
             protected void cleanup() {
                 super.cleanup();
                 if (close)
-                    sink.close();
+                    sink.end();
             }
 
             EmitterTransform<T> self = this;
@@ -811,13 +810,13 @@ public IonRequestBuilder setMultipartContentType(String contentType) {
     }
 
     @Override
-    public IonBitmapRequestBuilder withBitmap() {
-        return new IonBitmapRequestBuilder(this);
+    public IonImageViewRequestBuilder withBitmap() {
+        return new IonImageViewRequestBuilder(this);
     }
 
     @Override
     public ImageViewFuture intoImageView(ImageView imageView) {
-        return new IonBitmapRequestBuilder(this).intoImageView(imageView);
+        return new IonImageViewRequestBuilder(this).intoImageView(imageView);
     }
 
     @Override
@@ -828,17 +827,17 @@ public IonRequestBuilder load(File file) {
 
     @Override
     public BitmapInfo asCachedBitmap() {
-        return new IonBitmapRequestBuilder(this).asCachedBitmap();
+        return new IonImageViewRequestBuilder(this).asCachedBitmap();
     }
 
     @Override
     public LocallyCachedStatus isLocallyCached() {
-        return new IonBitmapRequestBuilder(this).isLocallyCached();
+        return new IonImageViewRequestBuilder(this).isLocallyCached();
     }
 
     @Override
     public Future<Bitmap> asBitmap() {
-        return new IonBitmapRequestBuilder(this).asBitmap();
+        return new IonImageViewRequestBuilder(this).asBitmap();
     }
 
     String logTag;
diff --git a/ion/src/com/koushikdutta/ion/TransformBitmap.java b/ion/src/com/koushikdutta/ion/TransformBitmap.java
index 1dbc0e5e..26599eda 100644
--- a/ion/src/com/koushikdutta/ion/TransformBitmap.java
+++ b/ion/src/com/koushikdutta/ion/TransformBitmap.java
@@ -33,9 +33,9 @@ public String key() {
     }
 
     ArrayList<Transform> transforms;
-    PostProcess postProcess;
+    ArrayList<PostProcess> postProcess;
 
-    public static void getBitmapSnapshot(final Ion ion, final String transformKey, final PostProcess postProcess) {
+    public static void getBitmapSnapshot(final Ion ion, final String transformKey, final ArrayList<PostProcess> postProcess) {
         // don't do this if this is already loading
         if (ion.bitmapsPending.tag(transformKey) != null)
             return;
@@ -57,8 +57,11 @@ public void run() {
                     BitmapInfo info = new BitmapInfo(transformKey, "image/jpeg", new Bitmap[] { bitmap }, size);
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
 
-                    if (postProcess != null)
-                        postProcess.postProcess(info);
+                    if (postProcess != null) {
+                        for (PostProcess p: postProcess) {
+                            p.postProcess(info);
+                        }
+                    }
 
                     callback.report(null, info);
                 }
@@ -77,7 +80,7 @@ public void run() {
     }
 
     String downloadKey;
-    public TransformBitmap(Ion ion, String transformKey, String downloadKey, ArrayList<Transform> transforms, PostProcess postProcess) {
+    public TransformBitmap(Ion ion, String transformKey, String downloadKey, ArrayList<Transform> transforms, ArrayList<PostProcess> postProcess) {
         super(ion, transformKey, true);
         this.transforms = transforms;
         this.downloadKey = downloadKey;
@@ -123,8 +126,11 @@ public void run() {
                     info.delays = result.delays;
                     info.loadedFrom = result.loadedFrom;
 
-                    if (postProcess != null)
-                        postProcess.postProcess(info);
+                    if (postProcess != null) {
+                        for (PostProcess p: postProcess) {
+                            p.postProcess(info);
+                        }
+                    }
 
                     report(null, info);
                 }
diff --git a/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java b/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
index f7127484..3fa825fb 100644
--- a/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
@@ -22,6 +22,22 @@
      */
     public B resize(int width, int height);
 
+    /**
+     * Resize the bitmap to the given width dimension, maintaining
+     * the aspect ratio of the height.
+     * @param width
+     * @return
+     */
+    public B resizeWidth(int width);
+
+    /**
+     * Resize the bitmap to the given height dimension, maintaining
+     * the aspect ratio of the width.
+     * @param height
+     * @return
+     */
+    public B resizeHeight(int height);
+
     /**
      * Center the image inside of the bounds specified by the ImageView or resize
      * operation. This will scale the image so that it fills the bounds, and crops
diff --git a/ion/src/com/koushikdutta/ion/builder/Builders.java b/ion/src/com/koushikdutta/ion/builder/Builders.java
index 7675a2de..6e6a0b5b 100644
--- a/ion/src/com/koushikdutta/ion/builder/Builders.java
+++ b/ion/src/com/koushikdutta/ion/builder/Builders.java
@@ -1,5 +1,9 @@
 package com.koushikdutta.ion.builder;
 
+import android.graphics.Bitmap;
+
+import com.koushikdutta.ion.bitmap.BitmapInfo;
+
 /**
  * Created by koush on 6/10/13.
  */
@@ -7,6 +11,8 @@
 
     public interface IV {
         public interface F<A extends F<?>> extends ImageViewBuilder<A>, BitmapBuilder<A>, LoadImageViewFutureBuilder {
+            BitmapInfo getBitmapInfo();
+            Bitmap getBitmap();
         }
     }
 
diff --git a/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java b/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java
index c438475b..3a38039f 100644
--- a/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java
@@ -1,14 +1,6 @@
 package com.koushikdutta.ion.builder;
 
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.reflect.TypeToken;
-import com.koushikdutta.async.future.Future;
-
-import org.w3c.dom.Document;
-
 import java.io.File;
-import java.io.InputStream;
 
 /**
 * Created by koush on 5/30/13.
diff --git a/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java b/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
index 5df2ac6f..0964c791 100644
--- a/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
+++ b/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
@@ -2,11 +2,9 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.net.Uri;
 import android.text.TextUtils;
 import android.util.Log;
 
-import com.koushikdutta.async.http.Multimap;
 import com.koushikdutta.async.http.SimpleMiddleware;
 import com.koushikdutta.async.http.libcore.RawHeaders;
 
diff --git a/ion-test/assets/exif.jpg b/ion/test/assets/exif.jpg
similarity index 100%
rename from ion-test/assets/exif.jpg
rename to ion/test/assets/exif.jpg
diff --git a/ion-test/res/.gitignore b/ion/test/res/.gitignore
similarity index 100%
rename from ion-test/res/.gitignore
rename to ion/test/res/.gitignore
diff --git a/ion-test/src/com/koushikdutta/ion/test/AssetTests.java b/ion/test/src/com/koushikdutta/ion/test/AssetTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/AssetTests.java
rename to ion/test/src/com/koushikdutta/ion/test/AssetTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/AuthTests.java b/ion/test/src/com/koushikdutta/ion/test/AuthTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/AuthTests.java
rename to ion/test/src/com/koushikdutta/ion/test/AuthTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java b/ion/test/src/com/koushikdutta/ion/test/BitmapTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
rename to ion/test/src/com/koushikdutta/ion/test/BitmapTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/CompileTests.java b/ion/test/src/com/koushikdutta/ion/test/CompileTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/CompileTests.java
rename to ion/test/src/com/koushikdutta/ion/test/CompileTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/CookieTests.java b/ion/test/src/com/koushikdutta/ion/test/CookieTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/CookieTests.java
rename to ion/test/src/com/koushikdutta/ion/test/CookieTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/CustomParserTests.java b/ion/test/src/com/koushikdutta/ion/test/CustomParserTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/CustomParserTests.java
rename to ion/test/src/com/koushikdutta/ion/test/CustomParserTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/ExceptionTests.java b/ion/test/src/com/koushikdutta/ion/test/ExceptionTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/ExceptionTests.java
rename to ion/test/src/com/koushikdutta/ion/test/ExceptionTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/ExifTests.java b/ion/test/src/com/koushikdutta/ion/test/ExifTests.java
similarity index 82%
rename from ion-test/src/com/koushikdutta/ion/test/ExifTests.java
rename to ion/test/src/com/koushikdutta/ion/test/ExifTests.java
index 642d3732..321ca21d 100644
--- a/ion-test/src/com/koushikdutta/ion/test/ExifTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/ExifTests.java
@@ -11,7 +11,7 @@
 public class ExifTests extends AndroidTestCase {
     public void testRotated() throws Exception {
         Bitmap bitmap = Ion.with(getContext())
-        .load("https://raw.github.com/koush/ion/master/ion-test/assets/exif.jpg")
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion/test/assets/exif.jpg")
         .asBitmap()
         .get();
 
diff --git a/ion-test/src/com/koushikdutta/ion/test/FileTests.java b/ion/test/src/com/koushikdutta/ion/test/FileTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/FileTests.java
rename to ion/test/src/com/koushikdutta/ion/test/FileTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/GsonTests.java b/ion/test/src/com/koushikdutta/ion/test/GsonTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/GsonTests.java
rename to ion/test/src/com/koushikdutta/ion/test/GsonTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/HeadersTests.java b/ion/test/src/com/koushikdutta/ion/test/HeadersTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/HeadersTests.java
rename to ion/test/src/com/koushikdutta/ion/test/HeadersTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java b/ion/test/src/com/koushikdutta/ion/test/HttpTests.java
similarity index 99%
rename from ion-test/src/com/koushikdutta/ion/test/HttpTests.java
rename to ion/test/src/com/koushikdutta/ion/test/HttpTests.java
index b64fd9de..bc09812f 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -93,7 +93,7 @@ public void onCompleted(Exception e, String result) {
     }
 
     public void testJsonObject() throws Exception {
-        JsonObject ret = Ion.with(getContext(),"https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        JsonObject ret = Ion.with(getContext(),"https://raw.githubusercontent.com/koush/AndroidAsync/master/AndroidAsync/test/assets/test.json")
                 .asJsonObject().get();
         assertEquals("bar", ret.get("foo").getAsString());
     }
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issues.java b/ion/test/src/com/koushikdutta/ion/test/Issues.java
similarity index 88%
rename from ion-test/src/com/koushikdutta/ion/test/Issues.java
rename to ion/test/src/com/koushikdutta/ion/test/Issues.java
index 925d46a6..e43c584b 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issues.java
+++ b/ion/test/src/com/koushikdutta/ion/test/Issues.java
@@ -4,7 +4,6 @@
 import android.test.AndroidTestCase;
 import android.util.Base64;
 import android.util.Log;
-import android.widget.TextView;
 
 import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.FutureCallback;
@@ -12,7 +11,7 @@
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
 import com.koushikdutta.async.http.server.HttpServerRequestCallback;
-import com.koushikdutta.async.util.*;
+import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 
 import java.io.File;
@@ -145,10 +144,21 @@ public void testIssue253() throws Exception {
         assertEquals(b64, data);
     }
 
-    public void testIssue187() throws Exception {
+    /*
+    public void testSSLv3Workaround() throws Exception {
+        Ion.getDefault(getContext())
+        .getHttpClient()
+        .getSSLSocketMiddleware()
+        .addEngineConfigurator(new AsyncSSLEngineConfigurator() {
+            @Override
+            public void configureEngine(SSLEngine engine) {
+                engine.setEnabledProtocols(new String[] { "SSLv3" });
+            }
+        });
         Ion.with(getContext())
-        .load("https://www.google.com/")
-        .setLogging("iontest", Log.VERBOSE)
-        .asString().get();
+        .load("https://members.easynews.com/dl/893b36f51a28bb066a7401e2850ecf2401cdd97a1.jpg/Kittens-and-Puppies-13_graylady.jpg")
+        .asString()
+        .get();
     }
+    */
 }
diff --git a/ion-test/src/com/koushikdutta/ion/test/Md5.java b/ion/test/src/com/koushikdutta/ion/test/Md5.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/Md5.java
rename to ion/test/src/com/koushikdutta/ion/test/Md5.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/ProgressTests.java b/ion/test/src/com/koushikdutta/ion/test/ProgressTests.java
similarity index 72%
rename from ion-test/src/com/koushikdutta/ion/test/ProgressTests.java
rename to ion/test/src/com/koushikdutta/ion/test/ProgressTests.java
index e347152d..8fe0ffdc 100644
--- a/ion-test/src/com/koushikdutta/ion/test/ProgressTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/ProgressTests.java
@@ -28,28 +28,29 @@ public void testProgress() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
         final Semaphore progressSemaphore = new Semaphore(0);
         final Md5 md5 = Md5.createInstance();
-        Ion.with(getContext(), "https://github.com/koush/AndroidAsync/raw/master/AndroidAsyncTest/testdata/6691924d7d24237d3b3679310157d640")
-                .setHandler(null)
-                .setTimeout(600000)
-                .progress(new ProgressCallback() {
-                    @Override
-                    public void onProgress(long downloaded, long total) {
-                        // depending on gzip, etc. the total may vary... the actual length of the uncompressed data
-                        // is 100000
-                        assertTrue(total > 90000 && total < 110000);
-                        progressSemaphore.release();
-                    }
-                })
-                .write(new ByteArrayOutputStream())
-                .setCallback(new FutureCallback<ByteArrayOutputStream>() {
-                    @Override
-                    public void onCompleted(Exception e, ByteArrayOutputStream result) {
-                        byte[] bytes = result.toByteArray();
-                        md5.update(new ByteBufferList(bytes));
-                        assertEquals(md5.digest(), dataNameAndHash);
-                        semaphore.release();
-                    }
-                });
+        Ion.with(getContext())
+        .load("https://raw.githubusercontent.com/koush/AndroidAsync/master/AndroidAsync/test/assets/6691924d7d24237d3b3679310157d640")
+        .setHandler(null)
+        .setTimeout(600000)
+        .progress(new ProgressCallback() {
+            @Override
+            public void onProgress(long downloaded, long total) {
+                // depending on gzip, etc. the total may vary... the actual length of the uncompressed data
+                // is 100000
+                assertTrue(total > 90000 && total < 110000);
+                progressSemaphore.release();
+            }
+        })
+        .write(new ByteArrayOutputStream())
+        .setCallback(new FutureCallback<ByteArrayOutputStream>() {
+            @Override
+            public void onCompleted(Exception e, ByteArrayOutputStream result) {
+                byte[] bytes = result.toByteArray();
+                md5.update(new ByteBufferList(bytes));
+                assertEquals(md5.digest(), dataNameAndHash);
+                semaphore.release();
+            }
+        });
         assertTrue(semaphore.tryAcquire(600000, TimeUnit.MILLISECONDS));
         assertTrue(progressSemaphore.tryAcquire(10000, TimeUnit.MILLISECONDS));
     }
diff --git a/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java b/ion/test/src/com/koushikdutta/ion/test/RedirectTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
rename to ion/test/src/com/koushikdutta/ion/test/RedirectTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java b/ion/test/src/com/koushikdutta/ion/test/StoreTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/StoreTests.java
rename to ion/test/src/com/koushikdutta/ion/test/StoreTests.java
diff --git a/ion-test/src/com/koushikdutta/ion/test/StreamTests.java b/ion/test/src/com/koushikdutta/ion/test/StreamTests.java
similarity index 100%
rename from ion-test/src/com/koushikdutta/ion/test/StreamTests.java
rename to ion/test/src/com/koushikdutta/ion/test/StreamTests.java
