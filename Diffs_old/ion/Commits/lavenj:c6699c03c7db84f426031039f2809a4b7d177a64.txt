diff --git a/ion-sample/ion-sample.iml b/ion-sample/ion-sample.iml
index 751611c4..d91d4670 100644
--- a/ion-sample/ion-sample.iml
+++ b/ion-sample/ion-sample.iml
@@ -17,9 +17,9 @@
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
     </content>
-    <orderEntry type="jdk" jdkName="Android 4.2.2 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="ion" />
   </component>
diff --git a/ion-sample/project.properties b/ion-sample/project.properties
index 5f8422a2..fc12c4df 100644
--- a/ion-sample/project.properties
+++ b/ion-sample/project.properties
@@ -11,6 +11,6 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-17
+target=android-19
 android.library.reference.1=../ion
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java b/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
index 30517ae7..235fb968 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
@@ -60,7 +60,7 @@ public void onCreate(Bundle savedInstanceState) {
 //        .build());
         super.onCreate(savedInstanceState);
 
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.gallery);
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java b/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
index ed8b0e4d..74a279c0 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
@@ -98,7 +98,7 @@ public void onCreate(Bundle savedInstanceState) {
 //        .build());
         super.onCreate(savedInstanceState);
 
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.google_image_search);
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
index d190781c..b0c36567 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
@@ -30,7 +30,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         // Enable global Ion logging
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.progress);
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java b/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
index 9b2be2cd..d36fcd47 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
@@ -46,7 +46,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         // Enable global Ion logging
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         // create a tweet adapter for our list view
         tweetAdapter = new ArrayAdapter<Tweet>(this, 0) {
diff --git a/ion-test/ion-test.iml b/ion-test/ion-test.iml
index c089e12a..d91d4670 100644
--- a/ion-test/ion-test.iml
+++ b/ion-test/ion-test.iml
@@ -17,9 +17,9 @@
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
     </content>
-    <orderEntry type="jdk" jdkName="Android 4.3 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="ion" />
   </component>
diff --git a/ion-test/project.properties b/ion-test/project.properties
index 66efd6aa..e2b2c2ac 100644
--- a/ion-test/project.properties
+++ b/ion-test/project.properties
@@ -1,5 +1,5 @@
 # This file is automatically generated by IntelliJ IDEA
 # Project target.
-target=android-18
+target=android-19
 android.library.reference.1=../ion
 
diff --git a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
index df5d1f4d..156dfe05 100644
--- a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
@@ -3,7 +3,9 @@
 import android.graphics.Bitmap;
 import android.test.AndroidTestCase;
 
+import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.ion.Ion;
 
 import java.util.concurrent.Semaphore;
@@ -15,6 +17,7 @@
 public class BitmapTests extends AndroidTestCase {
     public void testBitmapCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
+        // todo: local resource
         Ion.with(getContext())
         .load("http://media.salon.com/2013/05/original.jpg")
         .asBitmap()
@@ -28,4 +31,39 @@ public void onCompleted(Exception e, Bitmap result) {
         });
         semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
     }
+
+    public void test404() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.listen(5566);
+        try {
+            final Semaphore semaphore = new Semaphore(0);
+            Ion.with(getContext())
+            .load("http://localhost:5566/foo.png")
+            .asBitmap()
+            .setCallback(new FutureCallback<Bitmap>() {
+                @Override
+                public void onCompleted(Exception e, Bitmap result) {
+                    semaphore.release();
+                    assertNotNull(e);
+                }
+            });
+            semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
+
+            Ion.with(getContext())
+            .load("http://localhost:5566/foo.png")
+            .asBitmap()
+            .setCallback(new FutureCallback<Bitmap>() {
+                @Override
+                public void onCompleted(Exception e, Bitmap result) {
+                    semaphore.release();
+                    assertNotNull(e);
+                }
+            });
+            semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
+        }
+        finally {
+            httpServer.stop();
+            AsyncServer.getDefault().stop();
+        }
+    }
 }
diff --git a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
index 749bc8c5..809c4567 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -32,12 +32,6 @@
  * Created by koush on 5/22/13.
  */
 public class HttpTests extends AndroidTestCase {
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        Ion.getDefault(getContext()).setLogging("HttpTests", Log.DEBUG);
-    }
-
     public void testString() throws Exception {
         assertNotNull(Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
                 .asString().get());
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issue74.java b/ion-test/src/com/koushikdutta/ion/test/Issue74.java
index be8b92c1..da41005a 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issue74.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Issue74.java
@@ -10,8 +10,6 @@
  */
 public class Issue74 extends AndroidTestCase {
     public void testIssue() throws Exception {
-        Ion.getDefault(getContext()).getResponseCache().clear();
-
         String data = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
         .setLogging("MyLogs", Log.VERBOSE)
         .asString().get();
diff --git a/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java b/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
index ed9b2e2d..dcd32e93 100644
--- a/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
@@ -16,7 +16,6 @@
 public class RedirectTests extends AndroidTestCase {
     public void testFinalLocation() throws Exception {
         try {
-            Ion.getDefault(getContext()).setLogging("redirect", Log.VERBOSE);
             AsyncHttpServer server = new AsyncHttpServer();
             server.listen(Ion.getDefault(getContext()).getServer(), 5555);
             server.get("/", new HttpServerRequestCallback() {
diff --git a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
new file mode 100644
index 00000000..c95d3f79
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
@@ -0,0 +1,80 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+
+import com.google.gson.JsonObject;
+import com.koushikdutta.ion.Ion;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Created by koush on 11/20/13.
+ */
+public class StoreTests extends AndroidTestCase {
+    public void testString() throws Exception {
+        Ion.getDefault(getContext())
+        .store()
+        .remove("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        Ion.getDefault(getContext())
+        .store()
+        .putString("foo", "bar")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        String result = Ion.getDefault(getContext())
+        .store()
+        .getString("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        assertEquals(result, "bar");
+    }
+
+    public void testJson() throws Exception {
+        Ion.getDefault(getContext())
+        .store()
+        .remove("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        JsonObject json = new JsonObject();
+        json.addProperty("foo", "bar");
+
+        Ion.getDefault(getContext())
+        .store()
+        .putJsonObject("foo", json)
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        JsonObject result = Ion.getDefault(getContext())
+        .store()
+        .getJsonObject("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        assertEquals(result.get("foo").getAsString(), "bar");
+    }
+
+    public static class TestClass {
+        public String foo;
+    }
+
+    public void testGson() throws Exception {
+        Ion.getDefault(getContext())
+        .store()
+        .remove("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        TestClass test = new TestClass();
+        test.foo = "bar";
+
+        Ion.getDefault(getContext())
+        .store()
+        .put("foo", test, TestClass.class)
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        TestClass result = Ion.getDefault(getContext())
+        .store()
+        .get("foo", TestClass.class)
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        assertEquals(result.foo, "bar");
+    }
+}
diff --git a/ion/ion.iml b/ion/ion.iml
index c18c5d55..2494382d 100644
--- a/ion/ion.iml
+++ b/ion/ion.iml
@@ -18,7 +18,7 @@
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
     </content>
     <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
diff --git a/ion/src/com/koushikdutta/ion/BitmapCallback.java b/ion/src/com/koushikdutta/ion/BitmapCallback.java
index 6fecf7e5..a5a1ba3b 100644
--- a/ion/src/com/koushikdutta/ion/BitmapCallback.java
+++ b/ion/src/com/koushikdutta/ion/BitmapCallback.java
@@ -35,6 +35,7 @@ public void run() {
                     result = new BitmapInfo();
                     result.bitmaps = null;
                     result.key = key;
+                    result.exception = e;
                     ion.getBitmapCache().put(result);
                 } else if (put()) {
                     ion.getBitmapCache().put(result);
diff --git a/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java b/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
index 02fb0aba..72739cb7 100644
--- a/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
@@ -27,7 +27,7 @@ public void run() {
                 final LoadBitmap callback = new LoadBitmap(ion, transformKey, true, -1, -1, null);
 
                 try {
-                    DiskLruCache.Snapshot snapshot = ion.getResponseCache().getDiskLruCache().get(transformKey);
+                    DiskLruCache.Snapshot snapshot = ion.responseCache.getDiskLruCache().get(transformKey);
                     try {
                         InputStream in = snapshot.getInputStream(0);
                         assert in instanceof FileInputStream;
@@ -44,7 +44,7 @@ public void run() {
                 catch (Exception e) {
                     callback.onCompleted(e, null);
                     try {
-                        ion.getResponseCache().getDiskLruCache().remove(transformKey);
+                        ion.responseCache.getDiskLruCache().remove(transformKey);
                     }
                     catch (Exception ex) {
                     }
@@ -97,7 +97,7 @@ public void run() {
                 if (info.bitmaps.length > 1)
                     return;
                 try {
-                    DiskLruCache cache = ion.getResponseCache().getDiskLruCache();
+                    DiskLruCache cache = ion.responseCache.getDiskLruCache();
                     if (cache == null)
                         return;
                     DiskLruCache.Editor editor = cache.edit(key);
diff --git a/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java b/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
new file mode 100644
index 00000000..c0563b32
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
@@ -0,0 +1,207 @@
+package com.koushikdutta.ion;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.reflect.TypeToken;
+import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.future.SimpleFuture;
+import com.koushikdutta.async.http.ResponseCacheMiddleware;
+import com.koushikdutta.async.http.libcore.DiskLruCache;
+import com.koushikdutta.async.parser.AsyncParser;
+import com.koushikdutta.async.parser.DocumentParser;
+import com.koushikdutta.async.parser.StringParser;
+import com.koushikdutta.async.stream.InputStreamDataEmitter;
+import com.koushikdutta.async.stream.OutputStreamDataSink;
+import com.koushikdutta.ion.gson.GsonParser;
+import com.koushikdutta.ion.gson.GsonSerializer;
+
+import org.w3c.dom.Document;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+/**
+ * Created by koush on 11/17/13.
+ */
+public class DiskLruCacheStore {
+    Ion ion;
+    DiskLruCache cache;
+    DiskLruCacheStore(Ion ion, DiskLruCache cache) {
+        this.ion = ion;
+        this.cache = cache;
+    }
+
+    private <T> Future<T> put(final String rawKey, final T value, final AsyncParser<T> parser) {
+        final SimpleFuture<T> ret = new SimpleFuture<T>();
+        ion.getServer().getExecutorService().execute(new Runnable() {
+            @Override
+            public void run() {
+                final DiskLruCache.Editor editor;
+                try {
+                    final String key = ResponseCacheMiddleware.toKeyString("ion-store:" + rawKey);
+                    editor = cache.edit(key);
+                }
+                catch (Exception e) {
+                    ret.setComplete(e);
+                    return;
+                }
+                final OutputStream out;
+                try {
+                    out = editor.newOutputStream(0);
+                    for (int i = 1; i < cache.getValueCount(); i++) {
+                        editor.newOutputStream(i).close();
+                    }
+                }
+                catch (Exception e) {
+                    try {
+                        editor.abort();
+                    }
+                    catch (Exception ex) {
+                    }
+                    ret.setComplete(e);
+                    return;
+                }
+
+                if (editor == null) {
+                    ret.setComplete(new Exception("unable to edit"));
+                    return;
+                }
+                parser.write(new OutputStreamDataSink(ion.getServer(), out), value, new CompletedCallback() {
+                    @Override
+                    public void onCompleted(Exception ex) {
+                        if (ex == null) {
+                            try {
+                                out.close();
+                                editor.commit();
+                                ret.setComplete(value);
+                                return;
+                            }
+                            catch (Exception e) {
+                                ex = e;
+                            }
+                        }
+                        try {
+                            editor.abort();
+                        }
+                        catch (Exception e) {
+                        }
+                        ret.setComplete(ex);
+                    }
+                });
+            }
+        });
+        return ret;
+    }
+
+    public Future<String> putString(String key, String value) {
+        return put(key, value, new StringParser());
+    }
+
+    public Future<JsonObject> putJsonObject(String key, JsonObject value) {
+        return put(key, value, new GsonParser<JsonObject>());
+    }
+
+    public Future<Document> putDocument(String key, Document value) {
+        return put(key, value, new DocumentParser());
+    }
+
+    public Future<JsonArray> putJsonArray(String key, JsonArray value) {
+        return put(key, value, new GsonParser<JsonArray>());
+    }
+
+    /*
+    public Future<InputStream> putInputStream(InputStream value) {
+        throw new AssertionError("not implemented");
+    }
+
+    public Future<byte[]> putByteArray(byte[] bytes) {
+        throw new AssertionError("not implemented");
+    }
+    */
+
+    public <T> Future<T> put(String key, T value, Class<T> clazz) {
+        return put(key, value, new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    }
+
+    public <T> Future<T> put(String key, T value, TypeToken<T> token) {
+        return put(key, value, new GsonSerializer<T>(ion.configure().getGson(), token));
+    }
+    
+    private <T> Future<T> get(final String rawKey, final AsyncParser<T> parser) {
+        final SimpleFuture<T> ret = new SimpleFuture<T>();
+        
+        ion.getServer().getExecutorService().execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    final String key = ResponseCacheMiddleware.toKeyString("ion-store:" + rawKey);
+                    final DiskLruCache.Snapshot snapshot = cache.get(key);
+                    if (snapshot == null) {
+                        ret.setComplete((T)null);
+                        return;
+                    }
+                    InputStream inputStream = snapshot.getInputStream(0);
+                    InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getServer(), inputStream);
+                    parser.parse(emitter).setCallback(new FutureCallback<T>() {
+                        @Override
+                        public void onCompleted(Exception e, T result) {
+                            snapshot.close();
+                            if (e != null)
+                                ret.setComplete(e);
+                            else
+                                ret.setComplete(result);
+                        }
+                    });
+                }
+                catch (Exception e) {
+                }
+            }
+        });
+        
+        return ret;
+    }
+    
+    public Future<String> getString(String key) {
+        return get(key, new StringParser());
+    }
+
+    public Future<JsonObject> getJsonObject(String key) {
+        return get(key, new GsonParser<JsonObject>());
+    }
+
+    public Future<JsonArray> getJsonArray(String key) {
+        return get(key, new GsonParser<JsonArray>());
+    }
+
+    public Future<Document> getDocument(String key) {
+        return get(key, new DocumentParser());
+    }
+
+    public <T> Future<T> get(String key, Class<T> clazz) {
+        return get(key, new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    }
+
+    public <T> Future<T> get(String key, TypeToken<T> token) {
+        return get(key, new GsonSerializer<T>(ion.configure().getGson(), token));
+    }
+
+    public Future<String> remove(final String key) {
+        final SimpleFuture<String> ret = new SimpleFuture<String>();
+        ion.getServer().getExecutorService().execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    cache.remove(key);
+                    ret.setComplete(key);
+                }
+                catch (Exception e) {
+                    ret.setComplete(e);
+                }
+            }
+        });
+        return ret;
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/InputStreamParser.java b/ion/src/com/koushikdutta/ion/InputStreamParser.java
index 9ceb8cfb..af12d996 100644
--- a/ion/src/com/koushikdutta/ion/InputStreamParser.java
+++ b/ion/src/com/koushikdutta/ion/InputStreamParser.java
@@ -18,13 +18,13 @@
 public class InputStreamParser implements AsyncParser<InputStream> {
     @Override
     public Future<InputStream> parse(DataEmitter emitter) {
-        return new TransformFuture<InputStream, ByteBufferList>() {
+        return new ByteBufferListParser().parse(emitter)
+        .then(new TransformFuture<InputStream, ByteBufferList>() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 setComplete(new ByteBufferListInputStream(result));
             }
-        }
-        .from(new ByteBufferListParser().parse(emitter));
+        });
     }
 
     @Override
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index db6339bd..2af91967 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -15,7 +15,6 @@
 import android.os.Looper;
 import android.text.TextUtils;
 import android.util.Log;
-import android.view.ContextThemeWrapper;
 import android.widget.ImageView;
 
 import com.google.gson.Gson;
@@ -25,6 +24,7 @@
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
+import com.koushikdutta.async.http.libcore.DiskLruCache;
 import com.koushikdutta.async.http.libcore.RawHeaders;
 import com.koushikdutta.async.util.HashList;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
@@ -43,18 +43,10 @@
  * Created by koush on 5/21/13.
  */
 public class Ion {
-    public static final Handler mainHandler = new Handler(Looper.getMainLooper());
-    private static ExecutorService singleExecutorService  = Runtime.getRuntime().availableProcessors() < 2 ? null : Executors.newFixedThreadPool(1);
-
-    // todo: make this static by moving the server's executor service to static
-    public ExecutorService getBitmapLoadExecutorService() {
-        ExecutorService executorService = singleExecutorService;
-        if (executorService == null) {
-            executorService = getServer().getExecutorService();
-        }
-        return executorService;
-    }
-
+    static final Handler mainHandler = new Handler(Looper.getMainLooper());
+    static int availableProcessors = Runtime.getRuntime().availableProcessors();
+    static ExecutorService singleExecutorService  = availableProcessors > 2 ? null : Executors.newFixedThreadPool(1);
+    static HashMap<String, Ion> instances = new HashMap<String, Ion>();
 
     /**
      * Get the default Ion object instance and begin building a request
@@ -86,17 +78,6 @@ public ExecutorService getBitmapLoadExecutorService() {
     public static FutureBuilder with(Context context, File file) {
         return getDefault(context).build(context, file);
     }
-
-    /**
-     * Begin building an operation on the given file
-     * @param context
-     * @param file
-     * @return
-     */
-    public FutureBuilder build(Context context, File file) {
-        return new IonRequestBuilder(context, this).load(file);
-    }
-
     /**
      * Get the default Ion instance
      * @param context
@@ -106,8 +87,6 @@ public static Ion getDefault(Context context) {
         return getInstance(context, "ion");
     }
 
-    private static HashMap<String, Ion> instances = new HashMap<String, Ion>();
-
     /**
      * Get the given Ion instance by name
      * @param context
@@ -131,6 +110,77 @@ public static Ion getInstance(Context context, String name) {
         return ion.build(imageView);
     }
 
+    AsyncHttpClient httpClient;
+    CookieMiddleware cookieMiddleware;
+    ResponseCacheMiddleware responseCache;
+    DiskLruCache storeCache;
+    HttpLoader httpLoader;
+    ContentLoader contentLoader;
+    FileLoader fileLoader;
+    String logtag;
+    int logLevel;
+    Gson gson = new Gson();
+    String userAgent;
+    ArrayList<Loader> loaders = new ArrayList<Loader>();
+    String name;
+    HashList<FutureCallback<BitmapInfo>> bitmapsPending = new HashList<FutureCallback<BitmapInfo>>();
+    Config config = new Config();
+    IonBitmapCache bitmapCache;
+    Context context;
+    IonBitmapRequestBuilder bitmapBuilder = new IonBitmapRequestBuilder(this);
+
+    private Ion(Context context, String name) {
+        httpClient = new AsyncHttpClient(new AsyncServer());
+        this.context = context = context.getApplicationContext();
+        this.name = name;
+
+        try {
+            responseCache = ResponseCacheMiddleware.addCache(httpClient, new File(context.getCacheDir(), name), 10L * 1024L * 1024L);
+        }
+        catch (Exception e) {
+            IonLog.w("unable to set up response cache", e);
+        }
+        try {
+            storeCache = DiskLruCache.open(new File(context.getFilesDir(), name), 1, 1, Long.MAX_VALUE);
+        }
+        catch (Exception e) {
+        }
+
+        // TODO: Support pre GB?
+        if (Build.VERSION.SDK_INT >= 9)
+            addCookieMiddleware();
+
+        httpClient.getSocketMiddleware().setConnectAllAddresses(true);
+        httpClient.getSSLSocketMiddleware().setConnectAllAddresses(true);
+
+        bitmapCache = new IonBitmapCache(this);
+
+        configure()
+                .addLoader(new PackageIconLoader())
+                .addLoader(httpLoader = new HttpLoader())
+                .addLoader(contentLoader = new ContentLoader())
+                .addLoader(fileLoader = new FileLoader());
+    }
+
+    // todo: make this static by moving the server's executor service to static
+    public ExecutorService getBitmapLoadExecutorService() {
+        ExecutorService executorService = singleExecutorService;
+        if (executorService == null) {
+            executorService = getServer().getExecutorService();
+        }
+        return executorService;
+    }
+
+    /**
+     * Begin building an operation on the given file
+     * @param context
+     * @param file
+     * @return
+     */
+    public FutureBuilder build(Context context, File file) {
+        return new IonRequestBuilder(context, this).load(file);
+    }
+
     /**
      * Begin building a request with the given uri
      * @param context
@@ -150,7 +200,6 @@ public static Ion getInstance(Context context, String name) {
         return new IonRequestBuilder(context, this);
     }
 
-    IonBitmapRequestBuilder bitmapBuilder = new IonBitmapRequestBuilder(this);
     /**
      * Create a builder that can be used to build an network request
      * @param imageView
@@ -183,44 +232,6 @@ public void cancelAll(Object group) {
         }
     }
 
-    /**
-     * Route all http requests through the given proxy.
-     * @param host
-     * @param port
-     */
-    public void proxy(String host, int port) {
-        httpClient.getSocketMiddleware().enableProxy(host, port);
-    }
-
-    /**
-     * Route all https requests through the given proxy.
-     * Note that https proxying requires that the Android device has the appropriate
-     * root certificate installed to function properly.
-     * @param host
-     * @param port
-     */
-    public void proxySecure(String host, int port) {
-        httpClient.getSSLSocketMiddleware().enableProxy(host, port);
-    }
-
-    /**
-     * Disable routing of http requests through a previous provided proxy
-     */
-    public void disableProxy() {
-        httpClient.getSocketMiddleware().disableProxy();
-    }
-
-    /**
-     * Disable routing of https requests through a previous provided proxy
-     */
-    public void disableSecureProxy() {
-        httpClient.getSocketMiddleware().disableProxy();
-    }
-
-    void removeFutureInFlight(Future future, Object group) {
-
-    }
-
     void addFutureInFlight(Future future, Object group) {
         if (group == null || future == null || future.isDone() || future.isCancelled())
             return;
@@ -275,10 +286,10 @@ public int getPendingRequestCount(Object group) {
 
     public void dump() {
         bitmapCache.dump();
-        Log.i(LOGTAG, "Pending bitmaps: " + bitmapsPending.size());
-        Log.i(LOGTAG, "Groups: " + inFlight.size());
+        Log.i(logtag, "Pending bitmaps: " + bitmapsPending.size());
+        Log.i(logtag, "Groups: " + inFlight.size());
         for (FutureSet futures: inFlight.values()) {
-            Log.i(LOGTAG, "Group size: " + futures.size());
+            Log.i(logtag, "Group size: " + futures.size());
         }
     }
 
@@ -290,10 +301,6 @@ public Context getContext() {
         return context;
     }
 
-    AsyncHttpClient httpClient;
-    CookieMiddleware cookieMiddleware;
-    ResponseCacheMiddleware responseCache;
-
     static class FutureSet extends WeakHashMap<Future, Boolean> {
     }
     // maintain a list of futures that are in being processed, allow for bulk cancellation
@@ -303,60 +310,28 @@ private void addCookieMiddleware() {
         httpClient.insertMiddleware(cookieMiddleware = new CookieMiddleware(context, name));
     }
 
-    HttpLoader httpLoader;
-    ContentLoader contentLoader;
-    FileLoader fileLoader;
-
-    public HttpLoader getHttpLoader() {
-        return httpLoader;
-    }
-
-    public ContentLoader getContentLoader() {
-        return contentLoader;
-    }
-
-    public FileLoader getFileLoader() {
-        return fileLoader;
+    /**
+     * Get or put an item from the cache
+     * @param key
+     * @return
+     */
+    public DiskLruCacheStore cache() {
+        return new DiskLruCacheStore(this, responseCache.getDiskLruCache());
     }
 
-    public ResponseCacheMiddleware getResponseCache() {
-        return responseCache;
+    /**
+     * Get or put an item in the persistent store
+     * @param key
+     * @return
+     */
+    public DiskLruCacheStore store() {
+        return new DiskLruCacheStore(this, responseCache.getDiskLruCache());
     }
 
-    String name;
     public String getName() {
         return name;
     }
 
-    Context context;
-    private Ion(Context context, String name) {
-        httpClient = new AsyncHttpClient(new AsyncServer());
-        this.context = context = context.getApplicationContext();
-        this.name = name;
-
-        try {
-            responseCache = ResponseCacheMiddleware.addCache(httpClient, new File(context.getCacheDir(), name), 10L * 1024L * 1024L);
-        }
-        catch (Exception e) {
-            IonLog.w("unable to set up response cache", e);
-        }
-
-        // TODO: Support pre GB?
-        if (Build.VERSION.SDK_INT >= 9)
-            addCookieMiddleware();
-
-        httpClient.getSocketMiddleware().setConnectAllAddresses(true);
-        httpClient.getSSLSocketMiddleware().setConnectAllAddresses(true);
-
-        bitmapCache = new IonBitmapCache(this);
-
-        configure()
-        .addLoader(new PackageIconLoader())
-        .addLoader(httpLoader = new HttpLoader())
-        .addLoader(contentLoader = new ContentLoader())
-        .addLoader(fileLoader = new FileLoader());
-    }
-
     /**
      * Get the Cookie middleware that is attached to the AsyncHttpClient instance.
      * @return
@@ -381,8 +356,23 @@ public AsyncServer getServer() {
         return httpClient.getServer();
     }
 
-    public static class Config {
-        private Gson gson = new Gson();
+    public class Config {
+        public HttpLoader getHttpLoader() {
+            return httpLoader;
+        }
+
+        public ContentLoader getContentLoader() {
+            return contentLoader;
+        }
+
+        public FileLoader getFileLoader() {
+            return fileLoader;
+        }
+
+        public ResponseCacheMiddleware getResponseCache() {
+            return responseCache;
+        }
+
         /**
          * Get the Gson object in use by this Ion instance.
          * This can be used to customize serialization and deserialization
@@ -393,6 +383,52 @@ public Gson getGson() {
             return gson;
         }
 
+        /**
+         * Set the log level for all requests made by Ion.
+         * @param logtag
+         * @param logLevel
+         * @return
+         */
+        public Config setLogging(String logtag, int logLevel) {
+            Ion.this.logtag = logtag;
+            Ion.this.logLevel = logLevel;
+            return this;
+        }
+
+        /**
+         * Route all http requests through the given proxy.
+         * @param host
+         * @param port
+         */
+        public void proxy(String host, int port) {
+            httpClient.getSocketMiddleware().enableProxy(host, port);
+        }
+
+        /**
+         * Route all https requests through the given proxy.
+         * Note that https proxying requires that the Android device has the appropriate
+         * root certificate installed to function properly.
+         * @param host
+         * @param port
+         */
+        public void proxySecure(String host, int port) {
+            httpClient.getSSLSocketMiddleware().enableProxy(host, port);
+        }
+
+        /**
+         * Disable routing of http requests through a previous provided proxy
+         */
+        public void disableProxy() {
+            httpClient.getSocketMiddleware().disableProxy();
+        }
+
+        /**
+         * Disable routing of https requests through a previous provided proxy
+         */
+        public void disableSecureProxy() {
+            httpClient.getSocketMiddleware().disableProxy();
+        }
+
         /**
          * Set the Gson object in use by this Ion instance.
          * This can be used to customize serialization and deserialization
@@ -400,7 +436,7 @@ public Gson getGson() {
          * @param gson
          */
         public void setGson(Gson gson) {
-            this.gson = gson;
+            Ion.this.gson = gson;
         }
 
         AsyncHttpRequestFactory asyncHttpRequestFactory = new AsyncHttpRequestFactory() {
@@ -421,17 +457,15 @@ public Config setAsyncHttpRequestFactory(AsyncHttpRequestFactory asyncHttpReques
             return this;
         }
 
-        private String userAgent;
         public String userAgent() {
             return userAgent;
         }
 
         public Config userAgent(String userAgent) {
-            this.userAgent = userAgent;
+            Ion.this.userAgent = userAgent;
             return this;
         }
 
-        ArrayList<Loader> loaders = new ArrayList<Loader>();
         public Config addLoader(int index, Loader loader) {
             loaders.add(index, loader);
             return this;
@@ -449,26 +483,10 @@ public Config addLoader(Loader loader) {
         }
     }
 
-    String LOGTAG;
-    int logLevel;
-    /**
-     * Set the log level for all requests made by Ion.
-     * @param logtag
-     * @param logLevel
-     */
-    public void setLogging(String logtag, int logLevel) {
-        LOGTAG = logtag;
-        this.logLevel = logLevel;
-    }
-
-    Config config = new Config();
     public Config configure() {
         return config;
     }
 
-    HashList<FutureCallback<BitmapInfo>> bitmapsPending = new HashList<FutureCallback<BitmapInfo>>();
-
-    IonBitmapCache bitmapCache;
     /**
      * Return the bitmap cache used by this Ion instance
      * @return
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index f0431aa9..e63fe1a1 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -125,7 +125,7 @@ BitmapInfo execute() {
         // bitmaps that were transformed are put into the DiskLruCache to prevent
         // subsequent retransformation. See if we can retrieve the bitmap from the disk cache.
         // See BitmapToBitmapInfo for where the cache is populated.
-        DiskLruCache diskLruCache = ion.getResponseCache().getDiskLruCache();
+        DiskLruCache diskLruCache = ion.responseCache.getDiskLruCache();
         if (!builder.noCache && hasTransforms && diskLruCache.containsKey(bitmapKey)) {
             BitmapToBitmapInfo.getBitmapSnapshot(ion, bitmapKey);
             return null;
@@ -225,7 +225,10 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
     private static class BitmapInfoToBitmap extends TransformFuture<Bitmap, BitmapInfo> {
         @Override
         protected void transform(BitmapInfo result) throws Exception {
-            setComplete(result.bitmaps[0]);
+            if (result.exception != null)
+                setComplete(result.exception);
+            else
+                setComplete(result.bitmaps[0]);
         }
     }
 
@@ -240,7 +243,8 @@ protected void transform(BitmapInfo result) throws Exception {
         BitmapInfo info = execute();
         if (info != null) {
             SimpleFuture<Bitmap> ret = new SimpleFuture<Bitmap>();
-            ret.setComplete(info.bitmaps[0]);
+            Bitmap bitmap = info.bitmaps == null ? null : info.bitmaps[0];
+            ret.setComplete(info.exception, bitmap);
             return ret;
         }
 
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index d1274800..99ff3481 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -45,9 +45,9 @@
 import com.koushikdutta.async.parser.StringParser;
 import com.koushikdutta.async.stream.OutputStreamDataSink;
 import com.koushikdutta.ion.Loader.LoaderEmitter;
+import com.koushikdutta.ion.builder.LoadBuilder;
 import com.koushikdutta.ion.builder.Builders;
 import com.koushikdutta.ion.builder.FutureBuilder;
-import com.koushikdutta.ion.builder.LoadBuilder;
 import com.koushikdutta.ion.future.ResponseFuture;
 import com.koushikdutta.ion.gson.GsonBody;
 import com.koushikdutta.ion.gson.GsonParser;
@@ -65,6 +65,7 @@
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Created by koush on 5/21/13.
@@ -141,6 +142,14 @@ public IonRequestBuilder addQuery(String name, String value) {
         return this;
     }
 
+    @Override
+    public IonRequestBuilder addQueries(Map<String, List<String>> params) {
+       if (query == null)
+          query = new Multimap();
+       query.putAll(params);
+       return this;
+    }
+
     int timeoutMilliseconds = AsyncHttpRequest.DEFAULT_TIMEOUT;
     @Override
     public IonRequestBuilder setTimeout(int timeoutMilliseconds) {
@@ -269,7 +278,7 @@ private AsyncHttpRequest prepareRequest(URI uri, AsyncHttpRequestBody wrappedBod
         AsyncHttpRequest request = ion.configure().getAsyncHttpRequestFactory().createAsyncHttpRequest(uri, method, headers);
         request.setFollowRedirect(followRedirect);
         request.setBody(wrappedBody);
-        request.setLogging(ion.LOGTAG, ion.logLevel);
+        request.setLogging(ion.logtag, ion.logLevel);
         if (logTag != null)
             request.setLogging(logTag, logLevel);
         request.enableProxy(proxyHost, proxyPort);
@@ -321,7 +330,7 @@ public void run() {
         AsyncHttpRequest request = prepareRequest(uri, wrappedBody);
         ret.initialRequest = request;
 
-        for (Loader loader: ion.config.loaders) {
+        for (Loader loader: ion.loaders) {
             Future<DataEmitter> emitter = loader.load(ion, request, ret);
             if (emitter != null) {
                 ret.setParent(emitter);
@@ -562,7 +571,7 @@ public void onCompleted(Exception e, T result) {
 
         AsyncHttpRequest request = prepareRequest(uri, null);
 
-        for (Loader loader: ion.config.loaders) {
+        for (Loader loader: ion.loaders) {
             Future<InputStream> ret = loader.load(ion, request);
             if (ret != null)
                 return ret;
@@ -628,6 +637,15 @@ public IonRequestBuilder setBodyParameter(String name, String value) {
         return this;
     }
 
+    public IonRequestBuilder setBodyParameters(Map<String, List<String>> params) {
+       if (bodyParameters == null) {
+           bodyParameters = new Multimap();
+           setBody(new UrlEncodedFormBody(bodyParameters));
+       }
+       bodyParameters.putAll(params);
+       return this;
+    }
+
     MultipartFormDataBody multipartBody;
     @Override
     public IonRequestBuilder setMultipartFile(String name, File file) {
diff --git a/ion/src/com/koushikdutta/ion/LoadBitmap.java b/ion/src/com/koushikdutta/ion/LoadBitmap.java
index 1cfdce67..8d5323d1 100644
--- a/ion/src/com/koushikdutta/ion/LoadBitmap.java
+++ b/ion/src/com/koushikdutta/ion/LoadBitmap.java
@@ -71,7 +71,8 @@ public void run() {
                     else {
                         GifDecoder decoder = new GifDecoder(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), new GifAction() {
                             @Override
-                            public void parseOk(boolean parseStatus, int frameIndex) {
+                            public boolean parseOk(boolean parseStatus, int frameIndex) {
+                                return frameIndex < 100;
                             }
                         });
                         decoder.run();
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index 3e9c486f..e818916e 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -12,6 +12,7 @@
     public int loadedFrom;
     public Bitmap[] bitmaps;
     public int[] delays;
+    public Exception exception;
 
     public int sizeOf() {
         if (bitmaps == null)
diff --git a/ion/src/com/koushikdutta/ion/bitmap/Exif.java b/ion/src/com/koushikdutta/ion/bitmap/Exif.java
index 4d6ad255..1b819c61 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/Exif.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/Exif.java
@@ -115,7 +115,7 @@ public static int getOrientation(byte[] jpeg, int offset, int size) {
             }
         }
 
-        Log.i(TAG, "Orientation not found");
+//        Log.i(TAG, "Orientation not found");
         return 0;
     }
 
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index 44d4cf88..d5a57e76 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -120,11 +120,11 @@ public Bitmap loadBitmap(InputStream stream, int minx, int miny) {
         assert Thread.currentThread() != Looper.getMainLooper().getThread();
         int targetWidth = minx;
         int targetHeight = miny;
-        if (targetWidth <= 0)
+        if (targetWidth == 0)
             targetWidth = metrics.widthPixels;
         if (targetWidth <= 0)
             targetWidth = Integer.MAX_VALUE;
-        if (targetHeight <= 0)
+        if (targetHeight == 0)
             targetHeight = metrics.heightPixels;
         if (targetHeight <= 0)
             targetHeight = Integer.MAX_VALUE;
diff --git a/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java b/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java
index 3a38039f..c438475b 100644
--- a/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/LoadBuilder.java
@@ -1,6 +1,14 @@
 package com.koushikdutta.ion.builder;
 
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.reflect.TypeToken;
+import com.koushikdutta.async.future.Future;
+
+import org.w3c.dom.Document;
+
 import java.io.File;
+import java.io.InputStream;
 
 /**
 * Created by koush on 5/30/13.
diff --git a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
index 52367f8d..1c76c61b 100644
--- a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
@@ -7,9 +7,6 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.reflect.TypeToken;
-import com.koushikdutta.async.future.FutureCallback;
-import com.koushikdutta.async.http.Multimap;
-import com.koushikdutta.async.http.libcore.RawHeaders;
 import com.koushikdutta.ion.HeadersCallback;
 import com.koushikdutta.ion.ProgressCallback;
 
@@ -18,6 +15,8 @@
 
 import java.io.File;
 import java.io.InputStream;
+import java.util.List;
+import java.util.Map;
 
 /**
 * Created by koush on 5/30/13.
@@ -150,6 +149,13 @@
      */
     public R addQuery(String name, String value);
 
+    /**
+     * Add multiple query parameters at once
+     * @param params
+     * @return
+     */
+    public R addQueries(Map<String, List<String>> params);
+
     /**
      * Set the user agent of this request.
      * @param userAgent
diff --git a/ion/src/com/koushikdutta/ion/builder/UrlEncodedBuilder.java b/ion/src/com/koushikdutta/ion/builder/UrlEncodedBuilder.java
index 807278ae..6802d610 100644
--- a/ion/src/com/koushikdutta/ion/builder/UrlEncodedBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/UrlEncodedBuilder.java
@@ -1,5 +1,8 @@
 package com.koushikdutta.ion.builder;
 
+import java.util.List;
+import java.util.Map;
+
 /**
 * Created by koush on 5/30/13.
 */ // set additional body parameters for url form encoded
@@ -12,4 +15,11 @@
      * @return
      */
     public U setBodyParameter(String name, String value);
+    /**
+     * Specifies a map with application/x-www-form-urlencoded name and value pairs to send to the HTTP server.
+     * If no HTTP method was explicitly provided in the load call, the default HTTP method, POST, is used.
+     * @param params The map containing key value pairs
+     * @return
+     */
+    public U setBodyParameters(Map<String, List<String>> params);
 }
diff --git a/ion/src/com/koushikdutta/ion/gif/GifAction.java b/ion/src/com/koushikdutta/ion/gif/GifAction.java
index b1ae2a16..856e5d6d 100755
--- a/ion/src/com/koushikdutta/ion/gif/GifAction.java
+++ b/ion/src/com/koushikdutta/ion/gif/GifAction.java
@@ -1,5 +1,5 @@
 package com.koushikdutta.ion.gif;
 
 public interface GifAction {
-    public void parseOk(boolean parseStatus, int frameIndex);
+    public boolean parseOk(boolean parseStatus, int frameIndex);
 }
diff --git a/ion/src/com/koushikdutta/ion/gif/GifDecoder.java b/ion/src/com/koushikdutta/ion/gif/GifDecoder.java
index 36f77942..6bda5129 100755
--- a/ion/src/com/koushikdutta/ion/gif/GifDecoder.java
+++ b/ion/src/com/koushikdutta/ion/gif/GifDecoder.java
@@ -2,6 +2,11 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
+import java.lang.reflect.Array;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.IntBuffer;
+import java.util.Arrays;
 
 import android.graphics.Bitmap;
 import android.graphics.Bitmap.Config;
@@ -38,8 +43,6 @@
 
 	private int ix, iy, iw, ih; // current image rectangle
 	private int lrx, lry, lrw, lrh;
-	private Bitmap image; // current frame
-	private Bitmap lastImage; // previous frame
 	private GifFrame currentFrame = null;
 
 	private boolean isShow = false;
@@ -115,16 +118,6 @@ public void free(){
 			in = null;
 		}
 		gifData = null;
-		if (image != null)
-		{
-            image.recycle();
-            image = null;
-		}
-		if (lastImage != null)
-		{
-            lastImage.recycle();
-            lastImage = null;
-		}		
 	}
 	
 	public int getStatus(){
@@ -169,22 +162,29 @@ public int getLoopCount() {
 		return loopCount;
 	}
 
-	private void setPixels() {
-		int[] dest = new int[width * height];
+    int[] lastPixels;
+    int[] dest;
+	private Bitmap setPixels() {
+        if (dest == null)
+            dest = new int[width * height];
 		// fill in starting image contents based on last image's dispose code
 		if (lastDispose > 0) {
 			if (lastDispose == 3) {
 				// use image before last
 				int n = frameCount - 2;
 				if (n > 0) {
-					lastImage = getFrameImage(n - 1);
-				} else {
-					lastImage = null;
+					Bitmap lastImage = getFrameImage(n - 1);
+                    if (lastPixels == null)
+                        lastPixels = new int[width * height];
+                    lastImage.getPixels(lastPixels, 0, width, 0, 0, width, height);
 				}
-			}
-			if (lastImage != null) {
-				lastImage.getPixels(dest, 0, width, 0, 0, width, height);
-				// copy pixels
+                else {
+                    lastPixels = null;
+                }
+            }
+			if (lastPixels != null) {
+                dest = Arrays.copyOf(lastPixels, lastPixels.length);
+                // copy pixels
 				if (lastDispose == 2) {
 					// fill last image rect area with background color
 					int c = 0;
@@ -247,7 +247,7 @@ private void setPixels() {
 				}
 			}
 		}
-		image = Bitmap.createBitmap(dest, width, height, Config.ARGB_4444);
+		return Bitmap.createBitmap(dest, width, height, Config.ARGB_4444);
 	}
 
 	public Bitmap getFrameImage(int n) {
@@ -623,9 +623,8 @@ private void readImage() {
     		}
     		frameCount++;
     		// create new image to receive frame data
-    		image = Bitmap.createBitmap(width, height, Config.ARGB_4444);
     		// createImage(width, height);
-    		setPixels(); // transfer pixel data to image
+    		Bitmap image = setPixels(); // transfer pixel data to image
     		if (gifFrame == null) {
     			gifFrame = new GifFrame(image, delay);
     			currentFrame = gifFrame;
@@ -642,7 +641,10 @@ private void readImage() {
     			act[transIndex] = save;
     		}
     		resetFrame();
-    		action.parseOk(true, frameCount);
+    		if (!action.parseOk(true, frameCount)) {
+                status = STATUS_FINISH;
+                return;
+            }
         }catch (OutOfMemoryError e) {
             Log.e("GifDecoder", ">>> log  : " + e.toString());
             e.printStackTrace();
@@ -686,7 +688,7 @@ private void resetFrame() {
 		lry = iy;
 		lrw = iw;
 		lrh = ih;
-		lastImage = image;
+        lastPixels = dest;
 		lastBgColor = bgColor;
 		dispose = 0;
 		transparency = false;
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonParser.java b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
index de1fc08e..c51b8ba1 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonParser.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
@@ -25,7 +25,8 @@ public GsonParser() {
     }
     @Override
     public Future<T> parse(DataEmitter emitter) {
-        return new TransformFuture<T, ByteBufferList>() {
+        return new ByteBufferListParser().parse(emitter)
+        .then(new TransformFuture<T, ByteBufferList>() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 JsonParser parser = new JsonParser();
@@ -34,8 +35,7 @@ protected void transform(ByteBufferList result) throws Exception {
                     throw new JsonParseException("unable to parse json");
                 setComplete(null, parsed);
             }
-        }
-        .from(new ByteBufferListParser().parse(emitter));
+        });
     }
 
     @Override
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
index 1888a5bf..805aa3ac 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
@@ -35,15 +35,15 @@ public GsonSerializer(Gson gson, TypeToken<T> token) {
     }
     @Override
     public Future<T> parse(DataEmitter emitter) {
-        return new TransformFuture<T, ByteBufferList>() {
+        return new ByteBufferListParser().parse(emitter)
+        .then(new TransformFuture<T, ByteBufferList>() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 ByteBufferListInputStream bin = new ByteBufferListInputStream(result);
                 T ret = (T)gson.fromJson(new JsonReader(new InputStreamReader(bin)), type);
                 setComplete(ret);
             }
-        }
-        .from(new ByteBufferListParser().parse(emitter));
+        });
     }
 
     @Override
@@ -51,6 +51,12 @@ public void write(DataSink sink, T pojo, CompletedCallback completed) {
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         OutputStreamWriter out = new OutputStreamWriter(bout);
         gson.toJson(pojo, type, out);
+        try {
+            out.flush();
+        }
+        catch (final Exception e) {
+            throw new AssertionError(e);
+        }
         Util.writeAll(sink, bout.toByteArray(), completed);
     }
 }
