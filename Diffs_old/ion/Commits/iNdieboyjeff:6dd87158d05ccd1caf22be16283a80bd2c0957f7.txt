diff --git a/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java b/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
index da8102c3..8e471b3e 100644
--- a/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
@@ -26,7 +26,7 @@ public void run() {
                 try {
                     DiskLruCache.Snapshot snapshot = ion.getResponseCache().getDiskLruCache().get(transformKey);
                     try {
-                        callback.loadInputStream(snapshot.getInputStream(ResponseCacheMiddleware.ENTRY_COUNT - 1));
+                        callback.loadInputStream(snapshot.getInputStream(0));
                     }
                     finally {
                         snapshot.close();
@@ -84,10 +84,10 @@ public void run() {
                     if (editor == null)
                         return;
                     try {
-                        for (int i = 0; i < ResponseCacheMiddleware.ENTRY_COUNT - 1; i++) {
+                        for (int i = 1; i < ResponseCacheMiddleware.ENTRY_COUNT; i++) {
                             editor.set(0, key);
                         }
-                        OutputStream out = editor.newOutputStream(ResponseCacheMiddleware.ENTRY_COUNT - 1);
+                        OutputStream out = editor.newOutputStream(0);
                         Bitmap.CompressFormat format = info.bitmap.hasAlpha() ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG;
                         info.bitmap.compress(format, 100, out);
                         out.close();
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 41daebda..726a38e8 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -359,6 +359,27 @@ public AsyncServer getServer() {
     }
 
     public static class Config {
+        private Gson gson = new Gson();
+        /**
+         * Get the Gson object in use by this Ion instance.
+         * This can be used to customize serialization and deserialization
+         * from java objects.
+         * @return
+         */
+        public Gson getGson() {
+            return gson;
+        }
+
+        /**
+         * Set the Gson object in use by this Ion instance.
+         * This can be used to customize serialization and deserialization
+         * from java objects.
+         * @param gson
+         */
+        public void setGson(Gson gson) {
+            this.gson = gson;
+        }
+
         AsyncHttpRequestFactory asyncHttpRequestFactory = new AsyncHttpRequestFactoryImpl();
 
         public AsyncHttpRequestFactory getAsyncHttpRequestFactory() {
@@ -416,16 +437,5 @@ public IonBitmapCache getBitmapCache() {
         return bitmapCache;
     }
 
-    Gson gson = new Gson();
-    /**
-     * Get the Gson object in use by this Ion instance.
-     * This can be used to customize serialization and deserialization
-     * from java objects.
-     * @return
-     */
-    public Gson getGson() {
-        return gson;
-    }
-
     static Ion instance;
 }
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 1549a821..0713427c 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -154,12 +154,12 @@ public IonRequestBuilder setHandler(Handler handler) {
 
     @Override
     public IonRequestBuilder setJsonObjectBody(JsonObject jsonObject) {
-        return setBody(new GsonBody<JsonObject>(ion.getGson(), jsonObject));
+        return setBody(new GsonBody<JsonObject>(ion.configure().getGson(), jsonObject));
     }
 
     @Override
     public IonRequestBuilder setJsonArrayBody(JsonArray jsonArray) {
-        return setBody(new GsonBody<JsonArray>(ion.getGson(), jsonArray));
+        return setBody(new GsonBody<JsonArray>(ion.configure().getGson(), jsonArray));
     }
 
     @Override
@@ -672,12 +672,12 @@ public IonRequestBuilder setLogging(String tag, int level) {
 
     @Override
     public <T> ResponseFuture<T> as(Class<T> clazz) {
-        return execute(new GsonSerializer<T>(ion.gson, clazz));
+        return execute(new GsonSerializer<T>(ion.configure().getGson(), clazz));
     }
 
     @Override
     public <T> ResponseFuture<T> as(TypeToken<T> token) {
-        return execute(new GsonSerializer<T>(ion.gson, token));
+        return execute(new GsonSerializer<T>(ion.configure().getGson(), token));
     }
 
     ArrayList<WeakReference<Object>> groups;
@@ -700,13 +700,13 @@ public IonRequestBuilder proxy(String host, int port) {
 
     @Override
     public IonRequestBuilder setJsonObjectBody(Object object, TypeToken token) {
-        setBody(new PojoBody(ion.getGson(), object, token));
+        setBody(new PojoBody(ion.configure().getGson(), object, token));
         return this;
     }
 
     @Override
     public IonRequestBuilder setJsonObjectBody(Object object) {
-        setBody(new PojoBody(ion.getGson(), object, null));
+        setBody(new PojoBody(ion.configure().getGson(), object, null));
         return this;
     }
 
diff --git a/ion/src/com/koushikdutta/ion/Loader.java b/ion/src/com/koushikdutta/ion/Loader.java
index 75c055f6..1098e80b 100644
--- a/ion/src/com/koushikdutta/ion/Loader.java
+++ b/ion/src/com/koushikdutta/ion/Loader.java
@@ -48,7 +48,8 @@ public AsyncHttpRequest getRequest() {
     }
 
     // returns a Future if this loader can handle a request as a stream.
-    // this implies that the stream is
+    // this implies that the stream is essentially non blocking...
+    // ie file or memory based.
     public Future<InputStream> load(Ion ion, AsyncHttpRequest request);
 
     // returns a Future if this loader can handle a request
