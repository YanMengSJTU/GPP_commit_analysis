diff --git a/ion/src/com/koushikdutta/ion/BitmapCallback.java b/ion/src/com/koushikdutta/ion/BitmapCallback.java
index b525bb4b..3872b53d 100644
--- a/ion/src/com/koushikdutta/ion/BitmapCallback.java
+++ b/ion/src/com/koushikdutta/ion/BitmapCallback.java
@@ -38,7 +38,7 @@ public void run() {
                 BitmapInfo result = info;
                 if (result == null) {
                     // cache errors
-                    result = new BitmapInfo(key, null, new Point());
+                    result = new BitmapInfo(key, null, null, new Point());
                     result.exception = e;
                     ion.getBitmapCache().put(result);
                 } else if (put()) {
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 40bb65d6..e93cfcbb 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -142,6 +142,29 @@ private String computeDownloadKey() {
         return ResponseCacheMiddleware.toKeyString(downloadKey);
     }
 
+    @Override
+    public BitmapInfo asCachedBitmap() {
+        final String downloadKey = computeDownloadKey();
+        assert Thread.currentThread() == Looper.getMainLooper().getThread() || imageViewPostRef == null;
+        assert downloadKey != null;
+
+        if (resizeHeight > 0 || resizeWidth > 0) {
+            transform(new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
+        }
+
+        // determine the key for this bitmap after all transformations
+        String bitmapKey = downloadKey;
+        boolean hasTransforms = transforms != null && transforms.size() > 0;
+        if (hasTransforms) {
+            for (Transform transform : transforms) {
+                bitmapKey += transform.key();
+            }
+            bitmapKey = ResponseCacheMiddleware.toKeyString(bitmapKey);
+        }
+
+        return builder.ion.bitmapCache.get(bitmapKey);
+    }
+
     BitmapFetcher executeCache() {
         final String downloadKey = computeDownloadKey();
         assert Thread.currentThread() == Looper.getMainLooper().getThread() || imageViewPostRef == null;
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 9856e1ea..0328b8ca 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -48,6 +48,7 @@
 import com.koushikdutta.async.stream.FileDataSink;
 import com.koushikdutta.async.stream.OutputStreamDataSink;
 import com.koushikdutta.ion.Loader.LoaderEmitter;
+import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.builder.Builders;
 import com.koushikdutta.ion.builder.FutureBuilder;
 import com.koushikdutta.ion.builder.LoadBuilder;
@@ -774,6 +775,11 @@ public IonRequestBuilder load(File file) {
         return this;
     }
 
+    @Override
+    public BitmapInfo asCachedBitmap() {
+        return new IonBitmapRequestBuilder(this).asCachedBitmap();
+    }
+
     @Override
     public Future<Bitmap> asBitmap() {
         return new IonBitmapRequestBuilder(this).asBitmap();
diff --git a/ion/src/com/koushikdutta/ion/LoadBitmap.java b/ion/src/com/koushikdutta/ion/LoadBitmap.java
index 140724c7..a723bed4 100644
--- a/ion/src/com/koushikdutta/ion/LoadBitmap.java
+++ b/ion/src/com/koushikdutta/ion/LoadBitmap.java
@@ -89,7 +89,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                         delays = null;
                     }
 
-                    BitmapInfo info = new BitmapInfo(key, bitmaps, size);
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
                     info.delays = delays;
                     if (emitterTransform != null)
                         info.loadedFrom = emitterTransform.loadedFrom();
diff --git a/ion/src/com/koushikdutta/ion/LoadBitmapRegion.java b/ion/src/com/koushikdutta/ion/LoadBitmapRegion.java
index 2d87bf86..81bf6734 100644
--- a/ion/src/com/koushikdutta/ion/LoadBitmapRegion.java
+++ b/ion/src/com/koushikdutta/ion/LoadBitmapRegion.java
@@ -21,7 +21,7 @@ public void run() {
                     Bitmap bitmap = ion.bitmapCache.loadRegion(decoder, region, inSampleSize);
                     if (bitmap == null)
                         throw new Exception("failed to load bitmap region");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bitmap }, new Point(bitmap.getWidth(), bitmap.getHeight()));
+                    BitmapInfo info = new BitmapInfo(key, null, new Bitmap[] { bitmap }, new Point(bitmap.getWidth(), bitmap.getHeight()));
                     report(null, info);
                 }
                 catch (Exception e) {
diff --git a/ion/src/com/koushikdutta/ion/LoadDeepZoom.java b/ion/src/com/koushikdutta/ion/LoadDeepZoom.java
index c8586b4e..13160baf 100644
--- a/ion/src/com/koushikdutta/ion/LoadDeepZoom.java
+++ b/ion/src/com/koushikdutta/ion/LoadDeepZoom.java
@@ -79,7 +79,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                             if (size == null)
                                 size = new Point(bitmap.getWidth(), bitmap.getHeight());
                         }
-                        BitmapInfo info = new BitmapInfo(key, bitmaps, size);
+                        BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
                         info.delays = delays;
                         if (emitterTransform != null)
                             info.loadedFrom = emitterTransform.loadedFrom();
@@ -96,8 +96,9 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                         throw new Exception("unable to load decoder");
                     Bitmap[] bitmaps = new Bitmap[] { bitmap };
 
-                    BitmapInfo info = new BitmapInfo(key, bitmaps, size);
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
                     info.decoder = decoder;
+                    info.decoderFile = file;
                     info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_NETWORK;
                     report(null, info);
                 } catch (Exception e) {
diff --git a/ion/src/com/koushikdutta/ion/TransformBitmap.java b/ion/src/com/koushikdutta/ion/TransformBitmap.java
index d08e3d18..bffedfd8 100644
--- a/ion/src/com/koushikdutta/ion/TransformBitmap.java
+++ b/ion/src/com/koushikdutta/ion/TransformBitmap.java
@@ -38,7 +38,7 @@ public void run() {
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
                     Point size = new Point(bitmap.getWidth(), bitmap.getHeight());
-                    BitmapInfo info = new BitmapInfo(transformKey, new Bitmap[] { bitmap }, size);
+                    BitmapInfo info = new BitmapInfo(transformKey, "image/jpeg", new Bitmap[] { bitmap }, size);
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     callback.report(null, info);
                 }
@@ -97,7 +97,7 @@ public void run() {
                                 size = new Point(bitmap.getWidth(), bitmap.getHeight());
                         }
                     }
-                    info = new BitmapInfo(key, bitmaps, size);
+                    info = new BitmapInfo(key, result.mimeType, bitmaps, size);
                     info.delays = result.delays;
                     info.loadedFrom = result.loadedFrom;
                     report(null, info);
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index 1af37ce5..3db88e4c 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -11,10 +11,11 @@
  * Created by koush on 6/12/13.
  */
 public class BitmapInfo {
-    public BitmapInfo(String key, Bitmap[] bitmaps, Point originalSize) {
+    public BitmapInfo(String key, String mimeType, Bitmap[] bitmaps, Point originalSize) {
         this.originalSize = originalSize;
         this.bitmaps = bitmaps;
         this.key = key;
+        this.mimeType = mimeType;
     }
 
     final public Point originalSize;
@@ -26,6 +27,8 @@ public BitmapInfo(String key, Bitmap[] bitmaps, Point originalSize) {
     public int[] delays;
     public Exception exception;
     public BitmapRegionDecoder decoder;
+    public File decoderFile;
+    public final String mimeType;
 
     public int sizeOf() {
         if (bitmaps == null)
diff --git a/ion/src/com/koushikdutta/ion/builder/BitmapFutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/BitmapFutureBuilder.java
index c20cfda5..14f36e3f 100644
--- a/ion/src/com/koushikdutta/ion/builder/BitmapFutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/BitmapFutureBuilder.java
@@ -3,6 +3,7 @@
 import android.graphics.Bitmap;
 
 import com.koushikdutta.async.future.Future;
+import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 /**
 * Created by koush on 5/30/13.
@@ -13,4 +14,10 @@
      * @return
      */
     public Future<Bitmap> asBitmap();
+
+    /**
+     * Attempt to immediately retrieve the cached Bitmap info
+     * @return
+     */
+    public BitmapInfo asCachedBitmap();
 }
diff --git a/ion/src/com/koushikdutta/ion/loader/FileLoader.java b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
index 131913bf..d28c71ce 100644
--- a/ion/src/com/koushikdutta/ion/loader/FileLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
@@ -53,7 +53,7 @@ public void run() {
                     Bitmap bitmap = ion.getBitmapCache().loadBitmap(file, options);
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bitmap }, size);
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, new Bitmap[] { bitmap }, size);
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
diff --git a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
index 36550440..d3d0fe29 100644
--- a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
@@ -34,7 +34,7 @@ public void run() {
                     Bitmap bmp = ((BitmapDrawable)pm.getPackageInfo(pkg, 0).applicationInfo.loadIcon(pm)).getBitmap();
                     if (bmp == null)
                         throw new Exception("package icon failed to load");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
+                    BitmapInfo info = new BitmapInfo(key, null, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
diff --git a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
index b5fd3cfb..b5fda778 100644
--- a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
@@ -83,7 +83,7 @@ public static Bitmap createVideoThumbnail(String filePath) {
 
         final File file = new File(URI.create(uri));
 
-        MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
+        final MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
         if (type == null || !MediaFile.isVideoFileType(type.fileType))
             return null;
 
@@ -99,7 +99,7 @@ public void run() {
                     Bitmap bmp = createVideoThumbnail(file.getAbsolutePath());
                     if (bmp == null)
                         throw new Exception("video bitmap failed to load");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
+                    BitmapInfo info = new BitmapInfo(key, type.mimeType, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
                     info.loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 } catch (Exception e) {
