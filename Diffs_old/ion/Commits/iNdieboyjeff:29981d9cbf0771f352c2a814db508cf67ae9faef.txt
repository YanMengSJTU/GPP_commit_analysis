diff --git a/ion-sample/project.properties b/ion-sample/project.properties
index 697362e9..bda53d0d 100644
--- a/ion-sample/project.properties
+++ b/ion-sample/project.properties
@@ -11,6 +11,6 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-19
+target=android-L
 android.library.reference.1=../../../../AndroidStudio/ion/ion
 
diff --git a/ion-test/project.properties b/ion-test/project.properties
index e2b2c2ac..5eba079a 100644
--- a/ion-test/project.properties
+++ b/ion-test/project.properties
@@ -1,5 +1,5 @@
 # This file is automatically generated by IntelliJ IDEA
 # Project target.
-target=android-19
+target=android-L
 android.library.reference.1=../ion
 
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issues.java b/ion-test/src/com/koushikdutta/ion/test/Issues.java
index 95ea1e78..925d46a6 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issues.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Issues.java
@@ -4,6 +4,7 @@
 import android.test.AndroidTestCase;
 import android.util.Base64;
 import android.util.Log;
+import android.widget.TextView;
 
 import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.FutureCallback;
@@ -143,4 +144,11 @@ public void testIssue253() throws Exception {
 
         assertEquals(b64, data);
     }
+
+    public void testIssue187() throws Exception {
+        Ion.with(getContext())
+        .load("https://www.google.com/")
+        .setLogging("iontest", Log.VERBOSE)
+        .asString().get();
+    }
 }
diff --git a/ion/project.properties b/ion/project.properties
index 14e09e94..70f1e988 100644
--- a/ion/project.properties
+++ b/ion/project.properties
@@ -11,7 +11,7 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-19
+target=android-L
 android.library=true
 
 
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index 3cba33e4..b733fe40 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -8,6 +8,7 @@
 import com.koushikdutta.async.parser.ByteBufferListParser;
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.bitmap.PostProcess;
 import com.koushikdutta.ion.bitmap.Transform;
 import com.koushikdutta.ion.loader.MediaFile;
 
@@ -26,6 +27,7 @@
     int resizeHeight;
     boolean animateGif;
     boolean deepZoom;
+    PostProcess postProcess;
 
     private boolean fastLoad(String uri) {
         Ion ion = builder.ion;
@@ -95,7 +97,7 @@ private void executeTransforms(Ion ion) {
         // make sure that the parent download isn't cancelled (empty list)
         // and also make sure there are waiters for this transformed bitmap
         if (ion.bitmapsPending.tag(bitmapKey) == null) {
-            ion.bitmapsPending.add(downloadKey, new TransformBitmap(ion, bitmapKey, downloadKey, transforms));
+            ion.bitmapsPending.add(downloadKey, new TransformBitmap(ion, bitmapKey, downloadKey, transforms, postProcess));
         }
     }
 
@@ -112,7 +114,7 @@ public void execute() {
         // See TransformBitmap for where the cache is populated.
         FileCache fileCache = ion.responseCache.getFileCache();
         if (!builder.noCache && hasTransforms && fileCache.exists(bitmapKey) && !deepZoom) {
-            TransformBitmap.getBitmapSnapshot(ion, bitmapKey);
+            TransformBitmap.getBitmapSnapshot(ion, bitmapKey, postProcess);
             return;
         }
 
diff --git a/ion/src/com/koushikdutta/ion/ImageViewBitmapInfo.java b/ion/src/com/koushikdutta/ion/ImageViewBitmapInfo.java
new file mode 100644
index 00000000..33ad0373
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/ImageViewBitmapInfo.java
@@ -0,0 +1,25 @@
+package com.koushikdutta.ion;
+
+import android.widget.ImageView;
+
+import com.koushikdutta.ion.bitmap.BitmapInfo;
+
+/**
+ * Created by koush on 7/1/14.
+ */
+public class ImageViewBitmapInfo {
+    Exception exception;
+    public Exception getException() {
+        return exception;
+    }
+
+    ImageView imageView;
+    public ImageView getImageView() {
+        return imageView;
+    }
+
+    BitmapInfo info;
+    public BitmapInfo getBitmapInfo() {
+        return info;
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 26fb2763..4c739fe9 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -2,7 +2,6 @@
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
-import android.net.Uri;
 import android.os.Build;
 import android.os.Looper;
 import android.view.animation.Animation;
@@ -13,12 +12,13 @@
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.bitmap.PostProcess;
 import com.koushikdutta.ion.bitmap.LocallyCachedStatus;
 import com.koushikdutta.ion.bitmap.Transform;
 import com.koushikdutta.ion.builder.BitmapFutureBuilder;
 import com.koushikdutta.ion.builder.Builders;
-import com.koushikdutta.ion.builder.ImageViewBuilder;
 import com.koushikdutta.ion.builder.ImageViewFutureBuilder;
+import com.koushikdutta.ion.future.ImageViewFuture;
 
 import java.util.ArrayList;
 
@@ -26,7 +26,7 @@
  * Created by koush on 5/23/13.
  */
 class IonBitmapRequestBuilder implements Builders.IV.F, ImageViewFutureBuilder, BitmapFutureBuilder, Builders.Any.BF {
-    private static final SimpleFuture<ImageView> FUTURE_IMAGEVIEW_NULL_URI = new SimpleFuture<ImageView>() {
+    private static final IonDrawable.ImageViewFutureImpl FUTURE_IMAGEVIEW_NULL_URI = new IonDrawable.ImageViewFutureImpl() {
         {
             setComplete(new NullPointerException("uri"));
         }
@@ -55,6 +55,7 @@
     boolean disableFadeIn;
     boolean animateGif = true;
     boolean deepZoom;
+    PostProcess postProcess;
 
     void reset() {
         placeholderDrawable = null;
@@ -75,6 +76,7 @@ void reset() {
         animateGif = true;
         builder = null;
         deepZoom = false;
+        postProcess = null;
     }
 
     public IonBitmapRequestBuilder(IonRequestBuilder builder) {
@@ -106,7 +108,7 @@ private IonRequestBuilder ensureBuilder() {
     }
 
     @Override
-    public Future<ImageView> load(String uri) {
+    public ImageViewFuture load(String uri) {
         ensureBuilder();
         builder.load(uri);
         return intoImageView(imageViewPostRef.get());
@@ -134,6 +136,14 @@ public IonBitmapRequestBuilder transform(Transform transform) {
         return this;
     }
 
+    @Override
+    public IonBitmapRequestBuilder postProcess(PostProcess postProcess) {
+        if (this.postProcess != null)
+            throw new IllegalStateException("only one post processor may be used.");
+        this.postProcess = postProcess;
+        return transform(new TransformBitmap.PostProcessNullTransform(postProcess.key()));
+    }
+
     private String computeDownloadKey() {
         String downloadKey = builder.uri;
         // although a gif is always same download, the decode (non/animated) result may different
@@ -146,6 +156,7 @@ private String computeDownloadKey() {
 
     public String computeBitmapKey(String downloadKey) {
         assert downloadKey != null;
+
         if (resizeHeight > 0 || resizeWidth > 0) {
             if (transforms == null)
                 transforms = new ArrayList<Transform>();
@@ -154,13 +165,13 @@ public String computeBitmapKey(String downloadKey) {
 
         // determine the key for this bitmap after all transformations
         String bitmapKey = downloadKey;
-        boolean hasTransforms = transforms != null && transforms.size() > 0;
-        if (hasTransforms) {
+        if (hasTransforms()) {
             for (Transform transform : transforms) {
                 bitmapKey += transform.key();
             }
             bitmapKey = FileCache.toKeyString(bitmapKey);
         }
+
         return bitmapKey;
     }
 
@@ -175,7 +186,7 @@ public LocallyCachedStatus isLocallyCached() {
         if (info != null && info.bitmaps != null)
             return LocallyCachedStatus.CACHED;
         FileCache fileCache = ion.responseCache.getFileCache();
-        if (transforms != null && fileCache.exists(bitmapKey))
+        if (hasTransforms() && fileCache.exists(bitmapKey))
             return LocallyCachedStatus.CACHED;
         if (fileCache.exists(downloadKey))
             return LocallyCachedStatus.MAYBE_CACHED;
@@ -205,6 +216,7 @@ BitmapFetcher executeCache() {
         ret.transforms = transforms;
         ret.animateGif = animateGif;
         ret.deepZoom = deepZoom;
+        ret.postProcess = postProcess;
 
         // see if this request can be fulfilled from the cache
         if (!builder.noCache) {
@@ -232,7 +244,7 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
     }
 
     @Override
-    public Future<ImageView> intoImageView(ImageView imageView) {
+    public ImageViewFuture intoImageView(ImageView imageView) {
         assert Thread.currentThread() == Looper.getMainLooper().getThread();
         if (imageView == null)
             throw new NullPointerException("imageView");
@@ -249,7 +261,7 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
             doAnimation(imageView, null, 0);
             IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher.info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
             drawable.cancel();
-            SimpleFuture<ImageView> imageViewFuture = drawable.getFuture();
+            IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
             imageViewFuture.reset();
             imageViewFuture.setComplete(bitmapFetcher.info.exception, imageView);
             return imageViewFuture;
@@ -266,7 +278,7 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
 
         IonDrawable drawable = setIonDrawable(imageView, null, 0);
         doAnimation(imageView, loadAnimation, loadAnimationResource);
-        SimpleFuture<ImageView> imageViewFuture = drawable.getFuture();
+        IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
         imageViewFuture.reset();
         drawable.register(ion, bitmapFetcher.bitmapKey);
         return imageViewFuture;
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 88530ffe..5f15fce7 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -15,10 +15,12 @@
 import android.view.animation.Animation;
 import android.widget.ImageView;
 
+import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.future.ImageViewFuture;
 
 import java.lang.ref.WeakReference;
 
@@ -62,7 +64,32 @@ public Drawable getCurrentDrawable() {
         return null;
     }
 
-    public SimpleFuture<ImageView> getFuture() {
+    public static class ImageViewFutureImpl extends SimpleFuture<ImageView> implements ImageViewFuture {
+        @Override
+        public Future<ImageViewBitmapInfo> withBitmapInfo() {
+            final SimpleFuture<ImageViewBitmapInfo> ret = new SimpleFuture<ImageViewBitmapInfo>();
+            setCallback(new FutureCallback<ImageView>() {
+                @Override
+                public void onCompleted(Exception e, ImageView result) {
+                    ImageViewBitmapInfo val = new ImageViewBitmapInfo();
+                    Drawable d = null;
+                    if (result != null)
+                        d = result.getDrawable();
+                    if (d instanceof IonDrawable) {
+                        IonDrawable id = (IonDrawable)d;
+                        val.info = id.info;
+                    }
+                    val.exception = e;
+                    val.imageView = result;
+                    ret.setComplete(val);
+                }
+            });
+            ret.setParent(this);
+            return ret;
+        }
+    }
+
+    public ImageViewFutureImpl getFuture() {
         return callback.imageViewFuture;
     }
     
@@ -83,7 +110,7 @@ public IonDrawable setInAnimation(Animation inAnimation, int inAnimationResource
         private WeakReference<IonDrawable> ionDrawableRef;
         private ContextReference.ImageViewContextReference imageViewRef;
         private String bitmapKey;
-        private SimpleFuture<ImageView> imageViewFuture = new SimpleFuture<ImageView>();
+        private ImageViewFutureImpl imageViewFuture = new ImageViewFutureImpl();
         private Animation inAnimation;
         private int inAnimationResource;
         private int requestId;
@@ -340,6 +367,7 @@ public void onCompleted(Exception e, BitmapInfo result) {
 
     @Override
     public void draw(Canvas canvas) {
+        // TODO: handle animated drawables
         if (info == null) {
             if (placeholder == null && placeholderResource != 0)
                 placeholder = resources.getDrawable(placeholderResource);
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index e219429f..1186af24 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -54,6 +54,7 @@
 import com.koushikdutta.ion.builder.Builders;
 import com.koushikdutta.ion.builder.FutureBuilder;
 import com.koushikdutta.ion.builder.LoadBuilder;
+import com.koushikdutta.ion.future.ImageViewFuture;
 import com.koushikdutta.ion.future.ResponseFuture;
 import com.koushikdutta.ion.gson.GsonArrayParser;
 import com.koushikdutta.ion.gson.GsonBody;
@@ -815,7 +816,7 @@ public IonBitmapRequestBuilder withBitmap() {
     }
 
     @Override
-    public Future<ImageView> intoImageView(ImageView imageView) {
+    public ImageViewFuture intoImageView(ImageView imageView) {
         return new IonBitmapRequestBuilder(this).intoImageView(imageView);
     }
 
diff --git a/ion/src/com/koushikdutta/ion/TransformBitmap.java b/ion/src/com/koushikdutta/ion/TransformBitmap.java
index 519a2471..1dbc0e5e 100644
--- a/ion/src/com/koushikdutta/ion/TransformBitmap.java
+++ b/ion/src/com/koushikdutta/ion/TransformBitmap.java
@@ -7,6 +7,7 @@
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
+import com.koushikdutta.ion.bitmap.PostProcess;
 import com.koushikdutta.ion.bitmap.Transform;
 
 import java.io.File;
@@ -14,9 +15,27 @@
 import java.util.ArrayList;
 
 class TransformBitmap extends BitmapCallback implements FutureCallback<BitmapInfo> {
+    static class PostProcessNullTransform implements Transform {
+        String key;
+        public PostProcessNullTransform(String key) {
+            this.key = key;
+        }
+
+        @Override
+        public Bitmap transform(Bitmap b) {
+            return b;
+        }
+
+        @Override
+        public String key() {
+            return key;
+        }
+    }
+
     ArrayList<Transform> transforms;
+    PostProcess postProcess;
 
-    public static void getBitmapSnapshot(final Ion ion, final String transformKey) {
+    public static void getBitmapSnapshot(final Ion ion, final String transformKey, final PostProcess postProcess) {
         // don't do this if this is already loading
         if (ion.bitmapsPending.tag(transformKey) != null)
             return;
@@ -37,6 +56,10 @@ public void run() {
                     Point size = new Point(bitmap.getWidth(), bitmap.getHeight());
                     BitmapInfo info = new BitmapInfo(transformKey, "image/jpeg", new Bitmap[] { bitmap }, size);
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+
+                    if (postProcess != null)
+                        postProcess.postProcess(info);
+
                     callback.report(null, info);
                 }
                 catch (OutOfMemoryError e) {
@@ -54,10 +77,11 @@ public void run() {
     }
 
     String downloadKey;
-    public TransformBitmap(Ion ion, String transformKey, String downloadKey, ArrayList<Transform> transforms) {
+    public TransformBitmap(Ion ion, String transformKey, String downloadKey, ArrayList<Transform> transforms, PostProcess postProcess) {
         super(ion, transformKey, true);
         this.transforms = transforms;
         this.downloadKey = downloadKey;
+        this.postProcess = postProcess;
     }
 
     @Override
@@ -98,6 +122,10 @@ public void run() {
                     info = new BitmapInfo(key, result.mimeType, bitmaps, size);
                     info.delays = result.delays;
                     info.loadedFrom = result.loadedFrom;
+
+                    if (postProcess != null)
+                        postProcess.postProcess(info);
+
                     report(null, info);
                 }
                 catch (OutOfMemoryError e) {
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index 3db88e4c..a0c35bb6 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -4,8 +4,9 @@
 import android.graphics.BitmapRegionDecoder;
 import android.graphics.Point;
 
+import com.koushikdutta.async.util.UntypedHashtable;
+
 import java.io.File;
-import java.lang.ref.WeakReference;
 
 /**
  * Created by koush on 6/12/13.
@@ -29,6 +30,7 @@ public BitmapInfo(String key, String mimeType, Bitmap[] bitmaps, Point originalS
     public BitmapRegionDecoder decoder;
     public File decoderFile;
     public final String mimeType;
+    public final UntypedHashtable extras = new UntypedHashtable();
 
     public int sizeOf() {
         if (bitmaps == null)
diff --git a/ion/src/com/koushikdutta/ion/bitmap/PostProcess.java b/ion/src/com/koushikdutta/ion/bitmap/PostProcess.java
new file mode 100644
index 00000000..1058f283
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/bitmap/PostProcess.java
@@ -0,0 +1,9 @@
+package com.koushikdutta.ion.bitmap;
+
+/**
+ * Created by koush on 7/1/14.
+ */
+public interface PostProcess {
+    public void postProcess(BitmapInfo info) throws Exception;
+    public String key();
+}
diff --git a/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java b/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
index 596fc03d..f7127484 100644
--- a/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.builder;
 
+import com.koushikdutta.ion.bitmap.PostProcess;
 import com.koushikdutta.ion.bitmap.Transform;
 
 /**
@@ -43,4 +44,11 @@
      * @return
      */
     public B smartSize(boolean smartSize);
+
+    /**
+     * Process the bitmap on a background thread.
+     * @param postProcess
+     * @return
+     */
+    public B postProcess(PostProcess postProcess);
 }
diff --git a/ion/src/com/koushikdutta/ion/builder/ImageViewFutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/ImageViewFutureBuilder.java
index 3870c245..2c01273f 100644
--- a/ion/src/com/koushikdutta/ion/builder/ImageViewFutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/ImageViewFutureBuilder.java
@@ -3,6 +3,7 @@
 import android.widget.ImageView;
 
 import com.koushikdutta.async.future.Future;
+import com.koushikdutta.ion.future.ImageViewFuture;
 
 /**
 * Created by koush on 5/30/13.
@@ -14,5 +15,5 @@
      * @param imageView ImageView to set once the request completes
      * @return
      */
-    public Future<ImageView> intoImageView(ImageView imageView);
+    public ImageViewFuture intoImageView(ImageView imageView);
 }
diff --git a/ion/src/com/koushikdutta/ion/builder/LoadImageViewFutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/LoadImageViewFutureBuilder.java
index 04314514..542c79ed 100644
--- a/ion/src/com/koushikdutta/ion/builder/LoadImageViewFutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/LoadImageViewFutureBuilder.java
@@ -3,6 +3,7 @@
 import android.widget.ImageView;
 
 import com.koushikdutta.async.future.Future;
+import com.koushikdutta.ion.future.ImageViewFuture;
 
 /**
 * Created by koush on 5/30/13.
@@ -14,7 +15,7 @@
      * @param url
      * @return
      */
-    public Future<ImageView> load(String url);
+    public ImageViewFuture load(String url);
 
     /**
      * Perform the request and get the result as a Bitmap, which will then be loaded
diff --git a/ion/src/com/koushikdutta/ion/future/ImageViewFuture.java b/ion/src/com/koushikdutta/ion/future/ImageViewFuture.java
new file mode 100644
index 00000000..ab7711d8
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/future/ImageViewFuture.java
@@ -0,0 +1,13 @@
+package com.koushikdutta.ion.future;
+
+import android.widget.ImageView;
+
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.ion.ImageViewBitmapInfo;
+
+/**
+ * Created by koush on 7/1/14.
+ */
+public interface ImageViewFuture extends Future<ImageView> {
+    Future<ImageViewBitmapInfo> withBitmapInfo();
+}
