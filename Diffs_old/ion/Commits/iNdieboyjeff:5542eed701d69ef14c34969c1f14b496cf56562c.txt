diff --git a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
index 809c4567..4475d99b 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.test;
 
+import android.renderscript.FieldPacker;
 import android.test.AndroidTestCase;
 import android.util.Log;
 
@@ -13,6 +14,9 @@
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.AsyncHttpResponse;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.body.FilePart;
+import com.koushikdutta.async.http.body.MultipartFormDataBody;
+import com.koushikdutta.async.http.body.Part;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
@@ -22,6 +26,7 @@
 import com.koushikdutta.ion.cookie.CookieMiddleware;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.net.HttpCookie;
 import java.net.URI;
 import java.util.List;
@@ -37,6 +42,37 @@ public void testString() throws Exception {
                 .asString().get());
     }
 
+    public void testMultipartFileContentType() throws Exception {
+        File f = new File("/sdcard/ion/testdata");
+        f.getParentFile().mkdirs();
+        f.createNewFile();
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.post("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                MultipartFormDataBody body = (MultipartFormDataBody)request.getBody();
+                body.setMultipartCallback(new MultipartFormDataBody.MultipartCallback() {
+                    @Override
+                    public void onPart(Part part) {
+                        response.send(part.getContentType());
+                    }
+                });
+            }
+        });
+        try {
+            httpServer.listen(AsyncServer.getDefault(), 6666);
+            String mime = Ion.with(getContext())
+            .load("http://localhost:6666/")
+            .setMultipartFile("foo", "test/mime", f)
+            .asString()
+            .get(1000, TimeUnit.MILLISECONDS);
+            assertEquals(mime, "test/mime");
+        }
+        finally {
+            httpServer.stop();
+        }
+    }
+
     public void testStringWithCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
         Ion.with(getContext(),"http://www.clockworkmod.com/")
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 2af91967..e12654f6 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -442,9 +442,10 @@ public void setGson(Gson gson) {
         AsyncHttpRequestFactory asyncHttpRequestFactory = new AsyncHttpRequestFactory() {
             @Override
             public AsyncHttpRequest createAsyncHttpRequest(URI uri, String method, RawHeaders headers) {
+                AsyncHttpRequest request = new AsyncHttpRequest(uri, method, headers);
                 if (!TextUtils.isEmpty(userAgent))
-                    headers.set("User-Agent", userAgent);
-                return new AsyncHttpRequest(uri, method, headers);
+                    request.getHeaders().setUserAgent(userAgent);
+                return request;
             }
         };
 
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 99ff3481..222a485c 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -35,11 +35,13 @@
 import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.body.DocumentBody;
 import com.koushikdutta.async.http.body.FileBody;
+import com.koushikdutta.async.http.body.FilePart;
 import com.koushikdutta.async.http.body.MultipartFormDataBody;
 import com.koushikdutta.async.http.body.StreamBody;
 import com.koushikdutta.async.http.body.StringBody;
 import com.koushikdutta.async.http.body.UrlEncodedFormBody;
 import com.koushikdutta.async.http.libcore.RawHeaders;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.parser.AsyncParser;
 import com.koushikdutta.async.parser.DocumentParser;
 import com.koushikdutta.async.parser.StringParser;
@@ -649,11 +651,25 @@ public IonRequestBuilder setBodyParameters(Map<String, List<String>> params) {
     MultipartFormDataBody multipartBody;
     @Override
     public IonRequestBuilder setMultipartFile(String name, File file) {
+        return setMultipartFile(name, null, file);
+    }
+
+    @Override
+    public IonRequestBuilder setMultipartFile(String name, String contentType, File file) {
         if (multipartBody == null) {
             multipartBody = new MultipartFormDataBody();
             setBody(multipartBody);
         }
-        multipartBody.addFilePart(name, file);
+
+        FilePart part = new FilePart(name, file);
+
+        if (contentType == null)
+            contentType = AsyncHttpServer.tryGetContentType(file.getAbsolutePath());
+
+        if (contentType != null)
+            part.setContentType(contentType);
+
+        multipartBody.addPart(part);
         return this;
     }
 
@@ -667,6 +683,16 @@ public IonRequestBuilder setMultipartParameter(String name, String value) {
         return this;
     }
 
+    @Override
+    public IonRequestBuilder setMultipartParameters(Map<String, List<String>> params) {
+        for (String key: params.keySet()) {
+            for (String value: params.get(key)) {
+                setMultipartParameter(key, value);
+            }
+        }
+        return this;
+    }
+
     @Override
     public IonBitmapRequestBuilder withBitmap() {
         return new IonBitmapRequestBuilder(this);
diff --git a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
index eb1ee15b..6de6f096 100644
--- a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
@@ -1,6 +1,8 @@
 package com.koushikdutta.ion.builder;
 
 import java.io.File;
+import java.util.List;
+import java.util.Map;
 
 /**
 * Created by koush on 5/30/13.
@@ -15,6 +17,14 @@
      */
     public M setMultipartParameter(String name, String value);
 
+    /**
+     * Specify a multipart/form-data parameter to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param params The map containing key value pairs
+     * @return
+     */
+    public M setMultipartParameters(Map<String, List<String>> params);
+
     /**
      * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
      * provided in the load call, the default HTTP method, POST, is used.
@@ -23,4 +33,14 @@
      * @return
      */
     public M setMultipartFile(String name, File file);
+
+    /**
+     * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param name Multipart name
+     * @param file Multipart Content-Type
+     * @param file Multipart file to send
+     * @return
+     */
+    public M setMultipartFile(String name, String contentType, File file);
 }
