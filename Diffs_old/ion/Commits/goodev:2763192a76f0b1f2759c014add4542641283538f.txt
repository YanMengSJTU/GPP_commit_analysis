diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 2c04dd26..9f336870 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -360,7 +360,7 @@ public void run() {
             int count = 0;
             for (DeferredLoadTypeface deferredLoadBitmap: deferred) {
                 typefacesPending.tag(deferredLoadBitmap.key, null);
-                typefacesPending.tag(deferredLoadBitmap.fetcher.bitmapKey, null);
+                typefacesPending.tag(deferredLoadBitmap.fetcher.typefaceKey, null);
                 L.d("processTypefaceDeferred ... .... 4 execute");
                 deferredLoadBitmap.fetcher.execute();
                 count++;
diff --git a/ion/src/com/koushikdutta/ion/font/IonTypeface.java b/ion/src/com/koushikdutta/ion/font/IonTypeface.java
index 16a9dbb4..2aaa93aa 100644
--- a/ion/src/com/koushikdutta/ion/font/IonTypeface.java
+++ b/ion/src/com/koushikdutta/ion/font/IonTypeface.java
@@ -20,7 +20,7 @@
     private TypefaceInfo info;
     @SuppressWarnings("unused")
     private int loadedFrom;
-    private IonDrawableCallback callback;
+    private IonTypefaceCallback callback;
     private Ion ion;
 
     public IonTypeface ion(Ion ion) {
@@ -33,22 +33,22 @@ public TypefaceInfo getTypefaceInfo() {
     }
 
     public SimpleFuture<TextView> getFuture() {
-        return callback.imageViewFuture;
+        return callback.textViewFuture;
     }
 
     public static final int TAG = R.id.font_key;
 
     // create an internal static class that can act as a callback.
     // dont let it hold strong references to anything.
-    static class IonDrawableCallback implements FutureCallback<TypefaceInfo> {
-        private WeakReference<IonTypeface> ionDrawableRef;
-        private ContextReference.TextViewContextReference imageViewRef;
-        private String bitmapKey;
-        private SimpleFuture<TextView> imageViewFuture = new SimpleFuture<TextView>();
-
-        public IonDrawableCallback(IonTypeface drawable, TextView imageView) {
-            ionDrawableRef = new WeakReference<IonTypeface>(drawable);
-            imageViewRef = new ContextReference.TextViewContextReference(imageView);
+    static class IonTypefaceCallback implements FutureCallback<TypefaceInfo> {
+        private WeakReference<IonTypeface> ionTypefaceRef;
+        private ContextReference.TextViewContextReference textViewRef;
+        private String typefaceKey;
+        private SimpleFuture<TextView> textViewFuture = new SimpleFuture<TextView>();
+
+        public IonTypefaceCallback(IonTypeface typeface, TextView textView) {
+            ionTypefaceRef = new WeakReference<IonTypeface>(typeface);
+            textViewRef = new ContextReference.TextViewContextReference(textView);
         }
 
         @SuppressLint("Assert")
@@ -56,48 +56,44 @@ public IonDrawableCallback(IonTypeface drawable, TextView imageView) {
         public void onCompleted(Exception e, TypefaceInfo result) {
             assert Thread.currentThread() == Looper.getMainLooper().getThread();
             assert result != null;
-            // see if the imageview is still alive and cares about this result
-            TextView imageView = imageViewRef.get();
-            L.d("textView..."+imageView);
-            if (imageView == null)
+            // see if the textView is still alive and cares about this result
+            TextView textView = textViewRef.get();
+            if (textView == null)
                 return;
 
-            IonTypeface drawable = ionDrawableRef.get();
-            L.d("IonTypeface..."+drawable);
-            if (drawable == null)
+            IonTypeface typeface = ionTypefaceRef.get();
+            if (typeface == null)
                 return;
 
-            L.d("IonTypeface tag..."+imageView.getTag(TAG));
-            if (imageView.getTag(TAG) != drawable)
+            if (textView.getTag(TAG) != typeface)
                 return;
 
-            imageView.setTag(TAG, null);
-            drawable.setBitmap(result, result.loadedFrom);
-            imageView.setTag(TAG, drawable);
-            imageView.setTypeface(result.typeface);
+            textView.setTag(TAG, null);
+            typeface.setBitmap(result, result.loadedFrom);
+            textView.setTag(TAG, typeface);
+            textView.setTypeface(result.typeface);
 
-            L.d("textView alive ..."+imageViewRef.isAlive());
-            if (null != imageViewRef.isAlive()) {
-                imageViewFuture.cancelSilently();
+            L.d("textView alive ..."+textViewRef.isAlive());
+            if (null != textViewRef.isAlive()) {
+                textViewFuture.cancelSilently();
                 return;
             }
 
-            imageViewFuture.setComplete(e, imageView);
+            textViewFuture.setComplete(e, textView);
         }
     }
 
     public void cancel() {
-        unregister(ion, callback.bitmapKey, callback);
-        callback.bitmapKey = null;
+        unregister(ion, callback.typefaceKey, callback);
+        callback.typefaceKey = null;
     }
 
-    private static void unregister(Ion ion, String key, IonDrawableCallback callback) {
+    private static void unregister(Ion ion, String key, IonTypefaceCallback callback) {
         if (key == null)
             return;
-        // unregister this drawable from the bitmaps that are
-        // pending.
+        // unregister this typeface from the typefaces that are pending.
 
-        // if this drawable was the only thing waiting for this bitmap,
+        // if this typeface was the only thing waiting for this bitmap,
         // then the removeItem call will return the TransformBitmap/LoadBitmap
         // instance
         // that was providing the result.
@@ -119,17 +115,17 @@ private static void unregister(Ion ion, String key, IonDrawableCallback callback
         ion.processTypefaceDeferred();
     }
 
-    public void register(Ion ion, String bitmapKey) {
-        String previousKey = callback.bitmapKey;
-        if (TextUtils.equals(previousKey, bitmapKey))
+    public void register(Ion ion, String typefaceKey) {
+        String previousKey = callback.typefaceKey;
+        if (TextUtils.equals(previousKey, typefaceKey))
             return;
-        callback.bitmapKey = bitmapKey;
-        ion.typefacesPending.add(bitmapKey, callback);
+        callback.typefaceKey = typefaceKey;
+        ion.typefacesPending.add(typefaceKey, callback);
         unregister(ion, previousKey, callback);
     }
 
-    public IonTypeface(TextView imageView) {
-        callback = new IonDrawableCallback(this, imageView);
+    public IonTypeface(TextView textView) {
+        callback = new IonTypefaceCallback(this, textView);
     }
 
     public IonTypeface setBitmap(TypefaceInfo info, int loadedFrom) {
@@ -140,25 +136,24 @@ public IonTypeface setBitmap(TypefaceInfo info, int loadedFrom) {
         this.loadedFrom = loadedFrom;
         this.info = info;
         if (info == null) {
-            callback.bitmapKey = null;
+            callback.typefaceKey = null;
             return this;
         }
 
-        callback.bitmapKey = info.key;
+        callback.typefaceKey = info.key;
         return this;
     }
 
-    static IonTypeface getOrCreateIonDrawable(TextView imageView) {
-        IonTypeface current = (IonTypeface) imageView.getTag(TAG);
+    static IonTypeface getOrCreateIonTypeface(TextView textView) {
+        IonTypeface current = (IonTypeface) textView.getTag(TAG);
         IonTypeface ret;
+        
         if (current == null)
-            ret = new IonTypeface(imageView);
+            ret = new IonTypeface(textView);
         else
             ret = (IonTypeface) current;
-        // invalidate self doesn't seem to trigger the dimension check to be
-        // called by imageview.
-        // are drawable dimensions supposed to be immutable?
-        imageView.setTag(TAG, null);
+        
+        textView.setTag(TAG, null);
         return ret;
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/font/IonTypefaceCache.java b/ion/src/com/koushikdutta/ion/font/IonTypefaceCache.java
index 4c98a3a7..2211b2c9 100644
--- a/ion/src/com/koushikdutta/ion/font/IonTypefaceCache.java
+++ b/ion/src/com/koushikdutta/ion/font/IonTypefaceCache.java
@@ -4,13 +4,9 @@
 import android.annotation.SuppressLint;
 import android.app.ActivityManager;
 import android.content.Context;
-import android.content.res.AssetManager;
-import android.content.res.Resources;
 import android.graphics.Typeface;
 import android.os.Looper;
-import android.util.DisplayMetrics;
 import android.util.Log;
-import android.view.WindowManager;
 
 import com.koushikdutta.ion.Ion;
 
@@ -19,8 +15,6 @@
 public class IonTypefaceCache {
     public static final long DEFAULT_ERROR_CACHE_DURATION = 30000L;
 
-    Resources resources;
-    DisplayMetrics metrics;
     LruTypefaceCache cache;
     Ion ion;
     long errorCacheDuration = DEFAULT_ERROR_CACHE_DURATION;
@@ -36,11 +30,7 @@ public void setErrorCacheDuration(long errorCacheDuration) {
     public IonTypefaceCache(Ion ion) {
         Context context = ion.getContext();
         this.ion = ion;
-        metrics = new DisplayMetrics();
-        ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getMetrics(metrics);
-        final AssetManager mgr = context.getAssets();
-        resources = new Resources(mgr, metrics, context.getResources().getConfiguration());
-        cache = new LruTypefaceCache(getHeapSize(context) / 7);
+        cache = new LruTypefaceCache(getHeapSize(context) / 10);
     }
 
     public TypefaceInfo remove(String key) {
diff --git a/ion/src/com/koushikdutta/ion/font/IonTypefaceRequestBuilder.java b/ion/src/com/koushikdutta/ion/font/IonTypefaceRequestBuilder.java
index 7bf0574a..af01cc14 100644
--- a/ion/src/com/koushikdutta/ion/font/IonTypefaceRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/font/IonTypefaceRequestBuilder.java
@@ -24,7 +24,7 @@
 
     IonRequestBuilder builder;
     Ion ion;
-    ContextReference.TextViewContextReference imageViewPostRef;
+    ContextReference.TextViewContextReference textViewPostRef;
 
     public IonTypefaceRequestBuilder(IonRequestBuilder builder) {
         this.builder = builder;
@@ -35,82 +35,62 @@ public IonTypefaceRequestBuilder(Ion ion) {
         this.ion = ion;
     }
 
-    public IonTypefaceRequestBuilder withTextView(TextView imageView) {
-        imageViewPostRef = new ContextReference.TextViewContextReference(imageView);
+    public IonTypefaceRequestBuilder withTextView(TextView textView) {
+        textViewPostRef = new ContextReference.TextViewContextReference(textView);
         return this;
     }
 
     @SuppressLint("Assert")
     @Override
-    public SimpleFuture<TextView> intoTextView(TextView imageView) {
-        L.d("------------- 1");
+    public SimpleFuture<TextView> intoTextView(TextView textView) {
         assert Thread.currentThread() == Looper.getMainLooper().getThread();
-        L.d("------------- 2");
-        if (imageView == null)
-            throw new NullPointerException("imageView");
+        if (textView == null)
+            throw new NullPointerException("textView");
 
         // no uri? just set a placeholder and bail
         if (builder.uri == null) {
             return FUTURE_TEXTVIEW_NULL_URI;
         }
 
-        L.d("------------- 3");
-        withTextView(imageView);
+        withTextView(textView);
 
-        L.d("------------- 4");
         // executeCache the request, see if we get a bitmap from cache.
         TypefaceFetcher bitmapFetcher = executeCache();
-        L.d("------------- 5");
         if (bitmapFetcher.info != null) {
-            IonTypeface drawable = setIonDrawable(imageView, bitmapFetcher.info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
+            IonTypeface drawable = setIonTypeface(textView, bitmapFetcher.info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
             drawable.cancel();
-            SimpleFuture<TextView> imageViewFuture = drawable.getFuture();
-            imageViewFuture.reset();
+            SimpleFuture<TextView> textViewFuture = drawable.getFuture();
+            textViewFuture.reset();
             L.d("---- load from cache.... " + bitmapFetcher.info.typeface);
-            imageView.setTypeface(bitmapFetcher.info.typeface);
-            imageViewFuture.setComplete(bitmapFetcher.info.exception, imageView);
-            return imageViewFuture;
+            textView.setTypeface(bitmapFetcher.info.typeface);
+            textViewFuture.setComplete(bitmapFetcher.info.exception, textView);
+            return textViewFuture;
         }
-        L.d("------------- 6");
-        // TODO TextViewFutureImpl 想办法和 textview 关联起来
-        // TextViewFutureImpl imageViewFuture = new TextViewFutureImpl();
-        // IonDrawable drawable = setIonDrawable(imageView, null, 0);
-        // doAnimation(imageView, loadAnimation, loadAnimationResource);
-        // IonDrawable.ImageViewFutureImpl imageViewFuture =
-        // drawable.getFuture();
-        // imageViewFuture.reset();
-        // drawable.register(ion, bitmapFetcher.bitmapKey);
-        IonTypeface drawable = setIonDrawable(imageView, null, 0);
-        SimpleFuture<TextView> imageViewFuture = drawable.getFuture();
-        imageViewFuture.reset();
-        drawable.register(ion, bitmapFetcher.bitmapKey);
+        IonTypeface typeface = setIonTypeface(textView, null, 0);
+        SimpleFuture<TextView> textViewFuture = typeface.getFuture();
+        textViewFuture.reset();
+        typeface.register(ion, bitmapFetcher.typefaceKey);
         // nothing from cache, check to see if there's too many imageview loads
         // already in progress
-        L.d("------------- 7");
         if (TypefaceFetcher.shouldDeferTextView(ion)) {
             bitmapFetcher.defer();
         } else {
-            L.d("------------- 8");
             bitmapFetcher.execute();
         }
-        L.d("------------- 9");
 
-        return imageViewFuture;
+        return textViewFuture;
     }
 
-    private IonTypeface setIonDrawable(TextView imageView, TypefaceInfo info, int loadedFrom) {
-        IonTypeface ret = IonTypeface.getOrCreateIonDrawable(imageView).ion(ion);
-        imageView.setTag(IonTypeface.TAG, ret);
+    private IonTypeface setIonTypeface(TextView textView, TypefaceInfo info, int loadedFrom) {
+        IonTypeface ret = IonTypeface.getOrCreateIonTypeface(textView).ion(ion);
+        textView.setTag(IonTypeface.TAG, ret);
         return ret;
     }
 
-    public String computeBitmapKey(String downloadKey) {
+    public String computeTypefaceKey(String downloadKey) {
         assert downloadKey != null;
 
-        // determine the key for this bitmap after all transformations
-        String bitmapKey = downloadKey;
-
-        return bitmapKey;
+        return downloadKey;
     }
 
     private String computeDownloadKey() {
@@ -122,21 +102,21 @@ private String computeDownloadKey() {
 
     TypefaceFetcher executeCache() {
         final String downloadKey = computeDownloadKey();
-        String bitmapKey = computeBitmapKey(downloadKey);
+        String typefaceKey = computeTypefaceKey(downloadKey);
 
         // TODO: eliminate this allocation?
         TypefaceFetcher ret = new TypefaceFetcher();
         ret.downloadKey = downloadKey;
-        ret.bitmapKey = bitmapKey;
+        ret.typefaceKey = typefaceKey;
         ret.builder = builder;
         // ret.postProcess = postProcess;
 
         // see if this request can be fulfilled from the cache
         if (!builder.noCache) {
-            TypefaceInfo bitmap = builder.ion.typefaceCache.get(bitmapKey);
-            L.d("get cache..... " + bitmap);
-            if (bitmap != null) {
-                ret.info = bitmap;
+            TypefaceInfo typeface = builder.ion.typefaceCache.get(typefaceKey);
+            L.d("get cache..... " + typeface);
+            if (typeface != null) {
+                ret.info = typeface;
                 return ret;
             }
         }
diff --git a/ion/src/com/koushikdutta/ion/font/LoadTypeface.java b/ion/src/com/koushikdutta/ion/font/LoadTypeface.java
index 0c5732bd..18516fa3 100644
--- a/ion/src/com/koushikdutta/ion/font/LoadTypeface.java
+++ b/ion/src/com/koushikdutta/ion/font/LoadTypeface.java
@@ -35,7 +35,6 @@ public void onCompleted(Exception e, final File result) {
             @Override
             public void run() {
                 try {
-                    L.d("------------===aaa");
                     if (ion.typefacesPending.tag(key) != LoadTypeface.this) {
                         return;
                     }
@@ -44,7 +43,6 @@ public void run() {
                     info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_NETWORK;
                     report(null, info);
                 } catch (Exception e) {
-                    L.d("----------------");
                     report(e, null);
                 } finally {
                 }
diff --git a/ion/src/com/koushikdutta/ion/font/TypefaceFetcher.java b/ion/src/com/koushikdutta/ion/font/TypefaceFetcher.java
index f86ff403..8fb4890c 100644
--- a/ion/src/com/koushikdutta/ion/font/TypefaceFetcher.java
+++ b/ion/src/com/koushikdutta/ion/font/TypefaceFetcher.java
@@ -27,7 +27,7 @@
 
 public class TypefaceFetcher implements IonRequestBuilder.LoadRequestCallback {
     String downloadKey;
-    public String bitmapKey;
+    public String typefaceKey;
     TypefaceInfo info;
     IonRequestBuilder builder;
 
@@ -98,13 +98,11 @@ public void run() {
                 try {
                     L.d("cache file -- " + file);
                     try {
-                        L.d("------------==1111=");
                         Typeface typeface = Typeface.createFromFile(file);
                         TypefaceInfo info = new TypefaceInfo(transformKey, typeface, (int) new File(file).length());
                         info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_CACHE;
                         callback.report(null, info);
                     } catch (Exception e) {
-                        L.d("e ----------------");
                         callback.report(e, null);
                     } finally {
                     }
@@ -192,7 +190,7 @@ public void execute() {
         final File ttf = new File(file.getAbsolutePath().replace(".zip", ".ttf"));
         if (!builder.noCache && (/*file.exists() ||*/ ttf.exists())) {
             L.d("get font from file " + ttf.getAbsolutePath());
-            getTypefaceFromFile(ion, bitmapKey, ttf.getAbsolutePath());
+            getTypefaceFromFile(ion, typefaceKey, ttf.getAbsolutePath());
             return;
         }
 
@@ -202,8 +200,8 @@ public void execute() {
         // See TransformBitmap for where the cache is populated.
         FileCache fileCache = ion.getCache();
         L.d("cache..............||| " + fileCache);
-        if (!builder.noCache && fileCache.exists(bitmapKey)) {
-            getTypefaceFromHttpCache(ion, bitmapKey, ttf);
+        if (!builder.noCache && fileCache.exists(typefaceKey)) {
+            getTypefaceFromHttpCache(ion, typefaceKey, ttf);
             return;
         }
 
