diff --git a/README.md b/README.md
index d28fa2b4..aa88a4e6 100644
--- a/README.md
+++ b/README.md
@@ -22,7 +22,7 @@
    * text/plain
    * application/json - both [JsonObject](https://github.com/koush/ion#post-json-and-read-json) and [POJO](https://github.com/koush/ion#seamlessly-use-your-own-java-classes-with-gson)
    * [application/x-www-form-urlencoded](https://github.com/koush/ion#post-applicationx-www-form-urlencoded-and-read-a-string)
-   * [multipart/form-data](https://github.com/koush/ion#post-multipartform-data-and-read-json)
+   * [multipart/form-data](https://github.com/koush/ion#post-multipartform-data-and-read-json-with-an-upload-progress-bar)
  * Transparent usage of HTTP features and optimizations:
    * Caching
    * Gzip/Deflate Compression
@@ -94,10 +94,11 @@ Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
 .setCallback(...)
 ```
 
-#### Post multipart/form-data and read JSON
+#### Post multipart/form-data and read JSON with an upload progress bar
 
 ```java
 Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
+.uploadProgressBar(uploadProgressBar)
 .setMultipartParameter("goop", "noop")
 .setMultipartFile("filename.zip", new File("/sdcard/filename.zip"))
 .asJsonObject()
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index ec06f3d4..64a7ee09 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -205,13 +205,15 @@ else if (context instanceof Service) {
         return true;
     }
 
-    private <T> void postExecute(final SimpleFuture<T> future, final Exception ex, final T value) {
+    private <T> void postExecute(final EmitterTransform<T> future, final Exception ex, final T value) {
         final Runnable runner = new Runnable() {
             @Override
             public void run() {
                 // check if the context is still alive...
-                if (!checkContext())
+                if (!checkContext()) {
+                    future.initialRequest.logd("context has died");
                     return;
+                }
 
                 // unless we're invoked onto the handler/main/service thread, there's no frakking way to avoid a
                 // race condition where the service or activity dies before this callback is invoked.
@@ -420,6 +422,7 @@ public void onData(final int totalBytesRead) {
                     assert Thread.currentThread() != Looper.getMainLooper().getThread();
                     // if the requesting context dies during the transfer... cancel
                     if (!checkContext()) {
+                        initialRequest.logd("context has died, cancelling");
                         cancel();
                         return;
                     }
@@ -506,7 +509,7 @@ protected void cleanup() {
                     sink.close();
             }
 
-            TransformFuture<T, LoaderEmitter> self = this;
+            EmitterTransform<T> self = this;
             @Override
             protected void transform(LoaderEmitter emitter) throws Exception {
                 super.transform(emitter);
@@ -529,7 +532,7 @@ public void onCompleted(Exception ex) {
     <T> EmitterTransform<T> execute(final AsyncParser<T> parser, Runnable cancel) {
         assert parser != null;
         EmitterTransform<T> ret = new EmitterTransform<T>(cancel) {
-            TransformFuture<T, LoaderEmitter> self = this;
+            EmitterTransform<T> self = this;
             @Override
             protected void transform(LoaderEmitter emitter) throws Exception {
                 super.transform(emitter);
