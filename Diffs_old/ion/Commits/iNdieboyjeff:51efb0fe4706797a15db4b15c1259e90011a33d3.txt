diff --git a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
index c95d3f79..6b520507 100644
--- a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
@@ -13,41 +13,36 @@
 public class StoreTests extends AndroidTestCase {
     public void testString() throws Exception {
         Ion.getDefault(getContext())
-        .store()
-        .remove("foo")
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .remove();
 
         Ion.getDefault(getContext())
-        .store()
-        .putString("foo", "bar")
+        .store("foo")
+        .putString("bar")
         .get(1000, TimeUnit.MILLISECONDS);
 
         String result = Ion.getDefault(getContext())
-        .store()
-        .getString("foo")
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .getString();
 
         assertEquals(result, "bar");
     }
 
     public void testJson() throws Exception {
         Ion.getDefault(getContext())
-        .store()
-        .remove("foo")
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .remove();
 
         JsonObject json = new JsonObject();
         json.addProperty("foo", "bar");
 
         Ion.getDefault(getContext())
-        .store()
-        .putJsonObject("foo", json)
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .putJsonObject(json);
 
         JsonObject result = Ion.getDefault(getContext())
-        .store()
-        .getJsonObject("foo")
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .getJsonObject();
 
         assertEquals(result.get("foo").getAsString(), "bar");
     }
@@ -58,22 +53,20 @@ public void testJson() throws Exception {
 
     public void testGson() throws Exception {
         Ion.getDefault(getContext())
-        .store()
-        .remove("foo")
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .remove();
 
         TestClass test = new TestClass();
         test.foo = "bar";
 
         Ion.getDefault(getContext())
-        .store()
-        .put("foo", test, TestClass.class)
+        .store("foo")
+        .put(test, TestClass.class)
         .get(1000, TimeUnit.MILLISECONDS);
 
         TestClass result = Ion.getDefault(getContext())
-        .store()
-        .get("foo", TestClass.class)
-        .get(1000, TimeUnit.MILLISECONDS);
+        .store("foo")
+        .get(TestClass.class);
 
         assertEquals(result.foo, "bar");
     }
diff --git a/ion/src/com/koushikdutta/ion/FileCacheStore.java b/ion/src/com/koushikdutta/ion/FileCacheStore.java
index 9391f097..cb911071 100644
--- a/ion/src/com/koushikdutta/ion/FileCacheStore.java
+++ b/ion/src/com/koushikdutta/ion/FileCacheStore.java
@@ -5,15 +5,11 @@
 import com.google.gson.reflect.TypeToken;
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
-import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.future.SimpleFuture;
-import com.koushikdutta.async.http.ResponseCacheMiddleware;
 import com.koushikdutta.async.parser.AsyncParser;
 import com.koushikdutta.async.parser.DocumentParser;
 import com.koushikdutta.async.parser.StringParser;
 import com.koushikdutta.async.stream.FileDataSink;
-import com.koushikdutta.async.stream.InputStreamDataEmitter;
-import com.koushikdutta.async.stream.OutputStreamDataSink;
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.gson.GsonParser;
 import com.koushikdutta.ion.gson.GsonSerializer;
@@ -21,8 +17,6 @@
 import org.w3c.dom.Document;
 
 import java.io.File;
-import java.io.InputStream;
-import java.io.OutputStream;
 
 /**
  * Created by koush on 11/17/13.
@@ -30,12 +24,14 @@
 public class FileCacheStore {
     Ion ion;
     FileCache cache;
-    FileCacheStore(Ion ion, FileCache cache) {
+    String rawKey;
+    FileCacheStore(Ion ion, FileCache cache, String rawKey) {
         this.ion = ion;
         this.cache = cache;
+        this.rawKey = rawKey;
     }
 
-    private <T> Future<T> put(final String rawKey, final T value, final AsyncParser<T> parser) {
+    private <T> Future<T> put(final T value, final AsyncParser<T> parser) {
         final SimpleFuture<T> ret = new SimpleFuture<T>();
         Ion.getIoExecutorService().execute(new Runnable() {
             @Override
@@ -61,20 +57,20 @@ public void onCompleted(Exception ex) {
         return ret;
     }
 
-    public Future<String> putString(String key, String value) {
-        return put(key, value, new StringParser());
+    public Future<String> putString(String value) {
+        return put(value, new StringParser());
     }
 
-    public Future<JsonObject> putJsonObject(String key, JsonObject value) {
-        return put(key, value, new GsonParser<JsonObject>());
+    public Future<JsonObject> putJsonObject(JsonObject value) {
+        return put(value, new GsonParser<JsonObject>());
     }
 
-    public Future<Document> putDocument(String key, Document value) {
-        return put(key, value, new DocumentParser());
+    public Future<Document> putDocument(Document value) {
+        return put(value, new DocumentParser());
     }
 
-    public Future<JsonArray> putJsonArray(String key, JsonArray value) {
-        return put(key, value, new GsonParser<JsonArray>());
+    public Future<JsonArray> putJsonArray(JsonArray value) {
+        return put(value, new GsonParser<JsonArray>());
     }
 
     /*
@@ -87,15 +83,15 @@ public void onCompleted(Exception ex) {
     }
     */
 
-    public <T> Future<T> put(String key, T value, Class<T> clazz) {
-        return put(key, value, new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    public <T> Future<T> put(T value, Class<T> clazz) {
+        return put(value, new GsonSerializer<T>(ion.configure().getGson(), clazz));
     }
 
-    public <T> Future<T> put(String key, T value, TypeToken<T> token) {
-        return put(key, value, new GsonSerializer<T>(ion.configure().getGson(), token));
+    public <T> Future<T> put(T value, TypeToken<T> token) {
+        return put(value, new GsonSerializer<T>(ion.configure().getGson(), token));
     }
-    
-    private <T> Future<T> get(final String rawKey, final AsyncParser<T> parser) {
+
+    private <T> Future<T> as(final AsyncParser<T> parser) {
         final SimpleFuture<T> ret = new SimpleFuture<T>();
 
         Ion.getIoExecutorService().execute(new Runnable() {
@@ -113,51 +109,77 @@ public void run() {
                     .setCallback(ret.getCompletionCallback());
                 }
                 catch (Exception e) {
+                    ret.setComplete(e);
                 }
             }
         });
         
         return ret;
     }
-    
-    public Future<String> getString(String key) {
-        return get(key, new StringParser());
+
+    private <T> T get(final AsyncParser<T> parser) {
+        try {
+            final String key = FileCache.toKeyString("ion-store:", rawKey);
+            final File file = cache.getFile(key);
+            return ion.build(ion.getContext(), file)
+            .as(parser)
+            .get();
+        }
+        catch (Exception e) {
+            return null;
+        }
     }
 
-    public Future<JsonObject> getJsonObject(String key) {
-        return get(key, new GsonParser<JsonObject>());
+    public String getString() {
+        return get(new StringParser());
     }
 
-    public Future<JsonArray> getJsonArray(String key) {
-        return get(key, new GsonParser<JsonArray>());
+    public Future<String> asString() {
+        return as(new StringParser());
     }
 
-    public Future<Document> getDocument(String key) {
-        return get(key, new DocumentParser());
+    public Future<JsonObject> asJsonObject() {
+        return as(new GsonParser<JsonObject>());
     }
 
-    public <T> Future<T> get(String key, Class<T> clazz) {
-        return get(key, new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    public JsonObject getJsonObject() {
+        return get(new GsonParser<JsonObject>());
     }
 
-    public <T> Future<T> get(String key, TypeToken<T> token) {
-        return get(key, new GsonSerializer<T>(ion.configure().getGson(), token));
+    public Future<JsonArray> asJsonArray() {
+        return as(new GsonParser<JsonArray>());
     }
 
-    public Future<String> remove(final String key) {
-        final SimpleFuture<String> ret = new SimpleFuture<String>();
-        Ion.getIoExecutorService().execute(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    cache.remove(key);
-                    ret.setComplete(key);
-                }
-                catch (Exception e) {
-                    ret.setComplete(e);
-                }
-            }
-        });
-        return ret;
+    public JsonArray getJsonArray() {
+        return get(new GsonParser<JsonArray>());
+    }
+
+    public Future<Document> asDocument() {
+        return as(new DocumentParser());
+    }
+
+    public Document getDocument() {
+        return get(new DocumentParser());
+    }
+
+    public <T> Future<T> as(Class<T> clazz) {
+        return as(new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    }
+
+    public <T> T get(Class<T> clazz) {
+        return get(new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    }
+
+    public <T> Future<T> as(TypeToken<T> token) {
+        return as(new GsonSerializer<T>(ion.configure().getGson(), token));
+    }
+
+    public <T> T get(TypeToken<T> token) {
+        return get(new GsonSerializer<T>(ion.configure().getGson(), token));
+    }
+
+    public void remove() {
+        final String key = FileCache.toKeyString("ion-store:", rawKey);
+        cache.remove(key);
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 070cc69e..0be9b36e 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -373,16 +373,16 @@ private void addCookieMiddleware() {
      * Get or put an item from the cache
      * @return
      */
-    public FileCacheStore cache() {
-        return new FileCacheStore(this, responseCache.getFileCache());
+    public FileCacheStore cache(String key) {
+        return new FileCacheStore(this, responseCache.getFileCache(), key);
     }
 
     /**
      * Get or put an item in the persistent store
      * @return
      */
-    public FileCacheStore store() {
-        return new FileCacheStore(this, storeCache);
+    public FileCacheStore store(String key) {
+        return new FileCacheStore(this, storeCache, key);
     }
 
     public String getName() {
