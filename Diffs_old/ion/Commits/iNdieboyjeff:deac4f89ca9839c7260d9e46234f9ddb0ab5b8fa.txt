diff --git a/ion-test/src/com/koushikdutta/ion/test/FileTests.java b/ion-test/src/com/koushikdutta/ion/test/FileTests.java
index ba9e7d39..ad9b1e2a 100644
--- a/ion-test/src/com/koushikdutta/ion/test/FileTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/FileTests.java
@@ -1,10 +1,11 @@
 package com.koushikdutta.ion.test;
 
 import android.test.AndroidTestCase;
+
+import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 
 import java.io.File;
-import java.util.concurrent.Semaphore;
 
 /**
  * Created by koush on 5/22/13.
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issues.java b/ion-test/src/com/koushikdutta/ion/test/Issues.java
index e5ba78a1..95ea1e78 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issues.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Issues.java
@@ -2,19 +2,24 @@
 
 import android.graphics.Bitmap;
 import android.test.AndroidTestCase;
+import android.util.Base64;
 import android.util.Log;
 
 import com.koushikdutta.async.AsyncServer;
+import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
 import com.koushikdutta.async.http.server.HttpServerRequestCallback;
+import com.koushikdutta.async.util.*;
 import com.koushikdutta.ion.Ion;
 
+import java.io.File;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -98,4 +103,44 @@ public void testIssue200() throws Exception {
 
         System.out.println(val);
     }
+
+    public void testIssue179() throws Exception {
+        Ion.with(getContext())
+        .load("https://api.gigaset-elements.de/app/check-support" )
+        .setBodyParameter("version", "1.0")
+        .asString()
+        .setCallback(new FutureCallback<String>() {
+            @Override
+            public void onCompleted(Exception e, String result) {
+                if(result!=null)
+                    Log.d("WTF",result);
+                if(e!=null){
+                    e.printStackTrace();
+                }
+            }
+        })
+        .get();
+    }
+
+    public void testIssue253() throws Exception {
+        byte[] random = new byte[100000];
+        new Random(39548394).nextBytes(random);
+        String b64 = Base64.encodeToString(random, 0);
+
+        String uploadUrl = Ion.with(getContext())
+        .load("http://ion-test.appspot.com/upload_url")
+        .asString()
+        .get();
+
+        File file = getContext().getFileStreamPath("testData");
+        StreamUtility.writeFile(file, b64);
+
+        String data = Ion.with(getContext())
+        .load(uploadUrl)
+        .setMultipartFile("file", file)
+        .asString()
+        .get();
+
+        assertEquals(b64, data);
+    }
 }
diff --git a/ion-test/src/com/koushikdutta/ion/test/Md5.java b/ion-test/src/com/koushikdutta/ion/test/Md5.java
index 2fa0aa3e..f6a6bb81 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Md5.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Md5.java
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion.test;
 
 import com.koushikdutta.async.ByteBufferList;
+import com.koushikdutta.async.util.StreamUtility;
 
 import java.io.File;
 import java.io.FileInputStream;
diff --git a/ion-test/src/com/koushikdutta/ion/test/StreamTests.java b/ion-test/src/com/koushikdutta/ion/test/StreamTests.java
index 76bc7b23..23cc81e2 100644
--- a/ion-test/src/com/koushikdutta/ion/test/StreamTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/StreamTests.java
@@ -10,6 +10,7 @@
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
 import com.koushikdutta.async.http.server.HttpServerRequestCallback;
+import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 
 import java.io.FileOutputStream;
diff --git a/ion-test/src/com/koushikdutta/ion/test/StreamUtility.java b/ion-test/src/com/koushikdutta/ion/test/StreamUtility.java
deleted file mode 100644
index 67e99030..00000000
--- a/ion-test/src/com/koushikdutta/ion/test/StreamUtility.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.koushikdutta.ion.test;
-
-import android.net.http.AndroidHttpClient;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.*;
-import java.nio.ByteBuffer;
-import java.nio.channels.ReadableByteChannel;
-import java.nio.channels.WritableByteChannel;
-
-class StreamUtility {
-    public static void fastChannelCopy(final ReadableByteChannel src, final WritableByteChannel dest) throws IOException {
-        final ByteBuffer buffer = ByteBuffer.allocateDirect(16 * 1024);
-        while (src.read(buffer) != -1) {
-            // prepare the buffer to be drained
-            buffer.flip();
-            // write to the channel, may block
-            dest.write(buffer);
-            // If partial transfer, shift remainder down
-            // If buffer is empty, same as doing recycle()
-            buffer.compact();
-        }
-        // EOF will leave buffer in fill state
-        buffer.flip();
-        // make sure the buffer is fully drained.
-        while (buffer.hasRemaining()) {
-            dest.write(buffer);
-        }
-    }
-
-	public static void copyStream(InputStream input, OutputStream output) throws IOException
-	{
-//	    final ReadableByteChannel inputChannel = Channels.newChannel(input);
-//	    final WritableByteChannel outputChannel = Channels.newChannel(output);
-//	    // copy the channels
-//	    fastChannelCopy(inputChannel, outputChannel);
-//	    // closing the channels
-////	    inputChannel.close();
-////	    outputChannel.close();
-
-	    
-	    byte[] stuff = new byte[65536];
-		int read = 0;
-		int total = 0;
-		while ((read = input.read(stuff)) != -1)
-		{
-			output.write(stuff, 0, read);
-			total += read;
-		}
-//		return total;
-	}
-    
-    public static String downloadUriAsString(String uri) throws IOException {
-        HttpGet get = new HttpGet(uri);
-        return downloadUriAsString(get);
-    }
-
-    
-    public static String downloadUriAsString(final HttpUriRequest req) throws IOException {
-        AndroidHttpClient client = AndroidHttpClient.newInstance("Android");
-        try {
-            HttpResponse res = client.execute(req);
-            return readToEnd(res.getEntity().getContent());
-        }
-        finally {
-            client.close();
-        }
-    }
-
-    public static JSONObject downloadUriAsJSONObject(String uri) throws IOException, JSONException {
-        return new JSONObject(downloadUriAsString(uri));
-    }
-
-    public static JSONObject downloadUriAsJSONObject(HttpUriRequest req) throws IOException, JSONException {
-        return new JSONObject(downloadUriAsString(req));
-    }
-
-    public static byte[] readToEndAsArray(InputStream input) throws IOException
-    {
-        DataInputStream dis = new DataInputStream(input);
-        byte[] stuff = new byte[1024];
-        ByteArrayOutputStream buff = new ByteArrayOutputStream();
-        int read = 0;
-        while ((read = dis.read(stuff)) != -1)
-        {
-            buff.write(stuff, 0, read);
-        }
-        dis.close();
-        return buff.toByteArray();
-    }
-    
-	public static String readToEnd(InputStream input) throws IOException
-	{
-	    return new String(readToEndAsArray(input));
-	}
-
-    static public String readFile(String filename) throws IOException {
-        return readFile(new File(filename));
-    }
-    
-    static public String readFile(File file) throws IOException {
-        byte[] buffer = new byte[(int) file.length()];
-        DataInputStream input = new DataInputStream(new FileInputStream(file));
-        input.readFully(buffer);
-        return new String(buffer);
-    }
-    
-    public static void writeFile(File file, String string) throws IOException {
-        file.getParentFile().mkdirs();
-        DataOutputStream dout = new DataOutputStream(new FileOutputStream(file));
-        dout.write(string.getBytes());
-        dout.close();
-    }
-    
-    public static void writeFile(String file, String string) throws IOException {
-        writeFile(new File(file), string);
-    }
-}
-
