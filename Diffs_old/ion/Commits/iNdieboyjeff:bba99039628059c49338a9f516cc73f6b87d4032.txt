diff --git a/ion/src/com/koushikdutta/ion/InputStreamParser.java b/ion/src/com/koushikdutta/ion/InputStreamParser.java
index 9ceb8cfb..af12d996 100644
--- a/ion/src/com/koushikdutta/ion/InputStreamParser.java
+++ b/ion/src/com/koushikdutta/ion/InputStreamParser.java
@@ -18,13 +18,13 @@
 public class InputStreamParser implements AsyncParser<InputStream> {
     @Override
     public Future<InputStream> parse(DataEmitter emitter) {
-        return new TransformFuture<InputStream, ByteBufferList>() {
+        return new ByteBufferListParser().parse(emitter)
+        .then(new TransformFuture<InputStream, ByteBufferList>() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 setComplete(new ByteBufferListInputStream(result));
             }
-        }
-        .from(new ByteBufferListParser().parse(emitter));
+        });
     }
 
     @Override
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index c636b822..2c4d6da4 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -225,7 +225,10 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
     private static class BitmapInfoToBitmap extends TransformFuture<Bitmap, BitmapInfo> {
         @Override
         protected void transform(BitmapInfo result) throws Exception {
-            setComplete(result.bitmaps[0]);
+            if (result.exception != null)
+                setComplete(result.exception);
+            else
+                setComplete(result.bitmaps[0]);
         }
     }
 
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index eb420ec3..d1274800 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -353,7 +353,7 @@ public void onCompleted(Exception e, T result) {
                         response.request = finalRequest;
                         response.result = result;
                         response.exception = e;
-                        ret.setComplete(e, response);
+                        ret.setComplete(response);
                         return;
                     }
                     ret.setComplete(e, null);
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonParser.java b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
index de1fc08e..c51b8ba1 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonParser.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
@@ -25,7 +25,8 @@ public GsonParser() {
     }
     @Override
     public Future<T> parse(DataEmitter emitter) {
-        return new TransformFuture<T, ByteBufferList>() {
+        return new ByteBufferListParser().parse(emitter)
+        .then(new TransformFuture<T, ByteBufferList>() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 JsonParser parser = new JsonParser();
@@ -34,8 +35,7 @@ protected void transform(ByteBufferList result) throws Exception {
                     throw new JsonParseException("unable to parse json");
                 setComplete(null, parsed);
             }
-        }
-        .from(new ByteBufferListParser().parse(emitter));
+        });
     }
 
     @Override
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
index 1888a5bf..a62a6d9a 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
@@ -35,15 +35,15 @@ public GsonSerializer(Gson gson, TypeToken<T> token) {
     }
     @Override
     public Future<T> parse(DataEmitter emitter) {
-        return new TransformFuture<T, ByteBufferList>() {
+        return new ByteBufferListParser().parse(emitter)
+        .then(new TransformFuture<T, ByteBufferList>() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 ByteBufferListInputStream bin = new ByteBufferListInputStream(result);
                 T ret = (T)gson.fromJson(new JsonReader(new InputStreamReader(bin)), type);
                 setComplete(ret);
             }
-        }
-        .from(new ByteBufferListParser().parse(emitter));
+        });
     }
 
     @Override
