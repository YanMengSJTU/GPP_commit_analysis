diff --git a/ion/src/com/koushikdutta/ion/BitmapCallback.java b/ion/src/com/koushikdutta/ion/BitmapCallback.java
index 2b7c87cb..1fe97af1 100644
--- a/ion/src/com/koushikdutta/ion/BitmapCallback.java
+++ b/ion/src/com/koushikdutta/ion/BitmapCallback.java
@@ -28,7 +28,7 @@ boolean put() {
     }
 
     protected void onReported() {
-        BitmapFetcher.processDeferred(ion);
+        ion.processDeferred();
     }
 
     protected void report(final Exception e, final BitmapInfo info) {
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index 479d6cc1..38ff182c 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -44,7 +44,7 @@ public void onCompleted(Exception e, BitmapInfo result) {
         return false;
     }
 
-    private static final int MAX_IMAGEVIEW_LOAD = 5;
+    static final int MAX_IMAGEVIEW_LOAD = 5;
 
     static boolean shouldDeferImageView(Ion ion) {
         if (ion.bitmapsPending.keySet().size() <= MAX_IMAGEVIEW_LOAD)
@@ -61,34 +61,6 @@ static boolean shouldDeferImageView(Ion ion) {
         return false;
     }
 
-    static void processDeferred(Ion ion) {
-        if (shouldDeferImageView(ion))
-            return;
-        ArrayList<DeferredLoadBitmap> deferred = null;
-        for (String key: ion.bitmapsPending.keySet()) {
-            Object owner = ion.bitmapsPending.tag(key);
-            if (owner instanceof DeferredLoadBitmap) {
-                DeferredLoadBitmap deferredLoadBitmap = (DeferredLoadBitmap)owner;
-                if (deferred == null)
-                    deferred = new ArrayList<DeferredLoadBitmap>();
-                deferred.add(deferredLoadBitmap);
-            }
-        }
-
-        if (deferred == null)
-            return;
-        int count = 0;
-        for (DeferredLoadBitmap deferredLoadBitmap: deferred) {
-            ion.bitmapsPending.tag(deferredLoadBitmap.key, null);
-            ion.bitmapsPending.tag(deferredLoadBitmap.fetcher.bitmapKey, null);
-            deferredLoadBitmap.fetcher.executeNetwork();
-            count++;
-            // do MAX_IMAGEVIEW_LOAD max. this may end up going over the MAX_IMAGEVIEW_LOAD threshhold
-            if (count > MAX_IMAGEVIEW_LOAD)
-                return;
-        }
-    }
-
     DeferredLoadBitmap executeDeferred() {
         DeferredLoadBitmap ret = new DeferredLoadBitmap(builder.ion, downloadKey, this);
         executeTransforms(builder.ion);
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 1c22ae32..22296d89 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -229,6 +229,42 @@ int groupCount(Object group) {
         return members.size();
     }
 
+    private Runnable processDeferred = new Runnable() {
+        @Override
+        public void run() {
+            if (BitmapFetcher.shouldDeferImageView(Ion.this))
+                return;
+            ArrayList<DeferredLoadBitmap> deferred = null;
+            for (String key: bitmapsPending.keySet()) {
+                Object owner = bitmapsPending.tag(key);
+                if (owner instanceof DeferredLoadBitmap) {
+                    DeferredLoadBitmap deferredLoadBitmap = (DeferredLoadBitmap)owner;
+                    if (deferred == null)
+                        deferred = new ArrayList<DeferredLoadBitmap>();
+                    deferred.add(deferredLoadBitmap);
+                }
+            }
+
+            if (deferred == null)
+                return;
+            int count = 0;
+            for (DeferredLoadBitmap deferredLoadBitmap: deferred) {
+                bitmapsPending.tag(deferredLoadBitmap.key, null);
+                bitmapsPending.tag(deferredLoadBitmap.fetcher.bitmapKey, null);
+                deferredLoadBitmap.fetcher.executeNetwork();
+                count++;
+                // do MAX_IMAGEVIEW_LOAD max. this may end up going over the MAX_IMAGEVIEW_LOAD threshhold
+                if (count > BitmapFetcher.MAX_IMAGEVIEW_LOAD)
+                    return;
+            }
+        }
+    };
+
+    void processDeferred() {
+        mainHandler.removeCallbacks(processDeferred);
+        mainHandler.post(processDeferred);
+    }
+
     /**
      * Cancel all pending requests associated with the request group
      * @param group
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 870a4f20..2fdea264 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -133,15 +133,10 @@ public void register(Ion ion, String bitmapKey) {
             TransformBitmap info = (TransformBitmap)owner;
             // this transform is also backed by a LoadBitmap, grab that
             // if it is the only waiter
-            owner = ion.bitmapsPending.removeItem(info.downloadKey, info);
+            ion.bitmapsPending.removeItem(info.downloadKey, info);
         }
 
-        // cancel the load
-        if (owner instanceof LoadBitmap) {
-//            LoadBitmap load = (LoadBitmap)owner;
-//            load.emitterTransform.cancel();
-            BitmapFetcher.processDeferred(ion);
-        }
+        ion.processDeferred();
     }
 
     private static final int DEFAULT_PAINT_FLAGS = Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG;
