diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
index 9b72179d..b071cbfd 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
@@ -48,7 +48,8 @@ public void onClick(View v) {
 
                 download.setText("Cancel");
                 // this is a 180MB zip file to test with
-                downloading = Ion.with(ProgressBarDownload.this, "http://developer.clockworkmod.com/downloads/51/4883/cm-10.1-20130512-CPUFREQ-m7.zip")
+                downloading = Ion.with(ProgressBarDownload.this)
+                .load("http://developer.clockworkmod.com/downloads/51/4883/cm-10.1-20130512-CPUFREQ-m7.zip")
                     // attach the percentage report to a progress bar.
                     // can also attach to a ProgressDialog with progressDialog.
                     .progressBar(progressBar)
@@ -57,7 +58,7 @@ public void onClick(View v) {
                     // Updates to TextViews MUST happen on the UI thread.
                     .progressHandler(new ProgressCallback() {
                         @Override
-                        public void onProgress(int downloaded, int total) {
+                        public void onProgress(long downloaded, long total) {
                             downloadCount.setText("" + downloaded + " / " + total);
                         }
                     })
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
index 060981af..1a6f433e 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
@@ -69,7 +69,7 @@ public void onClick(View v) {
                 // Updates to TextViews MUST happen on the UI thread.
                 .uploadProgressHandler(new ProgressCallback() {
                     @Override
-                    public void onProgress(int downloaded, int total) {
+                    public void onProgress(long downloaded, long total) {
                         uploadCount.setText("" + downloaded + " / " + total);
                     }
                 })
diff --git a/ion-test/src/com/koushikdutta/ion/test/CookieTests.java b/ion-test/src/com/koushikdutta/ion/test/CookieTests.java
index 366fce61..a2b3f6b0 100644
--- a/ion-test/src/com/koushikdutta/ion/test/CookieTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/CookieTests.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.test;
 
+import android.net.Uri;
 import android.test.AndroidTestCase;
 
 import com.koushikdutta.async.http.libcore.RawHeaders;
@@ -37,7 +38,7 @@ public void testCookies() throws Exception {
         manager.put(uri, headers.toMultimap());
 
         RawHeaders newHeaders = new RawHeaders();
-        RequestHeaders requestHeaders = new RequestHeaders(uri, newHeaders);
+        RequestHeaders requestHeaders = new RequestHeaders(Uri.parse(uri.toString()), newHeaders);
         Map<String, List<String>> cookies = manager.get(uri, newHeaders.toMultimap());
         manager.get(uri, cookies);
         requestHeaders.addCookies(cookies);
@@ -69,7 +70,7 @@ public void testReinit() throws Exception {
         CookieManager manager = middleware.getCookieManager();
 
         RawHeaders newHeaders = new RawHeaders();
-        RequestHeaders requestHeaders = new RequestHeaders(uri, newHeaders);
+        RequestHeaders requestHeaders = new RequestHeaders(Uri.parse(uri.toString()), newHeaders);
         Map<String, List<String>> cookies = manager.get(uri, newHeaders.toMultimap());
         manager.get(uri, cookies);
         requestHeaders.addCookies(cookies);
diff --git a/ion-test/src/com/koushikdutta/ion/test/ProgressTests.java b/ion-test/src/com/koushikdutta/ion/test/ProgressTests.java
index 5fd56809..e347152d 100644
--- a/ion-test/src/com/koushikdutta/ion/test/ProgressTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/ProgressTests.java
@@ -33,7 +33,7 @@ public void testProgress() throws Exception {
                 .setTimeout(600000)
                 .progress(new ProgressCallback() {
                     @Override
-                    public void onProgress(int downloaded, int total) {
+                    public void onProgress(long downloaded, long total) {
                         // depending on gzip, etc. the total may vary... the actual length of the uncompressed data
                         // is 100000
                         assertTrue(total > 90000 && total < 110000);
@@ -83,7 +83,7 @@ public void onCompleted(Exception ex) {
             Ion.with(getContext(), "http://localhost:5000/")
                     .uploadProgress(new ProgressCallback() {
                         @Override
-                        public void onProgress(int downloaded, int total) {
+                        public void onProgress(long downloaded, long total) {
                             semaphore.release();
                         }
                     })
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index ee5f6a30..c69a31f1 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -3,6 +3,7 @@
 import android.annotation.TargetApi;
 import android.app.Fragment;
 import android.content.Context;
+import android.net.Uri;
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
@@ -559,7 +560,7 @@ public void setGson(Gson gson) {
 
         AsyncHttpRequestFactory asyncHttpRequestFactory = new AsyncHttpRequestFactory() {
             @Override
-            public AsyncHttpRequest createAsyncHttpRequest(URI uri, String method, RawHeaders headers) {
+            public AsyncHttpRequest createAsyncHttpRequest(Uri uri, String method, RawHeaders headers) {
                 AsyncHttpRequest request = new AsyncHttpRequest(uri, method, headers);
                 if (!TextUtils.isEmpty(userAgent))
                     request.getHeaders().setUserAgent(userAgent);
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index e100e901..80d63463 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -113,7 +113,7 @@ public IonRequestBuilder load(String method, String url) {
     private RawHeaders getHeaders() {
         if (headers == null) {
             headers = new RawHeaders();
-            AsyncHttpRequest.setDefaultHeaders(headers, uri == null ? null : URI.create(uri));
+            AsyncHttpRequest.setDefaultHeaders(headers, uri == null ? null : Uri.parse(uri));
         }
         return headers;
     }
@@ -246,8 +246,8 @@ public void run() {
             AsyncServer.post(handler, runner);
     }
 
-    private URI prepareURI() {
-        URI uri;
+    private Uri prepareURI() {
+        Uri uri;
         try {
             if (query != null) {
                 Uri.Builder builder = Uri.parse(this.uri).buildUpon();
@@ -256,10 +256,10 @@ private URI prepareURI() {
                         builder = builder.appendQueryParameter(key, value);
                     }
                 }
-                uri = URI.create(builder.toString());
+                uri = builder.build();
             }
             else {
-                uri = URI.create(this.uri);
+                uri = Uri.parse(this.uri);
             }
         }
         catch (Exception e) {
@@ -271,7 +271,7 @@ private URI prepareURI() {
         return uri;
     }
 
-    private AsyncHttpRequest prepareRequest(URI uri, AsyncHttpRequestBody wrappedBody) {
+    private AsyncHttpRequest prepareRequest(Uri uri, AsyncHttpRequestBody wrappedBody) {
         AsyncHttpRequest request = ion.configure().getAsyncHttpRequestFactory().createAsyncHttpRequest(uri, method, headers);
         request.setFollowRedirect(followRedirect);
         request.setBody(wrappedBody);
@@ -291,7 +291,7 @@ private AsyncHttpRequest prepareRequest(URI uri, AsyncHttpRequestBody wrappedBod
     LoadRequestCallback loadRequestCallback;
 
     private <T> void getLoaderEmitter(final EmitterTransform<T> ret) {
-        URI uri = prepareURI();
+        Uri uri = prepareURI();
         if (uri == null) {
             ret.setComplete(new Exception("Invalid URI"));
             return;
@@ -301,7 +301,7 @@ private AsyncHttpRequest prepareRequest(URI uri, AsyncHttpRequestBody wrappedBod
         if (uploadProgressHandler != null || uploadProgressBar != null || uploadProgress != null || uploadProgressDialog != null) {
             wrappedBody = new RequestBodyUploadObserver(body, new ProgressCallback() {
                 @Override
-                public void onProgress(final int downloaded, final int total) {
+                public void onProgress(final long downloaded, final long total) {
                     assert Thread.currentThread() != Looper.getMainLooper().getThread();
 
                     final int percent = (int)((float)downloaded / total * 100f);
@@ -473,7 +473,7 @@ public void run() {
             }
 
             // hook up data progress callbacks
-            final int total = emitter.length();
+            final long total = emitter.length();
             DataTrackingEmitter tracker;
             if (!(emitter instanceof DataTrackingEmitter)) {
                 tracker = new FilteredDataEmitter();
@@ -618,7 +618,7 @@ public void onCompleted(Exception e, T result) {
     }
 
     Future<InputStream> execute() {
-        URI uri = prepareURI();
+        Uri uri = prepareURI();
         if (uri == null)
             return null;
 
diff --git a/ion/src/com/koushikdutta/ion/Loader.java b/ion/src/com/koushikdutta/ion/Loader.java
index 000aebb3..2f389303 100644
--- a/ion/src/com/koushikdutta/ion/Loader.java
+++ b/ion/src/com/koushikdutta/ion/Loader.java
@@ -21,7 +21,7 @@
         public static final int LOADED_FROM_CONDITIONAL_CACHE = 2;
         public static final int LOADED_FROM_NETWORK = 3;
 
-        public LoaderEmitter(DataEmitter emitter, int length, int loadedFrom, RawHeaders headers, AsyncHttpRequest request) {
+        public LoaderEmitter(DataEmitter emitter, long length, int loadedFrom, RawHeaders headers, AsyncHttpRequest request) {
             this.length = length;
             this.emitter = emitter;
             this.loadedFrom = loadedFrom;
@@ -29,11 +29,11 @@ public LoaderEmitter(DataEmitter emitter, int length, int loadedFrom, RawHeaders
             this.request = request;
         }
         DataEmitter emitter;
-        int length;
+        long length;
         public DataEmitter getDataEmitter() {
             return emitter;
         }
-        public int length() {
+        public long length() {
             return length;
         }
         int loadedFrom;
diff --git a/ion/src/com/koushikdutta/ion/ProgressCallback.java b/ion/src/com/koushikdutta/ion/ProgressCallback.java
index bed62bf4..574cb248 100644
--- a/ion/src/com/koushikdutta/ion/ProgressCallback.java
+++ b/ion/src/com/koushikdutta/ion/ProgressCallback.java
@@ -9,5 +9,5 @@
      * @param downloaded The number of bytes currently downloaded
      * @param total The total number of bytes in this request, or -1 if unknown
      */
-    void onProgress(int downloaded, int total);
+    void onProgress(long downloaded, long total);
 }
diff --git a/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java b/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
index 3baaf9bf..5df2ac6f 100644
--- a/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
+++ b/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.net.Uri;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -71,7 +72,7 @@ else if (!TextUtils.isEmpty(line)) {
     @Override
     public void onSocket(OnSocketData data) {
         try {
-            Map<String, List<String>> cookies = manager.get (data.request.getUri(), data.request.getHeaders().getHeaders().toMultimap());
+            Map<String, List<String>> cookies = manager.get(URI.create(data.request.getUri().toString()), data.request.getHeaders().getHeaders().toMultimap());
             data.request.getHeaders().addCookies(cookies);
         }
         catch (Exception e) {
@@ -80,7 +81,11 @@ public void onSocket(OnSocketData data) {
 
     @Override
     public void onHeadersReceived(OnHeadersReceivedData data) {
-        put(data.request.getUri(), data.headers.getHeaders());
+        try {
+            put(URI.create(data.request.getUri().toString()), data.headers.getHeaders());
+        }
+        catch (Exception e) {
+        }
     }
 
     public void put(URI uri, RawHeaders headers) {
diff --git a/ion/src/com/koushikdutta/ion/loader/AsyncHttpRequestFactory.java b/ion/src/com/koushikdutta/ion/loader/AsyncHttpRequestFactory.java
index 3573598c..93b7b6d1 100644
--- a/ion/src/com/koushikdutta/ion/loader/AsyncHttpRequestFactory.java
+++ b/ion/src/com/koushikdutta/ion/loader/AsyncHttpRequestFactory.java
@@ -1,13 +1,13 @@
 package com.koushikdutta.ion.loader;
 
+import android.net.Uri;
+
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.libcore.RawHeaders;
 
-import java.net.URI;
-
 /**
  * Created by koush on 7/15/13.
  */
 public interface AsyncHttpRequestFactory {
-    public AsyncHttpRequest createAsyncHttpRequest(URI uri, String method, RawHeaders headers);
+    public AsyncHttpRequest createAsyncHttpRequest(Uri uri, String method, RawHeaders headers);
 }
diff --git a/ion/src/com/koushikdutta/ion/loader/FileLoader.java b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
index 5b6444da..4741403a 100644
--- a/ion/src/com/koushikdutta/ion/loader/FileLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
@@ -109,7 +109,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
             @Override
             public void run() {
                 try {
-                    InputStream stream = new FileInputStream(new File(request.getUri()));
+                    InputStream stream = new FileInputStream(new File(URI.create(request.getUri().toString())));
                     ret.setComplete(stream);
                 } catch (Exception e) {
                     ret.setComplete(e);
@@ -127,7 +127,7 @@ public void run() {
         ion.getHttpClient().getServer().post(new Runnable() {
             @Override
             public void run() {
-                File file = new File(request.getUri());
+                File file = new File(URI.create(request.getUri().toString()));
                 FileDataEmitter emitter = new FileDataEmitter(ion.getHttpClient().getServer(), file);
                 ret.setComplete(emitter);
                 callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), LoaderEmitter.LOADED_FROM_CACHE, null, request));
diff --git a/ion/src/com/koushikdutta/ion/loader/HttpLoader.java b/ion/src/com/koushikdutta/ion/loader/HttpLoader.java
index d01dea56..fa36cf10 100644
--- a/ion/src/com/koushikdutta/ion/loader/HttpLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/HttpLoader.java
@@ -24,7 +24,7 @@
         return (Future< DataEmitter >)(Future)ion.getHttpClient().execute(request, new HttpConnectCallback() {
             @Override
             public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
-                int length = -1;
+                long length = -1;
                 int loadedFrom = LoaderEmitter.LOADED_FROM_NETWORK;
                 RawHeaders headers = null;
                 AsyncHttpRequest request = null;
