diff --git a/README.md b/README.md
index 0368081d..d69134b7 100644
--- a/README.md
+++ b/README.md
@@ -377,4 +377,11 @@ dependencies {
 ```
 git clone git://github.com/koush/AndroidAsync.git
 git clone git://github.com/koush/ion.git
+cd ion/ion
+ant release install
 ```
+Jars are at
+ * ion/ion/bin/classes.jar
+ * AndroidAsync/AndroidAsync/bin/classes.jar
+
+
diff --git a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
index 809c4567..4475d99b 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.test;
 
+import android.renderscript.FieldPacker;
 import android.test.AndroidTestCase;
 import android.util.Log;
 
@@ -13,6 +14,9 @@
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.AsyncHttpResponse;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.body.FilePart;
+import com.koushikdutta.async.http.body.MultipartFormDataBody;
+import com.koushikdutta.async.http.body.Part;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
@@ -22,6 +26,7 @@
 import com.koushikdutta.ion.cookie.CookieMiddleware;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.net.HttpCookie;
 import java.net.URI;
 import java.util.List;
@@ -37,6 +42,37 @@ public void testString() throws Exception {
                 .asString().get());
     }
 
+    public void testMultipartFileContentType() throws Exception {
+        File f = new File("/sdcard/ion/testdata");
+        f.getParentFile().mkdirs();
+        f.createNewFile();
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.post("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                MultipartFormDataBody body = (MultipartFormDataBody)request.getBody();
+                body.setMultipartCallback(new MultipartFormDataBody.MultipartCallback() {
+                    @Override
+                    public void onPart(Part part) {
+                        response.send(part.getContentType());
+                    }
+                });
+            }
+        });
+        try {
+            httpServer.listen(AsyncServer.getDefault(), 6666);
+            String mime = Ion.with(getContext())
+            .load("http://localhost:6666/")
+            .setMultipartFile("foo", "test/mime", f)
+            .asString()
+            .get(1000, TimeUnit.MILLISECONDS);
+            assertEquals(mime, "test/mime");
+        }
+        finally {
+            httpServer.stop();
+        }
+    }
+
     public void testStringWithCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
         Ion.with(getContext(),"http://www.clockworkmod.com/")
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 2af91967..e12654f6 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -442,9 +442,10 @@ public void setGson(Gson gson) {
         AsyncHttpRequestFactory asyncHttpRequestFactory = new AsyncHttpRequestFactory() {
             @Override
             public AsyncHttpRequest createAsyncHttpRequest(URI uri, String method, RawHeaders headers) {
+                AsyncHttpRequest request = new AsyncHttpRequest(uri, method, headers);
                 if (!TextUtils.isEmpty(userAgent))
-                    headers.set("User-Agent", userAgent);
-                return new AsyncHttpRequest(uri, method, headers);
+                    request.getHeaders().setUserAgent(userAgent);
+                return request;
             }
         };
 
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index e63fe1a1..994f1eb0 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -32,9 +32,10 @@
     IonRequestBuilder builder;
     Ion ion;
 
-    private void ensureBuilder() {
+    private IonRequestBuilder ensureBuilder() {
         if (builder == null)
             builder = new IonRequestBuilder(imageViewPostRef.get().getContext(), ion);
+        return builder;
     }
 
     @Override
@@ -350,6 +351,8 @@ public IonBitmapRequestBuilder centerInside() {
     public IonBitmapRequestBuilder resize(int width, int height) {
         resizeWidth = width;
         resizeHeight = height;
+        ensureBuilder().setHeader("X-Ion-Width", String.valueOf(width));
+        ensureBuilder().setHeader("X-Ion-Height", String.valueOf(height));
         return this;
     }
 
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 99ff3481..a2f4ca46 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -35,11 +35,13 @@
 import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.body.DocumentBody;
 import com.koushikdutta.async.http.body.FileBody;
+import com.koushikdutta.async.http.body.FilePart;
 import com.koushikdutta.async.http.body.MultipartFormDataBody;
 import com.koushikdutta.async.http.body.StreamBody;
 import com.koushikdutta.async.http.body.StringBody;
 import com.koushikdutta.async.http.body.UrlEncodedFormBody;
 import com.koushikdutta.async.http.libcore.RawHeaders;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.parser.AsyncParser;
 import com.koushikdutta.async.parser.DocumentParser;
 import com.koushikdutta.async.parser.StringParser;
@@ -104,7 +106,7 @@ public IonRequestBuilder load(String method, String url) {
     private RawHeaders getHeaders() {
         if (headers == null) {
             headers = new RawHeaders();
-            AsyncHttpRequest.setDefaultHeaders(headers, URI.create(uri));
+            AsyncHttpRequest.setDefaultHeaders(headers, uri == null ? null : URI.create(uri));
         }
         return headers;
     }
@@ -333,6 +335,7 @@ public void run() {
         for (Loader loader: ion.loaders) {
             Future<DataEmitter> emitter = loader.load(ion, request, ret);
             if (emitter != null) {
+                request.logi("Using loader: " + loader);
                 ret.setParent(emitter);
                 return;
             }
@@ -649,11 +652,25 @@ public IonRequestBuilder setBodyParameters(Map<String, List<String>> params) {
     MultipartFormDataBody multipartBody;
     @Override
     public IonRequestBuilder setMultipartFile(String name, File file) {
+        return setMultipartFile(name, null, file);
+    }
+
+    @Override
+    public IonRequestBuilder setMultipartFile(String name, String contentType, File file) {
         if (multipartBody == null) {
             multipartBody = new MultipartFormDataBody();
             setBody(multipartBody);
         }
-        multipartBody.addFilePart(name, file);
+
+        FilePart part = new FilePart(name, file);
+
+        if (contentType == null)
+            contentType = AsyncHttpServer.tryGetContentType(file.getAbsolutePath());
+
+        if (contentType != null)
+            part.setContentType(contentType);
+
+        multipartBody.addPart(part);
         return this;
     }
 
@@ -667,6 +684,16 @@ public IonRequestBuilder setMultipartParameter(String name, String value) {
         return this;
     }
 
+    @Override
+    public IonRequestBuilder setMultipartParameters(Map<String, List<String>> params) {
+        for (String key: params.keySet()) {
+            for (String value: params.get(key)) {
+                setMultipartParameter(key, value);
+            }
+        }
+        return this;
+    }
+
     @Override
     public IonBitmapRequestBuilder withBitmap() {
         return new IonBitmapRequestBuilder(this);
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index e818916e..088028ab 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -2,6 +2,8 @@
 
 import android.graphics.Bitmap;
 
+import java.lang.ref.WeakReference;
+
 /**
  * Created by koush on 6/12/13.
  */
@@ -13,6 +15,7 @@
     public Bitmap[] bitmaps;
     public int[] delays;
     public Exception exception;
+    public WeakReference<Bitmap> bitmapRef;
 
     public int sizeOf() {
         if (bitmaps == null)
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index d5a57e76..76f4b76f 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -55,21 +55,41 @@ public BitmapInfo remove(String key) {
 
     public void put(BitmapInfo info) {
         assert Thread.currentThread() == Looper.getMainLooper().getThread();
+        if (getHeapSize(ion.getContext()) != cache.maxSize())
+            cache.setMaxSize(getHeapSize(ion.getContext()) / 7);
         cache.put(info.key, info);
     }
 
     public BitmapInfo get(String key) {
         if (key == null)
             return null;
+
+        // see if this thing has an immediate cache hit
         BitmapInfo ret = cache.get(key);
         if (ret == null || ret.bitmaps != null)
             return ret;
 
-        // if this bitmap load previously errored out, see if it is time to retry
-        // the fetch. connectivity error, server failure, etc, shouldn't be
-        // cached indefinitely...
-        if (ret.loadTime + errorCacheDuration > System.currentTimeMillis())
-            return ret;
+        // see if the the bitmap got evicted and put into a weak ref
+        if (ret.bitmapRef != null) {
+            Bitmap bitmap = ret.bitmapRef.get();
+            // see if we successfully repopulated from the weak ref
+            if (ret.bitmaps != null) {
+                cache.remove(key);
+                ret.bitmaps = new Bitmap[] { bitmap };
+                ret.bitmapRef = null;
+                cache.put(key, ret);
+                System.out.println("===== SUCCESSFULLY GRABBED FROM WEAK REF CACHE! ====");
+                return ret;
+            }
+            // ok, fall through and toss this, it's useless.
+        }
+        else {
+            // if this bitmap load previously errored out, see if it is time to retry
+            // the fetch. connectivity error, server failure, etc, shouldn't be
+            // cached indefinitely...
+            if (ret.loadTime + errorCacheDuration > System.currentTimeMillis())
+                return ret;
+        }
         cache.remove(key);
         return null;
     }
diff --git a/ion/src/com/koushikdutta/ion/bitmap/LruBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/LruBitmapCache.java
index ecb56abc..35f1f366 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/LruBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/LruBitmapCache.java
@@ -3,12 +3,14 @@
 import android.graphics.Bitmap;
 import android.util.Log;
 
+import java.lang.ref.WeakReference;
+
 class LruBitmapCache extends LruCache<String, BitmapInfo> {
     public LruBitmapCache(int maxSize) {
         super(maxSize);
     }
 
-	@Override
+    @Override
 	protected void entryRemoved(boolean evicted, String key, BitmapInfo oldValue, BitmapInfo newValue) {
 		super.entryRemoved(evicted, key, oldValue, newValue);
 /*
@@ -27,4 +29,33 @@ protected void entryRemoved(boolean evicted, String key, BitmapInfo oldValue, Bi
     protected int sizeOf(String key, BitmapInfo info) {
         return info.sizeOf();
     }
+
+    @Override
+    protected void entryRemoved(boolean evicted, String key, BitmapInfo oldValue, BitmapInfo newValue) {
+        super.entryRemoved(evicted, key, oldValue, newValue);
+
+        // this shit is broken
+        if (true)
+            return;
+
+        // on eviction, put the bitmaps into a weak ref
+        if (!evicted)
+            return;
+
+        // toss the oldValue into a weak ref, and play with that.
+        if (oldValue == null)
+            return;
+        if (oldValue.bitmaps == null)
+            return;
+        // don't try to weak ref on gifs, because only one bitmap
+        // ref total will be held.
+        if (oldValue.bitmaps.length > 1)
+            return;
+
+        oldValue.bitmapRef = new WeakReference<Bitmap>(oldValue.bitmaps[0]);
+        oldValue.bitmaps = null;
+        put(key, oldValue);
+    }
+
+
 }
diff --git a/ion/src/com/koushikdutta/ion/bitmap/LruCache.java b/ion/src/com/koushikdutta/ion/bitmap/LruCache.java
index a8fc6ac9..12bfec53 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/LruCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/LruCache.java
@@ -261,6 +261,10 @@ public synchronized final int size() {
         return size;
     }
 
+    public void setMaxSize(int maxSize) {
+        this.maxSize = maxSize;
+    }
+
     /**
      * For caches that do not override {@link #sizeOf}, this returns the maximum
      * number of entries in the cache. For all other caches, this returns the
diff --git a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
index eb1ee15b..6de6f096 100644
--- a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
@@ -1,6 +1,8 @@
 package com.koushikdutta.ion.builder;
 
 import java.io.File;
+import java.util.List;
+import java.util.Map;
 
 /**
 * Created by koush on 5/30/13.
@@ -15,6 +17,14 @@
      */
     public M setMultipartParameter(String name, String value);
 
+    /**
+     * Specify a multipart/form-data parameter to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param params The map containing key value pairs
+     * @return
+     */
+    public M setMultipartParameters(Map<String, List<String>> params);
+
     /**
      * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
      * provided in the load call, the default HTTP method, POST, is used.
@@ -23,4 +33,14 @@
      * @return
      */
     public M setMultipartFile(String name, File file);
+
+    /**
+     * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param name Multipart name
+     * @param file Multipart Content-Type
+     * @param file Multipart file to send
+     * @return
+     */
+    public M setMultipartFile(String name, String contentType, File file);
 }
