diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java b/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
index 9dc4ce9a..a9d3d4a1 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
@@ -50,6 +50,12 @@ public void loadGifCenterInside() {
         .intoImageView(imageView);
     }
 
+    public void loadExifRotated() {
+        Ion.with(this)
+        .load("https://raw.github.com/koush/ion/master/ion-test/testdata/exif.jpg")
+        .intoImageView(imageView);
+    }
+
     Spinner fitChoices;
     ImageView imageView;
     @Override
@@ -65,6 +71,7 @@ protected void onCreate(Bundle savedInstanceState) {
         adapter.add("centerInside");
         adapter.add("gif centerCrop");
         adapter.add("gif centerInside");
+        adapter.add("exif rotated");
         fitChoices.setAdapter(adapter);
         fitChoices.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
@@ -75,8 +82,10 @@ else if (position == 1)
                     loadCenterInside();
                 else if (position == 2)
                     loadGifCenterCrop();
-                else
+                else if (position == 3)
                     loadGifCenterInside();
+                else if (position == 4)
+                    loadExifRotated();
             }
 
             @Override
diff --git a/ion-test/src/com/koushikdutta/ion/test/ExceptionTests.java b/ion-test/src/com/koushikdutta/ion/test/ExceptionTests.java
new file mode 100644
index 00000000..899eed8b
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/ExceptionTests.java
@@ -0,0 +1,82 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+import android.util.Log;
+
+import com.koushikdutta.async.AsyncServer;
+import com.koushikdutta.async.Util;
+import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
+import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
+import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
+import com.koushikdutta.async.http.server.HttpServerRequestCallback;
+import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.Response;
+
+/**
+ * Created by koush on 11/4/13.
+ */
+public class ExceptionTests extends AndroidTestCase {
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        AsyncHttpServer server = new AsyncHttpServer();
+        server.listen(5555);
+        server.get("/contentlength", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                response.responseCode(200);
+                response.getHeaders().getHeaders().set("Content-Length", "10");
+                Util.writeAll(response, "five!".getBytes(), new CompletedCallback() {
+                    @Override
+                    public void onCompleted(Exception ex) {
+                        // close the socket prematurely
+                        response.getSocket().close();
+                    }
+                });
+            }
+        });
+        server.get("/chunked", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                response.responseCode(200);
+                Util.writeAll(response, "five!".getBytes(), new CompletedCallback() {
+                    @Override
+                    public void onCompleted(Exception ex) {
+                        // close the socket prematurely
+                        response.getSocket().close();
+                    }
+                });
+            }
+        });
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+        AsyncServer.getDefault().stop();
+    }
+
+    public void testDisconnect() throws Exception {
+        Response<String> response = Ion.with(getContext())
+        .load("http://localhost:5555/contentlength")
+        .setLogging("DISCONNECT", Log.DEBUG)
+        .asString()
+        .withResponse()
+        .get();
+
+        assertNotNull(response);
+        assertNotNull(response.getException());
+
+        response = Ion.with(getContext())
+        .load("http://localhost:5555/chunked")
+        .setLogging("DISCONNECT", Log.DEBUG)
+        .asString()
+        .withResponse()
+        .get();
+
+        assertNotNull(response);
+        assertNotNull(response.getException());
+    }
+}
+
diff --git a/ion-test/src/com/koushikdutta/ion/test/ExifTests.java b/ion-test/src/com/koushikdutta/ion/test/ExifTests.java
new file mode 100644
index 00000000..0e7c09d3
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/ExifTests.java
@@ -0,0 +1,20 @@
+package com.koushikdutta.ion.test;
+
+import android.graphics.Bitmap;
+import android.test.AndroidTestCase;
+
+import com.koushikdutta.ion.Ion;
+
+/**
+ * Created by koush on 11/5/13.
+ */
+public class ExifTests extends AndroidTestCase {
+    public void testRotated() throws Exception {
+        Bitmap bitmap = Ion.with(getContext())
+        .load("https://raw.github.com/koush/ion/master/ion-test/testdata/exif.jpg")
+        .asBitmap()
+        .get();
+
+        assertTrue(bitmap.getWidth() < bitmap.getHeight());
+    }
+}
diff --git a/ion-test/src/com/koushikdutta/ion/test/StreamTests.java b/ion-test/src/com/koushikdutta/ion/test/StreamTests.java
index 0eab820e..76bc7b23 100644
--- a/ion-test/src/com/koushikdutta/ion/test/StreamTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/StreamTests.java
@@ -30,6 +30,7 @@ protected void setUp() throws Exception {
         server.get("/", new HttpServerRequestCallback() {
             @Override
             public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                response.responseCode(200);
                 ByteBuffer b = ByteBufferList.obtain(random.length);
                 b.put(random);
                 b.flip();
diff --git a/ion-test/testdata/exif.jpg b/ion-test/testdata/exif.jpg
new file mode 100644
index 00000000..e2b0d22e
Binary files /dev/null and b/ion-test/testdata/exif.jpg differ
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 14019388..0ed4ae93 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -98,7 +98,7 @@ public void onCompleted(Exception e, BitmapInfo result) {
     String bitmapKey;
     BitmapInfo execute() {
         final String downloadKey = ResponseCacheMiddleware.toKeyString(builder.uri);
-        assert Thread.currentThread() == Looper.getMainLooper().getThread();
+        assert Thread.currentThread() == Looper.getMainLooper().getThread() || imageViewPostRef == null;
         assert downloadKey != null;
 
         if (resizeHeight != 0 || resizeWidth != 0) {
diff --git a/ion/src/com/koushikdutta/ion/bitmap/Exif.java b/ion/src/com/koushikdutta/ion/bitmap/Exif.java
new file mode 100644
index 00000000..4d6ad255
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/bitmap/Exif.java
@@ -0,0 +1,137 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.koushikdutta.ion.bitmap;
+
+import android.util.Log;
+
+public class Exif {
+    private static final String TAG = "CameraExif";
+
+    // Returns the degrees in clockwise. Values are 0, 90, 180, or 270.
+    public static int getOrientation(byte[] jpeg, int offset, int size) {
+        if (jpeg == null) {
+            return 0;
+        }
+
+        int length = 0;
+        int last = offset + size;
+
+        // ISO/IEC 10918-1:1993(E)
+        while (offset + 3 < last && (jpeg[offset++] & 0xFF) == 0xFF) {
+            int marker = jpeg[offset] & 0xFF;
+
+            // Check if the marker is a padding.
+            if (marker == 0xFF) {
+                continue;
+            }
+            offset++;
+
+            // Check if the marker is SOI or TEM.
+            if (marker == 0xD8 || marker == 0x01) {
+                continue;
+            }
+            // Check if the marker is EOI or SOS.
+            if (marker == 0xD9 || marker == 0xDA) {
+                break;
+            }
+
+            // Get the length and check if it is reasonable.
+            length = pack(jpeg, offset, 2, false);
+            if (length < 2 || offset + length > last) {
+                Log.e(TAG, "Invalid length");
+                return 0;
+            }
+
+            // Break if the marker is EXIF in APP1.
+            if (marker == 0xE1 && length >= 8 &&
+            pack(jpeg, offset + 2, 4, false) == 0x45786966 &&
+            pack(jpeg, offset + 6, 2, false) == 0) {
+                offset += 8;
+                length -= 8;
+                break;
+            }
+
+            // Skip other markers.
+            offset += length;
+            length = 0;
+        }
+
+        // JEITA CP-3451 Exif Version 2.2
+        if (length > 8) {
+            // Identify the byte order.
+            int tag = pack(jpeg, offset, 4, false);
+            if (tag != 0x49492A00 && tag != 0x4D4D002A) {
+                Log.e(TAG, "Invalid byte order");
+                return 0;
+            }
+            boolean littleEndian = (tag == 0x49492A00);
+
+            // Get the offset and check if it is reasonable.
+            int count = pack(jpeg, offset + 4, 4, littleEndian) + 2;
+            if (count < 10 || count > length) {
+                Log.e(TAG, "Invalid offset");
+                return 0;
+            }
+            offset += count;
+            length -= count;
+
+            // Get the count and go through all the elements.
+            count = pack(jpeg, offset - 2, 2, littleEndian);
+            while (count-- > 0 && length >= 12) {
+                // Get the tag and check if it is orientation.
+                tag = pack(jpeg, offset, 2, littleEndian);
+                if (tag == 0x0112) {
+                    // We do not really care about type and count, do we?
+                    int orientation = pack(jpeg, offset + 8, 2, littleEndian);
+                    switch (orientation) {
+                        case 1:
+                            return 0;
+                        case 3:
+                            return 180;
+                        case 6:
+                            return 90;
+                        case 8:
+                            return 270;
+                    }
+                    Log.i(TAG, "Unsupported orientation");
+                    return 0;
+                }
+                offset += 12;
+                length -= 12;
+            }
+        }
+
+        Log.i(TAG, "Orientation not found");
+        return 0;
+    }
+
+    private static int pack(byte[] bytes, int offset, int length,
+                            boolean littleEndian) {
+        int step = 1;
+        if (littleEndian) {
+            offset += length - 1;
+            step = -1;
+        }
+
+        int value = 0;
+        while (length-- > 0) {
+            value = (value << 8) | (bytes[offset] & 0xFF);
+            offset += step;
+        }
+        return value;
+    }
+}
\ No newline at end of file
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index ee53f69d..44d4cf88 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -6,6 +6,9 @@
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
 import android.os.Looper;
 import android.util.DisplayMetrics;
 import android.util.Log;
@@ -58,7 +61,6 @@ public void put(BitmapInfo info) {
     public BitmapInfo get(String key) {
         if (key == null)
             return null;
-        assert Thread.currentThread() == Looper.getMainLooper().getThread();
         BitmapInfo ret = cache.get(key);
         if (ret == null || ret.bitmaps != null)
             return ret;
@@ -101,7 +103,15 @@ public Bitmap loadBitmap(byte[] bytes, int offset, int length, int minx, int min
             o = new BitmapFactory.Options();
             o.inSampleSize = scale;
         }
-        return BitmapFactory.decodeByteArray(bytes, offset, length, o);
+        Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, offset, length, o);
+
+        int rotation = Exif.getOrientation(bytes, offset, length);
+        if (rotation == 0)
+            return bitmap;
+
+        Matrix matrix = new Matrix();
+        matrix.postRotate(rotation);
+        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
     }
 
     public Bitmap loadBitmap(InputStream stream, int minx, int miny) {
