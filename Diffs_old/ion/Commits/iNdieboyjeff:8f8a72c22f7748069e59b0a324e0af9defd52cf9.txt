diff --git a/ion/build.gradle b/ion/build.gradle
index 31b26993..c4641ed0 100644
--- a/ion/build.gradle
+++ b/ion/build.gradle
@@ -19,7 +19,7 @@ repositories {
 dependencies {
     compile 'com.android.support:support-v4:20.+'
     compile project(':AndroidAsync:AndroidAsync')
-    compile 'com.google.code.gson:gson:2.+'
+    compile 'com.google.code.gson:gson:2.3'
 }
 
 android {
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 44c18b5b..6d27c4a4 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -816,7 +816,7 @@ public IonImageViewRequestBuilder withBitmap() {
 
     @Override
     public ImageViewFuture intoImageView(ImageView imageView) {
-        return new IonImageViewRequestBuilder(this).intoImageView(imageView);
+        return new IonImageViewRequestBuilder(this).withImageView(imageView).intoImageView(imageView);
     }
 
     @Override
@@ -878,13 +878,13 @@ public IonRequestBuilder proxy(String host, int port) {
     }
 
     @Override
-    public IonRequestBuilder setJsonObjectBody(Object object, TypeToken token) {
+    public IonRequestBuilder setJsonPojoBody(Object object, TypeToken token) {
         setBody(new PojoBody(ion.configure().getGson(), object, token));
         return this;
     }
 
     @Override
-    public IonRequestBuilder setJsonObjectBody(Object object) {
+    public IonRequestBuilder setJsonPojoBody(Object object) {
         setBody(new PojoBody(ion.configure().getGson(), object, null));
         return this;
     }
diff --git a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
index daa02c6b..1eb5373a 100644
--- a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
@@ -202,21 +202,23 @@
     public F setJsonObjectBody(JsonObject jsonObject);
 
     /**
-     * Specify a JsonObject to send to the HTTP server. If no HTTP method was explicitly
-     * provided in the load call, the default HTTP method, POST, is used.
+     * Specify an object to convert to json and send to the HTTP server. If no HTTP
+     * method was explicitly provided in the load call, the default HTTP method,
+     * POST, is used.
      * @param object Object to serialize with Json and send with the request
      * @param token Type token to assist with generic type serialization
      * @return
      */
-    public <T> F setJsonObjectBody(T object, TypeToken<T> token);
+    public <T> F setJsonPojoBody(T object, TypeToken<T> token);
 
     /**
-     * Specify a JsonObject to send to the HTTP server. If no HTTP method was explicitly
-     * provided in the load call, the default HTTP method, POST, is used.
+     * Specify an object to convert to json and send to the HTTP server. If no HTTP
+     * method was explicitly provided in the load call, the default HTTP method,
+     * POST, is used.
      * @param object Object to serialize with Json and send with the request
      * @return
      */
-    public <T> F setJsonObjectBody(T object);
+    public <T> F setJsonPojoBody(T object);
 
     /**
      * Specify a JsonArray to send to the HTTP server. If no HTTP method was explicitly
diff --git a/ion/test/src/com/koushikdutta/ion/test/GsonTests.java b/ion/test/src/com/koushikdutta/ion/test/GsonTests.java
index 772bdfd5..5665bfa4 100644
--- a/ion/test/src/com/koushikdutta/ion/test/GsonTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/GsonTests.java
@@ -31,8 +31,9 @@
     public void testPojoPost() throws Exception {
         TypeToken<Pojo> token = new TypeToken<Pojo>(){};
 
-        JsonObject json = Ion.with(getContext(), "http://koush.clockworkmod.com/test/echo")
-        .setJsonObjectBody(new Pojo())
+        JsonObject json = Ion.with(getContext())
+        .load("http://koush.clockworkmod.com/test/echo")
+        .setJsonPojoBody(new Pojo())
         .asJsonObject().get();
 
         assertEquals(json.get("foo").getAsString(), "bar");
diff --git a/ion/test/src/com/koushikdutta/ion/test/Issues.java b/ion/test/src/com/koushikdutta/ion/test/Issues.java
index 6b8e8df3..dc80d422 100644
--- a/ion/test/src/com/koushikdutta/ion/test/Issues.java
+++ b/ion/test/src/com/koushikdutta/ion/test/Issues.java
@@ -12,6 +12,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.ListenCallback;
 import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.http.body.UrlEncodedFormBody;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
@@ -222,4 +223,30 @@ public void testIssue318() throws Exception {
         String response = Ion.with(getContext()).load("http://banpo.hs.kr/custom/custom.do?dcpNo=30524").asString().get();
         assertNotNull(response);
     }
+
+    public void testIssue329() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.post("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                UrlEncodedFormBody body = (UrlEncodedFormBody)request.getBody();
+                response.send(body.get().getString("電"));
+            }
+        });
+
+        AsyncServer asyncServer = new AsyncServer();
+        try {
+            int localPort = httpServer.listen(asyncServer, 0).getLocalPort();
+            String s1 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .setBodyParameter("電", "電")
+            .asString()
+            .get();
+
+            assertEquals(s1, "電");
+        }
+        finally {
+            asyncServer.stop();
+        }
+    }
 }
