diff --git a/README.md b/README.md
index 59c8b8c8..6fe113e0 100644
--- a/README.md
+++ b/README.md
@@ -57,7 +57,8 @@ at 30+ ion unit tests in the [ion-test](https://github.com/koush/ion/tree/master
 #### Get JSON
 
 ```java
-Ion.with(context, "http://example.com/thing.json")
+Ion.with(context)
+.load("http://example.com/thing.json")
 .asJsonObject()
 .setCallback(new FutureCallback<JsonObject>() {
    @Override
@@ -73,7 +74,8 @@ Ion.with(context, "http://example.com/thing.json")
 JsonObject json = new JsonObject();
 json.addProperty("foo", "bar");
 
-Ion.with(context, "http://example.com/post")
+Ion.with(context)
+.load("http://example.com/post")
 .setJsonObjectBody(json)
 .asJsonObject()
 .setCallback(new FutureCallback<JsonObject>() {
@@ -108,7 +110,8 @@ Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
 #### Download a File with a progress bar
 
 ```java
-Ion.with(context, "http://example.com/really-big-file.zip")
+Ion.with(context)
+.load("http://example.com/really-big-file.zip")
 // have a ProgressBar get updated automatically with the percent
 .progressBar(progressBar)
 // and a ProgressDialog
@@ -132,7 +135,8 @@ Ion.with(context, "http://example.com/really-big-file.zip")
 #### Setting Headers
 
 ```java
-Ion.with(context, "http://example.com/test.txt")
+Ion.with(context)
+.load("http://example.com/test.txt")
 // set the header
 .setHeader("foo", "bar")
 .asString()
@@ -143,7 +147,8 @@ Ion.with(context, "http://example.com/test.txt")
 
 ```java
 // This is the "long" way to do build an ImageView request... it allows you to set headers, etc.
-Ion.with(context, "http://example.com/image.png")
+Ion.with(context)
+.load("http://example.com/image.png")
 .withBitmap()
 .placeholder(R.drawable.placeholder_image)
 .error(R.drawable.error_image)
@@ -183,18 +188,21 @@ public interface Future<T> extends Cancellable, java.util.concurrent.Future<T> {
     public Future<T> setCallback(FutureCallback<T> callback);
 }
 
-Future<String> string = Ion.with(context, "http://example.com/string.txt")
-    .asString();
-
-Future<JsonObject> json = Ion.with(context, "http://example.com/json.json")
-    .asJsonObject();
+Future<String> string = Ion.with(context)
+.load("http://example.com/string.txt")
+.asString();
 
-Future<File> file = Ion.with(context, "http://example.com/file.zip")
-    .write(new File("/sdcard/file.zip"));
+Future<JsonObject> json = Ion.with(context)
+.load("http://example.com/json.json")
+.asJsonObject();
 
-Future<Bitmap> bitmap = Ion.with(context, "http://example.com/image.png")
-    .intoImageView(imageView);
+Future<File> file = Ion.with(context)
+.load("http://example.com/file.zip")
+.write(new File("/sdcard/file.zip"));
 
+Future<Bitmap> bitmap = Ion.with(context)
+.load("http://example.com/image.png")
+.intoImageView(imageView);
 ```
 
 #### Cancelling Requests
@@ -212,7 +220,8 @@ Though you should try to use callbacks for handling requests whenever possible,
 All Futures have a Future<T>.get() method that waits for the result of the request, by blocking if necessary.
 
 ```java
-JsonObject json = Ion.with(context, "http://example.com/thing.json").asJsonObject().get();
+JsonObject json = Ion.with(context)
+.load("http://example.com/thing.json").asJsonObject().get();
 ```
 
 #### Seamlessly use your own Java classes with [Gson](https://code.google.com/p/google-gson/)
@@ -225,7 +234,8 @@ public static class Tweet {
 }
 
 public void getTweets() throws Exception {
-    Ion.with(context, "http://example.com/api/tweets")
+    Ion.with(context)
+    .load("http://example.com/api/tweets")
     .as(new TypeToken<List<Tweet>>(){})
     .setCallback(new FutureCallback<List<Tweet>>() {
        @Override
@@ -249,7 +259,8 @@ Ion.getDefault(getContext()).configure().setLogging("MyLogs", Log.DEBUG);
 Or to enable it on just a single request:
 
 ```java
-Ion.with(context, "http://example.com/thing.json")
+Ion.with(context)
+.load("http://example.com/thing.json")
 .setLogging("MyLogs", Log.DEBUG)
 .asJsonObject();
 ```
@@ -320,7 +331,8 @@ Proxy server settings can be enabled all Ion requests, or on a per request basis
 Ion.getDefault(context).configure().proxy("mycomputer", 8888);
 
 // or... to proxy specific requests
-Ion.with(context, "http://example.com/proxied.html")
+Ion.with(context)
+.load("http://example.com/proxied.html")
 .proxy("mycomputer", 8888)
 .getString();
 ```
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java b/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java
index c0f11ade..7a9453ec 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java
@@ -4,6 +4,7 @@
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.os.Bundle;
+import android.util.Log;
 import android.widget.ImageView;
 
 import com.koushikdutta.async.future.FutureCallback;
@@ -32,6 +33,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Ion.with(this)
         .load("https://raw2.github.com/koush/ion/master/ion-sample/telescope.jpg")
         .progressDialog(dlg)
+        .setLogging("DeepZoom", Log.VERBOSE)
         .withBitmap()
         .deepZoom()
         .intoImageView(photoView)
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
index a9660171..060981af 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarUpload.java
@@ -59,7 +59,8 @@ public void onClick(View v) {
 
                 upload.setText("Cancel");
                 // this is a 180MB zip file to test with
-                uploading = Ion.with(ProgressBarUpload.this, "http://koush.clockworkmod.com/test/echo")
+                uploading = Ion.with(ProgressBarUpload.this)
+                .load("http://koush.clockworkmod.com/test/echo")
                 // attach the percentage report to a progress bar.
                 // can also attach to a ProgressDialog with progressDialog.
                 .uploadProgressBar(progressBar)
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/Twitter.java b/ion-sample/src/com/koushikdutta/ion/sample/Twitter.java
index e613f1dc..cc30d7e7 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/Twitter.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/Twitter.java
@@ -96,7 +96,8 @@ public View getView(int position, View convertView, ViewGroup parent) {
 
     String accessToken;
     private void getCredentials() {
-        Ion.with(this, "https://api.twitter.com/oauth2/token")
+        Ion.with(this)
+        .load("https://api.twitter.com/oauth2/token")
         // embedding twitter api key and secret is a bad idea, but this isn't a real twitter app :)
         .basicAuthentication("e4LrcHB55R3WamRYHpNfA", "MIABn1DU5db3Aj0xXzhthsf4aUKMAdoWJTMxJJcY")
         .setBodyParameter("grant_type", "client_credentials")
@@ -120,7 +121,7 @@ private void load() {
             return;
 
         // load the tweets
-        String url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=favstar50&count=20";
+        String url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=BestAt&count=20";
         if (tweetAdapter.getCount() > 0) {
             // load from the "last" id
             JsonObject last = tweetAdapter.getItem(tweetAdapter.getCount() - 1);
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java b/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
index d36fcd47..10adc1b3 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
@@ -130,7 +130,7 @@ private void load() {
             return;
 
         // load the tweets
-        String url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=favstar50&count=20";
+        String url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=BestAt&count=20";
         if (tweetAdapter.getCount() > 0) {
             // load from the "last" id
             Tweet last = tweetAdapter.getItem(tweetAdapter.getCount() - 1);
diff --git a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
index 6b520507..ebca0571 100644
--- a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
@@ -38,7 +38,8 @@ public void testJson() throws Exception {
 
         Ion.getDefault(getContext())
         .store("foo")
-        .putJsonObject(json);
+        .putJsonObject(json)
+        .get(1000, TimeUnit.MILLISECONDS);
 
         JsonObject result = Ion.getDefault(getContext())
         .store("foo")
diff --git a/ion/ion.iml b/ion/ion.iml
index 8eeb9660..a4121540 100644
--- a/ion/ion.iml
+++ b/ion/ion.iml
@@ -33,6 +33,7 @@
       </library>
     </orderEntry>
     <orderEntry type="module" module-name="AndroidAsync" exported="" />
+    <orderEntry type="module" module-name="v4" exported="" />
   </component>
 </module>
 
diff --git a/ion/project.properties b/ion/project.properties
index 22cd8d31..14e09e94 100644
--- a/ion/project.properties
+++ b/ion/project.properties
@@ -17,3 +17,4 @@ android.library=true
 
 
 android.library.reference.1=../../AndroidAsync/AndroidAsync
+android.library.reference.2=../../android-support/v4
diff --git a/ion/src/com/koushikdutta/ion/BitmapCallback.java b/ion/src/com/koushikdutta/ion/BitmapCallback.java
index 3872b53d..515c5fb2 100644
--- a/ion/src/com/koushikdutta/ion/BitmapCallback.java
+++ b/ion/src/com/koushikdutta/ion/BitmapCallback.java
@@ -4,10 +4,10 @@
 
 import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.FutureCallback;
-import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.util.ArrayList;
+import java.util.concurrent.CancellationException;
 
 abstract class BitmapCallback {
     String key;
@@ -37,10 +37,11 @@ protected void report(final Exception e, final BitmapInfo info) {
             public void run() {
                 BitmapInfo result = info;
                 if (result == null) {
-                    // cache errors
+                    // cache errors, unless they were cancellation exceptions
                     result = new BitmapInfo(key, null, null, new Point());
                     result.exception = e;
-                    ion.getBitmapCache().put(result);
+                    if (!(e instanceof CancellationException))
+                        ion.getBitmapCache().put(result);
                 } else if (put()) {
                     ion.getBitmapCache().put(result);
                 }
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index c1612f2b..3cba33e4 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -48,7 +48,7 @@ private boolean fastLoad(String uri) {
         boolean put = !hasTransforms;
 
         for (Loader loader: ion.configure().getLoaders()) {
-            Future<BitmapInfo> future = loader.loadBitmap(builder.context.get(), ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
+            Future<BitmapInfo> future = loader.loadBitmap(builder.contextReference.getContext(), ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
             if (future != null) {
                 final BitmapCallback callback = new LoadBitmapBase(ion, downloadKey, put);
                 future.setCallback(new FutureCallback<BitmapInfo>() {
diff --git a/ion/src/com/koushikdutta/ion/BitmapInfoToBitmap.java b/ion/src/com/koushikdutta/ion/BitmapInfoToBitmap.java
index ffcf300c..e6a05462 100644
--- a/ion/src/com/koushikdutta/ion/BitmapInfoToBitmap.java
+++ b/ion/src/com/koushikdutta/ion/BitmapInfoToBitmap.java
@@ -1,22 +1,19 @@
 package com.koushikdutta.ion;
 
-import android.content.Context;
 import android.graphics.Bitmap;
 
 import com.koushikdutta.async.future.TransformFuture;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
-import java.lang.ref.WeakReference;
-
 class BitmapInfoToBitmap extends TransformFuture<Bitmap, BitmapInfo> {
-    WeakReference<Context> context;
-    public BitmapInfoToBitmap(WeakReference<Context> context) {
-        this.context = context;
+    ContextReference contextReference;
+    public BitmapInfoToBitmap(ContextReference contextReference) {
+        this.contextReference = contextReference;
     }
 
     @Override
     protected void transform(BitmapInfo result) throws Exception {
-        if (!IonRequestBuilder.checkContext(context)) {
+        if (contextReference.isAlive() != null) {
             cancel();
             return;
         }
diff --git a/ion/src/com/koushikdutta/ion/ContextReference.java b/ion/src/com/koushikdutta/ion/ContextReference.java
new file mode 100644
index 00000000..8d60d823
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/ContextReference.java
@@ -0,0 +1,183 @@
+package com.koushikdutta.ion;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.Fragment;
+import android.app.Service;
+import android.content.Context;
+import android.os.Build;
+import android.widget.ImageView;
+
+import java.lang.ref.WeakReference;
+import java.util.List;
+
+/**
+ * Created by koush on 4/15/14.
+ */
+abstract class ContextReference<T> extends WeakReference<T> {
+    ContextReference(T t) {
+        super(t);
+    }
+
+    abstract static class NormalContextReference<T extends Context> extends ContextReference<T> {
+        NormalContextReference(T context) {
+            super(context);
+        }
+
+        static String isAlive(Context context) {
+            if (context instanceof Service)
+                return ServiceContextReference.isAlive((Service) context);
+            if (context instanceof Activity)
+                return ActivityContextReference.isAlive((Activity) context);
+            return null;
+        }
+
+        @Override
+        public Context getContext() {
+            return get();
+        }
+    }
+
+    static class ServiceContextReference extends NormalContextReference<Service> {
+        public ServiceContextReference(Service service) {
+            super(service);
+        }
+
+        static String isAlive(Service candidate) {
+            if (candidate == null)
+                return "Service reference null";
+            ActivityManager manager = (ActivityManager)candidate.getSystemService(Context.ACTIVITY_SERVICE);
+            List<ActivityManager.RunningServiceInfo> services = manager.getRunningServices(Integer.MAX_VALUE);
+            if (services == null)
+                return "Could not retrieve services from service manager";
+            for (ActivityManager.RunningServiceInfo service: services) {
+                if (candidate.getClass().getName().equals(service.service.getClassName())) {
+                    return null;
+                }
+            }
+            return "Service stopped";
+        }
+
+        @Override
+        public String isAlive() {
+            return isAlive(get());
+        }
+    }
+
+    static class ActivityContextReference extends NormalContextReference<Activity> {
+        public ActivityContextReference(Activity activity) {
+            super(activity);
+        }
+
+        static String isAlive(Activity a) {
+            if (a == null)
+                return "Activity reference null";
+            if (a.isFinishing())
+                return "Activity finished";
+            return null;
+        }
+
+        @Override
+        public String isAlive() {
+            return isAlive(get());
+        }
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
+    static class FragmentContextReference extends ContextReference<Fragment> {
+        public FragmentContextReference(Fragment fragment) {
+            super(fragment);
+        }
+
+        @Override
+        public Context getContext() {
+            Fragment fragment = get();
+            if (fragment == null)
+                return null;
+            return fragment.getActivity();
+        }
+
+        @Override
+        public String isAlive() {
+            Fragment fragment = get();
+            if (fragment == null)
+                return "Fragment reference null";
+            String ret = ActivityContextReference.isAlive(fragment.getActivity());
+            if (ret != null)
+                return ret;
+            if (fragment.isDetached())
+                return "Fragment detached";
+            return null;
+        }
+    }
+
+    static class SupportFragmentContextReference extends ContextReference<android.support.v4.app.Fragment> {
+        public SupportFragmentContextReference(android.support.v4.app.Fragment fragment) {
+            super(fragment);
+        }
+
+        @Override
+        public Context getContext() {
+            android.support.v4.app.Fragment fragment = get();
+            if (fragment == null)
+                return null;
+            return fragment.getActivity();
+        }
+
+        @Override
+        public String isAlive() {
+            android.support.v4.app.Fragment fragment = get();
+            if (fragment == null)
+                return "Fragment reference null";
+            String ret = ActivityContextReference.isAlive(fragment.getActivity());
+            if (ret != null)
+                return ret;
+            if (fragment.isDetached())
+                return "Fragment detached";
+            return null;
+        }
+    }
+
+    static class ImageViewContextReference extends ContextReference<ImageView> {
+        public ImageViewContextReference(ImageView imageView) {
+            super(imageView);
+        }
+
+        @Override
+        public String isAlive() {
+            ImageView iv = get();
+            if (iv == null)
+                return "ImageView reference null";
+            return NormalContextReference.isAlive(iv.getContext());
+        }
+
+        @Override
+        public Context getContext() {
+            ImageView iv = get();
+            if (iv == null)
+                return null;
+            return iv.getContext();
+        }
+    }
+
+    public static ContextReference fromContext(Context context) {
+        if (context instanceof Service)
+            return new ServiceContextReference((Service)context);
+        if (context instanceof Activity)
+            return new ActivityContextReference((Activity)context);
+
+        return new NormalContextReference<Context>(context) {
+            @Override
+            public String isAlive() {
+                Context context = get();
+                if (context == null)
+                    return "Context reference null";
+                return null;
+            }
+        };
+    }
+
+    public abstract String isAlive();
+    public abstract Context getContext();
+}
diff --git a/ion/src/com/koushikdutta/ion/FileCacheStore.java b/ion/src/com/koushikdutta/ion/FileCacheStore.java
index cb911071..e83119ae 100644
--- a/ion/src/com/koushikdutta/ion/FileCacheStore.java
+++ b/ion/src/com/koushikdutta/ion/FileCacheStore.java
@@ -17,6 +17,7 @@
 import org.w3c.dom.Document;
 
 import java.io.File;
+import java.util.Set;
 
 /**
  * Created by koush on 11/17/13.
@@ -36,7 +37,7 @@
         Ion.getIoExecutorService().execute(new Runnable() {
             @Override
             public void run() {
-                final String key = FileCache.toKeyString("ion-store:", rawKey);
+                final String key = computeKey();
                 final File file = cache.getTempFile();
                 final FileDataSink sink = new FileDataSink(ion.getServer(), file);
                 parser.write(sink, value, new CompletedCallback() {
@@ -98,7 +99,7 @@ public void onCompleted(Exception ex) {
             @Override
             public void run() {
                 try {
-                    final String key = FileCache.toKeyString("ion-store:", rawKey);
+                    final String key = computeKey();
                     final File file = cache.getFile(key);
                     if (!file.exists()) {
                         ret.setComplete((T)null);
@@ -119,7 +120,7 @@ public void run() {
 
     private <T> T get(final AsyncParser<T> parser) {
         try {
-            final String key = FileCache.toKeyString("ion-store:", rawKey);
+            final String key = computeKey();
             final File file = cache.getFile(key);
             return ion.build(ion.getContext(), file)
             .as(parser)
@@ -178,8 +179,12 @@ public Document getDocument() {
         return get(new GsonSerializer<T>(ion.configure().getGson(), token));
     }
 
+    private String computeKey() {
+        return rawKey.replace(":", "_");
+    }
+
     public void remove() {
-        final String key = FileCache.toKeyString("ion-store:", rawKey);
+        final String key = computeKey();
         cache.remove(key);
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 0be9b36e..9565bb11 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -1,15 +1,7 @@
 package com.koushikdutta.ion;
 
-import java.io.File;
-import java.io.IOException;
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.WeakHashMap;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
+import android.annotation.TargetApi;
+import android.app.Fragment;
 import android.content.Context;
 import android.os.Build;
 import android.os.Handler;
@@ -42,6 +34,16 @@
 import com.koushikdutta.ion.loader.PackageIconLoader;
 import com.koushikdutta.ion.loader.VideoLoader;
 
+import java.io.File;
+import java.io.IOException;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.WeakHashMap;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 /**
  * Created by koush on 5/21/13.
  */
@@ -54,22 +56,42 @@
 
     /**
      * Get the default Ion object instance and begin building a request
-     * with the given uri
      * @param context
-     * @param uri
      * @return
      */
-    public static Builders.Any.B with(Context context, String uri) {
-        return getDefault(context).build(context, uri);
+    public static LoadBuilder<Builders.Any.B> with(Context context) {
+        return getDefault(context).build(context);
+    }
+
+    /**
+     * the default Ion object instance and begin building a request
+     * @param fragment
+     * @return
+     */
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
+    public static LoadBuilder<Builders.Any.B> with(Fragment fragment) {
+        return getDefault(fragment.getActivity()).build(fragment);
+    }
+
+    /**
+     * the default Ion object instance and begin building a request
+     * @param fragment
+     * @return
+     */
+    public static LoadBuilder<Builders.Any.B> with(android.support.v4.app.Fragment fragment) {
+        return getDefault(fragment.getActivity()).build(fragment);
     }
 
     /**
      * Get the default Ion object instance and begin building a request
+     * with the given uri
      * @param context
+     * @param uri
      * @return
      */
-    public static LoadBuilder<Builders.Any.B> with(Context context) {
-        return getDefault(context).build(context);
+    @Deprecated
+    public static Builders.Any.B with(Context context, String uri) {
+        return getDefault(context).build(context, uri);
     }
 
     /**
@@ -79,6 +101,7 @@
      * @param file
      * @return
      */
+    @Deprecated
     public static FutureBuilder with(Context context, File file) {
         return getDefault(context).build(context, file);
     }
@@ -98,6 +121,8 @@ public static Ion getDefault(Context context) {
      * @return
      */
     public static Ion getInstance(Context context, String name) {
+        if (context == null)
+            throw new NullPointerException("Can not pass null context in to retrieve ion instance");
         Ion instance = instances.get(name);
         if (instance == null)
             instances.put(name, instance = new Ion(context, name));
@@ -136,7 +161,7 @@ public static Ion getInstance(Context context, String name) {
     IonBitmapRequestBuilder bitmapBuilder = new IonBitmapRequestBuilder(this);
 
     private Ion(Context context, String name) {
-        httpClient = new AsyncHttpClient(new AsyncServer());
+        httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         this.context = context = context.getApplicationContext();
         this.name = name;
 
@@ -188,8 +213,9 @@ public static ExecutorService getIoExecutorService() {
      * @param file
      * @return
      */
+    @Deprecated
     public FutureBuilder build(Context context, File file) {
-        return new IonRequestBuilder(context, this).load(file);
+        return new IonRequestBuilder(ContextReference.fromContext(context), this).load(file);
     }
 
     /**
@@ -198,8 +224,9 @@ public FutureBuilder build(Context context, File file) {
      * @param uri
      * @return
      */
+    @Deprecated
     public Builders.Any.B build(Context context, String uri) {
-        return new IonRequestBuilder(context, this).load(uri);
+        return new IonRequestBuilder(ContextReference.fromContext(context), this).load(uri);
     }
 
     /**
@@ -208,7 +235,25 @@ public FutureBuilder build(Context context, File file) {
      * @return
      */
     public LoadBuilder<Builders.Any.B> build(Context context) {
-        return new IonRequestBuilder(context, this);
+        return new IonRequestBuilder(ContextReference.fromContext(context), this);
+    }
+
+    /**
+     * Begin building a request
+     * @param fragment
+     * @return
+     */
+    public LoadBuilder<Builders.Any.B> build(Fragment fragment) {
+        return new IonRequestBuilder(new ContextReference.FragmentContextReference(fragment), this);
+    }
+
+    /**
+     * Begin building a request
+     * @param fragment
+     * @return
+     */
+    public LoadBuilder<Builders.Any.B> build(android.support.v4.app.Fragment fragment) {
+        return new IonRequestBuilder(new ContextReference.SupportFragmentContextReference(fragment), this);
     }
 
     /**
@@ -377,6 +422,10 @@ public FileCacheStore cache(String key) {
         return new FileCacheStore(this, responseCache.getFileCache(), key);
     }
 
+    public FileCache getCache() {
+        return responseCache.getFileCache();
+    }
+
     /**
      * Get or put an item in the persistent store
      * @return
@@ -385,6 +434,10 @@ public FileCacheStore store(String key) {
         return new FileCacheStore(this, storeCache, key);
     }
 
+    public FileCache getStore() {
+        return storeCache;
+    }
+
     public String getName() {
         return name;
     }
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 245f62a3..0d5522f8 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -18,7 +18,6 @@
 import com.koushikdutta.ion.builder.Builders;
 import com.koushikdutta.ion.builder.ImageViewFutureBuilder;
 
-import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 
 /**
@@ -38,7 +37,7 @@
 
     IonRequestBuilder builder;
     Ion ion;
-    WeakReference<ImageView> imageViewPostRef;
+    ContextReference.ImageViewContextReference imageViewPostRef;
     ArrayList<Transform> transforms;
     Drawable placeholderDrawable;
     int placeholderResource;
@@ -100,7 +99,7 @@ static void doAnimation(ImageView imageView, Animation animation, int animationR
 
     private IonRequestBuilder ensureBuilder() {
         if (builder == null)
-            builder = new IonRequestBuilder(imageViewPostRef.get().getContext(), ion);
+            builder = new IonRequestBuilder(imageViewPostRef, ion);
         return builder;
     }
 
@@ -119,7 +118,7 @@ private IonRequestBuilder ensureBuilder() {
     }
 
     IonBitmapRequestBuilder withImageView(ImageView imageView) {
-        imageViewPostRef = new WeakReference<ImageView>(imageView);
+        imageViewPostRef = new ContextReference.ImageViewContextReference(imageView);
         return this;
     }
 
@@ -293,7 +292,7 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
 
         bitmapFetcher.execute();
         // we're loading, so let's register for the result.
-        BitmapInfoToBitmap ret = new BitmapInfoToBitmap(builder.context);
+        BitmapInfoToBitmap ret = new BitmapInfoToBitmap(builder.contextReference);
         ion.bitmapsPending.add(bitmapFetcher.bitmapKey, ret);
         return ret;
     }
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 4dad54b5..89965b54 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -68,7 +68,7 @@ public IonDrawable setInAnimation(Animation inAnimation, int inAnimationResource
     // dont let it hold strong references to anything.
     static class IonDrawableCallback implements FutureCallback<BitmapInfo> {
         private WeakReference<IonDrawable> ionDrawableRef;
-        private WeakReference<ImageView> imageViewRef;
+        private ContextReference.ImageViewContextReference imageViewRef;
         private String bitmapKey;
         private SimpleFuture<ImageView> imageViewFuture = new SimpleFuture<ImageView>();
         private Animation inAnimation;
@@ -77,7 +77,7 @@ public IonDrawable setInAnimation(Animation inAnimation, int inAnimationResource
 
         public IonDrawableCallback(IonDrawable drawable, ImageView imageView) {
             ionDrawableRef = new WeakReference<IonDrawable>(drawable);
-            imageViewRef = new WeakReference<ImageView>(imageView);
+            imageViewRef = new ContextReference.ImageViewContextReference(imageView);
         }
 
         @Override
@@ -105,8 +105,8 @@ public void onCompleted(Exception e, BitmapInfo result) {
             imageView.setImageDrawable(drawable);
             IonBitmapRequestBuilder.doAnimation(imageView, inAnimation, inAnimationResource);
 
-            if (!IonRequestBuilder.checkContext(imageView.getContext())) {
-                imageViewFuture.cancel();
+            if (null != imageViewRef.isAlive()) {
+                imageViewFuture.cancelSilently();
                 return;
             }
 
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index c668aed6..6cb48d19 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -70,7 +70,6 @@
 import java.io.OutputStream;
 import java.lang.ref.WeakReference;
 import java.net.URI;
-import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -80,14 +79,14 @@
  */
 class IonRequestBuilder implements Builders.Any.B, Builders.Any.F, Builders.Any.M, Builders.Any.U, LoadBuilder<Builders.Any.B> {
     Ion ion;
-    WeakReference<Context> context;
+    ContextReference contextReference;
     Handler handler = Ion.mainHandler;
     String method = AsyncHttpGet.METHOD;
     String uri;
 
-    public IonRequestBuilder(Context context, Ion ion) {
+    public IonRequestBuilder(ContextReference contextReference, Ion ion) {
         this.ion = ion;
-        this.context = new WeakReference<Context>(context);
+        this.contextReference = contextReference;
     }
 
     @Override
@@ -220,52 +219,15 @@ public IonRequestBuilder followRedirect(boolean follow) {
         return this;
     }
 
-    private static boolean isServiceRunning(Service candidate) {
-        ActivityManager manager = (ActivityManager)candidate.getSystemService(Context.ACTIVITY_SERVICE);
-        List<ActivityManager.RunningServiceInfo> services = manager.getRunningServices(Integer.MAX_VALUE);
-        if (services == null)
-            return false;
-        for (ActivityManager.RunningServiceInfo service: services) {
-            if (candidate.getClass().getName().equals(service.service.getClassName())) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    static boolean checkContext(WeakReference<Context> contextWeakReference) {
-        Context context = contextWeakReference.get();
-        if (context == null)
-            return false;
-        return checkContext(context);
-    }
-
-    static boolean checkContext(Context context) {
-        if (context instanceof Activity) {
-            Activity activity = (Activity)context;
-            if (activity.isFinishing())
-                return false;
-        }
-        else if (context instanceof Service) {
-            Service service = (Service)context;
-            if (!isServiceRunning(service))
-                return false;
-        }
-
-        return true;
-    }
-
-    private boolean checkContext() {
-        return checkContext(context);
-    }
-
     private <T> void postExecute(final EmitterTransform<T> future, final Exception ex, final T value) {
         final Runnable runner = new Runnable() {
             @Override
             public void run() {
                 // check if the context is still alive...
-                if (!checkContext()) {
-                    future.initialRequest.logd("context has died");
+                String deadReason = contextReference.isAlive();
+                if (deadReason != null) {
+                    future.initialRequest.logd("context has died: " + deadReason);
+                    future.cancelSilently();
                     return;
                 }
 
@@ -421,7 +383,7 @@ public void run() {
     <T> Future<AsyncHttpRequest> resolveRequest(AsyncHttpRequest request, final EmitterTransform<T> ret) {
         // first attempt to resolve the url
         for (Loader loader: ion.loaders) {
-            Future<AsyncHttpRequest> resolved = loader.resolve(context.get(), ion, request);
+            Future<AsyncHttpRequest> resolved = loader.resolve(contextReference.getContext(), ion, request);
             if (resolved != null)
                 return resolved;
 
@@ -467,7 +429,7 @@ public int loadedFrom() {
 
         public EmitterTransform(Runnable cancelCallback) {
             this.cancelCallback = cancelCallback;
-            ion.addFutureInFlight(this, context.get());
+            ion.addFutureInFlight(this, contextReference.getContext());
             if (groups == null)
                 return;
             for (WeakReference<Object> ref: groups) {
@@ -527,9 +489,10 @@ public void run() {
                 public void onData(final int totalBytesRead) {
                     assert Thread.currentThread() != Looper.getMainLooper().getThread();
                     // if the requesting context dies during the transfer... cancel
-                    if (!checkContext()) {
+                    String deadReason = contextReference.isAlive();
+                    if (deadReason != null) {
                         initialRequest.logd("context has died, cancelling");
-                        cancel();
+                        cancelSilently();
                         return;
                     }
 
diff --git a/ion/src/com/koushikdutta/ion/NetworkImageView.java b/ion/src/com/koushikdutta/ion/NetworkImageView.java
deleted file mode 100644
index bded8ba0..00000000
--- a/ion/src/com/koushikdutta/ion/NetworkImageView.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/**
- * Copyright (C) 2013 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.koushikdutta.ion;
-
-import android.content.Context;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.widget.ImageView;
-
-import com.koushikdutta.async.future.Future;
-
-import java.lang.ref.WeakReference;
-
-/**
- * Handles fetching an image from a URL as well as the life-cycle of the
- * associated request.
- */
-public class NetworkImageView extends ImageView {
-    /** The URL of the network image to load */
-    private String mUrl;
-
-    /**
-     * Resource ID of the image to be used as a placeholder until the network image is loaded.
-     */
-    private int mDefaultImageId;
-
-    /**
-     * Resource ID of the image to be used if the network response fails.
-     */
-    private int mErrorImageId;
-
-    /** Local copy of the Ion. */
-    private Ion mIon;
-
-    /** Current Future<Bitmap. (either in-flight or finished) */
-    private WeakReference<Future<ImageView>> mFuture;
-
-    public NetworkImageView(Context context) {
-        this(context, null);
-    }
-
-    public NetworkImageView(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    public NetworkImageView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    /**
-     * Sets URL of the image that should be loaded into this view. Note that calling this will
-     * immediately either set the cached image (if available) or the default image specified by
-     * {@link NetworkImageView#setDefaultImageResId(int)} on the view.
-     *
-     * NOTE: If applicable, {@link NetworkImageView#setDefaultImageResId(int)} and
-     * {@link NetworkImageView#setErrorImageResId(int)} should be called prior to calling
-     * this function.
-     *
-     * @param url The URL that should be loaded into this ImageView.
-     * @param ion ImageLoader that will be used to make the request.
-     */
-    public void setImageUrl(String url, Ion ion) {
-        mIon = ion;
-        // The URL has potentially changed. See if we need to load it.
-        loadImageIfNecessary(url);
-    }
-
-    /**
-     * Sets URL of the image that should be loaded into this view. Note that calling this will
-     * immediately either set the cached image (if available) or the default image specified by
-     * {@link NetworkImageView#setDefaultImageResId(int)} on the view.
-     *
-     * NOTE: If applicable, {@link NetworkImageView#setDefaultImageResId(int)} and
-     * {@link NetworkImageView#setErrorImageResId(int)} should be called prior to calling
-     * this function.
-     *
-     * @param url The URL that should be loaded into this ImageView.
-     */
-    public void setImageUrl(String url) {
-        mIon = Ion.getDefault(getContext());
-        // The URL has potentially changed. See if we need to load it.
-        loadImageIfNecessary(url);
-    }
-
-    /**
-     * Sets the default image resource ID to be used for this view until the attempt to load it
-     * completes.
-     */
-    public void setDefaultImageResId(int defaultImage) {
-        mDefaultImageId = defaultImage;
-    }
-
-    /**
-     * Sets the error image resource ID to be used for this view in the event that the image
-     * requested fails to load.
-     */
-    public void setErrorImageResId(int errorImage) {
-        mErrorImageId = errorImage;
-    }
-
-    /**
-     * Loads the image for the view if it isn't already loaded.
-     */
-    private void loadImageIfNecessary(String url) {
-        int width = getWidth();
-        int height = getHeight();
-
-        String oldUrl = mUrl;
-        mUrl = url;
-
-        // if the view's bounds aren't known yet, hold off on loading the image.
-        if (width == 0 && height == 0) {
-            return;
-        }
-
-        Future<ImageView> future;
-        if (mFuture == null)
-            future = null;
-        else
-            future = mFuture.get();
-
-        // if the URL to be loaded in this view is empty, cancel any old requests and recycle the
-        // currently loaded image.
-        if (TextUtils.isEmpty(mUrl)) {
-            if (future != null) {
-                future.cancel();
-                mFuture = null;
-            }
-            setImageBitmap(null);
-            return;
-        }
-
-        // if there was an old request in this view, check if it needs to be canceled.
-        if (future != null && oldUrl != null) {
-            if (oldUrl.equals(mUrl)) {
-                // if the request is from the same URL, return.
-                return;
-            } else {
-                // if there is a pre-existing request, cancel it if it's fetching a different URL.
-                future.cancel();
-                setImageBitmap(null);
-            }
-        }
-
-        // The pre-existing content of this view didn't match the current URL. Load the new image
-        // from the network.
-        future = mIon.build(this)
-            .placeholder(mDefaultImageId)
-            .error(mErrorImageId)
-            .load(mUrl);
-
-        mFuture = new WeakReference<Future<ImageView>>(future);
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
-        super.onLayout(changed, left, top, right, bottom);
-        loadImageIfNecessary(mUrl);
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        Future<ImageView> future;
-        if (mFuture == null)
-            future = null;
-        else
-            future = mFuture.get();
-
-        if (future != null) {
-            // If the view was bound to an image request, cancel it and recycle
-            // out the image from the view.
-            future.cancel();
-            setImageBitmap(null);
-            // also recycle out the container so we can reload the image if necessary.
-            mFuture = null;
-        }
-        super.onDetachedFromWindow();
-    }
-
-    @Override
-    protected void drawableStateChanged() {
-        super.drawableStateChanged();
-        invalidate();
-    }
-}
diff --git a/ion/src/com/koushikdutta/ion/builder/Builders.java b/ion/src/com/koushikdutta/ion/builder/Builders.java
index e389cda8..7675a2de 100644
--- a/ion/src/com/koushikdutta/ion/builder/Builders.java
+++ b/ion/src/com/koushikdutta/ion/builder/Builders.java
@@ -11,21 +11,27 @@
     }
 
     public interface Any {
+        // restrict to image view builder
         public interface IF<A extends IF<?>> extends ImageViewBuilder<A>, ImageViewFutureBuilder {
         }
 
+        // restrict to bitmap future builder
         public interface BF<A extends BF<?>> extends BitmapBuilder<A>, BitmapFutureBuilder, IF<A> {
         }
 
+        // restrict to future builder
         public interface F extends FutureBuilder, ImageViewFutureBuilder {
         }
 
+        // restrict to multipart builder
         public interface M extends MultipartBodyBuilder<M>, F {
         }
 
+        // restrict to url encoded builder builder
         public interface U extends UrlEncodedBuilder<U>, F {
         }
 
+        // top level builder
         public interface B extends RequestBuilder<F, B, M, U>, F {
         }
     }
