diff --git a/ion-test/ion-test.iml b/ion-test/ion-test.iml
index 31ab5ad4..d91d4670 100644
--- a/ion-test/ion-test.iml
+++ b/ion-test/ion-test.iml
@@ -13,9 +13,7 @@
       </configuration>
     </facet>
   </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issues.java b/ion-test/src/com/koushikdutta/ion/test/Issues.java
index 77ff7588..cabbb66a 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issues.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Issues.java
@@ -4,6 +4,11 @@
 import android.test.AndroidTestCase;
 import android.util.Log;
 
+import com.koushikdutta.async.AsyncServer;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
+import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
+import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
+import com.koushikdutta.async.http.server.HttpServerRequestCallback;
 import com.koushikdutta.ion.Ion;
 
 /**
@@ -32,4 +37,44 @@ public void testIssue126() throws Exception {
         assertNotNull(bitmap);
         assertTrue(bitmap.getWidth() > 0);
     }
+
+    public void testIssue146() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.get("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                response.getHeaders().getHeaders().set("Cache-Control", "max-age=300");
+                response.send(request.getQuery().size() + "");
+            }
+        });
+        AsyncServer asyncServer = new AsyncServer();
+        try {
+            int localPort = httpServer.listen(asyncServer, 0).getLocalPort();
+            String s1 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .addQuery("query1", "q")
+            .asString()
+            .get();
+
+            String s2 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .addQuery("query1", "q")
+            .addQuery("query2", "qq")
+            .asString()
+            .get();
+
+            String s3 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .addQuery("query1", "q")
+            .asString()
+            .get();
+
+            assertEquals(s1, "1");
+            assertEquals(s2, "2");
+            assertEquals(s3, "1");
+        }
+        finally {
+            asyncServer.stop();
+        }
+    }
 }
diff --git a/ion/ion.iml b/ion/ion.iml
index f3f837b5..2494382d 100644
--- a/ion/ion.iml
+++ b/ion/ion.iml
@@ -14,9 +14,7 @@
       </configuration>
     </facet>
   </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index 655dbbc5..9e62c6f5 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -48,7 +48,7 @@ private boolean fastLoad(String uri) {
         boolean put = !hasTransforms;
 
         for (Loader loader: ion.configure().getLoaders()) {
-            Future<BitmapInfo> future = loader.loadBitmap(ion, downloadKey, uri, resizeWidth, resizeHeight);
+            Future<BitmapInfo> future = loader.loadBitmap(ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
             if (future != null) {
                 final BitmapCallback callback = new LoadBitmapBase(ion, downloadKey, put);
                 future.setCallback(new FutureCallback<BitmapInfo>() {
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 09e7c460..c3d32042 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -1,7 +1,9 @@
 package com.koushikdutta.ion;
 
+import android.content.ContentUris;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
+import android.net.Uri;
 import android.os.Build;
 import android.os.Looper;
 import android.view.animation.Animation;
@@ -227,6 +229,15 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
             throw new IllegalArgumentException("imageView");
         assert Thread.currentThread() == Looper.getMainLooper().getThread();
 
+        if (builder.uri != null && builder.uri.startsWith("android.resource:/")) {
+            IonDrawable drawable = setIonDrawable(imageView, null, 0);
+            SimpleFuture<ImageView> imageViewFuture = drawable.getFuture();
+            imageViewFuture.reset();
+            imageView.setImageURI(Uri.parse(builder.uri));
+            imageViewFuture.setComplete(null, imageView);
+            return imageViewFuture;
+        }
+
         // no uri? just set a placeholder and bail
         if (builder.uri == null) {
             setIonDrawable(imageView, null, 0).cancel();
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index b71d9a40..9d37f7f6 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -97,6 +97,8 @@ public IonRequestBuilder load(String url) {
 
     private IonRequestBuilder loadInternal(String method, String url) {
         this.method = method;
+        if (!TextUtils.isEmpty(url) && url.startsWith("/"))
+            url = new File(url).toURI().toString();
         this.uri = url;
         return this;
     }
diff --git a/ion/src/com/koushikdutta/ion/Loader.java b/ion/src/com/koushikdutta/ion/Loader.java
index 1d612b4e..d417a25d 100644
--- a/ion/src/com/koushikdutta/ion/Loader.java
+++ b/ion/src/com/koushikdutta/ion/Loader.java
@@ -78,7 +78,7 @@ public AsyncHttpRequest getRequest() {
      * @param resizeHeight
      * @return
      */
-    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight);
+    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif);
 
     /**
      * Resolve a request into another request.
diff --git a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
index feba3788..ec80d761 100644
--- a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
@@ -1,7 +1,5 @@
 package com.koushikdutta.ion.builder;
 
-import android.util.Xml;
-
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.reflect.TypeToken;
@@ -17,7 +15,7 @@
 /**
 * Created by koush on 5/30/13.
 */ // get the result, transformed to how you want it
-public interface FutureBuilder extends BitmapFutureBuilder, ImageViewFutureBuilder {
+public interface FutureBuilder extends BitmapFutureBuilder, ImageViewFutureBuilder, GsonFutureBuilder {
     /**
      * Execute the request and get the result as a String
      * @return
@@ -32,18 +30,6 @@
      */
     public ResponseFuture<InputStream> asInputStream();
 
-    /**
-     * Execute the request and get the result as a (Gson) JsonArray
-     * @return
-     */
-    public ResponseFuture<JsonArray> asJsonArray();
-
-    /**
-     * Execute the request and get the result as a (Gson) JsonObject
-     * @return
-     */
-    public ResponseFuture<JsonObject> asJsonObject();
-
     /**
      * Execute the request and get the result as an XML Document
      * @return
@@ -80,21 +66,6 @@
      */
     public ResponseFuture<File> write(File file);
 
-    /**
-     * Deserialize the JSON request into a Java object of the given class using Gson.
-     * @param <T>
-     * @return
-     */
-    public <T> ResponseFuture<T> as(Class<T> clazz);
-
-    /**
-     * Deserialize the JSON request into a Java object of the given class using Gson.
-     * @param token
-     * @param <T>
-     * @return
-     */
-    public <T> ResponseFuture<T> as(TypeToken<T> token);
-
     /**
      * Deserialize a response into an object given a custom parser.
      * @param parser
diff --git a/ion/src/com/koushikdutta/ion/builder/GsonFutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/GsonFutureBuilder.java
new file mode 100644
index 00000000..d2d8fe0a
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/builder/GsonFutureBuilder.java
@@ -0,0 +1,38 @@
+package com.koushikdutta.ion.builder;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.reflect.TypeToken;
+import com.koushikdutta.ion.future.ResponseFuture;
+
+/**
+ * Created by koush on 3/10/14.
+ */
+public interface GsonFutureBuilder {
+    /**
+     * Execute the request and get the result as a (Gson) JsonArray
+     * @return
+     */
+    public ResponseFuture<JsonArray> asJsonArray();
+
+    /**
+     * Execute the request and get the result as a (Gson) JsonObject
+     * @return
+     */
+    public ResponseFuture<JsonObject> asJsonObject();
+
+    /**
+     * Deserialize the JSON request into a Java object of the given class using Gson.
+     * @param <T>
+     * @return
+     */
+    public <T> ResponseFuture<T> as(Class<T> clazz);
+
+    /**
+     * Deserialize the JSON request into a Java object of the given class using Gson.
+     * @param token
+     * @param <T>
+     * @return
+     */
+    public <T> ResponseFuture<T> as(TypeToken<T> token);
+}
diff --git a/ion/src/com/koushikdutta/ion/loader/FileLoader.java b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
index d28c71ce..f9b8be89 100644
--- a/ion/src/com/koushikdutta/ion/loader/FileLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
@@ -3,6 +3,7 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Point;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.koushikdutta.async.DataEmitter;
@@ -11,9 +12,12 @@
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.http.AsyncHttpRequest;
+import com.koushikdutta.async.http.libcore.IoUtils;
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.gif.GifAction;
+import com.koushikdutta.ion.gif.GifDecoder;
 
 import java.io.BufferedInputStream;
 import java.io.File;
@@ -30,7 +34,8 @@
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight,
+                                         final boolean animateGif) {
         if (uri == null || !uri.startsWith("file:/"))
             return null;
 
@@ -50,10 +55,38 @@ public void run() {
                     if (options == null)
                         throw new Exception("BitmapFactory.Options failed to load");
                     Point size = new Point(options.outWidth, options.outHeight);
-                    Bitmap bitmap = ion.getBitmapCache().loadBitmap(file, options);
-                    if (bitmap == null)
-                        throw new Exception("Bitmap failed to load");
-                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, new Bitmap[] { bitmap }, size);
+                    Bitmap[] bitmaps;
+                    int[] delays;
+                    if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {
+                        FileInputStream fin = new FileInputStream(file);
+                        GifDecoder decoder = new GifDecoder(fin, new GifAction() {
+                            @Override
+                            public boolean parseOk(boolean parseStatus, int frameIndex) {
+                                return animateGif;
+                            }
+                        });
+                        decoder.run();
+                        IoUtils.closeQuietly(fin);
+                        if (decoder.getFrameCount() == 0)
+                            throw new Exception("failed to load gif");
+                        bitmaps = new Bitmap[decoder.getFrameCount()];
+                        delays = decoder.getDelays();
+                        for (int i = 0; i < decoder.getFrameCount(); i++) {
+                            Bitmap bitmap = decoder.getFrameImage(i);
+                            if (bitmap == null)
+                                throw new Exception("failed to load gif frame");
+                            bitmaps[i] = bitmap;
+                        }
+                    }
+                    else {
+                        Bitmap bitmap = ion.getBitmapCache().loadBitmap(file, options);
+                        if (bitmap == null)
+                            throw new Exception("Bitmap failed to load");
+                        bitmaps = new Bitmap[] { bitmap };
+                        delays = null;
+                    }
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
+                    info.delays = delays;
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
diff --git a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
index 0c07bb26..c3230c62 100644
--- a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
@@ -19,7 +19,7 @@
  */
 public class PackageIconLoader extends SimpleLoader {
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (uri == null || !uri.startsWith("package:"))
             return null;
 
diff --git a/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java b/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
index 0d6d8b18..ba494678 100644
--- a/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
@@ -25,7 +25,7 @@
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         return null;
     }
 
diff --git a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
index 9a0a8fab..0d807fff 100644
--- a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
@@ -34,13 +34,11 @@ public static Bitmap createVideoThumbnail(String filePath) throws Exception {
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, final String key, String uri, int resizeWidth, int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (!uri.startsWith(ContentResolver.SCHEME_FILE))
             return null;
 
-        final File file = new File(URI.create(uri));
-
-        final MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
+        final MediaFile.MediaFileType type = MediaFile.getFileType(uri);
         if (type == null || !MediaFile.isVideoFileType(type.fileType))
             return null;
 
@@ -48,6 +46,7 @@ public static Bitmap createVideoThumbnail(String filePath) throws Exception {
         Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {
+                final File file = new File(URI.create(uri));
                 if (ret.isCancelled()) {
 //                    Log.d("VideoLoader", "Bitmap load cancelled (no longer needed)");
                     return;
