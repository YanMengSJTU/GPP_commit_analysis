diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index c28122e5..b1b3f5e9 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -13,6 +13,7 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.future.TransformFuture;
+import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
 import com.koushikdutta.async.http.libcore.DiskLruCache;
 import com.koushikdutta.async.parser.ByteBufferListParser;
@@ -24,6 +25,7 @@
 
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
+import java.net.URI;
 import java.util.ArrayList;
 
 /**
@@ -98,16 +100,17 @@ BitmapInfo execute() {
         }
 
         // see if this request can be fulfilled from the cache
-        BitmapInfo bitmap = builder.ion.bitmapCache.get(bitmapKey);
-        if (bitmap != null) {
-            return bitmap;
+        if (!builder.noCache) {
+            BitmapInfo bitmap = builder.ion.bitmapCache.get(bitmapKey);
+            if (bitmap != null)
+                return bitmap;
         }
 
         // bitmaps that were transformed are put into the DiskLruCache to prevent
         // subsequent retransformation. See if we can retrieve the bitmap from the disk cache.
         // See BitmapToBitmapInfo for where the cache is populated.
         DiskLruCache diskLruCache = ion.getResponseCache().getDiskLruCache();
-        if (hasTransforms && diskLruCache.containsKey(bitmapKey)) {
+        if (!builder.noCache && hasTransforms && diskLruCache.containsKey(bitmapKey)) {
             BitmapToBitmapInfo.getBitmapSnapshot(ion, bitmapKey);
             return null;
         }
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index dc7d89a9..a52b44c0 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -26,20 +26,21 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
-import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.future.TransformFuture;
 import com.koushikdutta.async.http.AsyncHttpGet;
 import com.koushikdutta.async.http.AsyncHttpPost;
 import com.koushikdutta.async.http.AsyncHttpRequest;
-import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.body.DocumentBody;
 import com.koushikdutta.async.http.body.FileBody;
 import com.koushikdutta.async.http.body.MultipartFormDataBody;
+import com.koushikdutta.async.http.body.StreamBody;
 import com.koushikdutta.async.http.body.StringBody;
 import com.koushikdutta.async.http.body.UrlEncodedFormBody;
 import com.koushikdutta.async.http.libcore.RawHeaders;
 import com.koushikdutta.async.parser.AsyncParser;
+import com.koushikdutta.async.parser.DocumentParser;
 import com.koushikdutta.async.parser.StringParser;
 import com.koushikdutta.async.stream.OutputStreamDataSink;
 import com.koushikdutta.ion.Loader.LoaderEmitter;
@@ -47,7 +48,6 @@
 import com.koushikdutta.ion.builder.FutureBuilder;
 import com.koushikdutta.ion.builder.LoadBuilder;
 import com.koushikdutta.ion.future.ResponseFuture;
-import com.koushikdutta.async.parser.DocumentParser;
 import com.koushikdutta.ion.gson.GsonBody;
 import com.koushikdutta.ion.gson.GsonParser;
 import com.koushikdutta.ion.gson.GsonSerializer;
@@ -123,6 +123,13 @@ public IonRequestBuilder addHeader(String name, String value) {
         return this;
     }
 
+    boolean noCache;
+    @Override
+    public Builders.Any.B noCache() {
+        noCache = true;
+        return setHeader("Cache-Control", "no-cache");
+    }
+
     Multimap query;
     @Override
     public IonRequestBuilder addQuery(String name, String value) {
@@ -768,4 +775,16 @@ public IonRequestBuilder basicAuthentication(String username, String password) {
         setBody(new FileBody(file));
         return this;
     }
+
+    @Override
+    public Builders.Any.F setStreamBody(InputStream inputStream) {
+        setBody(new StreamBody(inputStream, -1));
+        return this;
+    }
+
+    @Override
+    public Builders.Any.F setStreamBody(InputStream inputStream, int length) {
+        setBody(new StreamBody(inputStream, length));
+        return this;
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
index bbda4b60..1e85ab53 100644
--- a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
@@ -34,6 +34,10 @@
      */
     public ResponseFuture<JsonObject> asJsonObject();
 
+    /**
+     * Execute the request and get the result as an XML Document
+     * @return
+     */
     public ResponseFuture<Document> asDocument();
 
     /**
diff --git a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
index a9af57f0..2abaa6c2 100644
--- a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
@@ -16,6 +16,7 @@
 import org.w3c.dom.Document;
 
 import java.io.File;
+import java.io.InputStream;
 
 /**
 * Created by koush on 5/30/13.
@@ -114,6 +115,12 @@
      */
     public R setHeader(String name, String value);
 
+    /**
+     * Disable usage of the cache for this request
+     * @return
+     */
+    public R noCache();
+
     /**
      * Set whether this request will follow redirects
      */
@@ -221,4 +228,21 @@
      * @return
      */
     public F setFileBody(File file);
+
+    /**
+     * Specify an InputStream to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param inputStream InputStream to send with the request
+     * @return
+     */
+    public Builders.Any.F setStreamBody(InputStream inputStream);
+
+    /**
+     * Specify an InputStream to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param inputStream InputStream to send with the request
+     * @param length length of the input stream (in bytes) to read
+     * @return
+     */
+    public Builders.Any.F setStreamBody(InputStream inputStream, int length);
 }
