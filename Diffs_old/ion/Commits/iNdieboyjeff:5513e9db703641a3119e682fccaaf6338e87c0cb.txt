diff --git a/ion-test/src/com/koushikdutta/ion/test/Issue74.java b/ion-test/src/com/koushikdutta/ion/test/Issues.java
similarity index 58%
rename from ion-test/src/com/koushikdutta/ion/test/Issue74.java
rename to ion-test/src/com/koushikdutta/ion/test/Issues.java
index da41005a..77ff7588 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issue74.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Issues.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.test;
 
+import android.graphics.Bitmap;
 import android.test.AndroidTestCase;
 import android.util.Log;
 
@@ -8,8 +9,8 @@
 /**
  * Created by koush on 10/27/13.
  */
-public class Issue74 extends AndroidTestCase {
-    public void testIssue() throws Exception {
+public class Issues extends AndroidTestCase {
+    public void testIssue74() throws Exception {
         String data = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
         .setLogging("MyLogs", Log.VERBOSE)
         .asString().get();
@@ -20,4 +21,15 @@ public void testIssue() throws Exception {
 
         assertEquals(data, data2);
     }
+
+    public void testIssue126() throws Exception {
+        Bitmap bitmap = Ion.with(getContext())
+        .load("http://bdc.tsingyuan.cn/api/img?w=advanced")
+        .setLogging("Issue126", Log.VERBOSE)
+        .asBitmap()
+        .get();
+
+        assertNotNull(bitmap);
+        assertTrue(bitmap.getWidth() > 0);
+    }
 }
diff --git a/ion/AndroidManifest.xml b/ion/AndroidManifest.xml
index d2f318a2..6d5cb869 100644
--- a/ion/AndroidManifest.xml
+++ b/ion/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.koushikdutta.ion"
-          android:versionCode="120"
-          android:versionName="1.2.0">
+          android:versionCode="121"
+          android:versionName="1.2.1">
     <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />
     <application />
 </manifest>
diff --git a/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java b/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
index 28062b11..cd225460 100644
--- a/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
@@ -23,16 +23,21 @@
     ArrayList<Transform> transforms;
 
     public static void getBitmapSnapshot(final Ion ion, final String transformKey) {
+        final BitmapCallback callback = new BitmapCallback(ion, transformKey, true);
         Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {
-                final BitmapCallback callback = new BitmapCallback(ion, transformKey, true);
+                if (ion.bitmapsPending.tag(transformKey) != callback) {
+                    Log.d("IonBitmapLoader", "Bitmap cache load cancelled (no longer needed)");
+                    return;
+                }
+
                 try {
                     DiskLruCache.Snapshot snapshot = ion.responseCache.getDiskLruCache().get(transformKey);
                     try {
                         InputStream in = snapshot.getInputStream(0);
                         assert in instanceof FileInputStream;
-                        Bitmap bitmap = ion.getBitmapCache().loadBitmap(new BufferedInputStream((FileInputStream)in, 1024 * 64), -1, -1);
+                        Bitmap bitmap = ion.getBitmapCache().loadBitmap(in, -1, -1);
                         in.close();
                         if (bitmap == null)
                             throw new Exception("Bitmap failed to load");
@@ -87,7 +92,10 @@ public void run() {
                 try {
                     for (int i = 0; i < result.bitmaps.length; i++) {
                         for (Transform transform : transforms) {
-                            info.bitmaps[i] = transform.transform(result.bitmaps[i]);
+                            Bitmap bitmap = transform.transform(result.bitmaps[i]);
+                            if (bitmap == null)
+                                throw new Exception("failed to transform bitmap");
+                            info.bitmaps[i] = bitmap;
                         }
                     }
                     info.delays = result.delays;
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 490b1073..49f0c1da 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.os.Looper;
+import android.util.Pair;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 import android.widget.ImageView;
@@ -21,6 +22,7 @@
 import com.koushikdutta.ion.bitmap.Transform;
 import com.koushikdutta.ion.builder.BitmapFutureBuilder;
 import com.koushikdutta.ion.builder.Builders;
+import com.koushikdutta.ion.builder.ImageViewBuilder;
 import com.koushikdutta.ion.builder.ImageViewFutureBuilder;
 
 import java.lang.ref.WeakReference;
@@ -30,8 +32,77 @@
  * Created by koush on 5/23/13.
  */
 class IonBitmapRequestBuilder implements Builders.ImageView.F, ImageViewFutureBuilder, BitmapFutureBuilder, Builders.Any.BF {
+    private static final SimpleFuture<ImageView> FUTURE_IMAGEVIEW_NULL_URI = new SimpleFuture<ImageView>() {
+        {
+            setComplete(new NullPointerException("uri"));
+        }
+    };
+    private static final SimpleFuture<Bitmap> FUTURE_BITMAP_NULL_URI = new SimpleFuture<Bitmap>() {
+        {
+            setComplete(new NullPointerException("uri"));
+        }
+    };
+
     IonRequestBuilder builder;
     Ion ion;
+    WeakReference<ImageView> imageViewPostRef;
+    ArrayList<Transform> transforms;
+    Drawable placeholderDrawable;
+    int placeholderResource;
+    Drawable errorDrawable;
+    int errorResource;
+    Animation inAnimation;
+    Animation loadAnimation;
+    int loadAnimationResource;
+    int inAnimationResource;
+    ScaleMode scaleMode = ScaleMode.FitXY;
+    int resizeWidth;
+    int resizeHeight;
+    boolean disableFadeIn;
+    boolean animateGif = true;
+
+
+    void reset() {
+        placeholderDrawable = null;
+        placeholderResource = 0;
+        errorDrawable = null;
+        errorResource = 0;
+        ion = null;
+        imageViewPostRef = null;
+        transforms = null;
+        inAnimation = null;
+        inAnimationResource = 0;
+        loadAnimation = null;
+        loadAnimationResource = 0;
+        scaleMode = ScaleMode.FitXY;
+        resizeWidth = 0;
+        resizeHeight = 0;
+        disableFadeIn = false;
+        animateGif = true;
+        builder = null;
+    }
+
+    public IonBitmapRequestBuilder(IonRequestBuilder builder) {
+        this.builder = builder;
+        ion = builder.ion;
+    }
+
+    public IonBitmapRequestBuilder(Ion ion) {
+        this.ion = ion;
+    }
+
+    static void doAnimation(ImageView imageView, Animation animation, int animationResource) {
+        if (imageView == null)
+            return;
+        if (animation == null && animationResource != 0)
+            animation = AnimationUtils.loadAnimation(imageView.getContext(), animationResource);
+        if (animation == null) {
+            imageView.setAnimation(null);
+            return;
+        }
+
+        imageView.startAnimation(animation);
+    }
 
     private IonRequestBuilder ensureBuilder() {
         if (builder == null)
@@ -53,23 +124,11 @@ private IonRequestBuilder ensureBuilder() {
         return intoImageView(imageViewPostRef.get());
     }
 
-    WeakReference<ImageView> imageViewPostRef;
     IonBitmapRequestBuilder withImageView(ImageView imageView) {
         imageViewPostRef = new WeakReference<ImageView>(imageView);
         return this;
     }
 
-    public IonBitmapRequestBuilder(IonRequestBuilder builder) {
-        this.builder = builder;
-        ion = builder.ion;
-    }
-
-    public IonBitmapRequestBuilder(Ion ion) {
-        this.ion = ion;
-    }
-
-    ArrayList<Transform> transforms;
-
     @Override
     public IonBitmapRequestBuilder transform(Transform transform) {
         if (transforms == null)
@@ -97,18 +156,25 @@ public void onCompleted(Exception e, BitmapInfo result) {
         return false;
     }
 
-    String bitmapKey;
-    BitmapInfo execute() {
-        final String downloadKey = ResponseCacheMiddleware.toKeyString(builder.uri);
+    private String computeDownloadKey() {
+        String downloadKey = builder.uri;
+        // although a gif is always same download, the initial decode is different
+        if (!animateGif)
+            downloadKey += ":!animateGif";
+        return ResponseCacheMiddleware.toKeyString(downloadKey);
+    }
+
+    Pair<String, BitmapInfo> execute() {
+        final String downloadKey = computeDownloadKey();
         assert Thread.currentThread() == Looper.getMainLooper().getThread() || imageViewPostRef == null;
         assert downloadKey != null;
 
-        if (resizeHeight != 0 || resizeWidth != 0) {
+        if (resizeHeight > 0 || resizeWidth > 0) {
             transform(new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
         }
 
         // determine the key for this bitmap after all transformations
-        bitmapKey = downloadKey;
+        String bitmapKey = downloadKey;
         boolean hasTransforms = transforms != null && transforms.size() > 0;
         if (hasTransforms) {
             for (Transform transform : transforms) {
@@ -121,16 +187,18 @@ BitmapInfo execute() {
         if (!builder.noCache) {
             BitmapInfo bitmap = builder.ion.bitmapCache.get(bitmapKey);
             if (bitmap != null)
-                return bitmap;
+                return new Pair<String, BitmapInfo>(bitmapKey, bitmap);
         }
 
+        Pair<String, BitmapInfo> ret = new Pair<String, BitmapInfo>(bitmapKey, null);
+
         // bitmaps that were transformed are put into the DiskLruCache to prevent
         // subsequent retransformation. See if we can retrieve the bitmap from the disk cache.
         // See BitmapToBitmapInfo for where the cache is populated.
         DiskLruCache diskLruCache = ion.responseCache.getDiskLruCache();
         if (!builder.noCache && hasTransforms && diskLruCache.containsKey(bitmapKey)) {
             BitmapToBitmapInfo.getBitmapSnapshot(ion, bitmapKey);
-            return null;
+            return ret;
         }
 
         // Perform a download as necessary.
@@ -148,12 +216,12 @@ public void run() {
                     });
                 }
             });
-            emitterTransform.setCallback(new LoadBitmap(ion, downloadKey, !hasTransforms, resizeWidth, resizeHeight, emitterTransform));
+            emitterTransform.setCallback(new LoadBitmap(ion, downloadKey, !hasTransforms, resizeWidth, resizeHeight, animateGif, emitterTransform));
         }
 
         // if there's a transform, do it
         if (!hasTransforms)
-            return null;
+            return ret;
 
         // verify this transform isn't already pending
         // make sure that the parent download isn't cancelled (empty list)
@@ -162,21 +230,9 @@ public void run() {
             ion.bitmapsPending.add(downloadKey, new BitmapToBitmapInfo(ion, bitmapKey, downloadKey, transforms));
         }
 
-        return null;
+        return ret;
     }
 
-    private static final SimpleFuture<ImageView> FUTURE_IMAGEVIEW_NULL_URI = new SimpleFuture<ImageView>() {
-        {
-            setComplete(new NullPointerException("uri"));
-        }
-    };
-
-    private static final SimpleFuture<Bitmap> FUTURE_BITMAP_NULL_URI = new SimpleFuture<Bitmap>() {
-        {
-            setComplete(new NullPointerException("uri"));
-        }
-    };
-
     private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loadedFrom) {
         IonDrawable ret = IonDrawable.getOrCreateIonDrawable(imageView);
         ret.setBitmap(info, loadedFrom);
@@ -197,16 +253,15 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
 
         // no uri? just set a placeholder and bail
         if (builder.uri == null) {
-            bitmapKey = null;
             setIonDrawable(imageView, null, 0).cancel();
             return FUTURE_IMAGEVIEW_NULL_URI;
         }
 
         // execute the request, see if we get a bitmap from cache.
-        BitmapInfo info = execute();
-        if (info != null) {
+        Pair<String, BitmapInfo> pair = execute();
+        if (pair.second != null) {
             doAnimation(imageView, null, 0);
-            IonDrawable drawable = setIonDrawable(imageView, info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
+            IonDrawable drawable = setIonDrawable(imageView, pair.second, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
             drawable.cancel();
             SimpleFuture<ImageView> imageViewFuture = drawable.getFuture();
             imageViewFuture.reset();
@@ -219,30 +274,11 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
         SimpleFuture<ImageView> imageViewFuture = drawable.getFuture();
         imageViewFuture.reset();
 
-        drawable.register(ion, bitmapKey);
+        drawable.register(ion, pair.first);
 
         return imageViewFuture;
     }
 
-    private static class BitmapInfoToBitmap extends TransformFuture<Bitmap, BitmapInfo> {
-        WeakReference<Context> context;
-        public BitmapInfoToBitmap(WeakReference<Context> context) {
-            this.context = context;
-        }
-        @Override
-        protected void transform(BitmapInfo result) throws Exception {
-            if (!IonRequestBuilder.checkContext(context)) {
-                cancel();
-                return;
-            }
-
-            if (result.exception != null)
-                setComplete(result.exception);
-            else
-                setComplete(result.bitmaps[0]);
-        }
-    }
-
     @Override
     public Future<Bitmap> asBitmap() {
         // no uri? just set a placeholder and bail
@@ -251,96 +287,71 @@ protected void transform(BitmapInfo result) throws Exception {
         }
 
         // see if we get something back synchronously
-        BitmapInfo info = execute();
-        if (info != null) {
+        Pair<String, BitmapInfo> pair = execute();
+        if (pair.second != null) {
             SimpleFuture<Bitmap> ret = new SimpleFuture<Bitmap>();
-            Bitmap bitmap = info.bitmaps == null ? null : info.bitmaps[0];
-            ret.setComplete(info.exception, bitmap);
+            Bitmap bitmap = pair.second.bitmaps == null ? null : pair.second.bitmaps[0];
+            ret.setComplete(pair.second.exception, bitmap);
             return ret;
         }
 
         // we're loading, so let's register for the result.
         BitmapInfoToBitmap ret = new BitmapInfoToBitmap(builder.context);
-        ion.bitmapsPending.add(bitmapKey, ret);
+        ion.bitmapsPending.add(pair.first, ret);
         return ret;
     }
 
-    Drawable placeholderDrawable;
-
     @Override
     public IonBitmapRequestBuilder placeholder(Drawable drawable) {
         placeholderDrawable = drawable;
         return this;
     }
 
-    int placeholderResource;
     @Override
     public IonBitmapRequestBuilder placeholder(int resourceId) {
         placeholderResource = resourceId;
         return this;
     }
 
-    Drawable errorDrawable;
     @Override
     public IonBitmapRequestBuilder error(Drawable drawable) {
         errorDrawable = drawable;
         return this;
     }
 
-    int errorResource;
     @Override
     public IonBitmapRequestBuilder error(int resourceId) {
         errorResource = resourceId;
         return this;
     }
 
-    Animation inAnimation;
-
     @Override
     public IonBitmapRequestBuilder animateIn(Animation in) {
         inAnimation = in;
         return this;
     }
 
-    Animation loadAnimation;
-
     @Override
     public IonBitmapRequestBuilder animateLoad(Animation load) {
         loadAnimation = load;
         return this;
     }
 
-    static void doAnimation(ImageView imageView, Animation animation, int animationResource) {
-        if (imageView == null)
-            return;
-        if (animation == null && animationResource != 0)
-            animation = AnimationUtils.loadAnimation(imageView.getContext(), animationResource);
-        if (animation == null) {
-            imageView.setAnimation(null);
-            return;
-        }
-
-        imageView.startAnimation(animation);
-    }
-
-    int loadAnimationResource;
     @Override
     public IonBitmapRequestBuilder animateLoad(int animationResource) {
         loadAnimationResource = animationResource;
         return this;
     }
 
-    int inAnimationResource;
     @Override
     public IonBitmapRequestBuilder animateIn(int animationResource) {
         inAnimationResource = animationResource;
         return this;
     }
 
-    ScaleMode scaleMode = ScaleMode.FitXY;
     @Override
     public IonBitmapRequestBuilder centerCrop() {
-        if (resizeWidth == 0 || resizeHeight == 0)
+        if (resizeWidth <= 0 || resizeHeight <= 0)
             throw new IllegalStateException("must call resize first");
         scaleMode = ScaleMode.CenterCrop;
         return this;
@@ -348,15 +359,12 @@ public IonBitmapRequestBuilder centerCrop() {
 
     @Override
     public IonBitmapRequestBuilder centerInside() {
-        if (resizeWidth == 0 || resizeHeight == 0)
+        if (resizeWidth <= 0 || resizeHeight <= 0)
             throw new IllegalStateException("must call resize first");
         scaleMode = ScaleMode.CenterInside;
         return this;
     }
 
-    int resizeWidth;
-    int resizeHeight;
-
     @Override
     public IonBitmapRequestBuilder resize(int width, int height) {
         resizeWidth = width;
@@ -366,31 +374,51 @@ public IonBitmapRequestBuilder resize(int width, int height) {
         return this;
     }
 
-    private boolean disableFadeIn;
-
     @Override
     public IonBitmapRequestBuilder disableFadeIn() {
         this.disableFadeIn = true;
         return this;
     }
+	
+	public IonBitmapRequestBuilder smartSize(boolean smartSize) {
+        //don't want to disable device resize if user has already resized the Bitmap.
+        if (resizeWidth > 0 || resizeHeight > 0)
+            throw new IllegalStateException("Can't change smart size after resize has been called.");
+
+        if (!smartSize) {
+			resizeWidth = -1;
+			resizeHeight = -1;
+		}
+        else {
+            resizeWidth = 0;
+            resizeHeight = 0;
+        }
+		return this;
+	}
 
-    void reset() {
-        placeholderDrawable = null;
-        placeholderResource = 0;
-        errorDrawable = null;
-        errorResource = 0;
-        ion = null;
-        imageViewPostRef = null;
-        transforms = null;
-        bitmapKey = null;
-        inAnimation = null;
-        inAnimationResource = 0;
-        loadAnimation = null;
-        loadAnimationResource = 0;
-        scaleMode = ScaleMode.FitXY;
-        resizeWidth = 0;
-        resizeHeight = 0;
-        disableFadeIn = false;
-        builder = null;
+    @Override
+    public IonBitmapRequestBuilder animateGif(boolean animateGif) {
+        this.animateGif = animateGif;
+        return this;
+    }
+
+    private static class BitmapInfoToBitmap extends TransformFuture<Bitmap, BitmapInfo> {
+        WeakReference<Context> context;
+        public BitmapInfoToBitmap(WeakReference<Context> context) {
+            this.context = context;
+        }
+
+        @Override
+        protected void transform(BitmapInfo result) throws Exception {
+            if (!IonRequestBuilder.checkContext(context)) {
+                cancel();
+                return;
+            }
+
+            if (result.exception != null)
+                setComplete(result.exception);
+            else
+                setComplete(result.bitmaps[0]);
+        }
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index ab75cb66..be573749 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -60,7 +60,6 @@ public void setInAnimation(Animation inAnimation, int inAnimationResource) {
         private WeakReference<IonDrawable> ionDrawableRef;
         private WeakReference<ImageView> imageViewRef;
         private String bitmapKey;
-        private String parentKey;
         private SimpleFuture<ImageView> imageViewFuture = new SimpleFuture<ImageView>();
         private Animation inAnimation;
         private int inAnimationResource;
diff --git a/ion/src/com/koushikdutta/ion/LoadBitmap.java b/ion/src/com/koushikdutta/ion/LoadBitmap.java
index 7dbe9f67..0133e85a 100644
--- a/ion/src/com/koushikdutta/ion/LoadBitmap.java
+++ b/ion/src/com/koushikdutta/ion/LoadBitmap.java
@@ -19,12 +19,13 @@
     int resizeWidth;
     int resizeHeight;
     IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform;
+    boolean animateGif;
 
-
-    public LoadBitmap(Ion ion, String urlKey, boolean put, int resizeWidth, int resizeHeight, IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform) {
+    public LoadBitmap(Ion ion, String urlKey, boolean put, int resizeWidth, int resizeHeight, boolean animateGif, IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform) {
         super(ion, urlKey, put);
         this.resizeWidth = resizeWidth;
         this.resizeHeight = resizeHeight;
+        this.animateGif = animateGif;
         this.emitterTransform = emitterTransform;
     }
 
@@ -49,7 +50,7 @@ public void onCompleted(Exception e, final ByteBufferList result) {
         }
 
         if (ion.bitmapsPending.tag(key) != this) {
-            Log.d("IonBitmapLoader", "Bitmap load cancelled (no longer needed)");
+//            Log.d("IonBitmapLoader", "Bitmap load cancelled (no longer needed)");
             result.recycle();
             return;
         }
@@ -62,28 +63,30 @@ public void run() {
                     Bitmap[] bitmaps;
                     int[] delays;
                     if (!isGif()) {
-                        bitmaps = new Bitmap[1];
-                        bitmaps[0] = ion.bitmapCache.loadBitmap(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), resizeWidth, resizeHeight);
+                        Bitmap bitmap = ion.bitmapCache.loadBitmap(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), resizeWidth, resizeHeight);
+                        if (bitmap == null)
+                            throw new Exception("failed to transform bitmap");
+                        bitmaps = new Bitmap[] { bitmap };
                         delays = null;
                     }
                     else {
                         GifDecoder decoder = new GifDecoder(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), new GifAction() {
                             @Override
                             public boolean parseOk(boolean parseStatus, int frameIndex) {
-                                return frameIndex < 100;
+                                return animateGif;
                             }
                         });
                         decoder.run();
                         bitmaps = new Bitmap[decoder.getFrameCount()];
                         delays = decoder.getDelays();
                         for (int i = 0; i < decoder.getFrameCount(); i++) {
-                            bitmaps[i] = decoder.getFrameImage(i);
+                            Bitmap bitmap = decoder.getFrameImage(i);
+                            if (bitmap == null)
+                                throw new Exception("failed to transform bitmap");
+                            bitmaps[i] = bitmap;
                         }
                     }
 
-                    if (bitmaps[0] == null)
-                        throw new Exception("bitmap failed to load");
-
                     BitmapInfo info = new BitmapInfo();
                     info.key = key;
                     info.bitmaps = bitmaps;
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index d18bcf84..b2035f4d 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -15,6 +15,7 @@
 
 import com.koushikdutta.ion.Ion;
 
+import java.io.BufferedInputStream;
 import java.io.InputStream;
 
 /**
@@ -56,10 +57,20 @@ public void clear() {
         cache.evictAllBitmapInfo();
     }
 
+    double heapRatio = 1d / 7d;
+    public double getHeapRatio() {
+        return heapRatio;
+    }
+
+    public void setHeapRatio(double heapRatio) {
+        this.heapRatio = heapRatio;
+    }
+
     public void put(BitmapInfo info) {
         assert Thread.currentThread() == Looper.getMainLooper().getThread();
-        if (getHeapSize(ion.getContext()) != cache.maxSize())
-            cache.setMaxSize(getHeapSize(ion.getContext()) / 7);
+        int maxSize = (int)(getHeapSize(ion.getContext()) * heapRatio);
+        if (maxSize != cache.maxSize())
+            cache.setMaxSize(maxSize);
         cache.put(info.key, info);
     }
 
@@ -131,8 +142,7 @@ public Bitmap loadBitmap(byte[] bytes, int offset, int length, int minx, int min
     }
 
     public Bitmap loadBitmap(InputStream stream, int minx, int miny) {
-        if (!stream.markSupported())
-            stream = new MarkableInputStream(stream);
+        stream = new BufferedInputStream(stream, 64 * 1024);
         assert Thread.currentThread() != Looper.getMainLooper().getThread();
         Point target = computeTarget(minx, miny);
 
diff --git a/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java b/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
index a542b5ba..596fc03d 100644
--- a/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/BitmapBuilder.java
@@ -36,4 +36,11 @@
      * @return
      */
     public B centerInside();
+
+    /**
+     * Enable/disable automatic resizing to the dimensions of the device when loading the image.
+     * @param smartSize
+     * @return
+     */
+    public B smartSize(boolean smartSize);
 }
diff --git a/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java b/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java
index 7756ee00..16a5f40c 100644
--- a/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java
@@ -78,4 +78,10 @@
      */
     public I disableFadeIn();
 
+    /**
+     * Flag to enable or disable animation of GIFs
+     * @param animateGif
+     * @return
+     */
+    public I animateGif(boolean animateGif);
 }
diff --git a/ion/src/com/koushikdutta/ion/loader/FileLoader.java b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
index 480f5259..450556db 100644
--- a/ion/src/com/koushikdutta/ion/loader/FileLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion.loader;
 
 import android.graphics.Bitmap;
+import android.util.Log;
 
 import com.koushikdutta.async.DataEmitter;
 import com.koushikdutta.async.FileDataEmitter;
@@ -36,9 +37,13 @@
         Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {
+                if (ret.isCancelled()) {
+//                    Log.d("FileLoader", "Bitmap load cancelled (no longer needed)");
+                    return;
+                }
                 try {
                     FileInputStream fin = new FileInputStream(new File(URI.create(uri)));
-                    Bitmap bitmap = ion.getBitmapCache().loadBitmap(new BufferedInputStream(fin, 1024 * 64), resizeWidth, resizeHeight);
+                    Bitmap bitmap = ion.getBitmapCache().loadBitmap(fin, resizeWidth, resizeHeight);
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
                     BitmapInfo info = new BitmapInfo();
diff --git a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
index 241d0367..147d0b3a 100644
--- a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
@@ -31,6 +31,8 @@ public void run() {
                     String pkg = request.getHost();
                     PackageManager pm = ion.getContext().getPackageManager();
                     Bitmap bmp = ((BitmapDrawable)pm.getPackageInfo(pkg, 0).applicationInfo.loadIcon(pm)).getBitmap();
+                    if (bmp == null)
+                        throw new Exception("package icon failed to load");
                     BitmapInfo info = new BitmapInfo();
                     info.bitmaps = new Bitmap[] { bmp };
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
diff --git a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
index e58a4c27..1b4ef523 100644
--- a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
@@ -90,10 +90,14 @@ public static Bitmap createVideoThumbnail(String filePath) {
         Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {
+                if (ret.isCancelled()) {
+//                    Log.d("VideoLoader", "Bitmap load cancelled (no longer needed)");
+                    return;
+                }
                 try {
                     Bitmap bmp = createVideoThumbnail(file.getAbsolutePath());
                     if (bmp == null)
-                        throw new Exception("bitmap failed to load");
+                        throw new Exception("video bitmap failed to load");
                     BitmapInfo info = new BitmapInfo();
                     info.bitmaps = new Bitmap[] {bmp};
                     info.loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
