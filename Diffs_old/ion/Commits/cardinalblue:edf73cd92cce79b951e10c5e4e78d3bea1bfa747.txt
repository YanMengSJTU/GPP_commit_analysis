diff --git a/.gitignore b/.gitignore
index 672a70a9..7381bc65 100644
--- a/.gitignore
+++ b/.gitignore
@@ -10,3 +10,4 @@ gradlew
 gradlew.bat
 
 ion.iml
+*.iml
diff --git a/README.md b/README.md
index e1bdaf3c..0432e742 100644
--- a/README.md
+++ b/README.md
@@ -53,7 +53,7 @@ The included documented [ion-sample](https://github.com/koush/ion/tree/master/io
 #### More Examples
 
 Looking for more? Check out the examples below that demonstrate some other common scenarios. You can also take a look
-at 30+ ion unit tests in the [ion-test](https://github.com/koush/ion/tree/master/ion-test/src/com/koushikdutta/ion/test).
+at 30+ ion unit tests in the [ion-test](https://github.com/koush/ion/tree/master/ion/test/src/com/koushikdutta/ion/test).
 
 #### Get JSON
 
@@ -105,7 +105,7 @@ Ion.with(getContext())
 .load("https://koush.clockworkmod.com/test/echo")
 .uploadProgressBar(uploadProgressBar)
 .setMultipartParameter("goop", "noop")
-.setMultipartFile("filename.zip", new File("/sdcard/filename.zip"))
+.setMultipartFile("archive", "application/zip", new File("/sdcard/filename.zip"))
 .asJsonObject()
 .setCallback(...)
 ```
@@ -424,3 +424,5 @@ There's hundreds of apps using ion. Feel free to contact me or submit a pull req
 * [PictureCast](https://play.google.com/store/apps/details?id=com.unstableapps.picturecast.app)
 * [Eventius](https://play.google.com/store/apps/details?id=com.eventius.android)
 * [Plume](https://play.google.com/store/apps/details?id=com.levelup.touiteur)
+* [GameRaven](https://play.google.com/store/apps/details?id=com.ioabsoftware.gameraven)
+* [See You There](https://play.google.com/store/apps/details?id=com.maps.wearat&hl=en)
diff --git a/ion-sample/AndroidManifest.xml b/ion-sample/AndroidManifest.xml
new file mode 100644
index 00000000..8841f69b
--- /dev/null
+++ b/ion-sample/AndroidManifest.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.koushikdutta.ion.sample"
+          android:versionCode="1"
+          android:versionName="1.0">
+
+    <uses-sdk
+            android:minSdkVersion="11"
+            android:targetSdkVersion="17"/>
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+
+    <application
+            android:name=".SampleApplication"
+            android:hardwareAccelerated="true"
+            android:label="@string/app_name"
+            android:icon="@drawable/ic_launcher"
+            android:theme="@style/Theme">
+        <activity
+                android:name=".Twitter"
+                android:label="Twitter Client Sample"/>
+        <activity
+                android:name=".TwitterGson"
+                android:label="Twitter Gson Client Sample"/>
+        <activity
+                android:name=".ProgressBarDownload"
+                android:label="Progress Bar Download"/>
+        <activity
+                android:name=".ProgressBarUpload"
+                android:label="Progress Bar Upload"/>
+        <activity
+                android:name=".GoogleImageSearch"
+                android:label="Google Image Search"/>
+        <activity
+                android:name=".GallerySample"
+                android:label="Gallery Sample"/>
+        <activity
+                android:name=".ImageViewSample"
+                android:label="ImageView Sample"/>
+        <activity
+            android:name=".DeepZoomSample"
+            android:label="DeepZoom Sample"/>
+        <activity
+            android:name=".KenBurnsSample"
+            android:label="KenBurns Sample"/>
+        <activity
+            android:name=".RoundedImageViewSample"
+            android:label="RoundedImageViewSample Sample"/>
+        <activity
+                android:theme="@android:style/Theme.Material.Light"
+                android:name=".LollipopTransition"
+                android:label="Lollipop Transition"/>
+        <activity
+                android:theme="@android:style/Theme.Material.Light"
+                android:name=".LollipopTransitionFullscreen"
+                android:label="Lollipop Transition"/>
+        <activity
+                android:name=".Samples"
+                android:label="ion samples">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+    </application>
+</manifest>
diff --git a/ion-sample/assets/Androidify25.png b/ion-sample/assets/Androidify25.png
new file mode 100644
index 00000000..40943279
Binary files /dev/null and b/ion-sample/assets/Androidify25.png differ
diff --git a/ion-sample/assets/Androidify26.png b/ion-sample/assets/Androidify26.png
new file mode 100644
index 00000000..5b54e178
Binary files /dev/null and b/ion-sample/assets/Androidify26.png differ
diff --git a/ion-sample/assets/Androidify27.png b/ion-sample/assets/Androidify27.png
new file mode 100644
index 00000000..cedd3fbe
Binary files /dev/null and b/ion-sample/assets/Androidify27.png differ
diff --git a/ion-sample/assets/telescope.jpg b/ion-sample/assets/telescope.jpg
new file mode 100644
index 00000000..7bd22bd8
Binary files /dev/null and b/ion-sample/assets/telescope.jpg differ
diff --git a/ion-sample/build.gradle b/ion-sample/build.gradle
new file mode 100644
index 00000000..d50511bd
--- /dev/null
+++ b/ion-sample/build.gradle
@@ -0,0 +1,28 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile 'com.makeramen:roundedimageview:+'
+    compile 'com.github.chrisbanes.photoview:library:+'
+    compile 'com.flaviofaria:kenburnsview:1.0.6'
+    compile project(':ion:ion')
+}
+
+android {
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            res.srcDirs = ['res/']
+            java.srcDirs = ['src/']
+            assets.srcDirs = ['assets/']
+        }
+    }
+
+    defaultConfig {
+        targetSdkVersion 21
+        minSdkVersion 9
+    }
+
+    compileSdkVersion 21
+    buildToolsVersion '21.1.2'
+}
+
diff --git a/ion-sample/res/layout/rounded.xml b/ion-sample/res/layout/rounded.xml
new file mode 100644
index 00000000..df837cbd
--- /dev/null
+++ b/ion-sample/res/layout/rounded.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <LinearLayout
+        android:layout_gravity="center"
+        android:orientation="vertical"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+
+        <com.makeramen.RoundedImageView
+            app:riv_oval="true"
+            android:id="@+id/image0"
+            android:padding="8dp"
+            android:layout_width="128dp"
+            android:layout_height="128dp" />
+        <com.makeramen.RoundedImageView
+            app:riv_oval="true"
+            android:id="@+id/image1"
+            android:padding="8dp"
+            android:layout_width="128dp"
+            android:layout_height="128dp" />
+        <com.makeramen.RoundedImageView
+            app:riv_oval="true"
+            android:id="@+id/image2"
+            android:padding="8dp"
+            android:layout_width="128dp"
+            android:layout_height="128dp" />
+
+    </LinearLayout>
+</FrameLayout>
\ No newline at end of file
diff --git a/ion-sample/res/layout/samples.xml b/ion-sample/res/layout/samples.xml
new file mode 100644
index 00000000..ff3edc85
--- /dev/null
+++ b/ion-sample/res/layout/samples.xml
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal"
+    android:gravity="center"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout
+        android:layout_weight="1"
+        android:orientation="vertical"
+        android:gravity="center"
+        android:layout_width="0dp"
+        android:layout_height="match_parent">
+
+        <Button
+            android:id="@+id/twitter"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Twitter Client Sample" />
+
+        <Button
+            android:id="@+id/twitter_gson"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Twitter Gson Client Sample" />
+
+        <Button
+            android:id="@+id/download"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Progress Bar Download" />
+
+        <Button
+            android:id="@+id/upload"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Progress Bar Upload" />
+
+        <Button
+            android:id="@+id/image_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="ImageView Sample" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_weight="1"
+        android:orientation="vertical"
+        android:gravity="center"
+        android:layout_width="0dp"
+        android:layout_height="match_parent">
+
+        <Button
+            android:id="@+id/google_image_search"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Google Image Search" />
+
+        <Button
+            android:id="@+id/gallery"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Gallery" />
+
+        <Button
+            android:id="@+id/deepzoom"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="DeepZoom" />
+
+        <Button
+            android:id="@+id/kenburns"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="KenBurns" />
+
+        <Button
+            android:id="@+id/rounded"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Rounded Image View" />
+
+        <Button
+            android:id="@+id/lollipop_transition"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Lollipop Transition Sample" />
+
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java b/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java
new file mode 100644
index 00000000..d650592e
--- /dev/null
+++ b/ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java
@@ -0,0 +1,46 @@
+package com.koushikdutta.ion.sample;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.ImageView;
+
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.ion.Ion;
+
+import uk.co.senab.photoview.PhotoView;
+
+/**
+ * Created by koush on 2/1/14.
+ */
+public class DeepZoomSample extends Activity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        PhotoView photoView = new PhotoView(this);
+        photoView.setMaximumScale(16);
+        setContentView(photoView);
+
+        final ProgressDialog dlg = new ProgressDialog(this);
+        dlg.setTitle("Loading...");
+        dlg.setIndeterminate(false);
+        dlg.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        dlg.show();
+
+        // this is going to load a 30mb download...
+        Ion.with(this)
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion-sample/assets/telescope.jpg")
+        .progressDialog(dlg)
+        .setLogging("DeepZoom", Log.VERBOSE)
+        .withBitmap()
+        .deepZoom()
+        .intoImageView(photoView)
+        .setCallback(new FutureCallback<ImageView>() {
+            @Override
+            public void onCompleted(Exception e, ImageView result) {
+                dlg.cancel();
+            }
+        });
+    }
+}
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java b/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
new file mode 100644
index 00000000..ffcd208c
--- /dev/null
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
@@ -0,0 +1,111 @@
+package com.koushikdutta.ion.sample;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.ImageView;
+import android.widget.Spinner;
+
+import com.koushikdutta.ion.Ion;
+
+/**
+ * Created by koush on 6/9/13.
+ */
+public class ImageViewSample extends Activity {
+    public void loadCenterCrop() {
+        Ion.with(imageView)
+        .centerCrop()
+        .load("http://media.salon.com/2013/05/original.jpg");
+    }
+
+    public void loadCenterInside() {
+        Ion.with(imageView)
+        .centerInside()
+        .load("http://media.salon.com/2013/05/original.jpg");
+    }
+
+    public void loadFitCenter() {
+        Ion.with(imageView)
+        .fitCenter()
+        .load("http://media.salon.com/2013/05/original.jpg");
+    }
+
+    public void loadGifCenterCrop() {
+        Ion.with(imageView)
+        .centerCrop()
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion-sample/mark.gif");
+    }
+
+    public void loadGifFitCenter() {
+        Ion.with(imageView)
+        .fitCenter()
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion-sample/mark.gif");
+    }
+
+    public void loadGifResource() {
+        Ion.with(imageView)
+        .fitCenter()
+        .load("android.resource://" + getPackageName() + "/" + R.drawable.borg);
+    }
+
+    public void loadExifRotated() {
+        Ion.with(imageView)
+        .fitCenter()
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion/test/assets/exif.jpg");
+    }
+
+    public void loadTwitterResource() {
+        Ion.with(imageView)
+        .fitCenter()
+        .load("android.resource://" + getPackageName() + "/drawable/twitter");
+    }
+
+    Spinner fitChoices;
+    ImageView imageView;
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.image_view);
+
+        imageView = (ImageView)findViewById(R.id.image);
+        fitChoices = (Spinner)findViewById(R.id.fit_choices);
+
+        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item);
+        adapter.add("centerCrop");
+        adapter.add("fitCenter");
+        adapter.add("centerInside");
+        adapter.add("gif centerCrop");
+        adapter.add("gif fitCenter");
+        adapter.add("gif resource");
+        adapter.add("exif rotated");
+        adapter.add("twitter drawable resource");
+        fitChoices.setAdapter(adapter);
+        fitChoices.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                if (position == 0)
+                    loadCenterCrop();
+                else if (position == 1)
+                    loadFitCenter();
+                else if (position == 2)
+                    loadCenterInside();
+                else if (position == 3)
+                    loadGifCenterCrop();
+                else if (position == 4)
+                    loadGifFitCenter();
+                else if (position == 5)
+                    loadGifResource();
+                else if (position == 6)
+                    loadExifRotated();
+                else if (position == 7)
+                    loadTwitterResource();
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parent) {
+            }
+        });
+    }
+}
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/KenBurnsSample.java b/ion-sample/src/com/koushikdutta/ion/sample/KenBurnsSample.java
new file mode 100644
index 00000000..cf692b3d
--- /dev/null
+++ b/ion-sample/src/com/koushikdutta/ion/sample/KenBurnsSample.java
@@ -0,0 +1,46 @@
+package com.koushikdutta.ion.sample;
+
+import android.app.Activity;
+import android.app.ProgressDialog;
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.ImageView;
+
+import com.flaviofaria.kenburnsview.KenBurnsView;
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.ion.Ion;
+
+import uk.co.senab.photoview.PhotoView;
+
+/**
+ * Created by koush on 2/1/14.
+ */
+public class KenBurnsSample extends Activity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        KenBurnsView view = new KenBurnsView(this);
+        setContentView(view);
+
+        final ProgressDialog dlg = new ProgressDialog(this);
+        dlg.setTitle("Loading...");
+        dlg.setIndeterminate(false);
+        dlg.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+        dlg.show();
+
+        // this is going to load a 30mb download...
+        Ion.with(this)
+        .load("file:///android_asset/telescope.jpg")
+        .progressDialog(dlg)
+        .setLogging("DeepZoom", Log.VERBOSE)
+        .withBitmap()
+        .deepZoom()
+        .intoImageView(view)
+        .setCallback(new FutureCallback<ImageView>() {
+            @Override
+            public void onCompleted(Exception e, ImageView result) {
+                dlg.cancel();
+            }
+        });
+    }
+}
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/RoundedImageViewSample.java b/ion-sample/src/com/koushikdutta/ion/sample/RoundedImageViewSample.java
new file mode 100644
index 00000000..9aa6e8c9
--- /dev/null
+++ b/ion-sample/src/com/koushikdutta/ion/sample/RoundedImageViewSample.java
@@ -0,0 +1,31 @@
+package com.koushikdutta.ion.sample;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.widget.ImageView;
+
+import com.koushikdutta.ion.Ion;
+
+/**
+ * Created by koush on 3/4/15.
+ */
+public class RoundedImageViewSample extends Activity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.rounded);
+
+        // RoundedImageView library:
+        // https://github.com/vinc3m1/RoundedImageView
+
+        Ion.with((ImageView) findViewById(R.id.image0))
+                .load("file:///android_asset/Androidify25.png");
+
+        Ion.with((ImageView) findViewById(R.id.image1))
+                .load("file:///android_asset/Androidify26.png");
+
+        Ion.with((ImageView) findViewById(R.id.image2))
+                .load("file:///android_asset/Androidify27.png");
+
+    }
+}
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/Samples.java b/ion-sample/src/com/koushikdutta/ion/sample/Samples.java
new file mode 100644
index 00000000..214f726d
--- /dev/null
+++ b/ion-sample/src/com/koushikdutta/ion/sample/Samples.java
@@ -0,0 +1,113 @@
+package com.koushikdutta.ion.sample;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+
+/**
+ * Created by koush on 5/31/13.
+ */
+public class Samples extends Activity {
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.samples);
+
+        Button twitter = (Button)findViewById(R.id.twitter);
+        twitter.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, Twitter.class));
+            }
+        });
+
+        Button twitterGson = (Button)findViewById(R.id.twitter_gson);
+        twitterGson.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, TwitterGson.class));
+            }
+        });
+
+        Button fileDownload = (Button)findViewById(R.id.download);
+        fileDownload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, ProgressBarDownload.class));
+            }
+        });
+
+        Button fileUpload = (Button)findViewById(R.id.upload);
+        fileUpload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, ProgressBarUpload.class));
+            }
+        });
+
+        Button googleImageSearch = (Button)findViewById(R.id.google_image_search);
+        googleImageSearch.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, GoogleImageSearch.class));
+            }
+        });
+
+        Button imageViewSample = (Button)findViewById(R.id.image_view);
+        imageViewSample.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, ImageViewSample.class));
+            }
+        });
+
+        Button gallerySample = (Button)findViewById(R.id.gallery);
+        gallerySample.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, GallerySample.class));
+            }
+        });
+
+        Button deepZoomSample = (Button)findViewById(R.id.deepzoom);
+        deepZoomSample.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(Samples.this, DeepZoomSample.class));
+            }
+        });
+
+        findViewById(R.id.kenburns)
+                .setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        startActivity(new Intent(Samples.this, KenBurnsSample.class));
+                    }
+                });
+
+        findViewById(R.id.rounded)
+                .setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        startActivity(new Intent(Samples.this, RoundedImageViewSample.class));
+                    }
+                });
+
+        Button lollipopTransitionSample = (Button)findViewById(R.id.lollipop_transition);
+        if (Build.VERSION.SDK_INT >= 21) {
+            lollipopTransitionSample.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    startActivity(new Intent(Samples.this, LollipopTransition.class));
+                }
+            });
+        }
+        else {
+            lollipopTransitionSample.setVisibility(View.GONE);
+        }
+    }
+}
diff --git a/ion/AndroidManifest.xml b/ion/AndroidManifest.xml
index 0aabe34d..fe605596 100644
--- a/ion/AndroidManifest.xml
+++ b/ion/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.koushikdutta.ion"
-          android:versionCode="207"
-          android:versionName="2.0.7">
+          android:versionCode="217"
+          android:versionName="2.1.7">
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
diff --git a/ion/build.gradle b/ion/build.gradle
index 028c99a9..dc3fed80 100644
--- a/ion/build.gradle
+++ b/ion/build.gradle
@@ -1,27 +1,20 @@
-buildscript {
-    repositories {
-        mavenCentral()
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:1.5.0'
-    }
-}
-
 apply plugin: 'com.android.library'
 
-repositories {
-    mavenCentral()
-}
-
 dependencies {
+    compile 'com.android.support:palette-v7:+'
     compile 'com.android.support:support-v4:+'
-    compile 'com.koushikdutta.async:androidasync:2.0.8'
+    compile 'com.koushikdutta.async:androidasync:2.+'
     compile 'com.google.code.gson:gson:2.3'
 
     // for when i wanna test this against gms conscrypt
-    androidTestCompile 'com.google.android.gms:play-services:+'
+    androidTestCompile 'com.google.android.gms:play-services-base:+'
+    // mockito nom nom oh god im drunk
+    androidTestCompile "org.mockito:mockito-core:1.+"
+    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
+    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
 }
 
+
 android {
     sourceSets {
         main {
@@ -41,12 +34,12 @@ android {
     }
 
     defaultConfig {
-        targetSdkVersion 21
+        targetSdkVersion 23
         minSdkVersion 9
     }
 
-    compileSdkVersion 21
-    buildToolsVersion '21.1.2'
+    compileSdkVersion 23
+    buildToolsVersion '23.0.1'
 }
 
 // upload to maven task
@@ -62,6 +55,7 @@ if (System.getenv().I_AM_KOUSH == 'true') {
                 mavenDeployer {
                     pom*.whenConfigured { pom ->
                         pom.dependencies.removeAll { dep -> dep.artifactId == 'support-v4' }
+                        pom.dependencies.removeAll { dep -> dep.artifactId == 'palette-v7' }
                     }
                 }
             }
diff --git a/ion/ion-ion.iml b/ion/ion-ion.iml
deleted file mode 100644
index 593d7609..00000000
--- a/ion/ion-ion.iml
+++ /dev/null
@@ -1,98 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="Gradle.ion" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":ion:ion" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-        <option name="LIBRARY_PROJECT" value="true" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/test/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/test/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/test/src" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/poms" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" scope="TEST" name="play-services-6.5.87" level="project" />
-    <orderEntry type="library" exported="" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="library" exported="" name="support-v4-21.0.3" level="project" />
-    <orderEntry type="library" exported="" name="gson-2.3" level="project" />
-    <orderEntry type="module" module-name="AndroidAsync-AndroidAsync" exported="" />
-  </component>
-</module>
-
diff --git a/ion/ion.iml b/ion/ion.iml
new file mode 100644
index 00000000..32913298
--- /dev/null
+++ b/ion/ion.iml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
+
diff --git a/ion/src/com/koushikdutta/ion/BitmapCallback.java b/ion/src/com/koushikdutta/ion/BitmapCallback.java
index 3388c51f..6fe69100 100644
--- a/ion/src/com/koushikdutta/ion/BitmapCallback.java
+++ b/ion/src/com/koushikdutta/ion/BitmapCallback.java
@@ -16,8 +16,8 @@
 import java.util.concurrent.CancellationException;
 
 abstract class BitmapCallback {
-    String key;
-    Ion ion;
+    final String key;
+    final Ion ion;
 
     public static void saveBitmapSnapshot(Ion ion, BitmapInfo info) {
         if (info.bitmap == null)
@@ -59,7 +59,7 @@ public void run() {
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
                     BitmapInfo info = new BitmapInfo(transformKey, "image/jpeg", bitmap, null);
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom =  ResponseServedFrom.LOADED_FROM_CACHE;
 
                     if (postProcess != null) {
                         for (PostProcess p: postProcess) {
@@ -91,7 +91,7 @@ protected BitmapCallback(Ion ion, String key, boolean put) {
         ion.bitmapsPending.tag(key, this);
     }
 
-    boolean put;
+    final boolean put;
 
     boolean put() {
         return put;
diff --git a/ion/src/com/koushikdutta/ion/BitmapDrawableFactory.java b/ion/src/com/koushikdutta/ion/BitmapDrawableFactory.java
new file mode 100644
index 00000000..d34ccc50
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/BitmapDrawableFactory.java
@@ -0,0 +1,19 @@
+package com.koushikdutta.ion;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+
+/**
+ * Created by koush on 4/25/15.
+ */
+public interface BitmapDrawableFactory {
+    public BitmapDrawableFactory DEFAULT = new BitmapDrawableFactory() {
+        @Override
+        public Drawable fromBitmap(Resources resources, Bitmap bitmap) {
+            return new BitmapDrawable(resources, bitmap);
+        }
+    };
+    Drawable fromBitmap(Resources resources, Bitmap bitmap);
+}
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index 57dfd9af..e9839225 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -45,8 +45,8 @@ private boolean fastLoad(String uri) {
                 return false;
             MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
             if (type == null || !MediaFile.isVideoFileType(type.fileType)) {
-                LoadDeepZoom loadDeepZoom = new LoadDeepZoom(ion, decodeKey, animateGif, null, null);
-                loadDeepZoom.onCompleted(null, file);
+                LoadDeepZoom loadDeepZoom = new LoadDeepZoom(ion, decodeKey, animateGif, null);
+                loadDeepZoom.onCompleted(null, new Response<File>(null, ResponseServedFrom.LOADED_FROM_CACHE, null, null, file));
 //                System.out.println("fastloading deepZoom");
                 return true;
             }
@@ -131,7 +131,7 @@ public void execute() {
             builder.loadRequestCallback = this;
 
             if (!deepZoom) {
-                IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform = builder.execute(new ByteBufferListParser(), new Runnable() {
+                Future<Response<ByteBufferList>> emitterTransform = builder.execute(new ByteBufferListParser(), new Runnable() {
                     @Override
                     public void run() {
                         AsyncServer.post(Ion.mainHandler, new Runnable() {
@@ -141,19 +141,15 @@ public void run() {
                             }
                         });
                     }
-                });
-                emitterTransform.setCallback(new LoadBitmap(ion, decodeKey, !hasTransforms, sampleWidth, sampleHeight, animateGif, emitterTransform));
+                })
+                .withResponse();
+                emitterTransform.setCallback(new LoadBitmap(ion, decodeKey, !hasTransforms, sampleWidth, sampleHeight, animateGif));
             }
             else {
 //                System.out.println("downloading file for deepZoom");
                 File file = fileCache.getTempFile();
-                IonRequestBuilder.EmitterTransform<File> emitterTransform = builder.write(file);
-                LoadDeepZoom loadDeepZoom = new LoadDeepZoom(ion, decodeKey, animateGif, emitterTransform, fileCache) {
-                    @Override
-                    public void onCompleted(Exception e, File file) {
-                        super.onCompleted(e, file);
-                    }
-                };
+                Future<Response<File>> emitterTransform = builder.write(file).withResponse();
+                LoadDeepZoom loadDeepZoom = new LoadDeepZoom(ion, decodeKey, animateGif, fileCache);
                 emitterTransform.setCallback(loadDeepZoom);
             }
         }
diff --git a/ion/src/com/koushikdutta/ion/DataEmitterParser.java b/ion/src/com/koushikdutta/ion/DataEmitterParser.java
new file mode 100644
index 00000000..8f9951ae
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/DataEmitterParser.java
@@ -0,0 +1,33 @@
+package com.koushikdutta.ion;
+
+import com.koushikdutta.async.DataEmitter;
+import com.koushikdutta.async.DataSink;
+import com.koushikdutta.async.Util;
+import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.SimpleFuture;
+import com.koushikdutta.async.parser.AsyncParser;
+
+import java.lang.reflect.Type;
+
+/**
+ * Created by koush on 5/27/15.
+ */
+class DataEmitterParser implements AsyncParser<DataEmitter> {
+    @Override
+    public Future<DataEmitter> parse(DataEmitter emitter) {
+        SimpleFuture<DataEmitter> ret = new SimpleFuture<DataEmitter>();
+        ret.setComplete(emitter);
+        return ret;
+    }
+
+    @Override
+    public void write(DataSink sink, DataEmitter value, CompletedCallback completed) {
+        Util.pump(value, sink, completed);
+    }
+
+    @Override
+    public Type getType() {
+        return DataEmitter.class;
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java b/ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java
index 87e442b0..1bf29ae8 100644
--- a/ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java
+++ b/ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java
@@ -56,14 +56,13 @@ protected void transform(IonDrawable result) throws Exception {
         }
 
         // retrigger the intrinsic dimension check on the drawable
-        imageView.setImageDrawable(null);
-        imageView.setImageDrawable(result);
         BitmapInfo info = result.getBitmapInfo();
         if (info != null && info.exception == null) {
             applyScaleMode(imageView, scaleMode);
         }
         IonBitmapRequestBuilder.doAnimation(imageView, inAnimation, inAnimationResource);
-
+        imageView.setImageDrawable(null);
+        imageView.setImageDrawable(result);
         setComplete(imageView);
     }
 
diff --git a/ion/src/com/koushikdutta/ion/InputStreamParser.java b/ion/src/com/koushikdutta/ion/InputStreamParser.java
index bfd06219..c326821b 100644
--- a/ion/src/com/koushikdutta/ion/InputStreamParser.java
+++ b/ion/src/com/koushikdutta/ion/InputStreamParser.java
@@ -11,6 +11,7 @@
 import com.koushikdutta.async.stream.ByteBufferListInputStream;
 
 import java.io.InputStream;
+import java.lang.reflect.Type;
 
 /**
  * Created by koush on 11/3/13.
@@ -31,4 +32,9 @@ protected void transform(ByteBufferList result) throws Exception {
     public void write(DataSink sink, InputStream value, CompletedCallback completed) {
         throw new AssertionError("not implemented");
     }
+
+    @Override
+    public Type getType() {
+        return InputStream.class;
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 0df73bc2..77cb67fc 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -1,16 +1,16 @@
 package com.koushikdutta.ion;
 
 import android.content.res.Resources;
+import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.ColorFilter;
-import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
 import android.graphics.Rect;
-import android.graphics.RectF;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
+import android.graphics.drawable.LayerDrawable;
 import android.os.Looper;
 import android.os.SystemClock;
 import android.text.TextUtils;
@@ -27,7 +27,12 @@
 /**
  * Created by koush on 6/8/13.
  */
-class IonDrawable extends Drawable {
+class IonDrawable extends LayerDrawable {
+    private static final double LOG_2 = Math.log(2);
+    private static final int TILE_DIM = 256;
+    private static final long FADE_DURATION = 200;
+    private static final int DEFAULT_PAINT_FLAGS = Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG;
+
     private Paint paint;
     private BitmapInfo info;
     private int placeholderResource;
@@ -35,7 +40,7 @@
     private int errorResource;
     private Drawable error;
     private Resources resources;
-    private int loadedFrom;
+    private ResponseServedFrom servedFrom;
     private boolean fadeIn;
     private int resizeWidth;
     private int resizeHeight;
@@ -45,6 +50,14 @@
     private IonDrawableCallback callback;
     private FutureCallback<IonDrawable> loadCallback;
     private IonGifDecoder gifDecoder;
+    private Drawable bitmapDrawable;
+    private int textureDim;
+    private int maxLevel;
+    private BitmapDrawableFactory bitmapDrawableFactory;
+
+    private final Drawable NULL_PLACEHOLDER;
+    private final Drawable NULL_BITMAPINFO;
+    private final Drawable NULL_ERROR;
 
     public FutureCallback<IonDrawable> getLoadCallback() {
         return loadCallback;
@@ -151,7 +164,9 @@ public void onCompleted(Exception e, BitmapInfo result) {
             IonDrawable drawable = ionDrawableRef.get();
             if (drawable == null)
                 return;
-            drawable.setBitmap(result, result.loadedFrom);
+            drawable
+            .setBitmap(result, result.servedFrom)
+            .updateLayers();
             FutureCallback<IonDrawable> callback = drawable.loadCallback;
             if (callback != null)
                 callback.onCompleted(e, drawable);
@@ -161,8 +176,11 @@ public void onCompleted(Exception e, BitmapInfo result) {
     class IonGifDecoder {
         GifDecoder gifDecoder;
         Exception exception;
+        GifFrame currentFrame;
+        long nextFrameRender;
         public IonGifDecoder(BitmapInfo info){
             gifDecoder = info.gifDecoder.mutate();
+            currentFrame = gifDecoder.getLastFrame();
         }
 
         Runnable loader = new Runnable() {
@@ -171,6 +189,9 @@ public void run() {
                 try {
                     gifDecoder.nextFrame();
                 }
+                catch (OutOfMemoryError e) {
+                    exception = new Exception(e);
+                }
                 catch (Exception e) {
                     exception = e;
                 }
@@ -182,17 +203,52 @@ public void run() {
             @Override
             public void run() {
                 isLoading = false;
-                if (!invalidateScheduled)
-                    invalidateSelf();
+                invalidateSelf();
             }
         };
 
+        long getDelay() {
+            // error case?
+            if (currentFrame == null)
+                return 1000 / 10;
+            long delay = currentFrame.delay;
+            if (delay == 0)
+                delay = 1000 / 10;
+            return delay;
+        }
+
+        public GifFrame getCurrentFrame() {
+            long now = System.currentTimeMillis();
+            if (nextFrameRender == 0) {
+                nextFrameRender = now + getDelay();
+                scheduleNextFrame();
+            }
+
+            if (now >= nextFrameRender) {
+                // see if a frame is available
+                if (gifDecoder.getLastFrame() != currentFrame) {
+                    // we have a frame waiting, grab it i guess.
+                    currentFrame = gifDecoder.getLastFrame();
+                    // check if we need to drop frames, or maintain timing
+                    if (now > nextFrameRender + getDelay())
+                        nextFrameRender = now + getDelay();
+                    else
+                        nextFrameRender += getDelay();
+                }
+                scheduleNextFrame();
+            }
+
+            return currentFrame;
+        }
+
         boolean isLoading;
         public synchronized void scheduleNextFrame() {
             if (isLoading)
                 return;
             if (exception != null)
                 return;
+            if (gifDecoder.getStatus() == GifDecoder.STATUS_FINISH && repeatAnimation)
+                gifDecoder.restart();
             isLoading = true;
             Ion.getBitmapLoadExecutorService().execute(loader);
         }
@@ -210,32 +266,79 @@ public IonDrawable setBitmapFetcher(BitmapFetcher bitmapFetcher) {
         return this;
     }
 
+    public IonDrawable setBitmapDrawableFactory(BitmapDrawableFactory factory) {
+        this.bitmapDrawableFactory = factory;
+        return this;
+    }
+
     public void cancel() {
         callback.register(null, null);
         bitmapFetcher = null;
     }
 
-    private static final int DEFAULT_PAINT_FLAGS = Paint.FILTER_BITMAP_FLAG | Paint.DITHER_FLAG;
-
     public IonDrawable(Resources resources) {
+        super(new Drawable[] { new BitmapDrawable((Bitmap)null), new BitmapDrawable((Bitmap)null), new BitmapDrawable((Bitmap)null) });
+
+        setId(0, 0);
+        setId(1, 1);
+        setId(2, 2);
+
+        NULL_PLACEHOLDER = getDrawable(0);
+        NULL_BITMAPINFO = getDrawable(1);
+        NULL_ERROR = getDrawable(2);
+
         this.resources = resources;
         paint = new Paint(DEFAULT_PAINT_FLAGS);
         callback = new IonDrawableCallback(this);
     }
 
-    private boolean invalidateScheduled;
-    private int textureDim;
-    private int maxLevel;
-    public IonDrawable setBitmap(BitmapInfo info, int loadedFrom) {
+    public IonDrawable updateLayers() {
+        // always set up the placeholder, it will disappear automagically
+        tryGetPlaceholderResource();
+        if (placeholder == null)
+            setDrawableByLayerId(0, NULL_PLACEHOLDER);
+        else
+            setDrawableByLayerId(0, placeholder);
+
+        if (info == null) {
+            setDrawableByLayerId(1, NULL_BITMAPINFO);
+            setDrawableByLayerId(2, NULL_ERROR);
+            return this;
+        }
+
+        // error case
+        if (info.bitmap == null && info.decoder == null && info.gifDecoder == null) {
+            setDrawableByLayerId(1, NULL_BITMAPINFO);
+            tryGetErrorResource();
+            if (error == null)
+                setDrawableByLayerId(2, NULL_ERROR);
+            else
+                setDrawableByLayerId(2, error);
+            return this;
+        }
+
+        if (info.decoder == null && info.gifDecoder == null) {
+            // normal bitmap
+            tryGetBitmapResource();
+            setDrawableByLayerId(1, bitmapDrawable);
+        }
+        else {
+            // gif or deepzoom
+            setDrawableByLayerId(1, NULL_BITMAPINFO);
+        }
+        setDrawableByLayerId(2, NULL_ERROR);
+        return this;
+    }
+
+    public IonDrawable setBitmap(BitmapInfo info, ResponseServedFrom servedFrom) {
         if (this.info == info)
             return this;
 
         cancel();
-        this.loadedFrom = loadedFrom;
+        this.servedFrom = servedFrom;
         this.info = info;
         gifDecoder = null;
-        invalidateScheduled = false;
-        unscheduleSelf(invalidate);
+        bitmapDrawable = null;
         invalidateSelf();
         if (info == null)
             return this;
@@ -282,10 +385,7 @@ public IonDrawable setError(int resource, Drawable drawable) {
             return this;
 
         errorResource = resource;
-        if (error != null)
-            error.setCallback(null);
         error = drawable;
-        invalidateSelf();
         return this;
     }
 
@@ -294,63 +394,50 @@ public IonDrawable setPlaceholder(int resource, Drawable drawable) {
             return this;
 
         placeholderResource = resource;
-        if (placeholder != null)
-            placeholder.setCallback(null);
         placeholder = drawable;
-        invalidateSelf();
-
         return this;
     }
 
-    @Override
-    public void setFilterBitmap(boolean filter) {
-        paint.setFilterBitmap(filter);
-        invalidateSelf();
-    }
-
-    @Override
-    public void setDither(boolean dither) {
-        paint.setDither(dither);
-        invalidateSelf();
-    }
-
-    Callback drawableCallback = new Callback() {
-        @Override
-        public void invalidateDrawable(Drawable who) {
-            IonDrawable.this.invalidateSelf();
-        }
-
-        @Override
-        public void scheduleDrawable(Drawable who, Runnable what, long when) {
-            IonDrawable.this.scheduleSelf(what, when);
-        }
-
-        @Override
-        public void unscheduleDrawable(Drawable who, Runnable what) {
-            IonDrawable.this.unscheduleSelf(what);
-        }
-    };
-
     private Drawable tryGetErrorResource() {
         if (error != null)
             return error;
         if (errorResource == 0)
             return null;
         error = resources.getDrawable(errorResource);
-        error.setCallback(drawableCallback);
         return error;
     }
 
+    private Drawable tryGetBitmapResource() {
+        if (bitmapDrawable != null)
+            return bitmapDrawable;
+        if (info == null)
+            return null;
+        if (info.gifDecoder != null)
+            return null;
+        if (info.decoder != null)
+            return null;
+        if (info.bitmap == null)
+            return null;
+        bitmapDrawable = bitmapDrawableFactory.fromBitmap(resources, info.bitmap);
+        return bitmapDrawable;
+    }
+
     private Drawable tryGetPlaceholderResource() {
         if (placeholder != null)
             return placeholder;
         if (placeholderResource == 0)
             return null;
         placeholder = resources.getDrawable(placeholderResource);
-        placeholder.setCallback(drawableCallback);
         return placeholder;
     }
 
+    private FutureCallback<BitmapInfo> tileCallback = new FutureCallback<BitmapInfo>() {
+        @Override
+        public void onCompleted(Exception e, BitmapInfo result) {
+            invalidateSelf();
+        }
+    };
+
     @Override
     public int getIntrinsicWidth() {
         // first check if image was loaded
@@ -402,80 +489,11 @@ public int getIntrinsicHeight() {
         return -1;
     }
 
-    public static final long FADE_DURATION = 200;
-    private Runnable invalidate = new Runnable() {
-        @Override
-        public void run() {
-            invalidateScheduled = false;
-            invalidateSelf();
-        }
-    };
-
-    private static final double LOG_2 = Math.log(2);
-    private static final int TILE_DIM = 256;
-
-    private FutureCallback<BitmapInfo> tileCallback = new FutureCallback<BitmapInfo>() {
-        @Override
-        public void onCompleted(Exception e, BitmapInfo result) {
-            invalidateSelf();
-        }
-    };
-
-    private void drawDrawable(Canvas canvas, Drawable d) {
-        if (d == null)
-            return;
-
-        if (false) {
-            // this centers inside and draws the drawable
-            d.setBounds(0 , 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());
-            int count = canvas.save();
-            Matrix matrix = new Matrix();
-            matrix.setRectToRect(new RectF(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight()),
-            new RectF(canvas.getClipBounds()), Matrix.ScaleToFit.CENTER);
-            canvas.concat(matrix);
-
-            float scale = (float)canvas.getClipBounds().width() / canvas.getWidth();
-            canvas.scale(scale, scale, d.getIntrinsicWidth() / 2, d.getIntrinsicHeight() / 2);
-
-            d.draw(canvas);
-            canvas.restoreToCount(count);
-            return;
-        }
-        else if (false) {
-            // this centers fits and draws the drawable
-            int iw = d.getIntrinsicWidth();
-            int ih = d.getIntrinsicHeight();
-
-            Rect b = copyBounds();
-            int w = b.width();
-            int h = b.height();
-            if (iw >= 0) {
-                int wp = (w - iw) / 2;
-                b.left += wp;
-                b.right = b.left + iw;
-            }
-            if (ih >= 0) {
-                int hp = (h - ih) / 2;
-                b.top += hp;
-                b.bottom = b.top + ih;
-            }
-            d.setBounds(b);
-        }
-        else {
-            // fitxy the drwable
-            d.setBounds(getBounds());
-        }
-
-        d.draw(canvas);
-    }
-
     @Override
     public void draw(Canvas canvas) {
-        // TODO: handle animated drawables
-        // check if we have a bitmap, otherwise do the placeholder and bail
         if (info == null) {
-            // first things first, draw a placeholder
-            drawDrawable(canvas, tryGetPlaceholderResource());
+            // draw stuff
+            super.draw(canvas);
 
             // see if we can fetch a bitmap
             if (bitmapFetcher != null) {
@@ -489,9 +507,10 @@ public void draw(Canvas canvas) {
                     bitmapFetcher.recomputeDecodeKey();
                     BitmapInfo found = ion.bitmapCache.get(bitmapFetcher.bitmapKey);
                     if (found != null) {
+                        // won't be needing THIS anymore
+                        bitmapFetcher = null;
                         // found what we're looking for, but can't draw at this very moment,
                         // since we need to trigger a new measure.
-                        drawDrawable(canvas, tryGetPlaceholderResource());
                         callback.onCompleted(null, found);
                         return;
                     }
@@ -504,8 +523,7 @@ public void draw(Canvas canvas) {
                 // already in progress
                 if (BitmapFetcher.shouldDeferImageView(ion)) {
                     bitmapFetcher.defer();
-                }
-                else {
+                } else {
                     bitmapFetcher.execute();
                 }
                 // won't be needing THIS anymore
@@ -516,255 +534,250 @@ public void draw(Canvas canvas) {
             return;
         }
 
+        if (info.decoder != null) {
+            drawDeepZoom(canvas);
+            return;
+        }
+
         if (info.drawTime == 0)
             info.drawTime = SystemClock.uptimeMillis();
 
         long destAlpha = 0xFF;
 
-        if(fadeIn) {
+        if (fadeIn) {
             destAlpha = ((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
             destAlpha = Math.min(destAlpha, 0xFF);
         }
 
-        if (destAlpha != 255) {
-            Drawable placeholder = tryGetPlaceholderResource();
+        // remove plaeholder if not visible
+        if (destAlpha == 255) {
             if (placeholder != null) {
-                drawDrawable(canvas, placeholder);
+                placeholder = null;
+                setDrawableByLayerId(0, NULL_PLACEHOLDER);
             }
+        } else {
+            // invalidate to fade in
+            if (placeholder != null)
+                invalidateSelf();
         }
 
-        if (info.decoder != null) {
-            // zoom 0: entire image fits in a TILE_DIMxTILE_DIM square
-
-            // draw base bitmap for empty tiles
-            // figure out zoom level
-            // figure out which tiles need rendering
-            // draw stuff that needs drawing
-            // missing tile? fetch it
-            // use parent level tiles for tiles that do not exist
-
-            // TODO: crossfading?
-
-            Rect clip = canvas.getClipBounds();
-            Rect bounds = getBounds();
-
-            float zoom = (float)canvas.getWidth() / (float)clip.width();
-
-            float zoomWidth = zoom * bounds.width();
-            float zoomHeight = zoom * bounds.height();
-
-            double wlevel = Math.log(zoomWidth / TILE_DIM) / LOG_2;
-            double hlevel = Math.log(zoomHeight/ TILE_DIM) / LOG_2;
-            double maxLevel = Math.max(wlevel, hlevel);
-
-            int visibleLeft = Math.max(0, clip.left);
-            int visibleRight = Math.min(bounds.width(), clip.right);
-            int visibleTop = Math.max(0, clip.top);
-            int visibleBottom = Math.min(bounds.height(), clip.bottom);
-            int level = (int)Math.floor(maxLevel);
-            level = Math.min(this.maxLevel, level);
-            level = Math.max(level, 0);
-            int levelTiles = 1 << level;
-            int textureTileDim = textureDim / levelTiles;
+        if (info.gifDecoder != null) {
+            super.draw(canvas);
+
+            GifFrame frame = gifDecoder.getCurrentFrame();
+            if (frame != null) {
+                paint.setAlpha((int) destAlpha);
+                canvas.drawBitmap(frame.image, null, getBounds(), paint);
+                paint.setAlpha(0xFF);
+                invalidateSelf();
+            }
+            return;
+        }
+
+        if (info.bitmap != null) {
+            if (bitmapDrawable != null)
+                bitmapDrawable.setAlpha((int)destAlpha);
+        } else {
+            if (error != null)
+                error.setAlpha((int)destAlpha);
+        }
+
+        super.draw(canvas);
+
+        if (true)
+            return;
+
+        // stolen from picasso
+        canvas.save();
+        canvas.rotate(45);
+
+        paint.setColor(Color.WHITE);
+        canvas.drawRect(0, -10, 7.5f, 10, paint);
+
+        int sourceColor;
+        if (servedFrom == ResponseServedFrom.LOADED_FROM_CACHE)
+            sourceColor = Color.CYAN;
+        else if (servedFrom == ResponseServedFrom.LOADED_FROM_CONDITIONAL_CACHE)
+            sourceColor = Color.YELLOW;
+        else if (servedFrom == ResponseServedFrom.LOADED_FROM_MEMORY)
+            sourceColor = Color.GREEN;
+        else
+            sourceColor = Color.RED;
+
+        paint.setColor(sourceColor);
+        canvas.drawRect(0, -9, 6.5f, 9, paint);
+
+        canvas.restore();
+    }
+
+    private void drawDeepZoom(Canvas canvas) {
+        // zoom 0: entire image fits in a TILE_DIMxTILE_DIM square
+
+        // draw base bitmap for empty tiles
+        // figure out zoom level
+        // figure out which tiles need rendering
+        // draw stuff that needs drawing
+        // missing tile? fetch it
+        // use parent level tiles for tiles that do not exist
+
+        // TODO: crossfading?
+
+        Rect clip = canvas.getClipBounds();
+        Rect bounds = getBounds();
+
+        float zoom = (float)canvas.getWidth() / (float)clip.width();
+
+        float zoomWidth = zoom * bounds.width();
+        float zoomHeight = zoom * bounds.height();
+
+        double wlevel = Math.log(zoomWidth / TILE_DIM) / LOG_2;
+        double hlevel = Math.log(zoomHeight/ TILE_DIM) / LOG_2;
+        double maxLevel = Math.max(wlevel, hlevel);
+
+        int visibleLeft = Math.max(0, clip.left);
+        int visibleRight = Math.min(bounds.width(), clip.right);
+        int visibleTop = Math.max(0, clip.top);
+        int visibleBottom = Math.min(bounds.height(), clip.bottom);
+        int level = (int)Math.floor(maxLevel);
+        level = Math.min(this.maxLevel, level);
+        level = Math.max(level, 0);
+        int levelTiles = 1 << level;
+        int textureTileDim = textureDim / levelTiles;
 //            System.out.println("textureTileDim: " + textureTileDim);
 
 //            System.out.println(info.key + " visible: " + new Rect(visibleLeft, visibleTop, visibleRight, visibleBottom));
 
-            final boolean DEBUG_ZOOM = false;
-            if (info.bitmap != null) {
-                canvas.drawBitmap(info.bitmap, null, getBounds(), paint);
-                if (DEBUG_ZOOM) {
-                    paint.setColor(Color.RED);
-                    paint.setAlpha(0x80);
-                    canvas.drawRect(getBounds(), paint);
-                    paint.setAlpha(0xFF);
-                }
-            }
-            else {
-                paint.setColor(Color.BLACK);
+        final boolean DEBUG_ZOOM = false;
+        if (info.bitmap != null) {
+            canvas.drawBitmap(info.bitmap, null, getBounds(), paint);
+            if (DEBUG_ZOOM) {
+                paint.setColor(Color.RED);
+                paint.setAlpha(0x80);
                 canvas.drawRect(getBounds(), paint);
+                paint.setAlpha(0xFF);
             }
+        }
+        else {
+            paint.setColor(Color.BLACK);
+            canvas.drawRect(getBounds(), paint);
+        }
 
-            int sampleSize = 1;
-            while (textureTileDim / sampleSize > TILE_DIM)
-                sampleSize <<= 1;
-
-            for (int y = 0; y < levelTiles; y++) {
-                int top = textureTileDim * y;
-                int bottom = textureTileDim * (y + 1);
-                bottom = Math.min(bottom, bounds.bottom);
+        int sampleSize = 1;
+        while (textureTileDim / sampleSize > TILE_DIM)
+            sampleSize <<= 1;
+
+        for (int y = 0; y < levelTiles; y++) {
+            int top = textureTileDim * y;
+            int bottom = textureTileDim * (y + 1);
+            bottom = Math.min(bottom, bounds.bottom);
+            // TODO: start at visible pos
+            if (bottom < visibleTop)
+                continue;
+            if (top > visibleBottom)
+                break;
+            for (int x = 0; x < levelTiles; x++) {
+                int left = textureTileDim * x;
+                int right = textureTileDim * (x + 1);
+                right = Math.min(right, bounds.right);
                 // TODO: start at visible pos
-                if (bottom < visibleTop)
+                if (right < visibleLeft)
                     continue;
-                if (top > visibleBottom)
+                if (left > visibleRight)
                     break;
-                for (int x = 0; x < levelTiles; x++) {
-                    int left = textureTileDim * x;
-                    int right = textureTileDim * (x + 1);
-                    right = Math.min(right, bounds.right);
-                    // TODO: start at visible pos
-                    if (right < visibleLeft)
-                        continue;
-                    if (left > visibleRight)
-                        break;
 
-                    Rect texRect = new Rect(left, top, right, bottom);
+                Rect texRect = new Rect(left, top, right, bottom);
 
-                    // find, render/fetch
+                // find, render/fetch
 //                    System.out.println("rendering: " + texRect + " for: " + bounds);
-                    String tileKey = FileCache.toKeyString(info.key, ",", level, ",", x, ",", y);
-                    BitmapInfo tile = ion.bitmapCache.get(tileKey);
-                    if (tile != null && tile.bitmap != null) {
-                        // render it
+                String tileKey = FileCache.toKeyString(info.key, ",", level, ",", x, ",", y);
+                BitmapInfo tile = ion.bitmapCache.get(tileKey);
+                if (tile != null && tile.bitmap != null) {
+                    // render it
 //                        System.out.println("bitmap is: " + tile.bitmaps[0].getWidth() + "x" + tile.bitmaps[0].getHeight());
-                        canvas.drawBitmap(tile.bitmap, null, texRect, paint);
-                        continue;
-                    }
+                    canvas.drawBitmap(tile.bitmap, null, texRect, paint);
+                    continue;
+                }
 
-                    // TODO: cancellation of unnecessary regions when fast pan/zooming
-                    if (ion.bitmapsPending.tag(tileKey) == null) {
-                        // fetch it
+                // TODO: cancellation of unnecessary regions when fast pan/zooming
+                if (ion.bitmapsPending.tag(tileKey) == null) {
+                    // fetch it
 //                        System.out.println(info.key + ": fetching region: " + texRect + " sample size: " + sampleSize);
-                        LoadBitmapRegion region = new LoadBitmapRegion(ion, tileKey, info.decoder, texRect, sampleSize);
+                    LoadBitmapRegion region = new LoadBitmapRegion(ion, tileKey, info.decoder, texRect, sampleSize);
+                }
+                ion.bitmapsPending.add(tileKey, tileCallback);
+
+                int parentLeft = 0;
+                int parentTop = 0;
+                int parentUp = 1;
+                int parentLevel = level - parentUp;
+                if (x % 2 == 1)
+                    parentLeft++;
+                if (y % 2 == 1)
+                    parentTop++;
+                int parentX = x >> 1;
+                int parentY = y >> 1;
+
+                while (parentLevel >= 0) {
+                    tileKey = FileCache.toKeyString(info.key, ",", parentLevel, ",", parentX, ",", parentY);
+                    tile = ion.bitmapCache.get(tileKey);
+                    if (tile != null && tile.bitmap != null)
+                        break;
+                    if (parentX % 2 == 1) {
+                        parentLeft += 1 << parentUp;
                     }
-                    ion.bitmapsPending.add(tileKey, tileCallback);
-
-                    int parentLeft = 0;
-                    int parentTop = 0;
-                    int parentUp = 1;
-                    int parentLevel = level - parentUp;
-                    if (x % 2 == 1)
-                        parentLeft++;
-                    if (y % 2 == 1)
-                        parentTop++;
-                    int parentX = x >> 1;
-                    int parentY = y >> 1;
-
-                    while (parentLevel >= 0) {
-                        tileKey = FileCache.toKeyString(info.key, ",", parentLevel, ",", parentX, ",", parentY);
-                        tile = ion.bitmapCache.get(tileKey);
-                        if (tile != null && tile.bitmap != null)
-                            break;
-                        if (parentX % 2 == 1) {
-                            parentLeft += 1 << parentUp;
-                        }
-                        if (parentY % 2 == 1) {
-                            parentTop += 1 << parentUp;
-                        }
-                        parentLevel--;
-                        parentUp++;
-                        parentX >>= 1;
-                        parentY >>= 1;
+                    if (parentY % 2 == 1) {
+                        parentTop += 1 << parentUp;
                     }
+                    parentLevel--;
+                    parentUp++;
+                    parentX >>= 1;
+                    parentY >>= 1;
+                }
 
-                    // well, i give up
-                    if (tile == null || tile.bitmap == null)
-                        continue;
+                // well, i give up
+                if (tile == null || tile.bitmap == null)
+                    continue;
 
 
-                    int subLevelTiles = 1 << parentLevel;
-                    int subtileDim = textureDim / subLevelTiles;
-                    int subSampleSize = 1;
-                    while (subtileDim / subSampleSize > TILE_DIM)
-                        subSampleSize <<= 1;
-                    int subTextureDim = subtileDim / subSampleSize;
+                int subLevelTiles = 1 << parentLevel;
+                int subtileDim = textureDim / subLevelTiles;
+                int subSampleSize = 1;
+                while (subtileDim / subSampleSize > TILE_DIM)
+                    subSampleSize <<= 1;
+                int subTextureDim = subtileDim / subSampleSize;
 //                    System.out.println(String.format("falling back for %s,%s,%s to %s,%s,%s: %s,%s (%s to %s)", x, y, level, parentX, parentY, parentLevel, parentLeft, parentTop, subTextureDim, subTextureDim >> parentUp));
-                    subTextureDim >>= parentUp;
-                    int sourceLeft = subTextureDim * parentLeft;
-                    int sourceTop = subTextureDim * parentTop;
-                    Rect sourceRect = new Rect(sourceLeft, sourceTop, sourceLeft + subTextureDim, sourceTop + subTextureDim);
-                    canvas.drawBitmap(tile.bitmap, sourceRect, texRect, paint);
-
-                    if (DEBUG_ZOOM) {
-                        paint.setColor(Color.RED);
-                        paint.setAlpha(0x80);
-                        canvas.drawRect(texRect, paint);
-                        paint.setAlpha(0xFF);
-                    }
-                }
-            }
-        }
-        else if (info.gifDecoder != null) {
-            GifFrame lastFrame = gifDecoder.gifDecoder.getLastFrame();
-            if (lastFrame != null) {
-                paint.setAlpha((int)destAlpha);
-                canvas.drawBitmap(lastFrame.image, null, getBounds(), paint);
-                paint.setAlpha(0xFF);
+                subTextureDim >>= parentUp;
+                int sourceLeft = subTextureDim * parentLeft;
+                int sourceTop = subTextureDim * parentTop;
+                Rect sourceRect = new Rect(sourceLeft, sourceTop, sourceLeft + subTextureDim, sourceTop + subTextureDim);
+                canvas.drawBitmap(tile.bitmap, sourceRect, texRect, paint);
 
-                long delay = lastFrame.delay;
-                if (!invalidateScheduled) {
-                    invalidateScheduled = true;
-                    unscheduleSelf(invalidate);
-                    scheduleSelf(invalidate, SystemClock.uptimeMillis() + Math.max(delay, 16));
+                if (DEBUG_ZOOM) {
+                    paint.setColor(Color.RED);
+                    paint.setAlpha(0x80);
+                    canvas.drawRect(texRect, paint);
+                    paint.setAlpha(0xFF);
                 }
             }
-            if (gifDecoder.gifDecoder.getStatus() == GifDecoder.STATUS_FINISH && repeatAnimation)
-                gifDecoder.gifDecoder.restart();
-            gifDecoder.scheduleNextFrame();
-        }
-        else if (info.bitmap != null) {
-            paint.setAlpha((int)destAlpha);
-            canvas.drawBitmap(info.bitmap, null, getBounds(), paint);
-            paint.setAlpha(0xFF);
         }
-        else {
-            Drawable error = tryGetErrorResource();
-            if (error != null) {
-                error.setAlpha((int)destAlpha);
-                drawDrawable(canvas, error);
-                error.setAlpha(0xFF);
-            }
-        }
-
-        if (destAlpha != 255)
-            invalidateSelf();
-
-        if (true)
-            return;
-
-        // stolen from picasso
-        canvas.save();
-        canvas.rotate(45);
-
-        paint.setColor(Color.WHITE);
-        canvas.drawRect(0, -10, 7.5f, 10, paint);
-
-        int sourceColor;
-        switch (loadedFrom) {
-            case Loader.LoaderEmitter.LOADED_FROM_CACHE:
-                sourceColor = Color.CYAN;
-                break;
-            case Loader.LoaderEmitter.LOADED_FROM_CONDITIONAL_CACHE:
-                sourceColor = Color.YELLOW;
-                break;
-            case Loader.LoaderEmitter.LOADED_FROM_MEMORY:
-                sourceColor = Color.GREEN;
-                break;
-            default:
-                sourceColor = Color.RED;
-                break;
-        }
-
-        paint.setColor(sourceColor);
-        canvas.drawRect(0, -9, 6.5f, 9, paint);
-
-        canvas.restore();
     }
 
     @Override
     public void setAlpha(int alpha) {
-       paint.setAlpha(alpha);
+        super.setAlpha(alpha);
+        paint.setAlpha(alpha);
     }
 
     @Override
     public void setColorFilter(ColorFilter cf) {
+        super.setColorFilter(cf);
         paint.setColorFilter(cf);
     }
 
     @Override
     public int getOpacity() {
         return (info == null || info.bitmap == null || info.bitmap.hasAlpha() || paint.getAlpha() < 255) ?
-                PixelFormat.TRANSLUCENT : PixelFormat.OPAQUE;
+                PixelFormat.TRANSLUCENT : super.getOpacity();
     }
 
     static IonDrawable getOrCreateIonDrawable(ImageView imageView) {
@@ -777,8 +790,6 @@ static IonDrawable getOrCreateIonDrawable(ImageView imageView) {
         // invalidate self doesn't seem to trigger the dimension check to be called by imageview.
         // are drawable dimensions supposed to be immutable?
         imageView.setImageDrawable(null);
-        ret.unscheduleSelf(ret.invalidate);
-        ret.invalidateScheduled = false;
         return ret;
     }
 }
\ No newline at end of file
diff --git a/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
index 8255dfe9..1721d42e 100644
--- a/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
@@ -31,6 +31,7 @@
     ContextReference.ImageViewContextReference imageViewPostRef;
     boolean fadeIn = true;
     boolean crossfade;
+    BitmapDrawableFactory bitmapDrawableFactory = BitmapDrawableFactory.DEFAULT;
 
     public IonImageViewRequestBuilder(IonRequestBuilder builder) {
         super(builder);
@@ -47,6 +48,7 @@ void reset() {
         crossfade = false;
         imageViewPostRef = null;
         placeholderDrawable = null;
+        bitmapDrawableFactory = BitmapDrawableFactory.DEFAULT;
         placeholderResource = 0;
         errorDrawable = null;
         errorResource = 0;
@@ -83,7 +85,7 @@ IonImageViewRequestBuilder withImageView(ImageView imageView) {
         return this;
     }
 
-    private IonDrawable setIonDrawable(ImageView imageView, BitmapFetcher bitmapFetcher, int loadedFrom) {
+    private IonDrawable setIonDrawable(ImageView imageView, BitmapFetcher bitmapFetcher, ResponseServedFrom servedFrom) {
         BitmapInfo info = null;
         if (bitmapFetcher != null)
             info = bitmapFetcher.info;
@@ -92,13 +94,15 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapFetcher bitmapFetc
 
         IonDrawable ret = IonDrawable.getOrCreateIonDrawable(imageView)
         .ion(ion)
-        .setBitmap(info, loadedFrom)
+        .setBitmap(info, servedFrom)
         .setBitmapFetcher(bitmapFetcher)
         .setRepeatAnimation(animateGifMode == AnimateGifMode.ANIMATE)
         .setSize(resizeWidth, resizeHeight)
         .setError(errorResource, errorDrawable)
         .setPlaceholder(placeholderResource, placeholderDrawable)
-        .setFadeIn(fadeIn || crossfade);
+        .setFadeIn(fadeIn || crossfade)
+        .setBitmapDrawableFactory(bitmapDrawableFactory)
+        .updateLayers();
         imageView.setImageDrawable(ret);
         return ret;
     }
@@ -126,7 +130,7 @@ public ImageViewFuture intoImageView(ImageView imageView) {
 
         // no uri? just set a placeholder and bail
         if (builder.uri == null) {
-            setIonDrawable(imageView, null, 0).cancel();
+            setIonDrawable(imageView, null, ResponseServedFrom.LOADED_FROM_NETWORK).cancel();
             return ImageViewFutureImpl.FUTURE_IMAGEVIEW_NULL_URI;
         }
 
@@ -162,7 +166,7 @@ public ImageViewFuture intoImageView(ImageView imageView) {
         BitmapFetcher bitmapFetcher = executeCache(sampleWidth, sampleHeight);
         if (bitmapFetcher.info != null) {
             doAnimation(imageView, null, 0);
-            IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
+            IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher, ResponseServedFrom.LOADED_FROM_MEMORY);
             drawable.cancel();
             ImageViewFutureImpl imageViewFuture = ImageViewFutureImpl.getOrCreateImageViewFuture(imageViewPostRef, drawable)
             .setInAnimation(inAnimation, inAnimationResource)
@@ -173,7 +177,7 @@ public ImageViewFuture intoImageView(ImageView imageView) {
             return imageViewFuture;
         }
 
-        IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher, 0);
+        IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher, ResponseServedFrom.LOADED_FROM_NETWORK);
         doAnimation(imageView, loadAnimation, loadAnimationResource);
         ImageViewFutureImpl imageViewFuture = ImageViewFutureImpl.getOrCreateImageViewFuture(imageViewPostRef, drawable)
         .setInAnimation(inAnimation, inAnimationResource)
@@ -271,4 +275,10 @@ public IonImageViewRequestBuilder animateIn(int animationResource) {
         inAnimationResource = animationResource;
         return this;
     }
+
+    @Override
+    public IonImageViewRequestBuilder bitmapDrawableFactory(BitmapDrawableFactory bitmapDrawableFactory) {
+        this.bitmapDrawableFactory = bitmapDrawableFactory;
+        return this;
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index c966f133..20dbe82e 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -32,6 +32,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.Headers;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.NameValuePair;
 import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.body.DocumentBody;
 import com.koushikdutta.async.http.body.FileBody;
@@ -62,7 +63,6 @@
 import com.koushikdutta.ion.gson.GsonSerializer;
 import com.koushikdutta.ion.gson.PojoBody;
 
-import org.apache.http.NameValuePair;
 import org.w3c.dom.Document;
 
 import java.io.ByteArrayInputStream;
@@ -70,6 +70,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.lang.ref.WeakReference;
+import java.lang.reflect.Type;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
@@ -277,10 +278,10 @@ private Uri prepareURI() {
         return uri;
     }
 
-    private AsyncHttpRequest prepareRequest(Uri uri, AsyncHttpRequestBody wrappedBody) {
+    private AsyncHttpRequest prepareRequest(Uri uri) {
         AsyncHttpRequest request = ion.configure().getAsyncHttpRequestFactory().createAsyncHttpRequest(uri, method, headers);
         request.setFollowRedirect(followRedirect);
-        request.setBody(wrappedBody);
+        request.setBody(body);
         request.setLogging(ion.logtag, ion.logLevel);
         if (logTag != null)
             request.setLogging(logTag, logLevel);
@@ -303,11 +304,17 @@ private AsyncHttpRequest prepareRequest(Uri uri, AsyncHttpRequestBody wrappedBod
             return;
         }
 
-        AsyncHttpRequestBody wrappedBody = body;
-        if (uploadProgressHandler != null || uploadProgressBar != null || uploadProgress != null || uploadProgressDialog != null) {
-            wrappedBody = new RequestBodyUploadObserver(body, new ProgressCallback() {
-                @Override
-                public void onProgress(final long downloaded, final long total) {
+        AsyncHttpRequest request = prepareRequest(uri);
+        ret.initialRequest = request;
+
+        getLoaderEmitter(ret, request);
+    }
+
+    private <T> void getLoaderEmitter(final EmitterTransform<T> ret, AsyncHttpRequest request) {
+        if (body != null && (uploadProgressHandler != null || uploadProgressBar != null || uploadProgress != null || uploadProgressDialog != null)) {
+            AsyncHttpRequestBody wrappedBody = new RequestBodyUploadObserver(body, new ProgressCallback() {
+                    @Override
+                    public void onProgress(final long downloaded, final long total) {
                     assert Thread.currentThread() != Looper.getMainLooper().getThread();
 
                     final int percent = (int)((float)downloaded / total * 100f);
@@ -333,10 +340,10 @@ public void run() {
                     }
                 }
             });
+
+            request.setBody(wrappedBody);
         }
 
-        AsyncHttpRequest request = prepareRequest(uri, wrappedBody);
-        ret.initialRequest = request;
         resolveAndLoadRequest(request, ret);
     }
 
@@ -402,18 +409,13 @@ public void run() {
     class EmitterTransform<T> extends TransformFuture<T, LoaderEmitter> implements ResponseFuture<T> {
         AsyncHttpRequest initialRequest;
         AsyncHttpRequest finalRequest;
-        int loadedFrom;
+        ResponseServedFrom servedFrom;
         Runnable cancelCallback;
         HeadersResponse headers;
         DataEmitter emitter;
 
         public Response<T> getResponse(Exception e, T result) {
-            Response<T> response = new Response<T>();
-            response.headers = headers;
-            response.request = finalRequest;
-            response.result = result;
-            response.exception = e;
-            return response;
+            return new Response<T>(finalRequest, servedFrom, headers, e, result);
         }
 
         @Override
@@ -433,10 +435,6 @@ public void onCompleted(Exception e, T result) {
             return ret;
         }
 
-        public int loadedFrom() {
-            return loadedFrom;
-        }
-
         public EmitterTransform(Runnable cancelCallback) {
             this.cancelCallback = cancelCallback;
             ion.addFutureInFlight(this, contextReference.getContext());
@@ -467,7 +465,7 @@ protected void error(Exception e) {
         @Override
         protected void transform(LoaderEmitter emitter) throws Exception {
             this.emitter = emitter.getDataEmitter();
-            this.loadedFrom = emitter.loadedFrom();
+            this.servedFrom = emitter.getServedFrom();
             this.headers = emitter.getHeaders();
             this.finalRequest = emitter.getRequest();
 
@@ -604,12 +602,26 @@ public void onCompleted(Exception ex) {
         return ret;
     }
 
-    <T> EmitterTransform<T> execute(final AsyncParser<T> parser) {
+    <T> ResponseFuture<T> execute(final AsyncParser<T> parser) {
         return execute(parser, null);
     }
 
-    <T> EmitterTransform<T> execute(final AsyncParser<T> parser, Runnable cancel) {
+    <T> ResponseFuture<T> execute(final AsyncParser<T> parser, Runnable cancel) {
         assert parser != null;
+
+        final Uri uri = prepareURI();
+        AsyncHttpRequest request = null;
+
+        if (uri != null) {
+            request = prepareRequest(uri);
+            Type type = parser.getType();
+            for (Loader loader: ion.loaders) {
+                ResponseFuture<T> quickLoad = loader.load(ion, request, type);
+                if (quickLoad != null)
+                    return quickLoad;
+            }
+        }
+
         EmitterTransform<T> ret = new EmitterTransform<T>(cancel) {
             EmitterTransform<T> self = this;
             @Override
@@ -623,23 +635,15 @@ public void onCompleted(Exception e, T result) {
                 });
             }
         };
-        getLoaderEmitter(ret);
-        return ret;
-    }
 
-    Future<InputStream> execute() {
-        Uri uri = prepareURI();
-        if (uri == null)
-            return null;
-
-        AsyncHttpRequest request = prepareRequest(uri, null);
-
-        for (Loader loader: ion.loaders) {
-            Future<InputStream> ret = loader.load(ion, request);
-            if (ret != null)
-                return ret;
+        if (uri == null) {
+            ret.setComplete(new Exception("Invalid URI"));
+            return ret;
         }
-        return null;
+
+        ret.initialRequest = request;
+        getLoaderEmitter(ret);
+        return ret;
     }
 
     @Override
@@ -690,6 +694,11 @@ protected void transform(ByteBufferList result) throws Exception {
             public void write(DataSink sink, byte[] value, CompletedCallback completed) {
                 new ByteBufferListParser().write(sink, new ByteBufferList(value), completed);
             }
+
+            @Override
+            public Type getType() {
+                return byte[].class;
+            }
         });
     }
 
@@ -698,6 +707,11 @@ public void write(DataSink sink, byte[] value, CompletedCallback completed) {
         return execute(new InputStreamParser());
     }
 
+    @Override
+    public ResponseFuture<DataEmitter> asDataEmitter() {
+        return execute(new DataEmitterParser());
+    }
+
     @Override
     public <T> ResponseFuture<T> as(AsyncParser<T> parser) {
         return execute(parser);
diff --git a/ion/src/com/koushikdutta/ion/LoadBitmap.java b/ion/src/com/koushikdutta/ion/LoadBitmap.java
index 5f16b52a..c72aab79 100644
--- a/ion/src/com/koushikdutta/ion/LoadBitmap.java
+++ b/ion/src/com/koushikdutta/ion/LoadBitmap.java
@@ -14,24 +14,25 @@
 
 import java.nio.ByteBuffer;
 
-class LoadBitmap extends LoadBitmapEmitter implements FutureCallback<ByteBufferList> {
+class LoadBitmap extends LoadBitmapEmitter implements FutureCallback<Response<ByteBufferList>> {
     int resizeWidth;
     int resizeHeight;
 
-    public LoadBitmap(Ion ion, String urlKey, boolean put, int resizeWidth, int resizeHeight, boolean animateGif, IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform) {
-        super(ion, urlKey, put, animateGif, emitterTransform);
+    public LoadBitmap(Ion ion, String urlKey, boolean put, int resizeWidth, int resizeHeight, boolean animateGif) {
+        super(ion, urlKey, put, animateGif);
         this.resizeWidth = resizeWidth;
         this.resizeHeight = resizeHeight;
-        this.animateGif = animateGif;
-        this.emitterTransform = emitterTransform;
     }
 
     @Override
-    public void onCompleted(Exception e, final ByteBufferList result) {
+    public void onCompleted(Exception e, final Response<ByteBufferList> response) {
+        if (e == null)
+            e = response.getException();
         if (e != null) {
             report(e, null);
             return;
         }
+        final ByteBufferList result = response.getResult();
 
         if (ion.bitmapsPending.tag(key) != this) {
             result.recycle();
@@ -71,10 +72,7 @@ public void run() {
 
                     BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     info.gifDecoder = gifDecoder;
-                    if (emitterTransform != null)
-                        info.loadedFrom = emitterTransform.loadedFrom();
-                    else
-                        info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = response.getServedFrom();
 
                     report(null, info);
                 }
diff --git a/ion/src/com/koushikdutta/ion/LoadBitmapEmitter.java b/ion/src/com/koushikdutta/ion/LoadBitmapEmitter.java
index 6f1888d9..35c43539 100644
--- a/ion/src/com/koushikdutta/ion/LoadBitmapEmitter.java
+++ b/ion/src/com/koushikdutta/ion/LoadBitmapEmitter.java
@@ -1,12 +1,10 @@
 package com.koushikdutta.ion;
 
 class LoadBitmapEmitter extends LoadBitmapBase {
-    IonRequestBuilder.EmitterTransform emitterTransform;
-    boolean animateGif;
+    final boolean animateGif;
 
-    public LoadBitmapEmitter(Ion ion, String urlKey, boolean put, boolean animateGif, IonRequestBuilder.EmitterTransform emitterTransform) {
+    public LoadBitmapEmitter(Ion ion, String urlKey, boolean put, boolean animateGif) {
         super(ion, urlKey, put);
         this.animateGif = animateGif;
-        this.emitterTransform = emitterTransform;
     }
 }
\ No newline at end of file
diff --git a/ion/src/com/koushikdutta/ion/LoadDeepZoom.java b/ion/src/com/koushikdutta/ion/LoadDeepZoom.java
index d0fc8449..0d252b71 100644
--- a/ion/src/com/koushikdutta/ion/LoadDeepZoom.java
+++ b/ion/src/com/koushikdutta/ion/LoadDeepZoom.java
@@ -24,20 +24,25 @@
  * Created by koush on 1/5/14.
  */
 @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
-public class LoadDeepZoom extends LoadBitmapEmitter implements FutureCallback<File> {
+public class LoadDeepZoom extends LoadBitmapEmitter implements FutureCallback<Response<File>> {
     FileCache fileCache;
-    public LoadDeepZoom(Ion ion, String urlKey, boolean animateGif, IonRequestBuilder.EmitterTransform<File> emitterTransform, FileCache fileCache) {
-        super(ion, urlKey, true, animateGif, emitterTransform);
+    public LoadDeepZoom(Ion ion, String urlKey, boolean animateGif, FileCache fileCache) {
+        super(ion, urlKey, true, animateGif);
         this.fileCache = fileCache;
     }
 
     @Override
-    public void onCompleted(Exception e, final File tempFile) {
+    public void onCompleted(Exception e, final Response<File> response) {
+        if (e == null)
+            e = response.getException();
+
         if (e != null) {
             report(e, null);
             return;
         }
 
+        final File tempFile = response.getResult();
+
         if (ion.bitmapsPending.tag(key) != this) {
 //            Log.d("IonBitmapLoader", "Bitmap load cancelled (no longer needed)");
             return;
@@ -79,7 +84,7 @@ public void run() {
                     BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     info.decoder = decoder;
                     info.decoderFile = file;
-                    info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_NETWORK;
+                    info.servedFrom = response.getServedFrom();
                     report(null, info);
                 } catch (Exception e) {
                     report(e, null);
diff --git a/ion/src/com/koushikdutta/ion/Loader.java b/ion/src/com/koushikdutta/ion/Loader.java
index b2cad7f5..3a932434 100644
--- a/ion/src/com/koushikdutta/ion/Loader.java
+++ b/ion/src/com/koushikdutta/ion/Loader.java
@@ -6,27 +6,23 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
-import com.koushikdutta.async.http.Headers;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.future.ResponseFuture;
 
 import java.io.InputStream;
+import java.lang.reflect.Type;
 
 /**
  * Created by koush on 5/22/13.
  */
 public interface Loader {
     public static class LoaderEmitter {
-        public static final int LOADED_FROM_MEMORY = 0;
-        public static final int LOADED_FROM_CACHE = 1;
-        public static final int LOADED_FROM_CONDITIONAL_CACHE = 2;
-        public static final int LOADED_FROM_NETWORK = 3;
-
-        public LoaderEmitter(DataEmitter emitter, long length, int loadedFrom,
+        public LoaderEmitter(DataEmitter emitter, long length, ResponseServedFrom servedFrom,
                              HeadersResponse headers,
                              AsyncHttpRequest request) {
             this.length = length;
             this.emitter = emitter;
-            this.loadedFrom = loadedFrom;
+            this.servedFrom = servedFrom;
             this.headers = headers;
             this.request = request;
         }
@@ -38,9 +34,9 @@ public DataEmitter getDataEmitter() {
         public long length() {
             return length;
         }
-        int loadedFrom;
-        public int loadedFrom() {
-            return loadedFrom;
+        ResponseServedFrom servedFrom;
+        public ResponseServedFrom getServedFrom() {
+            return servedFrom;
         }
         HeadersResponse headers;
         public HeadersResponse getHeaders() {
@@ -52,16 +48,6 @@ public AsyncHttpRequest getRequest() {
         }
     }
 
-    /**
-     * returns a Future if this loader can handle a request as a stream.
-     * this implies that the stream is essentially non blocking...
-     * ie file or memory based.
-     * @param ion
-     * @param request
-     * @return
-     */
-    public Future<InputStream> load(Ion ion, AsyncHttpRequest request);
-
     /**
      * returns a Future if this loader can handle a request
      * otherwise it returns null, and Ion continues to the next loader.
@@ -91,4 +77,6 @@ public AsyncHttpRequest getRequest() {
      * @return
      */
     public Future<AsyncHttpRequest> resolve(Context context, Ion ion, AsyncHttpRequest request);
+
+    public <T> ResponseFuture<T> load(Ion ion, AsyncHttpRequest request, Type type);
 }
diff --git a/ion/src/com/koushikdutta/ion/Response.java b/ion/src/com/koushikdutta/ion/Response.java
index 064f3fe8..1cf792e1 100644
--- a/ion/src/com/koushikdutta/ion/Response.java
+++ b/ion/src/com/koushikdutta/ion/Response.java
@@ -6,22 +6,35 @@
  * Created by koush on 7/6/13.
  */
 public class Response<T> {
-    AsyncHttpRequest request;
+    public Response(AsyncHttpRequest request, ResponseServedFrom servedFrom, HeadersResponse headers, Exception e, T result) {
+        this.request = request;
+        this.servedFrom = servedFrom;
+        this.headers = headers;
+        this.exception = e;
+        this.result = result;
+    }
+
+    private ResponseServedFrom servedFrom;
+    public ResponseServedFrom getServedFrom() {
+        return servedFrom;
+    }
+
+    private AsyncHttpRequest request;
     public AsyncHttpRequest getRequest() {
         return request;
     }
 
-    T result;
+    private T result;
     public T getResult() {
         return result;
     }
 
-    Exception exception;
+    private Exception exception;
     public Exception getException() {
         return exception;
     }
 
-    HeadersResponse headers;
+    private HeadersResponse headers;
     public HeadersResponse getHeaders() {
         return headers;
     }
diff --git a/ion/src/com/koushikdutta/ion/ResponseServedFrom.java b/ion/src/com/koushikdutta/ion/ResponseServedFrom.java
new file mode 100644
index 00000000..643d3709
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/ResponseServedFrom.java
@@ -0,0 +1,11 @@
+package com.koushikdutta.ion;
+
+/**
+ * Created by koush on 3/7/15.
+ */
+public enum ResponseServedFrom {
+    LOADED_FROM_MEMORY,
+    LOADED_FROM_CACHE,
+    LOADED_FROM_CONDITIONAL_CACHE,
+    LOADED_FROM_NETWORK,
+}
diff --git a/ion/src/com/koushikdutta/ion/TransformBitmap.java b/ion/src/com/koushikdutta/ion/TransformBitmap.java
index 0067225d..994d062f 100644
--- a/ion/src/com/koushikdutta/ion/TransformBitmap.java
+++ b/ion/src/com/koushikdutta/ion/TransformBitmap.java
@@ -67,7 +67,7 @@ public void run() {
                             throw new Exception("failed to transform bitmap");
                     }
                     info = new BitmapInfo(key, result.mimeType, bitmap, result.originalSize);
-                    info.loadedFrom = result.loadedFrom;
+                    info.servedFrom = result.servedFrom;
 
                     if (postProcess != null) {
                         for (PostProcess p: postProcess) {
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index 355a4643..da851dd7 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -5,6 +5,7 @@
 import android.graphics.Point;
 
 import com.koushikdutta.async.util.UntypedHashtable;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.gif.GifDecoder;
 
 import java.io.File;
@@ -25,7 +26,7 @@ public BitmapInfo(String key, String mimeType, Bitmap bitmap, Point originalSize
     public long loadTime = System.currentTimeMillis();
     public long drawTime;
     final public String key;
-    public int loadedFrom;
+    public ResponseServedFrom servedFrom;
     final public Bitmap bitmap;
     public Exception exception;
     public GifDecoder gifDecoder;
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index cc1be60d..5a79d874 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -137,7 +137,7 @@ private Point computeTarget(int minx, int miny) {
         if (o.outWidth < 0 || o.outHeight < 0)
             throw new BitmapDecodeException(o.outWidth, o.outHeight);
         Point target = computeTarget(minx, miny);
-        int scale = Math.max(o.outWidth / target.x, o.outHeight / target.y);
+        int scale = Math.round(Math.max((float)o.outWidth / target.x, (float)o.outHeight / target.y));
         BitmapFactory.Options ret = new BitmapFactory.Options();
         ret.inSampleSize = scale;
         ret.outWidth = o.outWidth;
diff --git a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
index e58059db..908403e9 100644
--- a/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.builder;
 
+import com.koushikdutta.async.DataEmitter;
 import com.koushikdutta.async.parser.AsyncParser;
 import com.koushikdutta.ion.future.ResponseFuture;
 
@@ -35,6 +36,12 @@
      */
     public ResponseFuture<InputStream> asInputStream();
 
+    /**
+     * Execute the request and get the result as a DataEmitter.
+     * @return
+     */
+    public ResponseFuture<DataEmitter> asDataEmitter();
+
     /**
      * Execute the request and get the result as an XML Document
      * @return
diff --git a/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java b/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java
index b922c8a1..5c5d0fe5 100644
--- a/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/ImageViewBuilder.java
@@ -3,6 +3,8 @@
 import android.graphics.drawable.Drawable;
 import android.view.animation.Animation;
 
+import com.koushikdutta.ion.BitmapDrawableFactory;
+
 /**
 * Created by koush on 5/30/13.
 */
@@ -98,4 +100,12 @@
      * @return
      */
     public I crossfade(boolean crossfade);
+
+    /**
+     * Provide an Drawable factory to control how the loaded Bitmap is drawn.
+     * Handy for RoundedDrawables, etc.
+     * @param bitmapDrawableFactory
+     * @return
+     */
+    public I bitmapDrawableFactory(BitmapDrawableFactory bitmapDrawableFactory);
 }
diff --git a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
index 4e959c86..45e79f97 100644
--- a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
@@ -31,6 +31,7 @@
      * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
      * provided in the load call, the default HTTP method, POST, is used.
      * @param name Multipart name
+     *    Name part of Content-Disposition header.
      * @param file Multipart file to send
      * @return
      */
@@ -40,7 +41,9 @@
      * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
      * provided in the load call, the default HTTP method, POST, is used.
      * @param name Multipart name
-     * @param file Multipart Content-Type
+     *    Name part of Content-Disposition header.
+     * @param file Multipart file's content type
+     *    MIME type of file.
      * @param file Multipart file to send
      * @return
      */
diff --git a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
index 1eb5373a..d4ad2e51 100644
--- a/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
@@ -7,10 +7,10 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.reflect.TypeToken;
+import com.koushikdutta.async.http.NameValuePair;
 import com.koushikdutta.ion.HeadersCallback;
 import com.koushikdutta.ion.ProgressCallback;
 
-import org.apache.http.NameValuePair;
 import org.w3c.dom.Document;
 
 import java.io.File;
diff --git a/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java b/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
index a8fa1331..799e48e0 100644
--- a/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
+++ b/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion.conscrypt;
 
 import android.content.Context;
+import android.util.Log;
 
 import com.koushikdutta.async.AsyncSSLSocketWrapper;
 import com.koushikdutta.async.future.Cancellable;
@@ -10,6 +11,7 @@
 import java.lang.reflect.Method;
 import java.security.Provider;
 import java.security.Security;
+import java.security.Signature;
 
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
@@ -25,6 +27,8 @@
     boolean instanceInitialized;
     boolean enabled = true;
 
+    private static final String LOGTAG = "IonConscrypt";
+
     public void enable(boolean enabled) {
         this.enabled = enabled;
         if (!enabled) {
@@ -73,6 +77,7 @@ public static void initialize(Context context) {
             }
         }
         catch (Exception e) {
+            Log.w(LOGTAG, "Conscrypt initialization failed.");
         }
     }
 
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonParser.java b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
index 81c7f1ab..aa14af9e 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonParser.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
@@ -14,9 +14,9 @@
 import com.koushikdutta.async.parser.ByteBufferListParser;
 import com.koushikdutta.async.parser.StringParser;
 import com.koushikdutta.async.stream.ByteBufferListInputStream;
-import com.koushikdutta.async.util.Charsets;
 
 import java.io.InputStreamReader;
+import java.lang.reflect.Type;
 import java.nio.charset.Charset;
 
 /**
@@ -64,4 +64,9 @@ else if (charset != null)
     public void write(DataSink sink, T value, CompletedCallback completed) {
         new StringParser().write(sink, value.toString(), completed);
     }
+
+    @Override
+    public Type getType() {
+        return clazz;
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
index 805aa3ac..d181c583 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
@@ -59,4 +59,9 @@ public void write(DataSink sink, T pojo, CompletedCallback completed) {
         }
         Util.writeAll(sink, bout.toByteArray(), completed);
     }
+
+    @Override
+    public Type getType() {
+        return type;
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/loader/AssetLoader.java b/ion/src/com/koushikdutta/ion/loader/AssetLoader.java
index 53efaf3d..82307ac0 100644
--- a/ion/src/com/koushikdutta/ion/loader/AssetLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/AssetLoader.java
@@ -9,6 +9,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.stream.InputStreamDataEmitter;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.io.InputStream;
@@ -32,7 +33,7 @@ protected InputStream getInputStream(Context context, String uri) throws Excepti
 
     @Override
     public Future<DataEmitter> load(final Ion ion, final AsyncHttpRequest request, final FutureCallback<LoaderEmitter> callback) {
-        if (!request.getUri().getScheme().startsWith("file://android_asset/"))
+        if (!request.getUri().toString().startsWith("file:///android_asset/"))
             return null;
 
         final InputStreamDataEmitterFuture ret = new InputStreamDataEmitterFuture();
@@ -40,13 +41,13 @@ protected InputStream getInputStream(Context context, String uri) throws Excepti
             @Override
             public void run() {
                 try {
-                    InputStream stream = ion.getContext().getContentResolver().openInputStream(Uri.parse(request.getUri().toString()));
+                    InputStream stream = getInputStream(ion.getContext(), request.getUri().toString());
                     if (stream == null)
                         throw new Exception("Unable to load content stream");
                     int available = stream.available();
                     InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getHttpClient().getServer(), stream);
                     ret.setComplete(emitter);
-                    callback.onCompleted(null, new LoaderEmitter(emitter, available, LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                    callback.onCompleted(null, new LoaderEmitter(emitter, available, ResponseServedFrom.LOADED_FROM_CACHE, null, null));
                 }
                 catch (Exception e) {
                     ret.setComplete(e);
diff --git a/ion/src/com/koushikdutta/ion/loader/ContentLoader.java b/ion/src/com/koushikdutta/ion/loader/ContentLoader.java
index a48f1573..d83043d8 100644
--- a/ion/src/com/koushikdutta/ion/loader/ContentLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/ContentLoader.java
@@ -9,6 +9,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.stream.InputStreamDataEmitter;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.io.InputStream;
@@ -47,7 +48,7 @@ public void run() {
                     InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getHttpClient().getServer(), stream);
                     ret.setComplete(emitter);
                     callback.onCompleted(null,
-                        new LoaderEmitter(emitter, available, LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                        new LoaderEmitter(emitter, available, ResponseServedFrom.LOADED_FROM_CACHE, null, null));
                 }
                 catch (Exception e) {
                     ret.setComplete(e);
diff --git a/ion/src/com/koushikdutta/ion/loader/FileLoader.java b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
index 3d34f512..9eebac39 100644
--- a/ion/src/com/koushikdutta/ion/loader/FileLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
@@ -14,7 +14,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
-import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
 
@@ -66,7 +66,7 @@ public void run() {
                             throw new Exception("Bitmap failed to load");
                         info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     }
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {
@@ -81,25 +81,6 @@ public void run() {
         return ret;
     }
 
-    @Override
-    public Future<InputStream> load(final Ion ion, final AsyncHttpRequest request) {
-        if (!request.getUri().getScheme().startsWith("file"))
-            return null;
-        final SimpleFuture<InputStream> ret = new SimpleFuture<InputStream>();
-        Ion.getIoExecutorService().execute(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    InputStream stream = new FileInputStream(new File(URI.create(request.getUri().toString())));
-                    ret.setComplete(stream);
-                } catch (Exception e) {
-                    ret.setComplete(e);
-                }
-            }
-        });
-        return ret;
-    }
-
     @Override
     public Future<DataEmitter> load(final Ion ion, final AsyncHttpRequest request, final FutureCallback<LoaderEmitter> callback) {
         if (!request.getUri().getScheme().startsWith("file"))
@@ -111,7 +92,7 @@ public void run() {
                 File file = new File(URI.create(request.getUri().toString()));
                 FileDataEmitter emitter = new FileDataEmitter(ion.getHttpClient().getServer(), file);
                 ret.setComplete(emitter);
-                callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), LoaderEmitter.LOADED_FROM_CACHE, null, request));
+                callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), ResponseServedFrom.LOADED_FROM_CACHE, null, request));
             }
         });
         return ret;
diff --git a/ion/src/com/koushikdutta/ion/loader/HttpLoader.java b/ion/src/com/koushikdutta/ion/loader/HttpLoader.java
index d2710372..1840ec05 100644
--- a/ion/src/com/koushikdutta/ion/loader/HttpLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/HttpLoader.java
@@ -12,6 +12,7 @@
 import com.koushikdutta.async.http.callback.HttpConnectCallback;
 import com.koushikdutta.ion.HeadersResponse;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 
 /**
  * Created by koush on 5/22/13.
@@ -26,7 +27,7 @@
             @Override
             public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                 long length = -1;
-                int loadedFrom = LoaderEmitter.LOADED_FROM_NETWORK;
+                ResponseServedFrom loadedFrom = ResponseServedFrom.LOADED_FROM_NETWORK;
                 HeadersResponse headers = null;
                 AsyncHttpRequest request = null;
                 if (response != null) {
@@ -35,9 +36,9 @@ public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                     length = HttpUtil.contentLength(headers.getHeaders());
                     String servedFrom = response.headers().get(ResponseCacheMiddleware.SERVED_FROM);
                     if (TextUtils.equals(servedFrom, ResponseCacheMiddleware.CACHE))
-                        loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
+                        loadedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     else if (TextUtils.equals(servedFrom, ResponseCacheMiddleware.CONDITIONAL_CACHE))
-                        loadedFrom = LoaderEmitter.LOADED_FROM_CONDITIONAL_CACHE;
+                        loadedFrom = ResponseServedFrom.LOADED_FROM_CONDITIONAL_CACHE;
                 }
                 callback.onCompleted(ex,
                     new LoaderEmitter(response, length, loadedFrom, headers, request));
diff --git a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
index d5e07c4e..408eb642 100644
--- a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
@@ -10,7 +10,7 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.ion.Ion;
-import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.net.URI;
@@ -36,7 +36,7 @@ public void run() {
                     if (bmp == null)
                         throw new Exception("package icon failed to load");
                     BitmapInfo info = new BitmapInfo(key, null, bmp, new Point(bmp.getWidth(), bmp.getHeight()));
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (Exception e) {
diff --git a/ion/src/com/koushikdutta/ion/loader/ResourceLoader.java b/ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
index a6d93c3c..cb02ddb3 100644
--- a/ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
@@ -17,6 +17,7 @@
 import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
 
@@ -88,7 +89,7 @@ public void run() {
                             throw new Exception("Bitmap failed to load");
                         info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     }
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {
@@ -120,7 +121,7 @@ public void run() {
                     int available = stream.available();
                     InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getHttpClient().getServer(), stream);
                     ret.setComplete(emitter);
-                    callback.onCompleted(null, new LoaderEmitter(emitter, available, LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                    callback.onCompleted(null, new LoaderEmitter(emitter, available, ResponseServedFrom.LOADED_FROM_CACHE, null, null));
                 }
                 catch (Exception e) {
                     ret.setComplete(e);
diff --git a/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java b/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
index 8d285a1b..a5298fba 100644
--- a/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
@@ -9,30 +9,32 @@
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.future.ResponseFuture;
 
 import java.io.InputStream;
+import java.lang.reflect.Type;
 
 /**
  * Created by koush on 12/22/13.
  */
 public class SimpleLoader implements Loader {
     @Override
-    public Future<InputStream> load(Ion ion, AsyncHttpRequest request) {
+    public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, FutureCallback<LoaderEmitter> callback) {
         return null;
     }
 
     @Override
-    public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, FutureCallback<LoaderEmitter> callback) {
+    public Future<BitmapInfo> loadBitmap(Context context, Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         return null;
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Context context, Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
+    public Future<AsyncHttpRequest> resolve(Context context, Ion ion, AsyncHttpRequest request) {
         return null;
     }
 
     @Override
-    public Future<AsyncHttpRequest> resolve(Context context, Ion ion, AsyncHttpRequest request) {
+    public <T> ResponseFuture<T> load(Ion ion, AsyncHttpRequest request, Type type) {
         return null;
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/loader/StreamLoader.java b/ion/src/com/koushikdutta/ion/loader/StreamLoader.java
index 5b73bb2b..4dc88e0c 100644
--- a/ion/src/com/koushikdutta/ion/loader/StreamLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/StreamLoader.java
@@ -11,6 +11,7 @@
 import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
 import com.koushikdutta.ion.gif.GifDecoder;
@@ -60,7 +61,7 @@ public void run() {
                             throw new Exception("Bitmap failed to load");
                         info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     }
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {
diff --git a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
index c0198f7c..fa10df57 100644
--- a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
@@ -13,6 +13,7 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.io.File;
@@ -79,7 +80,7 @@ public void run() {
                             bmp = Bitmap.createScaledBitmap(bmp, (int) (bmp.getWidth() * ratio), (int) (bmp.getHeight() * ratio), true);
                     }
                     BitmapInfo info = new BitmapInfo(key, type.mimeType, bmp, originalSize);
-                    info.loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {
diff --git a/ion/src/com/koushikdutta/ion/mock/MockLoader.java b/ion/src/com/koushikdutta/ion/mock/MockLoader.java
new file mode 100644
index 00000000..d0cad6aa
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/mock/MockLoader.java
@@ -0,0 +1,39 @@
+package com.koushikdutta.ion.mock;
+
+import com.koushikdutta.async.http.AsyncHttpRequest;
+import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.future.ResponseFuture;
+import com.koushikdutta.ion.loader.SimpleLoader;
+
+import java.lang.reflect.Type;
+
+/**
+ * Created by koush on 3/6/15.
+ */
+public class MockLoader extends SimpleLoader {
+    public static void install(Ion ion, MockRequestHandler requestHandler) {
+        MockLoader mockLoader = new MockLoader(requestHandler);
+        for (Loader loader: ion.configure().getLoaders()) {
+            if (loader instanceof MockLoader)
+                throw new RuntimeException("MockLoader already installed.");
+        }
+        ion.configure().addLoader(0, mockLoader);
+    }
+
+    MockRequestHandler requestHandler;
+    private MockLoader(MockRequestHandler requestHandler) {
+        this.requestHandler = requestHandler;
+    }
+
+    @Override
+    public <T> ResponseFuture<T> load(Ion ion, AsyncHttpRequest request, Type type) {
+        T result = (T)requestHandler.request(request.getUri().toString());
+        if (result != null) {
+            MockResponseFuture<T> ret = new MockResponseFuture<T>(request);
+            ret.setComplete(result);
+            return ret;
+        }
+        return super.load(ion, request, type);
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/mock/MockRequestHandler.java b/ion/src/com/koushikdutta/ion/mock/MockRequestHandler.java
new file mode 100644
index 00000000..c8dd1d69
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/mock/MockRequestHandler.java
@@ -0,0 +1,8 @@
+package com.koushikdutta.ion.mock;
+
+/**
+ * Created by koush on 3/6/15.
+ */
+public interface MockRequestHandler {
+    public Object request(String uri);
+}
diff --git a/ion/src/com/koushikdutta/ion/mock/MockResponseFuture.java b/ion/src/com/koushikdutta/ion/mock/MockResponseFuture.java
new file mode 100644
index 00000000..9c01590c
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/mock/MockResponseFuture.java
@@ -0,0 +1,46 @@
+package com.koushikdutta.ion.mock;
+
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.future.SimpleFuture;
+import com.koushikdutta.async.http.AsyncHttpRequest;
+import com.koushikdutta.async.http.Headers;
+import com.koushikdutta.ion.HeadersResponse;
+import com.koushikdutta.ion.Response;
+import com.koushikdutta.ion.ResponseServedFrom;
+import com.koushikdutta.ion.future.ResponseFuture;
+
+/**
+ * Created by koush on 3/6/15.
+ */
+public class MockResponseFuture<T> extends SimpleFuture<T> implements ResponseFuture<T> {
+    private AsyncHttpRequest request;
+    public MockResponseFuture(AsyncHttpRequest request) {
+        this.request = request;
+    }
+
+    protected Headers getHeaders() {
+        return new Headers();
+    }
+
+    protected HeadersResponse getHeadersResponse() {
+        return new HeadersResponse(200, "OK", getHeaders());
+    }
+
+    private Response<T> getResponse(Exception e, T result) {
+        return new Response<T>(request, ResponseServedFrom.LOADED_FROM_NETWORK, getHeadersResponse(), e, result);
+    }
+
+    @Override
+    public Future<Response<T>> withResponse() {
+        final SimpleFuture<Response<T>> ret = new SimpleFuture<Response<T>>();
+        setCallback(new FutureCallback<T>() {
+            @Override
+            public void onCompleted(Exception e, T result) {
+                ret.setComplete(getResponse(e, result));
+            }
+        });
+        ret.setParent(this);
+        return ret;
+    }
+}
diff --git a/ion/test/src/com/koushikdutta/ion/test/Issues.java b/ion/test/src/com/koushikdutta/ion/test/Issues.java
new file mode 100644
index 00000000..7f773621
--- /dev/null
+++ b/ion/test/src/com/koushikdutta/ion/test/Issues.java
@@ -0,0 +1,346 @@
+package com.koushikdutta.ion.test;
+
+import android.graphics.Bitmap;
+import android.test.AndroidTestCase;
+import android.util.Base64;
+import android.util.Log;
+
+import com.google.gson.JsonObject;
+import com.koushikdutta.async.AsyncServer;
+import com.koushikdutta.async.AsyncServerSocket;
+import com.koushikdutta.async.AsyncSocket;
+import com.koushikdutta.async.ByteBufferList;
+import com.koushikdutta.async.Util;
+import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.callback.ListenCallback;
+import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.async.http.AsyncHttpClient;
+import com.koushikdutta.async.http.AsyncHttpGet;
+import com.koushikdutta.async.http.body.UrlEncodedFormBody;
+import com.koushikdutta.async.http.server.AsyncHttpServer;
+import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
+import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
+import com.koushikdutta.async.http.server.HttpServerRequestCallback;
+import com.koushikdutta.async.util.StreamUtility;
+import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.Response;
+
+import java.io.File;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Created by koush on 10/27/13.
+ */
+public class Issues extends AndroidTestCase {
+    public void testIssue74() throws Exception {
+        String data = Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        String data2 = Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        assertEquals(data, data2);
+    }
+
+    public void testSpdyReuse() throws Exception {
+        String data = Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        String data2 = Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        Ion.with(getContext()).load("https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
+        .setLogging("MyLogs", Log.VERBOSE)
+        .asString().get();
+
+        assertEquals(data, data2);
+    }
+
+    // url is dead, test will fail
+    public void testIssue126() throws Exception {
+        Bitmap bitmap = Ion.with(getContext())
+        .load("http://bdc.tsingyuan.cn/api/img?w=advanced")
+        .setLogging("Issue126", Log.VERBOSE)
+        .asBitmap()
+        .get();
+
+        assertNotNull(bitmap);
+        assertTrue(bitmap.getWidth() > 0);
+    }
+
+    public void testIssue146() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.get("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                response.getHeaders().set("Cache-Control", "max-age=300");
+                response.send(request.getQuery().size() + "");
+            }
+        });
+        AsyncServer asyncServer = new AsyncServer();
+        try {
+            int localPort = httpServer.listen(asyncServer, 0).getLocalPort();
+            String s1 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .addQuery("query1", "q")
+            .asString()
+            .get();
+
+            String s2 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .addQuery("query1", "q")
+            .addQuery("query2", "qq")
+            .asString()
+            .get();
+
+            String s3 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .addQuery("query1", "q")
+            .asString()
+            .get();
+
+            assertEquals(s1, "1");
+            assertEquals(s2, "2");
+            assertEquals(s3, "1");
+        }
+        finally {
+            asyncServer.stop();
+        }
+    }
+
+    public void testIssue200() throws Exception {
+        Map<String, List<String>> params = new HashMap<String, List<String>>();
+        params.put("email", Arrays.asList("mail@mail.pl"));
+        params.put("password", Arrays.asList("pass"));
+
+        String val = Ion.with(getContext())
+        .load("https://koush.clockworkmod.com/test/echo")
+        .setLogging("Issue200", Log.VERBOSE)
+        .setBodyParameters(params)
+        .asString()
+        .get(2000, TimeUnit.MILLISECONDS);
+
+        System.out.println(val);
+    }
+
+    public void testIssue179() throws Exception {
+        Ion.with(getContext())
+        .load("https://api.gigaset-elements.de/app/check-support" )
+        .setBodyParameter("version", "1.0")
+        .asString()
+        .setCallback(new FutureCallback<String>() {
+            @Override
+            public void onCompleted(Exception e, String result) {
+                if(result!=null)
+                    Log.d("WTF",result);
+                if(e!=null){
+                    e.printStackTrace();
+                }
+            }
+        })
+        .get();
+    }
+
+    public void testIssue253() throws Exception {
+        byte[] random = new byte[100000];
+        new Random(39548394).nextBytes(random);
+        String b64 = Base64.encodeToString(random, 0);
+
+        String uploadUrl = Ion.with(getContext())
+        .load("https://ion-test.appspot.com/upload_url")
+        .asString()
+        .get();
+
+        File file = getContext().getFileStreamPath("testData");
+        StreamUtility.writeFile(file, b64);
+
+        String data = Ion.with(getContext())
+        .load(uploadUrl)
+        .setMultipartFile("file", file)
+        .asString()
+        .get();
+
+        assertEquals(b64, data);
+    }
+
+    /*
+    public void testSSLv3Workaround() throws Exception {
+        Ion.getDefault(getContext())
+        .getHttpClient()
+        .getSSLSocketMiddleware()
+        .addEngineConfigurator(new AsyncSSLEngineConfigurator() {
+            @Override
+            public void configureEngine(SSLEngine engine) {
+                engine.setEnabledProtocols(new String[] { "SSLv3" });
+            }
+        });
+        Ion.with(getContext())
+        .load("https://members.easynews.com/dl/893b36f51a28bb066a7401e2850ecf2401cdd97a1.jpg/Kittens-and-Puppies-13_graylady.jpg")
+        .asString()
+        .get();
+    }
+    */
+
+    AsyncServerSocket server;
+    public void testIssue312() throws Exception {
+        String b64 = "SFRUUC8xLjAgMzAyIEZvdW5kDQpTZXQtQ29va2ll\n" +
+        "OlNFU1NJT049NUJBRDlERTEwQjY0NjgwNDsKTG9j\n" +
+        "YXRpb246IGhvbWUuY2dpCkNvbnRlbnQtdHlwZTog\n" +
+        "dGV4dC9odG1sCgo8aHRtbD48aGVhZD48bWV0YSBo\n" +
+        "dHRwLWVxdWl2PSdyZWZyZXNoJyBjb250ZW50PScw\n" +
+        "OyB1cmw9aG9tZS5jZ2knPjwvbWV0YT48L2hlYWQ+\n" +
+        "PGJvZHk+PC9ib2R5PjwvaHRtbD4K";
+
+        /*
+        HTTP/1.0 302 Found
+        Set-Cookie:SESSION=5BAD9DE10B646804;
+        Location: home.cgi
+        Content-type: text/html
+
+        <html><head><meta http-equiv='refresh' content='0; url=home.cgi'></meta></head><body></body></html>
+         */
+
+        // the above is using newlines, and not CRLF.
+
+        final byte[] responseData = Base64.decode(b64, 0);
+
+
+        server = Ion.getDefault(getContext())
+        .getServer().listen(null, 0, new ListenCallback() {
+            @Override
+            public void onAccepted(final AsyncSocket socket) {
+                Util.writeAll(socket, responseData, new CompletedCallback() {
+                    @Override
+                    public void onCompleted(Exception ex) {
+                        socket.end();
+                        server.stop();
+                    }
+                });
+            }
+            @Override
+            public void onListening(AsyncServerSocket socket) {
+            }
+            @Override
+            public void onCompleted(Exception ex) {
+            }
+        });
+
+        Ion.with(getContext())
+        .load("http://localhost:" + server.getLocalPort())
+        .followRedirect(false)
+        .asString()
+        .get();
+    }
+
+    public void testIssue318() throws Exception {
+        String response = Ion.with(getContext()).load("http://banpo.hs.kr/custom/custom.do?dcpNo=30524").asString().get();
+        assertNotNull(response);
+    }
+
+    public void testIssue329() throws Exception {
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.post("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                UrlEncodedFormBody body = (UrlEncodedFormBody)request.getBody();
+                response.send(body.get().getString("電"));
+            }
+        });
+
+        AsyncServer asyncServer = new AsyncServer();
+        try {
+            int localPort = httpServer.listen(asyncServer, 0).getLocalPort();
+            String s1 = Ion.with(getContext())
+            .load("http://localhost:" + localPort)
+            .setBodyParameter("電", "電")
+            .asString()
+            .get();
+
+            assertEquals(s1, "電");
+        }
+        finally {
+            asyncServer.stop();
+        }
+    }
+
+    public void testAAIssue225() throws Exception {
+        String ret = Ion.with(getContext())
+        .load("https://content.fastrbooks.com/android-test.txt")
+        .noCache()
+        .asString()
+        .get();
+
+        System.out.println(ret);
+    }
+
+    public void testIon428() throws Exception {
+        Ion.with(getContext())
+        .load("https://cdn2.vox-cdn.com/thumbor/KxtZNw37jKNfxdA0hX5edHvbTBE=/0x0:2039x1359/800x536/cdn0.vox-cdn.com/uploads/chorus_image/image/44254028/lg-g-watch.0.0.jpg")
+        .asString()
+        .get();
+    }
+
+    public void testIon450() throws Exception {
+        Ion.getDefault(getContext())
+        .configure().setLogging("Test", Log.VERBOSE);
+
+        Ion.with(getContext())
+        .load("https://api.instagram.com/v1/users/self/feed")
+        .asString()
+        .get();
+
+        Ion.with(getContext())
+        .load("https://api.instagram.com/v1/users/self/feed")
+        .asString()
+        .get();
+
+        Ion.with(getContext())
+        .load("https://api.instagram.com/v1/users/self/feed")
+        .asString()
+        .get();
+    }
+
+    public void testIon559() throws Exception {
+        Ion.with(getContext())
+        .load("https://saren.wtako.net/Teikoku.Shounen.jpg")
+        .asBitmap()
+        .get();
+    }
+
+    public void testIssueVerso() throws Exception {
+//        Ion.getDefault(getContext()).getHttpClient().getSSLSocketMiddleware().setSpdyEnabled(false);
+//        Ion.getDefault(getContext()).getConscryptMiddleware().enable(false);
+
+        Ion.with(getContext())
+        .load("https://versoworks.com/images/vwlogo.png")
+        .setLogging("Verso", Log.VERBOSE)
+        .asByteArray()
+        .get();
+    }
+}
diff --git a/ion/test/src/com/koushikdutta/ion/test/MockitoStuff.java b/ion/test/src/com/koushikdutta/ion/test/MockitoStuff.java
new file mode 100644
index 00000000..019d2468
--- /dev/null
+++ b/ion/test/src/com/koushikdutta/ion/test/MockitoStuff.java
@@ -0,0 +1,39 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+
+import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.mock.MockLoader;
+import com.koushikdutta.ion.mock.MockRequestHandler;
+
+import org.mockito.Mockito;
+
+import static org.mockito.Mockito.when;
+
+/**
+ * Created by koush on 3/6/15.
+ */
+public class MockitoStuff extends AndroidTestCase {
+    public void testMock() throws Exception {
+        System.setProperty("dexmaker.dexcache", getContext().getCacheDir().toString());
+
+        MockRequestHandler handler = Mockito.mock(MockRequestHandler.class);
+        when(handler.request("http://www.myfakedomain.com")).thenReturn("hello world");
+        when(handler.request("http://www.myfakedomain.com/user")).thenReturn("koush");
+
+        MockLoader.install(Ion.getDefault(getContext()), handler);
+
+        String result = Ion.with(getContext())
+                .load("http://www.myfakedomain.com")
+                .asString()
+                .get();
+        assertEquals(result, "hello world");
+
+        result = Ion.with(getContext())
+                .load("http://www.myfakedomain.com/user")
+                .asString()
+                .get();
+        assertEquals(result, "koush");
+    }
+
+}
