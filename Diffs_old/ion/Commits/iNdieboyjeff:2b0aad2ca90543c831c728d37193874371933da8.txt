diff --git a/ion/.classpath b/ion/.classpath
index 7bc01d9a..51769745 100644
--- a/ion/.classpath
+++ b/ion/.classpath
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/ion/libs/gson-2.2.4.jar b/ion/libs/gson-2.2.4.jar
index 75fe27c5..9478253e 100644
Binary files a/ion/libs/gson-2.2.4.jar and b/ion/libs/gson-2.2.4.jar differ
diff --git a/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java b/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
index c3ea3e45..f508a7a7 100644
--- a/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
+++ b/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
@@ -51,7 +51,7 @@ public void run() {
                 final OutputStream out;
                 try {
                     out = editor.newOutputStream(0);
-                    for (int i = 1; i < cache.getValueCount(); i++) {
+                    for (int i = 1; i < cache.size(); i++) {
                         editor.newOutputStream(i).close();
                     }
                 }
diff --git a/ion/src/com/koushikdutta/ion/LoadMipmap.java b/ion/src/com/koushikdutta/ion/LoadMipmap.java
new file mode 100644
index 00000000..a3045f5e
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/LoadMipmap.java
@@ -0,0 +1,51 @@
+package com.koushikdutta.ion;
+
+import android.annotation.TargetApi;
+import android.graphics.BitmapRegionDecoder;
+import android.graphics.Point;
+import android.os.Build;
+
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.ion.bitmap.BitmapInfo;
+
+import java.io.File;
+
+/**
+ * Created by koush on 1/5/14.
+ */
+@TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
+public class LoadMipmap extends BitmapCallback implements FutureCallback<File> {
+    public LoadMipmap(Ion ion, String key) {
+        super(ion, key, true);
+    }
+
+    @Override
+    public void onCompleted(Exception e, final File file) {
+        if (e != null) {
+            report(e, null);
+            return;
+        }
+
+        if (ion.bitmapsPending.tag(key) != this) {
+//            Log.d("IonBitmapLoader", "Bitmap load cancelled (no longer needed)");
+            return;
+        }
+
+        Ion.getBitmapLoadExecutorService().execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    BitmapRegionDecoder decoder = BitmapRegionDecoder.newInstance(file.toString(), false);
+                    Point size = new Point(decoder.getWidth(), decoder.getHeight());
+                    BitmapInfo info = new BitmapInfo(null, size);
+                    info.mipmap = decoder;
+                    info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_NETWORK;
+                    info.key = key;
+                    report(null, info);
+                } catch (Exception e) {
+                    report(e, null);
+                }
+            }
+        });
+    }
+}
