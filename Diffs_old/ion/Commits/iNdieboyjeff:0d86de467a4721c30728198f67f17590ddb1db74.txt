diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 9d3ead86..ed5c07bd 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -203,7 +203,7 @@ BitmapFetcher executeCache() {
         }
 
         // see if something is downloading this
-        if (!ion.bitmapsPending.contains(downloadKey)) {
+        if (ion.bitmapsPending.tag(downloadKey) == null) {
             final LoadMipmap loadMipmap = new LoadMipmap(ion, downloadKey);
             // nothing downloading, see if a file already exists
             DiskLruCache diskLruCache = ion.responseCache.getDiskLruCache();
diff --git a/ion/src/com/koushikdutta/ion/LoadMipmap.java b/ion/src/com/koushikdutta/ion/LoadMipmap.java
index f4f95935..a3045f5e 100644
--- a/ion/src/com/koushikdutta/ion/LoadMipmap.java
+++ b/ion/src/com/koushikdutta/ion/LoadMipmap.java
@@ -1,5 +1,10 @@
 package com.koushikdutta.ion;
 
+import android.annotation.TargetApi;
+import android.graphics.BitmapRegionDecoder;
+import android.graphics.Point;
+import android.os.Build;
+
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
@@ -8,13 +13,14 @@
 /**
  * Created by koush on 1/5/14.
  */
+@TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
 public class LoadMipmap extends BitmapCallback implements FutureCallback<File> {
     public LoadMipmap(Ion ion, String key) {
         super(ion, key, true);
     }
 
     @Override
-    public void onCompleted(Exception e, File result) {
+    public void onCompleted(Exception e, final File file) {
         if (e != null) {
             report(e, null);
             return;
@@ -25,13 +31,20 @@ public void onCompleted(Exception e, File result) {
             return;
         }
 
-        ion.configure().getFileLoader().loadBitmap(ion, result.toURI().toString(), 256, 256)
-        .setCallback(new FutureCallback<BitmapInfo>() {
+        Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
-            public void onCompleted(Exception e, BitmapInfo result) {
-                if (result != null)
-                    result.key = key;
-                report(e, result);
+            public void run() {
+                try {
+                    BitmapRegionDecoder decoder = BitmapRegionDecoder.newInstance(file.toString(), false);
+                    Point size = new Point(decoder.getWidth(), decoder.getHeight());
+                    BitmapInfo info = new BitmapInfo(null, size);
+                    info.mipmap = decoder;
+                    info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_NETWORK;
+                    info.key = key;
+                    report(null, info);
+                } catch (Exception e) {
+                    report(e, null);
+                }
             }
         });
     }
diff --git a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
index 484f66ec..47adce4f 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
@@ -1,8 +1,10 @@
 package com.koushikdutta.ion.bitmap;
 
 import android.graphics.Bitmap;
+import android.graphics.BitmapRegionDecoder;
 import android.graphics.Point;
 
+import java.io.File;
 import java.lang.ref.WeakReference;
 
 /**
@@ -22,6 +24,7 @@ public BitmapInfo(Bitmap[] bitmaps, Point originalSize) {
     final public Bitmap[] bitmaps;
     public int[] delays;
     public Exception exception;
+    public BitmapRegionDecoder mipmap;
 
     public int sizeOf() {
         if (bitmaps == null)
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index bd2359e0..69bfc99f 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -6,8 +6,10 @@
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.graphics.BitmapRegionDecoder;
 import android.graphics.Matrix;
 import android.graphics.Point;
+import android.graphics.Rect;
 import android.os.Looper;
 import android.util.DisplayMetrics;
 import android.util.Log;
@@ -148,6 +150,11 @@ public Bitmap loadBitmap(byte[] bytes, int offset, int length, int minx, int min
         return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
     }
 
+    public Bitmap loadRegion(BitmapRegionDecoder decoder, Rect sourceRect) {
+        decoder.decodeRegion()
+        return null;
+    }
+
     public Bitmap loadBitmap(InputStream stream, int minx, int miny, Point outSize) {
         stream = new BufferedInputStream(stream, 64 * 1024);
         assert Thread.currentThread() != Looper.getMainLooper().getThread();
