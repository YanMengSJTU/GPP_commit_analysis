diff --git a/ion-sample/ion-sample.iml b/ion-sample/ion-sample.iml
index 998798d3..0a766461 100644
--- a/ion-sample/ion-sample.iml
+++ b/ion-sample/ion-sample.iml
@@ -21,7 +21,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="ion" />
     <orderEntry type="module-library">
diff --git a/ion-test/ion-test.iml b/ion-test/ion-test.iml
index d91d4670..8b83fd1e 100644
--- a/ion-test/ion-test.iml
+++ b/ion-test/ion-test.iml
@@ -19,7 +19,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module" module-name="ion" />
   </component>
diff --git a/ion-test/src/com/koushikdutta/ion/test/CookieTests.java b/ion-test/src/com/koushikdutta/ion/test/CookieTests.java
index 8c9d2069..366fce61 100644
--- a/ion-test/src/com/koushikdutta/ion/test/CookieTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/CookieTests.java
@@ -1,11 +1,11 @@
 package com.koushikdutta.ion.test;
 
-import android.os.SystemClock;
 import android.test.AndroidTestCase;
 
 import com.koushikdutta.async.http.libcore.RawHeaders;
 import com.koushikdutta.async.http.libcore.RequestHeaders;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.cookie.CookieMiddleware;
 
 import java.net.CookieManager;
 import java.net.URI;
@@ -45,4 +45,36 @@ public void testCookies() throws Exception {
         assertTrue(newHeaders.get("Cookie").contains("poop=scoop"));
         assertFalse(newHeaders.get("Cookie").contains("bar"));
     }
+
+    public void testReinit() throws Exception {
+        CookieMiddleware middleware = Ion.getDefault(getContext()).getCookieMiddleware();
+        Ion ion = Ion.getDefault(getContext());
+
+        ion.getCookieMiddleware().clear();
+
+        RawHeaders headers = new RawHeaders();
+        headers.setStatusLine("HTTP/1.1 200 OK");
+        headers.set("Set-Cookie", "foo=bar");
+
+        URI uri = URI.create("http://example.com");
+        middleware.put(uri, headers);
+
+        headers.set("Set-Cookie", "poop=scoop");
+        middleware.put(uri, headers);
+
+        headers.set("Set-Cookie", "foo=goop");
+        middleware.put(uri, headers);
+
+        middleware.reinit(getContext(), Ion.getDefault(getContext()).getName());
+        CookieManager manager = middleware.getCookieManager();
+
+        RawHeaders newHeaders = new RawHeaders();
+        RequestHeaders requestHeaders = new RequestHeaders(uri, newHeaders);
+        Map<String, List<String>> cookies = manager.get(uri, newHeaders.toMultimap());
+        manager.get(uri, cookies);
+        requestHeaders.addCookies(cookies);
+        assertTrue(newHeaders.get("Cookie").contains("foo=goop"));
+        assertTrue(newHeaders.get("Cookie").contains("poop=scoop"));
+        assertFalse(newHeaders.get("Cookie").contains("bar"));
+    }
 }
diff --git a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
index 4475d99b..9946c36c 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -108,11 +108,21 @@ public void testPostJsonObject() throws Exception {
 
     public void testUrlEncodedFormBody() throws Exception {
         JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
-                .setBodyParameter("blit", "bip")
-                .asJsonObject().get();
+        .setBodyParameter("blit", "bip")
+        .asJsonObject().get();
         assertEquals("bip", ret.get("blit").getAsString());
     }
 
+    public void testUrlEncodedFormBodyWithNull() throws Exception {
+        JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
+        .setTimeout(3000000)
+        .setBodyParameter("blit", null)
+        .setBodyParameter("foo", "bar")
+        .asJsonObject().get();
+        assertTrue(!ret.has("blit"));
+        assertEquals("bar", ret.get("foo").getAsString());
+    }
+
     public void testMultipart() throws Exception {
         JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
                 .setMultipartParameter("goop", "noop")
diff --git a/ion/ion.iml b/ion/ion.iml
index 2494382d..8eeb9660 100644
--- a/ion/ion.iml
+++ b/ion/ion.iml
@@ -20,7 +20,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module-library" exported="">
       <library>
diff --git a/ion/src/com/koushikdutta/ion/BitmapFetcher.java b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
index 9e62c6f5..6dd443b4 100644
--- a/ion/src/com/koushikdutta/ion/BitmapFetcher.java
+++ b/ion/src/com/koushikdutta/ion/BitmapFetcher.java
@@ -48,7 +48,7 @@ private boolean fastLoad(String uri) {
         boolean put = !hasTransforms;
 
         for (Loader loader: ion.configure().getLoaders()) {
-            Future<BitmapInfo> future = loader.loadBitmap(ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
+            Future<BitmapInfo> future = loader.loadBitmap(builder.context.get(), ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
             if (future != null) {
                 final BitmapCallback callback = new LoadBitmapBase(ion, downloadKey, put);
                 future.setCallback(new FutureCallback<BitmapInfo>() {
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index c74a6380..44ab6896 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -555,34 +555,4 @@ public Config configure() {
     public IonBitmapCache getBitmapCache() {
         return bitmapCache;
     }
-
-    Future<AsyncHttpRequest> resolveRequest(AsyncHttpRequest request) {
-        return resolveRequest(request, null);
-    }
-
-    Future<AsyncHttpRequest> resolveRequest(AsyncHttpRequest request, SimpleFuture<AsyncHttpRequest> ret) {
-        // first attempt to resolve the url
-        for (Loader loader: loaders) {
-            Future<AsyncHttpRequest> resolved = loader.resolve(this, request);
-            if (resolved != null) {
-                if (ret == null)
-                    ret = new SimpleFuture<AsyncHttpRequest>();
-                final SimpleFuture<AsyncHttpRequest> future = ret;
-                resolved.setCallback(new FutureCallback<AsyncHttpRequest>() {
-                    @Override
-                    public void onCompleted(Exception e, AsyncHttpRequest result) {
-                        if (e != null) {
-                            future.setComplete(e);
-                            return;
-                        }
-                        resolveRequest(result, future);
-                    }
-                });
-                return ret;
-            }
-        }
-        if (ret != null)
-            ret.setComplete(request);
-        return ret;
-    }
 }
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index c3d32042..0cdce95f 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -1,6 +1,5 @@
 package com.koushikdutta.ion;
 
-import android.content.ContentUris;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
@@ -13,14 +12,12 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
-import com.koushikdutta.async.http.libcore.DiskLruCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.Transform;
 import com.koushikdutta.ion.builder.BitmapFutureBuilder;
 import com.koushikdutta.ion.builder.Builders;
 import com.koushikdutta.ion.builder.ImageViewFutureBuilder;
 
-import java.io.File;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 
@@ -128,6 +125,8 @@ IonBitmapRequestBuilder withImageView(ImageView imageView) {
 
     @Override
     public IonBitmapRequestBuilder transform(Transform transform) {
+        if (transform == null)
+            return this;
         if (transforms == null)
             transforms = new ArrayList<Transform>();
         transforms.add(transform);
@@ -151,7 +150,9 @@ public BitmapInfo asCachedBitmap() {
         assert downloadKey != null;
 
         if (resizeHeight > 0 || resizeWidth > 0) {
-            transform(new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
+            if (transforms == null)
+                transforms = new ArrayList<Transform>();
+            transforms.add(0, new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
         }
 
         // determine the key for this bitmap after all transformations
@@ -173,7 +174,9 @@ BitmapFetcher executeCache() {
         assert downloadKey != null;
 
         if (resizeHeight > 0 || resizeWidth > 0) {
-            transform(new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
+            if (transforms == null)
+                transforms = new ArrayList<Transform>();
+            transforms.add(0, new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
         }
 
         // determine the key for this bitmap after all transformations
@@ -345,6 +348,9 @@ public IonBitmapRequestBuilder animateIn(int animationResource) {
 
     @Override
     public IonBitmapRequestBuilder centerCrop() {
+        if (transforms != null && transforms.size() > 0)
+            throw new IllegalStateException("Can't apply centerCrop after transform has been called." +
+            "centerCrop is applied to the original resized bitmap.");
         if (resizeWidth <= 0 || resizeHeight <= 0)
             throw new IllegalStateException("must call resize first");
         scaleMode = ScaleMode.CenterCrop;
@@ -353,6 +359,9 @@ public IonBitmapRequestBuilder centerCrop() {
 
     @Override
     public IonBitmapRequestBuilder centerInside() {
+        if (transforms != null && transforms.size() > 0)
+            throw new IllegalStateException("Can't apply centerInside after transform has been called." +
+            "centerInside is applied to the original resized bitmap.");
         if (resizeWidth <= 0 || resizeHeight <= 0)
             throw new IllegalStateException("must call resize first");
         scaleMode = ScaleMode.CenterInside;
@@ -361,6 +370,12 @@ public IonBitmapRequestBuilder centerInside() {
 
     @Override
     public IonBitmapRequestBuilder resize(int width, int height) {
+        // TODO: prevent multiple calls to resize and friends?
+        if (transforms != null && transforms.size() > 0)
+            throw new IllegalStateException("Can't apply resize after transform has been called." +
+                "resize is applied to the original bitmap.");
+        if (deepZoom)
+            throw new IllegalStateException("Can not resize with deepZoom.");
         resizeWidth = width;
         resizeHeight = height;
         return this;
@@ -375,7 +390,10 @@ public IonBitmapRequestBuilder disableFadeIn() {
 	public IonBitmapRequestBuilder smartSize(boolean smartSize) {
         //don't want to disable device resize if user has already resized the Bitmap.
         if (resizeWidth > 0 || resizeHeight > 0)
-            throw new IllegalStateException("Can't change smart size after resize has been called.");
+            throw new IllegalStateException("Can't set smart size after resize has been called.");
+
+        if (deepZoom)
+            throw new IllegalStateException("Can not smartSize with deepZoom.");
 
         if (!smartSize) {
 			resizeWidth = -1;
@@ -400,7 +418,9 @@ public IonBitmapRequestBuilder deepZoom() {
             return this;
         this.deepZoom = true;
         if (resizeWidth > 0 || resizeHeight > 0)
-            throw new IllegalStateException("Can't decoder after resize has been called.");
+            throw new IllegalStateException("Can't deepZoom with resize.");
+        if (transforms != null && transforms.size() > 0)
+            throw new IllegalStateException("Can't deepZoom with transforms.");
         resizeWidth = 0;
         resizeHeight = 0;
         return this;
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 9d37f7f6..c364bc6d 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -128,13 +128,17 @@ public IonRequestBuilder userAgent(String userAgent) {
 
     @Override
     public IonRequestBuilder setHeader(String name, String value) {
-        getHeaders().set(name, value);
+        if (value == null)
+            getHeaders().removeAll(name);
+        else
+            getHeaders().set(name, value);
         return this;
     }
 
     @Override
     public IonRequestBuilder addHeader(String name, String value) {
-        getHeaders().add(name, value);
+        if (value != null)
+            getHeaders().add(name, value);
         return this;
     }
 
@@ -157,6 +161,8 @@ public IonRequestBuilder addHeaders(Map<String, List<String>> params) {
     Multimap query;
     @Override
     public IonRequestBuilder addQuery(String name, String value) {
+        if (value == null)
+            return this;
         if (query == null)
             query = new Multimap();
         query.add(name, value);
@@ -415,7 +421,7 @@ public void run() {
     <T> Future<AsyncHttpRequest> resolveRequest(AsyncHttpRequest request, final EmitterTransform<T> ret) {
         // first attempt to resolve the url
         for (Loader loader: ion.loaders) {
-            Future<AsyncHttpRequest> resolved = loader.resolve(ion, request);
+            Future<AsyncHttpRequest> resolved = loader.resolve(context.get(), ion, request);
             if (resolved != null)
                 return resolved;
 
@@ -736,7 +742,8 @@ public IonRequestBuilder setBodyParameter(String name, String value) {
             bodyParameters = new Multimap();
             setBody(new UrlEncodedFormBody(bodyParameters));
         }
-        bodyParameters.add(name, value);
+        if (value != null)
+            bodyParameters.add(name, value);
         return this;
     }
 
@@ -780,7 +787,8 @@ public IonRequestBuilder setMultipartParameter(String name, String value) {
             multipartBody = new MultipartFormDataBody();
             setBody(multipartBody);
         }
-        multipartBody.addStringPart(name, value);
+        if (value != null)
+            multipartBody.addStringPart(name, value);
         return this;
     }
 
@@ -788,7 +796,8 @@ public IonRequestBuilder setMultipartParameter(String name, String value) {
     public IonRequestBuilder setMultipartParameters(Map<String, List<String>> params) {
         for (String key: params.keySet()) {
             for (String value: params.get(key)) {
-                setMultipartParameter(key, value);
+                if (value != null)
+                    setMultipartParameter(key, value);
             }
         }
         return this;
@@ -799,10 +808,6 @@ public IonBitmapRequestBuilder withBitmap() {
         return new IonBitmapRequestBuilder(this);
     }
 
-    IonBitmapRequestBuilder withImageView(ImageView imageView) {
-        return new IonBitmapRequestBuilder(this).withImageView(imageView);
-    }
-
     @Override
     public Future<ImageView> intoImageView(ImageView imageView) {
         return new IonBitmapRequestBuilder(this).intoImageView(imageView);
diff --git a/ion/src/com/koushikdutta/ion/Loader.java b/ion/src/com/koushikdutta/ion/Loader.java
index d417a25d..000aebb3 100644
--- a/ion/src/com/koushikdutta/ion/Loader.java
+++ b/ion/src/com/koushikdutta/ion/Loader.java
@@ -1,5 +1,7 @@
 package com.koushikdutta.ion;
 
+import android.content.Context;
+
 import com.koushikdutta.async.DataEmitter;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
@@ -78,7 +80,7 @@ public AsyncHttpRequest getRequest() {
      * @param resizeHeight
      * @return
      */
-    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif);
+    public Future<BitmapInfo> loadBitmap(Context context, Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif);
 
     /**
      * Resolve a request into another request.
@@ -86,5 +88,5 @@ public AsyncHttpRequest getRequest() {
      * @param request
      * @return
      */
-    public Future<AsyncHttpRequest> resolve(Ion ion, AsyncHttpRequest request);
+    public Future<AsyncHttpRequest> resolve(Context context, Ion ion, AsyncHttpRequest request);
 }
diff --git a/ion/src/com/koushikdutta/ion/TransformBitmap.java b/ion/src/com/koushikdutta/ion/TransformBitmap.java
index bffedfd8..8352964e 100644
--- a/ion/src/com/koushikdutta/ion/TransformBitmap.java
+++ b/ion/src/com/koushikdutta/ion/TransformBitmap.java
@@ -88,8 +88,9 @@ public void run() {
                     Point size = null;
                     Bitmap bitmaps[] = new Bitmap[result.bitmaps.length];
                     for (int i = 0; i < result.bitmaps.length; i++) {
+                        bitmaps[i] = result.bitmaps[i];
                         for (Transform transform : transforms) {
-                            Bitmap bitmap = transform.transform(result.bitmaps[i]);
+                            Bitmap bitmap = transform.transform(bitmaps[i]);
                             if (bitmap == null)
                                 throw new Exception("failed to transform bitmap");
                             bitmaps[i] = bitmap;
diff --git a/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java b/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
index e8b8ff24..3baaf9bf 100644
--- a/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
+++ b/ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
@@ -5,6 +5,7 @@
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.koushikdutta.async.http.Multimap;
 import com.koushikdutta.async.http.SimpleMiddleware;
 import com.koushikdutta.async.http.libcore.RawHeaders;
 
@@ -14,7 +15,6 @@
 import java.net.URI;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 /**
  * Created by koush on 5/29/13.
@@ -37,6 +37,10 @@ public CookieManager getCookieManager() {
     }
 
     public CookieMiddleware(Context context, String name) {
+        reinit(context, name);
+    }
+
+    public void reinit(Context context, String name) {
         manager = new CookieManager(null, null);
         preferences = context.getSharedPreferences(name + "-cookies", Context.MODE_PRIVATE);
 
@@ -76,16 +80,27 @@ public void onSocket(OnSocketData data) {
 
     @Override
     public void onHeadersReceived(OnHeadersReceivedData data) {
+        put(data.request.getUri(), data.headers.getHeaders());
+    }
+
+    public void put(URI uri, RawHeaders headers) {
         try {
-            manager.put(data.request.getUri(), data.headers.getHeaders().toMultimap());
+            manager.put(uri, headers.toMultimap());
 
             // no cookies to persist.
-            if (data.headers.getHeaders().get("Set-Cookie") == null)
+            if (headers.get("Set-Cookie") == null)
                 return;
 
-            URI uri = data.request.getUri();
+            List<HttpCookie> cookies = manager.getCookieStore().get(uri);
+
+            RawHeaders dump = new RawHeaders();
+            dump.setStatusLine("HTTP/1.1 200 OK");
+            for (HttpCookie cookie: cookies) {
+                dump.add("Set-Cookie", cookie.getName() + "=" + cookie.getValue());
+            }
+
             String key = uri.getScheme() + "://" + uri.getAuthority();
-            preferences.edit().putString(key, data.headers.getHeaders().toHeaderString()).commit();
+            preferences.edit().putString(key, dump.toHeaderString()).commit();
         }
         catch (Exception e) {
         }
diff --git a/ion/src/com/koushikdutta/ion/loader/FileLoader.java b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
index f9b8be89..825b043a 100644
--- a/ion/src/com/koushikdutta/ion/loader/FileLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/FileLoader.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.loader;
 
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Point;
@@ -34,7 +35,7 @@
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight,
+    public Future<BitmapInfo> loadBitmap(final Context context, final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight,
                                          final boolean animateGif) {
         if (uri == null || !uri.startsWith("file:/"))
             return null;
diff --git a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
index c3230c62..ede717a9 100644
--- a/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion.loader;
 
 
+import android.content.Context;
 import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
 import android.graphics.Point;
@@ -19,7 +20,7 @@
  */
 public class PackageIconLoader extends SimpleLoader {
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
+    public Future<BitmapInfo> loadBitmap(Context context, final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (uri == null || !uri.startsWith("package:"))
             return null;
 
diff --git a/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java b/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
index ba494678..8d285a1b 100644
--- a/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
@@ -1,5 +1,7 @@
 package com.koushikdutta.ion.loader;
 
+import android.content.Context;
+
 import com.koushikdutta.async.DataEmitter;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
@@ -25,12 +27,12 @@
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
+    public Future<BitmapInfo> loadBitmap(Context context, Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         return null;
     }
 
     @Override
-    public Future<AsyncHttpRequest> resolve(Ion ion, AsyncHttpRequest request) {
+    public Future<AsyncHttpRequest> resolve(Context context, Ion ion, AsyncHttpRequest request) {
         return null;
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
index 0d807fff..068716fb 100644
--- a/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
+++ b/ion/src/com/koushikdutta/ion/loader/VideoLoader.java
@@ -2,6 +2,7 @@
 
 import android.annotation.TargetApi;
 import android.content.ContentResolver;
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Point;
 import android.media.MediaMetadataRetriever;
@@ -34,7 +35,7 @@ public static Bitmap createVideoThumbnail(String filePath) throws Exception {
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
+    public Future<BitmapInfo> loadBitmap(Context context, Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (!uri.startsWith(ContentResolver.SCHEME_FILE))
             return null;
 
