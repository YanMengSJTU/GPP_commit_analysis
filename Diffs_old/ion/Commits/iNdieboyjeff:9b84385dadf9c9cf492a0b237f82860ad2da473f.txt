diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 994f1eb0..62883c30 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion;
 
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.os.Looper;
@@ -224,8 +225,17 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
     }
 
     private static class BitmapInfoToBitmap extends TransformFuture<Bitmap, BitmapInfo> {
+        WeakReference<Context> context;
+        public BitmapInfoToBitmap(WeakReference<Context> context) {
+            this.context = context;
+        }
         @Override
         protected void transform(BitmapInfo result) throws Exception {
+            if (!IonRequestBuilder.checkContext(context)) {
+                cancel();
+                return;
+            }
+
             if (result.exception != null)
                 setComplete(result.exception);
             else
@@ -250,7 +260,7 @@ protected void transform(BitmapInfo result) throws Exception {
         }
 
         // we're loading, so let's register for the result.
-        BitmapInfoToBitmap ret = new BitmapInfoToBitmap();
+        BitmapInfoToBitmap ret = new BitmapInfoToBitmap(builder.context);
         ion.bitmapsPending.add(bitmapKey, ret);
         return ret;
     }
diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 08149ea9..ab75cb66 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -97,6 +97,12 @@ public void onCompleted(Exception e, BitmapInfo result) {
             drawable.setBitmap(result, result.loadedFrom);
             imageView.setImageDrawable(drawable);
             IonBitmapRequestBuilder.doAnimation(imageView, inAnimation, inAnimationResource);
+
+            if (!IonRequestBuilder.checkContext(imageView.getContext())) {
+                imageViewFuture.cancel();
+                return;
+            }
+
             imageViewFuture.setComplete(e, imageView);
         }
     }
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 9e267444..75408ac8 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -208,10 +208,14 @@ private static boolean isServiceRunning(Service candidate) {
         return false;
     }
 
-    private boolean checkContext() {
-        Context context = IonRequestBuilder.this.context.get();
+    static boolean checkContext(WeakReference<Context> contextWeakReference) {
+        Context context = contextWeakReference.get();
         if (context == null)
             return false;
+        return checkContext(context);
+    }
+
+    static boolean checkContext(Context context) {
         if (context instanceof Activity) {
             Activity activity = (Activity)context;
             if (activity.isFinishing())
@@ -226,6 +230,10 @@ else if (context instanceof Service) {
         return true;
     }
 
+    private boolean checkContext() {
+        return checkContext(context);
+    }
+
     private <T> void postExecute(final EmitterTransform<T> future, final Exception ex, final T value) {
         final Runnable runner = new Runnable() {
             @Override
diff --git a/ion/src/com/koushikdutta/ion/loader/MediaFile.java b/ion/src/com/koushikdutta/ion/loader/MediaFile.java
index 90912a01..2cdbcaa7 100644
--- a/ion/src/com/koushikdutta/ion/loader/MediaFile.java
+++ b/ion/src/com/koushikdutta/ion/loader/MediaFile.java
@@ -138,6 +138,8 @@
     // maps MTP format code to mime type
     private static final HashMap<Integer, String> sFormatToMimeTypeMap
             = new HashMap<Integer, String>();
+    private static final HashMap<String, String> sMimeTypeToExtensionMap
+            = new HashMap<String, String>();
 
     static void addFileType(String extension, int fileType, String mimeType) {
         sFileTypeMap.put(extension, new MediaFileType(fileType, mimeType));
@@ -149,6 +151,7 @@ static void addFileType(String extension, int fileType, String mimeType, int mtp
         sFileTypeToFormatMap.put(extension, Integer.valueOf(mtpFormatCode));
         sMimeTypeToFormatMap.put(mimeType, Integer.valueOf(mtpFormatCode));
         sFormatToMimeTypeMap.put(mtpFormatCode, mimeType);
+        sMimeTypeToExtensionMap.put(mimeType, extension);
     }
 
     /*
@@ -213,7 +216,7 @@ private static boolean isWMVEnabled() {
         addFileType("MPEG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
         addFileType("MPG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
         addFileType("MP4", FILE_TYPE_MP4, "video/mp4", MtpConstants.FORMAT_MPEG);
-        addFileType("M4V", FILE_TYPE_M4V, "video/mp4", MtpConstants.FORMAT_MPEG);
+        addFileType("M4V", FILE_TYPE_M4V, "video/m4v", MtpConstants.FORMAT_MPEG);
         addFileType("3GP", FILE_TYPE_3GPP, "video/3gpp",  MtpConstants.FORMAT_3GP_CONTAINER);
         addFileType("3GPP", FILE_TYPE_3GPP, "video/3gpp", MtpConstants.FORMAT_3GP_CONTAINER);
         addFileType("3G2", FILE_TYPE_3GPP2, "video/3gpp2", MtpConstants.FORMAT_3GP_CONTAINER);
@@ -307,6 +310,10 @@ public static boolean isMimeTypeMedia(String mimeType) {
                 || isImageFileType(fileType) || isPlayListFileType(fileType);
     }
 
+    public static String getExtensionForMimeType(String mimeType) {
+        return sMimeTypeToExtensionMap.get(mimeType).toLowerCase();
+    }
+
     // generates a title based on file name
     public static String getFileTitle(String path) {
         // extract file name after last slash
