diff --git a/ion/AndroidManifest.xml b/ion/AndroidManifest.xml
index 06c6d3b8..271dd28d 100644
--- a/ion/AndroidManifest.xml
+++ b/ion/AndroidManifest.xml
@@ -1,10 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          xmlns:tools="http://schemas.android.com/tools"
           package="com.koushikdutta.ion"
-          android:versionCode="138"
-          android:versionName="1.3.8">
-    <uses-sdk
-            tools:node="replace" />
+          android:versionCode="141"
+          android:versionName="1.4.1">
     <application />
 </manifest>
diff --git a/ion/build.gradle b/ion/build.gradle
index c4641ed0..dcd1b814 100644
--- a/ion/build.gradle
+++ b/ion/build.gradle
@@ -17,7 +17,7 @@ repositories {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:20.+'
+    compile 'com.android.support:support-v4:21.+'
     compile project(':AndroidAsync:AndroidAsync')
     compile 'com.google.code.gson:gson:2.3'
 }
@@ -42,8 +42,13 @@ android {
         }
     }
 
-    compileSdkVersion 19
-    buildToolsVersion '20.0.0'
+    defaultConfig {
+        minSdkVersion 9
+        targetSdkVersion 21
+    }
+
+    compileSdkVersion 21
+    buildToolsVersion '21.1.0'
 
     publishNonDefault true
 }
diff --git a/ion/ion-ion.iml b/ion/ion-ion.iml
index 0bb3da3d..a114bfb8 100644
--- a/ion/ion-ion.iml
+++ b/ion/ion-ion.iml
@@ -10,9 +10,10 @@
       <configuration>
         <option name="SELECTED_BUILD_VARIANT" value="debug" />
         <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugJava" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
         <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
         <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
+        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
         <option name="ALLOW_USER_CONFIGURATION" value="false" />
         <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
         <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
@@ -30,11 +31,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -81,10 +84,10 @@
       <excludeFolder url="file://$MODULE_DIR$/build/poms" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="support-annotations-20.0.0" level="project" />
-    <orderEntry type="library" exported="" name="support-v4-20.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-21.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-21.0.0" level="project" />
     <orderEntry type="library" exported="" name="gson-2.3" level="project" />
     <orderEntry type="module" module-name="AndroidAsync-AndroidAsync" exported="" />
   </component>
diff --git a/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java b/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
index c3406435..a8fa1331 100644
--- a/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
+++ b/ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
@@ -7,7 +7,13 @@
 import com.koushikdutta.async.http.AsyncSSLSocketMiddleware;
 import com.koushikdutta.async.http.SimpleMiddleware;
 
+import java.lang.reflect.Method;
+import java.security.Provider;
+import java.security.Security;
+
+import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSocketFactory;
 
 /**
  * Created by koush on 7/13/14.
@@ -27,15 +33,42 @@ public void enable(boolean enabled) {
         }
     }
 
-    static void initialize(Context context) {
+    public static void initialize(Context context) {
         try {
             synchronized (lock) {
                 if (initialized)
                     return;
+
                 initialized = true;
-                Context gms = context.createPackageContext("com.google.android.gms", Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
-                Class clazz = gms.getClassLoader().loadClass("com.google.android.gms.common.security.ProviderInstallerImpl");
-                clazz.getMethod("insertProvider", Context.class).invoke(null, context);
+
+                // GMS Conscrypt is already initialized, from outside ion. Leave it alone.
+                if (Security.getProvider(GMS_PROVIDER) != null) {
+                    success = true;
+                    return;
+                }
+
+                SSLContext originalDefaultContext = SSLContext.getDefault();
+                SSLSocketFactory originalDefaultSSLSocketFactory = HttpsURLConnection.getDefaultSSLSocketFactory();
+                try {
+                    Class<?> providerInstaller = Class.forName("com.google.android.gms.security.ProviderInstaller");
+                    Method mInsertProvider = providerInstaller.getDeclaredMethod("installIfNeeded", Context.class);
+                    mInsertProvider.invoke(null, context);
+
+                } catch (Throwable ignored) {
+                    Context gms = context.createPackageContext("com.google.android.gms", Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
+                    gms
+                    .getClassLoader()
+                    .loadClass("com.google.android.gms.common.security.ProviderInstallerImpl")
+                    .getMethod("insertProvider", Context.class)
+                    .invoke(null, context);
+                }
+
+                Provider[] providers = Security.getProviders();
+                Provider provider = Security.getProvider(GMS_PROVIDER);
+                Security.removeProvider(GMS_PROVIDER);
+                Security.insertProviderAt(provider, providers.length);
+                SSLContext.setDefault(originalDefaultContext);
+                HttpsURLConnection.setDefaultSSLSocketFactory(originalDefaultSSLSocketFactory);
                 success = true;
             }
         }
@@ -43,14 +76,24 @@ static void initialize(Context context) {
         }
     }
 
+    private static final String GMS_PROVIDER = "GmsCore_OpenSSL";
+
     public void initialize() {
         initialize(context);
         if (success && !instanceInitialized && enabled) {
             instanceInitialized = true;
             try {
-                SSLContext sslContext = SSLContext.getInstance("TLS");
+                SSLContext sslContext = null;
+                try {
+                    sslContext = SSLContext.getInstance("TLS", GMS_PROVIDER);
+                }
+                catch (Exception e) {
+                }
+                if (sslContext == null)
+                    sslContext = SSLContext.getInstance("TLS");
                 sslContext.init(null, null, null);
-                if (middleware.getSSLContext() != AsyncSSLSocketWrapper.getDefaultSSLContext())
+                // only set the SSL context if it is the default SSL context
+                if (middleware.getSSLContext() == AsyncSSLSocketWrapper.getDefaultSSLContext())
                     middleware.setSSLContext(sslContext);
             }
             catch (Exception e) {
diff --git a/ion/test/res/raw/keystore.bks b/ion/test/res/raw/keystore.bks
new file mode 100644
index 00000000..acf703c7
Binary files /dev/null and b/ion/test/res/raw/keystore.bks differ
diff --git a/ion/test/src/com/koushikdutta/ion/test/ConscryptTests.java b/ion/test/src/com/koushikdutta/ion/test/ConscryptTests.java
new file mode 100644
index 00000000..19dc38a1
--- /dev/null
+++ b/ion/test/src/com/koushikdutta/ion/test/ConscryptTests.java
@@ -0,0 +1,38 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+
+import com.koushikdutta.ion.Ion;
+
+import java.security.Provider;
+import java.security.Security;
+
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLSocketFactory;
+
+/**
+ * Created by koush on 10/27/14.
+ */
+public class ConscryptTests extends AndroidTestCase {
+    // needs to be run on fresh vm startups...
+
+    /*
+    public void testConscryptInit() throws Exception {
+        Ion.getDefault(getContext())
+        .getConscryptMiddleware().initialize();
+
+        Provider[] providers = Security.getProviders();
+
+        System.out.println(providers);
+    }
+
+    public void testDefault() throws Exception {
+        SSLSocketFactory factory = HttpsURLConnection.getDefaultSSLSocketFactory();
+
+        Ion.getDefault(getContext())
+        .getConscryptMiddleware().initialize();
+
+        assertEquals(factory, HttpsURLConnection.getDefaultSSLSocketFactory());
+    }
+    */
+}
diff --git a/ion/test/src/com/koushikdutta/ion/test/FileTests.java b/ion/test/src/com/koushikdutta/ion/test/FileTests.java
index ad9b1e2a..87cb3675 100644
--- a/ion/test/src/com/koushikdutta/ion/test/FileTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/FileTests.java
@@ -12,14 +12,14 @@
  */
 public class FileTests extends AndroidTestCase {
     public void testFileLoader() throws Exception {
-        File f = new File("/sdcard/test.txt");
+        File f = getContext().getFileStreamPath("test.txt");
         StreamUtility.writeFile(f, "hello world");
 
-        assertEquals("hello world", Ion.with(getContext(), f).asString().get());
+        assertEquals("hello world", Ion.with(getContext()).load(f).asString().get());
     }
 
     public void testFileUpload() throws Exception {
-        File f = new File("/sdcard/test.txt");
+        File f = getContext().getFileStreamPath("test.txt");
         StreamUtility.writeFile(f, "hello world");
 
         Ion.with(getContext())
diff --git a/ion/test/src/com/koushikdutta/ion/test/HttpTests.java b/ion/test/src/com/koushikdutta/ion/test/HttpTests.java
index bc09812f..6107e6ce 100644
--- a/ion/test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -1,6 +1,5 @@
 package com.koushikdutta.ion.test;
 
-import android.renderscript.FieldPacker;
 import android.test.AndroidTestCase;
 import android.util.Log;
 
@@ -8,14 +7,12 @@
 import com.google.gson.JsonObject;
 import com.google.gson.reflect.TypeToken;
 import com.koushikdutta.async.AsyncServer;
-import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.AsyncHttpGet;
 import com.koushikdutta.async.http.AsyncHttpResponse;
 import com.koushikdutta.async.http.Multimap;
-import com.koushikdutta.async.http.body.FilePart;
 import com.koushikdutta.async.http.body.MultipartFormDataBody;
 import com.koushikdutta.async.http.body.Part;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
@@ -23,10 +20,8 @@
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
 import com.koushikdutta.async.http.server.HttpServerRequestCallback;
 import com.koushikdutta.ion.Ion;
-import com.koushikdutta.ion.ProgressCallback;
 import com.koushikdutta.ion.cookie.CookieMiddleware;
 
-import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.net.HttpCookie;
 import java.net.URI;
@@ -44,7 +39,7 @@ public void testString() throws Exception {
     }
 
     public void testMultipartFileContentType() throws Exception {
-        File f = new File("/sdcard/ion/testdata");
+        File f = getContext().getFileStreamPath("empty");
         f.getParentFile().mkdirs();
         f.createNewFile();
         AsyncHttpServer httpServer = new AsyncHttpServer();
@@ -76,7 +71,7 @@ public void onPart(Part part) {
 
     public void testStringWithCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
-        Ion.with(getContext(),"http://www.clockworkmod.com/")
+        Ion.with(getContext(), "http://www.clockworkmod.com/")
                 // need to null out the handler since the semaphore blocks the main thread,
                 // and ion's default behavior is to post back onto the main thread or calling Handler.
                 .setHandler(null)
@@ -93,7 +88,7 @@ public void onCompleted(Exception e, String result) {
     }
 
     public void testJsonObject() throws Exception {
-        JsonObject ret = Ion.with(getContext(),"https://raw.githubusercontent.com/koush/AndroidAsync/master/AndroidAsync/test/assets/test.json")
+        JsonObject ret = Ion.with(getContext(), "https://raw.githubusercontent.com/koush/AndroidAsync/master/AndroidAsync/test/assets/test.json")
                 .asJsonObject().get();
         assertEquals("bar", ret.get("foo").getAsString());
     }
@@ -101,21 +96,21 @@ public void testJsonObject() throws Exception {
     public void testPostJsonObject() throws Exception {
         JsonObject post = new JsonObject();
         post.addProperty("ping", "pong");
-        JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
+        JsonObject ret = Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
                 .setJsonObjectBody(post)
                 .asJsonObject().get();
         assertEquals("pong", ret.get("ping").getAsString());
     }
 
     public void testUrlEncodedFormBody() throws Exception {
-        JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
+        JsonObject ret = Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
         .setBodyParameter("blit", "bip")
         .asJsonObject().get();
         assertEquals("bip", ret.get("blit").getAsString());
     }
 
     public void testUrlEncodedFormBodyWithNull() throws Exception {
-        JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
+        JsonObject ret = Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
         .setTimeout(3000000)
         .setBodyParameter("blit", null)
         .setBodyParameter("foo", "bar")
@@ -125,7 +120,7 @@ public void testUrlEncodedFormBodyWithNull() throws Exception {
     }
 
     public void testMultipart() throws Exception {
-        JsonObject ret = Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
+        JsonObject ret = Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
                 .setMultipartParameter("goop", "noop")
                 .asJsonObject().get();
         assertEquals("noop", ret.get("goop").getAsString());
@@ -154,7 +149,7 @@ public void testGroupCancel() throws Exception {
         assertEquals(Ion.getDefault(getContext()).getPendingRequestCount(getContext()), 0);
 
         Object cancelGroup = new Object();
-        Ion.with(getContext(),"http://koush.clockworkmod.com/test/hang")
+        Ion.with(getContext(), "http://koush.clockworkmod.com/test/hang")
                 .setHandler(null)
                 .group(cancelGroup)
                 .asJsonObject();
@@ -192,7 +187,7 @@ public void testGson() throws Exception {
         array.add(dummy2);
 
         final Semaphore semaphore = new Semaphore(0);
-        Ion.with(getContext(),"https://koush.clockworkmod.com/test/echo")
+        Ion.with(getContext(), "https://koush.clockworkmod.com/test/echo")
                 .setHandler(null)
                 .setJsonArrayBody(array)
                 .as(new TypeToken<List<Dummy>>() {
diff --git a/ion/test/src/com/koushikdutta/ion/test/SelfSignedCertificateTests.java b/ion/test/src/com/koushikdutta/ion/test/SelfSignedCertificateTests.java
new file mode 100644
index 00000000..5bae289f
--- /dev/null
+++ b/ion/test/src/com/koushikdutta/ion/test/SelfSignedCertificateTests.java
@@ -0,0 +1,58 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+
+import com.koushikdutta.async.http.server.AsyncHttpServer;
+import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
+import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
+import com.koushikdutta.async.http.server.HttpServerRequestCallback;
+import com.koushikdutta.ion.Ion;
+
+import java.security.KeyStore;
+
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManagerFactory;
+
+/**
+ * Created by koush on 11/21/14.
+ */
+public class SelfSignedCertificateTests extends AndroidTestCase {
+    public void testKeys() throws Exception {
+        KeyManagerFactory kmf = KeyManagerFactory.getInstance("X509");
+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
+
+        ks.load(getContext().getResources().openRawResource(R.raw.keystore), "storepass".toCharArray());
+        kmf.init(ks, "storepass".toCharArray());
+
+
+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
+        KeyStore ts = KeyStore.getInstance(KeyStore.getDefaultType());
+        ts.load(getContext().getResources().openRawResource(R.raw.keystore), "storepass".toCharArray());
+        tmf.init(ts);
+
+        SSLContext sslContext = SSLContext.getInstance("TLS");
+        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
+
+        AsyncHttpServer httpServer = new AsyncHttpServer();
+        httpServer.listenSecure(8888, sslContext);
+        httpServer.get("/", new HttpServerRequestCallback() {
+            @Override
+            public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                response.send("hello");
+            }
+        });
+
+        Thread.sleep(1000);
+
+        Ion ion = Ion.getInstance(getContext(), "CustomSSL");
+        ion.getHttpClient().getSSLSocketMiddleware().setSSLContext(sslContext);
+        ion.getHttpClient().getSSLSocketMiddleware().setTrustManagers(tmf.getTrustManagers());
+
+        ion.build(getContext())
+        .load("https://localhost:8888/")
+        .asString()
+        .get();
+    }
+
+}
diff --git a/ion/test/src/com/koushikdutta/ion/test/StreamTests.java b/ion/test/src/com/koushikdutta/ion/test/StreamTests.java
index 23cc81e2..bee6b402 100644
--- a/ion/test/src/com/koushikdutta/ion/test/StreamTests.java
+++ b/ion/test/src/com/koushikdutta/ion/test/StreamTests.java
@@ -23,11 +23,12 @@
  */
 public class StreamTests extends AndroidTestCase {
     byte[] random = new byte[100000];
+    int port;
     @Override
     protected void setUp() throws Exception {
         super.setUp();
         AsyncHttpServer server = new AsyncHttpServer();
-        server.listen(5555);
+        port = server.listen(0).getLocalPort();
         server.get("/", new HttpServerRequestCallback() {
             @Override
             public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
@@ -55,7 +56,7 @@ protected void tearDown() throws Exception {
     public void testStream() throws Exception {
         new Random(39548394).nextBytes(random);
         Ion.with(getContext())
-        .load("http://localhost:5555/")
+        .load("http://localhost:" + port + "/")
         .write(new FileOutputStream(getContext().getFileStreamPath("test")), true)
         .get();
 
@@ -66,7 +67,7 @@ public void testStream() throws Exception {
     public void testInputStream() throws Exception {
         new Random(39548394).nextBytes(random);
         InputStream is = Ion.with(getContext())
-        .load("http://localhost:5555/")
+        .load("http://localhost:" + port + "/")
         .asInputStream()
         .get();
 
