diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index f35bc3f2..dd5f89f3 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -373,7 +373,7 @@ else if (info.mipmap != null) {
             // draw stuff that needs drawing
             // use parent level tiles for tiles that do not exist
             // crossfading?
-            System.out.println(info.mipmap);
+//            System.out.println(info.mipmap);
 
             Rect clip = canvas.getClipBounds();
             Rect bounds = getBounds();
@@ -397,7 +397,7 @@ else if (info.mipmap != null) {
             int visibleRight = Math.min(bounds.width(), clip.right);
             int visibleTop = Math.max(0, clip.top);
             int visibleBottom = Math.min(bounds.height(), clip.bottom);
-            int level = (int)maxLevel;
+            int level = (int)Math.ceil(maxLevel);
             int levelTiles = 1 << level;
             int levelDim = levelTiles * TILE_DIM;
             Rect visible = new Rect(visibleLeft, visibleTop, visibleRight, visibleBottom);
@@ -408,6 +408,10 @@ else if (info.mipmap != null) {
             paint.setColor(Color.BLACK);
             canvas.drawRect(getBounds(), paint);
 
+            int sampleSize = 1;
+            while (textureTileDim >> (sampleSize - 1) > TILE_DIM || textureTileDim >> (sampleSize - 1) > TILE_DIM)
+                sampleSize++;
+
             for (int y = 0; y < levelTiles; y++) {
                 int top = textureTileDim * y;
                 int bottom = textureTileDim * (y + 1);
@@ -428,13 +432,13 @@ else if (info.mipmap != null) {
                     Rect texRect = new Rect(left, top, right, bottom);
 
                     // find, render/fetch
-                    System.out.println("rendering: " + texRect + " for: " + bounds);
+//                    System.out.println("rendering: " + texRect + " for: " + bounds);
                     String tileKey = ResponseCacheMiddleware.toKeyString(info.key + "," + level + "," + x + "," + y);
                     BitmapInfo tile = ion.bitmapCache.get(tileKey);
                     if (tile != null) {
                         // render it
                         if (tile.bitmaps != null) {
-                            System.out.println("bitmap is: " + tile.bitmaps[0].getWidth() + "x" + tile.bitmaps[0].getHeight());
+//                            System.out.println("bitmap is: " + tile.bitmaps[0].getWidth() + "x" + tile.bitmaps[0].getHeight());
                             canvas.drawBitmap(tile.bitmaps[0], null, texRect, paint);
                         }
                         continue;
@@ -442,7 +446,7 @@ else if (info.mipmap != null) {
 
                     if (ion.bitmapsPending.tag(tileKey) == null) {
                         // fetch it
-                        LoadBitmapRegion region = new LoadBitmapRegion(ion, tileKey, info.mipmap, texRect, level);
+                        LoadBitmapRegion region = new LoadBitmapRegion(ion, tileKey, info.mipmap, texRect, sampleSize);
                     }
                     ion.bitmapsPending.add(tileKey, tileCallback);
                 }
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index 6e9687ea..9ec6e077 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -153,9 +153,9 @@ public Bitmap loadBitmap(byte[] bytes, int offset, int length, int minx, int min
     }
 
     @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
-    public Bitmap loadRegion(BitmapRegionDecoder decoder, Rect sourceRect, int level) {
+    public Bitmap loadRegion(BitmapRegionDecoder decoder, Rect sourceRect, int inSampleSize) {
         BitmapFactory.Options options = new BitmapFactory.Options();
-        options.inSampleSize = 1 << level;
+        options.inSampleSize = inSampleSize;
         return decoder.decodeRegion(sourceRect, options);
     }
 
