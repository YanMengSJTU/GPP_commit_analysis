diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 2fdea264..8c2e9b9f 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -6,6 +6,7 @@
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
+import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Looper;
 import android.os.SystemClock;
@@ -221,10 +222,11 @@ private Drawable tryGetErrorResource() {
 
     @Override
     public int getIntrinsicWidth() {
-        if (info != null && info.bitmaps != null) {
-            if (!mipmap)
+        if (info != null) {
+            if (info.bitmaps != null)
                 return info.bitmaps[0].getScaledWidth(resources.getDisplayMetrics().densityDpi);
-            return info.originalSize.x;
+            if (info.mipmap != null)
+                return info.originalSize.x;
         }
         if (resizeWidth > 0)
             return resizeWidth;
@@ -245,10 +247,11 @@ public int getIntrinsicWidth() {
 
     @Override
     public int getIntrinsicHeight() {
-        if (info != null && info.bitmaps != null) {
-            if (!mipmap)
+        if (info != null) {
+            if (info.bitmaps != null)
                 return info.bitmaps[0].getScaledHeight(resources.getDisplayMetrics().densityDpi);
-            return info.originalSize.y;
+            if (info.mipmap != null)
+                return info.originalSize.y;
         }
         if (resizeHeight > 0)
             return resizeHeight;
@@ -330,6 +333,35 @@ public void draw(Canvas canvas) {
                 }
             }
         }
+        else if (info.mipmap != null) {
+            // zoom 0: entire image fits in a 256x256 square
+
+
+            // figure out zoom level
+            // figure out which tiles need rendering
+            // fetch anything that needs fetching
+            // draw stuff that needs drawing
+            // use parent level tiles for tiles that do not exist
+            // crossfading?
+            System.out.println(info.mipmap);
+
+            Rect clip = canvas.getClipBounds();
+            Rect bounds = getBounds();
+
+            float zoom = (float)canvas.getWidth() / (float)clip.width();
+            double level = Math.abs(Math.round(Math.log(zoom) / Math.log(2)));
+
+
+//            System.out.println("width: " + clip.width());
+//            System.out.println("height: " + clip.height());
+            System.out.println("clip: " + clip);
+            System.out.println("zoom: " + zoom);
+            System.out.println("level: " + level);
+
+            paint.setColor(Color.RED);
+            canvas.drawRect(getBounds(), paint);
+            paint.reset();
+        }
         else {
             Drawable error = tryGetErrorResource();
             if (error != null) {
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index 69bfc99f..b3325854 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -151,7 +151,7 @@ public Bitmap loadBitmap(byte[] bytes, int offset, int length, int minx, int min
     }
 
     public Bitmap loadRegion(BitmapRegionDecoder decoder, Rect sourceRect) {
-        decoder.decodeRegion()
+//        decoder.decodeRegion()
         return null;
     }
 
