diff --git a/ion-test/src/com/koushikdutta/ion/test/AuthTests.java b/ion-test/src/com/koushikdutta/ion/test/AuthTests.java
index 01cb201e..2b37f168 100644
--- a/ion-test/src/com/koushikdutta/ion/test/AuthTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/AuthTests.java
@@ -47,6 +47,7 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
                     response.send(json.toString());
                 }
                 catch (Exception e) {
+                    e.printStackTrace();
                     fail();
                 }
             }
diff --git a/ion-test/src/com/koushikdutta/ion/test/GsonTests.java b/ion-test/src/com/koushikdutta/ion/test/GsonTests.java
index b29530bc..83e1875b 100644
--- a/ion-test/src/com/koushikdutta/ion/test/GsonTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/GsonTests.java
@@ -7,16 +7,22 @@
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.reflect.TypeToken;
 import com.koushikdutta.async.AsyncServer;
+import com.koushikdutta.async.ByteBufferList;
+import com.koushikdutta.async.FilteredDataEmitter;
 import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
 import com.koushikdutta.async.http.server.HttpServerRequestCallback;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.gson.GsonObjectParser;
 
 import junit.framework.Test;
 
+import java.nio.ByteBuffer;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Semaphore;
 
 /**
  * Created by koush on 6/5/13.
@@ -62,4 +68,67 @@ public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerRespo
             AsyncServer.getDefault().stop();
         }
     }
+
+    public void testParserCastingSuccess() throws Exception {
+        ByteBufferList b = new ByteBufferList(ByteBuffer.wrap("{}".getBytes()));
+        FilteredDataEmitter emitter = new FilteredDataEmitter() {
+            @Override
+            public boolean isPaused() {
+                return false;
+            }
+        };
+        GsonObjectParser g = new GsonObjectParser();
+        Future<JsonObject> ret = g.parse(emitter);
+        emitter.onDataAvailable(emitter, b);
+        emitter.getEndCallback().onCompleted(null);
+        JsonObject j = ret.get();
+        assertNotNull(j);
+    }
+
+
+    public void testParserCastingError() throws Exception {
+        ByteBufferList b = new ByteBufferList(ByteBuffer.wrap("[]".getBytes()));
+        FilteredDataEmitter emitter = new FilteredDataEmitter() {
+            @Override
+            public boolean isPaused() {
+                return false;
+            }
+        };
+        GsonObjectParser g = new GsonObjectParser();
+        Future<JsonObject> ret = g.parse(emitter);
+        emitter.onDataAvailable(emitter, b);
+        emitter.getEndCallback().onCompleted(null);
+        try {
+            JsonObject j = ret.get();
+            fail(j.toString());
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void testParserCastingCallbackError() throws Exception {
+        ByteBufferList b = new ByteBufferList(ByteBuffer.wrap("[]".getBytes()));
+        FilteredDataEmitter emitter = new FilteredDataEmitter() {
+            @Override
+            public boolean isPaused() {
+                return false;
+            }
+        };
+        GsonObjectParser g = new GsonObjectParser();
+        Future<JsonObject> ret = g.parse(emitter);
+        emitter.onDataAvailable(emitter, b);
+        emitter.getEndCallback().onCompleted(null);
+        final Semaphore s = new Semaphore(0);
+        ret.setCallback(new FutureCallback<JsonObject>() {
+            @Override
+            public void onCompleted(Exception e, JsonObject result) {
+                assertNull(result);
+                assertNotNull(e);
+                assertTrue(e instanceof ClassCastException);
+                s.release();
+            }
+        });
+        s.acquire();
+    }
 }
diff --git a/ion/src/com/koushikdutta/ion/FileCacheStore.java b/ion/src/com/koushikdutta/ion/FileCacheStore.java
index e83119ae..f86290cd 100644
--- a/ion/src/com/koushikdutta/ion/FileCacheStore.java
+++ b/ion/src/com/koushikdutta/ion/FileCacheStore.java
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion;
 
 import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.reflect.TypeToken;
 import com.koushikdutta.async.callback.CompletedCallback;
@@ -11,6 +12,8 @@
 import com.koushikdutta.async.parser.StringParser;
 import com.koushikdutta.async.stream.FileDataSink;
 import com.koushikdutta.async.util.FileCache;
+import com.koushikdutta.ion.gson.GsonArrayParser;
+import com.koushikdutta.ion.gson.GsonObjectParser;
 import com.koushikdutta.ion.gson.GsonParser;
 import com.koushikdutta.ion.gson.GsonSerializer;
 
@@ -63,7 +66,7 @@ public void onCompleted(Exception ex) {
     }
 
     public Future<JsonObject> putJsonObject(JsonObject value) {
-        return put(value, new GsonParser<JsonObject>());
+        return put(value, new GsonObjectParser());
     }
 
     public Future<Document> putDocument(Document value) {
@@ -71,7 +74,7 @@ public void onCompleted(Exception ex) {
     }
 
     public Future<JsonArray> putJsonArray(JsonArray value) {
-        return put(value, new GsonParser<JsonArray>());
+        return put(value, new GsonArrayParser());
     }
 
     /*
@@ -140,19 +143,19 @@ public String getString() {
     }
 
     public Future<JsonObject> asJsonObject() {
-        return as(new GsonParser<JsonObject>());
+        return as(new GsonObjectParser());
     }
 
     public JsonObject getJsonObject() {
-        return get(new GsonParser<JsonObject>());
+        return get(new GsonObjectParser());
     }
 
     public Future<JsonArray> asJsonArray() {
-        return as(new GsonParser<JsonArray>());
+        return as(new GsonArrayParser());
     }
 
     public JsonArray getJsonArray() {
-        return get(new GsonParser<JsonArray>());
+        return get(new GsonArrayParser());
     }
 
     public Future<Document> asDocument() {
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 80394a2c..e219429f 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -55,7 +55,9 @@
 import com.koushikdutta.ion.builder.FutureBuilder;
 import com.koushikdutta.ion.builder.LoadBuilder;
 import com.koushikdutta.ion.future.ResponseFuture;
+import com.koushikdutta.ion.gson.GsonArrayParser;
 import com.koushikdutta.ion.gson.GsonBody;
+import com.koushikdutta.ion.gson.GsonObjectParser;
 import com.koushikdutta.ion.gson.GsonParser;
 import com.koushikdutta.ion.gson.GsonSerializer;
 import com.koushikdutta.ion.gson.PojoBody;
@@ -68,7 +70,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.lang.ref.WeakReference;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -403,6 +404,15 @@ public void run() {
         RawHeaders headers;
         DataEmitter emitter;
 
+        public Response<T> getResponse(Exception e, T result) {
+            Response<T> response = new Response<T>();
+            response.headers = headers;
+            response.request = finalRequest;
+            response.result = result;
+            response.exception = e;
+            return response;
+        }
+
         @Override
         public Future<Response<T>> withResponse() {
             final SimpleFuture<Response<T>> ret = new SimpleFuture<Response<T>>();
@@ -410,12 +420,7 @@ public void run() {
                 @Override
                 public void onCompleted(Exception e, T result) {
                     if (emitter != null) {
-                        Response<T> response = new Response<T>();
-                        response.headers = headers;
-                        response.request = finalRequest;
-                        response.result = result;
-                        response.exception = e;
-                        ret.setComplete(response);
+                        ret.setComplete(getResponse(e, result));
                         return;
                     }
                     ret.setComplete(e, null);
@@ -636,12 +641,12 @@ public void onCompleted(Exception e, T result) {
 
     @Override
     public ResponseFuture<JsonObject> asJsonObject() {
-        return execute(new GsonParser<JsonObject>());
+        return execute(new GsonObjectParser());
     }
 
     @Override
     public ResponseFuture<JsonArray> asJsonArray() {
-        return execute(new GsonParser<JsonArray>());
+        return execute(new GsonArrayParser());
     }
 
     @Override
@@ -769,7 +774,20 @@ public IonRequestBuilder setMultipartParameters(Map<String, List<String>> params
     }
 
     @Override
-    public Builders.Any.M addMultipartParts(List<Part> parameters) {
+    public IonRequestBuilder addMultipartParts(Iterable<Part> parameters) {
+        if (multipartBody == null) {
+            multipartBody = new MultipartFormDataBody();
+            setBody(multipartBody);
+        }
+
+        for (Part part: parameters) {
+            multipartBody.addPart(part);
+        }
+        return this;
+    }
+
+    @Override
+    public Builders.Any.M addMultipartParts(Part... parameters) {
         if (multipartBody == null) {
             multipartBody = new MultipartFormDataBody();
             setBody(multipartBody);
@@ -781,6 +799,16 @@ public IonRequestBuilder setMultipartParameters(Map<String, List<String>> params
         return this;
     }
 
+    @Override
+    public IonRequestBuilder setMultipartContentType(String contentType) {
+        if (multipartBody == null) {
+            multipartBody = new MultipartFormDataBody();
+            setBody(multipartBody);
+        }
+        multipartBody.setContentType(contentType);
+        return this;
+    }
+
     @Override
     public IonBitmapRequestBuilder withBitmap() {
         return new IonBitmapRequestBuilder(this);
diff --git a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
index 561ef14f..4e959c86 100644
--- a/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
+++ b/ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
@@ -52,5 +52,21 @@
      * @param parameters
      * @return
      */
-    public M addMultipartParts(List<Part> parameters);
+    public M addMultipartParts(Iterable<Part> parameters);
+
+    /**
+     * Specify multipart/form-data parameters to send to the HTTP server. If no HTTP method was explicitly
+     * provided in the load call, the default HTTP method, POST, is used.
+     * @param parameters
+     * @return
+     */
+    public M addMultipartParts(Part... parameters);
+
+    /**
+     * Specify the content type to use in this request. By default it is
+     * multipart/form-data
+     * @param contentType
+     * @return
+     */
+    public M setMultipartContentType(String contentType);
 }
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonArrayParser.java b/ion/src/com/koushikdutta/ion/gson/GsonArrayParser.java
new file mode 100644
index 00000000..1779d019
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/gson/GsonArrayParser.java
@@ -0,0 +1,12 @@
+package com.koushikdutta.ion.gson;
+
+import com.google.gson.JsonArray;
+
+/**
+ * Created by koush on 6/23/14.
+ */
+public class GsonArrayParser extends GsonParser<JsonArray> {
+    public GsonArrayParser() {
+        super(JsonArray.class);
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonBody.java b/ion/src/com/koushikdutta/ion/gson/GsonBody.java
index 1727090a..8d7a46ab 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonBody.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonBody.java
@@ -25,13 +25,7 @@ public GsonBody(Gson gson, T json) {
 
     @Override
     public void parse(DataEmitter emitter, final CompletedCallback completed) {
-        new GsonParser<T>().parse(emitter).setCallback(new FutureCallback<T>() {
-            @Override
-            public void onCompleted(Exception e, T result) {
-                json = result;
-                completed.onCompleted(e);
-            }
-        });
+        throw new AssertionError("not implemented");
     }
 
     @Override
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonObjectParser.java b/ion/src/com/koushikdutta/ion/gson/GsonObjectParser.java
new file mode 100644
index 00000000..ffc3f4f7
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/gson/GsonObjectParser.java
@@ -0,0 +1,12 @@
+package com.koushikdutta.ion.gson;
+
+import com.google.gson.JsonObject;
+
+/**
+ * Created by koush on 6/23/14.
+ */
+public class GsonObjectParser extends GsonParser<JsonObject> {
+    public GsonObjectParser() {
+        super(JsonObject.class);
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonParser.java b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
index c51b8ba1..4b0fa0de 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonParser.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonParser.java
@@ -20,9 +20,12 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class GsonParser<T extends JsonElement> implements AsyncParser<T> {
-    public GsonParser() {
+public abstract class GsonParser<T extends JsonElement> implements AsyncParser<T> {
+    Class<? extends JsonElement> clazz;
+    public GsonParser(Class<? extends T> clazz) {
+        this.clazz = clazz;
     }
+
     @Override
     public Future<T> parse(DataEmitter emitter) {
         return new ByteBufferListParser().parse(emitter)
@@ -30,10 +33,12 @@ public GsonParser() {
             @Override
             protected void transform(ByteBufferList result) throws Exception {
                 JsonParser parser = new JsonParser();
-                T parsed = (T)parser.parse(new JsonReader(new InputStreamReader(new ByteBufferListInputStream(result))));
+                JsonElement parsed = parser.parse(new JsonReader(new InputStreamReader(new ByteBufferListInputStream(result))));
                 if (parsed.isJsonNull() || parsed.isJsonPrimitive())
                     throw new JsonParseException("unable to parse json");
-                setComplete(null, parsed);
+                if (!clazz.isInstance(parsed))
+                    throw new ClassCastException(parsed.getClass().getCanonicalName() + " can not be casted to " + clazz.getCanonicalName());
+                setComplete(null, (T)parsed);
             }
         });
     }
