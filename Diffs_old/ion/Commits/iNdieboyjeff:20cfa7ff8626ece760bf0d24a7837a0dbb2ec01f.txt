diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index e63fe1a1..994f1eb0 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -32,9 +32,10 @@
     IonRequestBuilder builder;
     Ion ion;
 
-    private void ensureBuilder() {
+    private IonRequestBuilder ensureBuilder() {
         if (builder == null)
             builder = new IonRequestBuilder(imageViewPostRef.get().getContext(), ion);
+        return builder;
     }
 
     @Override
@@ -350,6 +351,8 @@ public IonBitmapRequestBuilder centerInside() {
     public IonBitmapRequestBuilder resize(int width, int height) {
         resizeWidth = width;
         resizeHeight = height;
+        ensureBuilder().setHeader("X-Ion-Width", String.valueOf(width));
+        ensureBuilder().setHeader("X-Ion-Height", String.valueOf(height));
         return this;
     }
 
diff --git a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
index 222a485c..a2f4ca46 100644
--- a/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonRequestBuilder.java
@@ -106,7 +106,7 @@ public IonRequestBuilder load(String method, String url) {
     private RawHeaders getHeaders() {
         if (headers == null) {
             headers = new RawHeaders();
-            AsyncHttpRequest.setDefaultHeaders(headers, URI.create(uri));
+            AsyncHttpRequest.setDefaultHeaders(headers, uri == null ? null : URI.create(uri));
         }
         return headers;
     }
@@ -335,6 +335,7 @@ public void run() {
         for (Loader loader: ion.loaders) {
             Future<DataEmitter> emitter = loader.load(ion, request, ret);
             if (emitter != null) {
+                request.logi("Using loader: " + loader);
                 ret.setParent(emitter);
                 return;
             }
diff --git a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
index 4488ec88..76f4b76f 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
@@ -55,6 +55,8 @@ public BitmapInfo remove(String key) {
 
     public void put(BitmapInfo info) {
         assert Thread.currentThread() == Looper.getMainLooper().getThread();
+        if (getHeapSize(ion.getContext()) != cache.maxSize())
+            cache.setMaxSize(getHeapSize(ion.getContext()) / 7);
         cache.put(info.key, info);
     }
 
diff --git a/ion/src/com/koushikdutta/ion/bitmap/LruCache.java b/ion/src/com/koushikdutta/ion/bitmap/LruCache.java
index a8fc6ac9..12bfec53 100644
--- a/ion/src/com/koushikdutta/ion/bitmap/LruCache.java
+++ b/ion/src/com/koushikdutta/ion/bitmap/LruCache.java
@@ -261,6 +261,10 @@ public synchronized final int size() {
         return size;
     }
 
+    public void setMaxSize(int maxSize) {
+        this.maxSize = maxSize;
+    }
+
     /**
      * For caches that do not override {@link #sizeOf}, this returns the maximum
      * number of entries in the cache. For all other caches, this returns the
