diff --git a/ion-sample/AndroidManifest.xml b/ion-sample/AndroidManifest.xml
index 24d7fca0..fef3c2d1 100644
--- a/ion-sample/AndroidManifest.xml
+++ b/ion-sample/AndroidManifest.xml
@@ -8,6 +8,7 @@
             android:minSdkVersion="11"
             android:targetSdkVersion="17"/>
     <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application
             android:debuggable="true"
             android:hardwareAccelerated="true"
diff --git a/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
new file mode 100644
index 00000000..df5d1f4d
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
@@ -0,0 +1,31 @@
+package com.koushikdutta.ion.test;
+
+import android.graphics.Bitmap;
+import android.test.AndroidTestCase;
+
+import com.koushikdutta.async.future.FutureCallback;
+import com.koushikdutta.ion.Ion;
+
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Created by koush on 9/13/13.
+ */
+public class BitmapTests extends AndroidTestCase {
+    public void testBitmapCallback() throws Exception {
+        final Semaphore semaphore = new Semaphore(0);
+        Ion.with(getContext())
+        .load("http://media.salon.com/2013/05/original.jpg")
+        .asBitmap()
+        .setCallback(new FutureCallback<Bitmap>() {
+            @Override
+            public void onCompleted(Exception e, Bitmap result) {
+                assertNotNull(result);
+                assertNull(e);
+                semaphore.release();
+            }
+        });
+        semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
+    }
+}
diff --git a/ion/AndroidManifest.xml b/ion/AndroidManifest.xml
index 48d15ee3..7fdf0097 100644
--- a/ion/AndroidManifest.xml
+++ b/ion/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.koushikdutta.ion"
-          android:versionCode="117"
-          android:versionName="1.1.7">
-    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="17" />
+          android:versionCode="118"
+          android:versionName="1.1.8">
+    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="18" />
     <application />
 </manifest>
diff --git a/ion/ion.iml b/ion/ion.iml
index 5e139612..35929d9c 100644
--- a/ion/ion.iml
+++ b/ion/ion.iml
@@ -20,7 +20,7 @@
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
     </content>
-    <orderEntry type="jdk" jdkName="Android 4.2.2 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android 4.3 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="module-library" exported="">
       <library>
diff --git a/ion/project.properties b/ion/project.properties
index 0da169b3..546e5eb3 100644
--- a/ion/project.properties
+++ b/ion/project.properties
@@ -11,7 +11,7 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-17
+target=android-18
 android.library=true
 
 
diff --git a/ion/src/com/koushikdutta/ion/DefaultTransform.java b/ion/src/com/koushikdutta/ion/DefaultTransform.java
new file mode 100644
index 00000000..c1d4bdee
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/DefaultTransform.java
@@ -0,0 +1,52 @@
+package com.koushikdutta.ion;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.RectF;
+
+import com.koushikdutta.ion.bitmap.Transform;
+
+import java.io.FileOutputStream;
+
+class DefaultTransform implements Transform {
+    ScaleMode scaleMode;
+    int resizeWidth;
+    int resizeHeight;
+
+    public DefaultTransform(int width, int height, ScaleMode scaleMode) {
+        resizeWidth = width;
+        resizeHeight = height;
+        this.scaleMode = scaleMode;
+    }
+
+    @Override
+    public Bitmap transform(Bitmap b) {
+        Bitmap ret = Bitmap.createBitmap(resizeWidth, resizeHeight, b.getConfig());
+        Canvas canvas = new Canvas(ret);
+
+        RectF destination = new RectF(0, 0, resizeWidth, resizeHeight);
+        if (scaleMode != ScaleMode.FitXY) {
+            float ratio;
+            float xratio = (float)resizeWidth / (float)b.getWidth();
+            float yratio = (float)resizeHeight / (float)b.getHeight();
+            if (scaleMode == ScaleMode.CenterCrop)
+                ratio = Math.max(xratio, yratio);
+            else
+                ratio = Math.min(xratio, yratio);
+
+            float postx = b.getWidth() * ratio;
+            float posty = b.getHeight() * ratio;
+            float transx = (resizeWidth - postx) / 2;
+            float transy = (resizeHeight - posty) / 2;
+            destination.set(transx, transy, postx, posty);
+        }
+
+        canvas.drawBitmap(b, null, destination, null);
+        return ret;
+    }
+
+    @Override
+    public String key() {
+        return scaleMode.name() + resizeWidth  + "x" + resizeHeight;
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
index 2be36642..8fed2466 100644
--- a/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
+++ b/ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
@@ -107,7 +107,7 @@ BitmapInfo execute() {
         // subsequent retransformation. See if we can retrieve the bitmap from the disk cache.
         // See BitmapToBitmapInfo for where the cache is populated.
         DiskLruCache diskLruCache = ion.getResponseCache().getDiskLruCache();
-        if (diskLruCache.containsKey(bitmapKey)) {
+        if (hasTransforms && diskLruCache.containsKey(bitmapKey)) {
             BitmapToBitmapInfo.getBitmapSnapshot(ion, bitmapKey);
             return null;
         }
@@ -312,12 +312,6 @@ public IonBitmapRequestBuilder animateIn(int animationResource) {
         return this;
     }
 
-    static enum ScaleMode {
-        FitXY,
-        CenterCrop,
-        CenterInside
-    }
-
     ScaleMode scaleMode = ScaleMode.FitXY;
     @Override
     public IonBitmapRequestBuilder centerCrop() {
@@ -345,54 +339,6 @@ public IonBitmapRequestBuilder resize(int width, int height) {
         return this;
     }
 
-    private static class DefaultTransform implements Transform {
-        ScaleMode scaleMode;
-        int resizeWidth;
-        int resizeHeight;
-
-        public DefaultTransform(int width, int height, ScaleMode scaleMode) {
-            resizeWidth = width;
-            resizeHeight = height;
-            this.scaleMode = scaleMode;
-        }
-
-        @Override
-        public Bitmap transform(Bitmap b) {
-            Bitmap ret = Bitmap.createBitmap(resizeWidth, resizeHeight, b.getConfig());
-            Canvas canvas = new Canvas(ret);
-
-            float xratio = (float)resizeWidth / (float)b.getWidth();
-            float yratio = (float)resizeHeight / (float)b.getHeight();
-            float transx = 0;
-            float transy = 0;
-            if (scaleMode != ScaleMode.FitXY) {
-                float ratio;
-                if (scaleMode == ScaleMode.CenterCrop)
-                    ratio = Math.max(xratio, yratio);
-                else
-                    ratio = Math.min(xratio, yratio);
-
-                xratio = ratio;
-                yratio = ratio;
-
-                float postx = b.getWidth() * ratio;
-                float posty = b.getHeight() * ratio;
-                transx = (resizeWidth - postx) / 2;
-                transy = (resizeHeight - posty) / 2;
-            }
-
-            canvas.scale(xratio, yratio);
-            canvas.drawBitmap(b, transx, transy, null);
-
-            return ret;
-        }
-
-        @Override
-        public String key() {
-            return scaleMode.name() + resizeWidth  + "x" + resizeHeight;
-        }
-    }
-
     private boolean disableFadeIn;
 
     @Override
diff --git a/ion/src/com/koushikdutta/ion/ScaleMode.java b/ion/src/com/koushikdutta/ion/ScaleMode.java
new file mode 100644
index 00000000..077e7b96
--- /dev/null
+++ b/ion/src/com/koushikdutta/ion/ScaleMode.java
@@ -0,0 +1,7 @@
+package com.koushikdutta.ion;
+
+enum ScaleMode {
+    FitXY,
+    CenterCrop,
+    CenterInside
+}
\ No newline at end of file
