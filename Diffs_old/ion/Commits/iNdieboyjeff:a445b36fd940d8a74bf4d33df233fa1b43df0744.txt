diff --git a/ion/src/com/koushikdutta/ion/IonDrawable.java b/ion/src/com/koushikdutta/ion/IonDrawable.java
index 76242e06..1f2969f8 100644
--- a/ion/src/com/koushikdutta/ion/IonDrawable.java
+++ b/ion/src/com/koushikdutta/ion/IonDrawable.java
@@ -334,7 +334,7 @@ public void draw(Canvas canvas) {
             }
         }
         else if (info.mipmap != null) {
-            // zoom 0: entire image fits in a 256x256 square
+            // zoom 0: entire image fits in a TILE_DIMxTILE_DIM square
 
 
             // figure out zoom level
@@ -348,15 +348,17 @@ else if (info.mipmap != null) {
             Rect clip = canvas.getClipBounds();
             Rect bounds = getBounds();
 
+            final int TILE_DIM = 1024;
+
             float zoom = (float)canvas.getWidth() / (float)clip.width();
 //            double level = Math.abs(Math.round(Math.log(zoom) / Math.log(2)));
 
             float zoomWidth = zoom * bounds.width();
             float zoomHeight = zoom * bounds.height();
 
-            double wlevel = Math.log(zoomWidth / 256) / Math.log(2);
-            double hlevel = Math.log(zoomHeight/ 256) / Math.log(2);
-            double level = Math.max(wlevel, hlevel);
+            double wlevel = Math.log(zoomWidth / TILE_DIM) / Math.log(2);
+            double hlevel = Math.log(zoomHeight/ TILE_DIM) / Math.log(2);
+            double maxLevel = Math.max(wlevel, hlevel);
 
 
             Point p = new Point(canvas.getWidth(), canvas.getHeight());
@@ -365,14 +367,30 @@ else if (info.mipmap != null) {
 //            System.out.println("height: " + clip.height());
 //            System.out.println("clip: " + clip);
 //            System.out.println("zoom: " + zoom);
-            System.out.println("bounds: " + bounds);
+//            System.out.println("bounds: " + bounds);
             System.out.println("clip: " + clip);
             System.out.println("canvas: " + p);
             System.out.println("zoomWidth: " + zoomWidth);
             System.out.println("zoomHeight: " + zoomHeight);
-            System.out.println("level: " + level);
-
-
+            System.out.println("level: " + maxLevel);
+
+            int visibleLeft = Math.max(0, clip.left);
+            int visibleRight = Math.min(bounds.width(), clip.right);
+            int visibleTop = Math.max(0, clip.top);
+            int visibleBottom = Math.min(bounds.height(), clip.bottom);
+            int level = (int)maxLevel;
+            int levelDim = TILE_DIM << level;
+            Rect visible = new Rect(visibleLeft, visibleTop, visibleRight, visibleBottom);
+            System.out.println("visible: " + visible);
+
+            for (int y = 0; y < visibleBottom; y += TILE_DIM) {
+                if (y + TILE_DIM < visibleTop)
+                    continue;
+                for (int x = 0; x < visibleRight; x += TILE_DIM) {
+                    if (x + TILE_DIM < visibleLeft)
+                        continue;
+                }
+            }
 
 
             paint.setColor(Color.RED);
