diff --git a/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java b/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
index 30517ae7..235fb968 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
@@ -60,7 +60,7 @@ public void onCreate(Bundle savedInstanceState) {
 //        .build());
         super.onCreate(savedInstanceState);
 
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.gallery);
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java b/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
index ed8b0e4d..74a279c0 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
@@ -98,7 +98,7 @@ public void onCreate(Bundle savedInstanceState) {
 //        .build());
         super.onCreate(savedInstanceState);
 
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.google_image_search);
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
index d190781c..b0c36567 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
@@ -30,7 +30,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         // Enable global Ion logging
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.progress);
 
diff --git a/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java b/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
index 9b2be2cd..d36fcd47 100644
--- a/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
+++ b/ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
@@ -46,7 +46,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         // Enable global Ion logging
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         // create a tweet adapter for our list view
         tweetAdapter = new ArrayAdapter<Tweet>(this, 0) {
diff --git a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
index 250e409f..809c4567 100644
--- a/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/HttpTests.java
@@ -32,12 +32,6 @@
  * Created by koush on 5/22/13.
  */
 public class HttpTests extends AndroidTestCase {
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
-        Ion.getDefault(getContext()).configure().setLogging("HttpTests", Log.DEBUG);
-    }
-
     public void testString() throws Exception {
         assertNotNull(Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
                 .asString().get());
diff --git a/ion-test/src/com/koushikdutta/ion/test/Issue74.java b/ion-test/src/com/koushikdutta/ion/test/Issue74.java
index 3f94e71b..da41005a 100644
--- a/ion-test/src/com/koushikdutta/ion/test/Issue74.java
+++ b/ion-test/src/com/koushikdutta/ion/test/Issue74.java
@@ -10,8 +10,6 @@
  */
 public class Issue74 extends AndroidTestCase {
     public void testIssue() throws Exception {
-        Ion.getDefault(getContext()).configure().getResponseCache().clear();
-
         String data = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
         .setLogging("MyLogs", Log.VERBOSE)
         .asString().get();
diff --git a/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java b/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
index 3f52643a..dcd32e93 100644
--- a/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
+++ b/ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
@@ -16,7 +16,6 @@
 public class RedirectTests extends AndroidTestCase {
     public void testFinalLocation() throws Exception {
         try {
-            Ion.getDefault(getContext()).configure().setLogging("redirect", Log.VERBOSE);
             AsyncHttpServer server = new AsyncHttpServer();
             server.listen(Ion.getDefault(getContext()).getServer(), 5555);
             server.get("/", new HttpServerRequestCallback() {
diff --git a/ion-test/src/com/koushikdutta/ion/test/StoreTests.java b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
new file mode 100644
index 00000000..c95d3f79
--- /dev/null
+++ b/ion-test/src/com/koushikdutta/ion/test/StoreTests.java
@@ -0,0 +1,80 @@
+package com.koushikdutta.ion.test;
+
+import android.test.AndroidTestCase;
+
+import com.google.gson.JsonObject;
+import com.koushikdutta.ion.Ion;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Created by koush on 11/20/13.
+ */
+public class StoreTests extends AndroidTestCase {
+    public void testString() throws Exception {
+        Ion.getDefault(getContext())
+        .store()
+        .remove("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        Ion.getDefault(getContext())
+        .store()
+        .putString("foo", "bar")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        String result = Ion.getDefault(getContext())
+        .store()
+        .getString("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        assertEquals(result, "bar");
+    }
+
+    public void testJson() throws Exception {
+        Ion.getDefault(getContext())
+        .store()
+        .remove("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        JsonObject json = new JsonObject();
+        json.addProperty("foo", "bar");
+
+        Ion.getDefault(getContext())
+        .store()
+        .putJsonObject("foo", json)
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        JsonObject result = Ion.getDefault(getContext())
+        .store()
+        .getJsonObject("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        assertEquals(result.get("foo").getAsString(), "bar");
+    }
+
+    public static class TestClass {
+        public String foo;
+    }
+
+    public void testGson() throws Exception {
+        Ion.getDefault(getContext())
+        .store()
+        .remove("foo")
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        TestClass test = new TestClass();
+        test.foo = "bar";
+
+        Ion.getDefault(getContext())
+        .store()
+        .put("foo", test, TestClass.class)
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        TestClass result = Ion.getDefault(getContext())
+        .store()
+        .get("foo", TestClass.class)
+        .get(1000, TimeUnit.MILLISECONDS);
+
+        assertEquals(result.foo, "bar");
+    }
+}
diff --git a/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java b/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
index 315b1365..c0563b32 100644
--- a/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
+++ b/ion/src/com/koushikdutta/ion/DiskLruCacheStore.java
@@ -19,38 +19,41 @@
 
 import org.w3c.dom.Document;
 
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
 /**
  * Created by koush on 11/17/13.
  */
-public class DiskLruCacheStore extends SimpleFuture {
+public class DiskLruCacheStore {
     Ion ion;
     DiskLruCache cache;
-    String key;
-    DiskLruCacheStore(Ion ion, DiskLruCache cache, String key) {
+    DiskLruCacheStore(Ion ion, DiskLruCache cache) {
         this.ion = ion;
         this.cache = cache;
-        this.key = key;
     }
 
-    private <T> Future<T> put(final T value, final AsyncParser<T> parser) {
+    private <T> Future<T> put(final String rawKey, final T value, final AsyncParser<T> parser) {
+        final SimpleFuture<T> ret = new SimpleFuture<T>();
         ion.getServer().getExecutorService().execute(new Runnable() {
             @Override
             public void run() {
                 final DiskLruCache.Editor editor;
                 try {
-                    final String key = ResponseCacheMiddleware.toKeyString("ion-store:" + DiskLruCacheStore.this.key);
+                    final String key = ResponseCacheMiddleware.toKeyString("ion-store:" + rawKey);
                     editor = cache.edit(key);
                 }
                 catch (Exception e) {
-                    setComplete(e);
+                    ret.setComplete(e);
                     return;
                 }
                 final OutputStream out;
                 try {
                     out = editor.newOutputStream(0);
+                    for (int i = 1; i < cache.getValueCount(); i++) {
+                        editor.newOutputStream(i).close();
+                    }
                 }
                 catch (Exception e) {
                     try {
@@ -58,12 +61,12 @@ public void run() {
                     }
                     catch (Exception ex) {
                     }
-                    setComplete(e);
+                    ret.setComplete(e);
                     return;
                 }
 
                 if (editor == null) {
-                    setComplete(new Exception("unable to edit"));
+                    ret.setComplete(new Exception("unable to edit"));
                     return;
                 }
                 parser.write(new OutputStreamDataSink(ion.getServer(), out), value, new CompletedCallback() {
@@ -73,7 +76,7 @@ public void onCompleted(Exception ex) {
                             try {
                                 out.close();
                                 editor.commit();
-                                setComplete(value);
+                                ret.setComplete(value);
                                 return;
                             }
                             catch (Exception e) {
@@ -85,28 +88,28 @@ public void onCompleted(Exception ex) {
                         }
                         catch (Exception e) {
                         }
-                        setComplete(ex);
+                        ret.setComplete(ex);
                     }
                 });
             }
         });
-        return this;
+        return ret;
     }
 
-    public Future<String> putString(String value) {
-        return put(value, new StringParser());
+    public Future<String> putString(String key, String value) {
+        return put(key, value, new StringParser());
     }
 
-    public Future<JsonObject> putJsonObject(JsonObject value) {
-        return put(value, new GsonParser<JsonObject>());
+    public Future<JsonObject> putJsonObject(String key, JsonObject value) {
+        return put(key, value, new GsonParser<JsonObject>());
     }
 
-    public Future<Document> putDocument(Document value) {
-        return put(value, new DocumentParser());
+    public Future<Document> putDocument(String key, Document value) {
+        return put(key, value, new DocumentParser());
     }
 
-    public Future<JsonArray> putJsonArray(JsonArray value) {
-        return put(value, new GsonParser<JsonArray>());
+    public Future<JsonArray> putJsonArray(String key, JsonArray value) {
+        return put(key, value, new GsonParser<JsonArray>());
     }
 
     /*
@@ -119,22 +122,22 @@ public void onCompleted(Exception ex) {
     }
     */
 
-    public <T> Future<T> put(T value, Class<T> clazz) {
-        return put(value, new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    public <T> Future<T> put(String key, T value, Class<T> clazz) {
+        return put(key, value, new GsonSerializer<T>(ion.configure().getGson(), clazz));
     }
 
-    public <T> Future<T> put(T value, TypeToken<T> token) {
-        return put(value, new GsonSerializer<T>(ion.configure().getGson(), token));
+    public <T> Future<T> put(String key, T value, TypeToken<T> token) {
+        return put(key, value, new GsonSerializer<T>(ion.configure().getGson(), token));
     }
     
-    private <T> Future<T> get(final AsyncParser<T> parser) {
+    private <T> Future<T> get(final String rawKey, final AsyncParser<T> parser) {
         final SimpleFuture<T> ret = new SimpleFuture<T>();
         
         ion.getServer().getExecutorService().execute(new Runnable() {
             @Override
             public void run() {
                 try {
-                    final String key = ResponseCacheMiddleware.toKeyString("ion-store:" + DiskLruCacheStore.this.key);
+                    final String key = ResponseCacheMiddleware.toKeyString("ion-store:" + rawKey);
                     final DiskLruCache.Snapshot snapshot = cache.get(key);
                     if (snapshot == null) {
                         ret.setComplete((T)null);
@@ -161,27 +164,44 @@ public void onCompleted(Exception e, T result) {
         return ret;
     }
     
-    public Future<String> getString() {
-        return get(new StringParser());
+    public Future<String> getString(String key) {
+        return get(key, new StringParser());
+    }
+
+    public Future<JsonObject> getJsonObject(String key) {
+        return get(key, new GsonParser<JsonObject>());
     }
 
-    public Future<JsonObject> getJsonObject() {
-        return get(new GsonParser<JsonObject>());
+    public Future<JsonArray> getJsonArray(String key) {
+        return get(key, new GsonParser<JsonArray>());
     }
 
-    public Future<JsonArray> getJsonArray() {
-        return get(new GsonParser<JsonArray>());
+    public Future<Document> getDocument(String key) {
+        return get(key, new DocumentParser());
     }
 
-    public Future<Document> getDocument() {
-        return get(new DocumentParser());
+    public <T> Future<T> get(String key, Class<T> clazz) {
+        return get(key, new GsonSerializer<T>(ion.configure().getGson(), clazz));
     }
 
-    public <T> Future<T> get(Class<T> clazz) {
-        return get(new GsonSerializer<T>(ion.configure().getGson(), clazz));
+    public <T> Future<T> get(String key, TypeToken<T> token) {
+        return get(key, new GsonSerializer<T>(ion.configure().getGson(), token));
     }
 
-    public <T> Future<T> get(TypeToken<T> token) {
-        return get(new GsonSerializer<T>(ion.configure().getGson(), token));
+    public Future<String> remove(final String key) {
+        final SimpleFuture<String> ret = new SimpleFuture<String>();
+        ion.getServer().getExecutorService().execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    cache.remove(key);
+                    ret.setComplete(key);
+                }
+                catch (Exception e) {
+                    ret.setComplete(e);
+                }
+            }
+        });
+        return ret;
     }
 }
diff --git a/ion/src/com/koushikdutta/ion/Ion.java b/ion/src/com/koushikdutta/ion/Ion.java
index 9fc86005..2af91967 100644
--- a/ion/src/com/koushikdutta/ion/Ion.java
+++ b/ion/src/com/koushikdutta/ion/Ion.java
@@ -315,8 +315,8 @@ private void addCookieMiddleware() {
      * @param key
      * @return
      */
-    public DiskLruCacheStore cache(String key) {
-        return new DiskLruCacheStore(this, responseCache.getDiskLruCache(), key);
+    public DiskLruCacheStore cache() {
+        return new DiskLruCacheStore(this, responseCache.getDiskLruCache());
     }
 
     /**
@@ -324,8 +324,8 @@ public DiskLruCacheStore cache(String key) {
      * @param key
      * @return
      */
-    public DiskLruCacheStore store(String key) {
-        return new DiskLruCacheStore(this, responseCache.getDiskLruCache(), key);
+    public DiskLruCacheStore store() {
+        return new DiskLruCacheStore(this, responseCache.getDiskLruCache());
     }
 
     public String getName() {
diff --git a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
index a62a6d9a..805aa3ac 100644
--- a/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
+++ b/ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
@@ -51,6 +51,12 @@ public void write(DataSink sink, T pojo, CompletedCallback completed) {
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         OutputStreamWriter out = new OutputStreamWriter(bout);
         gson.toJson(pojo, type, out);
+        try {
+            out.flush();
+        }
+        catch (final Exception e) {
+            throw new AssertionError(e);
+        }
         Util.writeAll(sink, bout.toByteArray(), completed);
     }
 }
