diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 2482d64a..15bf7524 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -19,6 +19,7 @@
 package com.loopj.android.http;
 
 import android.content.Context;
+import com.loopj.android.http.methods.HttpPatch;
 import org.apache.http.*;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
@@ -494,6 +495,33 @@ public void put(Context context, String url,Header[] headers, HttpEntity entity,
         sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
     }
 
+    //
+    // HTTP PATCH Requests
+    //
+
+    public void patch(String url, AsyncHttpResponseHandler responseHandler) {
+        put(null, url, null, responseHandler);
+    }
+
+    public void patch(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+        put(null, url, params, responseHandler);
+    }
+
+    public void patch(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+        put(context, url, paramsToEntity(params), null, responseHandler);
+    }
+
+    public void patch(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
+    }
+
+    public void patch( Context context, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler )
+    {
+        HttpEntityEnclosingRequestBase request = addEntityToRequestBase( new HttpPatch(url), entity);
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+    }
+
     //
     // HTTP DELETE Requests
     //
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 6002577d..b29419e6 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -15,6 +15,7 @@
 	 * field to be accessible
 	 */
 	protected String result;
+
 	protected AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
 
         @Override
@@ -70,11 +71,9 @@ protected void sendRequest(DefaultHttpClient client,
 
 	public abstract String onRequestFailed(Throwable error, String content);
 
-	public void delete(String url, RequestParams queryParams,
-			AsyncHttpResponseHandler responseHandler) {
-		// TODO what about query params??
-		delete(url, responseHandler);
-	}
+    //
+    // Get requests
+    //
 
 	public String get(String url, RequestParams params) {
 		this.get(url, params, responseHandler);
@@ -90,6 +89,10 @@ public String get(String url) {
 		return result;
 	}
 
+    //
+    // Put requests
+    //
+
 	public String put(String url, RequestParams params) {
 		this.put(url, params, responseHandler);
 		return result;
@@ -106,6 +109,10 @@ public String put(Context context, String url, HttpEntity entity, String content
         return result;
     }
 
+    //
+    // Post requests
+    //
+
 	public String post(String url, RequestParams params) {
 		this.post(url, params, responseHandler);
 		return result;
@@ -116,6 +123,16 @@ public String post(String url) {
 		return result;
 	}
 
+    public String post(Context context, String url, HttpEntity entity, String contentType)
+    {
+        this.put(context, url, entity, contentType, responseHandler);
+        return result;
+    }
+
+    //
+    // Delete requests
+    //
+
 	public String delete(String url, RequestParams params) {
 		this.delete(url, params, responseHandler);
 		return result;
@@ -126,4 +143,19 @@ public String delete(String url) {
 		return result;
 	}
 
+    public void delete(String url, RequestParams queryParams,
+                       AsyncHttpResponseHandler responseHandler) {
+        // TODO what about query params??
+        delete(url, responseHandler);
+    }
+
+    //
+    // Patch requests
+    //
+
+    public String patch(Context context, String url, HttpEntity entity, String contentType)
+    {
+        this.patch(context, url, entity, contentType, responseHandler);
+        return result;
+    }
 }
diff --git a/src/com/loopj/android/http/methods/HttpPatch.java b/src/com/loopj/android/http/methods/HttpPatch.java
new file mode 100644
index 00000000..cb2065d3
--- /dev/null
+++ b/src/com/loopj/android/http/methods/HttpPatch.java
@@ -0,0 +1,48 @@
+package com.loopj.android.http.methods;
+
+import java.net.URI;
+
+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
+
+/**
+ * HTTP PATCH method.
+ * <p>
+ * The HTTP PATCH method is defined in <a
+ * href="http://tools.ietf.org/html/rfc5789">RF5789</a>: <blockquote> The PATCH
+ * method requests that a set of changes described in the request entity be
+ * applied to the resource identified by the Request- URI. Differs from the PUT
+ * method in the way the server processes the enclosed entity to modify the
+ * resource identified by the Request-URI. In a PUT request, the enclosed entity
+ * origin server, and the client is requesting that the stored version be
+ * replaced. With PATCH, however, the enclosed entity contains a set of
+ * instructions describing how a resource currently residing on the origin
+ * server should be modified to produce a new version. </blockquote>
+ * </p>
+ *
+ * @since 4.2
+ */
+public class HttpPatch extends HttpEntityEnclosingRequestBase
+{
+
+    public final static String METHOD_NAME = "PATCH";
+
+    public HttpPatch() {
+        super();
+    }
+
+    public HttpPatch(final URI uri) {
+        super();
+        setURI(uri);
+    }
+
+    public HttpPatch(final String uri) {
+        super();
+        setURI(URI.create(uri));
+    }
+
+    @Override
+    public String getMethod() {
+        return METHOD_NAME;
+    }
+
+}
