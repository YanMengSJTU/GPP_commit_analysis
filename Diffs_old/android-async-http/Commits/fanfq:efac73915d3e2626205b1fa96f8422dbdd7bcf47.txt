diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 8832be0c..b9aa134f 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -18,16 +18,16 @@
 
 package com.loopj.android.http;
 
-import java.io.IOException;
-import java.net.ConnectException;
-import java.net.UnknownHostException;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.impl.client.AbstractHttpClient;
 import org.apache.http.protocol.HttpContext;
 
+import java.io.IOException;
+import java.net.ConnectException;
+import java.net.UnknownHostException;
+
 class AsyncHttpRequest implements Runnable {
     private final AbstractHttpClient client;
     private final HttpContext context;
@@ -41,26 +41,26 @@ public AsyncHttpRequest(AbstractHttpClient client, HttpContext context, HttpUriR
         this.context = context;
         this.request = request;
         this.responseHandler = responseHandler;
-        if(responseHandler instanceof BinaryHttpResponseHandler) {
+        if (responseHandler instanceof BinaryHttpResponseHandler) {
             this.isBinaryRequest = true;
         }
     }
 
     public void run() {
         try {
-            if(responseHandler != null){
+            if (responseHandler != null) {
                 responseHandler.sendStartMessage();
             }
 
             makeRequestWithRetries();
 
-            if(responseHandler != null) {
+            if (responseHandler != null) {
                 responseHandler.sendFinishMessage();
             }
         } catch (IOException e) {
-            if(responseHandler != null) {
+            if (responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                if(this.isBinaryRequest) {
+                if (this.isBinaryRequest) {
                     responseHandler.sendFailureMessage(e, (byte[]) null);
                 } else {
                     responseHandler.sendFailureMessage(e, (String) null);
@@ -70,13 +70,13 @@ public void run() {
     }
 
     private void makeRequest() throws IOException {
-        if(!Thread.currentThread().isInterrupted()) {
+        if (!Thread.currentThread().isInterrupted()) {
             HttpResponse response = client.execute(request, context);
-            if(!Thread.currentThread().isInterrupted()) {
-                if(responseHandler != null) {
+            if (!Thread.currentThread().isInterrupted()) {
+                if (responseHandler != null) {
                     responseHandler.sendResponseMessage(response);
                 }
-            } else{
+            } else {
                 //TODO: should raise InterruptedException? this block is reached whenever the request is cancelled before its response is received
             }
         }
@@ -92,11 +92,11 @@ private void makeRequestWithRetries() throws ConnectException {
             try {
                 makeRequest();
                 return;
-	    } catch (UnknownHostException e) {
-	        if(responseHandler != null) {
-	            responseHandler.sendFailureMessage(e, "can't resolve host");
-		}
-		return;
+            } catch (UnknownHostException e) {
+                if (responseHandler != null) {
+                    responseHandler.sendFailureMessage(e, "can't resolve host");
+                }
+                return;
             } catch (IOException e) {
                 cause = e;
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
