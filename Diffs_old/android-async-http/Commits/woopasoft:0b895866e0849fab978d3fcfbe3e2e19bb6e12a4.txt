diff --git a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
index 52663a07..ab149c8a 100755
--- a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -21,6 +21,7 @@
 import android.util.Log;
 
 import org.apache.http.Header;
+import org.apache.http.HttpException;
 import org.apache.http.HttpStatus;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -77,6 +78,18 @@ public void onSuccess(int statusCode, Header[] headers, JSONArray response) {
         Log.w(LOG_TAG, "onSuccess(int, Header[], JSONArray) was not overriden, but callback was received");
     }
 
+    /**
+     * Returns when request failed
+     * This is called on every request that fails. No matter the error type.
+     *
+     * @param statusCode    http response status line
+     * @param headers       response headers if any
+     * @param throwable     throwable describing the way request failed
+     */
+    public void onFailure(int statusCode, Header[] headers, Throwable throwable) {
+        Log.w(LOG_TAG, "onFailure(int, Header[], Throwable) was not overriden, but callback was received", throwable);
+    }
+
     /**
      * Returns when request failed
      *
@@ -122,16 +135,25 @@ public void run() {
                         postRunnable(new Runnable() {
                             @Override
                             public void run() {
+                                boolean requestFailed = false;
+
                                 if (jsonResponse instanceof JSONObject) {
                                     onSuccess(statusCode, headers, (JSONObject) jsonResponse);
                                 } else if (jsonResponse instanceof JSONArray) {
                                     onSuccess(statusCode, headers, (JSONArray) jsonResponse);
                                 } else if (jsonResponse instanceof String) {
                                     onFailure(statusCode, headers, (String) jsonResponse, new JSONException("Response cannot be parsed as JSON data"));
+                                    requestFailed = true;
                                 } else {
                                     onFailure(statusCode, headers, new JSONException("Unexpected response type " + jsonResponse.getClass().getName()), (JSONObject) null);
+                                    requestFailed = true;
                                 }
 
+                                if (requestFailed) {
+                                    // Call handler for every failure case
+                                    // Response might not be important in some error cases
+                                    onFailure(statusCode, headers, new HttpException("Request could not be completed"));
+                                }
                             }
                         });
                     } catch (final JSONException ex) {
@@ -139,6 +161,9 @@ public void run() {
                             @Override
                             public void run() {
                                 onFailure(statusCode, headers, ex, (JSONObject) null);
+                                // Call handler for every failure case
+                                // Response might not be important in some error cases
+                                onFailure(statusCode, headers, ex);
                             }
                         });
                     }
@@ -187,6 +212,10 @@ public void run() {
                         });
 
                     }
+
+                    // Call handler for every failure case
+                    // Response might not be important in some error cases
+                    onFailure(statusCode, headers, throwable);
                 }
             };
             if (!getUseSynchronousMode() && !getUsePoolThread()) {
