diff --git a/.classpath b/.classpath
index 14fcf527..4a93c1a5 100644
--- a/.classpath
+++ b/.classpath
@@ -4,5 +4,8 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="examples"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="lib" path="libs/gson-2.2.4.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/libs/gson-2.2.4.jar b/libs/gson-2.2.4.jar
new file mode 100644
index 00000000..9478253e
Binary files /dev/null and b/libs/gson-2.2.4.jar differ
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 2030265f..5cd32c61 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,11 +18,9 @@
 
 package com.loopj.android.http;
 
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-import org.apache.http.Header;
 import java.io.IOException;
+
+import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
diff --git a/src/com/loopj/android/http/GsonHttpResponseHandler.java b/src/com/loopj/android/http/GsonHttpResponseHandler.java
new file mode 100644
index 00000000..a0ebd8bc
--- /dev/null
+++ b/src/com/loopj/android/http/GsonHttpResponseHandler.java
@@ -0,0 +1,43 @@
+package com.loopj.android.http;
+
+import java.lang.reflect.Type;
+
+import org.apache.http.Header;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonParseException;
+
+public class GsonHttpResponseHandler<T> extends AsyncHttpResponseHandler {
+	
+    protected static final int SUCCESS_JSON_MESSAGE = 100;
+    
+    private Gson gson;
+    private Type type;
+    
+    public GsonHttpResponseHandler() {
+    	throw new RuntimeException("You must provide Gson and Type objects in order to use GsonHttpResponseHandler!");
+    }
+    
+    public GsonHttpResponseHandler(Gson gson, Type type) {
+    	this.gson = gson;
+    	this.type = type;
+    }
+    
+    public GsonHttpResponseHandler(Gson gson, Class<?> clazz) {
+    	this.gson = gson;
+    	this.type = clazz;
+    }
+    
+    public void onSuccess(T response) {}
+    
+    @Override
+    protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+    	try {
+    		T result = this.gson.fromJson(responseBody, this.type);
+    		this.onSuccess(result);
+    	} catch (JsonParseException ex) {
+    		this.sendFailureMessage(ex, responseBody);
+    	}
+    }
+
+}
