diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index ba2cb7d8..30294d20 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -20,7 +20,8 @@
     </application>
 
     <uses-sdk android:minSdkVersion="5" />
-
+    
     <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
 </manifest>
\ No newline at end of file
diff --git a/src/com/allthelucky/net/RequestManager.java b/src/com/allthelucky/net/RequestManager.java
index 16c65f6a..d11b9976 100644
--- a/src/com/allthelucky/net/RequestManager.java
+++ b/src/com/allthelucky/net/RequestManager.java
@@ -7,6 +7,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -16,8 +18,10 @@
 import org.json.JSONObject;
 
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.os.AsyncTask;
 import android.text.TextUtils;
+
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
 import com.loopj.android.http.RequestParams;
@@ -57,7 +61,7 @@ public void cancel(Context context) {
      * @param actionId
      */
     public void post(Context context, String url, RequestParams params, RequestListener requestListener, int actionId) {
-        asyncHttpClient.post(context, url, params, new RequeseHttpResponseHandler(requestListener, actionId));
+        asyncHttpClient.post(context, url, params, new HttpRequestListener(requestListener, actionId));
     }
 
     /**
@@ -71,7 +75,7 @@ public void post(Context context, String url, RequestParams params, RequestListe
      */
     public void post(Context context, String url, JSONObject params, RequestListener requestListener, int actionId) {
         asyncHttpClient.post(context, url, rpcToEntity(params.toString(), "application/json"), "application/json",
-                new RequeseHttpResponseHandler(requestListener, actionId));
+                new HttpRequestListener(requestListener, actionId));
     }
 
     /**
@@ -87,7 +91,7 @@ public void post(Context context, String url, JSONObject params, RequestListener
     public void post(Context context, String url, Header[] headers, JSONObject params, RequestListener requestListener,
             int actionId) {
         asyncHttpClient.post(context, url, headers, rpcToEntity(params.toString(), "application/json"),
-                "application/json", new RequeseHttpResponseHandler(requestListener, actionId));
+                "application/json", new HttpRequestListener(requestListener, actionId));
     }
 
     /**
@@ -101,7 +105,7 @@ public void post(Context context, String url, Header[] headers, JSONObject param
      */
     public void post(Context context, String url, String params, RequestListener requestListener, int actionId) {
         asyncHttpClient.post(context, url, rpcToEntity(params, "application/xml"), "application/xml",
-                new RequeseHttpResponseHandler(requestListener, actionId));
+                new HttpRequestListener(requestListener, actionId));
     }
 
     /**
@@ -117,79 +121,105 @@ public void post(Context context, String url, String params, RequestListener req
     public void post(Context context, String url, Header[] headers, String params, RequestListener requestListener,
             int actionId) {
         asyncHttpClient.post(context, url, headers, rpcToEntity(params, "application/xml"), "application/xml",
-                new RequeseHttpResponseHandler(requestListener, actionId));
+                new HttpRequestListener(requestListener, actionId));
     }
 
+    /**
+     * get数据
+     * 
+     * @param context
+     * @param url
+     * @param requestListener
+     * @param actionId
+     */
     public void get(Context context, String url, RequestListener requestListener, int actionId) {
         get(context, url, requestListener, false, actionId);
     }
 
+    /**
+     * get数据
+     * 
+     * @param context
+     * @param url
+     * @param requestListener
+     * @param cache
+     * @param actionId
+     */
     public void get(Context context, String url, RequestListener requestListener, boolean cache, int actionId) {
         if (!cache) {
-            asyncHttpClient.get(context, url, new RequeseHttpResponseHandler(requestListener, actionId));
+            asyncHttpClient.get(context, url, new HttpRequestListener(requestListener, actionId));
         } else {
             if (!hasCache(context, ApplicationUtils.urlEncode(url))) {
-                asyncHttpClient.get(context, url, new RequeseHttpResponseHandler(new CacheRequestListener(context, url,
-                        requestListener), actionId));
+                loadAndSaveResource(context, url, requestListener, 0l, actionId);
             } else {
-                loadCache(context, ApplicationUtils.urlEncode(url), requestListener, actionId);
+                checkCache(context, ApplicationUtils.urlEncode(url), requestListener, actionId);
             }
         }
     }
 
-    private class CacheRequestListener implements RequestListener {
-
-        private Context context = null;
-        private String url = "";
-        private RequestListener requestListener = null;
-
-        public CacheRequestListener(Context context, String url, RequestListener requestListener) {
-            this.context = context;
-            this.url = url;
-            this.requestListener = requestListener;
-        }
-
-        @Override
-        public void onStart() {
-            if (requestListener != null) {
-                requestListener.onStart();
-            }
-        }
+    /**
+     * 加载并缓存网络数据
+     * 
+     * @param context
+     * @param url
+     * @param requestListener
+     * @param actionId
+     */
+    private void loadAndSaveResource(final Context context, final String url, final RequestListener requestListener,
+            final long lastModified, final int actionId) {
+        asyncHttpClient.get(context, url, new HttpRequestListener(new CacheRequestListener(context, url,
+                requestListener, lastModified), actionId));
+    }
 
-        @Override
-        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
-            if (requestListener != null) {
-                requestListener.onCompleted(data, statusCode, description, actionId);
-            }
-            if (data != null && statusCode != RequestListener.ERR) {
-                saveCache(context, url, data);
+    private void checkCache(final Context context, final String url, final RequestListener requestListener,
+            final int actionId) {
+        if (!ApplicationUtils.hasNetwork(context)) {
+            loadCache(context, url, requestListener, actionId);
+        } else {
+            final SharedPreferences pref = context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE);
+            final String fileName = ApplicationUtils.encryptMD5(url);
+            final long lastModified = getLastModified(url);
+            if (lastModified != -1 && lastModified != pref.getLong(fileName, 0l)) {
+                loadAndSaveResource(context, url, requestListener, lastModified, actionId);
+            } else {
+                loadCache(context, url, requestListener, actionId);
             }
         }
     }
 
     /**
-     * 保存
+     * get last modified time
      */
-    private void saveCache(Context context, String url, byte[] data) {
+    private long getLastModified(final String url) {
         try {
-            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
-            FileOutputStream os = context.openFileOutput(ApplicationUtils.encryptMD5(url), Context.MODE_PRIVATE);
-
-            byte[] buffer = new byte[1024];
-            int len = 0;
-            while ((len = inputStream.read(buffer)) > 0) {
-                os.write(buffer, 0, len);
+            URL u = new URL(url);
+            HttpURLConnection conn = (HttpURLConnection) u.openConnection();
+            conn.setConnectTimeout(5 * 1000);
+            conn.setRequestProperty("User-agent", "Mozilla/4.0");
+            conn.setRequestProperty("Connection", "Keep-Alive");
+            conn.setRequestProperty("Charset", "UTF-8");
+            conn.setRequestMethod("GET");
+            conn.connect();
+            long lastModified = -1;
+            if (conn.getResponseCode() == 200) {
+                lastModified = conn.getLastModified();
             }
-
-            os.close();
-            inputStream.close();
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
+            conn.disconnect();
+            return lastModified;
+        } catch (Exception e) {
             e.printStackTrace();
+            return -1;
         }
     }
 
+    /**
+     * 读缓存
+     * 
+     * @param context
+     * @param url
+     * @param requestListener
+     * @param actionId
+     */
     private void loadCache(final Context context, final String url, final RequestListener requestListener,
             final int actionId) {
         requestListener.onStart();
@@ -254,11 +284,78 @@ public static HttpEntity rpcToEntity(String params, String contentType) {
         return entity;
     }
 
-    final class RequeseHttpResponseHandler extends AsyncHttpResponseHandler {
+    /**
+     * 网络请求+缓存处理
+     */
+    private class CacheRequestListener implements RequestListener {
+        private Context context = null;
+        private String url = "";
+        private RequestListener requestListener = null;
+        private long lastModified;
+
+        public CacheRequestListener(Context context, String url, RequestListener requestListener, long lastModified) {
+            this.context = context;
+            this.url = url;
+            this.requestListener = requestListener;
+            this.lastModified = lastModified;
+        }
+
+        @Override
+        public void onStart() {
+            if (requestListener != null) {
+                requestListener.onStart();
+            }
+        }
+
+        @Override
+        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
+            if (requestListener != null) {
+                requestListener.onCompleted(data, statusCode, description, actionId);
+            }
+            if (data != null && statusCode != RequestListener.ERR) {
+                saveCache(context, url, data);
+            }
+        }
+
+        /**
+         * 保存数据
+         */
+        private void saveCache(Context context, String url, byte[] data) {
+            try {
+                ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
+                FileOutputStream os = context.openFileOutput(ApplicationUtils.encryptMD5(url), Context.MODE_PRIVATE);
+
+                byte[] buffer = new byte[1024];
+                int len = 0;
+                while ((len = inputStream.read(buffer)) > 0) {
+                    os.write(buffer, 0, len);
+                }
+
+                os.close();
+                inputStream.close();
+                saveLastModified();
+
+            } catch (FileNotFoundException e) {
+                e.printStackTrace();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        private void saveLastModified() {
+            context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE).edit()
+                    .putLong(ApplicationUtils.encryptMD5(url), lastModified).commit();
+        }
+    }
+
+    /**
+     * 网络请求处理
+     */
+    private class HttpRequestListener extends AsyncHttpResponseHandler {
         private RequestListener requestListener;
         private int actionId;
 
-        public RequeseHttpResponseHandler(RequestListener requestListener, int actionId) {
+        public HttpRequestListener(RequestListener requestListener, int actionId) {
             this.requestListener = requestListener;
             this.actionId = actionId;
         }
diff --git a/src/com/allthelucky/net/sample/TestActivity.java b/src/com/allthelucky/net/sample/TestActivity.java
index 96e135c1..73a9a42d 100644
--- a/src/com/allthelucky/net/sample/TestActivity.java
+++ b/src/com/allthelucky/net/sample/TestActivity.java
@@ -29,8 +29,6 @@ protected void onCreate(Bundle savedInstanceState) {
         testParamsListRequest();
         testJSONObjectRequest();
         testXMLRequest();
-        TextToSpeech tts = new TextToSpeech(this, null);  ;  
-        tts.speak("测试一下", TextToSpeech.QUEUE_FLUSH, null);  
     }
 
 
@@ -52,13 +50,13 @@ public void onStart() {
         public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
             System.out.println("==========" + actionId + ":" + description + "===========");
             if (RequestListener.ERR != statusCode) {
-                System.out.println("result:" + ApplicationUtils.bytesToString(data));
+                //System.out.println("result:" + ApplicationUtils.bytesToString(data));
             }
         }
     };
     
     private void testGetCache() {
-        final String url = "http://www.baidu.com/img/shouye_b5486898c692066bd2cbaeda86d74448.gif";
+        final String url = "http://www.winfirm.net/helloworld.html";
         requestManager.get(TestActivity.this, url , requestListener, true, -2); 
     }
     
