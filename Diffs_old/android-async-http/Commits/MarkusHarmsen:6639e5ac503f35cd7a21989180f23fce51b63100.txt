diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 7ce9cf85..7cf792d0 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -113,6 +113,13 @@
      * Creates a new AsyncHttpClient.
      */
     public AsyncHttpClient() {
+    	this(String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
+    }
+    
+    /**
+     * Creates a new AsyncHttpClient with given agent.
+     */
+    public AsyncHttpClient(String agent) {
         BasicHttpParams httpParams = new BasicHttpParams();
 
         ConnManagerParams.setTimeout(httpParams, socketTimeout);
@@ -125,7 +132,7 @@ public AsyncHttpClient() {
         HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
         HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
-        HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
+        HttpProtocolParams.setUserAgent(httpParams, agent);
 
         SchemeRegistry schemeRegistry = new SchemeRegistry();
         schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 2c80e35c..76f89986 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -23,6 +23,7 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -56,6 +57,7 @@
     private static String ENCODING = "UTF-8";
 
     protected ConcurrentHashMap<String, String> urlParams;
+    protected ConcurrentHashMap<String, ArrayList<String>> urlArrayParams;
     protected ConcurrentHashMap<String, FileWrapper> fileParams;
 
     /**
@@ -100,6 +102,17 @@ public void put(String key, String value){
             urlParams.put(key, value);
         }
     }
+    
+    /**
+     * Adds a key/value array string pair to the request.
+     * @param key the key name for the new param. "[]" will be appended.
+     * @param values the values array string for the new param.
+     */
+    public void put(String key, ArrayList<String> values){
+        if(key != null && values != null) {
+            urlArrayParams.put(key + "[]", values);
+        }
+    }
 
     /**
      * Adds a file to the request.
@@ -162,6 +175,17 @@ public String toString() {
             result.append("=");
             result.append(entry.getValue());
         }
+        
+        for(ConcurrentHashMap.Entry<String, ArrayList<String>> entry : urlArrayParams.entrySet()) {
+            if(result.length() > 0)
+                result.append("&");
+
+            for(String value : entry.getValue()) {
+            	result.append(entry.getKey());
+            	result.append("=");
+            	result.append(value);            	
+            }
+        }
 
         for(ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             if(result.length() > 0)
@@ -188,6 +212,14 @@ public HttpEntity getEntity() {
             for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
                 multipartEntity.addPart(entry.getKey(), entry.getValue());
             }
+            
+            // Add array string params
+            for(ConcurrentHashMap.Entry<String, ArrayList<String>> entry : urlArrayParams.entrySet()) {
+            	String key = entry.getKey();
+            	for(String value : entry.getValue()) {
+            		multipartEntity.addPart(key, value);
+            	}
+            }
 
             // Add file params
             int currentIndex = 0;
@@ -217,17 +249,27 @@ public HttpEntity getEntity() {
         return entity;
     }
 
-    private void init(){
+    private void init() {
         urlParams = new ConcurrentHashMap<String, String>();
+        urlArrayParams = new ConcurrentHashMap<String, ArrayList<String>>();
         fileParams = new ConcurrentHashMap<String, FileWrapper>();
     }
 
     protected List<BasicNameValuePair> getParamsList() {
         List<BasicNameValuePair> lparams = new LinkedList<BasicNameValuePair>();
 
+        // Add string params
         for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
             lparams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
         }
+        
+        // Add array string params
+        for(ConcurrentHashMap.Entry<String, ArrayList<String>> entry : urlArrayParams.entrySet()) {
+        	String key = entry.getKey();
+        	for(String value : entry.getValue()) {
+        		lparams.add(new BasicNameValuePair(key, value));
+        	}
+        }
 
         return lparams;
     }
