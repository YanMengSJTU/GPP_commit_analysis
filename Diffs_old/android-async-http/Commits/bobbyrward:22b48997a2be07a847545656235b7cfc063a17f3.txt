diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6eddad6a..050b92d0 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -66,7 +66,7 @@
  * });
  * </pre>
  */
-public class AsyncHttpResponseHandler {
+public abstract class AsyncHttpResponseHandler {
     private static final int SUCCESS_MESSAGE = 0;
     private static final int FAILURE_MESSAGE = 1;
     private static final int START_MESSAGE = 2;
@@ -148,29 +148,15 @@ protected void sendFinishMessage() {
     }
 
 
-    //
-    // Pre-processing of messages (in original calling thread, typically the UI thread)
-    //
-
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
-    }
-
-    protected void handleFailureMessage(Throwable e, String responseBody) {
-        onFailure(e, responseBody);
-    }
-
-
-
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
+                onSuccess((String)msg.obj);
                 break;
             case FAILURE_MESSAGE:
                 Object[] repsonse = (Object[])msg.obj;
-                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
+                onFailure((Throwable)repsonse[0], (String)repsonse[1]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -181,7 +167,7 @@ protected void handleMessage(Message msg) {
         }
     }
 
-    protected void sendMessage(Message msg) {
+    protected final void sendMessage(Message msg) {
         if(handler != null){
             handler.sendMessage(msg);
         } else {
@@ -189,7 +175,7 @@ protected void sendMessage(Message msg) {
         }
     }
 
-    protected Message obtainMessage(int responseMessage, Object response) {
+    protected final Message obtainMessage(int responseMessage, Object response) {
         Message msg = null;
         if(handler != null){
             msg = this.handler.obtainMessage(responseMessage, response);
@@ -203,7 +189,7 @@ protected Message obtainMessage(int responseMessage, Object response) {
 
 
     // Interface to AsyncHttpRequest
-    void sendResponseMessage(HttpResponse response) {
+    final void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         String responseBody = null;
         try {
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 9ceb6f5b..546493c5 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -35,7 +35,7 @@
  * Additionally, you can override the other event methods from the 
  * parent class.
  */
-public class JsonHttpResponseHandler extends AsyncHttpResponseHandler {
+public abstract class JsonHttpResponseHandler extends AsyncHttpResponseHandler {
     //
     // Callbacks to be overridden, typically anonymously
     //
@@ -60,11 +60,9 @@ public void onSuccess(JSONArray response) {}
 
     // Utility methods
     @Override
-    protected void handleSuccessMessage(String responseBody) {
-        super.handleSuccessMessage(responseBody);
-
+    public final void onSuccess(String responseBody) {
         try {
-            Object jsonResponse = parseResponse(responseBody);
+            Object jsonResponse = new JSONTokener(responseBody).nextValue();
             if(jsonResponse instanceof JSONObject) {
                 onSuccess((JSONObject)jsonResponse);
             } else if(jsonResponse instanceof JSONArray) {
@@ -76,8 +74,4 @@ protected void handleSuccessMessage(String responseBody) {
             onFailure(e, responseBody);
         }
     }
-
-    protected Object parseResponse(String responseBody) throws JSONException {
-        return new JSONTokener(responseBody).nextValue();
-    }
 }
\ No newline at end of file
