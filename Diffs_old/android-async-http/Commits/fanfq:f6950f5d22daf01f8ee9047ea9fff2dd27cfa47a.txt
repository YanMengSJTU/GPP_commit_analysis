diff --git a/backup/build.xml b/backup/build.xml
index 68e867a1..316d6b94 100644
--- a/backup/build.xml
+++ b/backup/build.xml
@@ -17,7 +17,6 @@
         
         <exec executable="git" outputproperty="package.versionname">
           <arg value="describe"/>
-          <arg value='--match=${package.name}-*'/>
           <arg value="--tags"/>
           <arg value="--dirty"/>
           <arg value="--always"/>
@@ -26,7 +25,19 @@
     </target>
 
     <!-- Standard jar stuff -->
-    <property name="lib.dir" value="${sdk.dir}/platforms/${target}" />
+    <property environment="env"/>
+    <condition property="android.base" value="${sdk.dir}" else="${env.ANDROID_HOME}">
+      <isset property="sdk.dir" />
+    </condition>
+    <fail message="Please set either the sdk.dir property or the ANDROID_HOME environment variable to point to your Android SDK installation.">
+      <condition>
+        <not>
+          <available file="${android.base}" type="dir"/>
+        </not>
+      </condition>
+    </fail>
+
+    <property name="lib.dir" value="${android.base}/platforms/${target}" />
     <property name="build.dir" value="./build"/>
     <property name="classes.dir"  value="${build.dir}/classes"/>
     <buildnumber file="build.num" />
@@ -43,7 +54,7 @@
             sourcepath="gen:src"
             destdir="doc"
             packagenames="${package.packagename}"
-            linkoffline="http://d.android.com/reference ${sdk.dir}/docs/reference" 
+            linkoffline="http://d.android.com/reference ${android.base}/docs/reference" 
             additionalparam="-author  -version"
             />
     </target>
diff --git a/examples/TwitterRestClient.java b/examples/TwitterRestClient.java
index f55708cf..387a8711 100644
--- a/examples/TwitterRestClient.java
+++ b/examples/TwitterRestClient.java
@@ -12,7 +12,7 @@ public static void get(String url, RequestParams params, AsyncHttpResponseHandle
     }
 
     public static void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.get(getAbsoluteUrl(url), params, responseHandler);
+        client.post(getAbsoluteUrl(url), params, responseHandler);
     }
 
     private static String getAbsoluteUrl(String relativeUrl) {
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 1c98434f..6c6ba088 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,8 +18,9 @@
 
 package com.loopj.android.http;
 
-import java.io.IOException;
-
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -27,9 +28,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Message;
-import android.os.Looper;
+import java.io.IOException;
 
 /**
  * Used to intercept and handle the responses from requests made using 
@@ -109,6 +108,15 @@ public void onFinish() {}
      */
     public void onSuccess(String content) {}
 
+    /**
+     * Fired when a request returns successfully, override to handle in your own code
+     * @param statusCode the status code of the response
+     * @param content the body of the HTTP response from the server
+     */
+    public void onSuccess(int statusCode, String content) {
+        onSuccess(content);
+    }
+
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
@@ -131,8 +139,8 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(int statusCode, String responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -156,8 +164,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(int statusCode, String responseBody) {
+        onSuccess(statusCode, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -168,13 +176,16 @@ protected void handleFailureMessage(Throwable e, String responseBody) {
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+        Object[] response;
+
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
+                response = (Object[])msg.obj;
+                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1]);
                 break;
             case FAILURE_MESSAGE:
-                Object[] repsonse = (Object[])msg.obj;
-                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
+                response = (Object[])msg.obj;
+                handleFailureMessage((Throwable)response[0], (String)response[1]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -205,7 +216,6 @@ protected Message obtainMessage(int responseMessage, Object response) {
         return msg;
     }
 
-
     // Interface to AsyncHttpRequest
     void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
@@ -224,7 +234,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(status.getStatusCode(), responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 967f632e..aff1c631 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -18,8 +18,7 @@
 
 package com.loopj.android.http;
 
-import java.io.IOException;
-
+import android.os.Message;
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -28,9 +27,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Message;
-import android.os.Looper;
+import java.io.IOException;
 
 /**
  * Used to intercept and handle the responses from requests made using
@@ -86,14 +83,24 @@ public BinaryHttpResponseHandler(String[] allowedContentTypes) {
 
     /**
      * Fired when a request returns successfully, override to handle in your own code
-     * @param content the body of the HTTP response from the server
+     * @param binaryData the body of the HTTP response from the server
      */
     public void onSuccess(byte[] binaryData) {}
 
+    /**
+     * Fired when a request returns successfully, override to handle in your own code
+     * @param statusCode the status code of the response
+     * @param binaryData the body of the HTTP response from the server
+     */
+    public void onSuccess(int statusCode, byte[] binaryData) {
+        onSuccess(binaryData);
+    }
+
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
-     * @param content the response body, if any
+     * @param binaryData the response body, if any
+     * @deprecated
      */
     public void onFailure(Throwable error, byte[] binaryData) {
         // By default, call the deprecated onFailure(Throwable) for compatibility
@@ -105,8 +112,8 @@ public void onFailure(Throwable error, byte[] binaryData) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(byte[] responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(int statusCode, byte[] responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{statusCode, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, byte[] responseBody) {
@@ -117,8 +124,8 @@ protected void sendFailureMessage(Throwable e, byte[] responseBody) {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(byte[] responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(int statusCode, byte[] responseBody) {
+        onSuccess(statusCode, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, byte[] responseBody) {
@@ -127,12 +134,14 @@ protected void handleFailureMessage(Throwable e, byte[] responseBody) {
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+        Object[] response;
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((byte[])msg.obj);
+                response = (Object[])msg.obj;
+                handleSuccessMessage(((Integer) response[0]).intValue() , (byte[]) response[1]);
                 break;
             case FAILURE_MESSAGE:
-                Object[] response = (Object[])msg.obj;
+                response = (Object[])msg.obj;
                 handleFailureMessage((Throwable)response[0], (byte[])response[1]);
                 break;
             default:
@@ -177,7 +186,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(status.getStatusCode(), responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index e574691e..8d3973ac 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -61,6 +61,29 @@ public void onSuccess(JSONObject response) {}
      */
     public void onSuccess(JSONArray response) {}
 
+    /**
+     * Fired when a request returns successfully and contains a json object
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param response the parsed json object found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, JSONObject response) {
+        onSuccess(response);
+    }
+
+
+    /**
+     * Fired when a request returns successfully and contains a json array
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param response the parsed json array found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, JSONArray response) {
+        onSuccess(response);
+    }
+
     public void onFailure(Throwable e, JSONObject errorResponse) {}
     public void onFailure(Throwable e, JSONArray errorResponse) {}
 
@@ -70,10 +93,10 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
     //
 
     @Override
-    protected void sendSuccessMessage(String responseBody) {
+    protected void sendSuccessMessage(int statusCode, String responseBody) {
         try {
             Object jsonResponse = parseResponse(responseBody);
-            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, jsonResponse));
+            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse}));
         } catch(JSONException e) {
             sendFailureMessage(e, responseBody);
         }
@@ -88,20 +111,21 @@ protected void sendSuccessMessage(String responseBody) {
     protected void handleMessage(Message msg) {
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
-                handleSuccessJsonMessage(msg.obj);
+                Object[] response = (Object[]) msg.obj;
+                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1]);
                 break;
             default:
                 super.handleMessage(msg);
         }
     }
 
-    protected void handleSuccessJsonMessage(Object jsonResponse) {
+    protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse) {
         if(jsonResponse instanceof JSONObject) {
-            onSuccess((JSONObject)jsonResponse);
+            onSuccess(statusCode, (JSONObject)jsonResponse);
         } else if(jsonResponse instanceof JSONArray) {
-            onSuccess((JSONArray)jsonResponse);
+            onSuccess(statusCode, (JSONArray)jsonResponse);
         } else {
-            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()));
+            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
     }
 
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 00731941..607fb6f7 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -90,6 +90,25 @@ public RequestParams(String key, String value) {
         put(key, value);
     }
 
+    /**
+     * Constructs a new RequestParams instance and populate it with multiple
+     * initial key/value string param.
+     * @param keysAndValues a sequence of keys and values. Objects are
+     * automatically converted to Strings (including the value {@code null}).
+     * @throws IllegalArgumentException if the number of arguments isn't even.
+     */
+    public RequestParams(Object... keysAndValues) {
+      init();
+      int len = keysAndValues.length;
+      if (len % 2 != 0)
+        throw new IllegalArgumentException("Supplied arguments must be even");
+      for (int i = 0; i < len; i += 2) {
+        String key = String.valueOf(keysAndValues[i]);
+        String val = String.valueOf(keysAndValues[i + 1]);
+        put(key, val);
+      }
+    }
+
     /**
      * Adds a key/value string pair to the request.
      * @param key the key name for the new param.
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 37b74344..96d7c00a 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -65,7 +65,7 @@ public RetryHandler(int maxRetries) {
     }
 
     public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
-        boolean retry;
+        boolean retry = true;
 
         Boolean b = (Boolean) context.getAttribute(ExecutionContext.HTTP_REQ_SENT);
         boolean sent = (b != null && b.booleanValue());
@@ -82,16 +82,13 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         } else if (!sent) {
             // for most other errors, retry only if request hasn't been fully sent yet
             retry = true;
-        } else {
+        }
+
+        if(retry) {
             // resend all idempotent requests
-            HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
+            HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute( ExecutionContext.HTTP_REQUEST );
             String requestType = currentReq.getMethod();
-            if(!requestType.equals("POST")) {
-                retry = true;
-            } else {
-                // otherwise do not retry
-                retry = false;
-            }
+            retry = !requestType.equals("POST");
         }
 
         if(retry) {
