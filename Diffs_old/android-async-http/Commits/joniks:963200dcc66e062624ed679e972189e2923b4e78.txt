diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 9ef10325..bc55a3b2 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -21,6 +21,9 @@ Don't be discouraged if your pull request is rejected. This is not a deadline an
 
 ISSUES
 ---------
+
+![Read the ISSUES?](http://i.imgur.com/LPWyLe7.jpg "Read the ISSUES?")
+
 The issues system is the place to report bugs and not for submitting patches or new functionality. As helpful as we would like to be, we cannot replace the developer and we certainly do not see what you're seeing. So when you come to report an issue, follow these simple rules:  
 
   * Report bugs in the English language only
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index 8ea2f2fd..d2bbd6aa 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -9,6 +9,7 @@
     <application
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
+        android:name=".SampleApplication"
         android:theme="@style/AppTheme">
         <activity android:name=".WaypointsActivity">
             <intent-filter>
@@ -35,6 +36,7 @@
         <activity android:name=".CustomCASample"/>
         <activity android:name=".RetryRequestSample"/>
         <activity android:name=".RangeResponseSample"/>
+        <activity android:name=".Http401AuthSample"/>
 
         <service android:name=".services.ExampleIntentService"/>
     </application>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java b/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
new file mode 100644
index 00000000..1e89b65d
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
@@ -0,0 +1,228 @@
+/*
+    Android Asynchronous Http Client Sample
+    Copyright (c) 2014 Marek Sebera <marek.sebera@gmail.com>
+    http://loopj.com
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+package com.loopj.android.http.sample;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.fasterxml.jackson.core.JsonFactory;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.Base64;
+import com.loopj.android.http.BaseJsonHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.ResponseHandlerInterface;
+import com.loopj.android.http.sample.util.SampleJSON;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.message.BasicHeader;
+
+import java.util.List;
+import java.util.Locale;
+
+/**
+ * This sample demonstrates how to implement HTTP 401 Basic Authentication.
+ *
+ * @author Noor Dawod <github@fineswap.com>
+ */
+public class Http401AuthSample extends GetSample {
+
+    private static final String LOG_TAG = "Http401Auth";
+    private static final String HEADER_WWW_AUTHENTICATE = "WWW-Authenticate";
+    private static final String HEADER_AUTHORIZATION = "Authorization";
+    private static final String HEADER_REALM_PREFIX = "realm=";
+    private static final String HEADER_BASIC = "basic";
+
+    private static final String SECRET_USERNAME = "ahc";
+    private static final String SECRET_PASSWORD = "LetMeIn";
+
+    private String userName;
+    private String passWord;
+
+    public void retryRequest() {
+        // File is still smaller than remote file; send a new request.
+        onRunButtonPressed();
+    }
+
+    @Override
+    public String getDefaultURL() {
+        return "http://httpbin.org/basic-auth/" + SECRET_USERNAME + "/" + SECRET_PASSWORD;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_401_unauth;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
+    }
+
+    @Override
+    public Header[] getRequestHeaders() {
+        List<Header> headers = getRequestHeadersList();
+
+        // Add authentication header.
+        if (userName != null && passWord != null) {
+            byte[] base64bytes = Base64.encode(
+                    (userName + ":" + passWord).getBytes(),
+                    Base64.DEFAULT
+            );
+            String credentials = new String(base64bytes);
+            headers.add(new BasicHeader(HEADER_AUTHORIZATION, HEADER_BASIC + " " + credentials));
+        }
+
+        return headers.toArray(new Header[headers.size()]);
+    }
+
+    @Override
+    public ResponseHandlerInterface getResponseHandler() {
+        return new BaseJsonHttpResponseHandler<SampleJSON>() {
+
+            @Override
+            public void onStart() {
+                clearOutputs();
+            }
+
+            @Override
+            public void onSuccess(int statusCode, Header[] headers, String rawJsonResponse, SampleJSON response) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                if (response != null) {
+                    debugResponse(LOG_TAG, rawJsonResponse);
+                }
+            }
+
+            @Override
+            public void onFailure(int statusCode, Header[] headers, Throwable throwable, String rawJsonData, SampleJSON errorResponse) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugThrowable(LOG_TAG, throwable);
+
+                // Ask the user for credentials if required by the server.
+                if (statusCode == 401) {
+                    String realm = "Protected Page";
+                    String authType = null;
+
+                    // Cycle through the headers and look for the WWW-Authenticate header.
+                    for (Header header : headers) {
+                        String headerName = header.getName();
+                        if (HEADER_WWW_AUTHENTICATE.equalsIgnoreCase(headerName)) {
+                            String headerValue = header.getValue().trim();
+                            String headerValueLowerCase = headerValue.toLowerCase(Locale.US);
+
+                            // Get the type of auth requested.
+                            int charPos = headerValueLowerCase.indexOf(' ');
+                            if (0 < charPos) {
+                                authType = headerValueLowerCase.substring(0, charPos);
+
+                                // The second part should begin with a "realm=" prefix.
+                                if (headerValueLowerCase.substring(1 + charPos).startsWith(HEADER_REALM_PREFIX)) {
+                                    // The new realm value, including any possible wrapping quotation.
+                                    realm = headerValue.substring(1 + charPos + HEADER_REALM_PREFIX.length());
+
+                                    // If realm starts with a quote, remove surrounding quotes.
+                                    if (realm.charAt(0) == '"' || realm.charAt(0) == '\'') {
+                                        realm = realm.substring(1, realm.length() - 1);
+                                    }
+                                }
+                            }
+                        }
+                    }
+
+                    // We will support basic auth in this sample.
+                    if (authType != null && HEADER_BASIC.equals(authType)) {
+                        // Show a dialog for the user and request user/pass.
+                        Log.d(LOG_TAG, HEADER_REALM_PREFIX + realm);
+
+                        // Present the dialog.
+                        postRunnable(new DialogRunnable(realm));
+                    }
+                }
+            }
+
+            @Override
+            protected SampleJSON parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
+                return new ObjectMapper().readValues(new JsonFactory().createParser(rawJsonData), SampleJSON.class).next();
+            }
+        };
+    }
+
+    private class DialogRunnable implements Runnable, DialogInterface.OnClickListener {
+
+        final String realm;
+        final View dialogView;
+
+        public DialogRunnable(String realm) {
+            this.realm = realm;
+            this.dialogView = LayoutInflater
+                    .from(Http401AuthSample.this)
+                    .inflate(R.layout.credentials, new LinearLayout(Http401AuthSample.this), false);
+
+            // Update the preface text with correct credentials.
+            TextView preface = (TextView) dialogView.findViewById(R.id.label_credentials);
+            String prefaceText = preface.getText().toString();
+
+            // Substitute placeholders, and re-set the value.
+            preface.setText(String.format(prefaceText, SECRET_USERNAME, SECRET_PASSWORD));
+        }
+
+        @Override
+        public void run() {
+            AlertDialog.Builder builder = new AlertDialog.Builder(Http401AuthSample.this);
+            builder.setTitle(realm);
+            builder.setView(dialogView);
+            builder.setPositiveButton(android.R.string.ok, this);
+            builder.setNegativeButton(android.R.string.cancel, this);
+            builder.show();
+        }
+
+        @Override
+        public void onClick(DialogInterface dialog, int which) {
+            switch (which) {
+                case DialogInterface.BUTTON_POSITIVE:
+                    // Dismiss the dialog.
+                    dialog.dismiss();
+
+                    // Update the username and password variables.
+                    userName = ((EditText) dialogView.findViewById(R.id.field_username)).getText().toString();
+                    passWord = ((EditText) dialogView.findViewById(R.id.field_password)).getText().toString();
+
+                    // Refetch the remote file.
+                    retryRequest();
+
+                    break;
+
+                case DialogInterface.BUTTON_NEGATIVE:
+                    // Dismiss the dialog.
+                    dialog.dismiss();
+
+                    break;
+            }
+        }
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleApplication.java b/sample/src/main/java/com/loopj/android/http/sample/SampleApplication.java
new file mode 100644
index 00000000..2ef13dc0
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleApplication.java
@@ -0,0 +1,34 @@
+package com.loopj.android.http.sample;
+
+import android.annotation.TargetApi;
+import android.app.Application;
+import android.os.Build;
+import android.os.StrictMode;
+import android.util.Log;
+
+public class SampleApplication extends Application {
+
+    private static final String LOG_TAG = "SampleApplication";
+
+    @Override
+    public void onCreate() {
+        setStrictMode();
+        super.onCreate();
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    private void setStrictMode() {
+        if (Integer.valueOf(Build.VERSION.SDK) > 3) {
+            Log.d(LOG_TAG, "Enabling StrictMode policy over Sample application");
+            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
+                    .detectAll()
+                    .penaltyLog()
+                    .penaltyDeath()
+                    .build());
+            StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
+                    .detectAll()
+                    .penaltyLog()
+                    .build());
+        }
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index c9954750..bbb0fe13 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -50,7 +50,8 @@
         new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
         new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
         new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
-        new SampleConfig(R.string.title_range_sample, RangeResponseSample.class)
+        new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
+        new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class)
     };
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java b/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java
index 02d5569d..779c2f0e 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java
@@ -18,7 +18,7 @@
 
 package com.loopj.android.http.sample.util;
 
-import android.annotation.TargetApi;
+import android.os.Build;
 import android.util.Log;
 
 import com.loopj.android.http.AsyncHttpClient;
@@ -181,10 +181,9 @@ public Socket createSocket() throws IOException {
      * @param host   Hostname to connect to
      * @see <a href="https://code.google.com/p/android/issues/detail?id=13117#c14">https://code.google.com/p/android/issues/detail?id=13117#c14</a>
      */
-    @TargetApi(4)
     private void injectHostname(Socket socket, String host) {
         try {
-            if (android.os.Build.VERSION.SDK_INT < 14) {
+            if (Integer.valueOf(Build.VERSION.SDK) >= 4) {
                 Field field = InetAddress.class.getDeclaredField("hostName");
                 field.setAccessible(true);
                 field.set(socket.getInetAddress(), host);
diff --git a/sample/src/main/res/layout/credentials.xml b/sample/src/main/res/layout/credentials.xml
new file mode 100644
index 00000000..89ca0d9b
--- /dev/null
+++ b/sample/src/main/res/layout/credentials.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  android:layout_width="fill_parent"
+  android:layout_height="wrap_content"
+  android:paddingTop="10dp"
+  android:paddingBottom="0dp"
+  android:paddingLeft="10dp"
+  android:paddingRight="10dp"
+  android:orientation="vertical"
+>
+  <TextView
+    android:id="@+id/label_credentials"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginTop="0dp"
+    android:layout_marginBottom="10dp"
+    android:layout_marginLeft="0dp"
+    android:layout_marginRight="0dp"
+    android:text="@string/label_credentials"
+    android:textColor="@color/dialog_color"
+  />
+  <EditText
+    android:id="@+id/field_username"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginTop="0dp"
+    android:layout_marginBottom="5dp"
+    android:layout_marginLeft="0dp"
+    android:layout_marginRight="0dp"
+    android:inputType="text"
+    android:hint="@string/field_username"
+  />
+  <EditText
+    android:id="@+id/field_password"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginTop="0dp"
+    android:layout_marginBottom="5dp"
+    android:layout_marginLeft="0dp"
+    android:layout_marginRight="0dp"
+    android:inputType="textPassword"
+    android:hint="@string/field_password"
+  />
+</LinearLayout>
diff --git a/sample/src/main/res/values-v11/colors.xml b/sample/src/main/res/values-v11/colors.xml
new file mode 100644
index 00000000..02e02580
--- /dev/null
+++ b/sample/src/main/res/values-v11/colors.xml
@@ -0,0 +1,5 @@
+<resources>
+
+    <color name="dialog_color">#FF333333</color>
+
+</resources>
diff --git a/sample/src/main/res/values-v14/colors.xml b/sample/src/main/res/values-v14/colors.xml
new file mode 100644
index 00000000..02e02580
--- /dev/null
+++ b/sample/src/main/res/values-v14/colors.xml
@@ -0,0 +1,5 @@
+<resources>
+
+    <color name="dialog_color">#FF333333</color>
+
+</resources>
diff --git a/sample/src/main/res/values/colors.xml b/sample/src/main/res/values/colors.xml
new file mode 100644
index 00000000..eea0b2d7
--- /dev/null
+++ b/sample/src/main/res/values/colors.xml
@@ -0,0 +1,5 @@
+<resources>
+
+    <color name="dialog_color">#FFFFFFFF</color>
+
+</resources>
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 0dba336b..1285510c 100755
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -3,10 +3,15 @@
 <resources>
     <string name="app_name">Android Async Http Samples</string>
 
+    <string name="field_username">Username</string>
+    <string name="field_password">Password</string>
+
     <string name="button_run">Run</string>
+    <string name="button_cancel">Cancel</string>
+
     <string name="label_headers">Headers (key=val, one per line)</string>
     <string name="label_req_body">Request body</string>
-    <string name="button_cancel">Cancel</string>
+    <string name="label_credentials">Server requests authentication.\nTo gain access, enter:\n\nUsername: %1$s\nPassword: %2$s</string>
 
     <string name="title_get_sample">GET</string>
     <string name="title_json_sample">GET JSON and parse it</string>
@@ -28,4 +33,5 @@
     <string name="title_custom_ca">Custom CA Example</string>
     <string name="title_retry_handler">Retrying requests by Exception</string>
     <string name="title_range_sample">Range response handling</string>
+    <string name="title_401_unauth">401 basic authentication</string>
 </resources>
