diff --git a/.classpath b/.classpath
index 14fcf527..67afc543 100644
--- a/.classpath
+++ b/.classpath
@@ -1,8 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="examples"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/build.xml b/build.xml
index 1cd94b37..704cfe85 100644
--- a/build.xml
+++ b/build.xml
@@ -1,98 +1,92 @@
-<project default="package">
-    <property file="local.properties"/>
-    <property file="project.properties"/>
-
-    <!-- Package properties -->
-    <property name="package.name" value="android-async-http" />
-    <property name="package.packagename" value="com.loopj.android.http" />
-    
-    <!-- Get git commit -->
-    <available file=".git" type="dir" property="git.present"/>
-
-    <target name="git-details">
-        <exec executable="git" outputproperty="git.status">
-            <arg value="status" />
-        </exec>
-        <echo message="${git.status}"/>
-        
-        <exec executable="git" outputproperty="package.versionname">
-          <arg value="describe"/>
-          <arg value="--tags"/>
-          <arg value="--dirty"/>
-          <arg value="--always"/>
-        </exec>
-        <echo message="${package.versionname}" />
-    </target>
-
-    <!-- Standard jar stuff -->
-    <property environment="env"/>
-    <condition property="android.base" value="${sdk.dir}" else="${env.ANDROID_HOME}">
-      <isset property="sdk.dir" />
+<?xml version="1.0" encoding="UTF-8"?>
+<project name="pulltorefresh" default="help">
+
+    <!-- The local.properties file is created and updated by the 'android' tool.
+         It contains the path to the SDK. It should *NOT* be checked into
+         Version Control Systems. -->
+    <property file="local.properties" />
+
+    <!-- The ant.properties file can be created by you. It is only edited by the
+         'android' tool to add properties to it.
+         This is the place to change some Ant specific build properties.
+         Here are some properties you may want to change/update:
+
+         source.dir
+             The name of the source directory. Default is 'src'.
+         out.dir
+             The name of the output directory. Default is 'bin'.
+
+         For other overridable properties, look at the beginning of the rules
+         files in the SDK, at tools/ant/build.xml
+
+         Properties related to the SDK location or the project target should
+         be updated using the 'android' tool with the 'update' action.
+
+         This file is an integral part of the build system for your
+         application and should be checked into Version Control Systems.
+
+         -->
+    <property file="ant.properties" />
+
+    <!-- if sdk.dir was not set from one of the property file, then
+         get it from the ANDROID_HOME env var.
+         This must be done before we load project.properties since
+         the proguard config can use sdk.dir -->
+    <property environment="env" />
+    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
+        <isset property="env.ANDROID_HOME" />
     </condition>
-    <fail message="Please set either the sdk.dir property or the ANDROID_HOME environment variable to point to your Android SDK installation.">
-      <condition>
-        <not>
-          <available file="${android.base}" type="dir"/>
-        </not>
-      </condition>
-    </fail>
-
-    <property name="lib.dir" value="${android.base}/platforms/${target}" />
-    <property name="build.dir" value="./build"/>
-    <property name="classes.dir"  value="${build.dir}/classes"/>
-    <buildnumber file="build.num" />
-
-    <!-- Set up classpath -->
-    <path id="classpath">
-        <fileset dir="${lib.dir}" includes="**/*.jar" />
-    </path>
-
-    <!-- Build javadoc -->
-    <target name="doc">
-        <javadoc 
-            classpathref="classpath"
-            sourcepath="gen:src"
-            destdir="doc"
-            packagenames="${package.packagename}"
-            linkoffline="http://d.android.com/reference ${android.base}/docs/reference" 
-            additionalparam="-author  -version"
-            />
-    </target>
-
-    <!-- Compile java files into classes -->
-    <target name="compile">
-        <mkdir dir="${build.dir}" />
-        <mkdir dir="${classes.dir}" />
-
-        <javac
-            includeantruntime="false"
-            srcdir="src"
-            destdir="${classes.dir}"
-            classpathref="classpath"
-            debug="true"
-            debuglevel="lines,source" />
-    </target>
-
-    <!-- Package a jar from compiled class files -->
-    <target name="jar" depends="git-details,compile">
-        <manifest file="MANIFEST.MF">
-            <attribute name="Built-By" value="${user.name}" />
-            <attribute name="Implementation-Version" value="${package.versionname}"/> 
-        </manifest>
-
-        <jar destfile="${package.name}-${package.versionname}.jar" basedir="build/classes" includes="com/loopj/android/http/**/*.class" manifest="MANIFEST.MF" />
-    </target>
-
-    <!-- Clean out the build files -->
-    <target name="clean">
-        <delete dir="build" />
-        <delete dir="doc" />
-        <delete>
-            <fileset dir="." includes="*.jar"/>
-            <fileset file="MANIFEST.MF"/>
-        </delete>
-    </target>
-
-    <!-- Compile and package a jar -->
-    <target name="package" depends="compile,jar" />
+
+    <!-- The project.properties file is created and updated by the 'android'
+         tool, as well as ADT.
+
+         This contains project specific properties such as project target, and library
+         dependencies. Lower level build properties are stored in ant.properties
+         (or in .classpath for Eclipse projects).
+
+         This file is an integral part of the build system for your
+         application and should be checked into Version Control Systems. -->
+    <loadproperties srcFile="project.properties" />
+
+    <!-- quick check on sdk.dir -->
+    <fail
+            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
+            unless="sdk.dir"
+    />
+
+    <!--
+        Import per project custom build rules if present at the root of the project.
+        This is the place to put custom intermediary targets such as:
+            -pre-build
+            -pre-compile
+            -post-compile (This is typically used for code obfuscation.
+                           Compiled code location: ${out.classes.absolute.dir}
+                           If this is not done in place, override ${out.dex.input.absolute.dir})
+            -post-package
+            -post-build
+            -pre-clean
+    -->
+    <import file="custom_rules.xml" optional="true" />
+
+    <!-- Import the actual build file.
+
+         To customize existing targets, there are two options:
+         - Customize only one target:
+             - copy/paste the target into this file, *before* the
+               <import> task.
+             - customize it to your needs.
+         - Customize the whole content of build.xml
+             - copy/paste the content of the rules files (minus the top node)
+               into this file, replacing the <import> task.
+             - customize to your needs.
+
+         ***********************
+         ****** IMPORTANT ******
+         ***********************
+         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
+         in order to avoid having your file be overridden by tools such as "android update project"
+    -->
+    <!-- version-tag: 1 -->
+    <import file="${sdk.dir}/tools/ant/build.xml" />
+
 </project>
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 5f0750d7..e99ef828 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -14,23 +14,10 @@
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-*/
+ */
 
 package com.loopj.android.http;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.ref.WeakReference;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.zip.GZIPInputStream;
-
 import org.apache.http.Header;
 import org.apache.http.HeaderElement;
 import org.apache.http.HttpEntity;
@@ -69,19 +56,32 @@
 
 import android.content.Context;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.zip.GZIPInputStream;
 
 /**
- * The AsyncHttpClient can be used to make asynchronous GET, POST, PUT and 
- * DELETE HTTP requests in your Android applications. Requests can be made
- * with additional parameters by passing a {@link RequestParams} instance,
- * and responses can be handled by passing an anonymously overridden 
+ * The AsyncHttpClient can be used to make asynchronous GET, POST, PUT and
+ * DELETE HTTP requests in your Android applications. Requests can be made with
+ * additional parameters by passing a {@link RequestParams} instance, and
+ * responses can be handled by passing an anonymously overridden
  * {@link AsyncHttpResponseHandler} instance.
  * <p>
  * For example:
  * <p>
+ * 
  * <pre>
  * AsyncHttpClient client = new AsyncHttpClient();
- * client.get("http://www.google.com", new AsyncHttpResponseHandler() {
+ * client.get(&quot;http://www.google.com&quot;, new AsyncHttpResponseHandler() {
  *     &#064;Override
  *     public void onSuccess(String response) {
  *         System.out.println(response);
@@ -90,24 +90,37 @@
  * </pre>
  */
 public class AsyncHttpClient {
+    private static final String LOG_TAG = AsyncHttpClient.class.getSimpleName();
+
     private static final String VERSION = "1.4.3";
 
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
+
     private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
+
     private static final int DEFAULT_MAX_RETRIES = 5;
+
     private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
+
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
+
     private static final String ENCODING_GZIP = "gzip";
 
     private static int maxConnections = DEFAULT_MAX_CONNECTIONS;
+
     private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
 
     private final DefaultHttpClient httpClient;
+
     private final HttpContext httpContext;
+
     private ThreadPoolExecutor threadPool;
+
     private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
-    private final Map<String, String> clientHeaderMap;
 
+    private final Map<String, String> clientHeaderMap;
+    
+    public static final String REFREER_LOCATION = "Refreer-Location";
 
     /**
      * Creates a new AsyncHttpClient.
@@ -116,7 +129,8 @@ public AsyncHttpClient() {
         BasicHttpParams httpParams = new BasicHttpParams();
 
         ConnManagerParams.setTimeout(httpParams, socketTimeout);
-        ConnManagerParams.setMaxConnectionsPerRoute(httpParams, new ConnPerRouteBean(maxConnections));
+        ConnManagerParams.setMaxConnectionsPerRoute(httpParams,
+                new ConnPerRouteBean(maxConnections));
         ConnManagerParams.setMaxTotalConnections(httpParams, DEFAULT_MAX_CONNECTIONS);
 
         HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
@@ -125,7 +139,8 @@ public AsyncHttpClient() {
         HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
         HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
-        HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
+        HttpProtocolParams.setUserAgent(httpParams, String.format(
+                "android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
 
         SchemeRegistry schemeRegistry = new SchemeRegistry();
         schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
@@ -162,12 +177,19 @@ public void process(HttpResponse response, HttpContext context) {
                         }
                     }
                 }
+                Header[] headers = response.getAllHeaders();
+                for (Header header : headers) {
+                    if("Location".equals(header.getName())){
+                        context.setAttribute(REFREER_LOCATION, header.getValue());
+                        break;
+                    }
+                }
             }
         });
 
         httpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
 
-        threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();
+        threadPool = (ThreadPoolExecutor) Executors.newCachedThreadPool();
 
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
@@ -175,17 +197,17 @@ public void process(HttpResponse response, HttpContext context) {
 
     /**
      * Get the underlying HttpClient instance. This is useful for setting
-     * additional fine-grained settings for requests by accessing the
-     * client's ConnectionManager, HttpParams and SchemeRegistry.
+     * additional fine-grained settings for requests by accessing the client's
+     * ConnectionManager, HttpParams and SchemeRegistry.
      */
     public HttpClient getHttpClient() {
         return this.httpClient;
     }
 
     /**
-     * Get the underlying HttpContext instance. This is useful for getting 
-     * and setting fine-grained settings for requests by accessing the
-     * context's attributes such as the CookieStore.
+     * Get the underlying HttpContext instance. This is useful for getting and
+     * setting fine-grained settings for requests by accessing the context's
+     * attributes such as the CookieStore.
      */
     public HttpContext getHttpContext() {
         return this.httpContext;
@@ -193,7 +215,9 @@ public HttpContext getHttpContext() {
 
     /**
      * Sets an optional CookieStore to use when making requests
-     * @param cookieStore The CookieStore implementation to use, usually an instance of {@link PersistentCookieStore}
+     * 
+     * @param cookieStore The CookieStore implementation to use, usually an
+     *            instance of {@link PersistentCookieStore}
      */
     public void setCookieStore(CookieStore cookieStore) {
         httpContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
@@ -202,7 +226,9 @@ public void setCookieStore(CookieStore cookieStore) {
     /**
      * Overrides the threadpool implementation used when queuing/pooling
      * requests. By default, Executors.newCachedThreadPool() is used.
-     * @param threadPool an instance of {@link ThreadPoolExecutor} to use for queuing/pooling requests.
+     * 
+     * @param threadPool an instance of {@link ThreadPoolExecutor} to use for
+     *            queuing/pooling requests.
      */
     public void setThreadPool(ThreadPoolExecutor threadPool) {
         this.threadPool = threadPool;
@@ -210,7 +236,9 @@ public void setThreadPool(ThreadPoolExecutor threadPool) {
 
     /**
      * Sets the User-Agent header to be sent with each request. By default,
-     * "Android Asynchronous Http Client/VERSION (http://loopj.com/android-async-http/)" is used.
+     * "Android Asynchronous Http Client/VERSION (http://loopj.com/android-async-http/)"
+     * is used.
+     * 
      * @param userAgent the string to use in the User-Agent header.
      */
     public void setUserAgent(String userAgent) {
@@ -219,9 +247,10 @@ public void setUserAgent(String userAgent) {
 
     /**
      * Sets the connection time oout. By default, 10 seconds
+     * 
      * @param timeout the connect/socket timeout in milliseconds
      */
-    public void setTimeout(int timeout){
+    public void setTimeout(int timeout) {
         final HttpParams httpParams = this.httpClient.getParams();
         ConnManagerParams.setTimeout(httpParams, timeout);
         HttpConnectionParams.setSoTimeout(httpParams, timeout);
@@ -229,16 +258,20 @@ public void setTimeout(int timeout){
     }
 
     /**
-     * Sets the SSLSocketFactory to user when making requests. By default,
-     * a new, default SSLSocketFactory is used.
+     * Sets the SSLSocketFactory to user when making requests. By default, a
+     * new, default SSLSocketFactory is used.
+     * 
      * @param sslSocketFactory the socket factory to use for https requests.
      */
     public void setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
-        this.httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme("https", sslSocketFactory, 443));
+        this.httpClient.getConnectionManager().getSchemeRegistry()
+                .register(new Scheme("https", sslSocketFactory, 443));
     }
-    
+
     /**
-     * Sets headers that will be added to all requests this client makes (before sending).
+     * Sets headers that will be added to all requests this client makes (before
+     * sending).
+     * 
      * @param header the name of the header
      * @param value the contents of the header
      */
@@ -247,26 +280,29 @@ public void addHeader(String header, String value) {
     }
 
     /**
-     * Sets basic authentication for the request. Uses AuthScope.ANY. This is the same as
-     * setBasicAuth('username','password',AuthScope.ANY) 
+     * Sets basic authentication for the request. Uses AuthScope.ANY. This is
+     * the same as setBasicAuth('username','password',AuthScope.ANY)
+     * 
      * @param username
      * @param password
      */
-    public void setBasicAuth(String user, String pass){
+    public void setBasicAuth(String user, String pass) {
         AuthScope scope = AuthScope.ANY;
         setBasicAuth(user, pass, scope);
     }
-    
-   /**
-     * Sets basic authentication for the request. You should pass in your AuthScope for security. It should be like this
-     * setBasicAuth("username","password", new AuthScope("host",port,AuthScope.ANY_REALM))
+
+    /**
+     * Sets basic authentication for the request. You should pass in your
+     * AuthScope for security. It should be like this
+     * setBasicAuth("username","password", new
+     * AuthScope("host",port,AuthScope.ANY_REALM))
+     * 
      * @param username
      * @param password
      * @param scope - an AuthScope object
-     *
      */
-    public void setBasicAuth( String user, String pass, AuthScope scope){
-        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(user,pass);
+    public void setBasicAuth(String user, String pass, AuthScope scope) {
+        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(user, pass);
         this.httpClient.getCredentialsProvider().setCredentials(scope, credentials);
     }
 
@@ -274,20 +310,21 @@ public void setBasicAuth( String user, String pass, AuthScope scope){
      * Cancels any pending (or potentially active) requests associated with the
      * passed Context.
      * <p>
-     * <b>Note:</b> This will only affect requests which were created with a non-null
-     * android Context. This method is intended to be used in the onDestroy
-     * method of your android activities to destroy all requests which are no
-     * longer required.
-     *
+     * <b>Note:</b> This will only affect requests which were created with a
+     * non-null android Context. This method is intended to be used in the
+     * onDestroy method of your android activities to destroy all requests which
+     * are no longer required.
+     * 
      * @param context the android Context instance associated to the request.
-     * @param mayInterruptIfRunning specifies if active requests should be cancelled along with pending requests.
+     * @param mayInterruptIfRunning specifies if active requests should be
+     *            cancelled along with pending requests.
      */
     public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
         List<WeakReference<Future<?>>> requestList = requestMap.get(context);
-        if(requestList != null) {
-            for(WeakReference<Future<?>> requestRef : requestList) {
+        if (requestList != null) {
+            for (WeakReference<Future<?>> requestRef : requestList) {
                 Future<?> request = requestRef.get();
-                if(request != null) {
+                if (request != null) {
                     request.cancel(mayInterruptIfRunning);
                 }
             }
@@ -295,15 +332,16 @@ public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
         requestMap.remove(context);
     }
 
-
     //
     // HTTP GET Requests
     //
 
     /**
      * Perform a HTTP GET request, without any parameters.
+     * 
      * @param url the URL to send the request to.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void get(String url, AsyncHttpResponseHandler responseHandler) {
         get(null, url, null, responseHandler);
@@ -311,35 +349,45 @@ public void get(String url, AsyncHttpResponseHandler responseHandler) {
 
     /**
      * Perform a HTTP GET request with parameters.
+     * 
      * @param url the URL to send the request to.
      * @param params additional GET parameters to send with the request.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
         get(null, url, params, responseHandler);
     }
 
     /**
-     * Perform a HTTP GET request without any parameters and track the Android Context which initiated the request.
+     * Perform a HTTP GET request without any parameters and track the Android
+     * Context which initiated the request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void get(Context context, String url, AsyncHttpResponseHandler responseHandler) {
         get(context, url, null, responseHandler);
     }
 
     /**
-     * Perform a HTTP GET request and track the Android Context which initiated the request.
+     * Perform a HTTP GET request and track the Android Context which initiated
+     * the request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
      * @param params additional GET parameters to send with the request.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void get(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context);
+    public void get(Context context, String url, RequestParams params,
+            AsyncHttpResponseHandler responseHandler) {
+        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null,
+                responseHandler, context);
     }
-    
+
     /**
      * Perform a HTTP GET request and track the Android Context which initiated
      * the request with customized headers
@@ -348,24 +396,26 @@ public void get(Context context, String url, RequestParams params, AsyncHttpResp
      * @param headers set headers only for this request
      * @param params additional GET parameters to send with the request.
      * @param responseHandler the response handler instance that should handle
-     *        the response.
+     *            the response.
      */
-    public void get(Context context, String url, Header[] headers, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+    public void get(Context context, String url, Header[] headers, RequestParams params,
+            AsyncHttpResponseHandler responseHandler) {
         HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
-        if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, null, responseHandler,
-                context);
+        if (headers != null)
+            request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, null, responseHandler, context);
     }
 
-
     //
     // HTTP POST Requests
     //
 
     /**
      * Perform a HTTP POST request, without any parameters.
+     * 
      * @param url the URL to send the request to.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void post(String url, AsyncHttpResponseHandler responseHandler) {
         post(null, url, null, responseHandler);
@@ -373,35 +423,51 @@ public void post(String url, AsyncHttpResponseHandler responseHandler) {
 
     /**
      * Perform a HTTP POST request with parameters.
+     * 
      * @param url the URL to send the request to.
-     * @param params additional POST parameters or files to send with the request.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param params additional POST parameters or files to send with the
+     *            request.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
         post(null, url, params, responseHandler);
     }
 
     /**
-     * Perform a HTTP POST request and track the Android Context which initiated the request.
+     * Perform a HTTP POST request and track the Android Context which initiated
+     * the request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param params additional POST parameters or files to send with the request.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param params additional POST parameters or files to send with the
+     *            request.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void post(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+    public void post(Context context, String url, RequestParams params,
+            AsyncHttpResponseHandler responseHandler) {
         post(context, url, paramsToEntity(params), null, responseHandler);
     }
 
     /**
-     * Perform a HTTP POST request and track the Android Context which initiated the request.
+     * Perform a HTTP POST request and track the Android Context which initiated
+     * the request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
-     * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param entity a raw {@link HttpEntity} to send with the request, for
+     *            example, use this to send string/json/xml payloads to a server
+     *            by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param contentType the content type of the payload you are sending, for
+     *            example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void post(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context);
+    public void post(Context context, String url, HttpEntity entity, String contentType,
+            AsyncHttpResponseHandler responseHandler) {
+        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity),
+                contentType, responseHandler, context);
     }
 
     /**
@@ -413,38 +479,40 @@ public void post(Context context, String url, HttpEntity entity, String contentT
      * @param headers set headers only for this request
      * @param params additional POST parameters to send with the request.
      * @param contentType the content type of the payload you are sending, for
-     *        example application/json if sending a json payload.
+     *            example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle
-     *        the response.
+     *            the response.
      */
-    public void post(Context context, String url, Header[] headers, RequestParams params, String contentType,
-            AsyncHttpResponseHandler responseHandler) {
+    public void post(Context context, String url, Header[] headers, RequestParams params,
+            String contentType, AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = new HttpPost(url);
-        if(params != null) request.setEntity(paramsToEntity(params));
-        if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType,
-                responseHandler, context);
+        if (params != null)
+            request.setEntity(paramsToEntity(params));
+        if (headers != null)
+            request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
     }
 
     /**
      * Perform a HTTP POST request and track the Android Context which initiated
      * the request. Set headers only for this request
-     *
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set headers only for this request
      * @param entity a raw {@link HttpEntity} to send with the request, for
-     *        example, use this to send string/json/xml payloads to a server by
-     *        passing a {@link org.apache.http.entity.StringEntity}.
+     *            example, use this to send string/json/xml payloads to a server
+     *            by passing a {@link org.apache.http.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for
-     *        example application/json if sending a json payload.
+     *            example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle
-     *        the response.
+     *            the response.
      */
-    public void post(Context context, String url, Header[] headers, HttpEntity entity, String contentType,
-            AsyncHttpResponseHandler responseHandler) {
+    public void post(Context context, String url, Header[] headers, HttpEntity entity,
+            String contentType, AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);
-        if(headers != null) request.setHeaders(headers);
+        if (headers != null)
+            request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
     }
 
@@ -454,8 +522,10 @@ public void post(Context context, String url, Header[] headers, HttpEntity entit
 
     /**
      * Perform a HTTP PUT request, without any parameters.
+     * 
      * @param url the URL to send the request to.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void put(String url, AsyncHttpResponseHandler responseHandler) {
         put(null, url, null, responseHandler);
@@ -463,51 +533,73 @@ public void put(String url, AsyncHttpResponseHandler responseHandler) {
 
     /**
      * Perform a HTTP PUT request with parameters.
+     * 
      * @param url the URL to send the request to.
-     * @param params additional PUT parameters or files to send with the request.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param params additional PUT parameters or files to send with the
+     *            request.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void put(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
         put(null, url, params, responseHandler);
     }
 
     /**
-     * Perform a HTTP PUT request and track the Android Context which initiated the request.
+     * Perform a HTTP PUT request and track the Android Context which initiated
+     * the request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param params additional PUT parameters or files to send with the request.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param params additional PUT parameters or files to send with the
+     *            request.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void put(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+    public void put(Context context, String url, RequestParams params,
+            AsyncHttpResponseHandler responseHandler) {
         put(context, url, paramsToEntity(params), null, responseHandler);
     }
 
     /**
-     * Perform a HTTP PUT request and track the Android Context which initiated the request.
-     * And set one-time headers for the request
+     * Perform a HTTP PUT request and track the Android Context which initiated
+     * the request. And set one-time headers for the request
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
-     * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param entity a raw {@link HttpEntity} to send with the request, for
+     *            example, use this to send string/json/xml payloads to a server
+     *            by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param contentType the content type of the payload you are sending, for
+     *            example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void put(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
+    public void put(Context context, String url, HttpEntity entity, String contentType,
+            AsyncHttpResponseHandler responseHandler) {
+        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity),
+                contentType, responseHandler, context);
     }
-    
+
     /**
-     * Perform a HTTP PUT request and track the Android Context which initiated the request.
-     * And set one-time headers for the request
+     * Perform a HTTP PUT request and track the Android Context which initiated
+     * the request. And set one-time headers for the request
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set one-time headers for this request
-     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
-     * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param entity a raw {@link HttpEntity} to send with the request, for
+     *            example, use this to send string/json/xml payloads to a server
+     *            by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param contentType the content type of the payload you are sending, for
+     *            example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void put(Context context, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+    public void put(Context context, String url, Header[] headers, HttpEntity entity,
+            String contentType, AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
-        if(headers != null) request.setHeaders(headers);
+        if (headers != null)
+            request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
     }
 
@@ -517,8 +609,10 @@ public void put(Context context, String url,Header[] headers, HttpEntity entity,
 
     /**
      * Perform a HTTP DELETE request.
+     * 
      * @param url the URL to send the request to.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void delete(String url, AsyncHttpResponseHandler responseHandler) {
         delete(null, url, responseHandler);
@@ -526,41 +620,49 @@ public void delete(String url, AsyncHttpResponseHandler responseHandler) {
 
     /**
      * Perform a HTTP DELETE request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
     public void delete(Context context, String url, AsyncHttpResponseHandler responseHandler) {
         final HttpDelete delete = new HttpDelete(url);
         sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
     }
-    
+
     /**
      * Perform a HTTP DELETE request.
+     * 
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set one-time headers for this request
-     * @param responseHandler the response handler instance that should handle the response.
+     * @param responseHandler the response handler instance that should handle
+     *            the response.
      */
-    public void delete(Context context, String url, Header[] headers, AsyncHttpResponseHandler responseHandler) {
+    public void delete(Context context, String url, Header[] headers,
+            AsyncHttpResponseHandler responseHandler) {
         final HttpDelete delete = new HttpDelete(url);
-        if(headers != null) delete.setHeaders(headers);
+        if (headers != null)
+            delete.setHeaders(headers);
         sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
     }
 
-
     // Private stuff
-    protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
-        if(contentType != null) {
+    protected void sendRequest(DefaultHttpClient client, HttpContext httpContext,
+            HttpUriRequest uriRequest, String contentType,
+            AsyncHttpResponseHandler responseHandler, Context context) {
+        if (contentType != null) {
             uriRequest.addHeader("Content-Type", contentType);
         }
 
-        Future<?> request = threadPool.submit(new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler));
+        Future<?> request = threadPool.submit(new AsyncHttpRequest(client, httpContext, uriRequest,
+                responseHandler));
 
-        if(context != null) {
+        if (context != null) {
             // Add request to request map
             List<WeakReference<Future<?>>> requestList = requestMap.get(context);
-            if(requestList == null) {
+            if (requestList == null) {
                 requestList = new LinkedList<WeakReference<Future<?>>>();
                 requestMap.put(context, requestList);
             }
@@ -572,7 +674,7 @@ protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, Ht
     }
 
     public static String getUrlWithQueryString(String url, RequestParams params) {
-        if(params != null) {
+        if (params != null) {
             String paramString = params.getParamString();
             if (url.indexOf("?") == -1) {
                 url += "?" + paramString;
@@ -587,15 +689,16 @@ public static String getUrlWithQueryString(String url, RequestParams params) {
     private HttpEntity paramsToEntity(RequestParams params) {
         HttpEntity entity = null;
 
-        if(params != null) {
+        if (params != null) {
             entity = params.getEntity();
         }
 
         return entity;
     }
 
-    private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase, HttpEntity entity) {
-        if(entity != null){
+    private HttpEntityEnclosingRequestBase addEntityToRequestBase(
+            HttpEntityEnclosingRequestBase requestBase, HttpEntity entity) {
+        if (entity != null) {
             requestBase.setEntity(entity);
         }
 
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 48e6807e..97973894 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -28,6 +28,7 @@
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.impl.client.AbstractHttpClient;
+import org.apache.http.message.BasicHeader;
 import org.apache.http.protocol.HttpContext;
 
 class AsyncHttpRequest implements Runnable {
@@ -78,6 +79,7 @@ private void makeRequest() throws IOException {
         		HttpResponse response = client.execute(request, context);
         		if(!Thread.currentThread().isInterrupted()) {
         			if(responseHandler != null) {
+        			    response.addHeader(new BasicHeader(AsyncHttpClient.REFREER_LOCATION,(String)context.getAttribute(AsyncHttpClient.REFREER_LOCATION)));
         				responseHandler.sendResponseMessage(response);
         			}
         		} else{
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 2030265f..c0a55b66 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,11 +18,7 @@
 
 package com.loopj.android.http;
 
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
 import org.apache.http.Header;
-import java.io.IOException;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -34,6 +30,8 @@
 import android.os.Looper;
 import android.os.Message;
 
+import java.io.IOException;
+
 /**
  * Used to intercept and handle the responses from requests made using 
  * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
