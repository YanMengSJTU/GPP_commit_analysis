diff --git a/.classpath b/.classpath
index ba606126..3210faad 100644
--- a/.classpath
+++ b/.classpath
@@ -5,5 +5,6 @@
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 86fbdec9..a9f6d239 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,6 +21,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index cf5d1dc4..7ec69ace 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -278,7 +278,7 @@ private void init(){
         urlParamsWithArray = new ConcurrentHashMap<String, ArrayList<String>>();
     }
 
-    protected List<BasicNameValuePair> getParamsList() {
+    public List<BasicNameValuePair> getParamsList() {
         List<BasicNameValuePair> lparams = new LinkedList<BasicNameValuePair>();
 
         for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 2cc97e82..b3ec4e20 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -76,7 +76,6 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
 
         Boolean b = (Boolean) context.getAttribute(ExecutionContext.HTTP_REQ_SENT);
         boolean sent = (b != null && b.booleanValue());
-        Log.d(LOG_TAG, "retry request...");
 
         if(executionCount > maxRetries) {
             // Do not retry if over max retry count
@@ -94,10 +93,14 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         }
 
         if(retry) {
+        	Log.d(LOG_TAG, "RETRYING FAILED REQUEST (" + exception.toString() + ")");
             // resend all idempotent requests
             HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute( ExecutionContext.HTTP_REQUEST );
-            String requestType = currentReq.getMethod();
-            retry = !requestType.equals("POST");
+            if (currentReq != null) {
+            	String requestType = currentReq.getMethod();
+            	retry = !requestType.equals("POST");
+            }
+            retry = false;
         }
 
         if(retry) {
diff --git a/src/com/loopj/android/http/StreamHttpResponseHandler.java b/src/com/loopj/android/http/StreamHttpResponseHandler.java
new file mode 100644
index 00000000..1820b392
--- /dev/null
+++ b/src/com/loopj/android/http/StreamHttpResponseHandler.java
@@ -0,0 +1,88 @@
+package com.loopj.android.http;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.StatusLine;
+import org.apache.http.client.HttpResponseException;
+import org.apache.http.entity.BufferedHttpEntity;
+
+import android.os.Message;
+
+public class StreamHttpResponseHandler extends AsyncHttpResponseHandler {
+    
+	protected static final int PARSED_MESSAGE = 745634;
+    protected static final int FAILED_MESSAGE = 786593;
+
+    // Interface to AsyncHttpRequest
+    void sendResponseMessage(HttpResponse response) {
+        StatusLine status = response.getStatusLine();
+        Object responseBody = null;
+        try {
+            HttpEntity entity = null;
+            HttpEntity temp = response.getEntity();
+            if(temp != null) {
+            	entity = new BufferedHttpEntity(temp);
+                InputStream is = entity.getContent();
+                responseBody = parseStream(is);
+                is.close();
+            }
+        } catch(IOException e) {
+            sendFailureMessage(e, (String) null);
+        }
+
+        if(status.getStatusCode() >= 300) {
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+        } else {
+            sendSuccessMessage(status.getStatusCode(), responseBody);
+        }
+    }
+    
+    protected void sendSuccessMessage(int statusCode, Object responseBody) {
+        sendMessage(obtainMessage(PARSED_MESSAGE, new Object[] {Integer.valueOf(statusCode), responseBody}));
+    }
+
+    protected void sendFailureMessage(Throwable e, Object responseBody) {
+        sendMessage(obtainMessage(FAILED_MESSAGE, new Object[]{e, responseBody}));
+    }
+    
+    protected Object parseStream(InputStream stream) { return null; }
+    
+    //
+    // Callbacks to be overridden, typically anonymously
+    //
+
+    public void onSuccess(Object response) {}
+
+    public void onSuccess(int statusCode, Object response) {
+        onSuccess(response);
+    }
+
+    public void onFailure(Throwable e, Object errorResponse) {}
+
+    protected void handleParsedMessage(int statusCode, Object responseBody) {
+        onSuccess(statusCode, responseBody);
+    }
+
+    protected void handleFailedMessage(Throwable e, Object responseBody) {
+        onFailure(e, responseBody);
+    }
+
+    @Override
+    protected void handleMessage(Message msg) {
+        switch(msg.what){
+            case PARSED_MESSAGE:
+                Object[] response = (Object[]) msg.obj;
+                handleParsedMessage(((Integer) response[0]).intValue(), response[1]);
+                break;
+            case FAILED_MESSAGE:
+                response = (Object[])msg.obj;
+                handleFailedMessage((Throwable)response[0], response[1]);
+                break;
+            default:
+                super.handleMessage(msg);
+        }
+    }
+}
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 8f55991e..fda929f8 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -1,5 +1,7 @@
 package com.loopj.android.http;
 
+import java.io.InputStream;
+
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.protocol.HttpContext;
@@ -14,13 +16,17 @@
 	 * the result back to this method. Therefore the result object has to be a
 	 * field to be accessible
 	 */
-	private String result;
-	AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
+	private Object result;
+	AsyncHttpResponseHandler responseHandler = new StreamHttpResponseHandler() {
 
 		void sendResponseMessage(org.apache.http.HttpResponse response) {
 			responseCode = response.getStatusLine().getStatusCode();
 			super.sendResponseMessage(response);
 		};
+		
+		protected Object parseStream(InputStream stream) {
+			return parseResponseStream(stream);
+		};
 
 		@Override
 		protected void sendMessage(Message msg) {
@@ -32,15 +38,17 @@ protected void sendMessage(Message msg) {
 		}
 
 		@Override
-		public void onSuccess(String content) {
+		public void onSuccess(Object content) {
 			result = content;
 		}
 
 		@Override
-		public void onFailure(Throwable error, String content) {
+		public void onFailure(Throwable error, Object content) {
 			result = onRequestFailed(error, content);
 		}
 	};
+	
+	protected abstract Object parseResponseStream(InputStream stream);
 
 	/**
 	 * @return the response code for the last request, might be usefull
@@ -66,7 +74,7 @@ protected void sendRequest(DefaultHttpClient client,
 				.run();
 	}
 
-	public abstract String onRequestFailed(Throwable error, String content);
+	public abstract Object onRequestFailed(Throwable error, Object content);
 
 	public void delete(String url, RequestParams queryParams,
 			AsyncHttpResponseHandler responseHandler) {
@@ -74,7 +82,7 @@ public void delete(String url, RequestParams queryParams,
 		delete(url, responseHandler);
 	}
 
-	public String get(String url, RequestParams params) {
+	public Object get(String url, RequestParams params) {
 		this.get(url, params, responseHandler);
 		/*
 		 * the response handler will have set the result when this line is
@@ -83,37 +91,37 @@ public String get(String url, RequestParams params) {
 		return result;
 	}
 
-	public String get(String url) {
+	public Object get(String url) {
 		this.get(url, null, responseHandler);
 		return result;
 	}
 
-	public String put(String url, RequestParams params) {
+	public Object put(String url, RequestParams params) {
 		this.put(url, params, responseHandler);
 		return result;
 	}
 
-	public String put(String url) {
+	public Object put(String url) {
 		this.put(url, null, responseHandler);
 		return result;
 	}
 
-	public String post(String url, RequestParams params) {
+	public Object post(String url, RequestParams params) {
 		this.post(url, params, responseHandler);
 		return result;
 	}
 
-	public String post(String url) {
+	public Object post(String url) {
 		this.post(url, null, responseHandler);
 		return result;
 	}
 
-	public String delete(String url, RequestParams params) {
+	public Object delete(String url, RequestParams params) {
 		this.delete(url, params, responseHandler);
 		return result;
 	}
 
-	public String delete(String url) {
+	public Object delete(String url) {
 		this.delete(url, null, responseHandler);
 		return result;
 	}
