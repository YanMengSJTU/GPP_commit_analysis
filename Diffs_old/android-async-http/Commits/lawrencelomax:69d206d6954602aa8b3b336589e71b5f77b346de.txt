diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index ac3d1aba..9221fd31 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -92,6 +92,7 @@
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
     private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
     private static final int DEFAULT_MAX_RETRIES = 5;
+    private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
     private static final String ENCODING_GZIP = "gzip";
 
@@ -117,6 +118,7 @@ public AsyncHttpClient() {
 
         HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
         HttpConnectionParams.setTcpNoDelay(httpParams, true);
+        HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
         HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
         HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 25f8570c..f1ee8ac6 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -55,7 +55,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(e);
+                responseHandler.sendFailureMessage(e, null);
             }
         }
     }
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index a138e287..8824a3ed 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -36,7 +36,7 @@
  * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
  * designed to be anonymously overridden with your own response handling code.
  * <p>
- * Additionally, you can override the {@link #onFailure(Throwable)},
+ * Additionally, you can override the {@link #onFailure(Throwable, String)},
  * {@link #onStart()}, and {@link #onFinish()} methods as required.
  * <p>
  * For example:
@@ -55,7 +55,7 @@
  *     }
  * 
  *     &#064;Override
- *     public void onFailure(Throwable e) {
+ *     public void onFailure(Throwable e, String response) {
  *         // Response failed :(
  *     }
  *
@@ -112,9 +112,20 @@ public void onSuccess(String content) {}
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
+     * @deprecated use {@link #onFailure(Throwable, String)}
      */
     public void onFailure(Throwable error) {}
 
+    /**
+     * Fired when a request fails to complete, override to handle in your own code
+     * @param error the underlying cause of the failure
+     * @param content the response body, if any
+     */
+    public void onFailure(Throwable error, String content) {
+        // By default, call the deprecated onFailure(Throwable) for compatibility
+        onFailure(error);
+    }
+
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
@@ -124,8 +135,8 @@ protected void sendSuccessMessage(String responseBody) {
         sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
     }
 
-    protected void sendFailureMessage(Throwable e) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, e));
+    protected void sendFailureMessage(Throwable e, String responseBody) {
+        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
     }
 
     protected void sendStartMessage() {
@@ -145,8 +156,8 @@ protected void handleSuccessMessage(String responseBody) {
         onSuccess(responseBody);
     }
 
-    protected void handleFailureMessage(Throwable e) {
-        onFailure(e);
+    protected void handleFailureMessage(Throwable e, String responseBody) {
+        onFailure(e, responseBody);
     }
 
 
@@ -158,7 +169,8 @@ protected void handleMessage(Message msg) {
                 handleSuccessMessage((String)msg.obj);
                 break;
             case FAILURE_MESSAGE:
-                handleFailureMessage((Throwable)msg.obj);
+                Object[] repsonse = (Object[])msg.obj;
+                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -193,20 +205,22 @@ protected Message obtainMessage(int responseMessage, Object response) {
     // Interface to AsyncHttpRequest
     protected void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
+        String responseBody = null;
+        try {
+            HttpEntity entity = null;
+            HttpEntity temp = response.getEntity();
+            if(temp != null) {
+                entity = new BufferedHttpEntity(temp);
+            }
+            responseBody = EntityUtils.toString(entity);
+        } catch(IOException e) {
+            sendFailureMessage(e, null);
+        }
+
         if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()));
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            try {
-                HttpEntity entity = null;
-                HttpEntity temp = response.getEntity();
-                if(temp != null) {
-                    entity = new BufferedHttpEntity(temp);
-                }
-
-                sendSuccessMessage(EntityUtils.toString(entity));
-            } catch(IOException e) {
-                sendFailureMessage(e);
-            }
+            sendSuccessMessage(responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 51c2093e..59afc1bc 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -71,7 +71,7 @@ protected void handleSuccessMessage(String responseBody) {
                 onSuccess((JSONArray)jsonResponse);
             }
         } catch(JSONException e) {
-            onFailure(e);
+            onFailure(e, responseBody);
         }
     }
 
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 520cfee3..94076682 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -82,8 +82,12 @@ public PersistentCookieStore(Context context) {
     public void addCookie(Cookie cookie) {
         String name = cookie.getName();
 
-        // Save cookie into local store
-        cookies.put(name, cookie);
+        // Save cookie into local store, or remove if expired
+        if(!cookie.isExpired(new Date())) {
+            cookies.put(name, cookie);
+        } else {
+            cookies.remove(name);
+        }
 
         // Save cookie into persistent store
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index dd5225d0..1eb56f62 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -187,15 +187,19 @@ HttpEntity getEntity() {
             }
 
             // Add file params
+            int currentIndex = 0;
+            int lastIndex = fileParams.entrySet().size() - 1;
             for(ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
                 FileWrapper file = entry.getValue();
                 if(file.inputStream != null) {
+                	boolean isLast = currentIndex == lastIndex;
                     if(file.contentType != null) {
-                        multipartEntity.addPart(entry.getKey(), file.getFileName(), file.inputStream, file.contentType);
+                        multipartEntity.addPart(entry.getKey(), file.getFileName(), file.inputStream, file.contentType, isLast);
                     } else {
-                        multipartEntity.addPart(entry.getKey(), file.getFileName(), file.inputStream);
+                        multipartEntity.addPart(entry.getKey(), file.getFileName(), file.inputStream, isLast);
                     }
                 }
+                currentIndex++;
             }
 
             entity = multipartEntity;
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index 0fd851b4..42fdebf2 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -93,11 +93,11 @@ public void addPart(final String key, final String value) {
         }
     }
 
-    public void addPart(final String key, final String fileName, final InputStream fin){
-        addPart(key, fileName, fin, "application/octet-stream");
+    public void addPart(final String key, final String fileName, final InputStream fin, final boolean isLast){
+        addPart(key, fileName, fin, "application/octet-stream", isLast);
     }
 
-    public void addPart(final String key, final String fileName, final InputStream fin, String type){
+    public void addPart(final String key, final String fileName, final InputStream fin, String type, final boolean isLast){
         writeFirstBoundaryIfNeeds();
         try {
             type = "Content-Type: "+type+"\r\n";
@@ -110,6 +110,8 @@ public void addPart(final String key, final String fileName, final InputStream f
             while ((l = fin.read(tmp)) != -1) {
                 out.write(tmp, 0, l);
             }
+            if(!isLast)
+            	out.write(("\r\n--" + boundary + "\r\n").getBytes());
             out.flush();
         } catch (final IOException e) {
             e.printStackTrace();
@@ -122,9 +124,9 @@ public void addPart(final String key, final String fileName, final InputStream f
         }
     }
 
-    public void addPart(final String key, final File value) {
+    public void addPart(final String key, final File value, final boolean isLast) {
         try {
-            addPart(key, value.getName(), new FileInputStream(value));
+            addPart(key, value.getName(), new FileInputStream(value), isLast);
         } catch (final FileNotFoundException e) {
             e.printStackTrace();
         }
