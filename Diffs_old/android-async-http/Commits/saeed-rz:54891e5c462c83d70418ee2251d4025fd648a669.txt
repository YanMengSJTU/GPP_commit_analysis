diff --git a/.travis.yml b/.travis.yml
index c92d7a2c..ab2cbbd0 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,10 +3,13 @@ sudo: false
 jdk: openjdk7
 android:
   components:
-    - build-tools-23.0.1
-    - extra-android-support
-    - extra-android-m2repository
+    - platform-tools
+    - tools
+    - build-tools-23.0.3
     - android-23
+    - extra-android-m2repository
+    - extra-google-m2repository
+
   licenses:
     - '.+'
 script:
diff --git a/library/build.gradle b/library/build.gradle
index 7a55b32c..943c394e 100755
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -2,10 +2,10 @@ apply plugin: 'com.android.library'
 
 android {
     compileSdkVersion 23
-    buildToolsVersion '23.0.1'
+    buildToolsVersion '23.0.3'
 
     defaultConfig {
-        minSdkVersion 3
+        minSdkVersion 9
         targetSdkVersion 23
         consumerProguardFiles 'proguard.txt'
     }
diff --git a/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java b/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
index 6d88a68d..212a81f0 100755
--- a/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
+++ b/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
@@ -34,6 +34,8 @@
 
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLParameters;
+import javax.net.ssl.SSLSocket;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
 
@@ -72,9 +74,19 @@ public MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException,
 
         X509TrustManager tm = new X509TrustManager() {
             public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                try {
+                    chain[0].checkValidity();
+                } catch (Exception e) {
+                    throw new CertificateException("Certificate not valid or trusted.");
+                }
             }
 
             public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+                try {
+                    chain[0].checkValidity();
+                } catch (Exception e) {
+                    throw new CertificateException("Certificate not valid or trusted.");
+                }
             }
 
             public X509Certificate[] getAcceptedIssuers() {
@@ -186,12 +198,27 @@ public static DefaultHttpClient getNewHttpClient(KeyStore keyStore) {
 
     @Override
     public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {
-        return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
+        Socket localSocket = sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
+        enableSecureProtocols(localSocket);
+        return localSocket;
     }
 
     @Override
     public Socket createSocket() throws IOException {
-        return sslContext.getSocketFactory().createSocket();
+        Socket socket = sslContext.getSocketFactory().createSocket();
+        enableSecureProtocols(socket);
+        return socket;
+    }
+
+    /**
+     * Activate supported protocols on the socket.
+     *
+     * @param socket    The socket on which to activate secure protocols.
+     */
+    private void enableSecureProtocols(Socket socket) {
+        // set all supported protocols
+        SSLParameters params = sslContext.getSupportedSSLParameters();
+        ((SSLSocket) socket).setEnabledProtocols(params.getProtocols());
     }
 
     /**
@@ -200,5 +227,4 @@ public Socket createSocket() throws IOException {
     public void fixHttpsURLConnection() {
         HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
     }
-
-}
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java b/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
index b3419ea1..b290746b 100755
--- a/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
+++ b/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
@@ -97,7 +97,7 @@ public void addCookie(Cookie cookie) {
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         prefsWriter.putString(COOKIE_NAME_STORE, TextUtils.join(",", cookies.keySet()));
         prefsWriter.putString(COOKIE_NAME_PREFIX + name, encodeCookie(new SerializableCookie(cookie)));
-        prefsWriter.commit();
+        prefsWriter.apply();
     }
 
     @Override
@@ -108,7 +108,7 @@ public void clear() {
             prefsWriter.remove(COOKIE_NAME_PREFIX + name);
         }
         prefsWriter.remove(COOKIE_NAME_STORE);
-        prefsWriter.commit();
+        prefsWriter.apply();
 
         // Clear cookies from local store
         cookies.clear();
@@ -138,7 +138,7 @@ public boolean clearExpired(Date date) {
         if (clearedAny) {
             prefsWriter.putString(COOKIE_NAME_STORE, TextUtils.join(",", cookies.keySet()));
         }
-        prefsWriter.commit();
+        prefsWriter.apply();
 
         return clearedAny;
     }
@@ -168,7 +168,7 @@ public void deleteCookie(Cookie cookie) {
         cookies.remove(name);
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         prefsWriter.remove(COOKIE_NAME_PREFIX + name);
-        prefsWriter.commit();
+        prefsWriter.apply();
     }
 
     /**
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index 0387b928..cade5be6 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -33,7 +33,7 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentSkipList;
 
 import cz.msebera.android.httpclient.HttpEntity;
 import cz.msebera.android.httpclient.client.entity.UrlEncodedFormEntity;
@@ -99,11 +99,11 @@
             "application/json";
 
     protected final static String LOG_TAG = "RequestParams";
-    protected final ConcurrentHashMap<String, String> urlParams = new ConcurrentHashMap<String, String>();
-    protected final ConcurrentHashMap<String, StreamWrapper> streamParams = new ConcurrentHashMap<String, StreamWrapper>();
-    protected final ConcurrentHashMap<String, FileWrapper> fileParams = new ConcurrentHashMap<String, FileWrapper>();
-    protected final ConcurrentHashMap<String, List<FileWrapper>> fileArrayParams = new ConcurrentHashMap<String, List<FileWrapper>>();
-    protected final ConcurrentHashMap<String, Object> urlParamsWithObjects = new ConcurrentHashMap<String, Object>();
+    protected final ConcurrentSkipList<String, String> urlParams = new ConcurrentSkipList<String, String>();
+    protected final ConcurrentSkipList<String, StreamWrapper> streamParams = new ConcurrentSkipList<String, StreamWrapper>();
+    protected final ConcurrentSkipList<String, FileWrapper> fileParams = new ConcurrentSkipList<String, FileWrapper>();
+    protected final ConcurrentSkipList<String, List<FileWrapper>> fileArrayParams = new ConcurrentSkipList<String, List<FileWrapper>>();
+    protected final ConcurrentSkipList<String, Object> urlParamsWithObjects = new ConcurrentSkipList<String, Object>();
     protected boolean isRepeatable;
     protected boolean forceMultipartEntity = false;
     protected boolean useJsonStreamer;
@@ -425,7 +425,7 @@ public boolean has(String key) {
     @Override
     public String toString() {
         StringBuilder result = new StringBuilder();
-        for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, String> entry : urlParams.entrySet()) {
             if (result.length() > 0)
                 result.append("&");
 
@@ -434,7 +434,7 @@ public String toString() {
             result.append(entry.getValue());
         }
 
-        for (ConcurrentHashMap.Entry<String, StreamWrapper> entry : streamParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, StreamWrapper> entry : streamParams.entrySet()) {
             if (result.length() > 0)
                 result.append("&");
 
@@ -443,7 +443,7 @@ public String toString() {
             result.append("STREAM");
         }
 
-        for (ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             if (result.length() > 0)
                 result.append("&");
 
@@ -452,7 +452,7 @@ public String toString() {
             result.append("FILE");
         }
 
-        for (ConcurrentHashMap.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
             if (result.length() > 0)
                 result.append("&");
 
@@ -530,22 +530,22 @@ private HttpEntity createJsonStreamerEntity(ResponseHandlerInterface progressHan
                 elapsedFieldInJsonStreamer);
 
         // Add string params
-        for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, String> entry : urlParams.entrySet()) {
             entity.addPart(entry.getKey(), entry.getValue());
         }
 
         // Add non-string params
-        for (ConcurrentHashMap.Entry<String, Object> entry : urlParamsWithObjects.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, Object> entry : urlParamsWithObjects.entrySet()) {
             entity.addPart(entry.getKey(), entry.getValue());
         }
 
         // Add file params
-        for (ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             entity.addPart(entry.getKey(), entry.getValue());
         }
 
         // Add stream params
-        for (ConcurrentHashMap.Entry<String, StreamWrapper> entry : streamParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, StreamWrapper> entry : streamParams.entrySet()) {
             StreamWrapper stream = entry.getValue();
             if (stream.inputStream != null) {
                 entity.addPart(entry.getKey(),
@@ -575,7 +575,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
         entity.setIsRepeatable(isRepeatable);
 
         // Add string params
-        for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, String> entry : urlParams.entrySet()) {
             entity.addPartWithCharset(entry.getKey(), entry.getValue(), contentEncoding);
         }
 
@@ -586,7 +586,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
         }
 
         // Add stream params
-        for (ConcurrentHashMap.Entry<String, StreamWrapper> entry : streamParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, StreamWrapper> entry : streamParams.entrySet()) {
             StreamWrapper stream = entry.getValue();
             if (stream.inputStream != null) {
                 entity.addPart(entry.getKey(), stream.name, stream.inputStream,
@@ -595,13 +595,13 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
         }
 
         // Add file params
-        for (ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             FileWrapper fileWrapper = entry.getValue();
             entity.addPart(entry.getKey(), fileWrapper.file, fileWrapper.contentType, fileWrapper.customFileName);
         }
 
         // Add file collection
-        for (ConcurrentHashMap.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
             List<FileWrapper> fileWrapper = entry.getValue();
             for (FileWrapper fw : fileWrapper) {
                 entity.addPart(entry.getKey(), fw.file, fw.contentType, fw.customFileName);
@@ -614,7 +614,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
     protected List<BasicNameValuePair> getParamsList() {
         List<BasicNameValuePair> lparams = new LinkedList<BasicNameValuePair>();
 
-        for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
+        for (ConcurrentSkipList.Entry<String, String> entry : urlParams.entrySet()) {
             lparams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
         }
 
diff --git a/sample/build.gradle b/sample/build.gradle
index eb44af0e..7f31e48d 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -9,10 +9,10 @@ repositories {
 
 android {
     compileSdkVersion 23
-    buildToolsVersion '23.0.1'
+    buildToolsVersion '23.0.3'
 
     defaultConfig {
-        minSdkVersion 3
+        minSdkVersion 9
         targetSdkVersion 23
     }
 
@@ -20,7 +20,7 @@ android {
         standard {
         }
         withLeakCanary {
-            minSdkVersion 8
+            minSdkVersion 9
             targetSdkVersion 23
         }
     }
