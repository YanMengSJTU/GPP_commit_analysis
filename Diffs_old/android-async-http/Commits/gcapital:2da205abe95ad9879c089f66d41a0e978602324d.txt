diff --git a/.classpath b/.classpath
index b9d105fa..3101aa93 100644
--- a/.classpath
+++ b/.classpath
@@ -2,9 +2,9 @@
 <classpath>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry kind="src" path="examples"/>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/.gitignore b/.gitignore
index 8842bb26..3c0b082e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,11 +1,25 @@
-_site
-MANIFEST.MF
-./*.jar
-build.num
-build
-local.properties
-bin/
-gen/
-_layouts
+# mac files
 .DS_Store
-gh-pages
+
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+#*.class
+
+# generated GUI files
+#*R.java
+
+bin
+gen
+
+.classpath
+
+.project
+project.properties
+.settings
+*.log
diff --git a/project.properties b/project.properties
index 1880987e..f28bc833 100644
--- a/project.properties
+++ b/project.properties
@@ -9,4 +9,4 @@
 
 android.library=true
 # Project target.
-target=android-3
+target=android-15
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 222dc67b..7c0aaffc 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -173,6 +173,10 @@ public void process(HttpResponse response, HttpContext context) {
         clientHeaderMap = new HashMap<String, String>();
     }
 
+    public void setRetryCount(int count) {
+        httpClient.setHttpRequestRetryHandler(new RetryHandler(count));
+    }
+
     /**
      * Get the underlying HttpClient instance. This is useful for setting
      * additional fine-grained settings for requests by accessing the
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 48e6807e..42672de4 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -20,9 +20,6 @@
 
 import java.io.IOException;
 import java.net.ConnectException;
-import java.net.SocketException;
-import java.net.SocketTimeoutException;
-import java.net.UnknownHostException;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpRequestRetryHandler;
@@ -101,22 +98,6 @@ private void makeRequestWithRetries() throws ConnectException {
             try {
                 makeRequest();
                 return;
-            } catch (UnknownHostException e) {
-		        if(responseHandler != null) {
-		            responseHandler.sendFailureMessage(e, "can't resolve host");
-		        }
-	        	return;
-            }catch (SocketException e){
-                // Added to detect host unreachable
-                if(responseHandler != null) {
-                    responseHandler.sendFailureMessage(e, "can't resolve host");
-                }
-                return;
-            }catch (SocketTimeoutException e){
-                if(responseHandler != null) {
-                    responseHandler.sendFailureMessage(e, "socket time out");
-                }
-                return;
             } catch (IOException e) {
                 cause = e;
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 5256aad2..71966314 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -24,7 +24,6 @@
 package com.loopj.android.http;
 
 import java.io.IOException;
-import java.io.InterruptedIOException;
 import java.net.SocketException;
 import java.net.UnknownHostException;
 import java.util.HashSet;
@@ -35,13 +34,14 @@
 import org.apache.http.NoHttpResponseException;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.conn.ConnectTimeoutException;
 import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HttpContext;
 
 import android.os.SystemClock;
 
 class RetryHandler implements HttpRequestRetryHandler {
-    private static final int RETRY_SLEEP_TIME_MILLIS = 1500;
+    private static final int RETRY_SLEEP_TIME_MILLIS = 1000;
     private static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
     private static HashSet<Class<?>> exceptionBlacklist = new HashSet<Class<?>>();
 
@@ -52,9 +52,9 @@
         exceptionWhitelist.add(UnknownHostException.class);
         // retry-this, since it may happens as part of a Wi-Fi to 3G failover
         exceptionWhitelist.add(SocketException.class);
+        // retry-this, since it may happens as part of a Wi-Fi to 3G failover
+        exceptionWhitelist.add(ConnectTimeoutException.class);
 
-        // never retry timeouts
-        exceptionBlacklist.add(InterruptedIOException.class);
         // never retry SSL handshake failures
         exceptionBlacklist.add(SSLException.class);
     }
@@ -88,13 +88,19 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
 
         if(retry) {
             // resend all idempotent requests
-            HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute( ExecutionContext.HTTP_REQUEST );
-            String requestType = currentReq.getMethod();
-            retry = !requestType.equals("POST");
+        	try {
+	            HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute( ExecutionContext.HTTP_REQUEST );
+	            String requestType = currentReq.getMethod();
+	            retry = !requestType.equals("POST");
+        	}
+        	catch (Exception e) {
+        		
+        	}
         }
 
         if(retry) {
-            SystemClock.sleep(RETRY_SLEEP_TIME_MILLIS);
+        	int delay = RETRY_SLEEP_TIME_MILLIS * (int)Math.pow(2, (executionCount-1));
+            SystemClock.sleep(delay);
         } else {
             exception.printStackTrace();
         }
