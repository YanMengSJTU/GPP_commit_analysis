diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 5f0750d7..65b31a31 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -21,6 +21,12 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
+import java.security.KeyManagementException;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableKeyException;
+import java.security.cert.CertificateException;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -50,6 +56,7 @@
 import org.apache.http.client.methods.HttpPut;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.protocol.ClientContext;
+import org.apache.http.conn.ClientConnectionManager;
 import org.apache.http.conn.params.ConnManagerParams;
 import org.apache.http.conn.params.ConnPerRouteBean;
 import org.apache.http.conn.scheme.PlainSocketFactory;
@@ -111,8 +118,14 @@
 
     /**
      * Creates a new AsyncHttpClient.
+     * @throws KeyStoreException 
+     * @throws NoSuchAlgorithmException 
+     * @throws UnrecoverableKeyException 
+     * @throws KeyManagementException 
+     * @throws IOException 
+     * @throws CertificateException 
      */
-    public AsyncHttpClient() {
+    public AsyncHttpClient(){
         BasicHttpParams httpParams = new BasicHttpParams();
 
         ConnManagerParams.setTimeout(httpParams, socketTimeout);
@@ -127,13 +140,52 @@ public AsyncHttpClient() {
         HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
         HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
 
-        SchemeRegistry schemeRegistry = new SchemeRegistry();
-        schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
-        schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-        ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
-
+        KeyStore trustStore = null;
+		try {
+			trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
+		} catch (KeyStoreException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}  
+        try {
+			trustStore.load(null, null);
+		} catch (NoSuchAlgorithmException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (CertificateException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}  
+        
+        SSLSocketFactory sf = null;
+		try {
+			sf = new MySSLSocketFactory(trustStore);
+		} catch (KeyManagementException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (UnrecoverableKeyException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (NoSuchAlgorithmException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (KeyStoreException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}  
+        sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
+        
+        SchemeRegistry registry = new SchemeRegistry();  
+        registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));  
+        registry.register(new Scheme("https", sf, 443));
+        
+        ClientConnectionManager ccm = new ThreadSafeClientConnManager(httpParams, registry);
+        
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        httpClient = new DefaultHttpClient(cm, httpParams);
+        httpClient = new DefaultHttpClient(ccm, httpParams);
         httpClient.addRequestInterceptor(new HttpRequestInterceptor() {
             @Override
             public void process(HttpRequest request, HttpContext context) {
diff --git a/src/com/loopj/android/http/MySSLSocketFactory.java b/src/com/loopj/android/http/MySSLSocketFactory.java
new file mode 100644
index 00000000..5e6dafae
--- /dev/null
+++ b/src/com/loopj/android/http/MySSLSocketFactory.java
@@ -0,0 +1,51 @@
+package com.loopj.android.http;
+
+import java.io.IOException;
+import java.net.Socket;
+import java.net.UnknownHostException;
+import java.security.KeyManagementException;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableKeyException;
+
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
+import org.apache.http.conn.ssl.SSLSocketFactory;
+
+public class MySSLSocketFactory extends SSLSocketFactory{
+	SSLContext sslContext = SSLContext.getInstance("TLS");
+    
+    public MySSLSocketFactory(KeyStore truststore) 
+            throws NoSuchAlgorithmException, KeyManagementException,
+            KeyStoreException, UnrecoverableKeyException {
+    	super(truststore);
+    
+    	TrustManager tm = new X509TrustManager() {
+            public java.security.cert.X509Certificate[] getAcceptedIssuers() {return null;}  
+
+	        @Override  
+	        public void checkClientTrusted(
+	                        java.security.cert.X509Certificate[] chain, String authType)
+	                                        throws java.security.cert.CertificateException {}  
+	
+	        @Override  
+	        public void checkServerTrusted(
+	                        java.security.cert.X509Certificate[] chain, String authType)
+	                                        throws java.security.cert.CertificateException {}
+	    };  
+	    sslContext.init(null, new TrustManager[] { tm }, null);  
+	}  
+	
+	@Override  
+	public Socket createSocket(Socket socket, String host, int port,boolean autoClose) throws IOException, UnknownHostException {  
+	        return sslContext.getSocketFactory().createSocket(socket, host, port,autoClose);  
+	}  
+	
+	@Override  
+	public Socket createSocket() throws IOException {  
+	    return sslContext.getSocketFactory().createSocket();  
+	}  
+}
