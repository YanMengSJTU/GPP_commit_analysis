diff --git a/.travis.yml b/.travis.yml
index ab2cbbd0..92008c2c 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,15 +1,14 @@
 language: android
 sudo: false
-jdk: openjdk7
+jdk: openjdk8
 android:
   components:
     - platform-tools
     - tools
-    - build-tools-23.0.3
-    - android-23
+    - build-tools-28.0.3
+    - android-28
     - extra-android-m2repository
     - extra-google-m2repository
-
   licenses:
     - '.+'
 script:
diff --git a/README.md b/README.md
index 4b375ec1..a1ad1f72 100755
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 Asynchronous Http Client for Android
 ====================================
-[![Build Status](https://travis-ci.org/loopj/android-async-http.png?branch=master)](https://travis-ci.org/loopj/android-async-http)
+[![Build Status](https://travis-ci.org/android-async-http/android-async-http.png?branch=master)](https://travis-ci.org/android-async-http/android-async-http)
 
 An asynchronous, callback-based Http client for Android built on top of Apache's [HttpClient](https://hc.apache.org/httpcomponents-client-ga/) libraries.
 
@@ -9,14 +9,14 @@ Changelog
 
 See what is new in version 1.4.9 released on 19th September 2015
 
-https://github.com/loopj/android-async-http/blob/1.4.9/CHANGELOG.md
+https://github.com/android-async-http/android-async-http/blob/1.4.9/CHANGELOG.md
 
 Javadoc
 -------
 
 Latest Javadoc for 1.4.9 release are available here (also included in Maven repository):
 
-https://loopj.com/android-async-http/doc/
+https://android-async-http.github.io/android-async-http/doc/
 
 Features
 --------
@@ -35,7 +35,7 @@ Examples
 --------
 
 For inspiration and testing on device we've provided Sample Application.  
-See individual samples [here on Github](https://github.com/loopj/android-async-http/tree/1.4.9/sample/src/main/java/com/loopj/android/http/sample)  
+See individual samples [here on Github](https://github.com/android-async-http/android-async-http/tree/1.4.9/sample/src/main/java/com/loopj/android/http/sample)  
 To run Sample application, simply clone the repository and run this command, to install it on connected device  
 
 ```java
@@ -93,5 +93,5 @@ Documentation, Features and Examples
 ------------------------------------
 Full details and documentation can be found on the project page here:
 
-https://loopj.com/android-async-http/
+https://android-async-http.github.io/android-async-http/
 
diff --git a/build.gradle b/build.gradle
index 9e17ccfe..9fe5a37a 100755
--- a/build.gradle
+++ b/build.gradle
@@ -23,7 +23,7 @@ allprojects {
         mavenLocal()
         mavenCentral()
         google()
-
+        jcenter()
     }
 
     tasks.withType(JavaCompile) {
diff --git a/library/build.gradle b/library/build.gradle
index f1b1a2d8..62d5c94c 100755
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,11 +1,11 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
+    compileSdkVersion 28
 
     defaultConfig {
         minSdkVersion 9
-        targetSdkVersion 23
+        targetSdkVersion 28
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -19,7 +19,7 @@ android {
 }
 
 dependencies {
-    compile 'cz.msebera.android:httpclient:4.5.8'
+    api 'cz.msebera.android:httpclient:4.5.8'
 }
 
 android.libraryVariants.all { variant ->
@@ -27,7 +27,7 @@ android.libraryVariants.all { variant ->
     def task = project.tasks.create "jar${name.capitalize()}", Jar
     task.dependsOn variant.javaCompile
     task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task);
+    artifacts.add('archives', task)
 }
 
 apply from: '../maven_push.gradle'
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
index 88f105a2..68f60133 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -26,6 +26,7 @@
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
 import java.net.URI;
+import java.util.Locale;
 
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
@@ -241,7 +242,7 @@ public void setCharset(final String charset) {
      * @param totalSize    total size of file
      */
     public void onProgress(long bytesWritten, long totalSize) {
-        AsyncHttpClient.log.v(LOG_TAG, String.format("Progress %d from %d (%2.0f%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));
+        AsyncHttpClient.log.v(LOG_TAG, String.format(Locale.US, "Progress %d from %d (%2.0f%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));
     }
 
     /**
@@ -294,7 +295,7 @@ public void onPostProcessResponse(ResponseHandlerInterface instance, HttpRespons
      * @param retryNo number of retry
      */
     public void onRetry(int retryNo) {
-        AsyncHttpClient.log.d(LOG_TAG, String.format("Request retry no. %d", retryNo));
+        AsyncHttpClient.log.d(LOG_TAG, String.format(Locale.US, "Request retry no. %d", retryNo));
     }
 
     public void onCancel() {
diff --git a/sample/build.gradle b/sample/build.gradle
index c598988b..f07bda56 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -8,11 +8,11 @@ repositories {
 }
 
 android {
-    compileSdkVersion 23
+    compileSdkVersion 28
 
     defaultConfig {
         minSdkVersion 9
-        targetSdkVersion 23
+        targetSdkVersion 28
     }
 
     flavorDimensions "version"
@@ -20,27 +20,22 @@ android {
         standard {
             dimension "version"
             minSdkVersion 9
-            targetSdkVersion 23
+            targetSdkVersion 28
 
         }
         withLeakCanary {
             dimension "version"
             minSdkVersion 9
-            targetSdkVersion 23
+            targetSdkVersion 28
         }
     }
 
-//    compileOptions {
-//        sourceCompatibility 'JavaVersion.VERSION_1_7'
-//        targetCompatibility 'JavaVersion.VERSION_1_7'
-//    }
-
     lintOptions {
         xmlReport false
         warningsAsErrors true
         quiet false
         showAll true
-        disable 'OldTargetApi', 'UnusedAttribute', 'LongLogTag'
+        disable 'OldTargetApi', 'UnusedAttribute', 'LongLogTag', 'TrustAllX509TrustManager', 'GoogleAppIndexingWarning', 'Autofill', 'LabelFor', 'SetTextI18n'
     }
 
     packagingOptions {
@@ -51,8 +46,8 @@ android {
 }
 
 dependencies {
-    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
-    compile project(':library')
+    api 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
+    api project(':library')
     // LeakCanary
     withLeakCanaryImplementation 'com.squareup.leakcanary:leakcanary-android:1.3.1'
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java b/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
index 62589a3c..c8a54591 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
@@ -33,6 +33,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.TimeUnit;
+import java.util.Locale;
 
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
@@ -109,7 +110,7 @@ public void onStart() {
 
                     @Override
                     public void onSuccess(int statusCode, Header[] headers, byte[] response) {
-                        Log.d(LOG_TAG, String.format("onSuccess executing on main thread : %B", Looper.myLooper() == Looper.getMainLooper()));
+                        Log.d(LOG_TAG, String.format(Locale.US, "onSuccess executing on main thread : %B", Looper.myLooper() == Looper.getMainLooper()));
                         debugHeaders(LOG_TAG, headers);
                         debugStatusCode(LOG_TAG, statusCode);
                         debugResponse(LOG_TAG, new String(response));
@@ -117,7 +118,7 @@ public void onSuccess(int statusCode, Header[] headers, byte[] response) {
 
                     @Override
                     public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Throwable e) {
-                        Log.d(LOG_TAG, String.format("onFailure executing on main thread : %B", Looper.myLooper() == Looper.getMainLooper()));
+                        Log.d(LOG_TAG, String.format(Locale.US, "onFailure executing on main thread : %B", Looper.myLooper() == Looper.getMainLooper()));
                         debugHeaders(LOG_TAG, headers);
                         debugStatusCode(LOG_TAG, statusCode);
                         debugThrowable(LOG_TAG, e);
@@ -129,7 +130,7 @@ public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Th
                     @Override
                     public void onRetry(int retryNo) {
                         Toast.makeText(AsyncBackgroundThreadSample.this,
-                                String.format("Request is retried, retry no. %d", retryNo),
+                                String.format(Locale.US, "Request is retried, retry no. %d", retryNo),
                                 Toast.LENGTH_SHORT)
                                 .show();
                     }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandleSample.java b/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandleSample.java
index 5266a50e..306dcb37 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandleSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/CancelRequestHandleSample.java
@@ -20,6 +20,8 @@
 
 import android.util.Log;
 
+import java.util.Locale;
+
 import com.loopj.android.http.RequestHandle;
 
 public class CancelRequestHandleSample extends ThreadingTimeoutSample {
@@ -33,14 +35,14 @@ public int getSampleTitle() {
 
     @Override
     public void onCancelButtonPressed() {
-        Log.d(LOG_TAG, String.format("Number of handles found: %d", getRequestHandles().size()));
+        Log.d(LOG_TAG, String.format(Locale.US, "Number of handles found: %d", getRequestHandles().size()));
         int counter = 0;
         for (RequestHandle handle : getRequestHandles()) {
             if (!handle.isCancelled() && !handle.isFinished()) {
-                Log.d(LOG_TAG, String.format("Cancelling handle %d", counter));
-                Log.d(LOG_TAG, String.format("Handle %d cancel", counter) + (handle.cancel(true) ? " succeeded" : " failed"));
+                Log.d(LOG_TAG, String.format(Locale.US, "Cancelling handle %d", counter));
+                Log.d(LOG_TAG, String.format(Locale.US, "Handle %d cancel", counter) + (handle.cancel(true) ? " succeeded" : " failed"));
             } else {
-                Log.d(LOG_TAG, String.format("Handle %d already non-cancellable", counter));
+                Log.d(LOG_TAG, String.format(Locale.US, "Handle %d already non-cancellable", counter));
             }
             counter++;
         }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/DirectorySample.java b/sample/src/main/java/com/loopj/android/http/sample/DirectorySample.java
index 74c41ca2..29aed2a6 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/DirectorySample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/DirectorySample.java
@@ -32,6 +32,8 @@
 
 import java.io.File;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 
@@ -71,8 +73,8 @@ public void onClick(View v) {
                 clearOutputs();
                 if (lastResponseHandler != null) {
                     File toBeDeleted = lastResponseHandler.getTargetFile();
-                    debugResponse(LOG_TAG, String.format("File was deleted? %b", toBeDeleted.delete()));
-                    debugResponse(LOG_TAG, String.format("Delete file path: %s", toBeDeleted.getAbsolutePath()));
+                    debugResponse(LOG_TAG, String.format(Locale.US, "File was deleted? %b", toBeDeleted.delete()));
+                    debugResponse(LOG_TAG, String.format(Locale.US, "Delete file path: %s", toBeDeleted.getAbsolutePath()));
                 } else {
                     debugThrowable(LOG_TAG, new Error("You have to Run example first"));
                 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/GetSample.java b/sample/src/main/java/com/loopj/android/http/sample/GetSample.java
index 02e3880c..f8bbffc3 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/GetSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/GetSample.java
@@ -25,6 +25,8 @@
 import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.ResponseHandlerInterface;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 
@@ -85,7 +87,7 @@ public void onFailure(int statusCode, Header[] headers, byte[] errorResponse, Th
             @Override
             public void onRetry(int retryNo) {
                 Toast.makeText(GetSample.this,
-                        String.format("Request is retried, retry no. %d", retryNo),
+                        String.format(Locale.US, "Request is retried, retry no. %d", retryNo),
                         Toast.LENGTH_SHORT)
                         .show();
             }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/HeadSample.java b/sample/src/main/java/com/loopj/android/http/sample/HeadSample.java
index 43443970..d3a6d0dc 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/HeadSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/HeadSample.java
@@ -23,6 +23,8 @@
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 
+import java.util.Locale;
+
 public class HeadSample extends FileSample {
 
     private static final String LOG_TAG = "HeadSample";
@@ -34,12 +36,12 @@ public ResponseHandlerInterface getResponseHandler() {
             public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
                 debugStatusCode(LOG_TAG, statusCode);
                 debugHeaders(LOG_TAG, headers);
-                debugResponse(LOG_TAG, String.format("Response of size: %d", responseBody == null ? 0 : responseBody.length));
+                debugResponse(LOG_TAG, String.format(Locale.US, "Response of size: %d", responseBody == null ? 0 : responseBody.length));
             }
 
             @Override
             public void onProgress(long bytesWritten, long totalSize) {
-                addView(getColoredView(LIGHTRED, String.format("Progress %d from %d", bytesWritten, totalSize)));
+                addView(getColoredView(LIGHTRED, String.format(Locale.US, "Progress %d from %d", bytesWritten, totalSize)));
             }
 
             @Override
@@ -47,7 +49,7 @@ public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Thr
                 debugStatusCode(LOG_TAG, statusCode);
                 debugHeaders(LOG_TAG, headers);
                 debugThrowable(LOG_TAG, throwable);
-                debugResponse(LOG_TAG, String.format("Response of size: %d", responseBody == null ? 0 : responseBody.length));
+                debugResponse(LOG_TAG, String.format(Locale.US, "Response of size: %d", responseBody == null ? 0 : responseBody.length));
             }
         };
     }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java b/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
index 06d32d17..01d71fa6 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
@@ -188,7 +188,7 @@ public DialogRunnable(String realm) {
             String prefaceText = preface.getText().toString();
 
             // Substitute placeholders, and re-set the value.
-            preface.setText(String.format(prefaceText, SECRET_USERNAME, SECRET_PASSWORD));
+            preface.setText(String.format(Locale.US, prefaceText, SECRET_USERNAME, SECRET_PASSWORD));
         }
 
         @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/RangeResponseSample.java b/sample/src/main/java/com/loopj/android/http/sample/RangeResponseSample.java
index aecd8c5e..d5e4af94 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/RangeResponseSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/RangeResponseSample.java
@@ -30,6 +30,8 @@
 import java.io.File;
 import java.io.IOException;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 import cz.msebera.android.httpclient.client.methods.HttpUriRequest;
@@ -75,7 +77,7 @@ protected void onDestroy() {
         // Remove temporary file.
         if (file != null) {
             if (!file.delete()) {
-                Log.e(LOG_TAG, String.format("Couldn't remove temporary file in path: %s", file.getAbsolutePath()));
+                Log.e(LOG_TAG, String.format(Locale.US, "Couldn't remove temporary file in path: %s", file.getAbsolutePath()));
             }
             file = null;
         }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java b/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
index faf92cbf..7e1bb6c7 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
@@ -27,6 +27,8 @@
 import cz.msebera.android.httpclient.client.HttpClient;
 import cz.msebera.android.httpclient.impl.client.DefaultHttpClient;
 
+import java.util.Locale;
+
 public class Redirect302Sample extends GetSample {
 
     private static final int MENU_ENABLE_REDIRECTS = 10;
@@ -89,7 +91,7 @@ public AsyncHttpClient getAsyncHttpClient() {
         HttpClient client = ahc.getHttpClient();
         if (client instanceof DefaultHttpClient) {
             Toast.makeText(this,
-                    String.format("redirects: %b\nrelative redirects: %b\ncircular redirects: %b",
+                    String.format(Locale.US, "redirects: %b\nrelative redirects: %b\ncircular redirects: %b",
                             enableRedirects, enableRelativeRedirects, enableCircularRedirects),
                     Toast.LENGTH_SHORT
             ).show();
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index ddb3e43a..2397d494 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -263,7 +263,7 @@ public void onCancelButtonPressed() {
 
                     String headerName = line.substring(0, equalSignPos).trim();
                     String headerValue = line.substring(1 + equalSignPos).trim();
-                    Log.d(LOG_TAG, String.format("Added header: [%s:%s]", headerName, headerValue));
+                    Log.d(LOG_TAG, String.format(Locale.US, "Added header: [%s:%s]", headerName, headerValue));
 
                     headers.add(new BasicHeader(headerName, headerValue));
                 } catch (Throwable t) {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
index 81526833..d2c67a6c 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
@@ -25,6 +25,8 @@
 import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.ResponseHandlerInterface;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
 
@@ -64,7 +66,7 @@ protected synchronized void setStatus(int id, String status) {
         states.put(id, current == null ? status : current + "," + status);
         clearOutputs();
         for (int i = 0; i < states.size(); i++) {
-            debugResponse(LOG_TAG, String.format("%d (from %d): %s", states.keyAt(i), getCounter(), states.get(states.keyAt(i))));
+            debugResponse(LOG_TAG, String.format(Locale.US, "%d (from %d): %s", states.keyAt(i), getCounter(), states.get(states.keyAt(i))));
         }
     }
 
diff --git a/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java b/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
index 5742e34e..53e069ec 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
@@ -10,6 +10,8 @@
 import com.loopj.android.http.sample.IntentServiceSample;
 import com.loopj.android.http.sample.util.IntentUtil;
 
+import java.util.Locale;
+
 import cz.msebera.android.httpclient.Header;
 
 public class ExampleIntentService extends IntentService {
@@ -73,7 +75,7 @@ public void onCancel() {
                 @Override
                 public void onRetry(int retryNo) {
                     sendBroadcast(new Intent(IntentServiceSample.ACTION_RETRY));
-                    Log.d(LOG_TAG, String.format("onRetry: %d", retryNo));
+                    Log.d(LOG_TAG, String.format(Locale.US, "onRetry: %d", retryNo));
                 }
 
                 @Override
