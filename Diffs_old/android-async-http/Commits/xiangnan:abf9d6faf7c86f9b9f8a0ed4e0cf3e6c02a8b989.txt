diff --git a/.travis.yml b/.travis.yml
index 201b1af9..6f48cc94 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,35 +1,15 @@
-language:
-  - java
-jdk:
-  - openjdk7
-before_install:
-  # environment info
-  - mvn -version
-  - gradle -v
-  - uname -a
-  # required libs for android build tools
-  - if [ `uname -m` = x86_64 ]; then sudo apt-get update; fi
-  - if [ `uname -m` = x86_64 ]; then sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch; fi
-  # for gradle output style
-  - export TERM=dumb
-  # newer version of gradle
-  - wget http://services.gradle.org/distributions/gradle-1.12-bin.zip
-  - unzip -qq gradle-1.12-bin.zip
-  - export GRADLE_HOME=$PWD/gradle-1.12
-  - export PATH=$GRADLE_HOME/bin:$PATH
-  # just to test gradle version, against our provided one
-  - gradle -v
-  # newest android SDK 22.6.2
-  - wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz
-  - tar -zxf android-sdk_r22.6.2-linux.tgz
-  - export ANDROID_HOME=`pwd`/android-sdk-linux
-  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
-  # manually set sdk.dir variable, according to local paths
-  - echo "sdk.dir=$ANDROID_HOME" > local.properties
-  # list packages for debug purpose
-  - android list sdk -a -e -u
-  - echo yes | android update sdk -t 1,2,3,tools,platform-tools,extra-android-support,extra-android-m2repository,android-19,build-tools-19.1.0 --force --no-ui
+language: android
+jdk: openjdk7
+android:
+  components:
+    - build-tools-19.1.0
+    - extra-android-support
+    - extra-android-m2repository
+    - android-19
+  licenses:
+    - '.+'
+script:
   # Sonatype bypass
   - echo "nexusUsername=dummy" >> library/gradle.properties
   - echo "nexusPassword=dummy" >> library/gradle.properties
-
+  - ./gradlew clean assemble check
diff --git a/README.md b/README.md
index 63ae378e..4c96ed3b 100755
--- a/README.md
+++ b/README.md
@@ -56,7 +56,7 @@ ArtifactId: android-async-http
 Version: 1.4.5
 Packaging: JAR or AAR
 ```
-Gradle: `com.loopj.android:async-http-client:1.4.5`
+Gradle: `com.loopj.android:android-async-http:1.4.5`
 
 **development snapshots**
 
@@ -68,7 +68,7 @@ ArtifactId: android-async-http
 Version: 1.4.6-SNAPSHOT
 Packaging: JAR or AAR
 ```
-Gradle: `com.loopj.android:async-http-client:1.4.6-SNAPSHOT`
+Gradle: `com.loopj.android:android-async-http:1.4.6-SNAPSHOT`
 
 Documentation, Features and Examples
 ------------------------------------
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..0087cd3b
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..796a5111
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Jul 02 18:01:59 CEST 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-bin.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 00000000..91a7e269
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 00000000..aec99730
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/library/build.gradle b/library/build.gradle
index f10d39ab..231da11b 100755
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'android-library'
+apply plugin: 'com.android.library'
 
 android {
     compileSdkVersion 19
@@ -14,6 +14,7 @@ android {
         warningsAsErrors true
         quiet false
         showAll true
+	disable 'OldTargetApi'
     }
 
     compileOptions {
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index b5e80c9d..e5c6be3e 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -1110,9 +1110,11 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         if (context != null) {
             // Add request to request map
             List<RequestHandle> requestList = requestMap.get(context);
-            if (requestList == null) {
-                requestList = new LinkedList<RequestHandle>();
-                requestMap.put(context, requestList);
+            synchronized (requestMap) {
+                if (requestList == null) {
+                    requestList = Collections.synchronizedList(new LinkedList<RequestHandle>());
+                    requestMap.put(context, requestList);
+                }
             }
 
             if (responseHandler instanceof RangeFileAsyncHttpResponseHandler)
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6eaa5f59..761bfdc5 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -196,6 +196,7 @@ public void onProgress(int bytesWritten, int totalSize) {
      * Fired when the request is started, override to handle in your own code
      */
     public void onStart() {
+        // default log warning is not necessary, because this method is just optional notification
     }
 
     /**
@@ -203,6 +204,7 @@ public void onStart() {
      * handle in your own code
      */
     public void onFinish() {
+        // default log warning is not necessary, because this method is just optional notification
     }
 
     /**
diff --git a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
index 72c9404c..31e7f702 100755
--- a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
@@ -45,6 +45,7 @@ public DataAsyncHttpResponseHandler() {
      * @param responseBody response body received so far
      */
     public void onProgressData(byte[] responseBody) {
+        Log.d(LOG_TAG, "onProgressData(byte[]) was not overriden, but callback was received");
     }
 
 
diff --git a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
index 79262eff..5b864f61 100755
--- a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -62,7 +62,7 @@ public JsonHttpResponseHandler(String encoding) {
      * @param response   parsed response if any
      */
     public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
-
+        Log.w(LOG_TAG, "onSuccess(int, Header[], JSONObject) was not overriden, but callback was received");
     }
 
     /**
@@ -73,7 +73,7 @@ public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
      * @param response   parsed response if any
      */
     public void onSuccess(int statusCode, Header[] headers, JSONArray response) {
-
+        Log.w(LOG_TAG, "onSuccess(int, Header[], JSONArray) was not overriden, but callback was received");
     }
 
     /**
@@ -85,7 +85,7 @@ public void onSuccess(int statusCode, Header[] headers, JSONArray response) {
      * @param errorResponse parsed response if any
      */
     public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONObject errorResponse) {
-
+        Log.w(LOG_TAG, "onFailure(int, Header[], Throwable, JSONObject) was not overriden, but callback was received", throwable);
     }
 
     /**
@@ -97,17 +97,17 @@ public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSO
      * @param errorResponse parsed response if any
      */
     public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSONArray errorResponse) {
-
+        Log.w(LOG_TAG, "onFailure(int, Header[], Throwable, JSONArray) was not overriden, but callback was received", throwable);
     }
 
     @Override
     public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
-
+        Log.w(LOG_TAG, "onFailure(int, Header[], String, Throwable) was not overriden, but callback was received", throwable);
     }
 
     @Override
     public void onSuccess(int statusCode, Header[] headers, String responseString) {
-
+        Log.w(LOG_TAG, "onSuccess(int, Header[], String) was not overriden, but callback was received");
     }
 
     @Override
diff --git a/sample/build.gradle b/sample/build.gradle
index f6541400..4ec13b7d 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -6,7 +6,7 @@ buildscript {
         classpath 'com.android.tools.build:gradle:0.+'
     }
 }
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 repositories {
     mavenCentral()
@@ -34,6 +34,7 @@ android {
         warningsAsErrors true
         quiet false
         showAll true
+	disable 'OldTargetApi'
     }
 
     packagingOptions {
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index 59f9265c..c4e37b1a 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
+
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.loopj.android.http.sample"
           android:versionCode="1"
@@ -9,7 +10,6 @@
     <application
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
-        android:name=".SampleApplication"
         android:theme="@style/AppTheme">
         <activity android:name=".WaypointsActivity">
             <intent-filter>
@@ -22,6 +22,7 @@
         <activity android:name=".DeleteSample"/>
         <activity android:name=".PutSample"/>
         <activity android:name=".JsonSample"/>
+        <activity android:name=".JsonStreamerSample"/>
         <activity android:name=".FileSample"/>
         <activity android:name=".BinarySample"/>
         <activity android:name=".GzipSample"/>
@@ -33,11 +34,11 @@
         <activity android:name=".IntentServiceSample"/>
         <activity android:name=".SaxSample"/>
         <activity android:name=".FilesSample"/>
+        <activity android:name=".PersistentCookiesSample"/>
         <activity android:name=".CustomCASample"/>
         <activity android:name=".RetryRequestSample"/>
         <activity android:name=".RangeResponseSample"/>
         <activity android:name=".Http401AuthSample"/>
-        <activity android:name=".PersistentCookiesSample"/>
 
         <service android:name=".services.ExampleIntentService"/>
     </application>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java b/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
new file mode 100644
index 00000000..e9ac0b70
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
@@ -0,0 +1,97 @@
+/*
+    Android Asynchronous Http Client Sample
+    Copyright (c) 2014 Marek Sebera <marek.sebera@gmail.com>
+    http://loopj.com
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+package com.loopj.android.http.sample;
+
+import android.util.Log;
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.RequestParams;
+import com.loopj.android.http.ResponseHandlerInterface;
+import java.util.Iterator;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * This sample demonstrates how to upload JSON data using streams, resulting
+ * in a low-memory footprint even with extremely large data.
+ *
+ * Please note: You must prepare a server-side end-point to consume the uploaded
+ * data. This is because the data is uploaded using "application/json" content
+ * type and regular methods, expecting a multi-form content type, will fail to
+ * retrieve the POST'ed data.
+ *
+ * @author Noor Dawod <github@fineswap.com>
+ */
+public class JsonStreamerSample extends PostSample {
+
+    private static final String LOG_TAG = "JsonStreamSample";
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        RequestParams params = new RequestParams();
+        params.setUseJsonStreamer(true);
+        JSONObject body;
+        if (isRequestBodyAllowed() && (body = getBodyTextAsJSON()) != null) {
+            try {
+                Iterator<String> keys = body.keys();
+                Log.d(LOG_TAG, "JSON data:");
+                while (keys.hasNext()) {
+                    String key = keys.next();
+                    Log.d(LOG_TAG, "  " + key + ": " + body.get(key));
+                    params.put(key, body.get(key).toString());
+                }
+            } catch (JSONException e) {
+                Log.w(LOG_TAG, "Unable to retrieve a JSON value", e);
+            }
+        }
+        return client.post(this, URL, headers, params,
+            RequestParams.APPLICATION_JSON, responseHandler);
+    }
+
+    @Override
+    public HttpEntity getRequestEntity() {
+        // Unused in this sample.
+        return null;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_json_streamer_sample;
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return false;
+    }
+
+    protected JSONObject getBodyTextAsJSON() {
+        String bodyText = getBodyText();
+        if (bodyText != null) {
+            try {
+                return new JSONObject(bodyText);
+            } catch(JSONException e) {
+                Log.e(LOG_TAG, "User's data is not a valid JSON object", e);
+            }
+        }
+        return null;
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index 80296dfc..546210cb 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -101,7 +101,7 @@ public void addRequestHandle(RequestHandle handle) {
 
     public void onRunButtonPressed() {
         addRequestHandle(executeSample(getAsyncHttpClient(),
-                (urlEditText == null || urlEditText.getText() == null) ? getDefaultURL() : urlEditText.getText().toString(),
+                getUrlText(getDefaultURL()),
                 getRequestHeaders(),
                 getRequestEntity(),
                 getResponseHandler()));
@@ -156,9 +156,10 @@ public void onClick(View v) {
     }
 
     public HttpEntity getRequestEntity() {
-        if (isRequestBodyAllowed() && bodyEditText.getText() != null) {
+        String bodyText;
+        if (isRequestBodyAllowed() && (bodyText = getBodyText()) != null) {
             try {
-                return new StringEntity(bodyEditText.getText().toString());
+                return new StringEntity(bodyText);
             } catch (UnsupportedEncodingException e) {
                 Log.e("SampleParentActivity", "cannot create String entity", e);
             }
@@ -166,6 +167,36 @@ public HttpEntity getRequestEntity() {
         return null;
     }
 
+    public String getUrlText() {
+        return getUrlText(null);
+    }
+
+    public String getUrlText(String defaultText) {
+        return urlEditText != null && urlEditText.getText() != null
+            ? urlEditText.getText().toString()
+            : defaultText;
+    }
+
+    public String getBodyText() {
+        return getBodyText(null);
+    }
+
+    public String getBodyText(String defaultText) {
+        return bodyEditText != null && bodyEditText.getText() != null
+            ? bodyEditText.getText().toString()
+            : defaultText;
+    }
+
+    public String getHeadersText() {
+        return getHeadersText(null);
+    }
+
+    public String getHeadersText(String defaultText) {
+        return headersEditText != null && headersEditText.getText() != null
+            ? headersEditText.getText().toString()
+            : defaultText;
+    }
+
     protected final void debugHeaders(String TAG, Header[] headers) {
         if (headers != null) {
             Log.d(TAG, "Return Headers:");
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index bbb0fe13..f586e5c6 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -36,6 +36,7 @@
         new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
         new SampleConfig(R.string.title_put_sample, PutSample.class),
         new SampleConfig(R.string.title_json_sample, JsonSample.class),
+        new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
         new SampleConfig(R.string.title_sax_example, SaxSample.class),
         new SampleConfig(R.string.title_file_sample, FileSample.class),
         new SampleConfig(R.string.title_binary_sample, BinarySample.class),
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 1285510c..cf3fefa3 100755
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -15,6 +15,7 @@
 
     <string name="title_get_sample">GET</string>
     <string name="title_json_sample">GET JSON and parse it</string>
+    <string name="title_json_streamer_sample">POST JSON using streamer</string>
     <string name="title_post_sample">POST</string>
     <string name="title_put_sample">PUT</string>
     <string name="title_delete_sample">DELETE</string>
