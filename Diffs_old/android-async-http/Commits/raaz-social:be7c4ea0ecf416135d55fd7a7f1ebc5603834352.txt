diff --git a/.classpath b/.classpath
index fa94be66..040c4d39 100644
--- a/.classpath
+++ b/.classpath
@@ -1,10 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="src" path="examples"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="lib" path="libs/httpclientandroidlib-1.1.1.jar"/>
+	<classpathentry kind="lib" path="libs/httpclientandroidlib-1.1.1.jar" sourcepath="/home/adam/dev/surespot/libs/android/google/httpclientandroidlib/script"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index fbeab8b4..fa959e9c 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -6,6 +6,6 @@
     <application
         android:name="android_async_http">
     </application>
-    <uses-sdk android:minSdkVersion="3" />
+    <uses-sdk android:minSdkVersion="10" />
     <uses-permission android:name="android.permission.INTERNET" />
 </manifest> 
diff --git a/examples/ExampleUsage.java b/examples/ExampleUsage.java
deleted file mode 100644
index 2b7a4fa0..00000000
--- a/examples/ExampleUsage.java
+++ /dev/null
@@ -1,14 +0,0 @@
-import com.loopj.android.http.*;
-
-public class ExampleUsage {
-    public static void makeRequest() {
-        AsyncHttpClient client = new AsyncHttpClient();
-
-        client.get("http://www.google.com", new AsyncHttpResponseHandler() {
-            @Override
-            public void onSuccess(String response) {
-                System.out.println(response);
-            }
-        });
-    }
-}
\ No newline at end of file
diff --git a/examples/TwitterRestClient.java b/examples/TwitterRestClient.java
deleted file mode 100644
index 387a8711..00000000
--- a/examples/TwitterRestClient.java
+++ /dev/null
@@ -1,21 +0,0 @@
-// Static wrapper library around AsyncHttpClient
-
-import com.loopj.android.http.*;
-
-public class TwitterRestClient {
-    private static final String BASE_URL = "http://api.twitter.com/1/";
-
-    private static AsyncHttpClient client = new AsyncHttpClient();
-
-    public static void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.get(getAbsoluteUrl(url), params, responseHandler);
-    }
-
-    public static void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.post(getAbsoluteUrl(url), params, responseHandler);
-    }
-
-    private static String getAbsoluteUrl(String relativeUrl) {
-        return BASE_URL + relativeUrl;
-    }
-}
\ No newline at end of file
diff --git a/examples/TwitterRestClientUsage.java b/examples/TwitterRestClientUsage.java
deleted file mode 100644
index a4c89c8c..00000000
--- a/examples/TwitterRestClientUsage.java
+++ /dev/null
@@ -1,21 +0,0 @@
-import org.json.*;
-import com.loopj.android.http.*;
-
-class TwitterRestClientUsage {
-    public void getPublicTimeline() {
-        TwitterRestClient.get("statuses/public_timeline.json", null, new JsonHttpResponseHandler() {
-            @Override
-            public void onSuccess(JSONArray timeline) {
-                try {
-                    JSONObject firstEvent = (JSONObject)timeline.get(0);
-                    String tweetText = firstEvent.getString("text");
-
-                    // Do something with the response
-                    System.out.println(tweetText);
-                } catch(JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-        });
-    }
-}
\ No newline at end of file
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index a7f4e147..1d400718 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
@@ -32,6 +33,7 @@
 import java.util.zip.GZIPInputStream;
 
 import com.twofours.surespot.SurespotCachingHttpClient;
+import com.twofours.surespot.SurespotCachingHttpClient.SurespotHttpCacheStorage;
 
 import ch.boye.httpclientandroidlib.Header;
 import ch.boye.httpclientandroidlib.HeaderElement;
@@ -116,7 +118,7 @@
     /**
      * Creates a new AsyncHttpClient.
      */
-    public AsyncHttpClient() {
+    public AsyncHttpClient(Context context) {
         BasicHttpParams httpParams = new BasicHttpParams();
 
         ConnManagerParams.setTimeout(httpParams, socketTimeout);
@@ -136,8 +138,15 @@ public AsyncHttpClient() {
         schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
 
+        CacheConfig memoryCacheConfig = new CacheConfig();  
+        memoryCacheConfig.setMaxCacheEntries(100);
+        memoryCacheConfig.setMaxObjectSizeBytes(200000);
+   
+        
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        cachingHttpClient = new SurespotCachingHttpClient(new DefaultHttpClient(cm, httpParams));
+        DefaultHttpClient defaultClient = new DefaultHttpClient(cm, httpParams);
+        cachingHttpClient = SurespotCachingHttpClient.createSurespotCachingHttpClient(context, defaultClient);
+        
         cachingHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
             public void process(HttpRequest request, HttpContext context) {
                 if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
@@ -168,16 +177,7 @@ public void process(HttpResponse response, HttpContext context) {
         });
 
         cachingHttpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
-        
-        
-        CacheConfig cacheConfig = new CacheConfig();  
-        cacheConfig.setMaxCacheEntries(1000);
-        cacheConfig.setMaxObjectSizeBytes(8192);
-        
-        
-
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();
-
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
     }
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index ae2fb028..df5b7c39 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -10,6 +10,10 @@
 import android.os.Message;
 
 public abstract class SyncHttpClient extends AsyncHttpClient {
+	public SyncHttpClient(Context context) {
+		super(context);		
+	}
+
 	private int responseCode;
 	/*
 	 * as this is a synchronous request this is just a helping mechanism to pass
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index f23056e9..d8678bea 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -1,7 +1,15 @@
 package com.twofours.surespot;
 
+import java.io.File;
 import java.io.IOException;
-
+import java.io.InputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.OutputStream;
+import java.net.URLEncoder;
+
+import android.content.Context;
+import android.util.Log;
 import ch.boye.httpclientandroidlib.HttpRequestInterceptor;
 import ch.boye.httpclientandroidlib.HttpResponseInterceptor;
 import ch.boye.httpclientandroidlib.client.CredentialsProvider;
@@ -10,79 +18,171 @@
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheStorage;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateCallback;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateException;
+import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
 import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
 
+import com.jakewharton.DiskLruCache;
+import com.jakewharton.DiskLruCache.Snapshot;
 import com.loopj.android.http.RetryHandler;
 
 public class SurespotCachingHttpClient extends CachingHttpClient {
-	private DefaultHttpClient mDefaultHttpClient;
-	
-	public SurespotCachingHttpClient(DefaultHttpClient defaultHttpClient) {
-		super(defaultHttpClient, getCacheConfig());
-		mDefaultHttpClient = defaultHttpClient;
+	private AbstractHttpClient mAbstractHttpClient;
+
+	private static final String DISK_CACHE_SUBDIR = "http";
+	private static SurespotCachingHttpClient mInstance = null;
+
+	public SurespotCachingHttpClient(Context context, CachingHttpClient diskCacheClient, AbstractHttpClient defaultHttpClient) {
+		super(diskCacheClient, getMemoryCacheConfig());
+		log.enableDebug(true);
+		log.enableError(true);
+		log.enableInfo(true);
+		log.enableTrace(true);
+		log.enableWarn(true);
 		
+		diskCacheClient.log.enableDebug(true);
+		diskCacheClient.log.enableError(true);
+		diskCacheClient.log.enableInfo(true);
+		diskCacheClient.log.enableTrace(true);
+		diskCacheClient.log.enableWarn(true);
+
+
+		mAbstractHttpClient = defaultHttpClient;
+
+	}
+
+	/**
+	 * singleton - TODO dependency injection
+	 * @param context
+	 * @param abstractClient
+	 * @return
+	 */
+	public static SurespotCachingHttpClient createSurespotCachingHttpClient(Context context, AbstractHttpClient abstractClient) {
+		if (mInstance == null) {
+
+			CachingHttpClient diskCacheClient = new CachingHttpClient(abstractClient, new SurespotHttpCacheStorage(new File(context
+					.getCacheDir().getPath() + File.pathSeparator + DISK_CACHE_SUBDIR)), getDiskCacheConfig());
+
+			SurespotCachingHttpClient client = new SurespotCachingHttpClient(context, diskCacheClient, abstractClient);
+			mInstance = client;
+		}
+		return mInstance;
+	}
 
+	private static String generateKey(String key) {
+		return key.replaceAll("[^a-zA-Z0-9_-]", "");
 	}
-	
-	public class SurespotHttpCacheStorage implements HttpCacheStorage {
+
+	public static class SurespotHttpCacheStorage implements HttpCacheStorage {
+		private static final String TAG = "SurespotHttpCacheStorage";
+		private com.jakewharton.DiskLruCache mCache;
+
+		public SurespotHttpCacheStorage(File cacheDir) {
+			try {
+				Log.v(TAG, "storage cache dir: " + cacheDir);
+
+				mCache = DiskLruCache.open(cacheDir, 100, 1, Integer.MAX_VALUE);
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
 
 		@Override
 		public HttpCacheEntry getEntry(String arg0) throws IOException {
-			// TODO Auto-generated method stub
-			return null;
+			HttpCacheEntry entry = null;
+			try {
+				Snapshot snapshot = null;
+
+				snapshot = mCache.get(generateKey(arg0));
+
+				if (snapshot == null) {
+					return null;
+				}
+				InputStream is = snapshot.getInputStream(0);
+				ObjectInputStream ois = new ObjectInputStream(is);
+
+				entry = (HttpCacheEntry) ois.readObject();
+				is.close();
+			} catch (ClassNotFoundException e) {
+				throw new IOException("HttpCacheEntry class not found", e);
+			}
+
+			return entry;
 		}
 
 		@Override
-		public void putEntry(String arg0, HttpCacheEntry arg1) throws IOException {
-			// TODO Auto-generated method stub		
+		public void putEntry(String key, HttpCacheEntry entry) throws IOException {
+			try {
+				DiskLruCache.Editor edit = mCache.edit(generateKey(key));
+
+				OutputStream outputStream = edit.newOutputStream(0);
+				ObjectOutputStream os = new ObjectOutputStream(outputStream);
+				os.writeObject(entry);
+				os.close();
+
+				edit.commit();
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+
 		}
 
 		@Override
 		public void removeEntry(String arg0) throws IOException {
-			// TODO Auto-generated method stub
-			
+			mCache.remove(generateKey(arg0));
 		}
 
 		@Override
 		public void updateEntry(String arg0, HttpCacheUpdateCallback arg1) throws IOException, HttpCacheUpdateException {
-			// TODO Auto-generated method stub
-			
+			try {
+				String key = generateKey(arg0);
+				putEntry(generateKey(key), arg1.update(getEntry(key)));
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+
 		}
-		
+
 	}
-	
-	private static CacheConfig getCacheConfig() {
-		
-		
-		
-		CacheConfig cacheConfig = new CacheConfig();  
+
+	private static CacheConfig getMemoryCacheConfig() {
+
+		CacheConfig cacheConfig = new CacheConfig();
 		cacheConfig.setMaxCacheEntries(50);
-		cacheConfig.setMaxObjectSizeBytes(120000);
+		cacheConfig.setMaxObjectSizeBytes(250000);
+		return cacheConfig;
+	}
+
+	public static CacheConfig getDiskCacheConfig() {
+
+		CacheConfig cacheConfig = new CacheConfig();
+		cacheConfig.setMaxCacheEntries(200);
+		cacheConfig.setMaxObjectSizeBytes(250000);
 		return cacheConfig;
 	}
 
 	public HttpRequestRetryHandler getHttpRequestRetryHandler() {
-		return mDefaultHttpClient.getHttpRequestRetryHandler();
+		return mAbstractHttpClient.getHttpRequestRetryHandler();
 	}
 
 	public CredentialsProvider getCredentialsProvider() {
-		return mDefaultHttpClient.getCredentialsProvider();
+		return mAbstractHttpClient.getCredentialsProvider();
 	}
 
 	public void addRequestInterceptor(HttpRequestInterceptor httpRequestInterceptor) {
-		mDefaultHttpClient.addRequestInterceptor(httpRequestInterceptor);
+		mAbstractHttpClient.addRequestInterceptor(httpRequestInterceptor);
 	}
 
 	public void addResponseInterceptor(HttpResponseInterceptor httpResponseInterceptor) {
-		mDefaultHttpClient.addResponseInterceptor(httpResponseInterceptor);
+		mAbstractHttpClient.addResponseInterceptor(httpResponseInterceptor);
 
 	}
 
 	public void setHttpRequestRetryHandler(RetryHandler retryHandler) {
-		mDefaultHttpClient.setHttpRequestRetryHandler(retryHandler);
-		
+		mAbstractHttpClient.setHttpRequestRetryHandler(retryHandler);
+
 	}
 
 }
