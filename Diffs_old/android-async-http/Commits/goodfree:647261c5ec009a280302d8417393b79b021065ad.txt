diff --git a/android-app-http/src/com/app/library/http/WebImageView.java b/android-app-http/src/com/app/library/http/WebImageView.java
index 1e8002ac..d7bcf58c 100644
--- a/android-app-http/src/com/app/library/http/WebImageView.java
+++ b/android-app-http/src/com/app/library/http/WebImageView.java
@@ -1,7 +1,5 @@
 package com.app.library.http;
 
-import java.util.HashMap;
-
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -111,22 +109,12 @@ public void onCompleted(byte[] data, int statusCode, String description, int act
 				} else {
 					setDefaultImage();
 				}
-			} else {
-				setResult(data);
-			}
-		}
-
-		private void setResult(byte[] data) {
-			Bitmap bitmap = WebImageBuffer.get(imageUrl);
-			if (null != bitmap) {
-				setImageBitmap(bitmap);
 			} else {
 				if (null != data) {
 					// decode image size
 					BitmapFactory.Options o = new BitmapFactory.Options();
 					o.inJustDecodeBounds = true;
 					BitmapFactory.decodeByteArray(data, 0, data.length, o);
-
 					// Find the correct scale value. It should be the power of
 					final int REQUIRED_SIZE = 100;
 					int width_tmp = o.outWidth, height_tmp = o.outHeight;
@@ -138,19 +126,15 @@ private void setResult(byte[] data) {
 						height_tmp /= 2;
 						scale *= 2;
 					}
-
 					// decode with inSampleSize
 					BitmapFactory.Options options = new Options();
 					options.inSampleSize = scale;
-					bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
+					Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
 					if (bitmap != null) {
 						setImageBitmap(bitmap);
-						WebImageBuffer.put(imageUrl, bitmap);
 					} else {
 						setDefaultImage();
 					}
-				} else {
-					setDefaultImage();
 				}
 			}
 		}
@@ -165,43 +149,4 @@ public void setDefaultImage() {
 		}
 	}
 
-	/**
-	 * reset WebImageBuffer
-	 */
-	public static void resetWebImageBuffer() {
-		WebImageBuffer.clear();
-	}
-
-	/**
-	 * WebImageBuffer for WebImageView
-	 */
-	public static class WebImageBuffer {
-		private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
-
-		public synchronized static void clear() {
-			try {
-				caches.clear();
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-		}
-
-		public synchronized static Bitmap get(String url) {
-			try {
-				return caches.get(url);
-			} catch (Exception e) {
-				e.printStackTrace();
-				return null;
-			}
-		}
-
-		public synchronized static void put(String url, Bitmap bitmap) {
-			try {
-				caches.put(url, bitmap);
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-		}
-	}
-
 }
