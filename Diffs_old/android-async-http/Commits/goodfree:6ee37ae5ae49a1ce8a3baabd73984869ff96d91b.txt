diff --git a/.project b/.project
index afbc6dae..4e20e606 100644
--- a/.project
+++ b/.project
@@ -1,33 +1,33 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>android-app-base</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>android-app-http</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
index 90cbd4ba..00d7cce9 100644
--- a/.settings/org.eclipse.core.resources.prefs
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -1,3 +1,3 @@
-#Mon Apr 08 22:04:50 CST 2013
 eclipse.preferences.version=1
+encoding//src/com/allthelucky/common/WebImageView.java=UTF-8
 encoding/<project>=UTF-8
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index ffd7ebd6..628c04e5 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     android:versionCode="1"
-    android:versionName="1.4.1" package="com.allthelucky.framework">
+    android:versionName="1.4.1" package="com.loopj.android.http">
 
     <application  android:label="http">
         <activity
diff --git a/res/drawable-hdpi/ic_launcher.png b/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 8074c4c5..00000000
Binary files a/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/res/drawable-ldpi/ic_launcher.png b/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 8074c4c5..00000000
Binary files a/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/res/drawable-mdpi/ic_launcher.png b/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 8074c4c5..00000000
Binary files a/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/res/layout/listview.xml b/res/layout/listview.xml
deleted file mode 100644
index ece9fe65..00000000
--- a/res/layout/listview.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical" >
-
-    <GridView
-        android:id="@+id/listView1"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" 
-        android:cacheColorHint="#00000000"
-        android:horizontalSpacing="5dp"
-        android:verticalSpacing="5dp"
-        android:numColumns="3">
-    </GridView>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/layout/listview_item.xml b/res/layout/listview_item.xml
deleted file mode 100644
index 3868a87a..00000000
--- a/res/layout/listview_item.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:gravity="center" >
-
-    <com.allthelucky.net.WebImageView
-        android:id="@+id/imageView1"
-        android:layout_width="63dp"
-        android:layout_height="63dp"
-        android:src="@drawable/ic_launcher" 
-        android:scaleType="fitXY"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/src/com/allthelucky/framework/Log.java b/src/com/allthelucky/common/DebugLogger.java
similarity index 83%
rename from src/com/allthelucky/framework/Log.java
rename to src/com/allthelucky/common/DebugLogger.java
index 9fc6ab45..9504c5a5 100644
--- a/src/com/allthelucky/framework/Log.java
+++ b/src/com/allthelucky/common/DebugLogger.java
@@ -1,12 +1,12 @@
-package com.allthelucky.framework;
+package com.allthelucky.common;
 
 /**
  * @description: overide Log utils
  * 
- * @author pxw(www.allthelucky.com)
+ * @author savant-pan
  * 
  */
-public final class Log {
+public final class DebugLogger {
 
 	private static boolean mDebug = false;
 
diff --git a/src/com/allthelucky/common/RequestListener.java b/src/com/allthelucky/common/RequestListener.java
new file mode 100644
index 00000000..af1dcae6
--- /dev/null
+++ b/src/com/allthelucky/common/RequestListener.java
@@ -0,0 +1,37 @@
+package com.allthelucky.common;
+
+/**
+ * Request Listener for AsyncHttpResponseHandler
+ * 
+ * @author savant
+ * 
+ */
+public interface RequestListener {
+	/**
+	 * Status OK
+	 */
+	public final static int OK = 0;
+	/**
+	 * Status ERR
+	 */
+	public final static int ERR = 1;
+
+	/**
+	 * callback when Request start
+	 */
+	void onStart();
+
+	/**
+	 * callback when Request end
+	 * 
+	 * @param data
+	 *            byte array if any
+	 * @param statusCode
+	 *            Request Status
+	 * @param description
+	 *            description
+	 * @param actionId
+	 *            request identifier
+	 */
+	void onCompleted(byte[] data, int statusCode, String description, int actionId);
+}
diff --git a/src/com/allthelucky/framework/RequestManager.java b/src/com/allthelucky/common/RequestManager.java
similarity index 78%
rename from src/com/allthelucky/framework/RequestManager.java
rename to src/com/allthelucky/common/RequestManager.java
index b2cc5cc7..2f5d51a7 100644
--- a/src/com/allthelucky/framework/RequestManager.java
+++ b/src/com/allthelucky/common/RequestManager.java
@@ -1,4 +1,4 @@
-package com.allthelucky.framework;
+package com.allthelucky.common;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -9,6 +9,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.security.MessageDigest;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
@@ -19,6 +20,8 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
 import android.os.AsyncTask;
 import android.text.TextUtils;
 
@@ -163,7 +166,7 @@ public void get(Context context, String url, RequestListener requestListener, in
 	 * @param actionId
 	 */
 	public void get(Context context, String url, RequestListener requestListener, boolean cache, int actionId) {
-		final String encodeUrl = BaseUtils.urlEncode(url);
+		final String encodeUrl = urlEncode(url);
 		if (!cache) {
 			asyncHttpClient.get(context, url, new HttpRequestListener(requestListener, actionId));
 		} else {
@@ -171,7 +174,7 @@ public void get(Context context, String url, RequestListener requestListener, bo
 				loadAndSaveResource(context, encodeUrl, requestListener, 0l, actionId);
 			} else {
 				loadCache(context, encodeUrl, requestListener, actionId);
-				if (!BaseUtils.hasNetwork(context)) {
+				if (!hasNetwork(context)) {
 					return;
 				} else {
 					checkUpdate(context, encodeUrl, actionId);
@@ -203,7 +206,7 @@ private void loadAndSaveResource(final Context context, final String url, final
 	 */
 	private void checkUpdate(final Context context, final String url, final int actionId) {
 		final SharedPreferences pref = context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE);
-		final String fileName = BaseUtils.encryptMD5(url);
+		final String fileName = encryptMD5(url);
 		new AsyncTask<Void, Void, Long>() {
 			@Override
 			protected Long doInBackground(Void... params) {
@@ -250,7 +253,7 @@ private void loadCache(final Context context, final String url, final RequestLis
 			@Override
 			protected byte[] doInBackground(Void... params) {
 				try {
-					InputStream is = context.openFileInput(BaseUtils.encryptMD5(url));
+					InputStream is = context.openFileInput(encryptMD5(url));
 					ByteArrayOutputStream bos = new ByteArrayOutputStream();
 					byte[] bytes = new byte[4096];
 					int len = 0;
@@ -279,7 +282,7 @@ protected void onPostExecute(byte[] result) {
 	 */
 	private boolean hasCache(Context context, String url) {
 		try {
-			context.openFileInput(BaseUtils.encryptMD5(url));
+			context.openFileInput(encryptMD5(url));
 			return true;
 		} catch (Exception e) {
 			return false;
@@ -345,7 +348,7 @@ public void onCompleted(byte[] data, int statusCode, String description, int act
 		private void saveCache(Context context, String url, byte[] data) {
 			try {
 				ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
-				FileOutputStream os = context.openFileOutput(BaseUtils.encryptMD5(url), Context.MODE_PRIVATE);
+				FileOutputStream os = context.openFileOutput(encryptMD5(url), Context.MODE_PRIVATE);
 
 				byte[] buffer = new byte[1024];
 				int len = 0;
@@ -366,7 +369,7 @@ private void saveCache(Context context, String url, byte[] data) {
 
 		private void saveLastModified() {
 			context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE).edit()
-					.putLong(BaseUtils.encryptMD5(url), lastModified).commit();
+					.putLong(encryptMD5(url), lastModified).commit();
 		}
 	}
 
@@ -405,4 +408,71 @@ public void onFailure(Throwable error, String content) {
 			requestListener.onCompleted(null, RequestListener.ERR, content, actionId);
 		}
 	}
+
+	/**
+	 * 检验网络是否有连接，有则true，无则false
+	 * 
+	 * @param context
+	 * @return
+	 */
+	public static boolean hasNetwork(Context context) {
+		ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+		NetworkInfo ni = cm.getActiveNetworkInfo();
+		if (ni != null && ni.isConnected()) {
+			return true;
+		}
+		return false;
+	}
+
+	/**
+	 * 16位MD5
+	 */
+	public static String encryptMD5(String strInput) {
+		return encryptMD532(strInput).substring(8, 24);
+	}
+
+	public static String encryptMD532(String strInput) {
+		StringBuffer buf = null;
+		try {
+			MessageDigest md = MessageDigest.getInstance("MD5");
+			md.update(strInput.getBytes("UTF-8"));
+			byte b[] = md.digest();
+			buf = new StringBuffer(b.length * 2);
+			for (int i = 0; i < b.length; i++) {
+				if (((int) b[i] & 0xff) < 0x10) { /* & 0xff转换无符号整型 */
+					buf.append("0");
+				}
+				buf.append(Long.toHexString((int) b[i] & 0xff)); // 转换16进制,下方法同
+			}
+		} catch (Exception ex) {
+			ex.printStackTrace();
+		}
+		return buf.toString();
+	}
+
+	/**
+	 * 网址汉字编码
+	 */
+	public static String urlEncode(String str) {
+		StringBuffer buf = new StringBuffer();
+		byte c;
+		byte[] utfBuf;
+		try {
+			utfBuf = str.getBytes("UTF-8");
+		} catch (UnsupportedEncodingException e) {
+			System.out.println("URLEncode: Failed to get UTF-8 bytes from string.");
+			utfBuf = str.getBytes();
+		}
+		for (int i = 0; i < utfBuf.length; i++) {
+			c = utfBuf[i];
+			if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')
+					|| (c == '.' || c == '-' || c == '*' || c == '_')
+					|| (c == ':' || c == '/' || c == '=' || c == '?' || c == '&' || c == '%')) {
+				buf.append((char) c);
+			} else {
+				buf.append("%").append(Integer.toHexString((0x000000FF & c)));
+			}
+		}
+		return buf.toString();
+	}
 }
diff --git a/src/com/allthelucky/common/WebImageView.java b/src/com/allthelucky/common/WebImageView.java
new file mode 100644
index 00000000..62ba0380
--- /dev/null
+++ b/src/com/allthelucky/common/WebImageView.java
@@ -0,0 +1,211 @@
+package com.allthelucky.common;
+
+import java.util.HashMap;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.BitmapFactory.Options;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.webkit.WebSettings;
+import android.widget.ImageView;
+
+/**
+ * ImageView with a network image RequestManager
+ * 
+ * @author savant-pan
+ */
+public class WebImageView extends ImageView {
+	private static final int DEFAULT_DRAWABLE = -1;
+	private static final int DEFAULT_SAMPLE_SIZE = 1;
+
+	private int defaultDrawable = DEFAULT_DRAWABLE;
+	private int sampleSize = DEFAULT_SAMPLE_SIZE;
+	private String imageUrl = "";
+	private boolean hasRetry = false;
+
+	/**
+	 * @param context
+	 */
+	public WebImageView(Context context) {
+		this(context, null);
+	}
+
+	/**
+	 * @param context
+	 * @param attrs
+	 */
+	public WebImageView(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
+
+	/**
+	 * @param context
+	 * @param attrs
+	 * @param defStyle
+	 */
+	public WebImageView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+	}
+
+	/**
+	 * set a url
+	 * 
+	 * @param url
+	 *            network resource address
+	 */
+	public void setURLAsync(String url) {
+		this.setURLAsync(url, DEFAULT_DRAWABLE);
+	}
+
+	/**
+	 * set a url and default drawable
+	 * 
+	 * @param url
+	 *            network resource address
+	 * @param defaultImage
+	 *            drawable id
+	 */
+	public void setURLAsync(String url, int defaultDrawable) {
+		this.setURLAsync(url, defaultDrawable, DEFAULT_SAMPLE_SIZE);
+	}
+
+	/**
+	 * set a url and default drawable
+	 * 
+	 * @param url
+	 *            network resource address
+	 * @param defaultImage
+	 *            drawable id
+	 * @param sampleSize
+	 *            sample for Options
+	 */
+	public void setURLAsync(String url, int defaultDrawable, int sampleSize) {
+		this.imageUrl = url;
+		this.defaultDrawable = defaultDrawable;
+		this.sampleSize = sampleSize;
+		this.firstLoad();
+	}
+
+	/**
+	 * first load image
+	 */
+	private void firstLoad() {
+		this.loadResource(WebSettings.LOAD_CACHE_ELSE_NETWORK);
+	}
+
+	/**
+	 * retry cache when failed first time
+	 */
+	private void retryCache() {
+		this.loadResource(WebSettings.LOAD_CACHE_ONLY);
+	}
+
+	private void loadResource(int cacheMode) {
+		if (TextUtils.isEmpty(imageUrl)) {
+			this.setDefaultImage();
+		} else {
+			RequestManager.getInstance().get(getContext(), imageUrl, requestListener, true, 0);
+		}
+	}
+
+	/**
+	 * load callback for RequestManager
+	 */
+	private RequestListener requestListener = new RequestListener() {
+
+		@Override
+		public void onStart() {
+
+		}
+
+		@Override
+		public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
+			if (RequestListener.ERR == statusCode) {
+				if (!hasRetry) {
+					hasRetry = true;
+					retryCache();
+				} else {
+					setDefaultImage();
+				}
+			} else {
+				setResult(data);
+			}
+		}
+
+		private void setResult(byte[] data) {
+			Bitmap bitmap = WebImageBuffer.get(imageUrl);
+			if (null != bitmap) {
+				setImageBitmap(bitmap);
+			} else {
+				if (null != data) {
+					BitmapFactory.Options options = new Options();
+					options.inDither = false;
+					options.inPreferredConfig = null;
+					options.inSampleSize = sampleSize;
+					options.inPreferredConfig = Bitmap.Config.RGB_565;
+					options.inJustDecodeBounds = false;
+					bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
+					if (bitmap != null) {
+						setImageBitmap(bitmap);
+						WebImageBuffer.put(imageUrl, bitmap);
+					} else {
+						setDefaultImage();
+					}
+				} else {
+					setDefaultImage();
+				}
+			}
+		}
+	};
+
+	/**
+	 * set default drawable
+	 */
+	public void setDefaultImage() {
+		if (defaultDrawable != -1) {
+			setImageDrawable(getResources().getDrawable(defaultDrawable));
+		}
+	}
+
+	/**
+	 * reset WebImageBuffer
+	 */
+	public static void resetWebImageBuffer() {
+		WebImageBuffer.clear();
+	}
+
+	/**
+	 * WebImageBuffer for WebImageView
+	 */
+	public static class WebImageBuffer {
+		private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
+
+		public synchronized static void clear() {
+			try {
+				caches.clear();
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+		}
+
+		public synchronized static Bitmap get(String url) {
+			try {
+				return caches.get(url);
+			} catch (Exception e) {
+				e.printStackTrace();
+				return null;
+			}
+		}
+
+		public synchronized static void put(String url, Bitmap bitmap) {
+			try {
+				caches.put(url, bitmap);
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+		}
+	}
+
+}
diff --git a/src/com/allthelucky/framework/BaseActivity.java b/src/com/allthelucky/framework/BaseActivity.java
deleted file mode 100644
index a47f2e15..00000000
--- a/src/com/allthelucky/framework/BaseActivity.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.allthelucky.framework;
-
-import android.app.Activity;
-import android.app.ProgressDialog;
-import android.os.Bundle;
-import android.view.Window;
-import android.widget.Toast;
-
-/**
- * base activity with dialog
- * 
- * @author savant
- * 
- */
-public class BaseActivity extends Activity {
-
-	private ProgressDialog progressDialog=null;
-
-	@Override
-	protected void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
-		requestWindowFeature(Window.FEATURE_NO_TITLE);
-	}
-
-	public void showDialog() {
-		showDialog("正在加载，请稍候...", true);
-	}
-
-	public void showDialog(String message) {
-		showDialog(message, true);
-	}
-
-	public void showDialog(String message, boolean cancel) {
-		if (null == progressDialog) {
-			progressDialog = ProgressDialog.show(BaseActivity.this, "", "正在加载，请稍候...");
-			progressDialog.setCancelable(cancel);
-			progressDialog.setCanceledOnTouchOutside(false);
-		} else {
-			progressDialog.show();
-		}
-	}
-
-	public void dismissDialog() {
-		if (isFinishing()) {
-			return;
-		}
-		if (null != progressDialog && progressDialog.isShowing()) {
-			progressDialog.dismiss();
-		}
-	}
-
-	public void showToast(final String message) {
-		Toast.makeText(BaseActivity.this, message, Toast.LENGTH_SHORT).show();
-	}
-
-	@Override
-	public void onBackPressed() {
-		if (progressDialog != null && progressDialog.isShowing()) {
-			dismissDialog();
-		} else {
-			super.onBackPressed();
-		}
-	}
-}
diff --git a/src/com/allthelucky/framework/BaseUtils.java b/src/com/allthelucky/framework/BaseUtils.java
deleted file mode 100644
index 815d8994..00000000
--- a/src/com/allthelucky/framework/BaseUtils.java
+++ /dev/null
@@ -1,131 +0,0 @@
-package com.allthelucky.framework;
-
-import java.io.UnsupportedEncodingException;
-import java.security.MessageDigest;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.content.Context;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-
-/**
- * Utils　for Application
- * 
- * @author savant
- * 
- */
-public class BaseUtils {
-
-    /**
-     * 字节码数据 转 字符串工具
-     */
-    public static String bytesToString(byte[] data) {
-        if (data == null)
-            return null;
-        try {
-            return new String(data, "utf-8");
-        } catch (UnsupportedEncodingException e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    /**
-     * 字符串转JSONObject工具
-     * 
-     * @param json
-     * @return
-     */
-    public static JSONObject stringToJSONObject(String json) {
-        if (json == null)
-            return null;
-        try {
-            return new JSONObject(json);
-        } catch (JSONException e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    /**
-     * 字节码数据(字符)转JSONObject JSONObject
-     * 
-     * @param data
-     * @return
-     */
-    public static JSONObject bytesToJSONObject(byte[] data) {
-        if (data == null)
-            return null;
-        return stringToJSONObject(bytesToString(data));
-    }
-
-    /**
-     * 检验网络是否有连接，有则true，无则false
-     * 
-     * @param context
-     * @return
-     */
-    public static boolean hasNetwork(Context context) {
-        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-        NetworkInfo ni = cm.getActiveNetworkInfo();
-        if (ni != null && ni.isConnected()) {
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * 16位MD5
-     */
-    public static String encryptMD5(String strInput) {
-        return encryptMD532(strInput).substring(8, 24);
-    }
-
-    public static String encryptMD532(String strInput) {
-        StringBuffer buf = null;
-        try {
-            MessageDigest md = MessageDigest.getInstance("MD5");
-            md.update(strInput.getBytes("UTF-8"));
-            byte b[] = md.digest();
-            buf = new StringBuffer(b.length * 2);
-            for (int i = 0; i < b.length; i++) {
-                if (((int) b[i] & 0xff) < 0x10) { /* & 0xff转换无符号整型 */
-                    buf.append("0");
-                }
-                buf.append(Long.toHexString((int) b[i] & 0xff)); // 转换16进制,下方法同
-            }
-        } catch (Exception ex) {
-            ex.printStackTrace();
-        }
-        return buf.toString();
-    }
-
-    /**
-     * 网址汉字编码
-     */
-    public static String urlEncode(String str) {
-        StringBuffer buf = new StringBuffer();
-        byte c;
-        byte[] utfBuf;
-        try {
-            utfBuf = str.getBytes("UTF-8");
-        } catch (UnsupportedEncodingException e) {
-            System.out.println("URLEncode: Failed to get UTF-8 bytes from string.");
-            utfBuf = str.getBytes();
-        }
-        for (int i = 0; i < utfBuf.length; i++) {
-            c = utfBuf[i];
-            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')
-                    || (c == '.' || c == '-' || c == '*' || c == '_')
-                    || (c == ':' || c == '/' || c == '=' || c == '?' || c == '&' || c == '%')) {
-                buf.append((char) c);
-            } else {
-                buf.append("%").append(Integer.toHexString((0x000000FF & c)));
-            }
-        }
-        return buf.toString();
-    }
-
-}
diff --git a/src/com/allthelucky/framework/RequestListener.java b/src/com/allthelucky/framework/RequestListener.java
deleted file mode 100644
index 7019ace2..00000000
--- a/src/com/allthelucky/framework/RequestListener.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.allthelucky.framework;
-
-/**
- * Request Result Listener for AsyncHttpResponseHandler
- * 
- * @author savant
- * 
- */
-public interface RequestListener {
-    public final static int OK = 0;
-    public final static int ERR = 1;
-
-    void onStart();
-
-    void onCompleted(byte[] data, int statusCode, String description, int actionId);
-}
diff --git a/src/com/allthelucky/framework/WebImageView.java b/src/com/allthelucky/framework/WebImageView.java
deleted file mode 100644
index 4d6afcb3..00000000
--- a/src/com/allthelucky/framework/WebImageView.java
+++ /dev/null
@@ -1,187 +0,0 @@
-package com.allthelucky.framework;
-
-import java.util.HashMap;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.BitmapFactory.Options;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.webkit.WebSettings;
-import android.widget.ImageView;
-
-/**
- * Web ImageView
- * 
- * @author pxw
- */
-public class WebImageView extends ImageView {
-    protected static final String TAG = "WebImageView";
-    private int defaultImage = R.drawable.ic_launcher;
-    private String imageUrl = "";
-    private boolean hasRetry = false;
-
-    /**
-     * @param context
-     */
-    public WebImageView(Context context) {
-        this(context, null);
-    }
-
-    /**
-     * @param context
-     * @param attrs
-     */
-    public WebImageView(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    /**
-     * @param context
-     * @param attrs
-     * @param defStyle
-     */
-    public WebImageView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    /**
-     * 设置请求网址
-     * 
-     * @param url
-     */
-    public void setURLAsync(String url) {
-        setURLAsync(url, R.drawable.ic_launcher);
-    }
-
-    /**
-     * 设置请求网址及默认资源
-     * 
-     * @param url
-     * @param defaultImage
-     */
-    public void setURLAsync(String url, int defaultImage) {
-        this.imageUrl = url;
-        this.defaultImage = defaultImage;
-        this.firstLoad();
-    }
-
-    /**
-     * 第一次加载，如有更新加载网络，否则加载缓存
-     */
-    private void firstLoad() {
-        this.loadResource(WebSettings.LOAD_CACHE_ELSE_NETWORK);
-    }
-
-    /**
-     * 加载失败的情况下，试图仅从缓存加载
-     */
-    private void retryCache() {
-        this.loadResource(WebSettings.LOAD_CACHE_ONLY);
-    }
-
-    private void loadResource(int cacheMode) {
-        if (TextUtils.isEmpty(imageUrl)) {
-            this.setDefaultImage();
-        } else {
-            RequestManager.getInstance().get(getContext(), imageUrl, requestListener, true, 0);
-        }
-    }
-
-    /**
-     * 网络加载结果处理
-     */
-    private RequestListener requestListener = new RequestListener() {
-
-        @Override
-        public void onStart() {
-
-        }
-
-        @Override
-        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
-            if (RequestListener.ERR == statusCode) {
-                if (!hasRetry) {
-                    hasRetry = true;
-                    retryCache();
-                } else {
-                    setDefaultImage();
-                }
-            } else {
-                Bitmap bitmap = WebImageBuffer.get(imageUrl);
-                if (null != bitmap) {
-                    setImageBitmap(bitmap);
-                } else {
-                    if (null != data) {
-                        BitmapFactory.Options options = new Options();
-                        options.inDither = false; /* 不进行图片抖动处理 */
-                        options.inPreferredConfig = null; /* 设置让解码器以最佳方式解码 */
-                        options.inSampleSize = 1; /* 图片长宽方向缩小倍数 */
-                        options.inPreferredConfig = Bitmap.Config.RGB_565;
-                        options.inJustDecodeBounds = false;
-                        bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
-                        if (bitmap != null) {
-                            setImageBitmap(bitmap);
-                            WebImageBuffer.put(imageUrl, bitmap);
-                        } else {
-                            setDefaultImage();
-                        }
-                    } else {
-                        setDefaultImage();
-                    }
-                }
-            }
-        }
-    };
-
-    /**
-     * 设置默认资源图片
-     */
-    public void setDefaultImage() {
-        setImageDrawable(getResources().getDrawable(defaultImage));
-    }
-
-    /**
-     * 重置 WebImageBuffer
-     */
-    public static void resetWebImageBuffer() {
-        WebImageBuffer.clear();
-    }
-
-    /**
-     * 图像Bitmap缓存工具
-     * 
-     * @author pxw
-     * 
-     */
-    public static class WebImageBuffer {
-        private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
-
-        public synchronized static void clear() {
-            try {
-                caches.clear();
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
-
-        public synchronized static Bitmap get(String url) {
-            try {
-                return caches.get(url);
-            } catch (Exception e) {
-                e.printStackTrace();
-                return null;
-            }
-        }
-
-        public synchronized static void put(String url, Bitmap bitmap) {
-            try {
-                caches.put(url, bitmap);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-}
