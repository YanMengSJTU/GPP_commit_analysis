diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 24f409e2..5183bcf4 100644
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -20,27 +20,13 @@
 
 import android.content.Context;
 import android.util.Log;
-
-import org.apache.http.Header;
-import org.apache.http.HeaderElement;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpHost;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpResponseInterceptor;
-import org.apache.http.HttpVersion;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import org.apache.http.*;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.CookieStore;
 import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpDelete;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpHead;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.client.methods.HttpPut;
-import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.client.methods.*;
 import org.apache.http.client.protocol.ClientContext;
 import org.apache.http.conn.params.ConnManagerParams;
 import org.apache.http.conn.params.ConnPerRouteBean;
@@ -50,6 +36,7 @@
 import org.apache.http.conn.scheme.SchemeRegistry;
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.entity.HttpEntityWrapper;
+import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.client.DefaultRedirectHandler;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
@@ -63,12 +50,9 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
 import java.lang.ref.WeakReference;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
+import java.util.*;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
@@ -653,6 +637,28 @@ public RequestHandle post(String url, ResponseHandlerInterface responseHandler)
         return post(null, url, null, responseHandler);
     }
 
+    /**
+     * Perform a HTTP POST request, with a object handled by jacson.
+     *
+     * @param url             the URL to send the request to.
+     * @param body             the body to send .
+     * @param responseHandler the response handler instance that should handle the response.
+     * @return RequestHandle of future request process
+     */
+    public RequestHandle post(String url,Object body, ResponseHandlerInterface responseHandler) {
+
+        HttpEntity entity = null;
+        try {
+            entity = new StringEntity(JsonHttpResponseHandler.getMapper().writeValueAsString(body));
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        } catch (JsonProcessingException e) {
+            e.printStackTrace();
+        }
+        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);
+        return sendRequest(httpClient, httpContext, request, "application/json", responseHandler, null);
+    }
+
     /**
      * Perform a HTTP POST request with parameters.
      *
diff --git a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
index 0b26fb1b..db7e9b1f 100644
--- a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -19,7 +19,7 @@
 package com.loopj.android.http;
 
 import android.util.Log;
-
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.http.Header;
 import org.apache.http.HttpStatus;
 import org.json.JSONArray;
@@ -38,6 +38,42 @@
 public class JsonHttpResponseHandler extends TextHttpResponseHandler {
     private static final String LOG_TAG = "JsonHttpResponseHandler";
 
+    public static ObjectMapper getMapper() {
+        return mapper;
+    }
+
+    public static Boolean getIsjackson() {
+        return isjackson;
+    }
+
+    private static Boolean isjackson = false;
+    private static Class<?> mType = null;
+    static private ObjectMapper mapper = null;
+
+    public static Class<?> getmType() {
+        return mType;
+    }
+
+    public static void setmType(Class<?> mType) {
+        JsonHttpResponseHandler.mType = mType;
+    }
+
+    private static Boolean init() {
+        try {
+            Class.forName("com.fasterxml.jackson.databind.ObjectMapper");
+            isjackson = true;
+            mapper = new ObjectMapper();
+        } catch (Exception e) {
+            Log.i(LOG_TAG, "this is no jason lib...");
+            isjackson = false;
+        }
+        return false;
+    }
+
+    public void onSuccess(int statusCode, Header[] headers, Object response) {
+
+    }
+
     /**
      * Creates new JsonHttpResponseHandler, with Json String encoding UTF-8
      */
@@ -100,6 +136,10 @@ public void onFailure(int statusCode, Header[] headers, Throwable throwable, JSO
 
     }
 
+    public void onFailure(int statusCode, Header[] headers, Throwable throwable, Object errorResponse) {
+
+    }
+
     @Override
     public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
 
@@ -126,7 +166,8 @@ public void run() {
                                 } else if (jsonResponse instanceof JSONArray) {
                                     onSuccess(statusCode, headers, (JSONArray) jsonResponse);
                                 } else {
-                                    onFailure(statusCode, headers, new JSONException("Unexpected response type " + jsonResponse.getClass().getName()), (JSONObject) null);
+                                    onSuccess(statusCode, headers, responseBytes);
+//                                    onFailure(statusCode, headers, new JSONException("Unexpected response type " + jsonResponse.getClass().getName()), (JSONObject) null);
                                 }
 
                             }
@@ -164,6 +205,7 @@ public void run() {
                                 } else if (jsonResponse instanceof String) {
                                     onFailure(statusCode, headers, (String) jsonResponse, throwable);
                                 } else {
+                                    onFailure(statusCode, headers, throwable, jsonResponse);
                                     onFailure(statusCode, headers, new JSONException("Unexpected response type " + jsonResponse.getClass().getName()), (JSONObject) null);
                                 }
                             }
@@ -201,6 +243,14 @@ protected Object parseResponse(byte[] responseBody) throws JSONException {
         //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If Json is not valid this will return null
         String jsonString = getResponseString(responseBody, getCharset());
         if (jsonString != null) {
+            if (isjackson) {
+                try {
+                    result = mapper.readValue(jsonString, mType);
+                    return result;
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
             jsonString = jsonString.trim();
             if (jsonString.startsWith("{") || jsonString.startsWith("[")) {
                 result = new JSONTokener(jsonString).nextValue();
