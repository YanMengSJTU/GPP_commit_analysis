diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java b/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
index 6ae195e2..8de5028f 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
@@ -27,6 +27,7 @@
 import org.apache.http.protocol.HttpContext;
 
 import java.io.IOException;
+import java.io.InterruptedIOException;
 import java.net.MalformedURLException;
 import java.net.UnknownHostException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -106,7 +107,19 @@ public void run() {
 
         try {
             makeRequestWithRetries();
-        } catch (IOException e) {
+        } 
+        catch (InterruptedIOException e){
+	        	Log.e("AsyncHttpRequest", "InterruptedIOException", e);
+	        	// Cancel if we were intentionally interrupted
+	        	if (e.getClass().isAssignableFrom(InterruptedIOException.class))
+	        		responseHandler.sendCancelMessage();
+	        	else if (!isCancelled()) {
+	                responseHandler.sendFailureMessage(0, null, null, e);
+	            } else {
+	                Log.e("AsyncHttpRequest", "makeRequestWithRetries returned error", e);
+	            }
+	        }
+        catch (IOException e) {
             if (!isCancelled()) {
                 responseHandler.sendFailureMessage(0, null, null, e);
             } else {
@@ -146,7 +159,7 @@ private void makeRequest() throws IOException {
         }
 
         HttpResponse response = client.execute(request, context);
-
+        
         if (isCancelled()) {
             return;
         }
@@ -190,7 +203,27 @@ private void makeRequestWithRetries() throws IOException {
                     // http://code.google.com/p/android/issues/detail?id=5255
                     cause = new IOException("NPE in HttpClient: " + e.getMessage());
                     retry = retryHandler.retryRequest(cause, ++executionCount, context);
-                } catch (IOException e) {
+                }
+                catch (InterruptedIOException e)
+                {
+                	Log.e("AsyncHttpRequest", "InterruptedIOException", e);
+                	// Cancel if we were intentionally interrupted
+                	if (e.getClass().isAssignableFrom(InterruptedIOException.class))
+                	{
+                		cancel(true);
+                		break;
+                	}
+                	else
+                	{
+                		if (isCancelled()) {
+                            // Eating exception, as the request was cancelled
+                            return;
+                        }
+                        cause = e;
+                        retry = retryHandler.retryRequest(cause, ++executionCount, context);
+                	}
+                }
+                catch (IOException e) {
                     if (isCancelled()) {
                         // Eating exception, as the request was cancelled
                         return;
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
index a61d456e..de9903cc 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -30,8 +30,11 @@
 import org.apache.http.client.HttpResponseException;
 import org.apache.http.util.ByteArrayBuffer;
 
+import com.loopj.android.http.AsyncHttpRequest;
+
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InterruptedIOException;
 import java.net.URI;
 
 /**
@@ -448,7 +451,11 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                     sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), responseBody);
                 }
             }
+            else
+            	sendCancelMessage();
         }
+        else
+        	sendCancelMessage();
     }
 
     /**
@@ -477,9 +484,22 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                             count += l;
                             buffer.append(tmp, 0, l);
-                            sendProgressMessage(count, (int) (contentLength <= 0 ? 1 : contentLength));
+                            if (!Thread.currentThread().isInterrupted())
+                            	sendProgressMessage(count, (int) (contentLength <= 0 ? 1 : contentLength));
+                            else
+                            	sendCancelMessage();
                         }
-                    } finally {
+                    }catch (InterruptedIOException e)
+                    {
+                    	Log.e(AsyncHttpRequest.class.getSimpleName(), e.getLocalizedMessage() != null ? e.getLocalizedMessage() : "InterruptedIOException!");
+            			e.printStackTrace();
+            			if (e.getClass().isAssignableFrom(InterruptedException.class))
+            			{
+            				Thread.currentThread().interrupt();
+            				sendCancelMessage();
+            			}
+                    }
+                    finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
                         AsyncHttpClient.endEntityViaReflection(entity);
                     }
diff --git a/library/src/main/project.properties b/library/src/main/project.properties
new file mode 100644
index 00000000..b5ebc372
--- /dev/null
+++ b/library/src/main/project.properties
@@ -0,0 +1,15 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-4
+android.library=true
