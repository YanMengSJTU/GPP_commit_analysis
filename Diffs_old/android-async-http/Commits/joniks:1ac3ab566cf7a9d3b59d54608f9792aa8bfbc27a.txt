diff --git a/.travis.yml b/.travis.yml
index 40336a55..e1bcf184 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -16,7 +16,7 @@ before_install:
   # for gradle output style
   - export TERM=dumb
   # newer version of gradle
-  - wget http://services.gradle.org/distributions/gradle-1.8-bin.zip
+  - wget http://services.gradle.org/distributions/gradle-1.9-bin.zip
   - unzip -qq gradle-1.8-bin.zip
   - export GRADLE_HOME=$PWD/gradle-1.8
   - export PATH=$GRADLE_HOME/bin:$PATH
diff --git a/build.gradle b/build.gradle
index 86808556..5f3653e4 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.6.+'
+        classpath 'com.android.tools.build:gradle:0.7.+'
     }
 }
 
diff --git a/library/build.gradle b/library/build.gradle
index 7cd3e2af..5ac1d7e9 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -3,6 +3,10 @@ apply plugin: 'android-library'
 android {
     compileSdkVersion 19
     buildToolsVersion '19.0.0'
+    
+    lintOptions {
+        abortOnError false
+    }
 }
 
 android.libraryVariants.all { variant ->
diff --git a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
index 69fb4845..dc35b42d 100644
--- a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
@@ -26,7 +26,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.Arrays;
 
 public abstract class DataAsyncHttpResponseHandler extends AsyncHttpResponseHandler {
     private static final String LOG_TAG = "DataAsyncHttpResponseHandler";
@@ -42,8 +41,6 @@ public DataAsyncHttpResponseHandler() {
 
     /**
      * Fired when the request progress, override to handle in your own code
-     *
-     * @param responseBody
      */
     public void onProgressData(byte[] responseBody) {
     }
@@ -64,7 +61,7 @@ protected void handleMessage(Message message) {
                 response = (Object[]) message.obj;
                 if (response != null && response.length >= 1) {
                     try {
-                        onProgressData((byte[])response[0]);
+                        onProgressData((byte[]) response[0]);
                     } catch (Throwable t) {
                         Log.e(LOG_TAG, "custom onProgressData contains an error", t);
                     }
@@ -100,12 +97,11 @@ protected void handleMessage(Message message) {
                     ByteArrayBuffer buffer = new ByteArrayBuffer((int) contentLength);
                     try {
                         byte[] tmp = new byte[BUFFER_SIZE];
-                        int l, count = 0;
+                        int l;
                         // do not send messages if request has been cancelled
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
-                            count += l;
                             buffer.append(tmp, 0, l);
-                            sendProgressDataMessage(Arrays.copyOfRange(tmp, 0, l));
+                            sendProgressDataMessage(copyOfRange(tmp, 0, l));
                         }
                     } finally {
                         instream.close();
@@ -119,5 +115,35 @@ protected void handleMessage(Message message) {
         }
         return responseBody;
     }
+
+    /**
+     * Copies elements from {@code original} into a new array, from indexes start (inclusive) to end
+     * (exclusive). The original order of elements is preserved. If {@code end} is greater than
+     * {@code original.length}, the result is padded with the value {@code (byte) 0}.
+     *
+     * @param original the original array
+     * @param start    the start index, inclusive
+     * @param end      the end index, exclusive
+     * @return the new array
+     * @throws ArrayIndexOutOfBoundsException if {@code start < 0 || start > original.length}
+     * @throws IllegalArgumentException       if {@code start > end}
+     * @throws NullPointerException           if {@code original == null}
+     * @see java.util.Arrays
+     * @since 1.6
+     */
+    public static byte[] copyOfRange(byte[] original, int start, int end) throws ArrayIndexOutOfBoundsException, IllegalArgumentException, NullPointerException {
+        if (start > end) {
+            throw new IllegalArgumentException();
+        }
+        int originalLength = original.length;
+        if (start < 0 || start > originalLength) {
+            throw new ArrayIndexOutOfBoundsException();
+        }
+        int resultLength = end - start;
+        int copyLength = Math.min(resultLength, originalLength - start);
+        byte[] result = new byte[resultLength];
+        System.arraycopy(original, start, result, 0, copyLength);
+        return result;
+    }
 }
 
diff --git a/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java b/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
index 181019e7..49375061 100644
--- a/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
+++ b/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
@@ -29,6 +29,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.zip.GZIPOutputStream;
@@ -297,7 +298,7 @@ public void writeTo(final OutputStream outstream) throws IOException {
                         for (int zero = 0; zero < intLength; zero++) {
                             BUILDER.append('0');
                         }
-                        BUILDER.append(intString.toUpperCase());
+                        BUILDER.append(intString.toUpperCase(Locale.US));
                     } else {
                         BUILDER.append(ch);
                     }
diff --git a/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java b/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
index d7766910..ee87bd23 100644
--- a/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
+++ b/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -201,7 +202,7 @@ protected String byteArrayToHexString(byte[] bytes) {
             }
             sb.append(Integer.toHexString(v));
         }
-        return sb.toString().toUpperCase();
+        return sb.toString().toUpperCase(Locale.US);
     }
 
     /**
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index ded71e33..42ba1706 100644
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -18,6 +18,8 @@
 
 package com.loopj.android.http;
 
+import android.util.Log;
+
 import org.apache.http.HttpEntity;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
 import org.apache.http.client.utils.URLEncodedUtils;
@@ -88,12 +90,27 @@
  */
 public class RequestParams {
 
+    protected final static String LOG_TAG = "RequestParams";
     protected boolean isRepeatable;
     protected boolean useJsonStreamer;
     protected ConcurrentHashMap<String, String> urlParams;
     protected ConcurrentHashMap<String, StreamWrapper> streamParams;
     protected ConcurrentHashMap<String, FileWrapper> fileParams;
     protected ConcurrentHashMap<String, Object> urlParamsWithObjects;
+    protected String contentEncoding = HTTP.UTF_8;
+
+    /**
+     * Sets content encoding for return value of {@link #getParamString()} and {@link
+     * #createFormEntity()} <p>&nbsp;</p> Default encoding is "UTF-8"
+     *
+     * @param encoding String constant from {@link org.apache.http.protocol.HTTP}
+     */
+    public void setContentEncoding(final String encoding) {
+        if (encoding != null)
+            this.contentEncoding = encoding;
+        else
+            Log.d(LOG_TAG, "setContentEncoding called with null attribute");
+    }
 
     /**
      * Constructs a new empty {@code RequestParams} instance.
@@ -378,9 +395,10 @@ private HttpEntity createJsonStreamerEntity() throws IOException {
 
     private HttpEntity createFormEntity() {
         try {
-            return new UrlEncodedFormEntity(getParamsList(), HTTP.UTF_8);
+            return new UrlEncodedFormEntity(getParamsList(), contentEncoding);
         } catch (UnsupportedEncodingException e) {
-            return null; // Actually cannot happen when using utf-8
+            Log.e(LOG_TAG, "createFormEntity failed", e);
+            return null; // Can happen, if the 'contentEncoding' won't be HTTP.UTF_8
         }
     }
 
@@ -472,7 +490,7 @@ private void init() {
     }
 
     protected String getParamString() {
-        return URLEncodedUtils.format(getParamsList(), HTTP.UTF_8);
+        return URLEncodedUtils.format(getParamsList(), contentEncoding);
     }
 
     public static class FileWrapper {
diff --git a/maven_push.gradle b/maven_push.gradle
index 6fc6fb30..7131da65 100644
--- a/maven_push.gradle
+++ b/maven_push.gradle
@@ -15,7 +15,7 @@ if (isReleaseBuild()) {
     println 'DEBUG BUILD'
     sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
 }
-
+if(isReleaseBuild()){
 if (ext.properties.containsKey('signing.keyId') && !ext.properties.containsKey('signing.password')) {
     if (System.console())
         ext.set('signing.password', System.console().readPassword("\n\$ Type in GPG key password: "))
@@ -98,3 +98,4 @@ afterEvaluate { project ->
         archives androidJavadocsJar
     }
 }
+}
diff --git a/sample/build.gradle b/sample/build.gradle
index 0792285e..57c4aada 100644
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -3,7 +3,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.6.+'
+        classpath 'com.android.tools.build:gradle:0.7.+'
     }
 }
 apply plugin: 'android'
@@ -23,6 +23,16 @@ android {
         minSdkVersion 3
         targetSdkVersion 19
     }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    packagingOptions {
+        exclude 'META-INF/DEPENDENCIES'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/NOTICE'
+    }
 }
 
 dependencies {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index eae9011b..2592ee81 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -24,6 +24,7 @@
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 public abstract class SampleParentActivity extends Activity {
 
@@ -109,7 +110,7 @@ protected final void debugHeaders(String TAG, Header[] headers) {
             Log.d(TAG, "Return Headers:");
             StringBuilder builder = new StringBuilder();
             for (Header h : headers) {
-                String _h = String.format("%s : %s", h.getName(), h.getValue());
+                String _h = String.format(Locale.US, "%s : %s", h.getName(), h.getValue());
                 Log.d(TAG, _h);
                 builder.append(_h);
                 builder.append("\n");
@@ -143,7 +144,7 @@ protected final void debugResponse(String TAG, String response) {
     }
 
     protected final void debugStatusCode(String TAG, int statusCode) {
-        String msg = String.format("Return Status Code: %d", statusCode);
+        String msg = String.format(Locale.US, "Return Status Code: %d", statusCode);
         Log.d(TAG, msg);
         addView(getColoredView(LIGHTBLUE, msg));
     }
