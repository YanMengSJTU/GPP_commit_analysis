diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index fbeab8b4..1c7577f7 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,11 +1,26 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.loopj.android.http"
-    android:versionName="1.4.1"
-    android:versionCode="1">
-    <application
-        android:name="android_async_http">
+    package="com.allthelucky"
+    android:versionCode="1"
+    android:versionName="1.4.1" >
+
+    <application  android:label="http">
+        <activity
+            android:name="com.allthelucky.sample.TestActivity"
+            android:configChanges="orientation|keyboardHidden"
+            android:label="http"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="stateHidden" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
     </application>
+
     <uses-sdk android:minSdkVersion="3" />
+
     <uses-permission android:name="android.permission.INTERNET" />
-</manifest> 
+
+</manifest>
\ No newline at end of file
diff --git a/src/com/allthelucky/net/RequestListener.java b/src/com/allthelucky/net/RequestListener.java
new file mode 100644
index 00000000..7a28bd3f
--- /dev/null
+++ b/src/com/allthelucky/net/RequestListener.java
@@ -0,0 +1,10 @@
+package com.allthelucky.net;
+
+public interface RequestListener {
+    public final static int OK = 0;
+    public final static int ERR = 0;
+
+    void onStart();
+
+    void onCompleted(byte[] data, int statusCode, int actionId);
+}
diff --git a/src/com/allthelucky/net/RequestManager.java b/src/com/allthelucky/net/RequestManager.java
new file mode 100644
index 00000000..6a46a5b0
--- /dev/null
+++ b/src/com/allthelucky/net/RequestManager.java
@@ -0,0 +1,167 @@
+package com.allthelucky.net;
+
+import java.io.UnsupportedEncodingException;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.message.BasicHeader;
+import org.apache.http.protocol.HTTP;
+import org.json.JSONObject;
+
+import android.content.Context;
+import android.text.TextUtils;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.BinaryHttpResponseHandler;
+import com.loopj.android.http.RequestParams;
+
+public class RequestManager {
+    private final AsyncHttpClient asyncHttpClient;
+    private static RequestManager INSTANCE = null;
+
+    protected RequestManager() {
+        this.asyncHttpClient = new AsyncHttpClient();
+    }
+
+    public static RequestManager getInstance() {
+        if (INSTANCE == null) {
+            INSTANCE = new RequestManager();
+        }
+        return INSTANCE;
+    }
+
+    public void cancel(Context context) {
+        asyncHttpClient.cancelRequests(context, true);
+    }
+
+    /**
+     * 参数列表请求
+     * 
+     * @param context
+     * @param url
+     * @param params
+     * @param requestListener
+     * @param actionId
+     */
+    public void post(Context context, String url, RequestParams params, RequestListener requestListener, int actionId) {
+        asyncHttpClient.post(context, url, params, new RequestBinaryHttpResponseHandler(requestListener, actionId));
+    }
+
+    /**
+     * JSON　参数请求
+     * 
+     * @param context
+     * @param url
+     * @param params
+     * @param requestListener
+     * @param actionId
+     */
+    public void post(Context context, String url, JSONObject params, RequestListener requestListener, int actionId) {
+        asyncHttpClient.post(context, url, rpcToEntity(params.toString(), "application/json"), "application/json",
+                new RequestBinaryHttpResponseHandler(requestListener, actionId));
+    }
+
+    /**
+     * JSON　参数请求
+     * 
+     * @param context
+     * @param url
+     * @param headers
+     * @param params
+     * @param requestListener
+     * @param actionId
+     */
+    public void post(Context context, String url, Header[] headers, JSONObject params, RequestListener requestListener,
+            int actionId) {
+        asyncHttpClient.post(context, url, headers, rpcToEntity(params.toString(), "application/json"),
+                "application/json", new RequestBinaryHttpResponseHandler(requestListener, actionId));
+    }
+
+    /**
+     * XML　参数请求
+     * 
+     * @param context
+     * @param url
+     * @param params
+     * @param requestListener
+     * @param actionId
+     */
+    public void post(Context context, String url, String params, RequestListener requestListener, int actionId) {
+        asyncHttpClient.post(context, url, rpcToEntity(params, "application/xml"), "application/xml",
+                new RequestBinaryHttpResponseHandler(requestListener, actionId));
+    }
+
+    /**
+     * XML　参数请求
+     * 
+     * @param context
+     * @param url
+     * @param headers
+     * @param params
+     * @param requestListener
+     * @param actionId
+     */
+    public void post(Context context, String url, Header[] headers, String params, RequestListener requestListener,
+            int actionId) {
+        asyncHttpClient.post(context, url, headers, rpcToEntity(params, "application/xml"), "application/xml",
+                new RequestBinaryHttpResponseHandler(requestListener, actionId));
+    }
+
+    public void get(Context context, String url, RequestListener requestListener, int actionId) {
+        asyncHttpClient.get(context, url, new RequestBinaryHttpResponseHandler(requestListener, actionId));
+    }
+
+    /**
+     * 将JSON/XML字符串转为HttpEntity(StringEntity)
+     * 
+     * @param params
+     * @param contentType
+     * @return
+     */
+    public static HttpEntity rpcToEntity(String params, String contentType) {
+        StringEntity entity = null;
+        if (!TextUtils.isEmpty(params)) {
+            try {
+                entity = new StringEntity(params);
+                entity.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, contentType));
+            } catch (UnsupportedEncodingException e) {
+                e.printStackTrace();
+            }
+        }
+        return entity;
+    }
+
+    final class RequestBinaryHttpResponseHandler extends BinaryHttpResponseHandler {
+        private RequestListener requestListener;
+        private int actionId;
+
+        public RequestBinaryHttpResponseHandler(RequestListener requestListener, int actionId) {
+            this.requestListener = requestListener;
+            this.actionId = actionId;
+        }
+
+        @Override
+        public void onStart() {
+            super.onStart();
+            requestListener.onStart();
+        }
+        
+        @Override
+        public void onFinish() {
+            super.onFinish();
+        }
+
+        @Override
+        public void onSuccess(int statusCode, byte[] binaryData) {
+            super.onSuccess(statusCode, binaryData);
+            requestListener.onCompleted(binaryData, RequestListener.OK, actionId);
+        }
+
+        @Override
+        public void onFailure(Throwable error, String content) {
+            super.onFailure(error, content);
+            requestListener.onCompleted(null, RequestListener.ERR, actionId);
+        }
+    }
+}
diff --git a/src/com/allthelucky/sample/TestActivity.java b/src/com/allthelucky/sample/TestActivity.java
new file mode 100644
index 00000000..fc87e963
--- /dev/null
+++ b/src/com/allthelucky/sample/TestActivity.java
@@ -0,0 +1,62 @@
+package com.allthelucky.sample;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import com.allthelucky.net.RequestListener;
+import com.allthelucky.net.RequestManager;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class TestActivity  extends Activity{
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        RequestListener requestListener=new RequestListener() {
+            @Override
+            public void onStart() {
+                
+            }
+            
+            @Override
+            public void onCompleted(byte[] data, int statusCode, int actionId) {
+                System.out.println("=====================");
+                if(RequestListener.ERR!=statusCode) {
+                    String result = new String(data);
+                    System.out.println(result);
+                }
+            }
+        };
+        final String url = "http://h.qdone.net.cn/console/mainPage!loadPage.action";
+        JSONObject root = new JSONObject();
+        try {
+            root.put("ACTION_INVOKER", getInvoker());
+            JSONObject params = new JSONObject();
+            params.put("userLatitude", "");
+            params.put("userLongitude", "");
+            params.put("cityId", "2001");
+            params.put("cityName", "武汉市");
+            params.put("type", 0);
+            params.put("start", 1);
+            params.put("pageSize", 10);
+            root.put("ACTION_INFO", params);
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+            
+        RequestManager.getInstance().get(TestActivity.this, url, requestListener, 0);
+    }
+    
+    private static JSONObject getInvoker() throws JSONException {
+        JSONObject invoker = new JSONObject();
+        invoker.put("CSN", "2931F2761086E59E0100");
+        invoker.put("PHONE", "");
+        invoker.put("OSNAME", "Android");
+        invoker.put("OSVER", "2.2.1");
+        invoker.put("OSDESCRIPT", "w480h800");
+        return invoker;
+    }
+    
+    
+}
