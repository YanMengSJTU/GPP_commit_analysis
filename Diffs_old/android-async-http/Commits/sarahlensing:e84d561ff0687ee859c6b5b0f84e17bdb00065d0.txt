diff --git a/examples/ExampleUsage.java b/examples/ExampleUsage.java
index 2b7a4fa0..b35af93d 100644
--- a/examples/ExampleUsage.java
+++ b/examples/ExampleUsage.java
@@ -1,4 +1,5 @@
 import com.loopj.android.http.*;
+import org.apache.http.Header;
 
 public class ExampleUsage {
     public static void makeRequest() {
@@ -6,7 +7,7 @@ public static void makeRequest() {
 
         client.get("http://www.google.com", new AsyncHttpResponseHandler() {
             @Override
-            public void onSuccess(String response) {
+            public void onSuccess(String response, Header[] headers) {
                 System.out.println(response);
             }
         });
diff --git a/examples/TwitterRestClientUsage.java b/examples/TwitterRestClientUsage.java
index a4c89c8c..1191bb0a 100644
--- a/examples/TwitterRestClientUsage.java
+++ b/examples/TwitterRestClientUsage.java
@@ -1,3 +1,4 @@
+import org.apache.http.Header;
 import org.json.*;
 import com.loopj.android.http.*;
 
@@ -5,7 +6,7 @@
     public void getPublicTimeline() {
         TwitterRestClient.get("statuses/public_timeline.json", null, new JsonHttpResponseHandler() {
             @Override
-            public void onSuccess(JSONArray timeline) {
+            public void onSuccess(JSONArray timeline, Header[]headers) {
                 try {
                     JSONObject firstEvent = (JSONObject)timeline.get(0);
                     String tweetText = firstEvent.getString("text");
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index fdf5aa94..e61b6118 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,6 +21,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -52,7 +53,7 @@
  *     public void onSuccess(String response) {
  *         // Successfully got a response
  *     }
- * 
+ *
  *     &#064;Override
  *     public void onFailure(Throwable e, String response) {
  *         // Response failed :(
@@ -106,15 +107,15 @@ public void onFinish() {}
      * Fired when a request returns successfully, override to handle in your own code
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(String content) {}
+    public void onSuccess(String content, Header[] headers) {}
 
     /**
      * Fired when a request returns successfully, override to handle in your own code
      * @param statusCode the status code of the response
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(Header[] headers, int statusCode, String content) {
-        onSuccess(content);
+    public void onSuccess(int statusCode, String content, Header[] headers) {
+        onSuccess(content, headers);
     }
 
     /**
@@ -139,14 +140,14 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(Header[] headers, int statusCode, String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, headers, new Object[]{new Integer(statusCode), responseBody}));
+    protected void sendSuccessMessage(int statusCode, String responseBody, Header[]headers) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody, headers}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
         sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
     }
-    
+
     protected void sendFailureMessage(Throwable e, byte[] responseBody) {
         sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
     }
@@ -164,8 +165,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(Header[] headers, int statusCode, String responseBody) {
-        onSuccess(headers, statusCode, responseBody);
+    protected void handleSuccessMessage(int statusCode, String responseBody, Header[] headers) {
+        onSuccess(statusCode, responseBody, headers);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -181,7 +182,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[])msg.obj;
-                handleSuccessMessage(Header[] response[0], ((Integer) response[0]).intValue(), (String) response[1]);
+                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1], (Header[])response[2]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
@@ -234,7 +235,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(response.getAllHeaders(), status.getStatusCode(), responseBody);
+            sendSuccessMessage(status.getStatusCode(), responseBody, response.getAllHeaders());
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index e5783e3d..28875034 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http;
 
+import org.apache.http.Header;
 import org.apache.http.HttpStatus;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -51,7 +52,7 @@
      * own code.
      * @param response the parsed json object found in the server response (if any)
      */
-    public void onSuccess(JSONObject response) {}
+    public void onSuccess(JSONObject response, Header[] headers) {}
 
 
     /**
@@ -60,7 +61,7 @@ public void onSuccess(JSONObject response) {}
      * own code.
      * @param response the parsed json array found in the server response (if any)
      */
-    public void onSuccess(JSONArray response) {}
+    public void onSuccess(JSONArray response, Header[] headers) {}
 
     /**
      * Fired when a request returns successfully and contains a json object
@@ -69,8 +70,8 @@ public void onSuccess(JSONArray response) {}
      * @param statusCode the status code of the response
      * @param response the parsed json object found in the server response (if any)
      */
-    public void onSuccess(Header[] headers, int statusCode, JSONObject response) {
-        onSuccess(response);
+    public void onSuccess(int statusCode, JSONObject response, Header[] headers) {
+        onSuccess(response, headers);
     }
 
 
@@ -81,8 +82,8 @@ public void onSuccess(Header[] headers, int statusCode, JSONObject response) {
      * @param statusCode the status code of the response
      * @param response the parsed json array found in the server response (if any)
      */
-    public void onSuccess(Header[] headers, int statusCode, JSONArray response) {
-        onSuccess(response);
+    public void onSuccess(int statusCode, JSONArray response, Header[] headers) {
+        onSuccess(response, headers);
     }
 
     public void onFailure(Throwable e, JSONObject errorResponse) {}
@@ -94,17 +95,17 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
     //
 
     @Override
-    protected void sendSuccessMessage(Header[] headers, int statusCode, String responseBody) {
-    	if (statusCode != HttpStatus.SC_NO_CONTENT){
-	        try {
-	            Object jsonResponse = parseResponse(responseBody);
-	            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{headers, statusCode, jsonResponse}));
-	        } catch(JSONException e) {
-	            sendFailureMessage(e, responseBody);
-	        }
-    	}else{
-    		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{headers, statusCode, new JSONObject()}));
-    	}
+    protected void sendSuccessMessage(int statusCode, String responseBody, Header[] headers) {
+        if (statusCode != HttpStatus.SC_NO_CONTENT){
+            try {
+                Object jsonResponse = parseResponse(responseBody);
+                sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse, headers}));
+            } catch(JSONException e) {
+                sendFailureMessage(e, responseBody);
+            }
+        }else{
+            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject(), headers}));
+        }
     }
 
 
@@ -117,18 +118,18 @@ protected void handleMessage(Message msg) {
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
                 Object[] response = (Object[]) msg.obj;
-                handleSuccessJsonMessage((Headers[])response[0], ((Integer) response[1]).intValue(), response[2]);
+                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1], (Header[]) response[2]);
                 break;
             default:
                 super.handleMessage(msg);
         }
     }
 
-    protected void handleSuccessJsonMessage(Headers[] headers, int statusCode, Object jsonResponse) {
+    protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse, Header[] headers) {
         if(jsonResponse instanceof JSONObject) {
-            onSuccess(headers, statusCode, (JSONObject)jsonResponse);
+            onSuccess(statusCode, (JSONObject)jsonResponse, headers);
         } else if(jsonResponse instanceof JSONArray) {
-            onSuccess(headers, statusCode, (JSONArray)jsonResponse);
+            onSuccess(statusCode, (JSONArray)jsonResponse, headers);
         } else {
             onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
@@ -137,14 +138,14 @@ protected void handleSuccessJsonMessage(Headers[] headers, int statusCode, Objec
     protected Object parseResponse(String responseBody) throws JSONException {
         Object result = null;
         //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If Json is not valid this will return null
-		responseBody = responseBody.trim();
-		if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
-			result = new JSONTokener(responseBody).nextValue();
-		}
-		if (result == null) {
-			result = responseBody;
-		}
-		return result;
+        responseBody = responseBody.trim();
+        if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
+            result = new JSONTokener(responseBody).nextValue();
+        }
+        if (result == null) {
+            result = responseBody;
+        }
+        return result;
     }
 
     @Override
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 8f55991e..d8b50b8b 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -1,5 +1,6 @@
 package com.loopj.android.http;
 
+import org.apache.http.Header;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.protocol.HttpContext;
@@ -8,114 +9,114 @@
 import android.os.Message;
 
 public abstract class SyncHttpClient extends AsyncHttpClient {
-	private int responseCode;
-	/*
-	 * as this is a synchronous request this is just a helping mechanism to pass
-	 * the result back to this method. Therefore the result object has to be a
-	 * field to be accessible
-	 */
-	private String result;
-	AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
-
-		void sendResponseMessage(org.apache.http.HttpResponse response) {
-			responseCode = response.getStatusLine().getStatusCode();
-			super.sendResponseMessage(response);
-		};
-
-		@Override
-		protected void sendMessage(Message msg) {
+    private int responseCode;
+    /*
+     * as this is a synchronous request this is just a helping mechanism to pass
+     * the result back to this method. Therefore the result object has to be a
+     * field to be accessible
+     */
+    private String result;
+    AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
+
+        void sendResponseMessage(org.apache.http.HttpResponse response) {
+            responseCode = response.getStatusLine().getStatusCode();
+            super.sendResponseMessage(response);
+        };
+
+        @Override
+        protected void sendMessage(Message msg) {
 			/*
 			 * Dont use the handler and send it directly to the analysis
 			 * (because its all the same thread)
 			 */
-			handleMessage(msg);
-		}
-
-		@Override
-		public void onSuccess(String content) {
-			result = content;
-		}
-
-		@Override
-		public void onFailure(Throwable error, String content) {
-			result = onRequestFailed(error, content);
-		}
-	};
-
-	/**
-	 * @return the response code for the last request, might be usefull
-	 *         sometimes
-	 */
-	public int getResponseCode() {
-		return responseCode;
-	}
-
-	// Private stuff
-	protected void sendRequest(DefaultHttpClient client,
-			HttpContext httpContext, HttpUriRequest uriRequest,
-			String contentType, AsyncHttpResponseHandler responseHandler,
-			Context context) {
-		if (contentType != null) {
-			uriRequest.addHeader("Content-Type", contentType);
-		}
+            handleMessage(msg);
+        }
+
+        @Override
+        public void onSuccess(String content, Header[] headers) {
+            result = content;
+        }
+
+        @Override
+        public void onFailure(Throwable error, String content) {
+            result = onRequestFailed(error, content);
+        }
+    };
+
+    /**
+     * @return the response code for the last request, might be usefull
+     *         sometimes
+     */
+    public int getResponseCode() {
+        return responseCode;
+    }
+
+    // Private stuff
+    protected void sendRequest(DefaultHttpClient client,
+                               HttpContext httpContext, HttpUriRequest uriRequest,
+                               String contentType, AsyncHttpResponseHandler responseHandler,
+                               Context context) {
+        if (contentType != null) {
+            uriRequest.addHeader("Content-Type", contentType);
+        }
 
 		/*
 		 * will execute the request directly
 		 */
-		new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)
-				.run();
-	}
+        new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)
+                .run();
+    }
 
-	public abstract String onRequestFailed(Throwable error, String content);
+    public abstract String onRequestFailed(Throwable error, String content);
 
-	public void delete(String url, RequestParams queryParams,
-			AsyncHttpResponseHandler responseHandler) {
-		// TODO what about query params??
-		delete(url, responseHandler);
-	}
+    public void delete(String url, RequestParams queryParams,
+                       AsyncHttpResponseHandler responseHandler) {
+        // TODO what about query params??
+        delete(url, responseHandler);
+    }
 
-	public String get(String url, RequestParams params) {
-		this.get(url, params, responseHandler);
+    public String get(String url, RequestParams params) {
+        this.get(url, params, responseHandler);
 		/*
 		 * the response handler will have set the result when this line is
 		 * reached
 		 */
-		return result;
-	}
-
-	public String get(String url) {
-		this.get(url, null, responseHandler);
-		return result;
-	}
-
-	public String put(String url, RequestParams params) {
-		this.put(url, params, responseHandler);
-		return result;
-	}
-
-	public String put(String url) {
-		this.put(url, null, responseHandler);
-		return result;
-	}
-
-	public String post(String url, RequestParams params) {
-		this.post(url, params, responseHandler);
-		return result;
-	}
-
-	public String post(String url) {
-		this.post(url, null, responseHandler);
-		return result;
-	}
-
-	public String delete(String url, RequestParams params) {
-		this.delete(url, params, responseHandler);
-		return result;
-	}
-
-	public String delete(String url) {
-		this.delete(url, null, responseHandler);
-		return result;
-	}
+        return result;
+    }
+
+    public String get(String url) {
+        this.get(url, null, responseHandler);
+        return result;
+    }
+
+    public String put(String url, RequestParams params) {
+        this.put(url, params, responseHandler);
+        return result;
+    }
+
+    public String put(String url) {
+        this.put(url, null, responseHandler);
+        return result;
+    }
+
+    public String post(String url, RequestParams params) {
+        this.post(url, params, responseHandler);
+        return result;
+    }
+
+    public String post(String url) {
+        this.post(url, null, responseHandler);
+        return result;
+    }
+
+    public String delete(String url, RequestParams params) {
+        this.delete(url, params, responseHandler);
+        return result;
+    }
+
+    public String delete(String url) {
+        this.delete(url, null, responseHandler);
+        return result;
+    }
 
 }
