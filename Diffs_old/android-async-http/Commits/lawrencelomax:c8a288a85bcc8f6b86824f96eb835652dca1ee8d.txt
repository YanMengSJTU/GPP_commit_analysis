diff --git a/.classpath b/.classpath
index 428b5e2b..14fcf527 100644
--- a/.classpath
+++ b/.classpath
@@ -4,6 +4,5 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="src" path="examples"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 092ce43a..9837f77a 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
 	package="com.loopj.android.http"
-	android:versionName="1.3.1"
+	android:versionName="1.3.2"
 	android:versionCode="1">
 	<application
 		android:name="android_async_http">
diff --git a/build.xml b/build.xml
index 1ce103a5..68e867a1 100644
--- a/build.xml
+++ b/build.xml
@@ -1,15 +1,31 @@
 <project default="package">
     <property file="local.properties"/>
-    <property file="default.properties"/>
-	<property file="project.properties"/>
+    <property file="project.properties"/>
 
     <!-- Package properties -->
     <property name="package.name" value="android-async-http" />
-    <property name="package.version" value="1.3.1" />
     <property name="package.packagename" value="com.loopj.android.http" />
+    
+    <!-- Get git commit -->
+    <available file=".git" type="dir" property="git.present"/>
+
+    <target name="git-details">
+        <exec executable="git" outputproperty="git.status">
+            <arg value="status" />
+        </exec>
+        <echo message="${git.status}"/>
+        
+        <exec executable="git" outputproperty="package.versionname">
+          <arg value="describe"/>
+          <arg value='--match=${package.name}-*'/>
+          <arg value="--tags"/>
+          <arg value="--dirty"/>
+          <arg value="--always"/>
+        </exec>
+        <echo message="${package.versionname}" />
+    </target>
 
     <!-- Standard jar stuff -->
-    <property name="jarfile" value="${package.name}-${package.version}.jar" />
     <property name="lib.dir" value="${sdk.dir}/platforms/${target}" />
     <property name="build.dir" value="./build"/>
     <property name="classes.dir"  value="${build.dir}/classes"/>
@@ -27,7 +43,7 @@
             sourcepath="gen:src"
             destdir="doc"
             packagenames="${package.packagename}"
-            linkoffline="http://d.android.com/reference ${sdk.dir}docs/reference" 
+            linkoffline="http://d.android.com/reference ${sdk.dir}/docs/reference" 
             additionalparam="-author  -version"
             />
     </target>
@@ -38,6 +54,7 @@
         <mkdir dir="${classes.dir}" />
 
         <javac
+            includeantruntime="false"
             srcdir="."
             destdir="${classes.dir}"
             classpathref="classpath"
@@ -46,15 +63,15 @@
     </target>
 
     <!-- Package a jar from compiled class files -->
-    <target name="jar" depends="compile">
+    <target name="jar" depends="git-details,compile">
         <delete dir="." includes="**/*.jar" />
         <delete file="MANIFEST.MF" />
         <manifest file="MANIFEST.MF">
             <attribute name="Built-By" value="${user.name}" />
-            <attribute name="Implementation-Version" value="${version.num}-b${build.number}"/> 
+            <attribute name="Implementation-Version" value="${package.versionname}"/> 
         </manifest>
 
-        <jar destfile="${jarfile}" basedir="build/classes" includes="com/loopj/android/http/**/*.class" manifest="MANIFEST.MF" />
+        <jar destfile="${package.versionname}.jar" basedir="build/classes" includes="com/loopj/android/http/**/*.class" manifest="MANIFEST.MF" />
     </target>
 
     <!-- Clean out the build files -->
@@ -69,4 +86,4 @@
 
     <!-- Compile and package a jar -->
     <target name="package" depends="compile,jar" />
-</project>
\ No newline at end of file
+</project>
diff --git a/project.properties b/project.properties
index e13a2876..1880987e 100644
--- a/project.properties
+++ b/project.properties
@@ -8,6 +8,5 @@
 # project structure.
 
 android.library=true
-target=android-3
-sdk.dir=/android
 # Project target.
+target=android-3
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 9221fd31..1cbd6007 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -58,6 +58,7 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.BasicHttpParams;
+import org.apache.http.params.HttpParams;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpProtocolParams;
 import org.apache.http.protocol.BasicHttpContext;
@@ -87,7 +88,7 @@
  * </pre>
  */
 public class AsyncHttpClient {
-    private static final String VERSION = "1.3.1";
+    private static final String VERSION = "1.3.2";
 
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
     private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
@@ -117,6 +118,7 @@ public AsyncHttpClient() {
         ConnManagerParams.setMaxTotalConnections(httpParams, DEFAULT_MAX_CONNECTIONS);
 
         HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
+        HttpConnectionParams.setConnectionTimeout(httpParams, socketTimeout);
         HttpConnectionParams.setTcpNoDelay(httpParams, true);
         HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
@@ -199,6 +201,17 @@ public void setUserAgent(String userAgent) {
         HttpProtocolParams.setUserAgent(this.httpClient.getParams(), userAgent);
     }
 
+    /**
+     * Sets the connection time oout. By default, 10 seconds
+     * @param timeout the connect/socket timeout in milliseconds
+     */
+    public void setTimeout(int timeout){
+        final HttpParams httpParams = this.httpClient.getParams();
+        ConnManagerParams.setTimeout(httpParams, timeout);
+        HttpConnectionParams.setSoTimeout(httpParams, timeout);
+        HttpConnectionParams.setConnectionTimeout(httpParams, timeout);
+    }
+
     /**
      * Sets the SSLSocketFactory to user when making requests. By default,
      * a new, default SSLSocketFactory is used.
@@ -286,6 +299,23 @@ public void get(Context context, String url, AsyncHttpResponseHandler responseHa
     public void get(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
         sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context);
     }
+    
+    /**
+     * Perform a HTTP GET request and track the Android Context which initiated
+     * the request with customized headers
+     * 
+     * @param url the URL to send the request to.
+     * @param headers set headers only for this request
+     * @param params additional GET parameters to send with the request.
+     * @param responseHandler the response handler instance that should handle
+     *        the response.
+     */
+    public void get(Context context, String url, Header[] headers, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+        HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, null, responseHandler,
+                context);
+    }
 
 
     //
@@ -334,6 +364,29 @@ public void post(Context context, String url, HttpEntity entity, String contentT
         sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context);
     }
 
+    /**
+     * Perform a HTTP POST request and track the Android Context which initiated
+     * the request. Set headers only for this request
+     * 
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param headers set headers only for this request
+     * @param entity a raw {@link HttpEntity} to send with the request, for
+     *        example, use this to send string/json/xml payloads to a server by
+     *        passing a {@link org.apache.http.entity.StringEntity}.
+     * @param contentType the content type of the payload you are sending, for
+     *        example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle
+     *        the response.
+     */
+    public void post(Context context, String url, Header[] headers, RequestParams params, String contentType,
+            AsyncHttpResponseHandler responseHandler) {
+        HttpEntityEnclosingRequestBase request = new HttpPost(url);
+        if(params != null) request.setEntity(paramsToEntity(params));
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, contentType,
+                responseHandler, context);
+    }
 
     //
     // HTTP PUT Requests
@@ -371,6 +424,7 @@ public void put(Context context, String url, RequestParams params, AsyncHttpResp
 
     /**
      * Perform a HTTP PUT request and track the Android Context which initiated the request.
+     * And set one-time headers for the request
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
      * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
@@ -380,7 +434,22 @@ public void put(Context context, String url, RequestParams params, AsyncHttpResp
     public void put(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
         sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
     }
-
+    
+    /**
+     * Perform a HTTP PUT request and track the Android Context which initiated the request.
+     * And set one-time headers for the request
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param headers set one-time headers for this request
+     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle the response.
+     */
+    public void put(Context context, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+    }
 
     //
     // HTTP DELETE Requests
@@ -405,7 +474,19 @@ public void delete(Context context, String url, AsyncHttpResponseHandler respons
         final HttpDelete delete = new HttpDelete(url);
         sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
     }
-
+    
+    /**
+     * Perform a HTTP DELETE request.
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param headers set one-time headers for this request
+     * @param responseHandler the response handler instance that should handle the response.
+     */
+    public void delete(Context context, String url, Header[] headers, AsyncHttpResponseHandler responseHandler) {
+        final HttpDelete delete = new HttpDelete(url);
+        if(headers != null) delete.setHeaders(headers);
+        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+    }
 
 
     // Private stuff
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index f1ee8ac6..8054141a 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -59,12 +59,18 @@ public void run() {
             }
         }
     }
-
+    
     private void makeRequest() throws IOException {
-        HttpResponse response = client.execute(request, context);
-        if(responseHandler != null) {
-            responseHandler.sendResponseMessage(response);
-        }
+    	if(!Thread.currentThread().isInterrupted()) {
+    		HttpResponse response = client.execute(request, context);
+    		if(!Thread.currentThread().isInterrupted()) {
+    			if(responseHandler != null) {
+    				responseHandler.sendResponseMessage(response);
+    			}
+    		} else{
+    			//TODO: should raise InterruptedException? this block is reached whenever the request is cancelled before its response is received
+    		}
+    	}
     }
 
     private void makeRequestWithRetries() throws ConnectException {
@@ -86,7 +92,7 @@ private void makeRequestWithRetries() throws ConnectException {
                 // http://code.google.com/p/android/issues/detail?id=5255
                 cause = new IOException("NPE in HttpClient" + e.getMessage());
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
-            }
+            } 
         }
 
         // no retries left, crap out with exception
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 59afc1bc..355a6a17 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -69,6 +69,8 @@ protected void handleSuccessMessage(String responseBody) {
                 onSuccess((JSONObject)jsonResponse);
             } else if(jsonResponse instanceof JSONArray) {
                 onSuccess((JSONArray)jsonResponse);
+            } else {
+                throw new JSONException("Unexpected type " + jsonResponse.getClass().getName());
             }
         } catch(JSONException e) {
             onFailure(e, responseBody);
@@ -78,4 +80,29 @@ protected void handleSuccessMessage(String responseBody) {
     protected Object parseResponse(String responseBody) throws JSONException {
         return new JSONTokener(responseBody).nextValue();
     }
+
+    /**
+     * Handle cases where a failure is returned as JSON
+     */
+    public void onFailure(Throwable e, JSONObject errorResponse) {}
+    public void onFailure(Throwable e, JSONArray errorResponse) {}
+    
+    @Override 
+    protected void handleFailureMessage(Throwable e, String responseBody) {
+        super.handleFailureMessage(e, responseBody);
+        if (responseBody != null) try {
+            Object jsonResponse = parseResponse(responseBody);
+            if(jsonResponse instanceof JSONObject) {
+                onFailure(e, (JSONObject)jsonResponse);
+            } else if(jsonResponse instanceof JSONArray) {
+                onFailure(e, (JSONArray)jsonResponse);
+            }
+        } 
+        catch(JSONException ex) {
+            onFailure(e, responseBody);
+        }
+        else {
+        	onFailure(e, "");
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 1eb56f62..e976a16f 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -174,8 +174,11 @@ public String toString() {
 
         return result.toString();
     }
-
-    HttpEntity getEntity() {
+ 
+   /**
+     * Returns an HttpEntity containing all request parameters
+     */
+    public HttpEntity getEntity() {
         HttpEntity entity = null;
 
         if(!fileParams.isEmpty()) {
