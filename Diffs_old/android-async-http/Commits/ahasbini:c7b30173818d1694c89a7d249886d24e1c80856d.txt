diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 6639a988..4904c4c6 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -482,9 +482,11 @@ public boolean isLoggingEnabled() {
      * Default setting is logging enabled.
      *
      * @param loggingEnabled whether the logging should be enabled or not
+     * @return AsyncHttpClient
      */
-    public void setLoggingEnabled(boolean loggingEnabled) {
+    public AsyncHttpClient setLoggingEnabled(boolean loggingEnabled) {
         log.setLoggingEnabled(loggingEnabled);
+        return this;
     }
 
     /**
@@ -1246,7 +1248,7 @@ public RequestHandle put(String url, RequestParams params, ResponseHandlerInterf
      * @return RequestHandle of future request process
      */
     public RequestHandle put(Context context, String url, RequestParams params, ResponseHandlerInterface responseHandler) {
-        return put(context, url, paramsToEntity(params, responseHandler), null, responseHandler);
+        return put(context, url, null, params, null, responseHandler);
     }
 
     /**
@@ -1288,6 +1290,25 @@ public RequestHandle put(Context context, String url, Header[] headers, HttpEnti
         return sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
     }
 
+    /**
+     * Perform a HTTP PUT request and track the Android Context which initiated the request. And set
+     * one-time headers for the request
+     *
+     * @param context         the Android Context which initiated the request.
+     * @param url             the URL to send the request to.
+     * @param headers         set one-time headers for this request
+     * @param params          additional PUT parameters or files to send with the request.
+     * @param contentType     the content type of the payload you are sending, for example
+     *                        application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle the response.
+     * @return RequestHandle of future request process
+     */
+    public RequestHandle put(Context context, String url, Header[] headers, RequestParams params, String contentType, ResponseHandlerInterface responseHandler) {
+        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(getURI(url)), paramsToEntity(params, responseHandler));
+        if (headers != null) request.setHeaders(headers);
+        return sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+    }
+
     // [-] HTTP PUT
     // [+] HTTP DELETE
 
