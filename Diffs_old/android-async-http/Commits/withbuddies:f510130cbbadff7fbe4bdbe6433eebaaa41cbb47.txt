diff --git a/examples/ExampleUsage.java b/examples/ExampleUsage.java
index 2b7a4fa0..cad95e1a 100644
--- a/examples/ExampleUsage.java
+++ b/examples/ExampleUsage.java
@@ -1,4 +1,6 @@
-import com.loopj.android.http.*;
+import com.loopj.http.AsyncHttpClient;
+import com.loopj.http.AsyncHttpResponseHandler;
+import com.loopj.http.android.*;
 
 public class ExampleUsage {
     public static void makeRequest() {
diff --git a/examples/TwitterRestClient.java b/examples/TwitterRestClient.java
index f55708cf..ea15432e 100644
--- a/examples/TwitterRestClient.java
+++ b/examples/TwitterRestClient.java
@@ -1,6 +1,9 @@
 // Static wrapper library around AsyncHttpClient
 
-import com.loopj.android.http.*;
+import com.loopj.http.AsyncHttpClient;
+import com.loopj.http.AsyncHttpResponseHandler;
+import com.loopj.http.RequestParams;
+import com.loopj.http.android.*;
 
 public class TwitterRestClient {
     private static final String BASE_URL = "http://api.twitter.com/1/";
diff --git a/examples/TwitterRestClientUsage.java b/examples/TwitterRestClientUsage.java
index a4c89c8c..5271fa8f 100644
--- a/examples/TwitterRestClientUsage.java
+++ b/examples/TwitterRestClientUsage.java
@@ -1,5 +1,6 @@
 import org.json.*;
-import com.loopj.android.http.*;
+import com.loopj.http.JsonHttpResponseHandler;
+import com.loopj.http.android.*;
 
 class TwitterRestClientUsage {
     public void getPublicTimeline() {
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/http/AsyncHttpClient.java
similarity index 99%
rename from src/com/loopj/android/http/AsyncHttpClient.java
rename to src/com/loopj/http/AsyncHttpClient.java
index 2921e682..fdeef5dc 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/http/AsyncHttpClient.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -68,6 +68,7 @@
 import org.apache.http.protocol.SyncBasicHttpContext;
 
 
+
 /**
  * The AsyncHttpClient can be used to make asynchronous GET, POST, PUT and 
  * DELETE HTTP requests in your Android applications. Requests can be made
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/http/AsyncHttpRequest.java
similarity index 98%
rename from src/com/loopj/android/http/AsyncHttpRequest.java
rename to src/com/loopj/http/AsyncHttpRequest.java
index 8832be0c..3dc195a2 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/http/AsyncHttpRequest.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.IOException;
 import java.net.ConnectException;
@@ -28,7 +28,8 @@
 import org.apache.http.impl.client.AbstractHttpClient;
 import org.apache.http.protocol.HttpContext;
 
-class AsyncHttpRequest implements Runnable {
+
+public class AsyncHttpRequest implements Runnable {
     private final AbstractHttpClient client;
     private final HttpContext context;
     private final HttpUriRequest request;
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/http/AsyncHttpResponseHandler.java
similarity index 99%
rename from src/com/loopj/android/http/AsyncHttpResponseHandler.java
rename to src/com/loopj/http/AsyncHttpResponseHandler.java
index 6c6ba088..4c117f96 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/http/AsyncHttpResponseHandler.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import android.os.Handler;
 import android.os.Looper;
@@ -28,6 +28,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
+
 import java.io.IOException;
 
 /**
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/http/BinaryHttpResponseHandler.java
similarity index 99%
rename from src/com/loopj/android/http/BinaryHttpResponseHandler.java
rename to src/com/loopj/http/BinaryHttpResponseHandler.java
index 3bd3e8a4..38d8d5ec 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/http/BinaryHttpResponseHandler.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import android.os.Message;
 import org.apache.http.Header;
@@ -27,6 +27,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
+
 import java.io.IOException;
 
 /**
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/http/JsonHttpResponseHandler.java
similarity index 99%
rename from src/com/loopj/android/http/JsonHttpResponseHandler.java
rename to src/com/loopj/http/JsonHttpResponseHandler.java
index ff785706..9e86c5e8 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/http/JsonHttpResponseHandler.java
@@ -16,13 +16,14 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
+
 import android.os.Message;
 
 /**
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/http/PersistentCookieStore.java
similarity index 99%
rename from src/com/loopj/android/http/PersistentCookieStore.java
rename to src/com/loopj/http/PersistentCookieStore.java
index 94076682..8cf6af55 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/http/PersistentCookieStore.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -30,6 +30,7 @@
 import org.apache.http.client.CookieStore;
 import org.apache.http.cookie.Cookie;
 
+
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.text.TextUtils;
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/http/RequestParams.java
similarity index 99%
rename from src/com/loopj/android/http/RequestParams.java
rename to src/com/loopj/http/RequestParams.java
index 2c80e35c..4b4a4cba 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/http/RequestParams.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.InputStream;
 import java.io.File;
@@ -33,6 +33,7 @@
 import org.apache.http.client.utils.URLEncodedUtils;
 import org.apache.http.message.BasicNameValuePair;
 
+
 /**
  * A collection of string request parameters or files to send along with
  * requests made from an {@link AsyncHttpClient} instance.
@@ -232,7 +233,7 @@ private void init(){
         return lparams;
     }
 
-    protected String getParamString() {
+    public String getParamString() {
         return URLEncodedUtils.format(getParamsList(), ENCODING);
     }
 
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/http/RetryHandler.java
similarity index 71%
rename from src/com/loopj/android/http/RetryHandler.java
rename to src/com/loopj/http/RetryHandler.java
index 37b74344..897d9ade 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/http/RetryHandler.java
@@ -21,7 +21,7 @@
     fantastic droid-fu project: https://github.com/donnfelker/droid-fu
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
@@ -32,14 +32,12 @@
 import javax.net.ssl.SSLHandshakeException;
 
 import org.apache.http.NoHttpResponseException;
-import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.HttpRequestRetryHandler;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HttpContext;
 
-import android.os.SystemClock;
-
-class RetryHandler implements HttpRequestRetryHandler {
+public class RetryHandler implements HttpRequestRetryHandler {
     private static final int RETRY_SLEEP_TIME_MILLIS = 1500;
     private static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
     private static HashSet<Class<?>> exceptionBlacklist = new HashSet<Class<?>>();
@@ -95,11 +93,44 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         }
 
         if(retry) {
-            SystemClock.sleep(RETRY_SLEEP_TIME_MILLIS);
+            sleep(RETRY_SLEEP_TIME_MILLIS);
         } else {
             exception.printStackTrace();
         }
 
         return retry;
     }
+    
+    /**
+     * Waits a given number of milliseconds (of uptimeMillis) before returning.
+     * Similar to {@link java.lang.Thread#sleep(long)}, but does not throw
+     * {@link InterruptedException}; {@link Thread#interrupt()} events are
+     * deferred until the next interruptible operation.  Does not return until
+     * at least the specified number of milliseconds has elapsed.
+     * From android source: framework/base/core/java/android/os/SystemClock.java
+     *
+     * @param ms to sleep before returning, in milliseconds of uptime.
+     */
+    private static void sleep(long ms)
+    {
+        long start = System.currentTimeMillis();
+        long duration = ms;
+        boolean interrupted = false;
+        do {
+            try {
+                Thread.sleep(duration);
+            }
+            catch (InterruptedException e) {
+                interrupted = true;
+            }
+            duration = start + ms - System.currentTimeMillis();
+        } while (duration > 0);
+        
+        if (interrupted) {
+            // Important: we don't want to quietly eat an interrupt() event,
+            // so we make sure to re-interrupt the thread so that the next
+            // call to Thread.sleep() or Object.wait() will be interrupted.
+            Thread.currentThread().interrupt();
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/SerializableCookie.java b/src/com/loopj/http/SerializableCookie.java
similarity index 98%
rename from src/com/loopj/android/http/SerializableCookie.java
rename to src/com/loopj/http/SerializableCookie.java
index cc12993c..2f2874c5 100644
--- a/src/com/loopj/android/http/SerializableCookie.java
+++ b/src/com/loopj/http/SerializableCookie.java
@@ -16,7 +16,7 @@
     limitations under the License.
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.Serializable;
 import java.io.ObjectInputStream;
@@ -27,6 +27,7 @@
 import org.apache.http.cookie.Cookie;
 import org.apache.http.impl.cookie.BasicClientCookie;
 
+
 /**
  * A wrapper class around {@link Cookie} and/or {@link BasicClientCookie}
  * designed for use in {@link PersistentCookieStore}.
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/http/SimpleMultipartEntity.java
similarity index 99%
rename from src/com/loopj/android/http/SimpleMultipartEntity.java
rename to src/com/loopj/http/SimpleMultipartEntity.java
index bff0efcc..c338bbaf 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/http/SimpleMultipartEntity.java
@@ -21,7 +21,7 @@
     http://blog.rafaelsanches.com/2011/01/29/upload-using-multipart-post-using-httpclient-in-android/
 */
 
-package com.loopj.android.http;
+package com.loopj.http;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
