diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 3d8834b2..0a3346a0 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -192,7 +192,6 @@ public AsyncHttpClient(boolean allowAnySertificates)
 			}
 			catch (Throwable e)
 			{
-				// FIXME Auto-generated catch block
 				e.printStackTrace();
 			}
 		}
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index e270c67e..2791d2af 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -66,6 +66,7 @@
 	
 	// Allow all contentType
 	private static String[] mAllowedContentTypes = null;
+	private boolean isCanceled = false;
 
 	/**
 	 * Creates a new BinaryHttpResponseHandler
@@ -248,18 +249,22 @@ void sendResponseMessage(HttpResponse response)
 				long totalLength = temp.getContentLength();
 				int readedBytes = 0;
 				int allReadBytes = 0; 
-				while((readedBytes = stream.read(beffer)) != -1)
+				while(!isCanceled() && (readedBytes = stream.read(beffer)) != -1)
 				{
 					onDidDownload(statusCode, beffer, readedBytes);
 					allReadBytes += readedBytes;
 					sendProgressChangeMessage(statusCode, allReadBytes, totalLength);
 				}
+				if (isCanceled())
+				{
+					sendFailureMessage(new Exception("User stop downloading"), responseBody);
+				}
 				sendSuccessMessage(statusCode, responseBody);
 			}
 		}
 		catch (IOException e)
 		{
-			sendFailureMessage(e, (byte[]) null);
+			sendFailureMessage(e, responseBody);
 		}
 
 		if (status.getStatusCode() >= 300)
@@ -271,4 +276,14 @@ void sendResponseMessage(HttpResponse response)
 			sendSuccessMessage(status.getStatusCode(), responseBody);
 		}
 	}
+
+	public boolean isCanceled()
+	{
+		return isCanceled;
+	}
+	
+	public void setIsCanceled(boolean isCanceled)
+	{
+		this.isCanceled = isCanceled;
+	}
 }
\ No newline at end of file
