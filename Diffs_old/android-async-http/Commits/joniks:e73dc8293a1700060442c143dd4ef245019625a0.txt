diff --git a/CHANGELOG.md b/CHANGELOG.md
index 948f7b1f..6a3aeb5f 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,6 @@
 # CHANGELOG
 
-## 1.4.7 (future version)
+## 1.4.7 (released 9. 5. 2015)
 
   - Fixed crash when canceling through RequestHandle from UI Thread (NetworkOnMainThreadException)
   - Fixed URL encoding feature, that was breaking whole URL, not just path and query parts
@@ -9,6 +9,12 @@
   - Added support for HTTP PATCH requests
   - Fixed Assert exception when mkdirs in FileAsyncHttpResponseHandler tries to create dirs that already exists
   - Provided option to easily override ClientConnectionManager provision in AsyncHttpClient
+  - Changed onProgress from (int,int) to (long,long) for dealing with large transfers
+  - Renamed typo of `preemtive` to `preemptive` (preemptive basic auth)
+  - Added option to put File array in RequestParams
+  - RequestParams now support forcing Content-Type into `multipart/form-data` even if there are no files/streams to be multiparted
+  - Gradle added support for installing to local maven repository, through `gradle installArchives` task
+  - Added support for Json RFC5179 in JsonHttpResponseHandler
 
 ## 1.4.6 (released 7. 9. 2014)
 
diff --git a/README.md b/README.md
index de4656d3..8a48b11e 100755
--- a/README.md
+++ b/README.md
@@ -7,14 +7,14 @@ An asynchronous, callback-based Http client for Android built on top of Apache's
 Changelog
 ---------
 
-See what is new in version 1.4.6 released on 7th Sep 2014
+See what is new in version 1.4.7 released on 9th May 2015
 
-https://github.com/loopj/android-async-http/blob/1.4.6/CHANGELOG.md
+https://github.com/loopj/android-async-http/blob/1.4.7/CHANGELOG.md
 
 Javadoc
 -------
 
-Latest Javadoc for 1.4.6 release are available here (also included in Maven repository):
+Latest Javadoc for 1.4.7 release are available here (also included in Maven repository):
 
 http://loopj.com/android-async-http/doc/
 
@@ -35,7 +35,7 @@ Examples
 --------
 
 For inspiration and testing on device we've provided Sample Application.  
-See individual samples [here on Github](https://github.com/loopj/android-async-http/tree/1.4.6/sample/src/main/java/com/loopj/android/http/sample)  
+See individual samples [here on Github](https://github.com/loopj/android-async-http/tree/1.4.7/sample/src/main/java/com/loopj/android/http/sample)  
 To run Sample application, simply clone the repository and run this command, to install it on connected device  
 
 ```java
@@ -53,10 +53,10 @@ http://central.maven.org/maven2/com/loopj/android/android-async-http/
 Maven URL: http://repo1.maven.org/maven2/
 GroupId: com.loopj.android
 ArtifactId: android-async-http
-Version: 1.4.6
+Version: 1.4.7
 Packaging: JAR or AAR
 ```
-Gradle: `com.loopj.android:android-async-http:1.4.6`
+Gradle: `com.loopj.android:android-async-http:1.4.7`
 
 **development snapshots**
 
@@ -65,10 +65,10 @@ https://oss.sonatype.org/content/repositories/snapshots/com/loopj/android/androi
 Maven URL: https://oss.sonatype.org/content/repositories/snapshots/
 GroupId: com.loopj.android
 ArtifactId: android-async-http
-Version: 1.4.7-SNAPSHOT
+Version: 1.4.8-SNAPSHOT
 Packaging: JAR or AAR
 ```
-Gradle: `com.loopj.android:android-async-http:1.4.7-SNAPSHOT`
+Gradle: `com.loopj.android:android-async-http:1.4.8-SNAPSHOT`
 
 Documentation, Features and Examples
 ------------------------------------
diff --git a/build.gradle b/build.gradle
index cfa2b19b..d6ac9ba1 100755
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
+        classpath 'com.android.tools.build:gradle:1.2.2'
     }
 }
 
@@ -14,7 +14,7 @@ def isReleaseBuild() {
 
 allprojects {
     group = 'com.loopj.android'
-    version = '1.4.7-SNAPSHOT'
+    version = '1.4.8-SNAPSHOT'
 
     repositories {
         mavenCentral()
diff --git a/gradle.properties b/gradle.properties
index df1bf1ff..c7c5dc86 100755
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
-VERSION_NAME=1.4.7-SNAPSHOT
-VERSION_CODE=147
+VERSION_NAME=1.4.8-SNAPSHOT
+VERSION_CODE=148
 GROUP=com.loopj.android
 
 POM_DESCRIPTION=An Asynchronous HTTP Library for Android
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 085a1cdc..b5166dad 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 9a832b48..2c92333e 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Apr 02 15:10:03 CEST 2015
+#Sat May 09 18:54:15 CEST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-bin.zip
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index 58b8a4f5..3049b2d6 100755
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -1,8 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.loopj.android.http"
-          android:versionName="1.4.7"
-          android:versionCode="147">
+          package="com.loopj.android.http">
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 7c7fa303..6684c6f4 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -632,8 +632,8 @@ public void setBasicAuth(String username, String password) {
      * Sets basic authentication for the request. Uses AuthScope.ANY. This is the same as
      * setBasicAuth('username','password',AuthScope.ANY)
      *
-     * @param username  Basic Auth username
-     * @param password  Basic Auth password
+     * @param username   Basic Auth username
+     * @param password   Basic Auth password
      * @param preemptive sets authorization in preemptive manner
      */
     public void setBasicAuth(String username, String password, boolean preemptive) {
@@ -656,9 +656,9 @@ public void setBasicAuth(String username, String password, AuthScope scope) {
      * Sets basic authentication for the request. You should pass in your AuthScope for security. It
      * should be like this setBasicAuth("username","password", new AuthScope("host",port,AuthScope.ANY_REALM))
      *
-     * @param username  Basic Auth username
-     * @param password  Basic Auth password
-     * @param scope     an AuthScope object
+     * @param username   Basic Auth username
+     * @param password   Basic Auth password
+     * @param scope      an AuthScope object
      * @param preemptive sets authorization in preemptive manner
      */
     public void setBasicAuth(String username, String password, AuthScope scope, boolean preemptive) {
@@ -721,22 +721,28 @@ public void cancelRequests(final Context context, final boolean mayInterruptIfRu
             Log.e(LOG_TAG, "Passed null Context to cancelRequests");
             return;
         }
-        Runnable r = new Runnable() {
-            @Override
-            public void run() {
-                List<RequestHandle> requestList = requestMap.get(context);
-                if (requestList != null) {
-                    for (RequestHandle requestHandle : requestList) {
-                        requestHandle.cancel(mayInterruptIfRunning);
-                    }
-                    requestMap.remove(context);
-                }
-            }
-        };
+
+        final List<RequestHandle> requestList = requestMap.get(context);
+        requestMap.remove(context);
+
         if (Looper.myLooper() == Looper.getMainLooper()) {
-            new Thread(r).start();
+            Runnable runnable = new Runnable() {
+                @Override
+                public void run() {
+                    cancelRequests(requestList, mayInterruptIfRunning);
+                }
+            };
+            threadPool.submit(runnable);
         } else {
-            r.run();
+            cancelRequests(requestList, mayInterruptIfRunning);
+        }
+    }
+
+    private void cancelRequests(final List<RequestHandle> requestList, final boolean mayInterruptIfRunning) {
+        if (requestList != null) {
+            for (RequestHandle requestHandle : requestList) {
+                requestHandle.cancel(mayInterruptIfRunning);
+            }
         }
     }
 
@@ -1095,7 +1101,8 @@ public RequestHandle put(Context context, String url, Header[] headers, HttpEnti
     }
 
     /**
-     * Perform a HTTP PATCH request, without any parameters.
+     * Perform a HTTP
+     * request, without any parameters.
      *
      * @param url             the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
@@ -1136,6 +1143,11 @@ public RequestHandle patch(Context context, String url, RequestParams params, Re
      * @param context         the Android Context which initiated the request.
      * @param url             the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
+     * @param entity          a raw {@link HttpEntity} to send with the request, for example, use
+     *                        this to send string/json/xml payloads to a server by passing a {@link
+     *                        org.apache.http.entity.StringEntity}
+     * @param contentType     the content type of the payload you are sending, for example
+     *                        "application/json" if sending a json payload.
      * @return RequestHandle of future request process
      */
     public RequestHandle patch(Context context, String url, HttpEntity entity, String contentType, ResponseHandlerInterface responseHandler) {
@@ -1292,9 +1304,9 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         if (responseHandler.getUseSynchronousMode() && !responseHandler.getUsePoolThread()) {
             throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");
         }
-
+        
         if (contentType != null) {
-            if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase) uriRequest).getEntity() != null) {
+            if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase) uriRequest).getEntity() != null && uriRequest.containsHeader(HEADER_CONTENT_TYPE)) {
                 Log.w(LOG_TAG, "Passed contentType will be ignored because HttpEntity sets content type");
             } else {
                 uriRequest.setHeader(HEADER_CONTENT_TYPE, contentType);
@@ -1397,7 +1409,7 @@ public static String getUrlWithQueryString(boolean shouldEncodeUrl, String url,
      *
      * @param inputStream InputStream to be checked
      * @return true or false if the stream contains GZIP compressed data
-     * @throws java.io.IOException
+     * @throws java.io.IOException if read from inputStream fails
      */
     public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {
         if (inputStream == null)
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
index f03c1423..24b5cc2f 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -39,7 +39,7 @@
  * {@link #onSuccess(int, org.apache.http.Header[], byte[])} method is designed to be anonymously
  * overridden with your own response handling code. <p>&nbsp;</p> Additionally, you can override the
  * {@link #onFailure(int, org.apache.http.Header[], byte[], Throwable)}, {@link #onStart()}, {@link
- * #onFinish()}, {@link #onRetry(int)} and {@link #onProgress(int, int)} methods as required.
+ * #onFinish()}, {@link #onRetry(int)} and {@link #onProgress(long, long)} methods as required.
  * <p>&nbsp;</p> For example: <p>&nbsp;</p>
  * <pre>
  * AsyncHttpClient client = new AsyncHttpClient();
@@ -78,6 +78,7 @@
  * });
  * </pre>
  */
+@SuppressWarnings("ALL")
 public abstract class AsyncHttpResponseHandler implements ResponseHandlerInterface {
 
     private static final String LOG_TAG = "AsyncHttpResponseHandler";
@@ -246,7 +247,7 @@ public String getCharset() {
      * @param bytesWritten offset from start of file
      * @param totalSize    total size of file
      */
-    public void onProgress(int bytesWritten, int totalSize) {
+    public void onProgress(long bytesWritten, long totalSize) {
         Log.v(LOG_TAG, String.format("Progress %d from %d (%2.0f%%)", bytesWritten, totalSize, (totalSize > 0) ? (bytesWritten * 1.0 / totalSize) * 100 : -1));
     }
 
@@ -313,7 +314,7 @@ public void onUserException(Throwable error) {
     }
 
     @Override
-    final public void sendProgressMessage(int bytesWritten, int bytesTotal) {
+    final public void sendProgressMessage(long bytesWritten, long bytesTotal) {
         sendMessage(obtainMessage(PROGRESS_MESSAGE, new Object[]{bytesWritten, bytesTotal}));
     }
 
@@ -379,7 +380,7 @@ protected void handleMessage(Message message) {
                     response = (Object[]) message.obj;
                     if (response != null && response.length >= 2) {
                         try {
-                            onProgress((Integer) response[0], (Integer) response[1]);
+                            onProgress((Long) response[0], (Long) response[1]);
                         } catch (Throwable t) {
                             Log.e(LOG_TAG, "custom onProgress contains an error", t);
                         }
@@ -480,12 +481,13 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                     ByteArrayBuffer buffer = new ByteArrayBuffer(buffersize);
                     try {
                         byte[] tmp = new byte[BUFFER_SIZE];
-                        int l, count = 0;
+                        long count = 0;
+                        int l;
                         // do not send messages if request has been cancelled
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                             count += l;
                             buffer.append(tmp, 0, l);
-                            sendProgressMessage(count, (int) (contentLength <= 0 ? 1 : contentLength));
+                            sendProgressMessage(count, (contentLength <= 0 ? 1 : contentLength));
                         }
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
diff --git a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
index d801c9fa..deb0bd80 100755
--- a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+@SuppressWarnings("ALL")
 public abstract class DataAsyncHttpResponseHandler extends AsyncHttpResponseHandler {
     private static final String LOG_TAG = "DataAsyncHttpResponseHandler";
 
@@ -105,7 +106,7 @@ protected void handleMessage(Message message) {
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                             buffer.append(tmp, 0, l);
                             sendProgressDataMessage(copyOfRange(tmp, 0, l));
-                            sendProgressMessage(count, (int) contentLength);
+                            sendProgressMessage(count, contentLength);
                         }
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
diff --git a/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
index 1a11a1a0..8337d829 100755
--- a/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
@@ -153,7 +153,7 @@ public final void onSuccess(int statusCode, Header[] headers, byte[] responseByt
                     while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                         count += l;
                         buffer.write(tmp, 0, l);
-                        sendProgressMessage(count, (int) contentLength);
+                        sendProgressMessage(count, contentLength);
                     }
                 } finally {
                     AsyncHttpClient.silentCloseInputStream(instream);
diff --git a/library/src/main/java/com/loopj/android/http/HttpDelete.java b/library/src/main/java/com/loopj/android/http/HttpDelete.java
index 7bd0d10b..fa528729 100644
--- a/library/src/main/java/com/loopj/android/http/HttpDelete.java
+++ b/library/src/main/java/com/loopj/android/http/HttpDelete.java
@@ -35,17 +35,21 @@ public HttpDelete() {
         super();
     }
 
+    /**
+     * @param uri target url as URI
+     */
     public HttpDelete(final URI uri) {
         super();
         setURI(uri);
     }
 
     /**
+     * @param uri target url as String
      * @throws IllegalArgumentException if the uri is invalid.
-    */
+     */
     public HttpDelete(final String uri) {
-            super();
-            setURI(URI.create(uri));
+        super();
+        setURI(URI.create(uri));
     }
 
     @Override
diff --git a/library/src/main/java/com/loopj/android/http/HttpGet.java b/library/src/main/java/com/loopj/android/http/HttpGet.java
index 880f3c76..4c639e8c 100644
--- a/library/src/main/java/com/loopj/android/http/HttpGet.java
+++ b/library/src/main/java/com/loopj/android/http/HttpGet.java
@@ -36,17 +36,21 @@ public HttpGet() {
         super();
     }
 
+    /**
+     * @param uri target url as URI
+     */
     public HttpGet(final URI uri) {
         super();
         setURI(uri);
     }
 
     /**
+     * @param uri target url as String
      * @throws IllegalArgumentException if the uri is invalid.
-    */
+     */
     public HttpGet(final String uri) {
-            super();
-            setURI(URI.create(uri));
+        super();
+        setURI(URI.create(uri));
     }
 
     @Override
diff --git a/library/src/main/java/com/loopj/android/http/HttpPatch.java b/library/src/main/java/com/loopj/android/http/HttpPatch.java
index a81cc2c5..f0963d40 100644
--- a/library/src/main/java/com/loopj/android/http/HttpPatch.java
+++ b/library/src/main/java/com/loopj/android/http/HttpPatch.java
@@ -18,33 +18,38 @@
 
 package com.loopj.android.http;
 
-import java.net.URI;
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 
+import java.net.URI;
+
 /**
  * The current Android (API level 21) bundled version of the Apache Http Client does not implement
- * the HTTP PATCH method. Until the Android version is updated this can serve in it's stead. 
+ * the HTTP PATCH method. Until the Android version is updated this can serve in it's stead.
  * This implementation can and should go away when the official solution arrives.
  */
 public final class HttpPatch extends HttpEntityEnclosingRequestBase {
-	
+
     public final static String METHOD_NAME = "PATCH";
 
     public HttpPatch() {
         super();
     }
 
+    /**
+     * @param uri target url as URI
+     */
     public HttpPatch(final URI uri) {
         super();
         setURI(uri);
     }
 
     /**
+     * @param uri target url as String
      * @throws IllegalArgumentException if the uri is invalid.
-    */
+     */
     public HttpPatch(final String uri) {
-            super();
-            setURI(URI.create(uri));
+        super();
+        setURI(URI.create(uri));
     }
 
     @Override
diff --git a/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java b/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
index b65b4271..5bc2761c 100755
--- a/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
+++ b/library/src/main/java/com/loopj/android/http/JsonStreamerEntity.java
@@ -83,8 +83,8 @@ public JsonStreamerEntity(ResponseHandlerInterface progressHandler, boolean useG
         this.progressHandler = progressHandler;
         this.contentEncoding = useGZipCompression ? HEADER_GZIP_ENCODING : null;
         this.elapsedField = TextUtils.isEmpty(elapsedField)
-          ? null
-          : escape(elapsedField);
+                ? null
+                : escape(elapsedField);
     }
 
     /**
@@ -283,7 +283,8 @@ private void writeToFromFile(OutputStream os, RequestParams.FileWrapper wrapper)
         // Send the meta data.
         writeMetaData(os, wrapper.file.getName(), wrapper.contentType);
 
-        int bytesRead, bytesWritten = 0, totalSize = (int) wrapper.file.length();
+        int bytesRead;
+        long bytesWritten = 0, totalSize = wrapper.file.length();
 
         // Open the file for reading.
         FileInputStream in = new FileInputStream(wrapper.file);
diff --git a/library/src/main/java/com/loopj/android/http/JsonValueInterface.java b/library/src/main/java/com/loopj/android/http/JsonValueInterface.java
index 110b5c1c..3d84513a 100644
--- a/library/src/main/java/com/loopj/android/http/JsonValueInterface.java
+++ b/library/src/main/java/com/loopj/android/http/JsonValueInterface.java
@@ -24,7 +24,7 @@
  * not rely on {@link org.json.JSONArray} or {@link org.json.JSONObject} to
  * exchange data.
  *
- * @author Noor Dawod <github@fineswap.com>
+ * @author Noor Dawod {@literal <github@fineswap.com>}
  */
 public interface JsonValueInterface {
 
diff --git a/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
index 7abffb1a..480e8da7 100755
--- a/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
@@ -88,7 +88,7 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                     while (current < contentLength && (l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                         current += l;
                         buffer.write(tmp, 0, l);
-                        sendProgressMessage((int) current, (int) contentLength);
+                        sendProgressMessage(current, contentLength);
                     }
                 } finally {
                     instream.close();
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index 095134b9..5fcb28d9 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -109,7 +109,7 @@
     protected final ConcurrentHashMap<String, String> urlParams = new ConcurrentHashMap<String, String>();
     protected final ConcurrentHashMap<String, StreamWrapper> streamParams = new ConcurrentHashMap<String, StreamWrapper>();
     protected final ConcurrentHashMap<String, FileWrapper> fileParams = new ConcurrentHashMap<String, FileWrapper>();
-    protected final ConcurrentHashMap<String, List<FileWrapper> >fileArrayParams = new ConcurrentHashMap<String, List<FileWrapper>>();
+    protected final ConcurrentHashMap<String, List<FileWrapper>> fileArrayParams = new ConcurrentHashMap<String, List<FileWrapper>>();
     protected final ConcurrentHashMap<String, Object> urlParamsWithObjects = new ConcurrentHashMap<String, Object>();
     protected String contentEncoding = HTTP.UTF_8;
 
@@ -130,7 +130,7 @@ public void setContentEncoding(final String encoding) {
     /**
      * If set to true will force Content-Type header to `multipart/form-data`
      * even if there are not Files or Streams to be send
-     *
+     * <p>&nbsp;</p>
      * Default value is false
      *
      * @param force boolean, should declare content-type multipart/form-data even without files or streams present
@@ -207,35 +207,34 @@ public void put(String key, String value) {
     /**
      * Adds files array to the request.
      *
-     * @param key the key name for the new param.
+     * @param key   the key name for the new param.
      * @param files the files array to add.
-     * @throws FileNotFoundException
+     * @throws FileNotFoundException if one of passed files is not found at time of assembling the requestparams into request
      */
     public void put(String key, File files[]) throws FileNotFoundException {
         put(key, files, null, null);
     }
 
     /**
-     *
      * Adds files array to the request with both custom provided file content-type and files name
      *
      * @param key            the key name for the new param.
-     * @param files           the files array to add.
+     * @param files          the files array to add.
      * @param contentType    the content type of the file, eg. application/json
      * @param customFileName file name to use instead of real file name
      * @throws FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File files[], String contentType, String customFileName) throws FileNotFoundException {
 
-        if(key != null){
+        if (key != null) {
             List<FileWrapper> fileWrappers = new ArrayList<FileWrapper>();
-            for (int i=0;i<files.length;i++){
-                if(files[i] == null || !files[i].exists()){
+            for (int i = 0; i < files.length; i++) {
+                if (files[i] == null || !files[i].exists()) {
                     throw new FileNotFoundException();
                 }
                 fileWrappers.add(new FileWrapper(files[i], contentType, customFileName));
             }
-            fileArrayParams.put(key,fileWrappers);
+            fileArrayParams.put(key, fileWrappers);
         }
     }
 
@@ -489,7 +488,7 @@ public void setUseJsonStreamer(boolean flag) {
      * Sets an additional field when upload a JSON object through the streamer
      * to hold the time, in milliseconds, it took to upload the payload. By
      * default, this field is set to "_elapsed".
-     *
+     * <p>&nbsp;</p>
      * To disable this feature, call this method with null as the field value.
      *
      * @param value field name to add elapsed time, or null to disable
@@ -606,7 +605,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
         // Add file collection
         for (ConcurrentHashMap.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
             List<FileWrapper> fileWrapper = entry.getValue();
-            for (FileWrapper fw:fileWrapper){
+            for (FileWrapper fw : fileWrapper) {
                 entity.addPart(entry.getKey(), fw.file, fw.contentType, fw.customFileName);
             }
         }
diff --git a/library/src/main/java/com/loopj/android/http/ResponseHandlerInterface.java b/library/src/main/java/com/loopj/android/http/ResponseHandlerInterface.java
index 6660683c..e438e68a 100755
--- a/library/src/main/java/com/loopj/android/http/ResponseHandlerInterface.java
+++ b/library/src/main/java/com/loopj/android/http/ResponseHandlerInterface.java
@@ -53,7 +53,7 @@
      * @param bytesWritten number of written bytes
      * @param bytesTotal   number of total bytes to be written
      */
-    void sendProgressMessage(int bytesWritten, int bytesTotal);
+    void sendProgressMessage(long bytesWritten, long bytesTotal);
 
     /**
      * Notifies callback, that request was cancelled
@@ -91,28 +91,28 @@
      *
      * @return uri of origin request
      */
-    public URI getRequestURI();
+    URI getRequestURI();
 
     /**
      * Returns Header[] which were used to request
      *
      * @return headers from origin request
      */
-    public Header[] getRequestHeaders();
+    Header[] getRequestHeaders();
 
     /**
      * Helper for handlers to receive Request URI info
      *
      * @param requestURI claimed request URI
      */
-    public void setRequestURI(URI requestURI);
+    void setRequestURI(URI requestURI);
 
     /**
      * Helper for handlers to receive Request Header[] info
      *
      * @param requestHeaders Headers, claimed to be from original request
      */
-    public void setRequestHeaders(Header[] requestHeaders);
+    void setRequestHeaders(Header[] requestHeaders);
 
     /**
      * Can set, whether the handler should be asynchronous or synchronous
@@ -148,7 +148,7 @@
      * This method is called once by the system when the response is about to be
      * processed by the system. The library makes sure that a single response
      * is pre-processed only once.
-     *
+     * <p>&nbsp;</p>
      * Please note: pre-processing does NOT run on the main thread, and thus
      * any UI activities that you must perform should be properly dispatched to
      * the app's UI thread.
@@ -162,7 +162,7 @@
      * This method is called once by the system when the request has been fully
      * sent, handled and finished. The library makes sure that a single response
      * is post-processed only once.
-     *
+     * <p>&nbsp;</p>
      * Please note: post-processing does NOT run on the main thread, and thus
      * any UI activities that you must perform should be properly dispatched to
      * the app's UI thread.
diff --git a/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
index f4663b7b..39a56433 100644
--- a/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
@@ -38,11 +38,11 @@
 /**
  * Provides interface to deserialize SAX responses, using AsyncHttpResponseHandler. Can be used like
  * this
- *
+ * <p>&nbsp;</p>
  * <pre>
  *     AsyncHttpClient ahc = new AsyncHttpClient();
  *     FontHandler handlerInstance = ... ; // init handler instance
- *     ahc.post("https://server.tld/api/call", new SaxAsyncHttpResponseHandler<FontHandler>(handlerInstance){
+ *     ahc.post("https://server.tld/api/call", new SaxAsyncHttpResponseHandler{@literal <}FontHandler{@literal >}(handlerInstance){
  *         &#064;Override
  *         public void onSuccess(int statusCode, Header[] headers, FontHandler t) {
  *              // Request got HTTP success statusCode
@@ -52,7 +52,7 @@
  *              // Request got HTTP fail statusCode
  *         }
  *     });
- * <pre/>
+ * </pre>
  *
  * @param <T> Handler extending {@link org.xml.sax.helpers.DefaultHandler}
  * @see org.xml.sax.helpers.DefaultHandler
@@ -85,7 +85,7 @@ public SaxAsyncHttpResponseHandler(T t) {
      *
      * @param entity returned HttpEntity
      * @return deconstructed response
-     * @throws java.io.IOException
+     * @throws java.io.IOException if there is problem assembling SAX response from stream
      * @see org.apache.http.HttpEntity
      */
     @Override
diff --git a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
index a6883068..cd9c6743 100755
--- a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
@@ -69,9 +69,9 @@
 
     private final ResponseHandlerInterface progressHandler;
 
-    private int bytesWritten;
+    private long bytesWritten;
 
-    private int totalSize;
+    private long totalSize;
 
     public SimpleMultipartEntity(ResponseHandlerInterface progressHandler) {
         final StringBuilder buf = new StringBuilder();
@@ -117,6 +117,7 @@ public void addPart(String key, File file) {
     public void addPart(String key, File file, String type) {
         fileParts.add(new FilePart(key, file, normalizeContentType(type)));
     }
+
     public void addPart(String key, File file, String type, String customFileName) {
         fileParts.add(new FilePart(key, file, normalizeContentType(type), customFileName));
     }
@@ -167,7 +168,7 @@ private String normalizeContentType(String type) {
                         "; filename=\"" + fileName + "\"" + STR_CR_LF).getBytes();
     }
 
-    private void updateProgress(int count) {
+    private void updateProgress(long count) {
         bytesWritten += count;
         progressHandler.sendProgressMessage(bytesWritten, totalSize);
     }
diff --git a/releases/android-async-http-1.2.0.jar b/releases/android-async-http-1.2.0.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.2.1.jar b/releases/android-async-http-1.2.1.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.3.0.jar b/releases/android-async-http-1.3.0.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.3.1.jar b/releases/android-async-http-1.3.1.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.3.2.jar b/releases/android-async-http-1.3.2.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.0.jar b/releases/android-async-http-1.4.0.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.1.jar b/releases/android-async-http-1.4.1.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.2.jar b/releases/android-async-http-1.4.2.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.3.jar b/releases/android-async-http-1.4.3.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.4.jar b/releases/android-async-http-1.4.4.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.5.jar b/releases/android-async-http-1.4.5.jar
old mode 100755
new mode 100644
diff --git a/releases/android-async-http-1.4.6.jar b/releases/android-async-http-1.4.6.jar
new file mode 100644
index 00000000..70391cb9
Binary files /dev/null and b/releases/android-async-http-1.4.6.jar differ
diff --git a/releases/android-async-http-1.4.7.jar b/releases/android-async-http-1.4.7.jar
new file mode 100644
index 00000000..d9e203e5
Binary files /dev/null and b/releases/android-async-http-1.4.7.jar differ
diff --git a/sample/build.gradle b/sample/build.gradle
index 370f59ff..7bfe11fa 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -37,6 +37,6 @@ android {
 }
 
 dependencies {
-    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.3'
+    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
     compile project(':library')
 }
