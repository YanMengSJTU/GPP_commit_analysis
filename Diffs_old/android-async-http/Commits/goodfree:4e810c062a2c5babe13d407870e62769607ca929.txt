diff --git a/android-app-http/src/com/app/library/http/RequestChache.java b/android-app-http/src/com/app/library/http/RequestChache.java
deleted file mode 100644
index de8fd99a..00000000
--- a/android-app-http/src/com/app/library/http/RequestChache.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.app.library.http;
-
-import android.content.Context;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-
-public class RequestChache {
-	private static RequestChache INSTANCE = null;
-	private RequestDBHelper requestDBHelper;
-
-	public RequestChache(Context context) {
-		this.requestDBHelper = new RequestDBHelper(context);
-	}
-
-	public static RequestChache getInstance(Context context) {
-		if (INSTANCE == null) {
-			INSTANCE = new RequestChache(context);
-		}
-		return INSTANCE;
-	}
-
-	/**
-	 * 更新数据，
-	 * 
-	 * @param item
-	 */
-	public void update(String url, long lastModified) {
-		SQLiteDatabase db = requestDBHelper.getWritableDatabase();
-		if (!find(url)) { // 创建
-			db.execSQL("insert into request_cache(url, lastmodified) values(?,?)",
-					new Object[] { url, String.valueOf(lastModified) });
-		} else { // 有则更新
-			db.execSQL("update request_cache set lastmodified=? where url=?",
-					new Object[] { String.valueOf(lastModified), url });
-		}
-	}
-	
-	/**
-	 * 取最近更新
-	 * @param filename
-	 * @return
-	 */
-	public long getLastModified(String url) {
-		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
-		Cursor cursor = null;
-		long ret = 0l;
-
-		try {
-			cursor = db.rawQuery("select * from request_cache where url=?", new String[] { url });
-			if (cursor.moveToFirst()) {
-				String last = cursor.getString(cursor.getColumnIndex("lastmodified"));
-				ret = Long.valueOf(last);
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
-		} finally {
-			if (cursor != null) {
-				cursor.close();
-			}
-		}
-		return ret;
-	}
-
-	/**
-	 * 查询存在
-	 * 
-	 * @param filename
-	 * @return
-	 */
-	private boolean find(String url) {
-		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
-		Cursor cursor = null;
-		boolean flag = false;
-
-		try {
-			cursor = db.rawQuery("select * from request_cache where url=?", new String[] { url });
-			if (cursor.moveToFirst()) {
-				flag = true;
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
-		} finally {
-			if (cursor != null) {
-				cursor.close();
-			}
-		}
-		return flag;
-	}
-
-	class RequestDBHelper extends SQLiteOpenHelper {
-		private static final String DB_NAME = "requestCache.db";
-		private static final int DB_VER = 1;
-		private static final String TABLE_CREATE = "create table request_cache(url varchar(32) primary key,  lastmodified varchar(16))";
-
-		public RequestDBHelper(Context context) {
-			super(context, DB_NAME, null, DB_VER);
-		}
-
-		@Override
-		public void onCreate(SQLiteDatabase db) {
-			db.execSQL(TABLE_CREATE);
-		}
-
-		@Override
-		public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
-
-		}
-
-	}
-}
diff --git a/android-app-http/src/com/app/library/http/RequestChacheManager.java b/android-app-http/src/com/app/library/http/RequestChacheManager.java
new file mode 100644
index 00000000..ba12e9e1
--- /dev/null
+++ b/android-app-http/src/com/app/library/http/RequestChacheManager.java
@@ -0,0 +1,156 @@
+package com.app.library.http;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+public class RequestChacheManager {
+	private static RequestChacheManager INSTANCE = null;
+	private RequestDBHelper requestDBHelper;
+	
+	private static final String DB_NAME = "requestCache.db";
+	private static final int DB_VER = 1;
+	private static final String TABLE_CREATE = "create table request_cache(url varchar(32) primary key,  lastmodified varchar(16))";
+
+	/**
+	 * RequestDBHelper
+	 */
+	private class RequestDBHelper extends SQLiteOpenHelper {
+		public RequestDBHelper(Context context) {
+			super(context, DB_NAME, null, DB_VER);
+		}
+
+		@Override
+		public void onCreate(SQLiteDatabase db) {
+			db.execSQL(TABLE_CREATE);
+		}
+
+		@Override
+		public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
+
+		}
+	}
+
+	public RequestChacheManager(Context context) {
+		this.requestDBHelper = new RequestDBHelper(context);
+	}
+
+	public static RequestChacheManager getInstance(Context context) {
+		if (INSTANCE == null) {
+			INSTANCE = new RequestChacheManager(context);
+		}
+		return INSTANCE;
+	}
+
+	/**
+	 * update record: add or update
+	 * 
+	 * @param item
+	 */
+	public void update(String url, long lastModified) {
+		SQLiteDatabase db = requestDBHelper.getWritableDatabase();
+		if (!find(url)) { // add if not exist
+			db.execSQL("insert into request_cache(url, lastmodified) values(?,?)",
+					new Object[] { url, String.valueOf(lastModified) });
+		} else { // update is exist
+			db.execSQL("update request_cache set lastmodified=? where url=?",
+					new Object[] { String.valueOf(lastModified), url });
+		}
+	}
+
+	/**
+	 * get lastmotified value by url
+	 * 
+	 * @param filename
+	 * @return
+	 */
+	public long getLastModified(String url) {
+		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
+		Cursor cursor = null;
+		try {
+			long ret = 0l;
+			cursor = db.rawQuery("select * from request_cache where url=?", new String[] { url });
+			if (cursor.moveToFirst()) {
+				final String last = cursor.getString(cursor.getColumnIndex("lastmodified"));
+				ret = Long.valueOf(last);
+			}
+			return ret;
+		} catch (Exception e) {
+			e.printStackTrace();
+			return 0l;
+		} finally {
+			if (cursor != null) {
+				cursor.close();
+			}
+		}
+	}
+
+	/**
+	 * check exists of url
+	 * 
+	 * @param url
+	 * @return
+	 */
+	private boolean find(String url) {
+		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
+		Cursor cursor = null;
+		try {
+			boolean flag = false;
+			cursor = db.rawQuery("select * from request_cache where url=?", new String[] { url });
+			if (cursor.moveToFirst()) {
+				flag = true;
+			}
+			return flag;
+		} catch (Exception e) {
+			e.printStackTrace();
+			return false;
+		} finally {
+			if (cursor != null) {
+				cursor.close();
+			}
+		}
+	}
+
+	/**
+	 * delete all records
+	 */
+	public void deletAll() {
+		List<String> all = getUrls();
+		for (String url : all) {
+			SQLiteDatabase database = requestDBHelper.getWritableDatabase();
+			database.execSQL("delete from request_cache where url=?", new Object[] { url });
+		}
+	}
+
+	/**
+	 * get all urls in database
+	 * 
+	 * @return
+	 */
+	private List<String> getUrls() {
+		List<String> ret = new ArrayList<String>();
+		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
+		Cursor cursor = null;
+		try {
+			cursor = db.rawQuery("select * from request_cache", null);
+			if (cursor.moveToFirst()) {
+				do {
+					final String url = cursor.getString(0);
+					ret.add(url);
+				} while (cursor.moveToNext());
+			}
+		} catch (IllegalStateException e) {
+			e.printStackTrace();
+		} finally {
+			if (cursor != null) {
+				cursor.close();
+			}
+		}
+		return ret;
+	}
+
+}
diff --git a/android-app-http/src/com/app/library/http/RequestManager.java b/android-app-http/src/com/app/library/http/RequestManager.java
index b80dad71..7b799c38 100644
--- a/android-app-http/src/com/app/library/http/RequestManager.java
+++ b/android-app-http/src/com/app/library/http/RequestManager.java
@@ -6,7 +6,6 @@
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URL;
@@ -20,8 +19,6 @@
 import org.json.JSONObject;
 
 import android.content.Context;
-import android.content.SharedPreferences;
-import android.graphics.Path.FillType;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.AsyncTask;
@@ -58,12 +55,12 @@ public static RequestManager getInstance() {
 	 * @param context
 	 */
 	public static void clearHttpCache(Context context) {
-		context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE).edit().clear().commit();
 		final String fl[] = context.fileList();
 		try {
 			for (String f : fl) {
 				context.deleteFile(f);
 			}
+			RequestChacheManager.getInstance(context).deletAll();
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
@@ -164,21 +161,18 @@ public void get(Context context, String url, RequestListener requestListener, in
 	 * @param context
 	 * @param url
 	 * @param requestListener
-	 * @param cache
+	 * @param isCache
 	 * @param actionId
 	 */
-	public void get(Context context, String url, RequestParams params, RequestListener requestListener, boolean cache,
-			int actionId) {
+	public void get(Context context, String url, RequestParams params, RequestListener requestListener,
+			boolean isCache, int actionId) {
 		final String encodeUrl = urlEncode(url);
-		if (!cache) {
-			System.out.println("no cache--");
+		if (!isCache) {
 			asyncHttpClient.get(context, url, params, new HttpRequestListener(requestListener, actionId));
 		} else {
 			if (!hasCache(context, encodeUrl)) {
-				System.out.println("no cache file--");
 				loadAndSaveResource(context, encodeUrl, requestListener, 0l, actionId);
 			} else {
-				System.out.println("cache file--");
 				loadCache(context, encodeUrl, requestListener, actionId);
 				if (!hasNetwork(context)) {
 					return;
@@ -235,10 +229,8 @@ protected Long doInBackground(Void... params) {
 			}
 
 			protected void onPostExecute(Long result) {
-				long ret = RequestChache.getInstance(context).getLastModified(convertFilename(url));
-				System.out.println("result="+result+",ret"+ret);
+				final long ret = RequestChacheManager.getInstance(context).getLastModified(url);
 				if (result != -1l && result != ret) {
-					System.out.println("update--");
 					loadAndSaveResource(context, url, null, result, actionId);// 不返回数据到接口
 				}
 			}
@@ -382,7 +374,7 @@ private void saveCache(Context context, String url, byte[] data) {
 
 				os.close();
 				inputStream.close();
-				RequestChache.getInstance(context).update(url, lastModified);
+				RequestChacheManager.getInstance(context).update(url, lastModified);
 			} catch (FileNotFoundException e) {
 				e.printStackTrace();
 			} catch (IOException e) {
diff --git a/android-app-http/src/com/app/library/http/WebImageView.java b/android-app-http/src/com/app/library/http/UrlImageView.java
similarity index 74%
rename from android-app-http/src/com/app/library/http/WebImageView.java
rename to android-app-http/src/com/app/library/http/UrlImageView.java
index d7bcf58c..7462ed5d 100644
--- a/android-app-http/src/com/app/library/http/WebImageView.java
+++ b/android-app-http/src/com/app/library/http/UrlImageView.java
@@ -13,17 +13,17 @@
  * 
  * @author savant-pan
  */
-public class WebImageView extends ImageView {
-	private static final int DEFAULT_DRAWABLE = -1;
+public class UrlImageView extends ImageView {
+	private static final int DEFAULT_RESID = -1;
 
-	private int defaultDrawable = DEFAULT_DRAWABLE;
+	private int imageResId = DEFAULT_RESID;
 	private String imageUrl = "";
 	private boolean hasRetry = false;
 
 	/**
 	 * @param context
 	 */
-	public WebImageView(Context context) {
+	public UrlImageView(Context context) {
 		this(context, null);
 	}
 
@@ -31,7 +31,7 @@ public WebImageView(Context context) {
 	 * @param context
 	 * @param attrs
 	 */
-	public WebImageView(Context context, AttributeSet attrs) {
+	public UrlImageView(Context context, AttributeSet attrs) {
 		this(context, attrs, 0);
 	}
 
@@ -40,7 +40,7 @@ public WebImageView(Context context, AttributeSet attrs) {
 	 * @param attrs
 	 * @param defStyle
 	 */
-	public WebImageView(Context context, AttributeSet attrs, int defStyle) {
+	public UrlImageView(Context context, AttributeSet attrs, int defStyle) {
 		super(context, attrs, defStyle);
 	}
 
@@ -51,7 +51,7 @@ public WebImageView(Context context, AttributeSet attrs, int defStyle) {
 	 *            network resource address
 	 */
 	public void setURLAsync(String url) {
-		this.setURLAsync(url, DEFAULT_DRAWABLE);
+		this.setURLAsync(url, DEFAULT_RESID);
 	}
 
 	/**
@@ -59,12 +59,12 @@ public void setURLAsync(String url) {
 	 * 
 	 * @param url
 	 *            network resource address
-	 * @param defaultImage
+	 * @param imageResId
 	 *            drawable id
 	 */
-	public void setURLAsync(String url, int defaultDrawable) {
+	public void setURLAsync(String url, int imageResId) {
 		this.imageUrl = url;
-		this.defaultDrawable = defaultDrawable;
+		this.imageResId = imageResId;
 		this.firstLoad();
 	}
 
@@ -72,6 +72,7 @@ public void setURLAsync(String url, int defaultDrawable) {
 	 * first load image
 	 */
 	private void firstLoad() {
+		this.setImageResource(imageResId);
 		this.loadResource();
 	}
 
@@ -84,7 +85,7 @@ private void retryCache() {
 
 	private void loadResource() {
 		if (TextUtils.isEmpty(imageUrl)) {
-			this.setDefaultImage();
+			setImageResource(imageResId);
 		} else {
 			RequestManager.getInstance().get(getContext(), imageUrl, null, requestListener, true, 0);
 		}
@@ -107,7 +108,7 @@ public void onCompleted(byte[] data, int statusCode, String description, int act
 					hasRetry = true;
 					retryCache();
 				} else {
-					setDefaultImage();
+					setImageResource(imageResId);
 				}
 			} else {
 				if (null != data) {
@@ -133,20 +134,11 @@ public void onCompleted(byte[] data, int statusCode, String description, int act
 					if (bitmap != null) {
 						setImageBitmap(bitmap);
 					} else {
-						setDefaultImage();
+						setImageResource(imageResId);
 					}
 				}
 			}
 		}
 	};
 
-	/**
-	 * set default drawable
-	 */
-	public void setDefaultImage() {
-		if (defaultDrawable != -1) {
-			setImageDrawable(getResources().getDrawable(defaultDrawable));
-		}
-	}
-
 }
