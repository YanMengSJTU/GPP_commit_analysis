diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 65b31a31..b6f75398 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -441,7 +441,7 @@ public void post(String url, RequestParams params, AsyncHttpResponseHandler resp
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        post(context, url, paramsToEntity(params), null, responseHandler);
+        post(context, url, paramsToEntity(params,responseHandler), null, responseHandler);
     }
 
     /**
@@ -472,7 +472,7 @@ public void post(Context context, String url, HttpEntity entity, String contentT
     public void post(Context context, String url, Header[] headers, RequestParams params, String contentType,
             AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = new HttpPost(url);
-        if(params != null) request.setEntity(paramsToEntity(params));
+        if(params != null) request.setEntity(paramsToEntity(params,responseHandler));
         if(headers != null) request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, contentType,
                 responseHandler, context);
@@ -531,7 +531,7 @@ public void put(String url, RequestParams params, AsyncHttpResponseHandler respo
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        put(context, url, paramsToEntity(params), null, responseHandler);
+        put(context, url, paramsToEntity(params,responseHandler), null, responseHandler);
     }
 
     /**
@@ -636,11 +636,11 @@ public static String getUrlWithQueryString(String url, RequestParams params) {
         return url;
     }
 
-    private HttpEntity paramsToEntity(RequestParams params) {
+    private HttpEntity paramsToEntity(RequestParams params, AsyncHttpResponseHandler responseHandler) {
         HttpEntity entity = null;
 
         if(params != null) {
-            entity = params.getEntity();
+            entity = params.getEntity(responseHandler);
         }
 
         return entity;
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index a2d04a24..33825b78 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http;
 
+import android.annotation.SuppressLint;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
@@ -30,10 +31,6 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
-
 /**
  * Used to intercept and handle the responses from requests made using 
  * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
@@ -69,11 +66,13 @@
  * });
  * </pre>
  */
+@SuppressLint("HandlerLeak")
 public class AsyncHttpResponseHandler {
     protected static final int SUCCESS_MESSAGE = 0;
     protected static final int FAILURE_MESSAGE = 1;
     protected static final int START_MESSAGE = 2;
     protected static final int FINISH_MESSAGE = 3;
+    protected static final int PROGRESS_MESSAGE = 4;
 
     private Handler handler;
     
@@ -82,7 +81,7 @@
     /**
      * Creates a new AsyncHttpResponseHandler
      */
-    public AsyncHttpResponseHandler() {
+	public AsyncHttpResponseHandler() {
         // Set up a handler to post events back to the correct thread if possible
         if(Looper.myLooper() != null) {
             handler = new Handler(){
@@ -100,16 +99,9 @@ public void handleMessage(Message msg){
      */
     public AsyncHttpResponseHandler(String charset){
     	
+    	this();  	
     	this.charset = charset;
-    	
-    	if(Looper.myLooper() != null) {
-            handler = new Handler(){
-                @Override
-                public void handleMessage(Message msg){
-                    AsyncHttpResponseHandler.this.handleMessage(msg);
-                }
-            };
-        }
+  
     }
 
 
@@ -171,13 +163,16 @@ public void onFailure(Throwable error, String content) {
         onFailure(error);
     }
 
+    public void onProgress(int position, int length){
+    	
+    }
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
     protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), headers, responseBody}));
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{Integer.valueOf(statusCode), headers, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -196,6 +191,9 @@ protected void sendFinishMessage() {
         sendMessage(obtainMessage(FINISH_MESSAGE, null));
     }
 
+    protected void sendProgressMessage(int position, int length){
+    	sendMessage(obtainMessage(PROGRESS_MESSAGE, new Object[]{position, length}));
+    }
 
     //
     // Pre-processing of messages (in original calling thread, typically the UI thread)
@@ -230,6 +228,10 @@ protected void handleMessage(Message msg) {
             case FINISH_MESSAGE:
                 onFinish();
                 break;
+            case PROGRESS_MESSAGE:
+            	response = (Object[]) msg.obj;
+            	onProgress(((Integer)response[0]).intValue(), ((Integer)response[1]).intValue());
+            	break;
         }
     }
 
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index cbb0c288..26f7cc64 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -224,12 +224,13 @@ public String toString() {
 
    /**
      * Returns an HttpEntity containing all request parameters
+ * @param responseHandler 
      */
-    public HttpEntity getEntity() {
+    public HttpEntity getEntity(AsyncHttpResponseHandler progressHandler) {
         HttpEntity entity = null;
 
         if(!fileParams.isEmpty()) {
-            SimpleMultipartEntity multipartEntity = new SimpleMultipartEntity();
+            SimpleMultipartEntity multipartEntity = new SimpleMultipartEntity(progressHandler);
 
             // Add string params
             for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index 3221ec1e..25a27770 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -40,13 +40,17 @@
 class SimpleMultipartEntity implements HttpEntity {
     private final static char[] MULTIPART_CHARS = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
 
+    private final static int CHUNKSIZE = 65536;
+    
     private String boundary = null;
+    
+    private AsyncHttpResponseHandler progressHandler;
 
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     boolean isSetLast = false;
     boolean isSetFirst = false;
 
-    public SimpleMultipartEntity() {
+    public SimpleMultipartEntity(AsyncHttpResponseHandler progressHandler) {
         final StringBuffer buf = new StringBuffer();
         final Random rand = new Random();
         for (int i = 0; i < 30; i++) {
@@ -54,6 +58,7 @@ public SimpleMultipartEntity() {
         }
         this.boundary = buf.toString();
 
+        this.progressHandler = progressHandler;
     }
 
     public void writeFirstBoundaryIfNeeds(){
@@ -170,7 +175,13 @@ public boolean isStreaming() {
     @Override
     public void writeTo(final OutputStream outstream) throws IOException {
         writeLastBoundaryIfNeeds();
-        outstream.write(out.toByteArray());
+        byte[] ba = out.toByteArray();
+        for (int pos = 0; pos < ba.length; pos += CHUNKSIZE) {
+        	progressHandler.sendProgressMessage(pos, ba.length);
+        	outstream.write(ba, pos, pos + CHUNKSIZE <= ba.length ? CHUNKSIZE : ba.length - pos);
+        }
+        progressHandler.sendProgressMessage(ba.length, ba.length);
+//      outstream.write(out.toByteArray());
     }
 
     @Override
