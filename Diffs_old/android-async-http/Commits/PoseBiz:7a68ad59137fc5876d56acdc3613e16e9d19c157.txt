diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6eddad6a..25dc7995 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -23,13 +23,18 @@
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
-import org.apache.http.client.HttpResponseException;
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
+import android.content.Intent;
 import android.os.Handler;
-import android.os.Message;
 import android.os.Looper;
+import android.os.Message;
+
+import com.pose.PoseApp;
+import com.pose.SignupSplashActivity;
+import com.pose.models.User;
+import com.pose.utility.GSGlobals;
 
 /**
  * Used to intercept and handle the responses from requests made using 
@@ -73,6 +78,8 @@
     private static final int FINISH_MESSAGE = 3;
 
     private Handler handler;
+    
+    public HttpResponse mResponse;
 
     /**
      * Creates a new AsyncHttpResponseHandler
@@ -200,27 +207,62 @@ protected Message obtainMessage(int responseMessage, Object response) {
         }
         return msg;
     }
-
-
+    
     // Interface to AsyncHttpRequest
-    void sendResponseMessage(HttpResponse response) {
+    void sendResponseMessage(HttpResponse response) 
+    {
+    	mResponse = response;
         StatusLine status = response.getStatusLine();
-        String responseBody = null;
-        try {
-            HttpEntity entity = null;
-            HttpEntity temp = response.getEntity();
-            if(temp != null) {
-                entity = new BufferedHttpEntity(temp);
+        if(status.getStatusCode() >= 300) 
+        {
+            //sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()));
+            try 
+            {
+                HttpEntity entity = null;
+                HttpEntity temp = response.getEntity();
+                if(temp != null) 
+                {
+                    entity = new BufferedHttpEntity(temp);
+                }
+
+                sendFailureMessage(null, EntityUtils.toString(entity));
+            } 
+            catch(IOException e) 
+            {
+                sendFailureMessage(e, null);
             }
-            responseBody = EntityUtils.toString(entity);
-        } catch(IOException e) {
-            sendFailureMessage(e, null);
-        }
+            
+            if(status.getStatusCode() == 401)
+            {    			    			
+    			if (User.isAuthenticated())
+    			{
+    				User.signout(null);
+                    PoseApp.clearDB();
+        			Intent intentSendLogout = new Intent(GSGlobals.INTENT_POSE_LOGOUT);
+        			PoseApp.getContext().sendBroadcast(intentSendLogout);
+        			
+    				Intent intent = new Intent(PoseApp.getContext(), SignupSplashActivity.class);
+    				intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+    				PoseApp.getContext().startActivity(intent);    				    				
+    			}    			            
+            }
+        } else 
+        {
+            try 
+            {
+                HttpEntity entity = null;
+                HttpEntity temp = response.getEntity();
+                if(temp != null) 
+                {
+                    entity = new BufferedHttpEntity(temp);
+                }
 
-        if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
-        } else {
-            sendSuccessMessage(responseBody);
+                sendSuccessMessage(EntityUtils.toString(entity));
+            } 
+            catch(IOException e) 
+            {
+                sendFailureMessage(e, null);
+            }
         }
     }
 }
\ No newline at end of file
