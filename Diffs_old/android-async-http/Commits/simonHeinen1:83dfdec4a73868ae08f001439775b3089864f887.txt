diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 1c98434f..551487ce 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -14,7 +14,7 @@
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-*/
+ */
 
 package com.loopj.android.http;
 
@@ -32,199 +32,217 @@
 import android.os.Looper;
 
 /**
- * Used to intercept and handle the responses from requests made using 
- * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
- * designed to be anonymously overridden with your own response handling code.
+ * Used to intercept and handle the responses from requests made using
+ * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is designed to
+ * be anonymously overridden with your own response handling code.
  * <p>
  * Additionally, you can override the {@link #onFailure(Throwable, String)},
  * {@link #onStart()}, and {@link #onFinish()} methods as required.
  * <p>
  * For example:
  * <p>
+ * 
  * <pre>
  * AsyncHttpClient client = new AsyncHttpClient();
- * client.get("http://www.google.com", new AsyncHttpResponseHandler() {
- *     &#064;Override
- *     public void onStart() {
- *         // Initiated the request
- *     }
- *
- *     &#064;Override
- *     public void onSuccess(String response) {
- *         // Successfully got a response
- *     }
+ * client.get(&quot;http://www.google.com&quot;, new AsyncHttpResponseHandler() {
+ * 	&#064;Override
+ * 	public void onStart() {
+ * 		// Initiated the request
+ * 	}
+ * 
+ * 	&#064;Override
+ * 	public void onSuccess(String response) {
+ * 		// Successfully got a response
+ * 	}
  * 
- *     &#064;Override
- *     public void onFailure(Throwable e, String response) {
- *         // Response failed :(
- *     }
- *
- *     &#064;Override
- *     public void onFinish() {
- *         // Completed the request (either success or failure)
- *     }
+ * 	&#064;Override
+ * 	public void onFailure(Throwable e, String response) {
+ * 		// Response failed :(
+ * 	}
+ * 
+ * 	&#064;Override
+ * 	public void onFinish() {
+ * 		// Completed the request (either success or failure)
+ * 	}
  * });
  * </pre>
  */
 public class AsyncHttpResponseHandler {
-    protected static final int SUCCESS_MESSAGE = 0;
-    protected static final int FAILURE_MESSAGE = 1;
-    protected static final int START_MESSAGE = 2;
-    protected static final int FINISH_MESSAGE = 3;
-
-    private Handler handler;
-
-    /**
-     * Creates a new AsyncHttpResponseHandler
-     */
-    public AsyncHttpResponseHandler() {
-        // Set up a handler to post events back to the correct thread if possible
-        if(Looper.myLooper() != null) {
-            handler = new Handler(){
-                public void handleMessage(Message msg){
-                    AsyncHttpResponseHandler.this.handleMessage(msg);
-                }
-            };
-        }
-    }
-
-
-    //
-    // Callbacks to be overridden, typically anonymously
-    //
-
-    /**
-     * Fired when the request is started, override to handle in your own code
-     */
-    public void onStart() {}
-
-    /**
-     * Fired in all cases when the request is finished, after both success and failure, override to handle in your own code
-     */
-    public void onFinish() {}
-
-    /**
-     * Fired when a request returns successfully, override to handle in your own code
-     * @param content the body of the HTTP response from the server
-     */
-    public void onSuccess(String content) {}
-
-    /**
-     * Fired when a request fails to complete, override to handle in your own code
-     * @param error the underlying cause of the failure
-     * @deprecated use {@link #onFailure(Throwable, String)}
-     */
-    public void onFailure(Throwable error) {}
-
-    /**
-     * Fired when a request fails to complete, override to handle in your own code
-     * @param error the underlying cause of the failure
-     * @param content the response body, if any
-     */
-    public void onFailure(Throwable error, String content) {
-        // By default, call the deprecated onFailure(Throwable) for compatibility
-        onFailure(error);
-    }
-
-
-    //
-    // Pre-processing of messages (executes in background threadpool thread)
-    //
-
-    protected void sendSuccessMessage(String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
-    }
-
-    protected void sendFailureMessage(Throwable e, String responseBody) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
-    }
-    
-    protected void sendFailureMessage(Throwable e, byte[] responseBody) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
-    }
-
-    protected void sendStartMessage() {
-        sendMessage(obtainMessage(START_MESSAGE, null));
-    }
-
-    protected void sendFinishMessage() {
-        sendMessage(obtainMessage(FINISH_MESSAGE, null));
-    }
-
-
-    //
-    // Pre-processing of messages (in original calling thread, typically the UI thread)
-    //
-
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
-    }
-
-    protected void handleFailureMessage(Throwable e, String responseBody) {
-        onFailure(e, responseBody);
-    }
-
-
-
-    // Methods which emulate android's Handler and Message methods
-    protected void handleMessage(Message msg) {
-        switch(msg.what) {
-            case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
-                break;
-            case FAILURE_MESSAGE:
-                Object[] repsonse = (Object[])msg.obj;
-                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
-                break;
-            case START_MESSAGE:
-                onStart();
-                break;
-            case FINISH_MESSAGE:
-                onFinish();
-                break;
-        }
-    }
-
-    protected void sendMessage(Message msg) {
-        if(handler != null){
+	protected static final int SUCCESS_MESSAGE = 0;
+	protected static final int FAILURE_MESSAGE = 1;
+	protected static final int START_MESSAGE = 2;
+	protected static final int FINISH_MESSAGE = 3;
+
+	private Handler handler;
+
+	/**
+	 * Creates a new AsyncHttpResponseHandler
+	 */
+	public AsyncHttpResponseHandler() {
+		// Set up a handler to post events back to the correct thread if
+		// possible
+		if (Looper.myLooper() != null) {
+			handler = new Handler() {
+				public void handleMessage(Message msg) {
+					AsyncHttpResponseHandler.this.handleMessage(msg);
+				}
+			};
+		}
+		;
+	}
+
+	//
+	// Callbacks to be overridden, typically anonymously
+	//
+
+	/**
+	 * Fired when the request is started, override to handle in your own code
+	 */
+	public void onStart() {
+	}
+
+	/**
+	 * Fired in all cases when the request is finished, after both success and
+	 * failure, override to handle in your own code
+	 */
+	public void onFinish() {
+	}
+
+	/**
+	 * Fired when a request returns successfully, override to handle in your own
+	 * code
+	 * 
+	 * @param content
+	 *            the body of the HTTP response from the server
+	 */
+	public void onSuccess(String content) {
+	}
+
+	/**
+	 * Fired when a request fails to complete, override to handle in your own
+	 * code
+	 * 
+	 * @param error
+	 *            the underlying cause of the failure
+	 * @deprecated use {@link #onFailure(Throwable, String)}
+	 */
+	public void onFailure(Throwable error) {
+	}
+
+	/**
+	 * Fired when a request fails to complete, override to handle in your own
+	 * code
+	 * 
+	 * @param error
+	 *            the underlying cause of the failure
+	 * @param content
+	 *            the response body, if any
+	 */
+	public void onFailure(Throwable error, String content) {
+		// By default, call the deprecated onFailure(Throwable) for
+		// compatibility
+		onFailure(error);
+	}
+
+	//
+	// Pre-processing of messages (executes in background threadpool thread)
+	//
+
+	protected void sendSuccessMessage(String responseBody) {
+		sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+	}
+
+	protected void sendFailureMessage(Throwable e, String responseBody) {
+		sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[] { e,
+				responseBody }));
+	}
+
+	protected void sendFailureMessage(Throwable e, byte[] responseBody) {
+		sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[] { e,
+				responseBody }));
+	}
+
+	protected void sendStartMessage() {
+		sendMessage(obtainMessage(START_MESSAGE, null));
+	}
+
+	protected void sendFinishMessage() {
+		sendMessage(obtainMessage(FINISH_MESSAGE, null));
+	}
+
+	//
+	// Pre-processing of messages (in original calling thread, typically the UI
+	// thread)
+	//
+
+	protected void handleSuccessMessage(String responseBody) {
+		onSuccess(responseBody);
+	}
+
+	protected void handleFailureMessage(Throwable e, String responseBody) {
+		onFailure(e, responseBody);
+	}
+
+	// Methods which emulate android's Handler and Message methods
+	protected void handleMessage(Message msg) {
+		switch (msg.what) {
+		case SUCCESS_MESSAGE:
+			handleSuccessMessage((String) msg.obj);
+			break;
+		case FAILURE_MESSAGE:
+			Object[] repsonse = (Object[]) msg.obj;
+			handleFailureMessage((Throwable) repsonse[0], (String) repsonse[1]);
+			break;
+		case START_MESSAGE:
+			onStart();
+			break;
+		case FINISH_MESSAGE:
+			onFinish();
+			break;
+		}
+	}
+
+	protected void sendMessage(Message msg) {
+    	if(handler != null){
             handler.sendMessage(msg);
         } else {
             handleMessage(msg);
         }
     }
 
-    protected Message obtainMessage(int responseMessage, Object response) {
-        Message msg = null;
-        if(handler != null){
-            msg = this.handler.obtainMessage(responseMessage, response);
-        }else{
-            msg = new Message();
-            msg.what = responseMessage;
-            msg.obj = response;
-        }
-        return msg;
-    }
-
-
-    // Interface to AsyncHttpRequest
-    void sendResponseMessage(HttpResponse response) {
-        StatusLine status = response.getStatusLine();
-        String responseBody = null;
-        try {
-            HttpEntity entity = null;
-            HttpEntity temp = response.getEntity();
-            if(temp != null) {
-                entity = new BufferedHttpEntity(temp);
-                responseBody = EntityUtils.toString(entity, "UTF-8");
-            }
-        } catch(IOException e) {
-            sendFailureMessage(e, (String) null);
-        }
-
-        if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
-        } else {
-            sendSuccessMessage(responseBody);
-        }
-    }
+	protected Message obtainMessage(int responseMessage, Object response) {
+		Message msg = null;
+		if (handler != null) {
+			msg = this.handler.obtainMessage(responseMessage, response);
+		} else {
+			msg = new Message();
+			msg.what = responseMessage;
+			msg.obj = response;
+		}
+		return msg;
+	}
+
+	// Interface to AsyncHttpRequest
+	void sendResponseMessage(HttpResponse response) {
+		StatusLine status = response.getStatusLine();
+		String responseBody = null;
+		try {
+			HttpEntity entity = null;
+			HttpEntity temp = response.getEntity();
+			if (temp != null) {
+				entity = new BufferedHttpEntity(temp);
+				responseBody = EntityUtils.toString(entity, "UTF-8");
+			}
+		} catch (IOException e) {
+			sendFailureMessage(e, (String) null);
+		}
+
+		if (status.getStatusCode() >= 300) {
+			sendFailureMessage(new HttpResponseException(
+					status.getStatusCode(), status.getReasonPhrase()),
+					responseBody);
+		} else {
+			sendSuccessMessage(responseBody);
+		}
+	}
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 4f4e75d6..8f55991e 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -5,9 +5,10 @@
 import org.apache.http.protocol.HttpContext;
 
 import android.content.Context;
+import android.os.Message;
 
 public abstract class SyncHttpClient extends AsyncHttpClient {
-
+	private int responseCode;
 	/*
 	 * as this is a synchronous request this is just a helping mechanism to pass
 	 * the result back to this method. Therefore the result object has to be a
@@ -15,6 +16,21 @@
 	 */
 	private String result;
 	AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
+
+		void sendResponseMessage(org.apache.http.HttpResponse response) {
+			responseCode = response.getStatusLine().getStatusCode();
+			super.sendResponseMessage(response);
+		};
+
+		@Override
+		protected void sendMessage(Message msg) {
+			/*
+			 * Dont use the handler and send it directly to the analysis
+			 * (because its all the same thread)
+			 */
+			handleMessage(msg);
+		}
+
 		@Override
 		public void onSuccess(String content) {
 			result = content;
@@ -26,6 +42,14 @@ public void onFailure(Throwable error, String content) {
 		}
 	};
 
+	/**
+	 * @return the response code for the last request, might be usefull
+	 *         sometimes
+	 */
+	public int getResponseCode() {
+		return responseCode;
+	}
+
 	// Private stuff
 	protected void sendRequest(DefaultHttpClient client,
 			HttpContext httpContext, HttpUriRequest uriRequest,
@@ -40,7 +64,6 @@ protected void sendRequest(DefaultHttpClient client,
 		 */
 		new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)
 				.run();
-
 	}
 
 	public abstract String onRequestFailed(Throwable error, String content);
@@ -60,18 +83,39 @@ public String get(String url, RequestParams params) {
 		return result;
 	}
 
+	public String get(String url) {
+		this.get(url, null, responseHandler);
+		return result;
+	}
+
 	public String put(String url, RequestParams params) {
 		this.put(url, params, responseHandler);
 		return result;
 	}
 
+	public String put(String url) {
+		this.put(url, null, responseHandler);
+		return result;
+	}
+
 	public String post(String url, RequestParams params) {
 		this.post(url, params, responseHandler);
 		return result;
 	}
 
+	public String post(String url) {
+		this.post(url, null, responseHandler);
+		return result;
+	}
+
 	public String delete(String url, RequestParams params) {
 		this.delete(url, params, responseHandler);
 		return result;
 	}
+
+	public String delete(String url) {
+		this.delete(url, null, responseHandler);
+		return result;
+	}
+
 }
