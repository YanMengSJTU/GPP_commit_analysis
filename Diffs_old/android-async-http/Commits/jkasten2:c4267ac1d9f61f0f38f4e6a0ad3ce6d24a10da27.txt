diff --git a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
index 63648a15..2a17edba 100755
--- a/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -113,12 +113,12 @@ public void onSuccess(int statusCode, Header[] headers, String responseString) {
     @Override
     public final void onSuccess(final int statusCode, final Header[] headers, final byte[] responseBytes) {
         if (statusCode != HttpStatus.SC_NO_CONTENT) {
-	    Runnable parser = new Runnable() {
+		    Runnable parser = new Runnable() {
                 @Override
                 public void run() {
                     try {
                         final Object jsonResponse = parseResponse(responseBytes);
-                        postRunnable(new Runnable() {
+                        Runnable successRunable = new Runnable() {
                             @Override
                             public void run() {
                                 if (jsonResponse instanceof JSONObject) {
@@ -132,21 +132,30 @@ public void run() {
                                 }
 
                             }
-                        });
+                        };
+                        if (!getUseSynchronousMode())
+                        	postRunnable(successRunable);
+                        else
+                        	successRunable.run();
                     } catch (final JSONException ex) {
-                        postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
+                    	Runnable failureRunable = new Runnable() {
+                    		 @Override
+	                         public void run() {
                                 onFailure(statusCode, headers, ex, (JSONObject) null);
                             }
-                        });
+                        };
+                        if (!getUseSynchronousMode())
+                        	postRunnable(failureRunable);
+                        else
+                        	failureRunable.run();
                     }
                 }
-	    };
-	    if (!getUseSynchronousMode())
-		new Thread(parser).start();
-	    else // In synchronous mode everything should be run on one thread
-		parser.run();
+		    };
+		    if (!getUseSynchronousMode())
+		    	new Thread(parser).start();
+		    else { // In synchronous mode everything should be run on one thread
+		    	parser.run();
+		    }
         } else {
             onSuccess(statusCode, headers, new JSONObject());
         }
@@ -155,12 +164,12 @@ public void run() {
     @Override
     public final void onFailure(final int statusCode, final Header[] headers, final byte[] responseBytes, final Throwable throwable) {
         if (responseBytes != null) {
-	    Runnable parser = new Runnable() {
+		    Runnable parser = new Runnable() {
                 @Override
                 public void run() {
                     try {
                         final Object jsonResponse = parseResponse(responseBytes);
-                        postRunnable(new Runnable() {
+                        Runnable failureRunnable = new Runnable() {
                             @Override
                             public void run() {
                                 if (jsonResponse instanceof JSONObject) {
@@ -173,23 +182,32 @@ public void run() {
                                     onFailure(statusCode, headers, new JSONException("Unexpected response type " + jsonResponse.getClass().getName()), (JSONObject) null);
                                 }
                             }
-                        });
+                        };
+                        
+                        if (!getUseSynchronousMode())
+                        	postRunnable(failureRunnable);
+                        else
+                        	failureRunnable.run();
 
                     } catch (final JSONException ex) {
-                        postRunnable(new Runnable() {
+                    	Runnable failureRunnable = new Runnable() {
                             @Override
                             public void run() {
                                 onFailure(statusCode, headers, ex, (JSONObject) null);
                             }
-                        });
-
+                        };
+                        
+                        if (!getUseSynchronousMode())
+                        	postRunnable(failureRunnable);
+                        else
+                        	failureRunnable.run();
                     }
                 }
-	    };
+		    };
 	    if (!getUseSynchronousMode())
-		new Thread(parser).start();
+	    	new Thread(parser).start();
 	    else // In synchronous mode everything should be run on one thread
-		parser.run();
+	    	parser.run();
         } else {
             Log.v(LOG_TAG, "response body is null, calling onFailure(Throwable, JSONObject)");
             onFailure(statusCode, headers, throwable, (JSONObject) null);
