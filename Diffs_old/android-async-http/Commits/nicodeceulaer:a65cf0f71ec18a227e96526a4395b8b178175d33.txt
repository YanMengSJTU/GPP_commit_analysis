diff --git a/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java b/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
index d2e734f4..27a38003 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
@@ -20,6 +20,10 @@
 
 import android.os.Bundle;
 
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.Toast;
+
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
@@ -33,13 +37,44 @@
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.client.CookieStore;
+import org.apache.http.client.HttpClient;
+import org.apache.http.impl.client.DefaultHttpClient;
 
-public class PersistentCookiesSample extends SampleParentActivity {
+import java.net.CookieManager;
+import java.net.CookieHandler;
+import java.net.CookiePolicy;
 
+public class PersistentCookiesSample extends SampleParentActivity {
+    private boolean enableCookies = true;
+    private boolean cookies_were_enabled = true;
     private static final String LOG_TAG = "PersistentCookiesSample";
 
     private CookieStore cookieStore;
 
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(Menu.NONE, 0, Menu.NONE, "Enable cookies").setCheckable(true);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        MenuItem menuItemEnableCookies = menu.findItem(0);
+        if (menuItemEnableCookies != null)
+            menuItemEnableCookies.setChecked(enableCookies);
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.isCheckable()) {
+            item.setChecked(!item.isChecked());
+            if (item.getItemId() == 0) {
+                enableCookies = item.isChecked();
+            }
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         // Use the application's context so that memory leakage doesn't occur.
@@ -79,6 +114,40 @@ public String getDefaultURL() {
         return url;
     }
 
+    @Override
+    public AsyncHttpClient getAsyncHttpClient() {
+        AsyncHttpClient ahc = super.getAsyncHttpClient();
+        HttpClient client = ahc.getHttpClient();
+        if (client instanceof DefaultHttpClient) {
+            if(enableCookies)
+            {
+                if(!cookies_were_enabled)
+                {
+                    Toast.makeText(this, String.format("Cookies disabled -> enabled"), Toast.LENGTH_SHORT).show();
+
+                    cookieStore.clear();  // get rid of old cookies
+
+                    CookieManager manager = new CookieManager(CookiePolicy.ACCEPT_ALL, cookieStore);
+                    CookieHandler.setDefault(manager);
+                }
+            }
+            else
+            { 
+                if(cookies_were_enabled)
+                {
+                    Toast.makeText(this, String.format("Cookies enabled -> disabled"), Toast.LENGTH_SHORT).show();
+
+                    cookieStore.clear();  // get rid of old cookies
+
+                    CookieManager manager = new CookieManager(CookiePolicy.ACCEPT_NONE, cookieStore);
+                    CookieHandler.setDefault(manager);
+                }
+            }
+            cookies_were_enabled = enableCookies;
+        }
+        return ahc;
+    }
+
     @Override
     public ResponseHandlerInterface getResponseHandler() {
         return new BaseJsonHttpResponseHandler<SampleJSON>() {
