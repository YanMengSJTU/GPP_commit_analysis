diff --git a/releases/android-async-http-1.2.0.jar b/releases/android-async-http-1.2.0.jar
deleted file mode 100644
index 3fd4789b..00000000
Binary files a/releases/android-async-http-1.2.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.2.1.jar b/releases/android-async-http-1.2.1.jar
deleted file mode 100644
index 4db7cf11..00000000
Binary files a/releases/android-async-http-1.2.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.0.jar b/releases/android-async-http-1.3.0.jar
deleted file mode 100644
index faebdf0f..00000000
Binary files a/releases/android-async-http-1.3.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.1.jar b/releases/android-async-http-1.3.1.jar
deleted file mode 100644
index 107b032d..00000000
Binary files a/releases/android-async-http-1.3.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.2.jar b/releases/android-async-http-1.3.2.jar
deleted file mode 100644
index 0af40632..00000000
Binary files a/releases/android-async-http-1.3.2.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.0.jar b/releases/android-async-http-1.4.0.jar
deleted file mode 100644
index 2109150d..00000000
Binary files a/releases/android-async-http-1.4.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.1.jar b/releases/android-async-http-1.4.1.jar
deleted file mode 100644
index 551f5fbf..00000000
Binary files a/releases/android-async-http-1.4.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.2.jar b/releases/android-async-http-1.4.2.jar
deleted file mode 100644
index 1c568cb9..00000000
Binary files a/releases/android-async-http-1.4.2.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.3.jar b/releases/android-async-http-1.4.3.jar
deleted file mode 100644
index 3a749a59..00000000
Binary files a/releases/android-async-http-1.4.3.jar and /dev/null differ
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
old mode 100644
new mode 100755
index 5f0750d7..89ffa5b0
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -389,7 +389,8 @@ public void post(String url, RequestParams params, AsyncHttpResponseHandler resp
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        post(context, url, paramsToEntity(params), null, responseHandler);
+//        post(context, url, paramsToEntity(params), null, responseHandler);
+    	post(context, url, paramsToEntity(params, responseHandler), null, responseHandler);
     }
 
     /**
@@ -420,7 +421,8 @@ public void post(Context context, String url, HttpEntity entity, String contentT
     public void post(Context context, String url, Header[] headers, RequestParams params, String contentType,
             AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = new HttpPost(url);
-        if(params != null) request.setEntity(paramsToEntity(params));
+//        if(params != null) request.setEntity(paramsToEntity(params));
+        if(params != null) request.setEntity(paramsToEntity(params, responseHandler));
         if(headers != null) request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, contentType,
                 responseHandler, context);
@@ -479,7 +481,8 @@ public void put(String url, RequestParams params, AsyncHttpResponseHandler respo
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        put(context, url, paramsToEntity(params), null, responseHandler);
+//        put(context, url, paramsToEntity(params), null, responseHandler);
+    	put(context, url, paramsToEntity(params, responseHandler), null, responseHandler);
     }
 
     /**
@@ -584,11 +587,13 @@ public static String getUrlWithQueryString(String url, RequestParams params) {
         return url;
     }
 
-    private HttpEntity paramsToEntity(RequestParams params) {
+//    private HttpEntity paramsToEntity(RequestParams params) {
+	private HttpEntity paramsToEntity(RequestParams params, AsyncHttpResponseHandler responseHandler) {
         HttpEntity entity = null;
 
         if(params != null) {
-            entity = params.getEntity();
+//            entity = params.getEntity();
+            entity = params.getEntity(responseHandler);
         }
 
         return entity;
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
old mode 100644
new mode 100755
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
old mode 100644
new mode 100755
index 2030265f..74081563
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -74,6 +74,7 @@
     protected static final int FAILURE_MESSAGE = 1;
     protected static final int START_MESSAGE = 2;
     protected static final int FINISH_MESSAGE = 3;
+    protected static final int PROGRESS_MESSAGE = 4;
 
     private Handler handler;
 
@@ -151,6 +152,10 @@ public void onFailure(Throwable error, String content) {
         onFailure(error);
     }
 
+    /**
+    * Fired when the request progress, override to handle in your own code
+    */
+    public void onProgress(int position, int length) {}
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
@@ -175,6 +180,10 @@ protected void sendStartMessage() {
     protected void sendFinishMessage() {
         sendMessage(obtainMessage(FINISH_MESSAGE, null));
     }
+    
+    protected void sendProgressMessage(int position, int length) {
+    	sendMessage(obtainMessage(PROGRESS_MESSAGE, new Object[]{position, length}));
+    }
 
 
     //
@@ -210,6 +219,10 @@ protected void handleMessage(Message msg) {
             case FINISH_MESSAGE:
                 onFinish();
                 break;
+            case PROGRESS_MESSAGE:
+            	response = (Object[])msg.obj;
+            	onProgress(((Integer)response[0]).intValue(), ((Integer)response[1]).intValue());
+            	break;
         }
     }
 
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
old mode 100644
new mode 100755
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
old mode 100644
new mode 100755
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
old mode 100644
new mode 100755
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
old mode 100644
new mode 100755
index 758fa984..d1deb1c5
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -142,22 +142,6 @@ public void put(String key, ArrayList<String> values)  {
         }
     }
 
-    /**
-     * Adds value to param which can have more than one value.
-     * @param key the key name for the param, either existing or new.
-     * @param value the value string for the new param.
-     */
-    public void add(String key, String value) {
-        if(key != null && value != null) {
-            ArrayList<String> paramArray = urlParamsWithArray.get(key);
-            if (paramArray == null) {
-                paramArray = new ArrayList<String>();
-                this.put(key, paramArray);
-            }
-            paramArray.add(value);
-        }
-    }
-
     /**
      * Adds an input stream to the request.
      * @param key the key name for the new param.
@@ -240,12 +224,15 @@ public String toString() {
 
    /**
      * Returns an HttpEntity containing all request parameters
+     * @param progressHandler
      */
-    public HttpEntity getEntity() {
+//    public HttpEntity getEntity() {
+    public HttpEntity getEntity(AsyncHttpResponseHandler progressHandler) {
         HttpEntity entity = null;
 
         if(!fileParams.isEmpty()) {
-            SimpleMultipartEntity multipartEntity = new SimpleMultipartEntity();
+//            SimpleMultipartEntity multipartEntity = new SimpleMultipartEntity();
+        	SimpleMultipartEntity multipartEntity = new SimpleMultipartEntity(progressHandler);
 
             // Add string params
             for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
old mode 100644
new mode 100755
diff --git a/src/com/loopj/android/http/SerializableCookie.java b/src/com/loopj/android/http/SerializableCookie.java
old mode 100644
new mode 100755
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
old mode 100644
new mode 100755
index 3221ec1e..14226e18
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -40,20 +40,25 @@
 class SimpleMultipartEntity implements HttpEntity {
     private final static char[] MULTIPART_CHARS = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
 
+    private final static int CHUNKSIZE = 65536;
+    
     private String boundary = null;
+    
+    private AsyncHttpResponseHandler progressHandler;
 
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     boolean isSetLast = false;
     boolean isSetFirst = false;
 
-    public SimpleMultipartEntity() {
+//    public SimpleMultipartEntity() {
+	public SimpleMultipartEntity(AsyncHttpResponseHandler progressHandler) {    	
         final StringBuffer buf = new StringBuffer();
         final Random rand = new Random();
         for (int i = 0; i < 30; i++) {
             buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);
         }
         this.boundary = buf.toString();
-
+        this.progressHandler = progressHandler;
     }
 
     public void writeFirstBoundaryIfNeeds(){
@@ -170,7 +175,14 @@ public boolean isStreaming() {
     @Override
     public void writeTo(final OutputStream outstream) throws IOException {
         writeLastBoundaryIfNeeds();
-        outstream.write(out.toByteArray());
+
+        byte[] ba = out.toByteArray();
+        for (int pos = 0; pos < ba.length; pos += CHUNKSIZE) {
+        	progressHandler.sendProgressMessage(pos, ba.length);
+        	outstream.write(ba, pos, pos + CHUNKSIZE <= ba.length ? CHUNKSIZE : ba.length - pos);
+        }
+        progressHandler.sendProgressMessage(ba.length, ba.length);
+//        outstream.write(out.toByteArray());
     }
 
     @Override
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
old mode 100644
new mode 100755
