diff --git a/.gitignore b/.gitignore
index 0900c481..ff8a6e53 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,6 @@
 _site
 MANIFEST.MF
-*.jar
+./*.jar
 build.num
 build
 local.properties
diff --git a/build.xml b/build.xml
index 68e867a1..1cd94b37 100644
--- a/build.xml
+++ b/build.xml
@@ -17,7 +17,6 @@
         
         <exec executable="git" outputproperty="package.versionname">
           <arg value="describe"/>
-          <arg value='--match=${package.name}-*'/>
           <arg value="--tags"/>
           <arg value="--dirty"/>
           <arg value="--always"/>
@@ -26,7 +25,19 @@
     </target>
 
     <!-- Standard jar stuff -->
-    <property name="lib.dir" value="${sdk.dir}/platforms/${target}" />
+    <property environment="env"/>
+    <condition property="android.base" value="${sdk.dir}" else="${env.ANDROID_HOME}">
+      <isset property="sdk.dir" />
+    </condition>
+    <fail message="Please set either the sdk.dir property or the ANDROID_HOME environment variable to point to your Android SDK installation.">
+      <condition>
+        <not>
+          <available file="${android.base}" type="dir"/>
+        </not>
+      </condition>
+    </fail>
+
+    <property name="lib.dir" value="${android.base}/platforms/${target}" />
     <property name="build.dir" value="./build"/>
     <property name="classes.dir"  value="${build.dir}/classes"/>
     <buildnumber file="build.num" />
@@ -43,7 +54,7 @@
             sourcepath="gen:src"
             destdir="doc"
             packagenames="${package.packagename}"
-            linkoffline="http://d.android.com/reference ${sdk.dir}/docs/reference" 
+            linkoffline="http://d.android.com/reference ${android.base}/docs/reference" 
             additionalparam="-author  -version"
             />
     </target>
@@ -55,7 +66,7 @@
 
         <javac
             includeantruntime="false"
-            srcdir="."
+            srcdir="src"
             destdir="${classes.dir}"
             classpathref="classpath"
             debug="true"
@@ -64,14 +75,12 @@
 
     <!-- Package a jar from compiled class files -->
     <target name="jar" depends="git-details,compile">
-        <delete dir="." includes="**/*.jar" />
-        <delete file="MANIFEST.MF" />
         <manifest file="MANIFEST.MF">
             <attribute name="Built-By" value="${user.name}" />
             <attribute name="Implementation-Version" value="${package.versionname}"/> 
         </manifest>
 
-        <jar destfile="${package.versionname}.jar" basedir="build/classes" includes="com/loopj/android/http/**/*.class" manifest="MANIFEST.MF" />
+        <jar destfile="${package.name}-${package.versionname}.jar" basedir="build/classes" includes="com/loopj/android/http/**/*.class" manifest="MANIFEST.MF" />
     </target>
 
     <!-- Clean out the build files -->
diff --git a/examples/TwitterRestClient.java b/examples/TwitterRestClient.java
index f55708cf..387a8711 100644
--- a/examples/TwitterRestClient.java
+++ b/examples/TwitterRestClient.java
@@ -12,7 +12,7 @@ public static void get(String url, RequestParams params, AsyncHttpResponseHandle
     }
 
     public static void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.get(getAbsoluteUrl(url), params, responseHandler);
+        client.post(getAbsoluteUrl(url), params, responseHandler);
     }
 
     private static String getAbsoluteUrl(String relativeUrl) {
diff --git a/local.properties.dist b/local.properties.dist
deleted file mode 100644
index 5ecd58e1..00000000
--- a/local.properties.dist
+++ /dev/null
@@ -1 +0,0 @@
-sdk.dir=/usr/local/android_sdk/
\ No newline at end of file
diff --git a/releases/android-async-http-1.2.0.jar b/releases/android-async-http-1.2.0.jar
new file mode 100644
index 00000000..3fd4789b
Binary files /dev/null and b/releases/android-async-http-1.2.0.jar differ
diff --git a/releases/android-async-http-1.2.1.jar b/releases/android-async-http-1.2.1.jar
new file mode 100644
index 00000000..4db7cf11
Binary files /dev/null and b/releases/android-async-http-1.2.1.jar differ
diff --git a/releases/android-async-http-1.3.0.jar b/releases/android-async-http-1.3.0.jar
new file mode 100644
index 00000000..faebdf0f
Binary files /dev/null and b/releases/android-async-http-1.3.0.jar differ
diff --git a/releases/android-async-http-1.3.1.jar b/releases/android-async-http-1.3.1.jar
new file mode 100644
index 00000000..107b032d
Binary files /dev/null and b/releases/android-async-http-1.3.1.jar differ
diff --git a/releases/android-async-http-1.3.2.jar b/releases/android-async-http-1.3.2.jar
new file mode 100644
index 00000000..0af40632
Binary files /dev/null and b/releases/android-async-http-1.3.2.jar differ
diff --git a/releases/android-async-http-1.4.0.jar b/releases/android-async-http-1.4.0.jar
new file mode 100644
index 00000000..2109150d
Binary files /dev/null and b/releases/android-async-http-1.4.0.jar differ
diff --git a/releases/android-async-http-1.4.1.jar b/releases/android-async-http-1.4.1.jar
new file mode 100644
index 00000000..551f5fbf
Binary files /dev/null and b/releases/android-async-http-1.4.1.jar differ
diff --git a/releases/android-async-http-1.4.2.jar b/releases/android-async-http-1.4.2.jar
new file mode 100644
index 00000000..1c568cb9
Binary files /dev/null and b/releases/android-async-http-1.4.2.jar differ
diff --git a/releases/android-async-http-1.4.3.jar b/releases/android-async-http-1.4.3.jar
new file mode 100644
index 00000000..3a749a59
Binary files /dev/null and b/releases/android-async-http-1.4.3.jar differ
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 8fc4c98d..833982a3 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -578,10 +578,14 @@ protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, Ht
         }
     }
 
-    private String getUrlWithQueryString(String url, RequestParams params) {
+    public static String getUrlWithQueryString(String url, RequestParams params) {
         if(params != null) {
             String paramString = params.getParamString();
-            url += "?" + paramString;
+            if (url.indexOf("?") == -1) {
+                url += "?" + paramString;
+            } else {
+                url += "&" + paramString;
+            }
         }
 
         return url;
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 8832be0c..0bfbccf7 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -20,6 +20,8 @@
 
 import java.io.IOException;
 import java.net.ConnectException;
+import java.net.SocketException;
+import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
 
 import org.apache.http.HttpResponse;
@@ -92,11 +94,22 @@ private void makeRequestWithRetries() throws ConnectException {
             try {
                 makeRequest();
                 return;
-	    } catch (UnknownHostException e) {
-	        if(responseHandler != null) {
-	            responseHandler.sendFailureMessage(e, "can't resolve host");
-		}
-		return;
+            } catch (UnknownHostException e) {
+		        if(responseHandler != null) {
+		            responseHandler.sendFailureMessage(e, "can't resolve host");
+		        }
+	        	return;
+            }catch (SocketException e){
+                // Added to detect host unreachable
+                if(responseHandler != null) {
+                    responseHandler.sendFailureMessage(e, "can't resolve host");
+                }
+                return;
+            }catch (SocketTimeoutException e){
+                if(responseHandler != null) {
+                    responseHandler.sendFailureMessage(e, "socket time out");
+                }
+                return;
             } catch (IOException e) {
                 cause = e;
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 1c98434f..86fbdec9 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,8 +18,9 @@
 
 package com.loopj.android.http;
 
-import java.io.IOException;
-
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -27,9 +28,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Message;
-import android.os.Looper;
+import java.io.IOException;
 
 /**
  * Used to intercept and handle the responses from requests made using 
@@ -109,6 +108,15 @@ public void onFinish() {}
      */
     public void onSuccess(String content) {}
 
+    /**
+     * Fired when a request returns successfully, override to handle in your own code
+     * @param statusCode the status code of the response
+     * @param content the body of the HTTP response from the server
+     */
+    public void onSuccess(int statusCode, String content) {
+        onSuccess(content);
+    }
+
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
@@ -131,8 +139,8 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(int statusCode, String responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -156,8 +164,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(int statusCode, String responseBody) {
+        onSuccess(statusCode, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -168,13 +176,16 @@ protected void handleFailureMessage(Throwable e, String responseBody) {
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+        Object[] response;
+
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
+                response = (Object[])msg.obj;
+                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1]);
                 break;
             case FAILURE_MESSAGE:
-                Object[] repsonse = (Object[])msg.obj;
-                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
+                response = (Object[])msg.obj;
+                handleFailureMessage((Throwable)response[0], (String)response[1]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -198,14 +209,13 @@ protected Message obtainMessage(int responseMessage, Object response) {
         if(handler != null){
             msg = this.handler.obtainMessage(responseMessage, response);
         }else{
-            msg = new Message();
+            msg = Message.obtain();
             msg.what = responseMessage;
             msg.obj = response;
         }
         return msg;
     }
 
-
     // Interface to AsyncHttpRequest
     void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
@@ -224,7 +234,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(status.getStatusCode(), responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 967f632e..aff1c631 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -18,8 +18,7 @@
 
 package com.loopj.android.http;
 
-import java.io.IOException;
-
+import android.os.Message;
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -28,9 +27,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Message;
-import android.os.Looper;
+import java.io.IOException;
 
 /**
  * Used to intercept and handle the responses from requests made using
@@ -86,14 +83,24 @@ public BinaryHttpResponseHandler(String[] allowedContentTypes) {
 
     /**
      * Fired when a request returns successfully, override to handle in your own code
-     * @param content the body of the HTTP response from the server
+     * @param binaryData the body of the HTTP response from the server
      */
     public void onSuccess(byte[] binaryData) {}
 
+    /**
+     * Fired when a request returns successfully, override to handle in your own code
+     * @param statusCode the status code of the response
+     * @param binaryData the body of the HTTP response from the server
+     */
+    public void onSuccess(int statusCode, byte[] binaryData) {
+        onSuccess(binaryData);
+    }
+
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
-     * @param content the response body, if any
+     * @param binaryData the response body, if any
+     * @deprecated
      */
     public void onFailure(Throwable error, byte[] binaryData) {
         // By default, call the deprecated onFailure(Throwable) for compatibility
@@ -105,8 +112,8 @@ public void onFailure(Throwable error, byte[] binaryData) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(byte[] responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(int statusCode, byte[] responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{statusCode, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, byte[] responseBody) {
@@ -117,8 +124,8 @@ protected void sendFailureMessage(Throwable e, byte[] responseBody) {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(byte[] responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(int statusCode, byte[] responseBody) {
+        onSuccess(statusCode, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, byte[] responseBody) {
@@ -127,12 +134,14 @@ protected void handleFailureMessage(Throwable e, byte[] responseBody) {
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+        Object[] response;
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((byte[])msg.obj);
+                response = (Object[])msg.obj;
+                handleSuccessMessage(((Integer) response[0]).intValue() , (byte[]) response[1]);
                 break;
             case FAILURE_MESSAGE:
-                Object[] response = (Object[])msg.obj;
+                response = (Object[])msg.obj;
                 handleFailureMessage((Throwable)response[0], (byte[])response[1]);
                 break;
             default:
@@ -177,7 +186,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(status.getStatusCode(), responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 8cdd4ffb..084bf339 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http;
 
+import org.apache.http.HttpStatus;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -61,6 +62,29 @@ public void onSuccess(JSONObject response) {}
      */
     public void onSuccess(JSONArray response) {}
 
+    /**
+     * Fired when a request returns successfully and contains a json object
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param response the parsed json object found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, JSONObject response) {
+        onSuccess(response);
+    }
+
+
+    /**
+     * Fired when a request returns successfully and contains a json array
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param response the parsed json array found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, JSONArray response) {
+        onSuccess(response);
+    }
+
     public void onFailure(Throwable e, JSONObject errorResponse) {}
     public void onFailure(Throwable e, JSONArray errorResponse) {}
 
@@ -70,13 +94,17 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
     //
 
     @Override
-    protected void sendSuccessMessage(String responseBody) {
-        try {
-            Object jsonResponse = parseResponse(responseBody);
-            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, jsonResponse));
-        } catch(JSONException e) {
-            sendFailureMessage(e, responseBody);
-        }
+    protected void sendSuccessMessage(int statusCode, String responseBody) {
+    	if (statusCode != HttpStatus.SC_NO_CONTENT){
+	        try {
+	            Object jsonResponse = parseResponse(responseBody);
+	            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse}));
+	        } catch(JSONException e) {
+	            sendFailureMessage(e, responseBody);
+	        }
+    	}else{
+    		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
+    	}
     }
 
 
@@ -88,31 +116,35 @@ protected void sendSuccessMessage(String responseBody) {
     protected void handleMessage(Message msg) {
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
-                handleSuccessJsonMessage(msg.obj);
+                Object[] response = (Object[]) msg.obj;
+                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1]);
                 break;
             default:
                 super.handleMessage(msg);
         }
     }
 
-    protected void handleSuccessJsonMessage(Object jsonResponse) {
+    protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse) {
         if(jsonResponse instanceof JSONObject) {
-            onSuccess((JSONObject)jsonResponse);
+            onSuccess(statusCode, (JSONObject)jsonResponse);
         } else if(jsonResponse instanceof JSONArray) {
-            onSuccess((JSONArray)jsonResponse);
+            onSuccess(statusCode, (JSONArray)jsonResponse);
         } else {
-            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()));
+            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
     }
 
     protected Object parseResponse(String responseBody) throws JSONException {
         Object result = null;
         //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If Json is not valid this will return null
-	responseBody = responseBody.trim();
-	if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
-	    result = new JSONTokener(responseBody).nextValue();
-	}
-	return result;
+		responseBody = responseBody.trim();
+		if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
+			result = new JSONTokener(responseBody).nextValue();
+		}
+		if (result == null) {
+			result = responseBody;
+		}
+		return result;
     }
 
     @Override
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 94076682..3f98a00b 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -80,7 +80,7 @@ public PersistentCookieStore(Context context) {
 
     @Override
     public void addCookie(Cookie cookie) {
-        String name = cookie.getName();
+        String name = cookie.getName() + cookie.getDomain();
 
         // Save cookie into local store, or remove if expired
         if(!cookie.isExpired(new Date())) {
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 2c80e35c..cf5d1dc4 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -23,6 +23,7 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -57,6 +58,7 @@
 
     protected ConcurrentHashMap<String, String> urlParams;
     protected ConcurrentHashMap<String, FileWrapper> fileParams;
+    protected ConcurrentHashMap<String, ArrayList<String>> urlParamsWithArray;
 
     /**
      * Constructs a new empty <code>RequestParams</code> instance.
@@ -90,6 +92,25 @@ public RequestParams(String key, String value) {
         put(key, value);
     }
 
+    /**
+     * Constructs a new RequestParams instance and populate it with multiple
+     * initial key/value string param.
+     * @param keysAndValues a sequence of keys and values. Objects are
+     * automatically converted to Strings (including the value {@code null}).
+     * @throws IllegalArgumentException if the number of arguments isn't even.
+     */
+    public RequestParams(Object... keysAndValues) {
+      init();
+      int len = keysAndValues.length;
+      if (len % 2 != 0)
+        throw new IllegalArgumentException("Supplied arguments must be even");
+      for (int i = 0; i < len; i += 2) {
+        String key = String.valueOf(keysAndValues[i]);
+        String val = String.valueOf(keysAndValues[i + 1]);
+        put(key, val);
+      }
+    }
+
     /**
      * Adds a key/value string pair to the request.
      * @param key the key name for the new param.
@@ -110,6 +131,17 @@ public void put(String key, File file) throws FileNotFoundException {
         put(key, new FileInputStream(file), file.getName());
     }
 
+    /**
+     * Adds param with more than one value.
+     * @param key the key name for the new param.
+     * @param values is the ArrayList with values for the param.
+     */
+    public void put(String key, ArrayList<String> values)  {
+        if(key != null && values != null) {
+            urlParamsWithArray.put(key, values);
+        }
+    }
+
     /**
      * Adds an input stream to the request.
      * @param key the key name for the new param.
@@ -149,6 +181,7 @@ public void put(String key, InputStream stream, String fileName, String contentT
     public void remove(String key){
         urlParams.remove(key);
         fileParams.remove(key);
+        urlParamsWithArray.remove(key);
     }
 
     @Override
@@ -172,6 +205,20 @@ public String toString() {
             result.append("FILE");
         }
 
+        for(ConcurrentHashMap.Entry<String, ArrayList<String>> entry : urlParamsWithArray.entrySet()) {
+            if(result.length() > 0)
+                result.append("&");
+
+            ArrayList<String> values = entry.getValue();
+            for (String value : values) {
+                if (values.indexOf(value) != 0)
+                    result.append("&");
+                result.append(entry.getKey());
+                result.append("=");
+                result.append(value);
+            }
+        }
+
         return result.toString();
     }
 
@@ -189,6 +236,14 @@ public HttpEntity getEntity() {
                 multipartEntity.addPart(entry.getKey(), entry.getValue());
             }
 
+            // Add dupe params
+            for(ConcurrentHashMap.Entry<String, ArrayList<String>> entry : urlParamsWithArray.entrySet()) {
+                ArrayList<String> values = entry.getValue();
+                for (String value : values) {
+                    multipartEntity.addPart(entry.getKey(), value);
+                }
+            }
+
             // Add file params
             int currentIndex = 0;
             int lastIndex = fileParams.entrySet().size() - 1;
@@ -220,6 +275,7 @@ public HttpEntity getEntity() {
     private void init(){
         urlParams = new ConcurrentHashMap<String, String>();
         fileParams = new ConcurrentHashMap<String, FileWrapper>();
+        urlParamsWithArray = new ConcurrentHashMap<String, ArrayList<String>>();
     }
 
     protected List<BasicNameValuePair> getParamsList() {
@@ -229,6 +285,13 @@ private void init(){
             lparams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
         }
 
+        for(ConcurrentHashMap.Entry<String, ArrayList<String>> entry : urlParamsWithArray.entrySet()) {
+            ArrayList<String> values = entry.getValue();
+            for (String value : values) {
+                lparams.add(new BasicNameValuePair(entry.getKey(), value));
+            }
+        }
+
         return lparams;
     }
 
@@ -255,4 +318,4 @@ public String getFileName() {
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 32816c61..2cc97e82 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -29,12 +29,13 @@
 import java.net.SocketException;
 import java.net.UnknownHostException;
 import java.util.HashSet;
+import java.util.Iterator;
 
-import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLException;
 
 import org.apache.http.NoHttpResponseException;
-import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.HttpRequestRetryHandler;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.protocol.ExecutionContext;
 import org.apache.http.protocol.HttpContext;
 
@@ -61,7 +62,7 @@
         // never retry timeouts
         exceptionBlacklist.add(InterruptedIOException.class);
         // never retry SSL handshake failures
-        exceptionBlacklist.add(SSLHandshakeException.class);
+        exceptionBlacklist.add(SSLException.class);
     }
 
     private final int maxRetries;
@@ -71,7 +72,7 @@ public RetryHandler(int maxRetries) {
     }
 
     public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
-        boolean retry;
+        boolean retry = true;
 
         Boolean b = (Boolean) context.getAttribute(ExecutionContext.HTTP_REQ_SENT);
         boolean sent = (b != null && b.booleanValue());
@@ -81,25 +82,22 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
             // Do not retry if over max retry count
             retry = false;
             Log.d(LOG_TAG, "maxRetries!");
-        } else if (exceptionBlacklist.contains(exception.getClass())) {
+        } else if (isInList(exceptionBlacklist, exception)) {
             // immediately cancel retry if the error is blacklisted
             retry = false;
-        } else if (exceptionWhitelist.contains(exception.getClass())) {
+        } else if (isInList(exceptionWhitelist, exception)) {
             // immediately retry if error is whitelisted
             retry = true;
         } else if (!sent) {
             // for most other errors, retry only if request hasn't been fully sent yet
         	retry = true;
-        } else {
+        }
+
+        if(retry) {
             // resend all idempotent requests
-        	HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
+            HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute( ExecutionContext.HTTP_REQUEST );
             String requestType = currentReq.getMethod();
-            if(!requestType.equals("POST")) {
-                retry = true;
-            } else {
-                // otherwise do not retry
-                retry = false;
-            }
+            retry = !requestType.equals("POST");
         }
 
         if(retry) {
@@ -110,4 +108,14 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         
         return retry;
     }
+    
+    protected boolean isInList(HashSet<Class<?>> list, Throwable error) {
+    	Iterator<Class<?>> itr = list.iterator();
+    	while (itr.hasNext()) {
+    		if (itr.next().isInstance(error)) {
+    			return true;
+    		}
+    	}
+    	return false;
+    }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 277b2c84..8f55991e 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -63,7 +63,7 @@ protected void sendRequest(DefaultHttpClient client,
 		 * will execute the request directly
 		 */
 		new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)
-		.run();
+				.run();
 	}
 
 	public abstract String onRequestFailed(Throwable error, String content);
