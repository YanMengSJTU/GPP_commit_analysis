diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 93724b22..5d843ae8 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -56,7 +56,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(e);
+                responseHandler.sendFailureMessage(null, e);
             }
         }
     }
@@ -95,4 +95,4 @@ private void makeRequestWithRetries() throws ConnectException {
         ex.initCause(cause);
         throw ex;
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index b1735306..ba6a030f 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -115,6 +115,12 @@ public void onSuccess(String content) {}
      */
     public void onFailure(Throwable error) {}
 
+    /**
+     * Fired when a request fails to complete, override to handle in your own code
+     * @param error the underlying cause of the failure
+     * @param the actual response body
+     */
+    public void onFailureWithContent(Throwable error, String content) { onFailure(error); }
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
@@ -124,8 +130,9 @@ protected void sendSuccessMessage(String responseBody) {
         sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
     }
 
-    protected void sendFailureMessage(Throwable e) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, e));
+    protected void sendFailureMessage(String responseBody, Throwable e) {
+        Object[] payload = {responseBody, e};
+        sendMessage(obtainMessage(FAILURE_MESSAGE, payload));
     }
 
     protected void sendStartMessage() {
@@ -145,8 +152,12 @@ protected void handleSuccessMessage(String responseBody) {
         onSuccess(responseBody);
     }
 
-    protected void handleFailureMessage(Throwable e) {
-        onFailure(e);
+    protected void handleFailureMessage(String responseBody, Throwable e) {
+        if(responseBody != null && responseBody.length() > 0) {
+            onFailureWithContent(e, responseBody);
+        } else {
+            onFailure(e);
+        }
     }
 
 
@@ -158,7 +169,8 @@ protected void handleMessage(Message msg) {
                 handleSuccessMessage((String)msg.obj);
                 break;
             case FAILURE_MESSAGE:
-                handleFailureMessage((Throwable)msg.obj);
+                Object[] payload = (Object[])msg.obj;
+                handleFailureMessage((String)payload[0], (Throwable)payload[1]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -181,7 +193,7 @@ protected Message obtainMessage(int responseMessage, Object response) {
         Message msg = null;
         if(handler != null){
             msg = this.handler.obtainMessage(responseMessage, response);
-        }else{
+        } else{
             msg = new Message();
             msg.what = responseMessage;
             msg.obj = response;
@@ -192,21 +204,22 @@ protected Message obtainMessage(int responseMessage, Object response) {
 
     // Interface to AsyncHttpRequest
     void sendResponseMessage(HttpResponse response) {
-        StatusLine status = response.getStatusLine();
-        if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()));
-        } else {
-            try {
-                HttpEntity entity = null;
-                HttpEntity temp = response.getEntity();
-                if(temp != null) {
-                    entity = new BufferedHttpEntity(temp);
-                }
+        try {
+            StatusLine status = response.getStatusLine();
+            HttpEntity entity = null;
+            HttpEntity temp = response.getEntity();
+            if(temp != null) {
+                entity = new BufferedHttpEntity(temp);
+            }
 
+            if(status.getStatusCode() >= 300) {
+                sendFailureMessage(EntityUtils.toString(entity),
+                                   new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()));
+            } else {                
                 sendSuccessMessage(EntityUtils.toString(entity));
-            } catch(IOException e) {
-                sendFailureMessage(e);
             }
+        } catch(IOException e) {
+            sendFailureMessage(null, e);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 51c2093e..5c5e285e 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -57,6 +57,19 @@ public void onSuccess(JSONObject response) {}
      */
     public void onSuccess(JSONArray response) {}
 
+    /**
+     * Fired when a request fails to complete, override to handle in your own code
+     * @param error the underlying cause of the failure
+     * @param the actual response body parsed into a json array
+     */
+    public void onFailureWithContent(Throwable error, JSONArray content) { onFailure(error); }
+
+    /**
+     * Fired when a request fails to complete, override to handle in your own code
+     * @param error the underlying cause of the failure
+     * @param the actual response body parsed into a json object
+     */
+    public void onFailureWithContent(Throwable error, JSONObject content) { onFailure(error); }
 
     // Utility methods
     @Override
@@ -75,7 +88,27 @@ protected void handleSuccessMessage(String responseBody) {
         }
     }
 
+    @Override
+    protected void handleFailureMessage(String responseBody, Throwable error) {
+        super.handleFailureMessage(responseBody, error);
+
+        try {
+            if (responseBody != null && responseBody.length() > 0) {
+                Object jsonResponse = parseResponse(responseBody);
+                if(jsonResponse instanceof JSONObject) {
+                    onFailureWithContent(error, (JSONObject)jsonResponse);
+                } else if(jsonResponse instanceof JSONArray) {
+                    onFailureWithContent(error, (JSONArray)jsonResponse);
+                }
+            } else {
+                onFailure(error);
+            }
+        } catch(JSONException e) {
+            onFailure(e);
+        }
+    }
+
     protected Object parseResponse(String responseBody) throws JSONException {
         return new JSONTokener(responseBody).nextValue();
     }
-}
\ No newline at end of file
+}
