diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 6053a569..6bdcd089 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -572,7 +572,7 @@ protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, Ht
     public static String getUrlWithQueryString(String url, RequestParams params) {
         if(params != null) {
             String paramString = params.getParamString();
-            if (url.indexOf("?") == -1) {
+            if (!url.contains("?")) {
                 url += "?" + paramString;
             } else {
                 url += "&" + paramString;
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 86fbdec9..c9f0b995 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -140,7 +140,7 @@ public void onFailure(Throwable error, String content) {
     //
 
     protected void sendSuccessMessage(int statusCode, String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody}));
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{statusCode, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -181,7 +181,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[])msg.obj;
-                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1]);
+                handleSuccessMessage((Integer) response[0], (String) response[1]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index aff1c631..864005e3 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -138,7 +138,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[])msg.obj;
-                handleSuccessMessage(((Integer) response[0]).intValue() , (byte[]) response[1]);
+                handleSuccessMessage((Integer) response[0], (byte[]) response[1]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 084bf339..da9666bd 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -117,7 +117,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
                 Object[] response = (Object[]) msg.obj;
-                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1]);
+                handleSuccessJsonMessage((Integer) response[0], response[1]);
                 break;
             default:
                 super.handleMessage(msg);
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 3f98a00b..75abd837 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -178,7 +178,7 @@ protected Cookie decodeCookie(String cookieStr) {
     // Using some super basic byte array <-> hex conversions so we don't have
     // to rely on any large Base64 libraries. Can be overridden if you like!
     protected String byteArrayToHexString(byte[] b) {
-        StringBuffer sb = new StringBuffer(b.length * 2);
+        StringBuilder sb = new StringBuilder(b.length * 2);
         for (byte element : b) {
             int v = element & 0xff;
             if(v < 16) {
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 715456fb..9989aa6d 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -69,7 +69,7 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         boolean retry = true;
 
         Boolean b = (Boolean) context.getAttribute(ExecutionContext.HTTP_REQ_SENT);
-        boolean sent = (b != null && b.booleanValue());
+        boolean sent = (b != null && b);
 
         if(executionCount > maxRetries) {
             // Do not retry if over max retry count
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index bff0efcc..7fed2bc3 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -47,7 +47,7 @@
     boolean isSetFirst = false;
 
     public SimpleMultipartEntity() {
-        final StringBuffer buf = new StringBuffer();
+        final StringBuilder buf = new StringBuilder();
         final Random rand = new Random();
         for (int i = 0; i < 30; i++) {
             buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 84aeb6e5..280633b1 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -20,9 +20,9 @@
 		void sendResponseMessage(org.apache.http.HttpResponse response) {
 			responseCode = response.getStatusLine().getStatusCode();
 			super.sendResponseMessage(response);
-		};
+		}
 
-		@Override
+        @Override
 		protected void sendMessage(Message msg) {
 			/*
 			 * Dont use the handler and send it directly to the analysis
