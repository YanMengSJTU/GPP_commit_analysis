diff --git a/CHANGELOG.md b/CHANGELOG.md
index 14d617a9..0cdfaa0a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,23 @@
 # CHANGELOG
 
+## 1.4.6 (future version)
+
+Complete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.6](https://github.com/loopj/android-async-http/commits/1.4.6)  
+List of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=4&state=closed](https://github.com/loopj/android-async-http/issues?milestone=2&state=closed)
+
+  - Fixed missing boundary when passing content-type as call param along with HttpEntity
+  - Added warnings for not overriden calls in JsonHttpResponseHandler (and others)
+  - RequestParams now implement Serializable, to support storing them and passing them along
+  - Added option to add File part with custom file name (overriding the real file name)
+  - Fixed not-escaped contents in JsonStreamEntity
+  - Separated connect and response timeout settings
+  - Allowed to pass Looper into *HttpResponseHandler classes
+  - Fixed reporting progress on GZIP compressed down-streams
+  - Added more samples (eg. AsyncBackgroundThreadSample.java, ContentTypeForHttpEntitySample.java, PrePostProcessingSample.java)
+  - Added option to pre- and post- process data in AsyncHttpRequest.java via subclass (see PrePostProcessingSample.java)
+  - Fixed ConcurrentModificationException on AsyncHttpClient.cancelRequests
+  - Fixed handling BOM in decoding response in TextHttpResponseHandler and JsonHttpResponseHandler
+
 ## 1.4.5 (released 22. 6. 2014)
 
 Complete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.5](https://github.com/loopj/android-async-http/commits/1.4.5)  
diff --git a/build.gradle b/build.gradle
index 8fd5554b..fb7e3f70 100755
--- a/build.gradle
+++ b/build.gradle
@@ -14,7 +14,7 @@ def isReleaseBuild() {
 
 allprojects {
     group = 'com.loopj.android'
-    version = '1.4.5'
+    version = '1.4.6-SNAPSHOT'
 
     repositories {
         mavenCentral()
diff --git a/gradle.properties b/gradle.properties
index b80c3224..3d87af9d 100755
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
-VERSION_NAME=1.4.5
-VERSION_CODE=145
+VERSION_NAME=1.4.6-SNAPSHOT
+VERSION_CODE=146
 GROUP=com.loopj.android
 
 POM_DESCRIPTION=An Asynchronous HTTP Library for Android
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index ccb41e6e..3dce5d49 100755
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.loopj.android.http"
-          android:versionName="1.4.5"
-          android:versionCode="145">
+          android:versionName="1.4.6"
+          android:versionCode="146">
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 51843bdb..a6ccdd23 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -474,8 +474,8 @@ public int getTimeout() {
      * 10 seconds.
      *
      * @param value the connect/socket timeout in milliseconds, at least 1 second
-     * @see {@link #setConnectTimeout(int)} if you need further refinement for either value or
-     * or {@link #setResponseTimeout(int)} methods.
+     * @see #setConnectTimeout(int)
+     * @see #setResponseTimeout(int)
      */
     public void setTimeout(int value) {
         value = value < 1000 ? DEFAULT_SOCKET_TIMEOUT : value;
@@ -1148,7 +1148,11 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         }
 
         if (contentType != null) {
-            uriRequest.setHeader(HEADER_CONTENT_TYPE, contentType);
+            if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase) uriRequest).getEntity() != null) {
+                Log.w(LOG_TAG, "Passed contentType will be ignored because HttpEntity sets content type");
+            } else {
+                uriRequest.setHeader(HEADER_CONTENT_TYPE, contentType);
+            }
         }
 
         responseHandler.setRequestHeaders(uriRequest.getAllHeaders());
@@ -1374,7 +1378,7 @@ public InputStream getContent() throws IOException {
 
         @Override
         public long getContentLength() {
-            return -1;
+            return wrappedEntity == null ? 0 : wrappedEntity.getContentLength();
         }
 
         @Override
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index 195a8184..4185434d 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -30,6 +30,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.Serializable;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -87,7 +88,7 @@
  * client.post("http://myendpoint.com", params, responseHandler);
  * </pre>
  */
-public class RequestParams {
+public class RequestParams implements Serializable {
 
     public final static String APPLICATION_OCTET_STREAM =
             "application/octet-stream";
@@ -192,11 +193,23 @@ public void put(String key, String value) {
      * @throws java.io.FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file) throws FileNotFoundException {
-        put(key, file, null);
+        put(key, file, null, null);
     }
 
     /**
-     * Adds a file to the request.
+     * Adds a file to the request with custom provided file name
+     *
+     * @param key            the key name for the new param.
+     * @param file           the file to add.
+     * @param customFileName file name to use instead of real file name
+     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     */
+    public void put(String key, String customFileName, File file) throws FileNotFoundException {
+        put(key, file, null, customFileName);
+    }
+
+    /**
+     * Adds a file to the request with custom provided file content-type
      *
      * @param key         the key name for the new param.
      * @param file        the file to add.
@@ -204,11 +217,24 @@ public void put(String key, File file) throws FileNotFoundException {
      * @throws java.io.FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file, String contentType) throws FileNotFoundException {
+        put(key, file, contentType, null);
+    }
+
+    /**
+     * Adds a file to the request with both custom provided file content-type and file name
+     *
+     * @param key            the key name for the new param.
+     * @param file           the file to add.
+     * @param contentType    the content type of the file, eg. application/json
+     * @param customFileName file name to use instead of real file name
+     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     */
+    public void put(String key, File file, String contentType, String customFileName) throws FileNotFoundException {
         if (file == null || !file.exists()) {
             throw new FileNotFoundException();
         }
         if (key != null) {
-            fileParams.put(key, new FileWrapper(file, contentType));
+            fileParams.put(key, new FileWrapper(file, contentType, customFileName));
         }
     }
 
@@ -494,7 +520,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
         // Add file params
         for (ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             FileWrapper fileWrapper = entry.getValue();
-            entity.addPart(entry.getKey(), fileWrapper.file, fileWrapper.contentType);
+            entity.addPart(entry.getKey(), fileWrapper.file, fileWrapper.contentType, fileWrapper.customFileName);
         }
 
         return entity;
@@ -560,10 +586,12 @@ protected String getParamString() {
     public static class FileWrapper {
         public final File file;
         public final String contentType;
+        public final String customFileName;
 
-        public FileWrapper(File file, String contentType) {
+        public FileWrapper(File file, String contentType, String customFileName) {
             this.file = file;
             this.contentType = contentType;
+            this.customFileName = customFileName;
         }
     }
 
diff --git a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
index 9bbc3e01..a6883068 100755
--- a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
@@ -23,6 +23,7 @@
 
 package com.loopj.android.http;
 
+import android.text.TextUtils;
 import android.util.Log;
 
 import org.apache.http.Header;
@@ -116,6 +117,9 @@ public void addPart(String key, File file) {
     public void addPart(String key, File file, String type) {
         fileParts.add(new FilePart(key, file, normalizeContentType(type)));
     }
+    public void addPart(String key, File file, String type, String customFileName) {
+        fileParts.add(new FilePart(key, file, normalizeContentType(type), customFileName));
+    }
 
     public void addPart(String key, String streamName, InputStream inputStream, String type)
             throws IOException {
@@ -172,6 +176,11 @@ private void updateProgress(int count) {
         public File file;
         public byte[] header;
 
+        public FilePart(String key, File file, String type, String customFileName) {
+            header = createHeader(key, TextUtils.isEmpty(customFileName) ? file.getName() : customFileName, type);
+            this.file = file;
+        }
+
         public FilePart(String key, File file, String type) {
             header = createHeader(key, file.getName(), type);
             this.file = file;
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index f3380bad..125d451d 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -2,8 +2,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.loopj.android.http.sample"
-          android:versionCode="1"
-          android:versionName="1.0">
+          android:versionCode="2"
+          android:versionName="2.0">
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
@@ -40,6 +40,7 @@
         <activity android:name=".RangeResponseSample"/>
         <activity android:name=".Http401AuthSample"/>
         <activity android:name=".AsyncBackgroundThreadSample"/>
+        <activity android:name=".ContentTypeForHttpEntitySample"/>
 
         <service android:name=".services.ExampleIntentService"/>
     </application>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java b/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java
new file mode 100644
index 00000000..193dd707
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java
@@ -0,0 +1,72 @@
+package com.loopj.android.http.sample;
+
+import android.util.Log;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.RequestParams;
+import com.loopj.android.http.ResponseHandlerInterface;
+import com.loopj.android.http.TextHttpResponseHandler;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+
+import java.io.File;
+import java.io.IOException;
+
+public class ContentTypeForHttpEntitySample extends SampleParentActivity {
+    private static final String LOG_TAG = "ContentTypeForHttpEntitySample";
+
+    @Override
+    public ResponseHandlerInterface getResponseHandler() {
+        return new TextHttpResponseHandler() {
+            @Override
+            public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugResponse(LOG_TAG, responseString);
+                debugThrowable(LOG_TAG, throwable);
+            }
+
+            @Override
+            public void onSuccess(int statusCode, Header[] headers, String responseString) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugResponse(LOG_TAG, responseString);
+            }
+        };
+    }
+
+    @Override
+    public String getDefaultURL() {
+        return "http://httpbin.org/post";
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return true;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_content_type_http_entity;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        RequestParams rParams = new RequestParams();
+        rParams.put("sample_key", "Sample String");
+        try {
+            File sample_file = File.createTempFile("temp_", "_handled", getCacheDir());
+            rParams.put("sample_file", sample_file);
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Cannot add sample file", e);
+        }
+        return client.post(this, URL, headers, rParams, "multipart/form-data", responseHandler);
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java b/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
index e56a1ed9..fb97a41b 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
@@ -34,11 +34,13 @@ public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[]
         try {
             RequestParams params = new RequestParams();
             final String contentType = RequestParams.APPLICATION_OCTET_STREAM;
-            params.put("fileOne", createTempFile("fileOne", 1020), contentType);
+            params.put("fileOne", createTempFile("fileOne", 1020), contentType, "fileOne");
             params.put("fileTwo", createTempFile("fileTwo", 1030), contentType);
-            params.put("fileThree", createTempFile("fileThree", 1040), contentType);
+            params.put("fileThree", createTempFile("fileThree", 1040), contentType, "customFileThree");
             params.put("fileFour", createTempFile("fileFour", 1050), contentType);
-            params.put("fileFive", createTempFile("fileFive", 1060), contentType);
+            params.put("fileFive", createTempFile("fileFive", 1060), contentType, "testingFileFive");
+            params.setHttpEntityIsRepeatable(true);
+            params.setUseJsonStreamer(false);
             return client.post(this, URL, params, responseHandler);
         } catch (FileNotFoundException fnfException) {
             Log.e(LOG_TAG, "executeSample failed with FileNotFoundException", fnfException);
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index d596a5c3..699d1fc5 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -37,8 +37,11 @@
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.message.BasicHeader;
+import org.apache.http.protocol.HttpContext;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -47,21 +50,18 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.protocol.HttpContext;
 
 public abstract class SampleParentActivity extends Activity implements SampleInterface {
 
     private AsyncHttpClient asyncHttpClient = new AsyncHttpClient() {
 
-      @Override
-      protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
-        AsyncHttpRequest httpRequest = getHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context);
-        return httpRequest == null
-            ? super.newAsyncHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context)
-            : httpRequest;
-      }
+        @Override
+        protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
+            AsyncHttpRequest httpRequest = getHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context);
+            return httpRequest == null
+                    ? super.newAsyncHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context)
+                    : httpRequest;
+        }
     };
     private EditText urlEditText, headersEditText, bodyEditText;
     private LinearLayout responseLayout;
@@ -193,8 +193,8 @@ public String getUrlText() {
 
     public String getUrlText(String defaultText) {
         return urlEditText != null && urlEditText.getText() != null
-            ? urlEditText.getText().toString()
-            : defaultText;
+                ? urlEditText.getText().toString()
+                : defaultText;
     }
 
     public String getBodyText() {
@@ -203,8 +203,8 @@ public String getBodyText() {
 
     public String getBodyText(String defaultText) {
         return bodyEditText != null && bodyEditText.getText() != null
-            ? bodyEditText.getText().toString()
-            : defaultText;
+                ? bodyEditText.getText().toString()
+                : defaultText;
     }
 
     public String getHeadersText() {
@@ -213,8 +213,8 @@ public String getHeadersText() {
 
     public String getHeadersText(String defaultText) {
         return headersEditText != null && headersEditText.getText() != null
-            ? headersEditText.getText().toString()
-            : defaultText;
+                ? headersEditText.getText().toString()
+                : defaultText;
     }
 
     protected final void debugHeaders(String TAG, Header[] headers) {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index 24b11a24..70b49829 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -30,30 +30,31 @@
 
 public class WaypointsActivity extends ListActivity {
 
-    private static final SampleConfig[] samplesConfig = new SampleConfig[] {
-        new SampleConfig(R.string.title_get_sample, GetSample.class),
-        new SampleConfig(R.string.title_post_sample, PostSample.class),
-        new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
-        new SampleConfig(R.string.title_put_sample, PutSample.class),
-        new SampleConfig(R.string.title_json_sample, JsonSample.class),
-        new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
-        new SampleConfig(R.string.title_sax_example, SaxSample.class),
-        new SampleConfig(R.string.title_file_sample, FileSample.class),
-        new SampleConfig(R.string.title_binary_sample, BinarySample.class),
-        new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
-        new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
-        new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
-        new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
-        new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
-        new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
-        new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
-        new SampleConfig(R.string.title_post_files, FilesSample.class),
-        new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
-        new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
-        new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
-        new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
-        new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class),
-        new SampleConfig(R.string.title_pre_post_processing, PrePostProcessingSample.class)
+    private static final SampleConfig[] samplesConfig = new SampleConfig[]{
+            new SampleConfig(R.string.title_get_sample, GetSample.class),
+            new SampleConfig(R.string.title_post_sample, PostSample.class),
+            new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
+            new SampleConfig(R.string.title_put_sample, PutSample.class),
+            new SampleConfig(R.string.title_json_sample, JsonSample.class),
+            new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
+            new SampleConfig(R.string.title_sax_example, SaxSample.class),
+            new SampleConfig(R.string.title_file_sample, FileSample.class),
+            new SampleConfig(R.string.title_binary_sample, BinarySample.class),
+            new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
+            new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
+            new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
+            new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
+            new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
+            new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
+            new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
+            new SampleConfig(R.string.title_post_files, FilesSample.class),
+            new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
+            new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
+            new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
+            new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
+            new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class),
+            new SampleConfig(R.string.title_pre_post_processing, PrePostProcessingSample.class),
+            new SampleConfig(R.string.title_content_type_http_entity, ContentTypeForHttpEntitySample.class)
     };
 
     @Override
@@ -82,8 +83,8 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
         final Class targetClass;
 
         SampleConfig(int titleId, Class targetClass) {
-          this.titleId = titleId;
-          this.targetClass = targetClass;
+            this.titleId = titleId;
+            this.targetClass = targetClass;
         }
 
     }
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 61c0f0bf..3994a05a 100755
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -37,4 +37,5 @@
     <string name="title_401_unauth">401 basic authentication</string>
     <string name="title_pre_post_processing">Pre-/Post-processing</string>
     <string name="title_async_background_thread">Async on background thread</string>
+    <string name="title_content_type_http_entity">Content-Type with HttpEntity</string>
 </resources>
