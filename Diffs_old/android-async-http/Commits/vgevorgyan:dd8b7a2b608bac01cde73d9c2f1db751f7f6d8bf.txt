diff --git a/.gitignore b/.gitignore
index 8842bb26..ad9b7527 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,4 @@ gen/
 _layouts
 .DS_Store
 gh-pages
+*.iml
diff --git a/README.md b/README.md
index 1602a534..dfa9301a 100644
--- a/README.md
+++ b/README.md
@@ -1,22 +1,7 @@
-Asynchronous Http Client for Android
-====================================
-
-An asynchronous, callback-based Http client for Android built on top of Apache's [HttpClient](http://hc.apache.org/httpcomponents-client-ga/) libraries.
-
-
-Features
---------
-- Make **asynchronous** HTTP requests, handle responses in **anonymous callbacks**
-- HTTP requests happen **outside the UI thread**
-- Requests use a **threadpool** to cap concurrent resource usage
-- GET/POST **params builder** (RequestParams)
-- **Multipart file uploads** with no additional third party libraries
-- Tiny size overhead to your application, only **19kb** for everything
-- Automatic smart **request retries** optimized for spotty mobile connections
-- Automatic **gzip** response decoding support for super-fast requests
-- Optional built-in response parsing into **JSON** (JsonHttpResponseHandler)
-- Optional **persistent cookie store**, saves cookies into your app's SharedPreferences
+Asynchronous Http Client for Android with Apache's Android HttpClient 4.2
+=========================================================================
 
+This is the same project as https://github.com/loopj/android-async-http just here I'm using Apache's [HttpClient 4.2 repackaged for Android](https://code.google.com/p/httpclientandroidlib/) library instead of Android built in Http client.
 
 Documentation, Features and Examples
 ------------------------------------
diff --git a/libs/httpclientandroidlib-1.1.2.jar b/libs/httpclientandroidlib-1.1.2.jar
new file mode 100644
index 00000000..e4efbc10
Binary files /dev/null and b/libs/httpclientandroidlib-1.1.2.jar differ
diff --git a/releases/android-async-http-1.2.0.jar b/releases/android-async-http-1.2.0.jar
deleted file mode 100644
index 3fd4789b..00000000
Binary files a/releases/android-async-http-1.2.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.2.1.jar b/releases/android-async-http-1.2.1.jar
deleted file mode 100644
index 4db7cf11..00000000
Binary files a/releases/android-async-http-1.2.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.0.jar b/releases/android-async-http-1.3.0.jar
deleted file mode 100644
index faebdf0f..00000000
Binary files a/releases/android-async-http-1.3.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.1.jar b/releases/android-async-http-1.3.1.jar
deleted file mode 100644
index 107b032d..00000000
Binary files a/releases/android-async-http-1.3.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.2.jar b/releases/android-async-http-1.3.2.jar
deleted file mode 100644
index 0af40632..00000000
Binary files a/releases/android-async-http-1.3.2.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.0.jar b/releases/android-async-http-1.4.0.jar
deleted file mode 100644
index 2109150d..00000000
Binary files a/releases/android-async-http-1.4.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.1.jar b/releases/android-async-http-1.4.1.jar
deleted file mode 100644
index 551f5fbf..00000000
Binary files a/releases/android-async-http-1.4.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.2.jar b/releases/android-async-http-1.4.2.jar
deleted file mode 100644
index 1c568cb9..00000000
Binary files a/releases/android-async-http-1.4.2.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.3.jar b/releases/android-async-http-1.4.3.jar
deleted file mode 100644
index 3a749a59..00000000
Binary files a/releases/android-async-http-1.4.3.jar and /dev/null differ
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 5f0750d7..e408fc70 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -18,58 +18,40 @@
 
 package com.loopj.android.http;
 
+import android.content.Context;
+import ch.boye.httpclientandroidlib.*;
+import ch.boye.httpclientandroidlib.auth.AuthScope;
+import ch.boye.httpclientandroidlib.auth.UsernamePasswordCredentials;
+import ch.boye.httpclientandroidlib.client.CookieStore;
+import ch.boye.httpclientandroidlib.client.HttpClient;
+import ch.boye.httpclientandroidlib.client.methods.*;
+import ch.boye.httpclientandroidlib.client.protocol.ClientContext;
+import ch.boye.httpclientandroidlib.conn.params.ConnManagerParams;
+import ch.boye.httpclientandroidlib.conn.params.ConnPerRouteBean;
+import ch.boye.httpclientandroidlib.conn.scheme.PlainSocketFactory;
+import ch.boye.httpclientandroidlib.conn.scheme.Scheme;
+import ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry;
+import ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;
+import ch.boye.httpclientandroidlib.entity.HttpEntityWrapper;
+import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
+import ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager;
+import ch.boye.httpclientandroidlib.params.BasicHttpParams;
+import ch.boye.httpclientandroidlib.params.HttpConnectionParams;
+import ch.boye.httpclientandroidlib.params.HttpParams;
+import ch.boye.httpclientandroidlib.params.HttpProtocolParams;
+import ch.boye.httpclientandroidlib.protocol.BasicHttpContext;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
+import ch.boye.httpclientandroidlib.protocol.SyncBasicHttpContext;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
+import java.util.*;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.zip.GZIPInputStream;
 
-import org.apache.http.Header;
-import org.apache.http.HeaderElement;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpResponseInterceptor;
-import org.apache.http.HttpVersion;
-import org.apache.http.auth.AuthScope;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.CookieStore;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpDelete;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.client.methods.HttpPut;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.client.protocol.ClientContext;
-import org.apache.http.conn.params.ConnManagerParams;
-import org.apache.http.conn.params.ConnPerRouteBean;
-import org.apache.http.conn.scheme.PlainSocketFactory;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.conn.ssl.SSLSocketFactory;
-import org.apache.http.entity.HttpEntityWrapper;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-import org.apache.http.params.HttpProtocolParams;
-import org.apache.http.protocol.BasicHttpContext;
-import org.apache.http.protocol.HttpContext;
-import org.apache.http.protocol.SyncBasicHttpContext;
-
-import android.content.Context;
-
-
 /**
  * The AsyncHttpClient can be used to make asynchronous GET, POST, PUT and 
  * DELETE HTTP requests in your Android applications. Requests can be made
@@ -249,8 +231,8 @@ public void addHeader(String header, String value) {
     /**
      * Sets basic authentication for the request. Uses AuthScope.ANY. This is the same as
      * setBasicAuth('username','password',AuthScope.ANY) 
-     * @param username
-     * @param password
+     * @param user
+     * @param pass
      */
     public void setBasicAuth(String user, String pass){
         AuthScope scope = AuthScope.ANY;
@@ -260,8 +242,8 @@ public void setBasicAuth(String user, String pass){
    /**
      * Sets basic authentication for the request. You should pass in your AuthScope for security. It should be like this
      * setBasicAuth("username","password", new AuthScope("host",port,AuthScope.ANY_REALM))
-     * @param username
-     * @param password
+     * @param user
+     * @param pass
      * @param scope - an AuthScope object
      *
      */
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 48e6807e..57a638b9 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -18,18 +18,18 @@
 
 package com.loopj.android.http;
 
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
+
 import java.io.IOException;
 import java.net.ConnectException;
 import java.net.SocketException;
 import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
 
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpRequestRetryHandler;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.AbstractHttpClient;
-import org.apache.http.protocol.HttpContext;
-
 class AsyncHttpRequest implements Runnable {
     private final AbstractHttpClient client;
     private final HttpContext context;
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 2030265f..7202aa0a 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,18 +21,15 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
-import org.apache.http.Header;
-import java.io.IOException;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.StatusLine;
-import org.apache.http.client.HttpResponseException;
-import org.apache.http.entity.BufferedHttpEntity;
-import org.apache.http.util.EntityUtils;
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.StatusLine;
+import ch.boye.httpclientandroidlib.client.HttpResponseException;
+import ch.boye.httpclientandroidlib.entity.BufferedHttpEntity;
+import ch.boye.httpclientandroidlib.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
+import java.io.IOException;
 
 /**
  * Used to intercept and handle the responses from requests made using 
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 7d675a59..1ff81390 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -18,19 +18,18 @@
 
 package com.loopj.android.http;
 
+import android.os.Message;
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.StatusLine;
+import ch.boye.httpclientandroidlib.client.HttpResponseException;
+import ch.boye.httpclientandroidlib.entity.BufferedHttpEntity;
+import ch.boye.httpclientandroidlib.util.EntityUtils;
+
 import java.io.IOException;
 import java.util.regex.Pattern;
 
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.StatusLine;
-import org.apache.http.client.HttpResponseException;
-import org.apache.http.entity.BufferedHttpEntity;
-import org.apache.http.util.EntityUtils;
-
-import android.os.Message;
-
 /**
  * Used to intercept and handle the responses from requests made using
  * {@link AsyncHttpClient}. Receives response body as byte array with a 
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 433690af..3cbff8d6 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -18,13 +18,13 @@
 
 package com.loopj.android.http;
 
-import org.apache.http.HttpStatus;
+import android.os.Message;
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HttpStatus;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
-import org.apache.http.Header;
-import android.os.Message;
 
 /**
  * Used to intercept and handle the responses from requests made using
@@ -118,7 +118,7 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
 
     @Override
     protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
-        if (statusCode != HttpStatus.SC_NO_CONTENT){        
+        if (statusCode != HttpStatus.SC_NO_CONTENT){
             try {
                 Object jsonResponse = parseResponse(responseBody);
 	        sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, headers, jsonResponse}));
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 11b2a2bf..75693799 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -18,6 +18,12 @@
 
 package com.loopj.android.http;
 
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.text.TextUtils;
+import ch.boye.httpclientandroidlib.client.CookieStore;
+import ch.boye.httpclientandroidlib.cookie.Cookie;
+
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
@@ -27,13 +33,6 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.http.client.CookieStore;
-import org.apache.http.cookie.Cookie;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.text.TextUtils;
-
 /**
  * A persistent cookie store which implements the Apache HttpClient
  * {@link CookieStore} interface. Cookies are stored and will persist on the
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index cbb0c288..0e1054ab 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -18,22 +18,18 @@
 
 package com.loopj.android.http;
 
-import java.io.InputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.UnsupportedEncodingException;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.client.entity.UrlEncodedFormEntity;
+import ch.boye.httpclientandroidlib.client.utils.URLEncodedUtils;
+import ch.boye.httpclientandroidlib.message.BasicNameValuePair;
+
+import java.io.*;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.http.HttpEntity;
-import org.apache.http.client.entity.UrlEncodedFormEntity;
-import org.apache.http.client.utils.URLEncodedUtils;
-import org.apache.http.message.BasicNameValuePair;
-
 /**
  * A collection of string request parameters or files to send along with
  * requests made from an {@link AsyncHttpClient} instance.
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 5256aad2..03af5323 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -23,6 +23,14 @@
 
 package com.loopj.android.http;
 
+import android.os.SystemClock;
+import ch.boye.httpclientandroidlib.NoHttpResponseException;
+import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.protocol.ExecutionContext;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
+
+import javax.net.ssl.SSLException;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.SocketException;
@@ -30,16 +38,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 
-import javax.net.ssl.SSLException;
-
-import org.apache.http.NoHttpResponseException;
-import org.apache.http.client.HttpRequestRetryHandler;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.protocol.ExecutionContext;
-import org.apache.http.protocol.HttpContext;
-
-import android.os.SystemClock;
-
 class RetryHandler implements HttpRequestRetryHandler {
     private static final int RETRY_SLEEP_TIME_MILLIS = 1500;
     private static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
diff --git a/src/com/loopj/android/http/SerializableCookie.java b/src/com/loopj/android/http/SerializableCookie.java
index cc12993c..4262c37b 100644
--- a/src/com/loopj/android/http/SerializableCookie.java
+++ b/src/com/loopj/android/http/SerializableCookie.java
@@ -18,15 +18,15 @@
 
 package com.loopj.android.http;
 
-import java.io.Serializable;
+import ch.boye.httpclientandroidlib.cookie.Cookie;
+import ch.boye.httpclientandroidlib.impl.cookie.BasicClientCookie;
+
+import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.io.IOException;
+import java.io.Serializable;
 import java.util.Date;
 
-import org.apache.http.cookie.Cookie;
-import org.apache.http.impl.cookie.BasicClientCookie;
-
 /**
  * A wrapper class around {@link Cookie} and/or {@link BasicClientCookie}
  * designed for use in {@link PersistentCookieStore}.
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index 3221ec1e..ead28905 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -23,19 +23,12 @@
 
 package com.loopj.android.http;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.Random;
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.message.BasicHeader;
 
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.message.BasicHeader;
+import java.io.*;
+import java.util.Random;
 
 class SimpleMultipartEntity implements HttpEntity {
     private final static char[] MULTIPART_CHARS = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 1fd4441f..a05d2b49 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -1,11 +1,11 @@
 package com.loopj.android.http;
 
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.protocol.HttpContext;
-
 import android.content.Context;
 import android.os.Message;
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
 public abstract class SyncHttpClient extends AsyncHttpClient {
 	private int responseCode;
@@ -18,7 +18,7 @@
 	protected AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
 
         @Override
-        void sendResponseMessage(org.apache.http.HttpResponse response) {
+        void sendResponseMessage(HttpResponse response) {
 			responseCode = response.getStatusLine().getStatusCode();
 			super.sendResponseMessage(response);
 		};
