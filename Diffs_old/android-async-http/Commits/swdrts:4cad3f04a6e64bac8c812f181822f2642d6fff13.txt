diff --git a/CHANGELOG.md b/CHANGELOG.md
index 14d617a9..0566956b 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,27 @@
 # CHANGELOG
 
+## 1.4.7 (future version)
+
+  - Fixed crash when canceling through RequestHandle from UI Thread (NetworkOnMainThreadException)
+
+## 1.4.6 (released 7. 9. 2014)
+
+Complete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.6](https://github.com/loopj/android-async-http/commits/1.4.6)  
+List of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=4&state=closed](https://github.com/loopj/android-async-http/issues?milestone=2&state=closed)
+
+  - Fixed missing boundary when passing content-type as call param along with HttpEntity
+  - Added warnings for not overriden calls in JsonHttpResponseHandler (and others)
+  - RequestParams now implement Serializable, to support storing them and passing them along
+  - Added option to add File part with custom file name (overriding the real file name)
+  - Fixed not-escaped contents in JsonStreamEntity
+  - Separated connect and response timeout settings
+  - Allowed to pass Looper into *HttpResponseHandler classes
+  - Fixed reporting progress on GZIP compressed down-streams
+  - Added more samples (eg. AsyncBackgroundThreadSample.java, ContentTypeForHttpEntitySample.java, PrePostProcessingSample.java)
+  - Added option to pre- and post- process data in AsyncHttpRequest.java via subclass (see PrePostProcessingSample.java)
+  - Fixed ConcurrentModificationException on AsyncHttpClient.cancelRequests
+  - Fixed handling BOM in decoding response in TextHttpResponseHandler and JsonHttpResponseHandler
+
 ## 1.4.5 (released 22. 6. 2014)
 
 Complete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.5](https://github.com/loopj/android-async-http/commits/1.4.5)  
diff --git a/README.md b/README.md
index 4c96ed3b..de4656d3 100755
--- a/README.md
+++ b/README.md
@@ -7,14 +7,14 @@ An asynchronous, callback-based Http client for Android built on top of Apache's
 Changelog
 ---------
 
-See what is new in version 1.4.5 released on 22th June 2014
+See what is new in version 1.4.6 released on 7th Sep 2014
 
-https://github.com/loopj/android-async-http/blob/1.4.5/CHANGELOG.md
+https://github.com/loopj/android-async-http/blob/1.4.6/CHANGELOG.md
 
 Javadoc
 -------
 
-Latest Javadoc for 1.4.5 release are available here (also included in Maven repository):
+Latest Javadoc for 1.4.6 release are available here (also included in Maven repository):
 
 http://loopj.com/android-async-http/doc/
 
@@ -35,7 +35,7 @@ Examples
 --------
 
 For inspiration and testing on device we've provided Sample Application.  
-See individual samples [here on Github](https://github.com/loopj/android-async-http/tree/1.4.5/sample/src/main/java/com/loopj/android/http/sample)  
+See individual samples [here on Github](https://github.com/loopj/android-async-http/tree/1.4.6/sample/src/main/java/com/loopj/android/http/sample)  
 To run Sample application, simply clone the repository and run this command, to install it on connected device  
 
 ```java
@@ -53,10 +53,10 @@ http://central.maven.org/maven2/com/loopj/android/android-async-http/
 Maven URL: http://repo1.maven.org/maven2/
 GroupId: com.loopj.android
 ArtifactId: android-async-http
-Version: 1.4.5
+Version: 1.4.6
 Packaging: JAR or AAR
 ```
-Gradle: `com.loopj.android:android-async-http:1.4.5`
+Gradle: `com.loopj.android:android-async-http:1.4.6`
 
 **development snapshots**
 
@@ -65,10 +65,10 @@ https://oss.sonatype.org/content/repositories/snapshots/com/loopj/android/androi
 Maven URL: https://oss.sonatype.org/content/repositories/snapshots/
 GroupId: com.loopj.android
 ArtifactId: android-async-http
-Version: 1.4.6-SNAPSHOT
+Version: 1.4.7-SNAPSHOT
 Packaging: JAR or AAR
 ```
-Gradle: `com.loopj.android:android-async-http:1.4.6-SNAPSHOT`
+Gradle: `com.loopj.android:android-async-http:1.4.7-SNAPSHOT`
 
 Documentation, Features and Examples
 ------------------------------------
diff --git a/build.gradle b/build.gradle
index 8fd5554b..6dcaf5c1 100755
--- a/build.gradle
+++ b/build.gradle
@@ -14,7 +14,7 @@ def isReleaseBuild() {
 
 allprojects {
     group = 'com.loopj.android'
-    version = '1.4.5'
+    version = '1.4.7-SNAPSHOT'
 
     repositories {
         mavenCentral()
diff --git a/gradle.properties b/gradle.properties
index b80c3224..df1bf1ff 100755
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,5 +1,5 @@
-VERSION_NAME=1.4.5
-VERSION_CODE=145
+VERSION_NAME=1.4.7-SNAPSHOT
+VERSION_CODE=147
 GROUP=com.loopj.android
 
 POM_DESCRIPTION=An Asynchronous HTTP Library for Android
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index ccb41e6e..58b8a4f5 100755
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.loopj.android.http"
-          android:versionName="1.4.5"
-          android:versionCode="145">
+          android:versionName="1.4.7"
+          android:versionCode="147">
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 51843bdb..dbfa5c79 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -73,8 +73,10 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.PushbackInputStream;
+import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Field;
 import java.net.URI;
+import java.net.URLEncoder;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -474,8 +476,8 @@ public int getTimeout() {
      * 10 seconds.
      *
      * @param value the connect/socket timeout in milliseconds, at least 1 second
-     * @see {@link #setConnectTimeout(int)} if you need further refinement for either value or
-     * or {@link #setResponseTimeout(int)} methods.
+     * @see #setConnectTimeout(int)
+     * @see #setResponseTimeout(int)
      */
     public void setTimeout(int value) {
         value = value < 1000 ? DEFAULT_SOCKET_TIMEOUT : value;
@@ -650,10 +652,18 @@ public void setBasicAuth(String username, String password, AuthScope scope) {
      */
     public void setBasicAuth(String username, String password, AuthScope scope, boolean preemtive) {
         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);
-        this.httpClient.getCredentialsProvider().setCredentials(scope == null ? AuthScope.ANY : scope, credentials);
+        setCredentials(scope, credentials);
         setAuthenticationPreemptive(preemtive);
     }
 
+    public void setCredentials(AuthScope authScope, Credentials credentials) {
+        if (credentials == null) {
+            Log.d(LOG_TAG, "Provided credentials are null, not setting");
+            return;
+        }
+        this.httpClient.getCredentialsProvider().setCredentials(authScope == null ? AuthScope.ANY : authScope, credentials);
+    }
+
     /**
      * Sets HttpRequestInterceptor which handles authorization in preemtive way, as workaround you
      * can use call `AsyncHttpClient.addHeader("Authorization","Basic base64OfUsernameAndPassword==")`
@@ -670,8 +680,18 @@ public void setAuthenticationPreemptive(boolean isPreemtive) {
 
     /**
      * Removes previously set basic auth credentials
+     *
+     * @deprecated
      */
+    @Deprecated
     public void clearBasicAuth() {
+        clearCredentialsProvider();
+    }
+
+    /**
+     * Removes previously set auth credentials
+     */
+    public void clearCredentialsProvider() {
         this.httpClient.getCredentialsProvider().clear();
     }
 
@@ -1148,7 +1168,11 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         }
 
         if (contentType != null) {
-            uriRequest.setHeader(HEADER_CONTENT_TYPE, contentType);
+            if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase) uriRequest).getEntity() != null) {
+                Log.w(LOG_TAG, "Passed contentType will be ignored because HttpEntity sets content type");
+            } else {
+                uriRequest.setHeader(HEADER_CONTENT_TYPE, contentType);
+            }
         }
 
         responseHandler.setRequestHeaders(uriRequest.getAllHeaders());
@@ -1168,9 +1192,6 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
                 }
             }
 
-            if (responseHandler instanceof RangeFileAsyncHttpResponseHandler)
-                ((RangeFileAsyncHttpResponseHandler) responseHandler).updateRequestHeaders(uriRequest);
-
             requestList.add(requestHandle);
 
             Iterator<RequestHandle> iterator = requestList.iterator();
@@ -1206,8 +1227,14 @@ public static String getUrlWithQueryString(boolean shouldEncodeUrl, String url,
         if (url == null)
             return null;
 
-        if (shouldEncodeUrl)
-            url = url.replace(" ", "%20");
+        if (shouldEncodeUrl) {
+            try {
+                url = URLEncoder.encode(url, "UTF-8");
+            } catch (UnsupportedEncodingException e) {
+                // Should not really happen, added just for sake of validity
+                Log.e(LOG_TAG, "getUrlWithQueryString encoding URL", e);
+            }
+        }
 
         if (params != null) {
             // Construct the query string and trim it, in case it
@@ -1374,7 +1401,7 @@ public InputStream getContent() throws IOException {
 
         @Override
         public long getContentLength() {
-            return -1;
+            return wrappedEntity == null ? 0 : wrappedEntity.getContentLength();
         }
 
         @Override
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java b/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
index b7756d8f..682a4f7b 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
@@ -144,6 +144,10 @@ private void makeRequest() throws IOException {
             throw new MalformedURLException("No valid URI scheme was provided");
         }
 
+        if (responseHandler instanceof RangeFileAsyncHttpResponseHandler) {
+            ((RangeFileAsyncHttpResponseHandler) responseHandler).updateRequestHeaders(request);
+        }
+
         HttpResponse response = client.execute(request, context);
 
         if (isCancelled() || responseHandler == null) {
diff --git a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
index 31e7f702..bea9a929 100755
--- a/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/DataAsyncHttpResponseHandler.java
@@ -100,11 +100,12 @@ protected void handleMessage(Message message) {
                     ByteArrayBuffer buffer = new ByteArrayBuffer((int) contentLength);
                     try {
                         byte[] tmp = new byte[BUFFER_SIZE];
-                        int l;
+                        int l, count = 0;
                         // do not send messages if request has been cancelled
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                             buffer.append(tmp, 0, l);
                             sendProgressDataMessage(copyOfRange(tmp, 0, l));
+                            sendProgressMessage(count, (int) contentLength);
                         }
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
diff --git a/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
index 5a005d6a..13de7fe2 100755
--- a/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
@@ -32,6 +32,7 @@
 public abstract class FileAsyncHttpResponseHandler extends AsyncHttpResponseHandler {
 
     protected final File mFile;
+    protected final boolean append;
     private static final String LOG_TAG = "FileAsyncHttpResponseHandler";
 
     /**
@@ -40,9 +41,20 @@
      * @param file File to store response within, must not be null
      */
     public FileAsyncHttpResponseHandler(File file) {
+        this(file, false);
+    }
+
+    /**
+     * Obtains new FileAsyncHttpResponseHandler and stores response in passed file
+     *
+     * @param file   File to store response within, must not be null
+     * @param append whether data should be appended to existing file
+     */
+    public FileAsyncHttpResponseHandler(File file, boolean append) {
         super();
-        assert (file != null);
+        AssertUtils.asserts(file != null, "File passed into FileAsyncHttpResponseHandler constructor must not be null");
         this.mFile = file;
+        this.append = append;
     }
 
     /**
@@ -53,6 +65,7 @@ public FileAsyncHttpResponseHandler(File file) {
     public FileAsyncHttpResponseHandler(Context context) {
         super();
         this.mFile = getTemporaryFile(context);
+        this.append = false;
     }
 
     /**
@@ -71,8 +84,10 @@ public boolean deleteTargetFile() {
      * @return temporary file or null if creating file failed
      */
     protected File getTemporaryFile(Context context) {
-        assert (context != null);
+        AssertUtils.asserts(context != null, "Tried creating temporary file without having Context");
         try {
+            // not effective in release mode
+            assert context != null;
             return File.createTempFile("temp_", "_handled", context.getCacheDir());
         } catch (IOException e) {
             Log.e(LOG_TAG, "Cannot create temporary file", e);
@@ -125,7 +140,7 @@ public final void onSuccess(int statusCode, Header[] headers, byte[] responseByt
         if (entity != null) {
             InputStream instream = entity.getContent();
             long contentLength = entity.getContentLength();
-            FileOutputStream buffer = new FileOutputStream(getTargetFile());
+            FileOutputStream buffer = new FileOutputStream(getTargetFile(), this.append);
             if (instream != null) {
                 try {
                     byte[] tmp = new byte[BUFFER_SIZE];
diff --git a/library/src/main/java/com/loopj/android/http/RequestHandle.java b/library/src/main/java/com/loopj/android/http/RequestHandle.java
index 290422a9..5185c749 100755
--- a/library/src/main/java/com/loopj/android/http/RequestHandle.java
+++ b/library/src/main/java/com/loopj/android/http/RequestHandle.java
@@ -18,6 +18,8 @@
 
 package com.loopj.android.http;
 
+import android.os.Looper;
+
 import java.lang.ref.WeakReference;
 
 /**
@@ -45,9 +47,21 @@ public RequestHandle(AsyncHttpRequest request) {
      * @return false if the request could not be cancelled, typically because it has already
      * completed normally; true otherwise
      */
-    public boolean cancel(boolean mayInterruptIfRunning) {
-        AsyncHttpRequest _request = request.get();
-        return _request == null || _request.cancel(mayInterruptIfRunning);
+    public boolean cancel(final boolean mayInterruptIfRunning) {
+        final AsyncHttpRequest _request = request.get();
+        if (_request != null) {
+            if (Looper.myLooper() == Looper.getMainLooper()) {
+                new Thread(new Runnable() {
+                    @Override
+                    public void run() {
+                        _request.cancel(mayInterruptIfRunning);
+                    }
+                }).start();
+            } else {
+                _request.cancel(mayInterruptIfRunning);
+            }
+        }
+        return false;
     }
 
     /**
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index 195a8184..28a7a93a 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -30,6 +30,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.Serializable;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -87,7 +88,7 @@
  * client.post("http://myendpoint.com", params, responseHandler);
  * </pre>
  */
-public class RequestParams {
+public class RequestParams implements Serializable {
 
     public final static String APPLICATION_OCTET_STREAM =
             "application/octet-stream";
@@ -192,11 +193,23 @@ public void put(String key, String value) {
      * @throws java.io.FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file) throws FileNotFoundException {
-        put(key, file, null);
+        put(key, file, null, null);
     }
 
     /**
-     * Adds a file to the request.
+     * Adds a file to the request with custom provided file name
+     *
+     * @param key            the key name for the new param.
+     * @param file           the file to add.
+     * @param customFileName file name to use instead of real file name
+     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     */
+    public void put(String key, String customFileName, File file) throws FileNotFoundException {
+        put(key, file, null, customFileName);
+    }
+
+    /**
+     * Adds a file to the request with custom provided file content-type
      *
      * @param key         the key name for the new param.
      * @param file        the file to add.
@@ -204,11 +217,24 @@ public void put(String key, File file) throws FileNotFoundException {
      * @throws java.io.FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file, String contentType) throws FileNotFoundException {
+        put(key, file, contentType, null);
+    }
+
+    /**
+     * Adds a file to the request with both custom provided file content-type and file name
+     *
+     * @param key            the key name for the new param.
+     * @param file           the file to add.
+     * @param contentType    the content type of the file, eg. application/json
+     * @param customFileName file name to use instead of real file name
+     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     */
+    public void put(String key, File file, String contentType, String customFileName) throws FileNotFoundException {
         if (file == null || !file.exists()) {
             throw new FileNotFoundException();
         }
         if (key != null) {
-            fileParams.put(key, new FileWrapper(file, contentType));
+            fileParams.put(key, new FileWrapper(file, contentType, customFileName));
         }
     }
 
@@ -494,7 +520,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
         // Add file params
         for (ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             FileWrapper fileWrapper = entry.getValue();
-            entity.addPart(entry.getKey(), fileWrapper.file, fileWrapper.contentType);
+            entity.addPart(entry.getKey(), fileWrapper.file, fileWrapper.contentType, fileWrapper.customFileName);
         }
 
         return entity;
@@ -557,13 +583,15 @@ protected String getParamString() {
         return URLEncodedUtils.format(getParamsList(), contentEncoding);
     }
 
-    public static class FileWrapper {
+    public static class FileWrapper implements Serializable {
         public final File file;
         public final String contentType;
+        public final String customFileName;
 
-        public FileWrapper(File file, String contentType) {
+        public FileWrapper(File file, String contentType, String customFileName) {
             this.file = file;
             this.contentType = contentType;
+            this.customFileName = customFileName;
         }
     }
 
diff --git a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
index 9bbc3e01..a6883068 100755
--- a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
@@ -23,6 +23,7 @@
 
 package com.loopj.android.http;
 
+import android.text.TextUtils;
 import android.util.Log;
 
 import org.apache.http.Header;
@@ -116,6 +117,9 @@ public void addPart(String key, File file) {
     public void addPart(String key, File file, String type) {
         fileParts.add(new FilePart(key, file, normalizeContentType(type)));
     }
+    public void addPart(String key, File file, String type, String customFileName) {
+        fileParts.add(new FilePart(key, file, normalizeContentType(type), customFileName));
+    }
 
     public void addPart(String key, String streamName, InputStream inputStream, String type)
             throws IOException {
@@ -172,6 +176,11 @@ private void updateProgress(int count) {
         public File file;
         public byte[] header;
 
+        public FilePart(String key, File file, String type, String customFileName) {
+            header = createHeader(key, TextUtils.isEmpty(customFileName) ? file.getName() : customFileName, type);
+            this.file = file;
+        }
+
         public FilePart(String key, File file, String type) {
             header = createHeader(key, file.getName(), type);
             this.file = file;
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index f3380bad..c3ebb2f1 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -2,8 +2,8 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.loopj.android.http.sample"
-          android:versionCode="1"
-          android:versionName="1.0">
+          android:versionCode="3"
+          android:versionName="1.4.7">
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
@@ -40,6 +40,10 @@
         <activity android:name=".RangeResponseSample"/>
         <activity android:name=".Http401AuthSample"/>
         <activity android:name=".AsyncBackgroundThreadSample"/>
+        <activity android:name=".ContentTypeForHttpEntitySample"/>
+        <activity android:name=".ResumeDownloadSample"/>
+        <activity android:name=".PrePostProcessingSample"/>
+        <activity android:name=".DigestAuthSample"/>
 
         <service android:name=".services.ExampleIntentService"/>
     </application>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java b/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
index eb3b7a2b..15c818e8 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/AsyncBackgroundThreadSample.java
@@ -90,7 +90,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "https://httpbin.org/get";
+        return PROTOCOL + "httpbin.org/get";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java b/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java
index 94417798..dc3eea3d 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/BinarySample.java
@@ -46,7 +46,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/gzip";
+        return "https://httpbin.org/gzip";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java b/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java
new file mode 100644
index 00000000..111b91be
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/ContentTypeForHttpEntitySample.java
@@ -0,0 +1,72 @@
+package com.loopj.android.http.sample;
+
+import android.util.Log;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.RequestParams;
+import com.loopj.android.http.ResponseHandlerInterface;
+import com.loopj.android.http.TextHttpResponseHandler;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+
+import java.io.File;
+import java.io.IOException;
+
+public class ContentTypeForHttpEntitySample extends SampleParentActivity {
+    private static final String LOG_TAG = "ContentTypeForHttpEntitySample";
+
+    @Override
+    public ResponseHandlerInterface getResponseHandler() {
+        return new TextHttpResponseHandler() {
+            @Override
+            public void onFailure(int statusCode, Header[] headers, String responseString, Throwable throwable) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugResponse(LOG_TAG, responseString);
+                debugThrowable(LOG_TAG, throwable);
+            }
+
+            @Override
+            public void onSuccess(int statusCode, Header[] headers, String responseString) {
+                debugHeaders(LOG_TAG, headers);
+                debugStatusCode(LOG_TAG, statusCode);
+                debugResponse(LOG_TAG, responseString);
+            }
+        };
+    }
+
+    @Override
+    public String getDefaultURL() {
+        return "https://httpbin.org/post";
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return true;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_content_type_http_entity;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        RequestParams rParams = new RequestParams();
+        rParams.put("sample_key", "Sample String");
+        try {
+            File sample_file = File.createTempFile("temp_", "_handled", getCacheDir());
+            rParams.put("sample_file", sample_file);
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Cannot add sample file", e);
+        }
+        return client.post(this, URL, headers, rParams, "multipart/form-data", responseHandler);
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java b/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java
index 0eea3740..1a5dc4aa 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/DeleteSample.java
@@ -52,7 +52,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/delete";
+        return PROTOCOL + "httpbin.org/delete";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/DigestAuthSample.java b/sample/src/main/java/com/loopj/android/http/sample/DigestAuthSample.java
new file mode 100644
index 00000000..14fa5a7f
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/DigestAuthSample.java
@@ -0,0 +1,75 @@
+package com.loopj.android.http.sample;
+
+import android.net.Uri;
+import android.os.Bundle;
+import android.widget.EditText;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.ResponseHandlerInterface;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.auth.AuthScope;
+import org.apache.http.auth.UsernamePasswordCredentials;
+
+public class DigestAuthSample extends GetSample {
+
+    private EditText usernameField, passwordField;
+
+    @Override
+    public String getDefaultURL() {
+        return PROTOCOL + "httpbin.org/digest-auth/auth/user/passwd2";
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_digest_auth;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        usernameField = new EditText(this);
+        passwordField = new EditText(this);
+        usernameField.setHint("Username");
+        passwordField.setHint("Password");
+        usernameField.setText("user");
+        passwordField.setText("passwd2");
+        customFieldsLayout.addView(usernameField);
+        customFieldsLayout.addView(passwordField);
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        setCredentials(client, URL);
+        return client.get(this, URL, headers, null, responseHandler);
+    }
+
+    @Override
+    public boolean isCancelButtonAllowed() {
+        return true;
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return true;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    private void setCredentials(AsyncHttpClient client, String URL) {
+        Uri parsed = Uri.parse(URL);
+        client.clearCredentialsProvider();
+        client.setCredentials(
+                new AuthScope(parsed.getHost(), parsed.getPort() == -1 ? 80 : parsed.getPort()),
+                new UsernamePasswordCredentials(
+                        usernameField.getText().toString(),
+                        passwordField.getText().toString()
+                )
+        );
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java b/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
index e56a1ed9..fb97a41b 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
@@ -34,11 +34,13 @@ public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[]
         try {
             RequestParams params = new RequestParams();
             final String contentType = RequestParams.APPLICATION_OCTET_STREAM;
-            params.put("fileOne", createTempFile("fileOne", 1020), contentType);
+            params.put("fileOne", createTempFile("fileOne", 1020), contentType, "fileOne");
             params.put("fileTwo", createTempFile("fileTwo", 1030), contentType);
-            params.put("fileThree", createTempFile("fileThree", 1040), contentType);
+            params.put("fileThree", createTempFile("fileThree", 1040), contentType, "customFileThree");
             params.put("fileFour", createTempFile("fileFour", 1050), contentType);
-            params.put("fileFive", createTempFile("fileFive", 1060), contentType);
+            params.put("fileFive", createTempFile("fileFive", 1060), contentType, "testingFileFive");
+            params.setHttpEntityIsRepeatable(true);
+            params.setUseJsonStreamer(false);
             return client.post(this, URL, params, responseHandler);
         } catch (FileNotFoundException fnfException) {
             Log.e(LOG_TAG, "executeSample failed with FileNotFoundException", fnfException);
diff --git a/sample/src/main/java/com/loopj/android/http/sample/GzipSample.java b/sample/src/main/java/com/loopj/android/http/sample/GzipSample.java
index 2664b6f0..3cf000a6 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/GzipSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/GzipSample.java
@@ -27,6 +27,6 @@ public int getSampleTitle() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/gzip";
+        return PROTOCOL + "httpbin.org/gzip";
     }
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java b/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
index 1e89b65d..16122e0d 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/Http401AuthSample.java
@@ -69,7 +69,7 @@ public void retryRequest() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/basic-auth/" + SECRET_USERNAME + "/" + SECRET_PASSWORD;
+        return PROTOCOL + "httpbin.org/basic-auth/" + SECRET_USERNAME + "/" + SECRET_PASSWORD;
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java b/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java
index 4fcc07e0..d9ed5f3a 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/JsonSample.java
@@ -55,7 +55,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/headers";
+        return PROTOCOL + "httpbin.org/headers";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java b/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
index e9ac0b70..cb308af9 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/JsonStreamerSample.java
@@ -19,17 +19,19 @@
 package com.loopj.android.http.sample;
 
 import android.util.Log;
+
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.RequestHandle;
 import com.loopj.android.http.RequestParams;
 import com.loopj.android.http.ResponseHandlerInterface;
-import java.util.Iterator;
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.Iterator;
+
 /**
  * This sample demonstrates how to upload JSON data using streams, resulting
  * in a low-memory footprint even with extremely large data.
@@ -52,10 +54,10 @@ public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[]
         JSONObject body;
         if (isRequestBodyAllowed() && (body = getBodyTextAsJSON()) != null) {
             try {
-                Iterator<String> keys = body.keys();
+                Iterator keys = body.keys();
                 Log.d(LOG_TAG, "JSON data:");
                 while (keys.hasNext()) {
-                    String key = keys.next();
+                    String key = (String) keys.next();
                     Log.d(LOG_TAG, "  " + key + ": " + body.get(key));
                     params.put(key, body.get(key).toString());
                 }
@@ -64,7 +66,7 @@ public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[]
             }
         }
         return client.post(this, URL, headers, params,
-            RequestParams.APPLICATION_JSON, responseHandler);
+                RequestParams.APPLICATION_JSON, responseHandler);
     }
 
     @Override
@@ -88,7 +90,7 @@ protected JSONObject getBodyTextAsJSON() {
         if (bodyText != null) {
             try {
                 return new JSONObject(bodyText);
-            } catch(JSONException e) {
+            } catch (JSONException e) {
                 Log.e(LOG_TAG, "User's data is not a valid JSON object", e);
             }
         }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java b/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
index b30bb8b0..d2e734f4 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
@@ -69,7 +69,7 @@ public boolean isRequestHeadersAllowed() {
     @Override
     public String getDefaultURL() {
         // The base URL for testing cookies.
-        String url = "http://httpbin.org/cookies";
+        String url = PROTOCOL + "httpbin.org/cookies";
 
         // If the cookie store is empty, suggest a cookie.
         if(cookieStore.getCookies().isEmpty()) {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PostSample.java b/sample/src/main/java/com/loopj/android/http/sample/PostSample.java
index 311b4216..5cd9138d 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/PostSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PostSample.java
@@ -51,7 +51,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/post";
+        return PROTOCOL + "httpbin.org/post";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PrePostProcessingSample.java b/sample/src/main/java/com/loopj/android/http/sample/PrePostProcessingSample.java
index bae03e9b..3bbf400c 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/PrePostProcessingSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PrePostProcessingSample.java
@@ -65,7 +65,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/post";
+        return PROTOCOL + "httpbin.org/post";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PutSample.java b/sample/src/main/java/com/loopj/android/http/sample/PutSample.java
index 56260150..1b43c51f 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/PutSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PutSample.java
@@ -51,7 +51,7 @@ public boolean isRequestHeadersAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/put";
+        return PROTOCOL + "httpbin.org/put";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java b/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
index 766bc0f8..0907fac2 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/Redirect302Sample.java
@@ -72,7 +72,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/redirect/6";
+        return PROTOCOL + "httpbin.org/redirect/6";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ResumeDownloadSample.java b/sample/src/main/java/com/loopj/android/http/sample/ResumeDownloadSample.java
new file mode 100644
index 00000000..f7d332a9
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/ResumeDownloadSample.java
@@ -0,0 +1,85 @@
+package com.loopj.android.http.sample;
+
+import android.util.Log;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RangeFileAsyncHttpResponseHandler;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.ResponseHandlerInterface;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+
+import java.io.File;
+import java.io.IOException;
+
+public class ResumeDownloadSample extends SampleParentActivity {
+
+    private File downloadTarget;
+    private static final String LOG_TAG = "ResumeDownloadSample";
+
+    private File getDownloadTarget() {
+        try {
+            if (downloadTarget == null) {
+                downloadTarget = File.createTempFile("download_", "_resume", getCacheDir());
+            }
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Couldn't create cache file to download to");
+        }
+        return downloadTarget;
+    }
+
+    @Override
+    public ResponseHandlerInterface getResponseHandler() {
+        return new RangeFileAsyncHttpResponseHandler(getDownloadTarget()) {
+            @Override
+            public void onFailure(int statusCode, Header[] headers, Throwable throwable, File file) {
+                debugStatusCode(LOG_TAG, statusCode);
+                debugHeaders(LOG_TAG, headers);
+                debugThrowable(LOG_TAG, throwable);
+                if (file != null) {
+                    addView(getColoredView(LIGHTGREEN, "Download interrupted (" + statusCode + "): (bytes=" + file.length() + "), path: " + file.getAbsolutePath()));
+                }
+            }
+
+            @Override
+            public void onSuccess(int statusCode, Header[] headers, File file) {
+                debugStatusCode(LOG_TAG, statusCode);
+                debugHeaders(LOG_TAG, headers);
+                if (file != null) {
+                    addView(getColoredView(LIGHTGREEN, "Request succeeded (" + statusCode + "): (bytes=" + file.length() + "), path: " + file.getAbsolutePath()));
+                }
+            }
+        };
+    }
+
+    @Override
+    public String getDefaultHeaders() {
+        return "Range=bytes=10-20";
+    }
+
+    @Override
+    public String getDefaultURL() {
+        return PROTOCOL + "www.google.com/images/srpr/logo11w.png";
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return true;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_resume_download;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        return client.get(this, URL, headers, null, responseHandler);
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/RetryRequestSample.java b/sample/src/main/java/com/loopj/android/http/sample/RetryRequestSample.java
index ca3bab71..f9d66f6c 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/RetryRequestSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/RetryRequestSample.java
@@ -74,7 +74,7 @@ protected void onResume() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/ip";
+        return PROTOCOL + "httpbin.org/ip";
     }
 
     @Override
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleInterface.java b/sample/src/main/java/com/loopj/android/http/sample/SampleInterface.java
index 0e8d2bdf..225ff6a7 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleInterface.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleInterface.java
@@ -56,6 +56,8 @@
 
     String getDefaultURL();
 
+    String getDefaultHeaders();
+
     boolean isRequestHeadersAllowed();
 
     boolean isRequestBodyAllowed();
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index d596a5c3..9336bf2b 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -18,11 +18,15 @@
 
 package com.loopj.android.http.sample;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.graphics.Color;
+import android.os.Build;
 import android.os.Bundle;
 import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
@@ -37,8 +41,11 @@
 
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.message.BasicHeader;
+import org.apache.http.protocol.HttpContext;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -47,26 +54,34 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.protocol.HttpContext;
 
 public abstract class SampleParentActivity extends Activity implements SampleInterface {
 
     private AsyncHttpClient asyncHttpClient = new AsyncHttpClient() {
 
-      @Override
-      protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
-        AsyncHttpRequest httpRequest = getHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context);
-        return httpRequest == null
-            ? super.newAsyncHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context)
-            : httpRequest;
-      }
+        @Override
+        protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
+            AsyncHttpRequest httpRequest = getHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context);
+            return httpRequest == null
+                    ? super.newAsyncHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context)
+                    : httpRequest;
+        }
     };
     private EditText urlEditText, headersEditText, bodyEditText;
     private LinearLayout responseLayout;
+    public LinearLayout customFieldsLayout;
     private final List<RequestHandle> requestHandles = new LinkedList<RequestHandle>();
+    private static final String LOG_TAG = "SampleParentActivity";
 
+    private static final int MENU_USE_HTTPS = 0;
+    private static final int MENU_CLEAR_VIEW = 1;
+
+    private boolean useHttps = true;
+
+    protected static final String PROTOCOL_HTTP = "http://";
+    protected static final String PROTOCOL_HTTPS = "https://";
+
+    protected static String PROTOCOL = PROTOCOL_HTTPS;
     protected static final int LIGHTGREEN = Color.parseColor("#00FF66");
     protected static final int LIGHTRED = Color.parseColor("#FF3300");
     protected static final int YELLOW = Color.parseColor("#FFFF00");
@@ -78,9 +93,12 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.parent_layout);
         setTitle(getSampleTitle());
 
+        setHomeAsUpEnabled();
+
         urlEditText = (EditText) findViewById(R.id.edit_url);
         headersEditText = (EditText) findViewById(R.id.edit_headers);
         bodyEditText = (EditText) findViewById(R.id.edit_body);
+        customFieldsLayout = (LinearLayout) findViewById(R.id.layout_custom);
         Button runButton = (Button) findViewById(R.id.button_run);
         Button cancelButton = (Button) findViewById(R.id.button_cancel);
         LinearLayout headersLayout = (LinearLayout) findViewById(R.id.layout_headers);
@@ -88,6 +106,7 @@ protected void onCreate(Bundle savedInstanceState) {
         responseLayout = (LinearLayout) findViewById(R.id.layout_response);
 
         urlEditText.setText(getDefaultURL());
+        headersEditText.setText(getDefaultHeaders());
 
         bodyLayout.setVisibility(isRequestBodyAllowed() ? View.VISIBLE : View.GONE);
         headersLayout.setVisibility(isRequestHeadersAllowed() ? View.VISIBLE : View.GONE);
@@ -103,6 +122,40 @@ protected void onCreate(Bundle savedInstanceState) {
         }
     }
 
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        MenuItem useHttpsMenuItem = menu.findItem(MENU_USE_HTTPS);
+        if (useHttpsMenuItem != null) {
+            useHttpsMenuItem.setChecked(useHttps);
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        menu.add(Menu.NONE, MENU_USE_HTTPS, Menu.NONE, R.string.menu_use_https).setCheckable(true);
+        menu.add(Menu.NONE, MENU_CLEAR_VIEW, Menu.NONE, R.string.menu_clear_view);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case MENU_USE_HTTPS:
+                useHttps = !useHttps;
+                PROTOCOL = useHttps ? PROTOCOL_HTTPS : PROTOCOL_HTTP;
+                urlEditText.setText(getDefaultURL());
+                return true;
+            case MENU_CLEAR_VIEW:
+                clearOutputs();
+                return true;
+            case android.R.id.home:
+                finish();
+                return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
     @Override
     public AsyncHttpRequest getHttpRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
         return null;
@@ -160,10 +213,11 @@ public void onClick(View v) {
 
                     String headerName = line.substring(0, equalSignPos).trim();
                     String headerValue = line.substring(1 + equalSignPos).trim();
+                    Log.d(LOG_TAG, String.format("Added header: [%s:%s]", headerName, headerValue));
 
                     headers.add(new BasicHeader(headerName, headerValue));
                 } catch (Throwable t) {
-                    Log.e("SampleParentActivity", "Not a valid header line: " + line, t);
+                    Log.e(LOG_TAG, "Not a valid header line: " + line, t);
                 }
             }
         }
@@ -181,7 +235,7 @@ public HttpEntity getRequestEntity() {
             try {
                 return new StringEntity(bodyText);
             } catch (UnsupportedEncodingException e) {
-                Log.e("SampleParentActivity", "cannot create String entity", e);
+                Log.e(LOG_TAG, "cannot create String entity", e);
             }
         }
         return null;
@@ -193,8 +247,8 @@ public String getUrlText() {
 
     public String getUrlText(String defaultText) {
         return urlEditText != null && urlEditText.getText() != null
-            ? urlEditText.getText().toString()
-            : defaultText;
+                ? urlEditText.getText().toString()
+                : defaultText;
     }
 
     public String getBodyText() {
@@ -203,8 +257,8 @@ public String getBodyText() {
 
     public String getBodyText(String defaultText) {
         return bodyEditText != null && bodyEditText.getText() != null
-            ? bodyEditText.getText().toString()
-            : defaultText;
+                ? bodyEditText.getText().toString()
+                : defaultText;
     }
 
     public String getHeadersText() {
@@ -213,8 +267,8 @@ public String getHeadersText() {
 
     public String getHeadersText(String defaultText) {
         return headersEditText != null && headersEditText.getText() != null
-            ? headersEditText.getText().toString()
-            : defaultText;
+                ? headersEditText.getText().toString()
+                : defaultText;
     }
 
     protected final void debugHeaders(String TAG, Header[] headers) {
@@ -276,6 +330,11 @@ protected View getColoredView(int bgColor, String msg) {
         return tv;
     }
 
+    @Override
+    public String getDefaultHeaders() {
+        return null;
+    }
+
     protected final void addView(View v) {
         responseLayout.addView(v);
     }
@@ -296,4 +355,12 @@ public AsyncHttpClient getAsyncHttpClient() {
     public void setAsyncHttpClient(AsyncHttpClient client) {
         this.asyncHttpClient = client;
     }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    private void setHomeAsUpEnabled() {
+        if (Integer.valueOf(Build.VERSION.SDK) >= 11) {
+            if (getActionBar() != null)
+                getActionBar().setDisplayHomeAsUpEnabled(true);
+        }
+    }
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
index 752559e7..2bf84229 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
@@ -56,7 +56,7 @@ public boolean isCancelButtonAllowed() {
 
     @Override
     public String getDefaultURL() {
-        return "http://httpbin.org/delay/6";
+        return PROTOCOL + "httpbin.org/delay/6";
     }
 
     private synchronized void setStatus(int id, String status) {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index 24b11a24..099dc134 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -30,30 +30,33 @@
 
 public class WaypointsActivity extends ListActivity {
 
-    private static final SampleConfig[] samplesConfig = new SampleConfig[] {
-        new SampleConfig(R.string.title_get_sample, GetSample.class),
-        new SampleConfig(R.string.title_post_sample, PostSample.class),
-        new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
-        new SampleConfig(R.string.title_put_sample, PutSample.class),
-        new SampleConfig(R.string.title_json_sample, JsonSample.class),
-        new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
-        new SampleConfig(R.string.title_sax_example, SaxSample.class),
-        new SampleConfig(R.string.title_file_sample, FileSample.class),
-        new SampleConfig(R.string.title_binary_sample, BinarySample.class),
-        new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
-        new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
-        new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
-        new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
-        new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
-        new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
-        new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
-        new SampleConfig(R.string.title_post_files, FilesSample.class),
-        new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
-        new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
-        new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
-        new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
-        new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class),
-        new SampleConfig(R.string.title_pre_post_processing, PrePostProcessingSample.class)
+    private static final SampleConfig[] samplesConfig = new SampleConfig[]{
+            new SampleConfig(R.string.title_get_sample, GetSample.class),
+            new SampleConfig(R.string.title_post_sample, PostSample.class),
+            new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
+            new SampleConfig(R.string.title_put_sample, PutSample.class),
+            new SampleConfig(R.string.title_json_sample, JsonSample.class),
+            new SampleConfig(R.string.title_json_streamer_sample, JsonStreamerSample.class),
+            new SampleConfig(R.string.title_sax_example, SaxSample.class),
+            new SampleConfig(R.string.title_file_sample, FileSample.class),
+            new SampleConfig(R.string.title_binary_sample, BinarySample.class),
+            new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
+            new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
+            new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
+            new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
+            new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
+            new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
+            new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
+            new SampleConfig(R.string.title_post_files, FilesSample.class),
+            new SampleConfig(R.string.title_persistent_cookies, PersistentCookiesSample.class),
+            new SampleConfig(R.string.title_custom_ca, CustomCASample.class),
+            new SampleConfig(R.string.title_retry_handler, RetryRequestSample.class),
+            new SampleConfig(R.string.title_range_sample, RangeResponseSample.class),
+            new SampleConfig(R.string.title_401_unauth, Http401AuthSample.class),
+            new SampleConfig(R.string.title_pre_post_processing, PrePostProcessingSample.class),
+            new SampleConfig(R.string.title_content_type_http_entity, ContentTypeForHttpEntitySample.class),
+            new SampleConfig(R.string.title_resume_download, ResumeDownloadSample.class),
+            new SampleConfig(R.string.title_digest_auth, DigestAuthSample.class)
     };
 
     @Override
@@ -82,8 +85,8 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
         final Class targetClass;
 
         SampleConfig(int titleId, Class targetClass) {
-          this.titleId = titleId;
-          this.targetClass = targetClass;
+            this.titleId = titleId;
+            this.targetClass = targetClass;
         }
 
     }
diff --git a/sample/src/main/res/layout-v14/parent_layout.xml b/sample/src/main/res/layout-v14/parent_layout.xml
index 97ba749b..cef3029d 100755
--- a/sample/src/main/res/layout-v14/parent_layout.xml
+++ b/sample/src/main/res/layout-v14/parent_layout.xml
@@ -84,6 +84,13 @@
 
         </LinearLayout>
 
+        <LinearLayout
+            android:id="@+id/layout_custom"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+        </LinearLayout>
+
         <LinearLayout
             android:id="@+id/layout_response"
             android:layout_width="fill_parent"
diff --git a/sample/src/main/res/layout/parent_layout.xml b/sample/src/main/res/layout/parent_layout.xml
index d2c7dad6..3a54fcd9 100755
--- a/sample/src/main/res/layout/parent_layout.xml
+++ b/sample/src/main/res/layout/parent_layout.xml
@@ -82,6 +82,13 @@
 
         </LinearLayout>
 
+        <LinearLayout
+            android:id="@+id/layout_custom"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+        </LinearLayout>
+
         <LinearLayout
             android:id="@+id/layout_response"
             android:layout_width="fill_parent"
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index 61c0f0bf..f8465168 100755
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -9,6 +9,9 @@
     <string name="button_run">Run</string>
     <string name="button_cancel">Cancel</string>
 
+    <string name="menu_use_https">Use HTTPS</string>
+    <string name="menu_clear_view">Clear Outputs</string>
+
     <string name="label_headers">Headers (key=val, one per line)</string>
     <string name="label_req_body">Request body</string>
     <string name="label_credentials">Server requests authentication.\nTo gain access, enter:\n\nUsername: %1$s\nPassword: %2$s</string>
@@ -37,4 +40,7 @@
     <string name="title_401_unauth">401 basic authentication</string>
     <string name="title_pre_post_processing">Pre-/Post-processing</string>
     <string name="title_async_background_thread">Async on background thread</string>
+    <string name="title_content_type_http_entity">Content-Type with HttpEntity</string>
+    <string name="title_resume_download">Resuming Download</string>
+    <string name="title_digest_auth">Digest Authentication</string>
 </resources>
