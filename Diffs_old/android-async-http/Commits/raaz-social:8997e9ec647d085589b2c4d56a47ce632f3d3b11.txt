diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 14afd14c..340c414a 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -180,7 +180,7 @@ public void process(HttpResponse response, HttpContext context) {
             }
         });
 
-        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, mDefaultHttpClient, "async");      
+        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, mDefaultHttpClient);      
         
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();        
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
@@ -213,8 +213,8 @@ public HttpContext getHttpContext() {
      * Sets an optional CookieStore to use when making requests
      * @param cookieStore The CookieStore implementation to use, usually an instance of {@link PersistentCookieStore}
      */
-    public void setCookieStore(CookieStore cookieStore) {
-        httpContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
+    public void setCookieStore(CookieStore cookieStore) {      
+        mDefaultHttpClient.setCookieStore(cookieStore);
     }
 
     /**
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index 2235d107..f3b789ce 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -28,6 +28,7 @@
 import com.jakewharton.DiskLruCache.Snapshot;
 import com.loopj.android.http.RetryHandler;
 import com.twofours.surespot.common.FileUtils;
+import com.twofours.surespot.common.SurespotConstants;
 import com.twofours.surespot.common.WebClientDevWrapper;
 
 public class SurespotCachingHttpClient extends CachingHttpClient {
@@ -51,7 +52,9 @@ public SurespotCachingHttpClient(Context context, AbstractHttpClient defaultHttp
 		log.enableTrace(true);
 		log.enableWarn(true);
 
-		mAbstractHttpClient = WebClientDevWrapper.wrapClient(defaultHttpClient);		
+		WebClientDevWrapper.wrapClient(defaultHttpClient);
+		mAbstractHttpClient = defaultHttpClient;
+						
 	}
 
 	private static HttpCacheStorage getHttpCacheStorage(Context context, String cacheName) throws IOException {
@@ -62,13 +65,9 @@ private static HttpCacheStorage getHttpCacheStorage(Context context, String cach
 	}
 
 
-	public static SurespotCachingHttpClient createSurespotDiskCachingHttpClient(Context context, AbstractHttpClient abstractClient, String cacheName)
+	public static SurespotCachingHttpClient createSurespotDiskCachingHttpClient(Context context, AbstractHttpClient abstractClient)
 			throws IOException {
-	//	if (mInstance == null) {
-			return new SurespotCachingHttpClient(context, abstractClient, cacheName);
-		//	mInstance = client;
-	//	}
-		//return mInstance;
+			return new SurespotCachingHttpClient(context, abstractClient, "http");
 	}
 
 	private static String generateKey(String key) {
