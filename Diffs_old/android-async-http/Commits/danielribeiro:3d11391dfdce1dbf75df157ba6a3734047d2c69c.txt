diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 6053a569..25fb7633 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -57,7 +57,6 @@
 import org.apache.http.conn.scheme.SchemeRegistry;
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.entity.HttpEntityWrapper;
-import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpParams;
@@ -102,7 +101,7 @@
     private static int maxConnections = DEFAULT_MAX_CONNECTIONS;
     private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
 
-    private final DefaultHttpClient httpClient;
+    private final NoRedirectHttpClient httpClient;
     private final HttpContext httpContext;
     private ThreadPoolExecutor threadPool;
     private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
@@ -133,7 +132,7 @@ public AsyncHttpClient() {
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
 
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        httpClient = new DefaultHttpClient(cm, httpParams);
+        httpClient = new NoRedirectHttpClient(cm, httpParams);
         httpClient.addRequestInterceptor(new HttpRequestInterceptor() {
             public void process(HttpRequest request, HttpContext context) {
                 if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
@@ -548,7 +547,7 @@ public void delete(Context context, String url, Header[] headers, AsyncHttpRespo
 
 
     // Private stuff
-    protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
+    protected void sendRequest(NoRedirectHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
         if(contentType != null) {
             uriRequest.addHeader("Content-Type", contentType);
         }
diff --git a/src/com/loopj/android/http/NoRedirectHttpClient.java b/src/com/loopj/android/http/NoRedirectHttpClient.java
index e54c9053..3b37334f 100644
--- a/src/com/loopj/android/http/NoRedirectHttpClient.java
+++ b/src/com/loopj/android/http/NoRedirectHttpClient.java
@@ -1,9 +1,23 @@
 package com.loopj.android.http;
 
 import org.apache.http.client.RedirectHandler;
+import org.apache.http.conn.ClientConnectionManager;
 import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.params.HttpParams;
 
 public class NoRedirectHttpClient extends DefaultHttpClient {
+    public NoRedirectHttpClient(ClientConnectionManager conman, HttpParams params) {
+        super(conman, params);
+    }
+
+    public NoRedirectHttpClient(HttpParams params) {
+        super(params);
+    }
+
+    public NoRedirectHttpClient() {
+        super();
+    }
+
     @Override
     protected RedirectHandler createRedirectHandler() {
         return new BlockingRedirectHandler();
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 8f55991e..1eca4349 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -1,7 +1,6 @@
 package com.loopj.android.http;
 
 import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.protocol.HttpContext;
 
 import android.content.Context;
@@ -51,7 +50,7 @@ public int getResponseCode() {
 	}
 
 	// Private stuff
-	protected void sendRequest(DefaultHttpClient client,
+	protected void sendRequest(NoRedirectHttpClient client,
 			HttpContext httpContext, HttpUriRequest uriRequest,
 			String contentType, AsyncHttpResponseHandler responseHandler,
 			Context context) {
