diff --git a/.project b/.project
index ff1f2892..68ceaa9a 100644
--- a/.project
+++ b/.project
@@ -39,7 +39,7 @@
 		<link>
 			<name>libs/httpclientandroidlib-1.1.1.jar</name>
 			<type>1</type>
-			<locationURI>PARENT-3-PROJECT_LOC/google/httpclientandroidlib/script/httpclientandroidlib-1.1.1.jar</locationURI>
+			<locationURI>PARENT-3-PROJECT_LOC/google/adam-httpclientandroidlib/script/httpclientandroidlib-1.1.1.jar</locationURI>
 		</link>
 	</linkedResources>
 </projectDescription>
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 340c414a..24807ba9 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -33,39 +33,21 @@
 
 import android.content.Context;
 import ch.boye.httpclientandroidlib.Header;
-import ch.boye.httpclientandroidlib.HeaderElement;
 import ch.boye.httpclientandroidlib.HttpEntity;
-import ch.boye.httpclientandroidlib.HttpHost;
-import ch.boye.httpclientandroidlib.HttpRequest;
-import ch.boye.httpclientandroidlib.HttpRequestInterceptor;
-import ch.boye.httpclientandroidlib.HttpResponse;
-import ch.boye.httpclientandroidlib.HttpResponseInterceptor;
-import ch.boye.httpclientandroidlib.HttpVersion;
 import ch.boye.httpclientandroidlib.auth.AuthScope;
 import ch.boye.httpclientandroidlib.auth.UsernamePasswordCredentials;
 import ch.boye.httpclientandroidlib.client.CookieStore;
-import ch.boye.httpclientandroidlib.client.HttpClient;
 import ch.boye.httpclientandroidlib.client.methods.HttpDelete;
 import ch.boye.httpclientandroidlib.client.methods.HttpEntityEnclosingRequestBase;
 import ch.boye.httpclientandroidlib.client.methods.HttpGet;
 import ch.boye.httpclientandroidlib.client.methods.HttpPost;
 import ch.boye.httpclientandroidlib.client.methods.HttpPut;
 import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
-import ch.boye.httpclientandroidlib.client.protocol.ClientContext;
 import ch.boye.httpclientandroidlib.conn.params.ConnManagerParams;
-import ch.boye.httpclientandroidlib.conn.params.ConnPerRoute;
-import ch.boye.httpclientandroidlib.conn.params.ConnPerRouteBean;
-import ch.boye.httpclientandroidlib.conn.routing.HttpRoute;
-import ch.boye.httpclientandroidlib.conn.scheme.PlainSocketFactory;
 import ch.boye.httpclientandroidlib.conn.scheme.Scheme;
-import ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry;
 import ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;
 import ch.boye.httpclientandroidlib.entity.HttpEntityWrapper;
-import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
-import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
-import ch.boye.httpclientandroidlib.impl.conn.PoolingClientConnectionManager;
-import ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager;
-import ch.boye.httpclientandroidlib.params.BasicHttpParams;
+import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
 import ch.boye.httpclientandroidlib.params.HttpConnectionParams;
 import ch.boye.httpclientandroidlib.params.HttpParams;
 import ch.boye.httpclientandroidlib.params.HttpProtocolParams;
@@ -96,20 +78,7 @@
  * </pre>
  */
 public class AsyncHttpClient {
-    private static final String VERSION = "1.4.1";
-
-    private static final int DEFAULT_MAX_CONNECTIONS = 200;
-    private static final int DEFAULT_SOCKET_TIMEOUT = 15 * 1000;
-    private static final int DEFAULT_MAX_RETRIES = 5;
-    private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
-    private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
-    private static final String ENCODING_GZIP = "gzip";
-
-    private static int maxConnections = DEFAULT_MAX_CONNECTIONS;
-    private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
-
     private final SurespotCachingHttpClient cachingHttpClient;    
-    private final DefaultHttpClient mDefaultHttpClient;
     private final HttpContext httpContext;
     private ThreadPoolExecutor threadPool;
     private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
@@ -121,67 +90,8 @@
      * @throws IOException 
      */
     public AsyncHttpClient(Context context) throws IOException {
-        BasicHttpParams httpParams = new BasicHttpParams();
-
-        
-        ConnManagerParams.setTimeout(httpParams, socketTimeout);
-        ConnManagerParams.setMaxConnectionsPerRoute(httpParams, new ConnPerRouteBean(maxConnections));
-        ConnManagerParams.setMaxTotalConnections(httpParams, DEFAULT_MAX_CONNECTIONS);
-        
-        
-
-        HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
-        HttpConnectionParams.setConnectionTimeout(httpParams, socketTimeout);
-        HttpConnectionParams.setTcpNoDelay(httpParams, true);
-        HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
-
-        HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
-        HttpProtocolParams.setUserAgent(httpParams, String.format("android-async-http/%s (http://loopj.com/android-async-http)", VERSION));
-
-        SchemeRegistry schemeRegistry = new SchemeRegistry();
-      //  schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
-        //schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-        ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);    
-     
-     //   PoolingClientConnectionManager pm = new PoolingClientConnectionManager(schemeRegistry);
-     //   pm.setDefaultMaxPerRoute(200);
-        
-        
-        
+        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context);      
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        mDefaultHttpClient = new DefaultHttpClient(cm, httpParams);        
-        mDefaultHttpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
-        mDefaultHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
-            public void process(HttpRequest request, HttpContext context) {
-                if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
-                    request.addHeader(HEADER_ACCEPT_ENCODING, ENCODING_GZIP);
-                }
-                for (String header : clientHeaderMap.keySet()) {
-                    request.addHeader(header, clientHeaderMap.get(header));
-                }
-            }
-        });
-
-        mDefaultHttpClient.addResponseInterceptor(new HttpResponseInterceptor() {
-            public void process(HttpResponse response, HttpContext context) {
-                final HttpEntity entity = response.getEntity();
-                if (entity == null) {
-                    return;
-                }
-                final Header encoding = entity.getContentEncoding();
-                if (encoding != null) {
-                    for (HeaderElement element : encoding.getElements()) {
-                        if (element.getName().equalsIgnoreCase(ENCODING_GZIP)) {
-                            response.setEntity(new InflatingEntity(response.getEntity()));
-                            break;
-                        }
-                    }
-                }
-            }
-        });
-
-        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, mDefaultHttpClient);      
-        
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();        
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
@@ -196,8 +106,8 @@ public SurespotCachingHttpClient getCachingHttpClient() {
         return this.cachingHttpClient;
     }
     
-    public DefaultHttpClient getDefaultHttpClient() {
-    	return mDefaultHttpClient;
+    public AbstractHttpClient getAbstractHttpClient() {
+    	return cachingHttpClient.getAbstractHttpClient();
     }
 
     /**
@@ -214,7 +124,7 @@ public HttpContext getHttpContext() {
      * @param cookieStore The CookieStore implementation to use, usually an instance of {@link PersistentCookieStore}
      */
     public void setCookieStore(CookieStore cookieStore) {      
-        mDefaultHttpClient.setCookieStore(cookieStore);
+        cachingHttpClient.getAbstractHttpClient().setCookieStore(cookieStore);
     }
 
     /**
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 33fc4663..de0bc8ab 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -32,15 +32,12 @@
 import java.util.Iterator;
 
 import javax.net.ssl.SSLException;
-import javax.net.ssl.SSLHandshakeException;
 
 import android.os.SystemClock;
-
 import android.util.Log;
 import ch.boye.httpclientandroidlib.NoHttpResponseException;
 import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
 import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
-import ch.boye.httpclientandroidlib.conn.HttpHostConnectException;
 import ch.boye.httpclientandroidlib.protocol.ExecutionContext;
 import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index f3b789ce..94c76665 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -13,6 +13,7 @@
 import android.util.Log;
 import ch.boye.httpclientandroidlib.HttpRequestInterceptor;
 import ch.boye.httpclientandroidlib.HttpResponseInterceptor;
+import ch.boye.httpclientandroidlib.HttpVersion;
 import ch.boye.httpclientandroidlib.client.CookieStore;
 import ch.boye.httpclientandroidlib.client.CredentialsProvider;
 import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
@@ -20,60 +21,92 @@
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheStorage;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateCallback;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateException;
+import ch.boye.httpclientandroidlib.conn.params.ConnManagerParams;
+import ch.boye.httpclientandroidlib.conn.params.ConnPerRouteBean;
+import ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry;
 import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
+import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
 import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
+import ch.boye.httpclientandroidlib.impl.conn.PoolingClientConnectionManager;
+import ch.boye.httpclientandroidlib.params.BasicHttpParams;
+import ch.boye.httpclientandroidlib.params.HttpConnectionParams;
+import ch.boye.httpclientandroidlib.params.HttpProtocolParams;
 
 import com.jakewharton.DiskLruCache;
 import com.jakewharton.DiskLruCache.Snapshot;
 import com.loopj.android.http.RetryHandler;
 import com.twofours.surespot.common.FileUtils;
-import com.twofours.surespot.common.SurespotConstants;
 import com.twofours.surespot.common.WebClientDevWrapper;
 
 public class SurespotCachingHttpClient extends CachingHttpClient {
+
+	private static final int DEFAULT_MAX_CONNECTIONS = 200;
+	private static final int DEFAULT_SOCKET_TIMEOUT = 15 * 1000;
+	private static final int DEFAULT_MAX_RETRIES = 5;
+	private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
+	private static int maxConnections = DEFAULT_MAX_CONNECTIONS;
+	private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
+
 	private AbstractHttpClient mAbstractHttpClient;
-	private static SurespotHttpCacheStorage mCacheStorage;	
-	//private static SurespotCachingHttpClient mInstance = null;
+	private static SurespotHttpCacheStorage mCacheStorage;
 
-	
 	/**
 	 * Use disk cache only
 	 * 
 	 * @param context
-	 * @param defaultHttpClient
+	 * @param abstractHttpClient
 	 * @throws IOException
 	 */
-	public SurespotCachingHttpClient(Context context, AbstractHttpClient defaultHttpClient, String cacheName) throws IOException {
-		super(defaultHttpClient, getHttpCacheStorage(context, cacheName), getDiskCacheConfig());
+	public SurespotCachingHttpClient(Context context, AbstractHttpClient abstractHttpClient) throws IOException {
+		super(abstractHttpClient, getHttpCacheStorage(context), getDiskCacheConfig());
 		log.enableDebug(true);
 		log.enableError(true);
 		log.enableInfo(true);
 		log.enableTrace(true);
 		log.enableWarn(true);
 
-		WebClientDevWrapper.wrapClient(defaultHttpClient);
-		mAbstractHttpClient = defaultHttpClient;
-						
+		mAbstractHttpClient = abstractHttpClient;
+
 	}
 
-	private static HttpCacheStorage getHttpCacheStorage(Context context, String cacheName) throws IOException {
+	private static HttpCacheStorage getHttpCacheStorage(Context context) throws IOException {
 		if (mCacheStorage == null) {
-			mCacheStorage = new SurespotHttpCacheStorage(context, cacheName);
+			mCacheStorage = new SurespotHttpCacheStorage(context);
 		}
 		return mCacheStorage;
 	}
 
+	public static SurespotCachingHttpClient createSurespotDiskCachingHttpClient(Context context) throws IOException {
+
+		BasicHttpParams httpParams = new BasicHttpParams();
+
+		ConnManagerParams.setTimeout(httpParams, socketTimeout);
+		ConnManagerParams.setMaxConnectionsPerRoute(httpParams, new ConnPerRouteBean(maxConnections));
+		ConnManagerParams.setMaxTotalConnections(httpParams, DEFAULT_MAX_CONNECTIONS);
+
+		HttpConnectionParams.setSoTimeout(httpParams, socketTimeout);
+		HttpConnectionParams.setConnectionTimeout(httpParams, socketTimeout);
+		HttpConnectionParams.setTcpNoDelay(httpParams, true);
+		HttpConnectionParams.setSocketBufferSize(httpParams, DEFAULT_SOCKET_BUFFER_SIZE);
 
-	public static SurespotCachingHttpClient createSurespotDiskCachingHttpClient(Context context, AbstractHttpClient abstractClient)
-			throws IOException {
-			return new SurespotCachingHttpClient(context, abstractClient, "http");
+		HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
+
+		SchemeRegistry schemeRegistry = new SchemeRegistry();
+
+		PoolingClientConnectionManager pm = new PoolingClientConnectionManager(schemeRegistry);
+		pm.setDefaultMaxPerRoute(100);
+
+		DefaultHttpClient defaultHttpClient = new DefaultHttpClient(pm, httpParams);
+		defaultHttpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
+		WebClientDevWrapper.wrapClient(defaultHttpClient);
+		return new SurespotCachingHttpClient(context, defaultHttpClient);
 	}
 
 	private static String generateKey(String key) {
 		return md5(key);
 	}
-	
+
 	public static String md5(String s) {
 		try {
 			// Create MD5 Hash
@@ -94,20 +127,15 @@ public static String md5(String s) {
 		return "";
 	}
 
-
 	public static class SurespotHttpCacheStorage implements HttpCacheStorage {
 		private static final String TAG = "SurespotHttpCacheStorage";
 		private com.jakewharton.DiskLruCache mCache;
 		private File mCacheDir;
 
-		public SurespotHttpCacheStorage(Context context, String cacheName) throws IOException {
-
-			mCacheDir = FileUtils.getHttpCacheDir(context, cacheName);
-
+		public SurespotHttpCacheStorage(Context context) throws IOException {
+			mCacheDir = FileUtils.getHttpCacheDir(context, "http");
 			Log.v(TAG, "storage cache dir: " + mCacheDir);
-
 			mCache = DiskLruCache.open(mCacheDir, 200, 1, Integer.MAX_VALUE);
-
 		}
 
 		@Override
@@ -183,14 +211,14 @@ public void clearCache() {
 
 			clearCache(mCacheDir);
 		}
-		
+
 		public void close() {
 			try {
 				mCache.flush();
-			//	mCache.close();
+				// mCache.close();
 			}
 			catch (IOException e) {
-				Log.w(TAG, "close",e);
+				Log.w(TAG, "close", e);
 			}
 		}
 
@@ -208,21 +236,12 @@ private void clearCache(File cacheDir) {
 			}
 		}
 
-		
-
 	}
 
 	public void clearCache() {
 		mCacheStorage.clearCache();
 	}
 	
-	private static CacheConfig getMemoryCacheConfig() {
-
-		CacheConfig cacheConfig = new CacheConfig();
-		cacheConfig.setMaxCacheEntries(50);
-		cacheConfig.setMaxObjectSizeBytes(250000);
-		return cacheConfig;
-	}
 
 	public static CacheConfig getDiskCacheConfig() {
 
@@ -231,7 +250,7 @@ public static CacheConfig getDiskCacheConfig() {
 		cacheConfig.setMaxObjectSizeBytes(250000);
 		return cacheConfig;
 	}
-	
+
 	public HttpRequestRetryHandler getHttpRequestRetryHandler() {
 		return mAbstractHttpClient.getHttpRequestRetryHandler();
 	}
@@ -253,11 +272,15 @@ public void setHttpRequestRetryHandler(RetryHandler retryHandler) {
 		mAbstractHttpClient.setHttpRequestRetryHandler(retryHandler);
 
 	}
-	
+
 	public void setCookieStore(CookieStore cookieStore) {
 		mAbstractHttpClient.setCookieStore(cookieStore);
 	}
 
+	public AbstractHttpClient getAbstractHttpClient() {
+		return mAbstractHttpClient;
+	}
+
 	@Override
 	public boolean isSharedCache() {
 		return true;
