diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6c6ba088..fdf5aa94 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -113,7 +113,7 @@ public void onSuccess(String content) {}
      * @param statusCode the status code of the response
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(int statusCode, String content) {
+    public void onSuccess(Header[] headers, int statusCode, String content) {
         onSuccess(content);
     }
 
@@ -139,8 +139,8 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(int statusCode, String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody}));
+    protected void sendSuccessMessage(Header[] headers, int statusCode, String responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, headers, new Object[]{new Integer(statusCode), responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -164,8 +164,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(int statusCode, String responseBody) {
-        onSuccess(statusCode, responseBody);
+    protected void handleSuccessMessage(Header[] headers, int statusCode, String responseBody) {
+        onSuccess(headers, statusCode, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -181,7 +181,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[])msg.obj;
-                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1]);
+                handleSuccessMessage(Header[] response[0], ((Integer) response[0]).intValue(), (String) response[1]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
@@ -234,7 +234,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(status.getStatusCode(), responseBody);
+            sendSuccessMessage(response.getAllHeaders(), status.getStatusCode(), responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 084bf339..e5783e3d 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -69,7 +69,7 @@ public void onSuccess(JSONArray response) {}
      * @param statusCode the status code of the response
      * @param response the parsed json object found in the server response (if any)
      */
-    public void onSuccess(int statusCode, JSONObject response) {
+    public void onSuccess(Header[] headers, int statusCode, JSONObject response) {
         onSuccess(response);
     }
 
@@ -81,7 +81,7 @@ public void onSuccess(int statusCode, JSONObject response) {
      * @param statusCode the status code of the response
      * @param response the parsed json array found in the server response (if any)
      */
-    public void onSuccess(int statusCode, JSONArray response) {
+    public void onSuccess(Header[] headers, int statusCode, JSONArray response) {
         onSuccess(response);
     }
 
@@ -94,16 +94,16 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
     //
 
     @Override
-    protected void sendSuccessMessage(int statusCode, String responseBody) {
+    protected void sendSuccessMessage(Header[] headers, int statusCode, String responseBody) {
     	if (statusCode != HttpStatus.SC_NO_CONTENT){
 	        try {
 	            Object jsonResponse = parseResponse(responseBody);
-	            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse}));
+	            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{headers, statusCode, jsonResponse}));
 	        } catch(JSONException e) {
 	            sendFailureMessage(e, responseBody);
 	        }
     	}else{
-    		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
+    		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{headers, statusCode, new JSONObject()}));
     	}
     }
 
@@ -117,18 +117,18 @@ protected void handleMessage(Message msg) {
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
                 Object[] response = (Object[]) msg.obj;
-                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1]);
+                handleSuccessJsonMessage((Headers[])response[0], ((Integer) response[1]).intValue(), response[2]);
                 break;
             default:
                 super.handleMessage(msg);
         }
     }
 
-    protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse) {
+    protected void handleSuccessJsonMessage(Headers[] headers, int statusCode, Object jsonResponse) {
         if(jsonResponse instanceof JSONObject) {
-            onSuccess(statusCode, (JSONObject)jsonResponse);
+            onSuccess(headers, statusCode, (JSONObject)jsonResponse);
         } else if(jsonResponse instanceof JSONArray) {
-            onSuccess(statusCode, (JSONArray)jsonResponse);
+            onSuccess(headers, statusCode, (JSONArray)jsonResponse);
         } else {
             onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
