diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 2c80e35c..a1c48abf 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -18,17 +18,19 @@
 
 package com.loopj.android.http;
 
-import java.io.InputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.http.HttpEntity;
+import org.apache.http.NameValuePair;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
 import org.apache.http.client.utils.URLEncodedUtils;
 import org.apache.http.message.BasicNameValuePair;
@@ -55,7 +57,7 @@
 public class RequestParams {
     private static String ENCODING = "UTF-8";
 
-    protected ConcurrentHashMap<String, String> urlParams;
+    protected ArrayList<BasicNameValuePair> urlParams;
     protected ConcurrentHashMap<String, FileWrapper> fileParams;
 
     /**
@@ -97,9 +99,34 @@ public RequestParams(String key, String value) {
      */
     public void put(String key, String value){
         if(key != null && value != null) {
-            urlParams.put(key, value);
+        	remove(key);
+            urlParams.add(new BasicNameValuePair(key, value));
+        }
+    }
+    
+    public void put(String key, Iterable<String> values) {
+        if(key != null && values != null) {
+        	remove(key);
+        	for (String value: values) {
+        		add(key, value);
+        	}
         }
     }
+    
+    public int indexOf(String key) {
+    	for (int j=0, count=urlParams.size(); j<count; j++) {
+    		if (key.equals(urlParams.get(j).getName())) {
+    			return j;
+    		}
+    	}
+    	return -1;
+    }
+    
+    public void add(String key, String value) {
+    	if(key != null && value != null) {
+    		urlParams.add(new BasicNameValuePair(key, value));
+    	}
+    }
 
     /**
      * Adds a file to the request.
@@ -147,28 +174,31 @@ public void put(String key, InputStream stream, String fileName, String contentT
      * @param key the key name for the parameter to remove.
      */
     public void remove(String key){
-        urlParams.remove(key);
-        fileParams.remove(key);
+    	int index;
+    	while ((index = indexOf(key)) != -1) {
+    		urlParams.remove(index); 
+    	} 
+		fileParams.remove(key);
     }
 
-    @Override
+	@Override
     public String toString() {
         StringBuilder result = new StringBuilder();
-        for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
+        for(BasicNameValuePair entry : urlParams) {
             if(result.length() > 0)
-                result.append("&");
+                result.append('&');
 
-            result.append(entry.getKey());
-            result.append("=");
+            result.append(entry.getName());
+            result.append('=');
             result.append(entry.getValue());
         }
 
         for(ConcurrentHashMap.Entry<String, FileWrapper> entry : fileParams.entrySet()) {
             if(result.length() > 0)
-                result.append("&");
+                result.append('&');
 
             result.append(entry.getKey());
-            result.append("=");
+            result.append('=');
             result.append("FILE");
         }
 
@@ -185,8 +215,8 @@ public HttpEntity getEntity() {
             SimpleMultipartEntity multipartEntity = new SimpleMultipartEntity();
 
             // Add string params
-            for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
-                multipartEntity.addPart(entry.getKey(), entry.getValue());
+            for(NameValuePair entry : urlParams) {
+                multipartEntity.addPart(entry.getName(), entry.getValue());
             }
 
             // Add file params
@@ -218,16 +248,14 @@ public HttpEntity getEntity() {
     }
 
     private void init(){
-        urlParams = new ConcurrentHashMap<String, String>();
+        urlParams = new ArrayList<BasicNameValuePair>();
         fileParams = new ConcurrentHashMap<String, FileWrapper>();
     }
 
     protected List<BasicNameValuePair> getParamsList() {
         List<BasicNameValuePair> lparams = new LinkedList<BasicNameValuePair>();
 
-        for(ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
-            lparams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
-        }
+        lparams.addAll(urlParams);
 
         return lparams;
     }
