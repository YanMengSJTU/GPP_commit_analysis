diff --git a/library/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 10669285..5525391a 100644
--- a/library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -115,7 +115,7 @@ public void handleMessage(Message msg) {
      * Fired when the request progress, override to handle in your own code
      *
      * @param bytesWritten offset from start of file
-     * @param totalSize total size of file
+     * @param totalSize    total size of file
      */
     public void onProgress(int bytesWritten, int totalSize) {
     }
@@ -294,6 +294,12 @@ protected void sendMessage(Message msg) {
         }
     }
 
+    protected void postRunnable(Runnable r) {
+        if (r != null) {
+            handler.post(r);
+        }
+    }
+
     protected Message obtainMessage(int responseMessage, Object response) {
         Message msg;
         if (handler != null) {
diff --git a/library/src/com/loopj/android/http/JsonHttpResponseHandler.java b/library/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 33855fc9..138b6116 100644
--- a/library/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/library/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -153,10 +153,20 @@ protected void sendSuccessMessage(final int statusCode, final Header[] headers,
                 @Override
                 public void run() {
                     try {
-                        Object jsonResponse = parseResponse(responseBody);
-                        sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, headers, jsonResponse}));
-                    } catch (JSONException e) {
-                        sendFailureMessage(statusCode, headers, e, responseBody);
+                        final Object jsonResponse = parseResponse(responseBody);
+                        postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, headers, jsonResponse}));
+                            }
+                        });
+                    } catch (final JSONException e) {
+                        postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                sendFailureMessage(statusCode, headers, e, responseBody);
+                            }
+                        });
                     }
                 }
             }).start();
@@ -211,29 +221,41 @@ protected Object parseResponse(String responseBody) throws JSONException {
 
     @Override
     protected void handleFailureMessage(final int statusCode, final Header[] headers, final Throwable e, final String responseBody) {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (responseBody != null) {
-                        Object jsonResponse = parseResponse(responseBody);
-                        if (jsonResponse instanceof JSONObject) {
-                            onFailure(statusCode, headers, e, (JSONObject) jsonResponse);
-                        } else if (jsonResponse instanceof JSONArray) {
-                            onFailure(statusCode, headers, e, (JSONArray) jsonResponse);
-                        } else if (jsonResponse instanceof String) {
-                            onFailure(statusCode, headers, e, (String) jsonResponse);
-                        } else {
-                            onFailure(statusCode, headers, e, responseBody);
-                        }
-                    } else {
-                        onFailure(e, "");
+        if (responseBody != null) {
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        final Object jsonResponse = parseResponse(responseBody);
+                        postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                if (jsonResponse instanceof JSONObject) {
+                                    onFailure(statusCode, headers, e, (JSONObject) jsonResponse);
+                                } else if (jsonResponse instanceof JSONArray) {
+                                    onFailure(statusCode, headers, e, (JSONArray) jsonResponse);
+                                } else if (jsonResponse instanceof String) {
+                                    onFailure(statusCode, headers, e, (String) jsonResponse);
+                                } else {
+                                    onFailure(statusCode, headers, e, responseBody);
+                                }
+                            }
+                        });
+
+                    } catch (JSONException ex) {
+                        postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                onFailure(statusCode, headers, e, responseBody);
+                            }
+                        });
+
                     }
-                } catch (JSONException ex) {
-                    onFailure(statusCode, headers, e, responseBody);
                 }
-            }
-        }).start();
+            }).start();
+        } else {
+            onFailure(e, "");
+        }
 
     }
 }
