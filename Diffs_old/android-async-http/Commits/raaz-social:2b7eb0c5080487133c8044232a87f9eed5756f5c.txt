diff --git a/.classpath b/.classpath
index 040c4d39..7626a58e 100644
--- a/.classpath
+++ b/.classpath
@@ -5,5 +5,6 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="lib" path="libs/httpclientandroidlib-1.1.1.jar" sourcepath="/home/adam/dev/surespot/libs/android/google/httpclientandroidlib/script"/>
+	<classpathentry kind="lib" path="libs/disklrucache-1.3.2-SNAPSHOT.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 1d400718..f9c4bc83 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -145,7 +145,7 @@ public AsyncHttpClient(Context context) {
         
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
         DefaultHttpClient defaultClient = new DefaultHttpClient(cm, httpParams);
-        cachingHttpClient = SurespotCachingHttpClient.createSurespotCachingHttpClient(context, defaultClient);
+        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, defaultClient);
         
         cachingHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
             public void process(HttpRequest request, HttpContext context) {
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index d8678bea..3ab43eed 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -35,17 +35,33 @@
 
 	public SurespotCachingHttpClient(Context context, CachingHttpClient diskCacheClient, AbstractHttpClient defaultHttpClient) {
 		super(diskCacheClient, getMemoryCacheConfig());
+//		log.enableDebug(true);
+//		log.enableError(true);
+//		log.enableInfo(true);
+//		log.enableTrace(true);
+//		log.enableWarn(true);
+
+
+		mAbstractHttpClient = defaultHttpClient;
+
+	}
+	
+
+	/**
+	 * Use disk cache only
+	 * @param context
+	 * @param defaultHttpClient
+	 */
+	public SurespotCachingHttpClient(Context context,  AbstractHttpClient defaultHttpClient) {
+		super(defaultHttpClient, new SurespotHttpCacheStorage(new File(context
+				.getCacheDir().getPath() + File.pathSeparator + DISK_CACHE_SUBDIR)), getDiskCacheConfig());
 		log.enableDebug(true);
 		log.enableError(true);
 		log.enableInfo(true);
 		log.enableTrace(true);
 		log.enableWarn(true);
 		
-		diskCacheClient.log.enableDebug(true);
-		diskCacheClient.log.enableError(true);
-		diskCacheClient.log.enableInfo(true);
-		diskCacheClient.log.enableTrace(true);
-		diskCacheClient.log.enableWarn(true);
+		
 
 
 		mAbstractHttpClient = defaultHttpClient;
@@ -63,12 +79,26 @@ public static SurespotCachingHttpClient createSurespotCachingHttpClient(Context
 
 			CachingHttpClient diskCacheClient = new CachingHttpClient(abstractClient, new SurespotHttpCacheStorage(new File(context
 					.getCacheDir().getPath() + File.pathSeparator + DISK_CACHE_SUBDIR)), getDiskCacheConfig());
+			
+//			diskCacheClient.log.enableDebug(true);
+//			diskCacheClient.log.enableError(true);
+//			diskCacheClient.log.enableInfo(true);
+//			diskCacheClient.log.enableTrace(true);
+//			diskCacheClient.log.enableWarn(true);
 
 			SurespotCachingHttpClient client = new SurespotCachingHttpClient(context, diskCacheClient, abstractClient);
 			mInstance = client;
 		}
 		return mInstance;
 	}
+	
+	public static SurespotCachingHttpClient createSurespotDiskCachingHttpClient(Context context, AbstractHttpClient abstractClient) {
+		if (mInstance == null) {
+			SurespotCachingHttpClient client = new SurespotCachingHttpClient(context, abstractClient);
+			mInstance = client;
+		}
+		return mInstance;
+	}
 
 	private static String generateKey(String key) {
 		return key.replaceAll("[^a-zA-Z0-9_-]", "");
@@ -83,7 +113,7 @@ public SurespotHttpCacheStorage(File cacheDir) {
 				Log.v(TAG, "storage cache dir: " + cacheDir);
 
 				mCache = DiskLruCache.open(cacheDir, 100, 1, Integer.MAX_VALUE);
-			} catch (IOException e) {
+			} catch (Exception e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 			}
@@ -95,7 +125,8 @@ public HttpCacheEntry getEntry(String arg0) throws IOException {
 			try {
 				Snapshot snapshot = null;
 
-				snapshot = mCache.get(generateKey(arg0));
+				String key = generateKey(arg0);
+				snapshot = mCache.get(key);
 
 				if (snapshot == null) {
 					return null;
@@ -104,9 +135,9 @@ public HttpCacheEntry getEntry(String arg0) throws IOException {
 				ObjectInputStream ois = new ObjectInputStream(is);
 
 				entry = (HttpCacheEntry) ois.readObject();
-				is.close();
-			} catch (ClassNotFoundException e) {
-				throw new IOException("HttpCacheEntry class not found", e);
+				ois.close();
+			} catch (Exception e) {
+				throw new IOException("Error retrieving cache entry: " + arg0, e);
 			}
 
 			return entry;
