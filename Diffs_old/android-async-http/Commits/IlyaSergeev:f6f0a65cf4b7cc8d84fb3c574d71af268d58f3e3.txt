diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 3166f8a7..13797dae 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -271,23 +271,63 @@ void sendResponseMessage(HttpResponse response)
 			sendFailureMessage(e, responseBody);
 		}
 
-		if (status.getStatusCode() >= 300)
-		{
-			sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
-		}
-		else
-		{
-			sendSuccessMessage(status.getStatusCode(), responseBody);
-		}
-	}
+    // Methods which emulate android's Handler and Message methods
+    @Override
+    protected void handleMessage(Message msg) {
+        Object[] response;
+        switch(msg.what) {
+            case SUCCESS_MESSAGE:
+                response = (Object[])msg.obj;
+                handleSuccessMessage(((Integer) response[0]).intValue() , (byte[]) response[1]);
+                break;
+            case FAILURE_MESSAGE:
+                response = (Object[])msg.obj;
+                handleFailureMessage((Throwable)response[0], (byte[]) response[1]);
+                break;
+            default:
+                super.handleMessage(msg);
+                break;
+        }
+    }
 
-	public boolean isCanceled()
-	{
-		return isCanceled;
-	}
-	
-	public void setIsCanceled(boolean isCanceled)
-	{
-		this.isCanceled = isCanceled;
-	}
-}
\ No newline at end of file
+    // Interface to AsyncHttpRequest
+    @Override
+    void sendResponseMessage(HttpResponse response) {
+        StatusLine status = response.getStatusLine();
+        Header[] contentTypeHeaders = response.getHeaders("Content-Type");
+        byte[] responseBody = null;
+        if(contentTypeHeaders.length != 1) {
+            //malformed/ambiguous HTTP Header, ABORT!
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), "None, or more than one, Content-Type Header found!"), responseBody);
+            return;
+        }
+        Header contentTypeHeader = contentTypeHeaders[0];
+        boolean foundAllowedContentType = false;
+        for(String anAllowedContentType : mAllowedContentTypes) {
+            if(Pattern.matches(anAllowedContentType, contentTypeHeader.getValue())) {
+                foundAllowedContentType = true;
+            }
+        }
+        if(!foundAllowedContentType) {
+            //Content-Type not in allowed list, ABORT!
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), "Content-Type not allowed!"), responseBody);
+            return;
+        }
+        try {
+            HttpEntity entity = null;
+            HttpEntity temp = response.getEntity();
+            if(temp != null) {
+                entity = new BufferedHttpEntity(temp);
+            }
+            responseBody = EntityUtils.toByteArray(entity);
+        } catch(IOException e) {
+            sendFailureMessage(e, (byte[]) null);
+        }
+
+        if(status.getStatusCode() >= 300) {
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+        } else {
+            sendSuccessMessage(status.getStatusCode(), responseBody);
+        }
+    }
+}
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index cbb0c288..758fa984 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -142,6 +142,22 @@ public void put(String key, ArrayList<String> values)  {
         }
     }
 
+    /**
+     * Adds value to param which can have more than one value.
+     * @param key the key name for the param, either existing or new.
+     * @param value the value string for the new param.
+     */
+    public void add(String key, String value) {
+        if(key != null && value != null) {
+            ArrayList<String> paramArray = urlParamsWithArray.get(key);
+            if (paramArray == null) {
+                paramArray = new ArrayList<String>();
+                this.put(key, paramArray);
+            }
+            paramArray.add(value);
+        }
+    }
+
     /**
      * Adds an input stream to the request.
      * @param key the key name for the new param.
