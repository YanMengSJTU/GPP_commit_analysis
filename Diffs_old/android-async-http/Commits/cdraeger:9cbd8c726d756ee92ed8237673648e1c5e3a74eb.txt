diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 2030265f..3227c62b 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -36,7 +36,7 @@
 
 /**
  * Used to intercept and handle the responses from requests made using 
- * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
+ * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is
  * designed to be anonymously overridden with your own response handling code.
  * <p>
  * Additionally, you can override the {@link #onFailure(Throwable, String)},
@@ -76,6 +76,7 @@
     protected static final int FINISH_MESSAGE = 3;
 
     private Handler handler;
+    private String charset = "UTF-8";
 
     /**
      * Creates a new AsyncHttpResponseHandler
@@ -92,7 +93,6 @@ public void handleMessage(Message msg){
         }
     }
 
-
     //
     // Callbacks to be overridden, typically anonymously
     //
@@ -213,6 +213,10 @@ protected void handleMessage(Message msg) {
         }
     }
 
+    public void setCharset(final String charset) {
+        this.charset = charset;
+    }
+
     protected void sendMessage(Message msg) {
         if(handler != null){
             handler.sendMessage(msg);
@@ -242,7 +246,7 @@ void sendResponseMessage(HttpResponse response) {
             HttpEntity temp = response.getEntity();
             if(temp != null) {
                 entity = new BufferedHttpEntity(temp);
-                responseBody = EntityUtils.toString(entity, "UTF-8");
+                responseBody = EntityUtils.toString(entity, charset);
             }
         } catch(IOException e) {
             sendFailureMessage(e, (String) null);
