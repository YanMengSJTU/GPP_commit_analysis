diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 5c3deae7..03b3facd 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -109,6 +109,7 @@
     private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
 
     private final SurespotCachingHttpClient cachingHttpClient;    
+    private final DefaultHttpClient mDefaultHttpClient;
     private final HttpContext httpContext;
     private ThreadPoolExecutor threadPool;
     private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
@@ -138,7 +139,7 @@ public AsyncHttpClient(Context context) throws IOException {
 
         SchemeRegistry schemeRegistry = new SchemeRegistry();
         schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
-        schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+        //schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);    
      
      //   PoolingClientConnectionManager pm = new PoolingClientConnectionManager(schemeRegistry);
@@ -147,10 +148,9 @@ public AsyncHttpClient(Context context) throws IOException {
         
         
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        DefaultHttpClient defaultClient = new DefaultHttpClient(cm, httpParams);        
-        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, defaultClient);
-        
-        cachingHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
+        mDefaultHttpClient = new DefaultHttpClient(cm, httpParams);        
+        mDefaultHttpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
+        mDefaultHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
             public void process(HttpRequest request, HttpContext context) {
                 if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
                     request.addHeader(HEADER_ACCEPT_ENCODING, ENCODING_GZIP);
@@ -161,7 +161,7 @@ public void process(HttpRequest request, HttpContext context) {
             }
         });
 
-        cachingHttpClient.addResponseInterceptor(new HttpResponseInterceptor() {
+        mDefaultHttpClient.addResponseInterceptor(new HttpResponseInterceptor() {
             public void process(HttpResponse response, HttpContext context) {
                 final HttpEntity entity = response.getEntity();
                 if (entity == null) {
@@ -179,7 +179,8 @@ public void process(HttpResponse response, HttpContext context) {
             }
         });
 
-        cachingHttpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
+        cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, mDefaultHttpClient);      
+        
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();        
         requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
@@ -190,9 +191,13 @@ public void process(HttpResponse response, HttpContext context) {
      * additional fine-grained settings for requests by accessing the
      * client's ConnectionManager, HttpParams and SchemeRegistry.
      */
-    public HttpClient getHttpClient() {
+    public SurespotCachingHttpClient getCachingHttpClient() {
         return this.cachingHttpClient;
     }
+    
+    public DefaultHttpClient getDefaultHttpClient() {
+    	return mDefaultHttpClient;
+    }
 
     /**
      * Get the underlying HttpContext instance. This is useful for getting 
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index 2ccfb548..64c2636b 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -38,7 +38,7 @@
 import com.jakewharton.DiskLruCache;
 import com.jakewharton.DiskLruCache.Snapshot;
 import com.loopj.android.http.RetryHandler;
-import com.twofours.surespot.socketio.WebClientDevWrapper;
+import com.twofours.surespot.common.WebClientDevWrapper;
 
 public class SurespotCachingHttpClient extends CachingHttpClient {
 	private AbstractHttpClient mAbstractHttpClient;
