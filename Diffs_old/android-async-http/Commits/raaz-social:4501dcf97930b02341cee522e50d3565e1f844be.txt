diff --git a/.classpath b/.classpath
index 7626a58e..3564f04c 100644
--- a/.classpath
+++ b/.classpath
@@ -6,5 +6,6 @@
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="lib" path="libs/httpclientandroidlib-1.1.1.jar" sourcepath="/home/adam/dev/surespot/libs/android/google/httpclientandroidlib/script"/>
 	<classpathentry kind="lib" path="libs/disklrucache-1.3.2-SNAPSHOT.jar"/>
+	<classpathentry kind="lib" path="libs/acra-4.4.0.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index d5f091cb..4adb6920 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -18,7 +18,6 @@
 
 package com.loopj.android.http;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
@@ -32,9 +31,7 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.zip.GZIPInputStream;
 
-import com.twofours.surespot.SurespotCachingHttpClient;
-import com.twofours.surespot.SurespotCachingHttpClient.SurespotHttpCacheStorage;
-
+import android.content.Context;
 import ch.boye.httpclientandroidlib.Header;
 import ch.boye.httpclientandroidlib.HeaderElement;
 import ch.boye.httpclientandroidlib.HttpEntity;
@@ -63,17 +60,16 @@
 import ch.boye.httpclientandroidlib.entity.HttpEntityWrapper;
 import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
-import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
 import ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager;
 import ch.boye.httpclientandroidlib.params.BasicHttpParams;
-import ch.boye.httpclientandroidlib.params.HttpParams;
 import ch.boye.httpclientandroidlib.params.HttpConnectionParams;
+import ch.boye.httpclientandroidlib.params.HttpParams;
 import ch.boye.httpclientandroidlib.params.HttpProtocolParams;
 import ch.boye.httpclientandroidlib.protocol.BasicHttpContext;
 import ch.boye.httpclientandroidlib.protocol.HttpContext;
 import ch.boye.httpclientandroidlib.protocol.SyncBasicHttpContext;
 
-import android.content.Context;
+import com.twofours.surespot.SurespotCachingHttpClient;
 
 
 /**
@@ -99,7 +95,7 @@
     private static final String VERSION = "1.4.1";
 
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
-    private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
+    private static final int DEFAULT_SOCKET_TIMEOUT = 4 * 1000;
     private static final int DEFAULT_MAX_RETRIES = 5;
     private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
@@ -137,12 +133,7 @@ public AsyncHttpClient(Context context) throws IOException {
         SchemeRegistry schemeRegistry = new SchemeRegistry();
         schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
         schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-        ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
-
-        CacheConfig memoryCacheConfig = new CacheConfig();  
-        memoryCacheConfig.setMaxCacheEntries(100);
-        memoryCacheConfig.setMaxObjectSizeBytes(200000);
-   
+        ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);    
         
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
         DefaultHttpClient defaultClient = new DefaultHttpClient(cm, httpParams);
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 96a9b438..947afea0 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -24,18 +24,21 @@
 import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
 
-import com.twofours.surespot.SurespotCachingHttpClient;
+import org.acra.ACRA;
 
+import android.util.Log;
 import ch.boye.httpclientandroidlib.HttpResponse;
 import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
 import ch.boye.httpclientandroidlib.client.cache.CacheResponseStatus;
 import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
-import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
 import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
+import com.twofours.surespot.SurespotCachingHttpClient;
+
 class AsyncHttpRequest implements Runnable {
-    private final SurespotCachingHttpClient client;
+    private static final String TAG = "AsyncHttpRequest";
+	private final SurespotCachingHttpClient client;
     private final HttpContext context;
     private final HttpUriRequest request;
     private final AsyncHttpResponseHandler responseHandler;
@@ -102,6 +105,7 @@ private void makeRequest() throws IOException {
                 }
             } else{
                 //TODO: should raise InterruptedException? this block is reached whenever the request is cancelled before its response is received
+            	Log.v(TAG,"makeRequest interrupted");
             }
         }
     }
@@ -146,7 +150,8 @@ private void makeRequestWithRetries() throws ConnectException {
 
         // no retries left, crap out with exception
         ConnectException ex = new ConnectException();
-        ex.initCause(cause);
+        ex.initCause(cause);       
+        ACRA.getErrorReporter().handleException(cause);
         throw ex;
     }
 }
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 137455ec..156c25b9 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,6 +18,8 @@
 
 package com.loopj.android.http;
 
+import java.io.IOException;
+
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
@@ -28,8 +30,6 @@
 import ch.boye.httpclientandroidlib.entity.BufferedHttpEntity;
 import ch.boye.httpclientandroidlib.util.EntityUtils;
 
-import java.io.IOException;
-
 /**
  * Used to intercept and handle the responses from requests made using 
  * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index dc40cffc..fce53c01 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -18,6 +18,8 @@
 
 package com.loopj.android.http;
 
+import java.io.IOException;
+
 import android.os.Message;
 import ch.boye.httpclientandroidlib.Header;
 import ch.boye.httpclientandroidlib.HttpEntity;
@@ -27,8 +29,6 @@
 import ch.boye.httpclientandroidlib.entity.BufferedHttpEntity;
 import ch.boye.httpclientandroidlib.util.EntityUtils;
 
-import java.io.IOException;
-
 /**
  * Used to intercept and handle the responses from requests made using
  * {@link AsyncHttpClient}. Receives response body as byte array with a 
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 8fc52d24..02530356 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -27,12 +27,11 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import ch.boye.httpclientandroidlib.client.CookieStore;
-import ch.boye.httpclientandroidlib.cookie.Cookie;
-
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.text.TextUtils;
+import ch.boye.httpclientandroidlib.client.CookieStore;
+import ch.boye.httpclientandroidlib.cookie.Cookie;
 
 /**
  * A persistent cookie store which implements the Apache HttpClient
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 416abbc3..ce4143c2 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -18,10 +18,10 @@
 
 package com.loopj.android.http;
 
-import java.io.InputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.LinkedList;
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 450418bb..04671e39 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -14,102 +14,114 @@
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-*/
+ */
 
 /*
-    Some of the retry logic in this class is heavily borrowed from the
-    fantastic droid-fu project: https://github.com/donnfelker/droid-fu
-*/
+ Some of the retry logic in this class is heavily borrowed from the
+ fantastic droid-fu project: https://github.com/donnfelker/droid-fu
+ */
 
 package com.loopj.android.http;
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.net.SocketException;
+import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
 import java.util.HashSet;
 import java.util.Iterator;
 
 import javax.net.ssl.SSLHandshakeException;
 
-
+import android.os.SystemClock;
+import android.util.Log;
 import ch.boye.httpclientandroidlib.NoHttpResponseException;
-import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
 import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.conn.HttpHostConnectException;
 import ch.boye.httpclientandroidlib.protocol.ExecutionContext;
 import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
-
-import android.os.SystemClock;
-
 public class RetryHandler implements HttpRequestRetryHandler {
-    private static final int RETRY_SLEEP_TIME_MILLIS = 1500;
-    private static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
-    private static HashSet<Class<?>> exceptionBlacklist = new HashSet<Class<?>>();
-
-    static {
-        // Retry if the server dropped connection on us
-        exceptionWhitelist.add(NoHttpResponseException.class);
-        // retry-this, since it may happens as part of a Wi-Fi to 3G failover
-        exceptionWhitelist.add(UnknownHostException.class);
-        // retry-this, since it may happens as part of a Wi-Fi to 3G failover
-        exceptionWhitelist.add(SocketException.class);
-
-        // never retry timeouts
-        exceptionBlacklist.add(InterruptedIOException.class);
-        // never retry SSL handshake failures
-        exceptionBlacklist.add(SSLHandshakeException.class);
-    }
-
-    private final int maxRetries;
-
-    public RetryHandler(int maxRetries) {
-        this.maxRetries = maxRetries;
-    }
-
-    public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
-        boolean retry = true;
-
-        Boolean b = (Boolean) context.getAttribute(ExecutionContext.HTTP_REQ_SENT);
-        boolean sent = (b != null && b.booleanValue());
-
-        if(executionCount > maxRetries) {
-            // Do not retry if over max retry count
-            retry = false;
-        } else if (isInList(exceptionBlacklist, exception)) {
-            // immediately cancel retry if the error is blacklisted
-            retry = false;
-        } else if (isInList(exceptionWhitelist, exception)) {
-            // immediately retry if error is whitelisted
-            retry = true;
-        } else if (!sent) {
-            // for most other errors, retry only if request hasn't been fully sent yet
-            retry = true;
-        }
-
-        if(retry) {
-            // resend all idempotent requests
-            HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute( ExecutionContext.HTTP_REQUEST );
-            String requestType = currentReq.getMethod();
-            retry = !requestType.equals("POST");
-        }
-
-        if(retry) {
-            SystemClock.sleep(RETRY_SLEEP_TIME_MILLIS);
-        } else {
-            exception.printStackTrace();
-        }
-
-        return retry;
-    }
-    
-    protected boolean isInList(HashSet<Class<?>> list, Throwable error) {
-    	Iterator<Class<?>> itr = list.iterator();
-    	while (itr.hasNext()) {
-    		if (itr.next().isInstance(error)) {
-    			return true;
-    		}
-    	}
-    	return false;
-    }
+	private static final String TAG = "RetryHandler";
+	private static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
+	private static HashSet<Class<?>> exceptionBlacklist = new HashSet<Class<?>>();
+
+	static {
+		// Retry if the server dropped connection on us
+		exceptionWhitelist.add(NoHttpResponseException.class);
+		// retry-this, since it may happens as part of a Wi-Fi to 3G failover
+		exceptionWhitelist.add(UnknownHostException.class);
+		// retry-this, since it may happens as part of a Wi-Fi to 3G failover
+		exceptionWhitelist.add(SocketException.class);
+		// socket timeout gets thrown (on my phone at least) on network switch, so we want to retry
+		// but because this is also an InterruptedIOException we need to reverse the order we check the lists in		
+		exceptionWhitelist.add(SocketTimeoutException.class);
+
+		
+		exceptionBlacklist.add(InterruptedIOException.class);
+		// never retry SSL handshake failures
+		exceptionBlacklist.add(SSLHandshakeException.class);
+	}
+
+	private final int maxRetries;
+
+	public RetryHandler(int maxRetries) {
+		this.maxRetries = maxRetries;
+	}
+
+	public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
+		boolean retry = true;
+
+		Boolean b = (Boolean) context.getAttribute(ExecutionContext.HTTP_REQ_SENT);
+		boolean sent = (b != null && b.booleanValue());
+
+		if (executionCount > maxRetries) {
+			// Do not retry if over max retry count
+			retry = false;
+		}
+		else if (isInList(exceptionWhitelist, exception)) {
+			// immediately retry if error is whitelisted
+			retry = true;
+
+		}
+		else if (isInList(exceptionBlacklist, exception)) {
+			// immediately cancel retry if the error is blacklisted
+			retry = false;
+		}
+		else if (!sent) {
+			// for most other errors, retry only if request hasn't been fully sent yet
+			retry = true;
+		}
+
+		if (retry) {
+			// resend all idempotent requests
+			HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
+			String requestType = currentReq.getMethod();
+			retry = !requestType.equals("POST");
+		}
+
+		if (retry) {
+			Log.v(TAG, "retryRequest, executionCount: " + executionCount);
+			int timerInterval = (int) (Math.pow(2, executionCount) * 1000);
+			Log.v(TAG, "retryRequest, setting retry interval to: " + timerInterval);
+			SystemClock.sleep(timerInterval);
+		}
+		else {
+
+			exception.printStackTrace();
+		}
+
+		return retry;
+	}
+
+	protected boolean isInList(HashSet<Class<?>> list, Throwable error) {
+		Iterator<Class<?>> itr = list.iterator();
+		while (itr.hasNext()) {
+			if (itr.next().isInstance(error)) {
+				return true;
+			}
+		}
+		return false;
+	}
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/SerializableCookie.java b/src/com/loopj/android/http/SerializableCookie.java
index c024d19c..4aad4d08 100644
--- a/src/com/loopj/android/http/SerializableCookie.java
+++ b/src/com/loopj/android/http/SerializableCookie.java
@@ -18,10 +18,10 @@
 
 package com.loopj.android.http;
 
-import java.io.Serializable;
+import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.io.IOException;
+import java.io.Serializable;
 import java.util.Date;
 
 import ch.boye.httpclientandroidlib.cookie.Cookie;
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index 464c1f80..44a0d5ae 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -28,8 +28,8 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.Random;
 
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index fde95992..51b521b1 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -2,14 +2,12 @@
 
 import java.io.IOException;
 
-import com.twofours.surespot.SurespotCachingHttpClient;
-
+import android.content.Context;
+import android.os.Message;
 import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
-import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
 import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
-import android.content.Context;
-import android.os.Message;
+import com.twofours.surespot.SurespotCachingHttpClient;
 
 public abstract class SyncHttpClient extends AsyncHttpClient {
 	public SyncHttpClient(Context context) throws IOException {
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index 22296e3d..95245555 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -6,11 +6,9 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.OutputStream;
-import java.net.URLEncoder;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
-import android.graphics.drawable.shapes.ArcShape;
 import android.os.Build;
 import android.os.Environment;
 import android.util.Log;
@@ -22,10 +20,7 @@
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheStorage;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateCallback;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateException;
-import ch.boye.httpclientandroidlib.client.params.ClientPNames;
-import ch.boye.httpclientandroidlib.client.params.CookiePolicy;
 import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
-import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
 import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
 
@@ -37,7 +32,7 @@
 	private AbstractHttpClient mAbstractHttpClient;
 	private static SurespotHttpCacheStorage mCacheStorage;
 
-	private static final String DISK_CACHE_SUBDIR = "http";
+	
 	private static SurespotCachingHttpClient mInstance = null;
 
 	public SurespotCachingHttpClient(Context context, CachingHttpClient diskCacheClient, AbstractHttpClient defaultHttpClient,
@@ -130,13 +125,14 @@ private static String generateKey(String key) {
 	}
 
 	public static class SurespotHttpCacheStorage implements HttpCacheStorage {
+		private static final String DISK_CACHE_SUBDIR = "http";
 		private static final String TAG = "SurespotHttpCacheStorage";
 		private com.jakewharton.DiskLruCache mCache;
 		private File mCacheDir;
 
 		public SurespotHttpCacheStorage(Context context) throws IOException {
 
-			mCacheDir = getDiskCacheDir(context, "http");
+			mCacheDir = getDiskCacheDir(context, DISK_CACHE_SUBDIR);
 
 			Log.v(TAG, "storage cache dir: " + mCacheDir);
 
@@ -310,7 +306,7 @@ public boolean hasExternalCacheDir() {
 
 	}
 
-	public static void clearCache() {
+	public void clearCache() {
 		mCacheStorage.clearCache();
 	}
 
