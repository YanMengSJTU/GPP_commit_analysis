diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 6053a569..b5e6b041 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -60,8 +60,8 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpParams;
 import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.params.HttpParams;
 import org.apache.http.params.HttpProtocolParams;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.HttpContext;
@@ -90,7 +90,7 @@
  * </pre>
  */
 public class AsyncHttpClient {
-    private static final String VERSION = "1.4.1";
+    private static final String VERSION = "1.4.3";
 
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
     private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
@@ -105,14 +105,24 @@
     private final DefaultHttpClient httpClient;
     private final HttpContext httpContext;
     private ThreadPoolExecutor threadPool;
-    private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
+    private final Map<Context, List<RequestPoolRecord>> requestMap;
     private final Map<String, String> clientHeaderMap;
-
+    // This context is stored in constructor and is used as default context for all requests
+    private Context defaultContext;
 
     /**
      * Creates a new AsyncHttpClient.
      */
+
     public AsyncHttpClient() {
+        this(null);
+    }
+
+    /**
+     * Creates a new AsyncHttpClient with default Context for all further requests
+     */
+
+    public AsyncHttpClient(Context context) {
         BasicHttpParams httpParams = new BasicHttpParams();
 
         ConnManagerParams.setTimeout(httpParams, socketTimeout);
@@ -132,9 +142,12 @@ public AsyncHttpClient() {
         schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
 
+        defaultContext = context;
+
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
         httpClient = new DefaultHttpClient(cm, httpParams);
         httpClient.addRequestInterceptor(new HttpRequestInterceptor() {
+            @Override
             public void process(HttpRequest request, HttpContext context) {
                 if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
                     request.addHeader(HEADER_ACCEPT_ENCODING, ENCODING_GZIP);
@@ -146,6 +159,7 @@ public void process(HttpRequest request, HttpContext context) {
         });
 
         httpClient.addResponseInterceptor(new HttpResponseInterceptor() {
+            @Override
             public void process(HttpResponse response, HttpContext context) {
                 final HttpEntity entity = response.getEntity();
                 if (entity == null) {
@@ -167,7 +181,8 @@ public void process(HttpResponse response, HttpContext context) {
 
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();
 
-        requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
+//        requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
+        requestMap = new WeakHashMap<Context, List<RequestPoolRecord>>();
         clientHeaderMap = new HashMap<String, String>();
     }
 
@@ -247,8 +262,8 @@ public void addHeader(String header, String value) {
     /**
      * Sets basic authentication for the request. Uses AuthScope.ANY. This is the same as
      * setBasicAuth('username','password',AuthScope.ANY) 
-     * @param username
-     * @param password
+     * @param user
+     * @param pass
      */
     public void setBasicAuth(String user, String pass){
         AuthScope scope = AuthScope.ANY;
@@ -258,8 +273,8 @@ public void setBasicAuth(String user, String pass){
    /**
      * Sets basic authentication for the request. You should pass in your AuthScope for security. It should be like this
      * setBasicAuth("username","password", new AuthScope("host",port,AuthScope.ANY_REALM))
-     * @param username
-     * @param password
+     * @param user
+     * @param pass
      * @param scope - an AuthScope object
      *
      */
@@ -281,19 +296,52 @@ public void setBasicAuth( String user, String pass, AuthScope scope){
      * @param mayInterruptIfRunning specifies if active requests should be cancelled along with pending requests.
      */
     public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
-        List<WeakReference<Future<?>>> requestList = requestMap.get(context);
+        cancelRequests(context, null, mayInterruptIfRunning);
+    }
+
+    /**
+     * Cancels any pending (or potentially active) requests associated with the
+     * passed Context and Tag
+     * <p>
+     * <b>Note:</b> This will only affect requests which were created with a non-null
+     * android Context and Tag. This method is intended to be used in the onDestroy
+     * method of your android activities to destroy all requests which are no
+     * longer required. If Tag supplied is null, it will affect all requests
+     * with matching Context.
+     *
+     * @param context the android Context instance associated to the request.
+     * @param tag specifies an Object tag for this request to address it in future
+     * @param mayInterruptIfRunning specifies if active requests should be cancelled along with pending requests.
+     */
+    public void cancelRequests(Context context, final Object tag, boolean mayInterruptIfRunning) {
+        List<RequestPoolRecord> requestList = requestMap.get(context);
         if(requestList != null) {
-            for(WeakReference<Future<?>> requestRef : requestList) {
-                Future<?> request = requestRef.get();
-                if(request != null) {
-                    request.cancel(mayInterruptIfRunning);
+            for (RequestPoolRecord requestPoolRecord : requestList) {
+                // If tag matches or tag is null, cancel request
+                if ((tag != null && requestPoolRecord.getTag() == tag) || tag == null) {
+                    Future<?> request = requestPoolRecord.getRequestFuture().get();
+                    if(request != null) {
+                        if (mayInterruptIfRunning) {
+                            // This is the only way to really force stop the request before it is finished
+                            requestPoolRecord.getHttpRequest().getRequest().abort();
+                        } else {
+                            // Gracefully interrupt the request runnable if possible
+                            request.cancel(mayInterruptIfRunning);
+                        }
+                    }
+                    // If tag is not null, remove the associated record from the list
+                    if (tag != null) {
+                        requestList.remove(requestPoolRecord);
+                    }
                 }
             }
         }
-        requestMap.remove(context);
+        // If tag is null and we cancel all requests associated with context provided
+        // remove the whole list of requests associated with this context
+        if (tag == null)
+            requestMap.remove(context);
     }
 
-
     //
     // HTTP GET Requests
     //
@@ -304,9 +352,20 @@ public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(String url, AsyncHttpResponseHandler responseHandler) {
-        get(null, url, null, responseHandler);
+        get(defaultContext, url, null, responseHandler, null);
     }
 
+    /**
+     * Perform a HTTP GET request, without any parameters.
+     * @param url the URL to send the request to.
+     * @param responseHandler the response handler instance that should handle the response.
+     * @param tag Object to tag request with
+     */
+    public void get(String url, AsyncHttpResponseHandler responseHandler, Object tag) {
+        get(defaultContext, url, null, responseHandler, tag);
+    }
+
+
     /**
      * Perform a HTTP GET request with parameters.
      * @param url the URL to send the request to.
@@ -314,7 +373,18 @@ public void get(String url, AsyncHttpResponseHandler responseHandler) {
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        get(null, url, params, responseHandler);
+        get(defaultContext, url, params, responseHandler);
+    }
+
+    /**
+     * Perform a HTTP GET request with parameters.
+     * @param url the URL to send the request to.
+     * @param params additional GET parameters to send with the request.
+     * @param responseHandler the response handler instance that should handle the response.
+     * @param tag Object to tag request with
+     */
+    public void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler, Object tag) {
+        get(defaultContext, url, params, responseHandler, tag);
     }
 
     /**
@@ -324,7 +394,18 @@ public void get(String url, RequestParams params, AsyncHttpResponseHandler respo
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(Context context, String url, AsyncHttpResponseHandler responseHandler) {
-        get(context, url, null, responseHandler);
+        get(context, url, null, responseHandler, null);
+    }
+
+    /**
+     * Perform a HTTP GET request without any parameters and track the Android Context which initiated the request.
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param responseHandler the response handler instance that should handle the response.
+     * @param tag Object to tag request with
+     */
+    public void get(Context context, String url, AsyncHttpResponseHandler responseHandler, Object tag) {
+        get(context, url, null, responseHandler, tag);
     }
 
     /**
@@ -335,9 +416,22 @@ public void get(Context context, String url, AsyncHttpResponseHandler responseHa
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context);
+        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context, null);
     }
-    
+
+    /**
+     * Perform a HTTP GET request and track the Android Context which initiated the request and
+     * tag request with an Object
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param params additional GET parameters to send with the request.
+     * @param responseHandler the response handler instance that should handle the response.
+     * @param tag Object to tag request with
+     */
+    public void get(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler, Object tag) {
+        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context, tag);
+    }
+
     /**
      * Perform a HTTP GET request and track the Android Context which initiated
      * the request with customized headers
@@ -352,7 +446,25 @@ public void get(Context context, String url, Header[] headers, RequestParams par
         HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
         if(headers != null) request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, null, responseHandler,
-                context);
+                context, null);
+    }
+
+    /**
+     * Perform a HTTP GET request and track the Android Context which initiated
+     * the request with customized headers
+     *
+     * @param url the URL to send the request to.
+     * @param headers set headers only for this request
+     * @param params additional GET parameters to send with the request.
+     * @param responseHandler the response handler instance that should handle
+     *        the response.
+     * @param tag Object to tag request with
+     */
+    public void get(Context context, String url, Header[] headers, RequestParams params, AsyncHttpResponseHandler responseHandler, Object tag) {
+        HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, null, responseHandler,
+                context, tag);
     }
 
 
@@ -366,7 +478,7 @@ public void get(Context context, String url, Header[] headers, RequestParams par
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(String url, AsyncHttpResponseHandler responseHandler) {
-        post(null, url, null, responseHandler);
+        post(defaultContext, url, null, responseHandler);
     }
 
     /**
@@ -376,7 +488,7 @@ public void post(String url, AsyncHttpResponseHandler responseHandler) {
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        post(null, url, params, responseHandler);
+        post(defaultContext, url, params, responseHandler);
     }
 
     /**
@@ -399,7 +511,7 @@ public void post(Context context, String url, RequestParams params, AsyncHttpRes
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context);
+        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context, null);
     }
 
     /**
@@ -421,7 +533,7 @@ public void post(Context context, String url, Header[] headers, RequestParams pa
         if(params != null) request.setEntity(paramsToEntity(params));
         if(headers != null) request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, contentType,
-                responseHandler, context);
+                responseHandler, context, null);
     }
 
     /**
@@ -443,7 +555,7 @@ public void post(Context context, String url, Header[] headers, HttpEntity entit
             AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);
         if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context, null);
     }
 
     //
@@ -456,7 +568,7 @@ public void post(Context context, String url, Header[] headers, HttpEntity entit
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(String url, AsyncHttpResponseHandler responseHandler) {
-        put(null, url, null, responseHandler);
+        put(defaultContext, url, null, responseHandler);
     }
 
     /**
@@ -466,7 +578,7 @@ public void put(String url, AsyncHttpResponseHandler responseHandler) {
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        put(null, url, params, responseHandler);
+        put(defaultContext, url, params, responseHandler);
     }
 
     /**
@@ -490,7 +602,7 @@ public void put(Context context, String url, RequestParams params, AsyncHttpResp
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
+        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context, null);
     }
     
     /**
@@ -506,7 +618,7 @@ public void put(Context context, String url, HttpEntity entity, String contentTy
     public void put(Context context, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
         if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context, null);
     }
 
     //
@@ -519,7 +631,7 @@ public void put(Context context, String url,Header[] headers, HttpEntity entity,
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void delete(String url, AsyncHttpResponseHandler responseHandler) {
-        delete(null, url, responseHandler);
+        delete(defaultContext, url, responseHandler);
     }
 
     /**
@@ -530,7 +642,7 @@ public void delete(String url, AsyncHttpResponseHandler responseHandler) {
      */
     public void delete(Context context, String url, AsyncHttpResponseHandler responseHandler) {
         final HttpDelete delete = new HttpDelete(url);
-        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+        sendRequest(httpClient, httpContext, delete, null, responseHandler, context, null);
     }
     
     /**
@@ -543,27 +655,28 @@ public void delete(Context context, String url, AsyncHttpResponseHandler respons
     public void delete(Context context, String url, Header[] headers, AsyncHttpResponseHandler responseHandler) {
         final HttpDelete delete = new HttpDelete(url);
         if(headers != null) delete.setHeaders(headers);
-        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+        sendRequest(httpClient, httpContext, delete, null, responseHandler, context, null);
     }
 
 
     // Private stuff
-    protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
+    protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context, Object tag) {
         if(contentType != null) {
             uriRequest.addHeader("Content-Type", contentType);
         }
-
-        Future<?> request = threadPool.submit(new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler));
+        AsyncHttpRequest asyncHttpRequest = new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler);
+        Future<?> request = threadPool.submit(asyncHttpRequest);
 
         if(context != null) {
             // Add request to request map
-            List<WeakReference<Future<?>>> requestList = requestMap.get(context);
+            List<RequestPoolRecord> requestList = requestMap.get(context);
             if(requestList == null) {
-                requestList = new LinkedList<WeakReference<Future<?>>>();
+                requestList = new LinkedList<RequestPoolRecord>();
                 requestMap.put(context, requestList);
             }
 
-            requestList.add(new WeakReference<Future<?>>(request));
+            requestList.add(new RequestPoolRecord(new WeakReference<Future<?>>(request), asyncHttpRequest,
+                    tag));
 
             // TODO: Remove dead weakrefs from requestLists?
         }
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 9f4b19dc..c92279c1 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -48,14 +48,13 @@ public AsyncHttpRequest(AbstractHttpClient client, HttpContext context, HttpUriR
         }
     }
 
+    @Override
     public void run() {
         try {
             if(responseHandler != null){
                 responseHandler.sendStartMessage();
             }
-
             makeRequestWithRetries();
-
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
             }
@@ -79,7 +78,7 @@ private void makeRequest() throws IOException {
         			if(responseHandler != null) {
         				responseHandler.sendResponseMessage(response);
         			}
-        		} else{
+        		} else {
         			//TODO: should raise InterruptedException? this block is reached whenever the request is cancelled before its response is received
         		}
         	} catch (IOException e) {
@@ -118,6 +117,12 @@ private void makeRequestWithRetries() throws ConnectException {
                 return;
             } catch (IOException e) {
                 cause = e;
+                if (request.isAborted()) {
+                    if(responseHandler != null) {
+                        responseHandler.sendFailureMessage(e, "request aborted");
+                    }
+                    return;
+                }
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
             } catch (NullPointerException e) {
                 // there's a bug in HttpClient 4.0.x that on some occasions causes
@@ -133,4 +138,8 @@ private void makeRequestWithRetries() throws ConnectException {
         ex.initCause(cause);
         throw ex;
     }
+
+    public HttpUriRequest getRequest() {
+        return request;
+    }
 }
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 86fbdec9..42df8daa 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,6 +21,8 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import org.apache.http.Header;
+import java.io.IOException;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -28,7 +30,10 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import java.io.IOException;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.util.Log;
 
 /**
  * Used to intercept and handle the responses from requests made using 
@@ -80,6 +85,7 @@ public AsyncHttpResponseHandler() {
         // Set up a handler to post events back to the correct thread if possible
         if(Looper.myLooper() != null) {
             handler = new Handler(){
+                @Override
                 public void handleMessage(Message msg){
                     AsyncHttpResponseHandler.this.handleMessage(msg);
                 }
@@ -108,12 +114,23 @@ public void onFinish() {}
      */
     public void onSuccess(String content) {}
 
+    /**
+     * Fired when a request returns successfully, override to handle in your own code
+     * @param statusCode the status code of the response
+     * @param headers the headers of the HTTP response
+     * @param content the body of the HTTP response from the server
+     */
+    public void onSuccess(int statusCode, Header[] headers, String content) {
+        onSuccess(statusCode, content);
+    }
+
     /**
      * Fired when a request returns successfully, override to handle in your own code
      * @param statusCode the status code of the response
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(int statusCode, String content) {
+    public void onSuccess(int statusCode, String content)
+    {
         onSuccess(content);
     }
 
@@ -122,6 +139,7 @@ public void onSuccess(int statusCode, String content) {
      * @param error the underlying cause of the failure
      * @deprecated use {@link #onFailure(Throwable, String)}
      */
+    @Deprecated
     public void onFailure(Throwable error) {}
 
     /**
@@ -139,8 +157,8 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(int statusCode, String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody}));
+    protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), headers, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -164,8 +182,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(int statusCode, String responseBody) {
-        onSuccess(statusCode, responseBody);
+    protected void handleSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+        onSuccess(statusCode, headers, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -181,7 +199,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[])msg.obj;
-                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1]);
+                handleSuccessMessage(((Integer) response[0]).intValue(), (Header[]) response[1], (String) response[2]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
@@ -234,7 +252,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(status.getStatusCode(), responseBody);
+            sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), responseBody);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index aff1c631..7d675a59 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -18,7 +18,9 @@
 
 package com.loopj.android.http;
 
-import android.os.Message;
+import java.io.IOException;
+import java.util.regex.Pattern;
+
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -27,7 +29,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import java.io.IOException;
+import android.os.Message;
 
 /**
  * Used to intercept and handle the responses from requests made using
@@ -102,6 +104,7 @@ public void onSuccess(int statusCode, byte[] binaryData) {
      * @param binaryData the response body, if any
      * @deprecated
      */
+    @Deprecated
     public void onFailure(Throwable error, byte[] binaryData) {
         // By default, call the deprecated onFailure(Throwable) for compatibility
         onFailure(error);
@@ -116,6 +119,7 @@ protected void sendSuccessMessage(int statusCode, byte[] responseBody) {
         sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{statusCode, responseBody}));
     }
 
+    @Override
     protected void sendFailureMessage(Throwable e, byte[] responseBody) {
         sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
     }
@@ -133,6 +137,7 @@ protected void handleFailureMessage(Throwable e, byte[] responseBody) {
     }
 
     // Methods which emulate android's Handler and Message methods
+    @Override
     protected void handleMessage(Message msg) {
         Object[] response;
         switch(msg.what) {
@@ -142,7 +147,7 @@ protected void handleMessage(Message msg) {
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
-                handleFailureMessage((Throwable)response[0], (byte[])response[1]);
+                handleFailureMessage((Throwable)response[0], response[1].toString());
                 break;
             default:
                 super.handleMessage(msg);
@@ -151,6 +156,7 @@ protected void handleMessage(Message msg) {
     }
 
     // Interface to AsyncHttpRequest
+    @Override
     void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         Header[] contentTypeHeaders = response.getHeaders("Content-Type");
@@ -163,7 +169,7 @@ void sendResponseMessage(HttpResponse response) {
         Header contentTypeHeader = contentTypeHeaders[0];
         boolean foundAllowedContentType = false;
         for(String anAllowedContentType : mAllowedContentTypes) {
-            if(anAllowedContentType.equals(contentTypeHeader.getValue())) {
+            if(Pattern.matches(anAllowedContentType, contentTypeHeader.getValue())) {
                 foundAllowedContentType = true;
             }
         }
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 084bf339..f4991b34 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -23,8 +23,9 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
-
+import org.apache.http.Header;
 import android.os.Message;
+import android.util.Log;
 
 /**
  * Used to intercept and handle the responses from requests made using
@@ -62,6 +63,18 @@ public void onSuccess(JSONObject response) {}
      */
     public void onSuccess(JSONArray response) {}
 
+    /**
+     * Fired when a request returns successfully and contains a json object
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param headers the headers of the HTTP response
+     * @param response the parsed json object found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
+        onSuccess(statusCode, response);
+    }
+
     /**
      * Fired when a request returns successfully and contains a json object
      * at the base of the response string. Override to handle in your
@@ -73,6 +86,17 @@ public void onSuccess(int statusCode, JSONObject response) {
         onSuccess(response);
     }
 
+    /**
+     * Fired when a request returns successfully and contains a json array
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param headers the headers of the HTTP response
+     * @param response the parsed json array found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, Header[] headers, JSONArray response) {
+        onSuccess(statusCode, response);
+    }
 
     /**
      * Fired when a request returns successfully and contains a json array
@@ -81,7 +105,7 @@ public void onSuccess(int statusCode, JSONObject response) {
      * @param statusCode the status code of the response
      * @param response the parsed json array found in the server response (if any)
      */
-    public void onSuccess(int statusCode, JSONArray response) {
+    public void onSuccess(int statusCode,  JSONArray response) {
         onSuccess(response);
     }
 
@@ -94,16 +118,17 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
     //
 
     @Override
-    protected void sendSuccessMessage(int statusCode, String responseBody) {
-    	if (statusCode != HttpStatus.SC_NO_CONTENT){
-	        try {
-	            Object jsonResponse = parseResponse(responseBody);
-	            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse}));
-	        } catch(JSONException e) {
-	            sendFailureMessage(e, responseBody);
-	        }
-    	}else{
-    		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
+    protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+        Log.d("JsonHttpResponseHandler", "sendSuccessMessage");
+        if (statusCode != HttpStatus.SC_NO_CONTENT){        
+            try {
+                Object jsonResponse = parseResponse(responseBody);
+	        sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, headers, jsonResponse}));
+    	    } catch(JSONException e) {
+    	        sendFailureMessage(e, responseBody);
+    	    }
+        } else {
+            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
     	}
     }
 
@@ -114,27 +139,30 @@ protected void sendSuccessMessage(int statusCode, String responseBody) {
 
     @Override
     protected void handleMessage(Message msg) {
+        Log.d("JsonHttpResponseHandler", "handleMessage");
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
                 Object[] response = (Object[]) msg.obj;
-                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1]);
+                handleSuccessJsonMessage(((Integer) response[0]).intValue(),(Header[]) response[1] ,response[2]);
                 break;
             default:
                 super.handleMessage(msg);
         }
     }
 
-    protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse) {
+    protected void handleSuccessJsonMessage(int statusCode,Header[] headers, Object jsonResponse) {
+        Log.d("JsonHttpResponseHandler", "handleSuccessJsonMessage");
         if(jsonResponse instanceof JSONObject) {
-            onSuccess(statusCode, (JSONObject)jsonResponse);
+            onSuccess(statusCode, headers, (JSONObject)jsonResponse);
         } else if(jsonResponse instanceof JSONArray) {
-            onSuccess(statusCode, (JSONArray)jsonResponse);
+            onSuccess(statusCode, headers, (JSONArray)jsonResponse);
         } else {
             onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
     }
 
     protected Object parseResponse(String responseBody) throws JSONException {
+        Log.d("JsonHttpResponseHandler", "parseResponse");
         Object result = null;
         //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If Json is not valid this will return null
 		responseBody = responseBody.trim();
@@ -149,6 +177,7 @@ protected Object parseResponse(String responseBody) throws JSONException {
 
     @Override
     protected void handleFailureMessage(Throwable e, String responseBody) {
+        Log.d("JsonHttpResponseHandler", "handleFailureMessage");
         try {
             if (responseBody != null) {
                 Object jsonResponse = parseResponse(responseBody);
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 3f98a00b..11b2a2bf 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -98,9 +98,6 @@ public void addCookie(Cookie cookie) {
 
     @Override
     public void clear() {
-        // Clear cookies from local store
-        cookies.clear();
-
         // Clear cookies from persistent store
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         for(String name : cookies.keySet()) {
@@ -108,6 +105,9 @@ public void clear() {
         }
         prefsWriter.remove(COOKIE_NAME_STORE);
         prefsWriter.commit();
+
+        // Clear cookies from local store
+        cookies.clear();
     }
 
     @Override
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index cf5d1dc4..cbb0c288 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -210,12 +210,12 @@ public String toString() {
                 result.append("&");
 
             ArrayList<String> values = entry.getValue();
-            for (String value : values) {
-                if (values.indexOf(value) != 0)
+            for (int i = 0; i < values.size(); i++) {
+                if (i != 0)
                     result.append("&");
                 result.append(entry.getKey());
                 result.append("=");
-                result.append(value);
+                result.append(values.get(i));
             }
         }
 
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 715456fb..5256aad2 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -65,6 +65,7 @@ public RetryHandler(int maxRetries) {
         this.maxRetries = maxRetries;
     }
 
+    @Override
     public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
         boolean retry = true;
 
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index bff0efcc..3221ec1e 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -58,47 +58,57 @@ public SimpleMultipartEntity() {
 
     public void writeFirstBoundaryIfNeeds(){
         if(!isSetFirst){
-            try {
-                out.write(("--" + boundary + "\r\n").getBytes());
-            } catch (final IOException e) {
-                e.printStackTrace();
-            }
+            writeBoundary();
         }
 
         isSetFirst = true;
     }
 
+    public void writeBoundary() {
+        try {
+            out.write(("--" + boundary + "\r\n").getBytes());
+        } catch (final IOException e) {
+            e.printStackTrace();
+        }
+    }
+
     public void writeLastBoundaryIfNeeds() {
         if(isSetLast){
             return;
         }
 
         try {
-            out.write(("\r\n--" + boundary + "--\r\n").getBytes());
+            out.write(("--" + boundary + "--\r\n").getBytes());
+            out.flush();
         } catch (final IOException e) {
             e.printStackTrace();
         }
-
+        
         isSetLast = true;
     }
 
-    public void addPart(final String key, final String value) {
-        writeFirstBoundaryIfNeeds();
+    public void addPart(final String key, final String value, final String contentType) {
+        writeBoundary();
         try {
-            out.write(("Content-Disposition: form-data; name=\"" +key+"\"\r\n\r\n").getBytes());
+            out.write(("Content-Disposition: form-data; name=\"" +key+"\"\r\n").getBytes());
+            out.write(("Content-Type: " + contentType + "\r\n\r\n").getBytes());
             out.write(value.getBytes());
-            out.write(("\r\n--" + boundary + "\r\n").getBytes());
+            out.write(("\r\n").getBytes());
         } catch (final IOException e) {
             e.printStackTrace();
         }
     }
 
+    public void addPart(final String key, final String value) {
+        addPart(key,value,"text/plain; charset=UTF-8");
+    }
+
     public void addPart(final String key, final String fileName, final InputStream fin, final boolean isLast){
         addPart(key, fileName, fin, "application/octet-stream", isLast);
     }
 
     public void addPart(final String key, final String fileName, final InputStream fin, String type, final boolean isLast){
-        writeFirstBoundaryIfNeeds();
+        writeBoundary();
         try {
             type = "Content-Type: "+type+"\r\n";
             out.write(("Content-Disposition: form-data; name=\""+ key+"\"; filename=\"" + fileName + "\"\r\n").getBytes());
@@ -110,9 +120,8 @@ public void addPart(final String key, final String fileName, final InputStream f
             while ((l = fin.read(tmp)) != -1) {
                 out.write(tmp, 0, l);
             }
-            if(!isLast)
-                out.write(("\r\n--" + boundary + "\r\n").getBytes());
-            out.flush();
+            out.write(("\r\n").getBytes());
+            
         } catch (final IOException e) {
             e.printStackTrace();
         } finally {
@@ -160,6 +169,7 @@ public boolean isStreaming() {
 
     @Override
     public void writeTo(final OutputStream outstream) throws IOException {
+        writeLastBoundaryIfNeeds();
         outstream.write(out.toByteArray());
     }
 
@@ -180,6 +190,7 @@ public void consumeContent() throws IOException,
     @Override
     public InputStream getContent() throws IOException,
     UnsupportedOperationException {
+    	writeLastBoundaryIfNeeds();
         return new ByteArrayInputStream(out.toByteArray());
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 84aeb6e5..84a6dbe6 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -17,7 +17,8 @@
 	protected String result;
 	protected AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
 
-		void sendResponseMessage(org.apache.http.HttpResponse response) {
+        @Override
+        void sendResponseMessage(org.apache.http.HttpResponse response) {
 			responseCode = response.getStatusLine().getStatusCode();
 			super.sendResponseMessage(response);
 		};
@@ -51,7 +52,8 @@ public int getResponseCode() {
 	}
 
 	// Private stuff
-	protected void sendRequest(DefaultHttpClient client,
+//    @Override
+    protected void sendRequest(DefaultHttpClient client,
 			HttpContext httpContext, HttpUriRequest uriRequest,
 			String contentType, AsyncHttpResponseHandler responseHandler,
 			Context context) {
@@ -84,7 +86,7 @@ public String get(String url, RequestParams params) {
 	}
 
 	public String get(String url) {
-		this.get(url, null, responseHandler);
+		this.get(url, null, responseHandler, null);
 		return result;
 	}
 
