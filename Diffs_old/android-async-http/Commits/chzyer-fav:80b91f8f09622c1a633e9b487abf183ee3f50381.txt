diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 94076682..7a7287f2 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -78,7 +78,6 @@ public PersistentCookieStore(Context context) {
         }
     }
 
-    @Override
     public void addCookie(Cookie cookie) {
         String name = cookie.getName();
 
@@ -96,7 +95,6 @@ public void addCookie(Cookie cookie) {
         prefsWriter.commit();
     }
 
-    @Override
     public void clear() {
         // Clear cookies from local store
         cookies.clear();
@@ -110,7 +108,6 @@ public void clear() {
         prefsWriter.commit();
     }
 
-    @Override
     public boolean clearExpired(Date date) {
         boolean clearedAny = false;
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
@@ -139,7 +136,6 @@ public boolean clearExpired(Date date) {
         return clearedAny;
     }
 
-    @Override
     public List<Cookie> getCookies() {
         return new ArrayList<Cookie>(cookies.values());
     }
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index bff0efcc..e463d147 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -132,43 +132,35 @@ public void addPart(final String key, final File value, final boolean isLast) {
         }
     }
 
-    @Override
     public long getContentLength() {
         writeLastBoundaryIfNeeds();
         return out.toByteArray().length;
     }
 
-    @Override
     public Header getContentType() {
         return new BasicHeader("Content-Type", "multipart/form-data; boundary=" + boundary);
     }
 
-    @Override
     public boolean isChunked() {
         return false;
     }
 
-    @Override
     public boolean isRepeatable() {
         return false;
     }
 
-    @Override
     public boolean isStreaming() {
         return false;
     }
 
-    @Override
     public void writeTo(final OutputStream outstream) throws IOException {
         outstream.write(out.toByteArray());
     }
 
-    @Override
     public Header getContentEncoding() {
         return null;
     }
 
-    @Override
     public void consumeContent() throws IOException,
     UnsupportedOperationException {
         if (isStreaming()) {
@@ -177,7 +169,6 @@ public void consumeContent() throws IOException,
         }
     }
 
-    @Override
     public InputStream getContent() throws IOException,
     UnsupportedOperationException {
         return new ByteArrayInputStream(out.toByteArray());
