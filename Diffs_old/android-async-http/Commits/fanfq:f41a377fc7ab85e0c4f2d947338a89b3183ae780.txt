diff --git a/.gitignore b/.gitignore
index aab3ee78..0900c481 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,4 +7,5 @@ local.properties
 bin/
 gen/
 _layouts
-.DS_Store
\ No newline at end of file
+.DS_Store
+gh-pages
\ No newline at end of file
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 906e8b92..fbeab8b4 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.loopj.android.http"
-    android:versionName="1.4.0"
+    android:versionName="1.4.1"
     android:versionCode="1">
     <application
         android:name="android_async_http">
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index e7111f41..fcdcb337 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -91,7 +91,7 @@
  * </pre>
  */
 public class AsyncHttpClient {
-	private static final String VERSION = "1.4.0";
+    private static final String VERSION = "1.4.1";
 
 	private static final int DEFAULT_MAX_CONNECTIONS = 10;
 	private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
@@ -500,41 +500,53 @@ public void post(Context context, String url, HttpEntity entity,
 				responseHandler, context);
 	}
 
-	/**
-	 * Perform a HTTP POST request and track the Android Context which initiated
-	 * the request. Set headers only for this request
-	 * 
-	 * @param context
-	 *            the Android Context which initiated the request.
-	 * @param url
-	 *            the URL to send the request to.
-	 * @param headers
-	 *            set headers only for this request
-	 * @param entity
-	 *            a raw {@link HttpEntity} to send with the request, for
-	 *            example, use this to send string/json/xml payloads to a server
-	 *            by passing a {@link org.apache.http.entity.StringEntity}.
-	 * @param contentType
-	 *            the content type of the payload you are sending, for example
-	 *            application/json if sending a json payload.
-	 * @param responseHandler
-	 *            the response handler instance that should handle the response.
-	 */
-	public void post(Context context, String url, Header[] headers,
-			RequestParams params, String contentType,
-			AsyncHttpResponseHandler responseHandler) {
-		HttpEntityEnclosingRequestBase request = new HttpPost(url);
-		if (params != null)
-			request.setEntity(paramsToEntity(params));
-		if (headers != null)
-			request.setHeaders(headers);
-		sendRequest(httpClient, httpContext, request, contentType,
-				responseHandler, context);
-	}
-
-	//
-	// HTTP PUT Requests
-	//
+    /**
+     * Perform a HTTP POST request and track the Android Context which initiated
+     * the request. Set headers only for this request
+     * 
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param headers set headers only for this request
+     * @param params additional POST parameters to send with the request.
+     * @param contentType the content type of the payload you are sending, for
+     *        example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle
+     *        the response.
+     */
+    public void post(Context context, String url, Header[] headers, RequestParams params, String contentType,
+            AsyncHttpResponseHandler responseHandler) {
+        HttpEntityEnclosingRequestBase request = new HttpPost(url);
+        if(params != null) request.setEntity(paramsToEntity(params));
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, contentType,
+                responseHandler, context);
+    }
+
+    /**
+     * Perform a HTTP POST request and track the Android Context which initiated
+     * the request. Set headers only for this request
+     *
+     * @param context the Android Context which initiated the request.
+     * @param url the URL to send the request to.
+     * @param headers set headers only for this request
+     * @param entity a raw {@link HttpEntity} to send with the request, for
+     *        example, use this to send string/json/xml payloads to a server by
+     *        passing a {@link org.apache.http.entity.StringEntity}.
+     * @param contentType the content type of the payload you are sending, for
+     *        example application/json if sending a json payload.
+     * @param responseHandler the response handler instance that should handle
+     *        the response.
+     */
+    public void post(Context context, String url, Header[] headers, HttpEntity entity, String contentType,
+            AsyncHttpResponseHandler responseHandler) {
+        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);
+        if(headers != null) request.setHeaders(headers);
+        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+    }
+
+    //
+    // HTTP PUT Requests
+    //
 
 	/**
 	 * Perform a HTTP PUT request, without any parameters.
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index d7ebdd6d..8832be0c 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.net.ConnectException;
+import java.net.UnknownHostException;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpRequestRetryHandler;
@@ -91,6 +92,11 @@ private void makeRequestWithRetries() throws ConnectException {
             try {
                 makeRequest();
                 return;
+	    } catch (UnknownHostException e) {
+	        if(responseHandler != null) {
+	            responseHandler.sendFailureMessage(e, "can't resolve host");
+		}
+		return;
             } catch (IOException e) {
                 cause = e;
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
@@ -108,4 +114,4 @@ private void makeRequestWithRetries() throws ConnectException {
         ex.initCause(cause);
         throw ex;
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 6c6be6d5..e574691e 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -23,6 +23,8 @@
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
+import android.os.Message;
+
 /**
  * Used to intercept and handle the responses from requests made using
  * {@link AsyncHttpClient}, with automatic parsing into a {@link JSONObject}
@@ -36,6 +38,8 @@
  * parent class.
  */
 public class JsonHttpResponseHandler extends AsyncHttpResponseHandler {
+    protected static final int SUCCESS_JSON_MESSAGE = 100;
+
     //
     // Callbacks to be overridden, typically anonymously
     //
@@ -57,51 +61,80 @@ public void onSuccess(JSONObject response) {}
      */
     public void onSuccess(JSONArray response) {}
 
+    public void onFailure(Throwable e, JSONObject errorResponse) {}
+    public void onFailure(Throwable e, JSONArray errorResponse) {}
+
 
-    // Utility methods
-    @Override
-    protected void handleSuccessMessage(String responseBody) {
-        super.handleSuccessMessage(responseBody);
+    //
+    // Pre-processing of messages (executes in background threadpool thread)
+    //
 
+    @Override
+    protected void sendSuccessMessage(String responseBody) {
         try {
             Object jsonResponse = parseResponse(responseBody);
-            if(jsonResponse instanceof JSONObject) {
-                onSuccess((JSONObject)jsonResponse);
-            } else if(jsonResponse instanceof JSONArray) {
-                onSuccess((JSONArray)jsonResponse);
-            } else {
-                throw new JSONException("Unexpected type " + jsonResponse.getClass().getName());
-            }
+            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, jsonResponse));
         } catch(JSONException e) {
-            onFailure(e, responseBody);
+            sendFailureMessage(e, responseBody);
         }
     }
 
-    protected Object parseResponse(String responseBody) throws JSONException {
-        return new JSONTokener(responseBody).nextValue();
+
+    //
+    // Pre-processing of messages (in original calling thread, typically the UI thread)
+    //
+
+    @Override
+    protected void handleMessage(Message msg) {
+        switch(msg.what){
+            case SUCCESS_JSON_MESSAGE:
+                handleSuccessJsonMessage(msg.obj);
+                break;
+            default:
+                super.handleMessage(msg);
+        }
     }
 
-    /**
-     * Handle cases where a failure is returned as JSON
-     */
-    public void onFailure(Throwable e, JSONObject errorResponse) {}
-    public void onFailure(Throwable e, JSONArray errorResponse) {}
+    protected void handleSuccessJsonMessage(Object jsonResponse) {
+        if(jsonResponse instanceof JSONObject) {
+            onSuccess((JSONObject)jsonResponse);
+        } else if(jsonResponse instanceof JSONArray) {
+            onSuccess((JSONArray)jsonResponse);
+        } else {
+            onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()));
+        }
+    }
+
+    protected Object parseResponse(String responseBody) throws JSONException {
+        Object result = null;
+        //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If Json is not valid this will return null
+		responseBody = responseBody.trim();
+		if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
+			result = new JSONTokener(responseBody).nextValue();
+		}
+		if (result == null) {
+			result = responseBody;
+		}
+		return result;
+    }
 
     @Override
     protected void handleFailureMessage(Throwable e, String responseBody) {
-        if (responseBody != null) try {
-            Object jsonResponse = parseResponse(responseBody);
-            if(jsonResponse instanceof JSONObject) {
-                onFailure(e, (JSONObject)jsonResponse);
-            } else if(jsonResponse instanceof JSONArray) {
-                onFailure(e, (JSONArray)jsonResponse);
+        try {
+            if (responseBody != null) {
+                Object jsonResponse = parseResponse(responseBody);
+                if(jsonResponse instanceof JSONObject) {
+                    onFailure(e, (JSONObject)jsonResponse);
+                } else if(jsonResponse instanceof JSONArray) {
+                    onFailure(e, (JSONArray)jsonResponse);
+                } else {
+                    onFailure(e, responseBody);
+                }
+            }else {
+                onFailure(e, "");
             }
-        }
-        catch(JSONException ex) {
+        }catch(JSONException ex) {
             onFailure(e, responseBody);
         }
-        else {
-            onFailure(e, "");
-        }
     }
 }
