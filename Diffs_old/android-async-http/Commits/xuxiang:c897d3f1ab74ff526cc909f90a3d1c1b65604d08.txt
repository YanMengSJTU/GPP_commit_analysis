diff --git a/.classpath b/.classpath
index 5f2ee097..d691b78e 100644
--- a/.classpath
+++ b/.classpath
@@ -3,5 +3,6 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/src/com/allthelucky/framework/Log.java b/src/com/allthelucky/framework/Log.java
new file mode 100644
index 00000000..9fc6ab45
--- /dev/null
+++ b/src/com/allthelucky/framework/Log.java
@@ -0,0 +1,41 @@
+package com.allthelucky.framework;
+
+/**
+ * @description: overide Log utils
+ * 
+ * @author pxw(www.allthelucky.com)
+ * 
+ */
+public final class Log {
+
+	private static boolean mDebug = false;
+
+	public static void init(final boolean debug) {
+		mDebug = debug;
+	}
+
+	public static void e(final String tag, final String msg) {
+		if (mDebug) {
+			android.util.Log.e(tag, msg);
+		}
+	}
+
+	public static void e(final String tag, final String msg, final Throwable tr) {
+		if (mDebug) {
+			android.util.Log.e(tag, msg, tr);
+		}
+	}
+
+	public static void d(final String tag, final String msg) {
+		if (mDebug) {
+			android.util.Log.d(tag, msg);
+		}
+	}
+
+	public static void d(final String tag, final String msg, final Throwable tr) {
+		if (mDebug) {
+			android.util.Log.d(tag, msg, tr);
+		}
+	}
+
+}
diff --git a/src/com/allthelucky/framework/WebImageBuffer.java b/src/com/allthelucky/framework/WebImageBuffer.java
deleted file mode 100644
index 0d09ef4e..00000000
--- a/src/com/allthelucky/framework/WebImageBuffer.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.allthelucky.framework;
-
-import java.util.HashMap;
-
-import android.graphics.Bitmap;
-
-/**
- * Buffer Utils for WebImageView
- * 
- * @author savant
- * 
- */
-public class WebImageBuffer {
-	private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
-
-	public synchronized static Bitmap get(String url) {
-		try {
-			return caches.get(url);
-		} catch (Exception e) {
-			e.printStackTrace();
-			return null;
-		}
-	}
-
-	public synchronized static void put(String url, Bitmap bitmap) {
-		try {
-			caches.put(url, bitmap);
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-}
diff --git a/src/com/allthelucky/framework/WebImageView.java b/src/com/allthelucky/framework/WebImageView.java
index 23f0d981..4d6afcb3 100644
--- a/src/com/allthelucky/framework/WebImageView.java
+++ b/src/com/allthelucky/framework/WebImageView.java
@@ -1,120 +1,187 @@
 package com.allthelucky.framework;
 
+import java.util.HashMap;
+
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.BitmapFactory.Options;
 import android.text.TextUtils;
 import android.util.AttributeSet;
-import android.util.Log;
+import android.webkit.WebSettings;
 import android.widget.ImageView;
 
 /**
- * WebImageView
+ * Web ImageView
+ * 
+ * @author pxw
  */
 public class WebImageView extends ImageView {
+    protected static final String TAG = "WebImageView";
+    private int defaultImage = R.drawable.ic_launcher;
+    private String imageUrl = "";
+    private boolean hasRetry = false;
+
+    /**
+     * @param context
+     */
+    public WebImageView(Context context) {
+        this(context, null);
+    }
+
+    /**
+     * @param context
+     * @param attrs
+     */
+    public WebImageView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    /**
+     * @param context
+     * @param attrs
+     * @param defStyle
+     */
+    public WebImageView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    /**
+     * 设置请求网址
+     * 
+     * @param url
+     */
+    public void setURLAsync(String url) {
+        setURLAsync(url, R.drawable.ic_launcher);
+    }
+
+    /**
+     * 设置请求网址及默认资源
+     * 
+     * @param url
+     * @param defaultImage
+     */
+    public void setURLAsync(String url, int defaultImage) {
+        this.imageUrl = url;
+        this.defaultImage = defaultImage;
+        this.firstLoad();
+    }
+
+    /**
+     * 第一次加载，如有更新加载网络，否则加载缓存
+     */
+    private void firstLoad() {
+        this.loadResource(WebSettings.LOAD_CACHE_ELSE_NETWORK);
+    }
+
+    /**
+     * 加载失败的情况下，试图仅从缓存加载
+     */
+    private void retryCache() {
+        this.loadResource(WebSettings.LOAD_CACHE_ONLY);
+    }
+
+    private void loadResource(int cacheMode) {
+        if (TextUtils.isEmpty(imageUrl)) {
+            this.setDefaultImage();
+        } else {
+            RequestManager.getInstance().get(getContext(), imageUrl, requestListener, true, 0);
+        }
+    }
+
+    /**
+     * 网络加载结果处理
+     */
+    private RequestListener requestListener = new RequestListener() {
+
+        @Override
+        public void onStart() {
+
+        }
+
+        @Override
+        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
+            if (RequestListener.ERR == statusCode) {
+                if (!hasRetry) {
+                    hasRetry = true;
+                    retryCache();
+                } else {
+                    setDefaultImage();
+                }
+            } else {
+                Bitmap bitmap = WebImageBuffer.get(imageUrl);
+                if (null != bitmap) {
+                    setImageBitmap(bitmap);
+                } else {
+                    if (null != data) {
+                        BitmapFactory.Options options = new Options();
+                        options.inDither = false; /* 不进行图片抖动处理 */
+                        options.inPreferredConfig = null; /* 设置让解码器以最佳方式解码 */
+                        options.inSampleSize = 1; /* 图片长宽方向缩小倍数 */
+                        options.inPreferredConfig = Bitmap.Config.RGB_565;
+                        options.inJustDecodeBounds = false;
+                        bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
+                        if (bitmap != null) {
+                            setImageBitmap(bitmap);
+                            WebImageBuffer.put(imageUrl, bitmap);
+                        } else {
+                            setDefaultImage();
+                        }
+                    } else {
+                        setDefaultImage();
+                    }
+                }
+            }
+        }
+    };
+
+    /**
+     * 设置默认资源图片
+     */
+    public void setDefaultImage() {
+        setImageDrawable(getResources().getDrawable(defaultImage));
+    }
+
+    /**
+     * 重置 WebImageBuffer
+     */
+    public static void resetWebImageBuffer() {
+        WebImageBuffer.clear();
+    }
+
+    /**
+     * 图像Bitmap缓存工具
+     * 
+     * @author pxw
+     * 
+     */
+    public static class WebImageBuffer {
+        private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
+
+        public synchronized static void clear() {
+            try {
+                caches.clear();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        public synchronized static Bitmap get(String url) {
+            try {
+                return caches.get(url);
+            } catch (Exception e) {
+                e.printStackTrace();
+                return null;
+            }
+        }
 
-	private Context context;
-
-	/**
-	 * @param context
-	 */
-	public WebImageView(Context context) {
-		this(context, null);
-	}
-
-	/**
-	 * @param context
-	 * @param attrs
-	 */
-	public WebImageView(Context context, AttributeSet attrs) {
-		this(context, attrs, 0);
-	}
-
-	/**
-	 * @param context
-	 * @param attrs
-	 * @param defStyle
-	 */
-	public WebImageView(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-		init(context);
-	}
-
-	/**
-	 * @param context
-	 */
-	private void init(Context context) {
-		this.context = context;
-	}
-
-	/**
-	 * Sets the content of this ImageView to the specified URL.
-	 * 
-	 * @param url
-	 *            The URL of an image
-	 */
-	public void setURLAsync(String url) {
-		setURLAsync(url, android.R.drawable.btn_default);
-	}
-
-	/**
-	 * @param url
-	 * @param loadNoCache
-	 */
-	public synchronized void setURLAsync(String url, int defaultImage) {
-		if (TextUtils.isEmpty(url)) {
-			return;
-		}
-		RequestManager.getInstance().get(context, url, new ImageRequestListener(url, defaultImage), true, 0);
-	}
-
-	final class ImageRequestListener implements RequestListener {
-		private String url;
-		private int defaultImage;
-
-		public ImageRequestListener(String url, int defaultImage) {
-			this.url = url;
-			this.defaultImage = defaultImage;
-		}
-
-		@Override
-		public void onStart() {
-			Log.d("WebImageView", "load image:" + url);
-		}
-
-		@Override
-		public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
-			if (actionId == 0) {
-				if (null != data && statusCode != RequestListener.ERR) {
-					BitmapFactory.Options options = new Options();
-					options.inDither = false; /* 不进行图片抖动处理 */
-					options.inPreferredConfig = null; /* 设置让解码器以最佳方式解码 */
-					options.inSampleSize = 2; /* 图片长宽方向缩小倍数 */
-					options.inPreferredConfig = Bitmap.Config.RGB_565;
-					options.inJustDecodeBounds = false;
-					Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
-					if (bitmap != null) {
-						setImageBitmap(bitmap);
-						WebImageBuffer.put(url, bitmap);
-					} else {
-						bitmap = WebImageBuffer.get(url);
-						if (null != bitmap) {
-							setImageBitmap(bitmap);
-						}
-					}
-				} else {
-					Bitmap bitmap = WebImageBuffer.get(url);
-					if (bitmap == null) {
-						setImageDrawable(getResources().getDrawable(defaultImage));
-					} else {
-						setImageBitmap(bitmap);
-					}
-				}
-			} else {
-				setImageDrawable(getResources().getDrawable(defaultImage));
-			}
-		}
-	}
+        public synchronized static void put(String url, Bitmap bitmap) {
+            try {
+                caches.put(url, bitmap);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+    }
 
 }
