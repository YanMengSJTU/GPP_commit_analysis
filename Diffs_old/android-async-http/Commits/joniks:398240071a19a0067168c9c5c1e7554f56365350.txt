diff --git a/.travis.yml b/.travis.yml
index 95e9236b..01d25146 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,10 +2,10 @@ language: android
 jdk: openjdk7
 android:
   components:
-    - build-tools-21.1.2
+    - build-tools-22.0.1
     - extra-android-support
     - extra-android-m2repository
-    - android-21
+    - android-22
   licenses:
     - '.+'
 script:
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 0087cd3b..085a1cdc 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 5a5b38e6..9a832b48 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Thu Jan 22 17:47:44 CET 2015
+#Thu Apr 02 15:10:03 CEST 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.3-bin.zip
diff --git a/library/build.gradle b/library/build.gradle
index d05b0b66..6f5a9d3c 100755
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,12 +1,12 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion '21.1.2'
+    compileSdkVersion 22
+    buildToolsVersion '22.0.1'
 
     defaultConfig {
         minSdkVersion 3
-        targetSdkVersion 21
+        targetSdkVersion 22
     }
 
     lintOptions {
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index ca7955b9..7c7fa303 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -634,10 +634,10 @@ public void setBasicAuth(String username, String password) {
      *
      * @param username  Basic Auth username
      * @param password  Basic Auth password
-     * @param preemtive sets authorization in preemtive manner
+     * @param preemptive sets authorization in preemptive manner
      */
-    public void setBasicAuth(String username, String password, boolean preemtive) {
-        setBasicAuth(username, password, null, preemtive);
+    public void setBasicAuth(String username, String password, boolean preemptive) {
+        setBasicAuth(username, password, null, preemptive);
     }
 
     /**
@@ -659,12 +659,12 @@ public void setBasicAuth(String username, String password, AuthScope scope) {
      * @param username  Basic Auth username
      * @param password  Basic Auth password
      * @param scope     an AuthScope object
-     * @param preemtive sets authorization in preemtive manner
+     * @param preemptive sets authorization in preemptive manner
      */
-    public void setBasicAuth(String username, String password, AuthScope scope, boolean preemtive) {
+    public void setBasicAuth(String username, String password, AuthScope scope, boolean preemptive) {
         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);
         setCredentials(scope, credentials);
-        setAuthenticationPreemptive(preemtive);
+        setAuthenticationPreemptive(preemptive);
     }
 
     public void setCredentials(AuthScope authScope, Credentials credentials) {
@@ -676,16 +676,16 @@ public void setCredentials(AuthScope authScope, Credentials credentials) {
     }
 
     /**
-     * Sets HttpRequestInterceptor which handles authorization in preemtive way, as workaround you
+     * Sets HttpRequestInterceptor which handles authorization in preemptive way, as workaround you
      * can use call `AsyncHttpClient.addHeader("Authorization","Basic base64OfUsernameAndPassword==")`
      *
-     * @param isPreemtive whether the authorization is processed in preemtive way
+     * @param isPreemptive whether the authorization is processed in preemptive way
      */
-    public void setAuthenticationPreemptive(boolean isPreemtive) {
-        if (isPreemtive) {
-            httpClient.addRequestInterceptor(new PreemtiveAuthorizationHttpRequestInterceptor(), 0);
+    public void setAuthenticationPreemptive(boolean isPreemptive) {
+        if (isPreemptive) {
+            httpClient.addRequestInterceptor(new PreemptiveAuthorizationHttpRequestInterceptor(), 0);
         } else {
-            httpClient.removeRequestInterceptorByClass(PreemtiveAuthorizationHttpRequestInterceptor.class);
+            httpClient.removeRequestInterceptorByClass(PreemptiveAuthorizationHttpRequestInterceptor.class);
         }
     }
 
@@ -1309,9 +1309,10 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         RequestHandle requestHandle = new RequestHandle(request);
 
         if (context != null) {
+            List<RequestHandle> requestList;
             // Add request to request map
-            List<RequestHandle> requestList = requestMap.get(context);
             synchronized (requestMap) {
+                requestList = requestMap.get(context);
                 if (requestList == null) {
                     requestList = Collections.synchronizedList(new LinkedList<RequestHandle>());
                     requestMap.put(context, requestList);
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java b/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
index 6ae195e2..e18494a4 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpRequest.java
@@ -183,7 +183,7 @@ private void makeRequestWithRetries() throws IOException {
                     // while the WI-FI is initialising. The retry logic will be invoked here, if this is NOT the first retry
                     // (to assist in genuine cases of unknown host) which seems better than outright failure
                     cause = new IOException("UnknownHostException exception: " + e.getMessage());
-                    retry = (executionCount > 0) && retryHandler.retryRequest(cause, ++executionCount, context);
+                    retry = (executionCount > 0) && retryHandler.retryRequest(e, ++executionCount, context);
                 } catch (NullPointerException e) {
                     // there's a bug in HttpClient 4.0.x that on some occasions causes
                     // DefaultRequestExecutor to throw an NPE, see
diff --git a/library/src/main/java/com/loopj/android/http/PreemtiveAuthorizationHttpRequestInterceptor.java b/library/src/main/java/com/loopj/android/http/PreemptiveAuthorizationHttpRequestInterceptor.java
old mode 100755
new mode 100644
similarity index 95%
rename from library/src/main/java/com/loopj/android/http/PreemtiveAuthorizationHttpRequestInterceptor.java
rename to library/src/main/java/com/loopj/android/http/PreemptiveAuthorizationHttpRequestInterceptor.java
index 3f52da79..d3832c6d
--- a/library/src/main/java/com/loopj/android/http/PreemtiveAuthorizationHttpRequestInterceptor.java
+++ b/library/src/main/java/com/loopj/android/http/PreemptiveAuthorizationHttpRequestInterceptor.java
@@ -33,7 +33,7 @@
 
 import java.io.IOException;
 
-public class PreemtiveAuthorizationHttpRequestInterceptor implements HttpRequestInterceptor {
+public class PreemptiveAuthorizationHttpRequestInterceptor implements HttpRequestInterceptor {
 
     public void process(final HttpRequest request, final HttpContext context) throws HttpException, IOException {
         AuthState authState = (AuthState) context.getAttribute(ClientContext.TARGET_AUTH_STATE);
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index 4c4ce49e..095134b9 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -38,6 +38,7 @@
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -72,6 +73,9 @@
  * String[] colors = { "blue", "yellow" }; // Ordered collection
  * params.put("colors", colors); // url params: "colors[]=blue&amp;colors[]=yellow"
  *
+ * File[] files = { new File("pic.jpg"), new File("pic1.jpg") }; // Ordered collection
+ * params.put("files", files); // url params: "files[]=pic.jpg&amp;files[]=pic1.jpg"
+ *
  * List&lt;Map&lt;String, String&gt;&gt; listOfMaps = new ArrayList&lt;Map&lt;String,
  * String&gt;&gt;();
  * Map&lt;String, String&gt; user1 = new HashMap&lt;String, String&gt;();
@@ -98,12 +102,14 @@
 
     protected final static String LOG_TAG = "RequestParams";
     protected boolean isRepeatable;
+    protected boolean forceMultipartEntity = false;
     protected boolean useJsonStreamer;
     protected String elapsedFieldInJsonStreamer = "_elapsed";
     protected boolean autoCloseInputStreams;
     protected final ConcurrentHashMap<String, String> urlParams = new ConcurrentHashMap<String, String>();
     protected final ConcurrentHashMap<String, StreamWrapper> streamParams = new ConcurrentHashMap<String, StreamWrapper>();
     protected final ConcurrentHashMap<String, FileWrapper> fileParams = new ConcurrentHashMap<String, FileWrapper>();
+    protected final ConcurrentHashMap<String, List<FileWrapper> >fileArrayParams = new ConcurrentHashMap<String, List<FileWrapper>>();
     protected final ConcurrentHashMap<String, Object> urlParamsWithObjects = new ConcurrentHashMap<String, Object>();
     protected String contentEncoding = HTTP.UTF_8;
 
@@ -111,7 +117,7 @@
      * Sets content encoding for return value of {@link #getParamString()} and {@link
      * #createFormEntity()} <p>&nbsp;</p> Default encoding is "UTF-8"
      *
-     * @param encoding String constant from {@link org.apache.http.protocol.HTTP}
+     * @param encoding String constant from {@link HTTP}
      */
     public void setContentEncoding(final String encoding) {
         if (encoding != null) {
@@ -121,6 +127,18 @@ public void setContentEncoding(final String encoding) {
         }
     }
 
+    /**
+     * If set to true will force Content-Type header to `multipart/form-data`
+     * even if there are not Files or Streams to be send
+     *
+     * Default value is false
+     *
+     * @param force boolean, should declare content-type multipart/form-data even without files or streams present
+     */
+    public void setForceMultipartEntityContentType(boolean force) {
+        this.forceMultipartEntity = force;
+    }
+
     /**
      * Constructs a new empty {@code RequestParams} instance.
      */
@@ -186,12 +204,47 @@ public void put(String key, String value) {
         }
     }
 
+    /**
+     * Adds files array to the request.
+     *
+     * @param key the key name for the new param.
+     * @param files the files array to add.
+     * @throws FileNotFoundException
+     */
+    public void put(String key, File files[]) throws FileNotFoundException {
+        put(key, files, null, null);
+    }
+
+    /**
+     *
+     * Adds files array to the request with both custom provided file content-type and files name
+     *
+     * @param key            the key name for the new param.
+     * @param files           the files array to add.
+     * @param contentType    the content type of the file, eg. application/json
+     * @param customFileName file name to use instead of real file name
+     * @throws FileNotFoundException throws if wrong File argument was passed
+     */
+    public void put(String key, File files[], String contentType, String customFileName) throws FileNotFoundException {
+
+        if(key != null){
+            List<FileWrapper> fileWrappers = new ArrayList<FileWrapper>();
+            for (int i=0;i<files.length;i++){
+                if(files[i] == null || !files[i].exists()){
+                    throw new FileNotFoundException();
+                }
+                fileWrappers.add(new FileWrapper(files[i], contentType, customFileName));
+            }
+            fileArrayParams.put(key,fileWrappers);
+        }
+    }
+
     /**
      * Adds a file to the request.
      *
      * @param key  the key name for the new param.
      * @param file the file to add.
-     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     * @throws FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file) throws FileNotFoundException {
         put(key, file, null, null);
@@ -203,7 +256,7 @@ public void put(String key, File file) throws FileNotFoundException {
      * @param key            the key name for the new param.
      * @param file           the file to add.
      * @param customFileName file name to use instead of real file name
-     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     * @throws FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, String customFileName, File file) throws FileNotFoundException {
         put(key, file, null, customFileName);
@@ -215,7 +268,7 @@ public void put(String key, String customFileName, File file) throws FileNotFoun
      * @param key         the key name for the new param.
      * @param file        the file to add.
      * @param contentType the content type of the file, eg. application/json
-     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     * @throws FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file, String contentType) throws FileNotFoundException {
         put(key, file, contentType, null);
@@ -228,7 +281,7 @@ public void put(String key, File file, String contentType) throws FileNotFoundEx
      * @param file           the file to add.
      * @param contentType    the content type of the file, eg. application/json
      * @param customFileName file name to use instead of real file name
-     * @throws java.io.FileNotFoundException throws if wrong File argument was passed
+     * @throws FileNotFoundException throws if wrong File argument was passed
      */
     public void put(String key, File file, String contentType, String customFileName) throws FileNotFoundException {
         if (file == null || !file.exists()) {
@@ -355,6 +408,7 @@ public void remove(String key) {
         streamParams.remove(key);
         fileParams.remove(key);
         urlParamsWithObjects.remove(key);
+        fileArrayParams.remove(key);
     }
 
     /**
@@ -367,7 +421,8 @@ public boolean has(String key) {
         return urlParams.get(key) != null ||
                 streamParams.get(key) != null ||
                 fileParams.get(key) != null ||
-                urlParamsWithObjects.get(key) != null;
+                urlParamsWithObjects.get(key) != null ||
+                fileArrayParams.get(key) != null;
     }
 
     @Override
@@ -400,6 +455,15 @@ public String toString() {
             result.append("FILE");
         }
 
+        for (ConcurrentHashMap.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
+            if (result.length() > 0)
+                result.append("&");
+
+            result.append(entry.getKey());
+            result.append("=");
+            result.append("FILE");
+        }
+
         List<BasicNameValuePair> params = getParamsList(null, urlParamsWithObjects);
         for (BasicNameValuePair kv : params) {
             if (result.length() > 0)
@@ -455,7 +519,7 @@ public void setAutoCloseInputStreams(boolean flag) {
     public HttpEntity getEntity(ResponseHandlerInterface progressHandler) throws IOException {
         if (useJsonStreamer) {
             return createJsonStreamerEntity(progressHandler);
-        } else if (streamParams.isEmpty() && fileParams.isEmpty()) {
+        } else if (!forceMultipartEntity && streamParams.isEmpty() && fileParams.isEmpty() && fileArrayParams.isEmpty()) {
             return createFormEntity();
         } else {
             return createMultipartEntity(progressHandler);
@@ -464,9 +528,9 @@ public HttpEntity getEntity(ResponseHandlerInterface progressHandler) throws IOE
 
     private HttpEntity createJsonStreamerEntity(ResponseHandlerInterface progressHandler) throws IOException {
         JsonStreamerEntity entity = new JsonStreamerEntity(
-            progressHandler,
-            !fileParams.isEmpty() || !streamParams.isEmpty(),
-            elapsedFieldInJsonStreamer);
+                progressHandler,
+                !fileParams.isEmpty() || !streamParams.isEmpty(),
+                elapsedFieldInJsonStreamer);
 
         // Add string params
         for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
@@ -539,6 +603,14 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
             entity.addPart(entry.getKey(), fileWrapper.file, fileWrapper.contentType, fileWrapper.customFileName);
         }
 
+        // Add file collection
+        for (ConcurrentHashMap.Entry<String, List<FileWrapper>> entry : fileArrayParams.entrySet()) {
+            List<FileWrapper> fileWrapper = entry.getValue();
+            for (FileWrapper fw:fileWrapper){
+                entity.addPart(entry.getKey(), fw.file, fw.contentType, fw.customFileName);
+            }
+        }
+
         return entity;
     }
 
@@ -567,7 +639,7 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
                 if (nestedKey instanceof String) {
                     Object nestedValue = map.get(nestedKey);
                     if (nestedValue != null) {
-                        params.addAll(getParamsList(key == null ? (String) nestedKey : String.format("%s[%s]", key, nestedKey),
+                        params.addAll(getParamsList(key == null ? (String) nestedKey : String.format(Locale.US, "%s[%s]", key, nestedKey),
                                 nestedValue));
                     }
                 }
@@ -576,13 +648,13 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
             List list = (List) value;
             int listSize = list.size();
             for (int nestedValueIndex = 0; nestedValueIndex < listSize; nestedValueIndex++) {
-                params.addAll(getParamsList(String.format("%s[%d]", key, nestedValueIndex), list.get(nestedValueIndex)));
+                params.addAll(getParamsList(String.format(Locale.US, "%s[%d]", key, nestedValueIndex), list.get(nestedValueIndex)));
             }
         } else if (value instanceof Object[]) {
             Object[] array = (Object[]) value;
             int arrayLength = array.length;
             for (int nestedValueIndex = 0; nestedValueIndex < arrayLength; nestedValueIndex++) {
-                params.addAll(getParamsList(String.format("%s[%d]", key, nestedValueIndex), array[nestedValueIndex]));
+                params.addAll(getParamsList(String.format(Locale.US, "%s[%d]", key, nestedValueIndex), array[nestedValueIndex]));
             }
         } else if (value instanceof Set) {
             Set set = (Set) value;
diff --git a/maven_push.gradle b/maven_push.gradle
index 27fff0d8..93f9f4e0 100755
--- a/maven_push.gradle
+++ b/maven_push.gradle
@@ -87,6 +87,20 @@ afterEvaluate { project ->
         }
     }
 
+    task installArchives(type: Upload) {
+        description "Installs the artifacts to the local Maven repository."
+        configuration = configurations['archives']
+        repositories {
+            mavenDeployer {
+                pom.groupId = GROUP
+                pom.artifactId = POM_ARTIFACT_ID
+                pom.version = VERSION_NAME
+
+                repository url: "file://${System.properties['user.home']}/.m2/repository"
+            }
+        }
+    }
+
     signing {
         required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
         sign configurations.archives
diff --git a/sample/build.gradle b/sample/build.gradle
index 84507453..370f59ff 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -8,12 +8,12 @@ repositories {
 }
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion '21.1.2'
+    compileSdkVersion 22
+    buildToolsVersion '22.0.1'
 
     defaultConfig {
         minSdkVersion 3
-        targetSdkVersion 21
+        targetSdkVersion 22
     }
 
     compileOptions {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java b/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java
index 779c2f0e..8cc05f43 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/util/SecureSocketFactory.java
@@ -45,6 +45,7 @@
 import java.security.cert.X509Certificate;
 
 import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSocket;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
 
@@ -166,7 +167,12 @@ public Socket createSocket(Socket socket, String host, int port, boolean autoClo
             throws IOException {
 
         injectHostname(socket, host);
-        return sslCtx.getSocketFactory().createSocket(socket, host, port, autoClose);
+        Socket sslSocket = sslCtx.getSocketFactory().createSocket(socket, host, port, autoClose);
+        
+        // throw an exception if the hostname does not match the certificate
+        getHostnameVerifier().verify(host, (SSLSocket) sslSocket);
+        
+        return sslSocket;
     }
 
     @Override
