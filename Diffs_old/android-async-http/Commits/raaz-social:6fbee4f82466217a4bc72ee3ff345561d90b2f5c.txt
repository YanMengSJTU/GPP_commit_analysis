diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index 64c2636b..a026fbac 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -38,6 +38,8 @@
 import com.jakewharton.DiskLruCache;
 import com.jakewharton.DiskLruCache.Snapshot;
 import com.loopj.android.http.RetryHandler;
+import com.twofours.surespot.common.FileUtils;
+import com.twofours.surespot.common.SurespotConstants;
 import com.twofours.surespot.common.WebClientDevWrapper;
 
 public class SurespotCachingHttpClient extends CachingHttpClient {
@@ -150,14 +152,13 @@ public static String md5(String s) {
 
 
 	public static class SurespotHttpCacheStorage implements HttpCacheStorage {
-		private static final String DISK_CACHE_SUBDIR = "http";
 		private static final String TAG = "SurespotHttpCacheStorage";
 		private com.jakewharton.DiskLruCache mCache;
 		private File mCacheDir;
 
 		public SurespotHttpCacheStorage(Context context) throws IOException {
 
-			mCacheDir = getDiskCacheDir(context, DISK_CACHE_SUBDIR);
+			mCacheDir = FileUtils.getDiskCacheDir(context, SurespotConstants.FileLocations.HTTP_CACHE);
 
 			Log.v(TAG, "storage cache dir: " + mCacheDir);
 
@@ -263,81 +264,7 @@ private void clearCache(File cacheDir) {
 			}
 		}
 
-		/**
-		 * Get a usable cache directory (external if available, internal otherwise).
-		 * 
-		 * @param context
-		 *            The context to use
-		 * @param uniqueName
-		 *            A unique directory name to append to the cache dir
-		 * @return The cache dir
-		 */
-		public File getDiskCacheDir(Context context, String uniqueName) {
-
-			// Check if media is mounted or storage is built-in, if so, try and use external cache dir
-			// otherwise use internal cache dir
-			String cachePath = null;
-
-			// see if we can write to the "external" storage
-			if (Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED || !isExternalStorageRemovable()) {
-				cachePath = getExternalCacheDir(context).getPath();
-			}
-
-			if (cachePath != null) {
-				File cacheDir = new File(cachePath + File.separator + uniqueName);
-				if (cacheDir.canWrite()) {
-					return cacheDir;
-				}
-
-			}
-
-			return new File(context.getCacheDir().getPath() + File.separator + uniqueName);
-
-		}
-
-		/**
-		 * Check if external storage is built-in or removable.
-		 * 
-		 * @return True if external storage is removable (like an SD card), false otherwise.
-		 */
-		@SuppressLint("NewApi")
-		public boolean isExternalStorageRemovable() {
-			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
-				return Environment.isExternalStorageRemovable();
-			}
-			return true;
-		}
-
-		/**
-		 * Get the external app cache directory.
-		 * 
-		 * @param context
-		 *            The context to use
-		 * @return The external cache dir
-		 */
-		@SuppressLint("NewApi")
-		public File getExternalCacheDir(Context context) {
-			File cacheDir = null;
-			if (hasExternalCacheDir()) {
-				cacheDir = context.getExternalCacheDir();
-			}
-
-			if (cacheDir == null) {
-				// Before Froyo we need to construct the external cache dir ourselves
-				final String sCacheDir = "/Android/data/" + context.getPackageName() + "/cache/";
-				cacheDir = new File(Environment.getExternalStorageDirectory().getPath() + sCacheDir);
-			}
-			return cacheDir;
-		}
-
-		/**
-		 * Check if OS version has built-in external cache dir method.
-		 * 
-		 * @return
-		 */
-		public boolean hasExternalCacheDir() {
-			return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;
-		}
+		
 
 	}
 
