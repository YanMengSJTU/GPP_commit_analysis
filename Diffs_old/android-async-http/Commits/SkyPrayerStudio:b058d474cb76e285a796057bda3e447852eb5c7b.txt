diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 7d675a59..6ccaab0c 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -147,7 +147,7 @@ protected void handleMessage(Message msg) {
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
-                handleFailureMessage((Throwable)response[0], response[1].toString());
+                handleFailureMessage((Throwable)response[0], (byte[]) response[1]);
                 break;
             default:
                 super.handleMessage(msg);
@@ -195,4 +195,4 @@ void sendResponseMessage(HttpResponse response) {
             sendSuccessMessage(status.getStatusCode(), responseBody);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 59c7983b..2c0cbda2 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -40,20 +40,17 @@
  * <p>
  * For example:
  * <p>
- * 
  * <pre>
  * RequestParams params = new RequestParams();
- * params.put(&quot;username&quot;, &quot;james&quot;);
- * params.put(&quot;password&quot;, &quot;123456&quot;);
- * params.put(&quot;email&quot;, &quot;my@email.com&quot;);
- * params.put(&quot;profile_picture&quot;, new File(&quot;pic.jpg&quot;)); // Upload a File
- * params.put(&quot;profile_picture2&quot;, someInputStream); // Upload an InputStream
- * params.put(&quot;profile_picture3&quot;, new ByteArrayInputStream(someBytes)); // Upload
- * 																		// some
- * 																		// bytes
- * 
+ * params.put("username", "james");
+ * params.put("password", "123456");
+ * params.put("email", "my&#064;email.com");
+ * params.put("profile_picture", new File("pic.jpg")); // Upload a File
+ * params.put("profile_picture2", someInputStream); // Upload an InputStream
+ * params.put("profile_picture3", new ByteArrayInputStream(someBytes)); // Upload some bytes
+ *
  * AsyncHttpClient client = new AsyncHttpClient();
- * client.post(&quot;http://myendpoint.com&quot;, params, responseHandler);
+ * client.post("http://myendpoint.com", params, responseHandler);
  * </pre>
  */
 public class RequestParams {
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index bff0efcc..3221ec1e 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -58,47 +58,57 @@ public SimpleMultipartEntity() {
 
     public void writeFirstBoundaryIfNeeds(){
         if(!isSetFirst){
-            try {
-                out.write(("--" + boundary + "\r\n").getBytes());
-            } catch (final IOException e) {
-                e.printStackTrace();
-            }
+            writeBoundary();
         }
 
         isSetFirst = true;
     }
 
+    public void writeBoundary() {
+        try {
+            out.write(("--" + boundary + "\r\n").getBytes());
+        } catch (final IOException e) {
+            e.printStackTrace();
+        }
+    }
+
     public void writeLastBoundaryIfNeeds() {
         if(isSetLast){
             return;
         }
 
         try {
-            out.write(("\r\n--" + boundary + "--\r\n").getBytes());
+            out.write(("--" + boundary + "--\r\n").getBytes());
+            out.flush();
         } catch (final IOException e) {
             e.printStackTrace();
         }
-
+        
         isSetLast = true;
     }
 
-    public void addPart(final String key, final String value) {
-        writeFirstBoundaryIfNeeds();
+    public void addPart(final String key, final String value, final String contentType) {
+        writeBoundary();
         try {
-            out.write(("Content-Disposition: form-data; name=\"" +key+"\"\r\n\r\n").getBytes());
+            out.write(("Content-Disposition: form-data; name=\"" +key+"\"\r\n").getBytes());
+            out.write(("Content-Type: " + contentType + "\r\n\r\n").getBytes());
             out.write(value.getBytes());
-            out.write(("\r\n--" + boundary + "\r\n").getBytes());
+            out.write(("\r\n").getBytes());
         } catch (final IOException e) {
             e.printStackTrace();
         }
     }
 
+    public void addPart(final String key, final String value) {
+        addPart(key,value,"text/plain; charset=UTF-8");
+    }
+
     public void addPart(final String key, final String fileName, final InputStream fin, final boolean isLast){
         addPart(key, fileName, fin, "application/octet-stream", isLast);
     }
 
     public void addPart(final String key, final String fileName, final InputStream fin, String type, final boolean isLast){
-        writeFirstBoundaryIfNeeds();
+        writeBoundary();
         try {
             type = "Content-Type: "+type+"\r\n";
             out.write(("Content-Disposition: form-data; name=\""+ key+"\"; filename=\"" + fileName + "\"\r\n").getBytes());
@@ -110,9 +120,8 @@ public void addPart(final String key, final String fileName, final InputStream f
             while ((l = fin.read(tmp)) != -1) {
                 out.write(tmp, 0, l);
             }
-            if(!isLast)
-                out.write(("\r\n--" + boundary + "\r\n").getBytes());
-            out.flush();
+            out.write(("\r\n").getBytes());
+            
         } catch (final IOException e) {
             e.printStackTrace();
         } finally {
@@ -160,6 +169,7 @@ public boolean isStreaming() {
 
     @Override
     public void writeTo(final OutputStream outstream) throws IOException {
+        writeLastBoundaryIfNeeds();
         outstream.write(out.toByteArray());
     }
 
@@ -180,6 +190,7 @@ public void consumeContent() throws IOException,
     @Override
     public InputStream getContent() throws IOException,
     UnsupportedOperationException {
+    	writeLastBoundaryIfNeeds();
         return new ByteArrayInputStream(out.toByteArray());
     }
 }
\ No newline at end of file
