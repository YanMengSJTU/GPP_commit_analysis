diff --git a/android-app-frame/.project b/android-app-frame/.project
index 1396f667..79a3d985 100644
--- a/android-app-frame/.project
+++ b/android-app-frame/.project
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>android-app-frame</name>
+	<name>android-app-library</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/android-app-frame/src/com/app/library/common/view/WebImageView.java b/android-app-frame/src/com/app/library/common/view/WebImageView.java
index 8a949171..385510f4 100644
--- a/android-app-frame/src/com/app/library/common/view/WebImageView.java
+++ b/android-app-frame/src/com/app/library/common/view/WebImageView.java
@@ -2,6 +2,9 @@
 
 import java.util.HashMap;
 
+import com.app.library.common.manager.RequestListener;
+import com.app.library.common.manager.RequestManager;
+
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -11,9 +14,6 @@
 import android.webkit.WebSettings;
 import android.widget.ImageView;
 
-import com.allthelucky.common.RequestListener;
-import com.allthelucky.common.RequestManager;
-
 /**
  * ImageView with a network image RequestManager
  * 
diff --git a/android-app-http/src/com/allthelucky/common/RequestListener.java b/android-app-http/src/com/allthelucky/common/RequestListener.java
deleted file mode 100644
index 98331551..00000000
--- a/android-app-http/src/com/allthelucky/common/RequestListener.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.allthelucky.common;
-
-/**
- * Request Listener for AsyncHttpResponseHandler
- * 
- * @author savant-pan
- * 
- */
-public interface RequestListener {
-	/**
-	 * Status OK
-	 */
-	public final static int OK = 0;
-	/**
-	 * Status ERR
-	 */
-	public final static int ERR = 1;
-
-	/**
-	 * callback when Request start
-	 */
-	void onStart();
-
-	/**
-	 * callback when Request end
-	 * 
-	 * @param data
-	 *            byte array if any
-	 * @param statusCode
-	 *            Request Status
-	 * @param description
-	 *            description
-	 * @param actionId
-	 *            request identifier
-	 */
-	void onCompleted(byte[] data, int statusCode, String description, int actionId);
-}
diff --git a/android-app-http/src/com/allthelucky/common/RequestManager.java b/android-app-http/src/com/allthelucky/common/RequestManager.java
deleted file mode 100644
index 2b9e0b2c..00000000
--- a/android-app-http/src/com/allthelucky/common/RequestManager.java
+++ /dev/null
@@ -1,478 +0,0 @@
-package com.allthelucky.common;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.security.MessageDigest;
-
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.entity.StringEntity;
-import org.apache.http.message.BasicHeader;
-import org.apache.http.protocol.HTTP;
-import org.json.JSONObject;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.os.AsyncTask;
-import android.text.TextUtils;
-
-import com.loopj.android.http.AsyncHttpClient;
-import com.loopj.android.http.AsyncHttpResponseHandler;
-import com.loopj.android.http.RequestParams;
-
-/**
- * Request Manager based on AsyncHttpClient
- * 
- * @author savant-pan
- * 
- */
-public class RequestManager {
-	private final AsyncHttpClient asyncHttpClient;
-	private static RequestManager INSTANCE = null;
-
-	protected RequestManager() {
-		this.asyncHttpClient = new AsyncHttpClient();
-	}
-
-	public static RequestManager getInstance() {
-		if (INSTANCE == null) {
-			INSTANCE = new RequestManager();
-		}
-		return INSTANCE;
-	}
-
-	/**
-	 * 清空缓存文件
-	 * 
-	 * @param context
-	 */
-	public static void clearHttpCache(Context context) {
-		context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE).edit().clear().commit();
-		final String fl[] = context.fileList();
-		try {
-			for (String f : fl) {
-				context.deleteFile(f);
-			}
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-	}
-
-	public void cancel(Context context) {
-		asyncHttpClient.cancelRequests(context, true);
-	}
-
-	/**
-	 * 参数列表请求
-	 * 
-	 * @param context
-	 * @param url
-	 * @param params
-	 * @param requestListener
-	 * @param actionId
-	 */
-	public void post(Context context, String url, RequestParams params, RequestListener requestListener, int actionId) {
-		asyncHttpClient.post(context, url, params, new HttpRequestListener(requestListener, actionId));
-	}
-
-	/**
-	 * JSON　参数请求
-	 * 
-	 * @param context
-	 * @param url
-	 * @param params
-	 * @param requestListener
-	 * @param actionId
-	 */
-	public void post(Context context, String url, JSONObject params, RequestListener requestListener, int actionId) {
-		asyncHttpClient.post(context, url, rpcToEntity(params.toString(), "application/json"), "application/json",
-				new HttpRequestListener(requestListener, actionId));
-	}
-
-	/**
-	 * JSON　参数请求
-	 * 
-	 * @param context
-	 * @param url
-	 * @param headers
-	 * @param params
-	 * @param requestListener
-	 * @param actionId
-	 */
-	public void post(Context context, String url, Header[] headers, JSONObject params, RequestListener requestListener,
-			int actionId) {
-		asyncHttpClient.post(context, url, headers, rpcToEntity(params.toString(), "application/json"),
-				"application/json", new HttpRequestListener(requestListener, actionId));
-	}
-
-	/**
-	 * XML　参数请求
-	 * 
-	 * @param context
-	 * @param url
-	 * @param params
-	 * @param requestListener
-	 * @param actionId
-	 */
-	public void post(Context context, String url, String params, RequestListener requestListener, int actionId) {
-		asyncHttpClient.post(context, url, rpcToEntity(params, "application/xml"), "application/xml",
-				new HttpRequestListener(requestListener, actionId));
-	}
-
-	/**
-	 * XML　参数请求
-	 * 
-	 * @param context
-	 * @param url
-	 * @param headers
-	 * @param params
-	 * @param requestListener
-	 * @param actionId
-	 */
-	public void post(Context context, String url, Header[] headers, String params, RequestListener requestListener,
-			int actionId) {
-		asyncHttpClient.post(context, url, headers, rpcToEntity(params, "application/xml"), "application/xml",
-				new HttpRequestListener(requestListener, actionId));
-	}
-
-	/**
-	 * get数据
-	 * 
-	 * @param context
-	 * @param url
-	 * @param requestListener
-	 * @param actionId
-	 */
-	public void get(Context context, String url, RequestListener requestListener, int actionId) {
-		get(context, url, requestListener, false, actionId);
-	}
-
-	/**
-	 * get数据
-	 * 
-	 * @param context
-	 * @param url
-	 * @param requestListener
-	 * @param cache
-	 * @param actionId
-	 */
-	public void get(Context context, String url, RequestListener requestListener, boolean cache, int actionId) {
-		final String encodeUrl = urlEncode(url);
-		if (!cache) {
-			asyncHttpClient.get(context, url, new HttpRequestListener(requestListener, actionId));
-		} else {
-			if (!hasCache(context, encodeUrl)) {
-				loadAndSaveResource(context, encodeUrl, requestListener, 0l, actionId);
-			} else {
-				loadCache(context, encodeUrl, requestListener, actionId);
-				if (!hasNetwork(context)) {
-					return;
-				} else {
-					checkUpdate(context, encodeUrl, actionId);
-				}
-			}
-		}
-	}
-
-	/**
-	 * 加载并缓存网络数据
-	 * 
-	 * @param context
-	 * @param url
-	 * @param requestListener
-	 * @param actionId
-	 */
-	private void loadAndSaveResource(final Context context, final String url, final RequestListener requestListener,
-			final long lastModified, final int actionId) {
-		asyncHttpClient.get(context, url, new HttpRequestListener(new CacheRequestListener(context, url,
-				requestListener, lastModified), actionId));
-	}
-
-	/**
-	 * 检测/更新缓存
-	 * 
-	 * @param context
-	 * @param url
-	 * @param actionId
-	 */
-	private void checkUpdate(final Context context, final String url, final int actionId) {
-		final SharedPreferences pref = context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE);
-		final String fileName = encryptMD5(url);
-		new AsyncTask<Void, Void, Long>() {
-			@Override
-			protected Long doInBackground(Void... params) {
-				long lastModified = -1l;
-				try {
-					final URL u = new URL(url);
-					final HttpURLConnection conn = (HttpURLConnection) u.openConnection();
-					conn.setConnectTimeout(5 * 1000);
-					conn.setRequestProperty("User-agent", "Mozilla/4.0");
-					conn.setRequestProperty("Connection", "Keep-Alive");
-					conn.setRequestProperty("Charset", "UTF-8");
-					conn.setRequestMethod("GET");
-					conn.connect();
-					if (conn.getResponseCode() == 200) {
-						lastModified = conn.getLastModified();
-					}
-					conn.disconnect();
-				} catch (Exception e) {
-					e.printStackTrace();
-				}
-				return lastModified;
-			}
-
-			protected void onPostExecute(Long result) {
-				if (result != -1l && result != pref.getLong(fileName, 0l)) {
-					loadAndSaveResource(context, url, null, result, actionId);// 不返回数据到接口
-				}
-			}
-		}.execute();
-	}
-
-	/**
-	 * 读缓存
-	 * 
-	 * @param context
-	 * @param url
-	 * @param requestListener
-	 * @param actionId
-	 */
-	private void loadCache(final Context context, final String url, final RequestListener requestListener,
-			final int actionId) {
-		requestListener.onStart();
-		new AsyncTask<Void, Void, byte[]>() {
-			@Override
-			protected byte[] doInBackground(Void... params) {
-				try {
-					InputStream is = context.openFileInput(encryptMD5(url));
-					ByteArrayOutputStream bos = new ByteArrayOutputStream();
-					byte[] bytes = new byte[4096];
-					int len = 0;
-					while ((len = is.read(bytes)) > 0) {
-						bos.write(bytes, 0, len);
-					}
-					bos.flush();
-					return bos.toByteArray();
-
-				} catch (Exception e) {
-					e.printStackTrace();
-					return null;
-				}
-			}
-
-			protected void onPostExecute(byte[] result) {
-				boolean flag = (result != null);
-				requestListener.onCompleted(result, (flag ? RequestListener.OK : RequestListener.ERR),
-						flag ? "load cache ok" : "load cache error", actionId);
-			}
-		}.execute();
-	}
-
-	/**
-	 * 检测缓存
-	 */
-	private boolean hasCache(Context context, String url) {
-		try {
-			context.openFileInput(encryptMD5(url));
-			return true;
-		} catch (Exception e) {
-			return false;
-		}
-	}
-
-	/**
-	 * 将JSON/XML字符串转为HttpEntity(StringEntity)
-	 * 
-	 * @param params
-	 * @param contentType
-	 * @return
-	 */
-	public static HttpEntity rpcToEntity(String params, String contentType) {
-		StringEntity entity = null;
-		if (!TextUtils.isEmpty(params)) {
-			try {
-				entity = new StringEntity(params, HTTP.UTF_8);
-				entity.setContentType(new BasicHeader(HTTP.CONTENT_TYPE, contentType));
-			} catch (UnsupportedEncodingException e) {
-				e.printStackTrace();
-			}
-		}
-		return entity;
-	}
-
-	/**
-	 * 网络请求+缓存处理
-	 */
-	private class CacheRequestListener implements RequestListener {
-		private Context context = null;
-		private String url = "";
-		private RequestListener requestListener = null;
-		private long lastModified;
-
-		public CacheRequestListener(Context context, String url, RequestListener requestListener, long lastModified) {
-			this.context = context;
-			this.url = url;
-			this.requestListener = requestListener;
-			this.lastModified = lastModified;
-		}
-
-		@Override
-		public void onStart() {
-			if (requestListener != null) {
-				requestListener.onStart();
-			}
-		}
-
-		@Override
-		public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
-			if (requestListener != null) {
-				requestListener.onCompleted(data, statusCode, description, actionId);
-			}
-			if (data != null && statusCode != RequestListener.ERR) {
-				saveCache(context, url, data);
-			}
-		}
-
-		/**
-		 * 保存数据
-		 */
-		private void saveCache(Context context, String url, byte[] data) {
-			try {
-				ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
-				FileOutputStream os = context.openFileOutput(encryptMD5(url), Context.MODE_PRIVATE);
-
-				byte[] buffer = new byte[1024];
-				int len = 0;
-				while ((len = inputStream.read(buffer)) > 0) {
-					os.write(buffer, 0, len);
-				}
-
-				os.close();
-				inputStream.close();
-				saveLastModified();
-
-			} catch (FileNotFoundException e) {
-				e.printStackTrace();
-			} catch (IOException e) {
-				e.printStackTrace();
-			}
-		}
-
-		private void saveLastModified() {
-			context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE).edit()
-					.putLong(encryptMD5(url), lastModified).commit();
-		}
-	}
-
-	/**
-	 * 网络请求处理
-	 */
-	private class HttpRequestListener extends AsyncHttpResponseHandler {
-		private RequestListener requestListener;
-		private int actionId;
-
-		public HttpRequestListener(RequestListener requestListener, int actionId) {
-			this.requestListener = requestListener;
-			this.actionId = actionId;
-		}
-
-		@Override
-		public void onStart() {
-			super.onStart();
-			requestListener.onStart();
-		}
-
-		@Override
-		public void onFinish() {
-			super.onFinish();
-		}
-
-		@Override
-		public void onSuccess(int statusCode, byte[] binaryData) {
-			super.onSuccess(statusCode, binaryData);
-			requestListener.onCompleted(binaryData, RequestListener.OK, "server response ok", actionId);
-		}
-
-		@Override
-		public void onFailure(Throwable error, String content) {
-			super.onFailure(error, content);
-			requestListener.onCompleted(null, RequestListener.ERR, content, actionId);
-		}
-	}
-
-	/**
-	 * 检验网络是否有连接，有则true，无则false
-	 * 
-	 * @param context
-	 * @return
-	 */
-	public static boolean hasNetwork(Context context) {
-		ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-		NetworkInfo ni = cm.getActiveNetworkInfo();
-		if (ni != null && ni.isConnected()) {
-			return true;
-		}
-		return false;
-	}
-
-	/**
-	 * 16位MD5
-	 */
-	public static String encryptMD5(String strInput) {
-		return encryptMD532(strInput).substring(8, 24);
-	}
-
-	public static String encryptMD532(String strInput) {
-		StringBuffer buf = null;
-		try {
-			MessageDigest md = MessageDigest.getInstance("MD5");
-			md.update(strInput.getBytes("UTF-8"));
-			byte b[] = md.digest();
-			buf = new StringBuffer(b.length * 2);
-			for (int i = 0; i < b.length; i++) {
-				if (((int) b[i] & 0xff) < 0x10) { /* & 0xff转换无符号整型 */
-					buf.append("0");
-				}
-				buf.append(Long.toHexString((int) b[i] & 0xff)); // 转换16进制,下方法同
-			}
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		return buf.toString();
-	}
-
-	/**
-	 * 网址汉字编码
-	 */
-	public static String urlEncode(String str) {
-		StringBuffer buf = new StringBuffer();
-		byte c;
-		byte[] utfBuf;
-		try {
-			utfBuf = str.getBytes("UTF-8");
-		} catch (UnsupportedEncodingException e) {
-			System.out.println("URLEncode: Failed to get UTF-8 bytes from string.");
-			utfBuf = str.getBytes();
-		}
-		for (int i = 0; i < utfBuf.length; i++) {
-			c = utfBuf[i];
-			if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')
-					|| (c == '.' || c == '-' || c == '*' || c == '_')
-					|| (c == ':' || c == '/' || c == '=' || c == '?' || c == '&' || c == '%')) {
-				buf.append((char) c);
-			} else {
-				buf.append("%").append(Integer.toHexString((0x000000FF & c)));
-			}
-		}
-		return buf.toString();
-	}
-}
diff --git a/android-app-http/src/com/allthelucky/common/WebImageView.java b/android-app-http/src/com/allthelucky/common/WebImageView.java
deleted file mode 100644
index b0c6e38f..00000000
--- a/android-app-http/src/com/allthelucky/common/WebImageView.java
+++ /dev/null
@@ -1,214 +0,0 @@
-package com.allthelucky.common;
-
-import java.util.HashMap;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.BitmapFactory.Options;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.webkit.WebSettings;
-import android.widget.ImageView;
-
-import com.allthelucky.common.RequestListener;
-import com.allthelucky.common.RequestManager;
-
-/**
- * ImageView with a network image RequestManager
- * 
- * @author savant-pan
- */
-public class WebImageView extends ImageView {
-	private static final int DEFAULT_DRAWABLE = -1;
-	private static final int DEFAULT_SAMPLE_SIZE = 1;
-
-	private int defaultDrawable = DEFAULT_DRAWABLE;
-	private int sampleSize = DEFAULT_SAMPLE_SIZE;
-	private String imageUrl = "";
-	private boolean hasRetry = false;
-
-	/**
-	 * @param context
-	 */
-	public WebImageView(Context context) {
-		this(context, null);
-	}
-
-	/**
-	 * @param context
-	 * @param attrs
-	 */
-	public WebImageView(Context context, AttributeSet attrs) {
-		this(context, attrs, 0);
-	}
-
-	/**
-	 * @param context
-	 * @param attrs
-	 * @param defStyle
-	 */
-	public WebImageView(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-	}
-
-	/**
-	 * set a url
-	 * 
-	 * @param url
-	 *            network resource address
-	 */
-	public void setURLAsync(String url) {
-		this.setURLAsync(url, DEFAULT_DRAWABLE);
-	}
-
-	/**
-	 * set a url and default drawable
-	 * 
-	 * @param url
-	 *            network resource address
-	 * @param defaultImage
-	 *            drawable id
-	 */
-	public void setURLAsync(String url, int defaultDrawable) {
-		this.setURLAsync(url, defaultDrawable, DEFAULT_SAMPLE_SIZE);
-	}
-
-	/**
-	 * set a url and default drawable
-	 * 
-	 * @param url
-	 *            network resource address
-	 * @param defaultImage
-	 *            drawable id
-	 * @param sampleSize
-	 *            sample for Options
-	 */
-	public void setURLAsync(String url, int defaultDrawable, int sampleSize) {
-		this.imageUrl = url;
-		this.defaultDrawable = defaultDrawable;
-		this.sampleSize = sampleSize;
-		this.firstLoad();
-	}
-
-	/**
-	 * first load image
-	 */
-	private void firstLoad() {
-		this.loadResource(WebSettings.LOAD_CACHE_ELSE_NETWORK);
-	}
-
-	/**
-	 * retry cache when failed first time
-	 */
-	private void retryCache() {
-		this.loadResource(WebSettings.LOAD_CACHE_ONLY);
-	}
-
-	private void loadResource(int cacheMode) {
-		if (TextUtils.isEmpty(imageUrl)) {
-			this.setDefaultImage();
-		} else {
-			RequestManager.getInstance().get(getContext(), imageUrl, requestListener, true, 0);
-		}
-	}
-
-	/**
-	 * load callback for RequestManager
-	 */
-	private RequestListener requestListener = new RequestListener() {
-
-		@Override
-		public void onStart() {
-
-		}
-
-		@Override
-		public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
-			if (RequestListener.ERR == statusCode) {
-				if (!hasRetry) {
-					hasRetry = true;
-					retryCache();
-				} else {
-					setDefaultImage();
-				}
-			} else {
-				setResult(data);
-			}
-		}
-
-		private void setResult(byte[] data) {
-			Bitmap bitmap = WebImageBuffer.get(imageUrl);
-			if (null != bitmap) {
-				setImageBitmap(bitmap);
-			} else {
-				if (null != data) {
-					BitmapFactory.Options options = new Options();
-					options.inDither = false;
-					options.inPreferredConfig = null;
-					options.inSampleSize = sampleSize;
-					options.inPreferredConfig = Bitmap.Config.RGB_565;
-					options.inJustDecodeBounds = false;
-					bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);
-					if (bitmap != null) {
-						setImageBitmap(bitmap);
-						WebImageBuffer.put(imageUrl, bitmap);
-					} else {
-						setDefaultImage();
-					}
-				} else {
-					setDefaultImage();
-				}
-			}
-		}
-	};
-
-	/**
-	 * set default drawable
-	 */
-	public void setDefaultImage() {
-		if (defaultDrawable != -1) {
-			setImageDrawable(getResources().getDrawable(defaultDrawable));
-		}
-	}
-
-	/**
-	 * reset WebImageBuffer
-	 */
-	public static void resetWebImageBuffer() {
-		WebImageBuffer.clear();
-	}
-
-	/**
-	 * WebImageBuffer for WebImageView
-	 */
-	public static class WebImageBuffer {
-		private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
-
-		public synchronized static void clear() {
-			try {
-				caches.clear();
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-		}
-
-		public synchronized static Bitmap get(String url) {
-			try {
-				return caches.get(url);
-			} catch (Exception e) {
-				e.printStackTrace();
-				return null;
-			}
-		}
-
-		public synchronized static void put(String url, Bitmap bitmap) {
-			try {
-				caches.put(url, bitmap);
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-		}
-	}
-
-}
