diff --git a/.gitignore b/.gitignore
index ff8a6e53..8842bb26 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,4 +8,4 @@ bin/
 gen/
 _layouts
 .DS_Store
-gh-pages
\ No newline at end of file
+gh-pages
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6c6ba088..1d55083b 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,6 +21,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -111,9 +112,20 @@ public void onSuccess(String content) {}
     /**
      * Fired when a request returns successfully, override to handle in your own code
      * @param statusCode the status code of the response
+     * @param headers the headers of the HTTP response
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(int statusCode, String content) {
+    public void onSuccess(int statusCode, Header[] headers, String content) {
+        onSuccess(statusCode, content);
+    }
+
+    /**
+     * Fired when a request returns successfully, override to handle in your own code
+     * @param statusCode the status code of the response
+     * @param content the body of the HTTP response from the server
+     */
+    public void onSuccess(int statusCode, String content)
+    {
         onSuccess(content);
     }
 
@@ -139,8 +151,8 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(int statusCode, String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), responseBody}));
+    protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{new Integer(statusCode), headers, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -164,8 +176,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(int statusCode, String responseBody) {
-        onSuccess(statusCode, responseBody);
+    protected void handleSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+        onSuccess(statusCode, headers, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -181,7 +193,7 @@ protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
                 response = (Object[])msg.obj;
-                handleSuccessMessage(((Integer) response[0]).intValue(), (String) response[1]);
+                handleSuccessMessage(((Integer) response[0]).intValue(), (Header[]) response[1], (String) response[2]);
                 break;
             case FAILURE_MESSAGE:
                 response = (Object[])msg.obj;
@@ -234,7 +246,7 @@ void sendResponseMessage(HttpResponse response) {
         if(status.getStatusCode() >= 300) {
             sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         } else {
-            sendSuccessMessage(status.getStatusCode(), responseBody);
+            sendSuccessMessage(status.getStatusCode(),response.getAllHeaders(), responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 084bf339..57897191 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -23,7 +23,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
-
+import org.apache.http.Header;
 import android.os.Message;
 
 /**
@@ -62,6 +62,18 @@ public void onSuccess(JSONObject response) {}
      */
     public void onSuccess(JSONArray response) {}
 
+    /**
+     * Fired when a request returns successfully and contains a json object
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param headers the headers of the HTTP response
+     * @param response the parsed json object found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
+        onSuccess(statusCode, response);
+    }
+
     /**
      * Fired when a request returns successfully and contains a json object
      * at the base of the response string. Override to handle in your
@@ -73,6 +85,17 @@ public void onSuccess(int statusCode, JSONObject response) {
         onSuccess(response);
     }
 
+    /**
+     * Fired when a request returns successfully and contains a json array
+     * at the base of the response string. Override to handle in your
+     * own code.
+     * @param statusCode the status code of the response
+     * @param headers the headers of the HTTP response
+     * @param response the parsed json array found in the server response (if any)
+     */
+    public void onSuccess(int statusCode, Header[] headers, JSONArray response) {
+        onSuccess(statusCode, response);
+    }
 
     /**
      * Fired when a request returns successfully and contains a json array
@@ -81,7 +104,7 @@ public void onSuccess(int statusCode, JSONObject response) {
      * @param statusCode the status code of the response
      * @param response the parsed json array found in the server response (if any)
      */
-    public void onSuccess(int statusCode, JSONArray response) {
+    public void onSuccess(int statusCode,  JSONArray response) {
         onSuccess(response);
     }
 
@@ -94,6 +117,7 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
     //
 
     @Override
+<<<<<<< HEAD
     protected void sendSuccessMessage(int statusCode, String responseBody) {
     	if (statusCode != HttpStatus.SC_NO_CONTENT){
 	        try {
@@ -105,6 +129,15 @@ protected void sendSuccessMessage(int statusCode, String responseBody) {
     	}else{
     		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
     	}
+=======
+    protected void sendSuccessMessage(int statusCode, Header[] headers, String responseBody) {
+        try {
+            Object jsonResponse = parseResponse(responseBody);
+            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, headers, jsonResponse}));
+        } catch(JSONException e) {
+            sendFailureMessage(e, responseBody);
+        }
+>>>>>>> 3e12dea27ca068079ede1e8e6da392166873ce38
     }
 
 
@@ -117,18 +150,18 @@ protected void handleMessage(Message msg) {
         switch(msg.what){
             case SUCCESS_JSON_MESSAGE:
                 Object[] response = (Object[]) msg.obj;
-                handleSuccessJsonMessage(((Integer) response[0]).intValue(), response[1]);
+                handleSuccessJsonMessage(((Integer) response[0]).intValue(),(Header[]) response[1] ,response[2]);
                 break;
             default:
                 super.handleMessage(msg);
         }
     }
 
-    protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse) {
+    protected void handleSuccessJsonMessage(int statusCode,Header[] headers, Object jsonResponse) {
         if(jsonResponse instanceof JSONObject) {
-            onSuccess(statusCode, (JSONObject)jsonResponse);
+            onSuccess(statusCode, headers, (JSONObject)jsonResponse);
         } else if(jsonResponse instanceof JSONArray) {
-            onSuccess(statusCode, (JSONArray)jsonResponse);
+            onSuccess(statusCode, headers, (JSONArray)jsonResponse);
         } else {
             onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()), (JSONObject)null);
         }
