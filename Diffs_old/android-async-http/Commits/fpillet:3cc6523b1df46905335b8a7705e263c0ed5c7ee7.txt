diff --git a/Android-async-http.iml b/Android-async-http.iml
new file mode 100644
index 00000000..59e1a711
--- /dev/null
+++ b/Android-async-http.iml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
+        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
+        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
+        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
+        <option name="REGENERATE_R_JAVA" value="true" />
+        <option name="REGENERATE_JAVA_BY_AIDL" value="true" />
+        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
+        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
+        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
+        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
+        <option name="APK_PATH" value="" />
+        <option name="LIBRARY_PROJECT" value="true" />
+        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
+        <option name="GENERATE_UNSIGNED_APK" value="false" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android 3.0 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
+
diff --git a/examples/ExampleUsage.java b/examples/ExampleUsage.java
index 2b7a4fa0..79006df7 100644
--- a/examples/ExampleUsage.java
+++ b/examples/ExampleUsage.java
@@ -1,4 +1,5 @@
-import com.loopj.android.http.*;
+import org.apache.http.Header;
+import org.apache.http.client.methods.HttpUriRequest;
 
 public class ExampleUsage {
     public static void makeRequest() {
@@ -6,7 +7,7 @@ public static void makeRequest() {
 
         client.get("http://www.google.com", new AsyncHttpResponseHandler() {
             @Override
-            public void onSuccess(String response) {
+            public void onSuccess(HttpUriRequest request, Header[] headers, String response) {
                 System.out.println(response);
             }
         });
diff --git a/examples/TwitterRestClient.java b/examples/TwitterRestClient.java
index f55708cf..4b7f6a98 100644
--- a/examples/TwitterRestClient.java
+++ b/examples/TwitterRestClient.java
@@ -1,7 +1,5 @@
 // Static wrapper library around AsyncHttpClient
 
-import com.loopj.android.http.*;
-
 public class TwitterRestClient {
     private static final String BASE_URL = "http://api.twitter.com/1/";
 
diff --git a/examples/TwitterRestClientUsage.java b/examples/TwitterRestClientUsage.java
index a4c89c8c..a8a4cc8d 100644
--- a/examples/TwitterRestClientUsage.java
+++ b/examples/TwitterRestClientUsage.java
@@ -1,5 +1,4 @@
 import org.json.*;
-import com.loopj.android.http.*;
 
 class TwitterRestClientUsage {
     public void getPublicTimeline() {
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 25f8570c..f959f4d1 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -55,7 +55,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(e);
+                responseHandler.sendFailureMessage(request, e);
             }
         }
     }
@@ -63,7 +63,7 @@ public void run() {
     private void makeRequest() throws IOException {
         HttpResponse response = client.execute(request, context);
         if(responseHandler != null) {
-            responseHandler.sendResponseMessage(response);
+            responseHandler.sendResponseMessage(request, response);
         }
     }
 
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index b1735306..8a51397f 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -19,10 +19,14 @@
 package com.loopj.android.http;
 
 import java.io.IOException;
+import java.util.Map;
+import java.util.HashMap;
 
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
+import org.apache.http.Header;
 import org.apache.http.StatusLine;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.HttpResponseException;
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
@@ -30,6 +34,7 @@
 import android.os.Handler;
 import android.os.Message;
 import android.os.Looper;
+import android.util.Pair;
 
 /**
  * Used to intercept and handle the responses from requests made using 
@@ -107,25 +112,29 @@ public void onFinish() {}
      * Fired when a request returns successfully, override to handle in your own code
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(String content) {}
+    public void onSuccess(HttpUriRequest request, Header[] headers, String content) {}
 
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
      */
-    public void onFailure(Throwable error) {}
+    public void onFailure(HttpUriRequest request, Throwable error) {}
 
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(HttpUriRequest request, Header[] headers, String responseBody) {
+		Map<String,Object> map = new HashMap<String,Object>(3);
+		map.put("request", request);
+		map.put("headers", headers);
+		map.put("body", responseBody);
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, map));
     }
 
-    protected void sendFailureMessage(Throwable e) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, e));
+    protected void sendFailureMessage(HttpUriRequest request, Throwable e) {
+        sendMessage(obtainMessage(FAILURE_MESSAGE, new Pair<HttpUriRequest, Throwable>(request, e)));
     }
 
     protected void sendStartMessage() {
@@ -141,12 +150,12 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(HttpUriRequest request, Header[] headers, String responseBody) {
+        onSuccess(request, headers, responseBody);
     }
 
-    protected void handleFailureMessage(Throwable e) {
-        onFailure(e);
+    protected void handleFailureMessage(HttpUriRequest request, Throwable e) {
+        onFailure(request, e);
     }
 
 
@@ -155,10 +164,12 @@ protected void handleFailureMessage(Throwable e) {
     protected void handleMessage(Message msg) {
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
+				Map map = (Map)msg.obj;
+                handleSuccessMessage((HttpUriRequest)map.get("request"), (Header[])map.get("headers"), (String)map.get("body"));
                 break;
             case FAILURE_MESSAGE:
-                handleFailureMessage((Throwable)msg.obj);
+				Pair pair = (Pair)msg.obj;
+                handleFailureMessage((HttpUriRequest)pair.first, (Throwable)pair.second);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -191,10 +202,10 @@ protected Message obtainMessage(int responseMessage, Object response) {
 
 
     // Interface to AsyncHttpRequest
-    void sendResponseMessage(HttpResponse response) {
+    protected void sendResponseMessage(HttpUriRequest request, HttpResponse response) {
         StatusLine status = response.getStatusLine();
         if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()));
+            sendFailureMessage(request, new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()));
         } else {
             try {
                 HttpEntity entity = null;
@@ -203,9 +214,9 @@ void sendResponseMessage(HttpResponse response) {
                     entity = new BufferedHttpEntity(temp);
                 }
 
-                sendSuccessMessage(EntityUtils.toString(entity));
+                sendSuccessMessage(request, response.getAllHeaders(), EntityUtils.toString(entity));
             } catch(IOException e) {
-                sendFailureMessage(e);
+                sendFailureMessage(request, e);
             }
         }
     }
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 51c2093e..ba015ab2 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -23,6 +23,9 @@
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.Header;
+
 /**
  * Used to intercept and handle the responses from requests made using 
  * {@link AsyncHttpClient}, with automatic parsing into a {@link JSONObject}
@@ -60,8 +63,8 @@ public void onSuccess(JSONArray response) {}
 
     // Utility methods
     @Override
-    protected void handleSuccessMessage(String responseBody) {
-        super.handleSuccessMessage(responseBody);
+    protected void handleSuccessMessage(HttpUriRequest request, Header[] headers, String responseBody) {
+        super.handleSuccessMessage(request, headers, responseBody);
 
         try {
             Object jsonResponse = parseResponse(responseBody);
@@ -71,7 +74,7 @@ protected void handleSuccessMessage(String responseBody) {
                 onSuccess((JSONArray)jsonResponse);
             }
         } catch(JSONException e) {
-            onFailure(e);
+            onFailure(request, e);
         }
     }
 
diff --git a/~generated_Android-async-http.iml b/~generated_Android-async-http.iml
new file mode 100644
index 00000000..26f7a4c0
--- /dev/null
+++ b/~generated_Android-async-http.iml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$/gen">
+      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android 3.0 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module" module-name="Android-async-http" />
+  </component>
+</module>
+
