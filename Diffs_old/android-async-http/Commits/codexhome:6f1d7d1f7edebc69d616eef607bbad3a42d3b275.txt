diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 00000000..14d617a9
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,84 @@
+# CHANGELOG
+
+## 1.4.5 (released 22. 6. 2014)
+
+Complete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.5](https://github.com/loopj/android-async-http/commits/1.4.5)  
+List of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=2&state=closed](https://github.com/loopj/android-async-http/issues?milestone=2&state=closed)
+
+  - Support for circular and relative redirects
+  - Added support for SAX parsing, see `SaxAsyncHttpResponseHandler`
+  - Fixed Threading issue when used in Service or non-UI Thread context
+  - Fixed GZIPInputStream issue when running in StrictMode
+  - Removed unnecessary (ambiguous) callback methods (were deprecated in 1.4.4)
+  - Added JsonStreamerEntity to allow up streaming JSON data
+  - Added possibility to modify blacklisted/whitelisted exceptions (see `RetryHandler`)
+  - Using `newCachedThreadPool()` as default ExecutorService in library, with option to change it via main interface
+  - Added `ResponseHandlerInterface` to support completely custom implementations of response handlers
+  - Added `onProgress(int,int)` callback, which is used for upstream progress logging (eg. Progressbar dialogs)
+  - Fixed "division by zero" in default response handler
+  - Added DataAsyncHttpResponseHandler, which has extra callback method which receives partially received data
+  - Fixed problem with uploading more than 2 files (changes in SimpleMultipartEntity)
+  - Fixed problem where on GarbageCollectors activity there was no callback received
+  - Added warning for cases, where headers overwrite each other (between common headers and per-request headers)
+  - Safely closing IO streams (both upstream and downstream)
+  - Fixed PersistentCookieStore issue, where non-persistent cookies were stored and added option to delete stored cookie
+  - Fixed networkOnMainThreadException when canceling requests (`AsyncHttpClient#cancel(boolean)`)
+  - Removed default User-Agent definition from library
+  - Fixed handling null URLs in default interface calls
+  - Allowed to subclass AsyncHttpClient and simply provide custom AsyncHttpRequest object (`AsyncHttpClient#newAsyncHttpRequest`)
+  - Changed project structure to be default Intellij IDEA structure (eg. library/src/main/java)
+  - Catching UnsupportedEncodingException default Async and Text response handlers
+  - Added strict Lint checking for both Library and Sample application
+  - Added example implementations in Sample application
+    - Requests threading (ThreadPool usage, 6 seconds delay on response)
+    - Synchronous request (from Activity and IntentService)
+    - SAX Parsing the response
+    - Retry request sample
+    - Handling 302 redirects
+    - RangeResponse (working with partially received data)
+    - Basic usage of GET, POST, PUT, DELETE
+    - JSON response parsing
+    - GZIP compressed communication
+    - Binary handler (receives `byte[]` without parsing/converting)
+    - File response handler (saving response directly into given File)
+    - Self-signed CA sample (how to pin SSL certificate or add custom trust-chain for requests)
+    - Persistent cookies store (persisting cookies between requests)
+    - Post multi-part encoded Files (SimpleMultipartEntity)
+    - Jackson JSON integration
+
+## 1.4.4 (released 28. 10. 2013)
+
+Complete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.4](https://github.com/loopj/android-async-http/commits/1.4.4)  
+List of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=1&state=closed](https://github.com/loopj/android-async-http/issues?milestone=1&state=closed)
+
+  - Added FileAsyncHttpResponseHandler for direct saving response into File instead of device memory
+  - JsonHttpResponseHandler now parsing JSON in separate thread
+  - Interface method to allow/deny handling of http redirects
+  - Added method to delete previously set header (AsyncHttpClient.java)
+  - Not creating new Thread if call initiated outside of UI Thread (broken, fixed in 1.4.5)
+  - Support for changing response Charset (default still UTF-8)
+  - Allow setting maximum retries count (AsyncHttpClient.java)
+  - SimpleMultipartEntity now allows repeated usage (`HttpEntity.isRepeatable()`)
+  - Added custom SSLSocketFactory to allow certificate pinning and accepting self-signed or untrusted SSL certificates
+  - Callbacks to return HTTP status code and response Headers
+  - Added support for unsetting Basic Auth params
+  - Added support for non-standard HTTP and HTTPS ports (new constructors of `AsyncHttpClient`)
+  - Allowed to change dynamically allowed content-types for BinaryHttpResponseHandler per-response-handler (was static previously)
+  - Added support for setting proxy, optionally with authentication
+    - `AsyncHttpClient#setProxy(String hostname, int port, String username, String password)`
+  - Support for passing Maps, Sets and Lists via RequestParams
+  - Properly chaining callback methods (onSuccess, onFailure, ...) in descendant order by number of function params
+  - Fixed incorrect handling of URLs with spaces after redirect
+    - now sanitizes spaces within URL both on-request and on-redirect
+  - Added RequestHandle which can be used to cancel and/or check request status
+    - Is returned for each call (`.post(...)`, `.get(...)`, `.head(...)`, `.put(...)`, etc..)
+  - Added BaseJsonHttpResponseHandler to simplify integration with Jackson JSON, Gson and other JSON parsing libraries
+  - Added Sample application to demonstrate functions and usage
+    - Using [http://httpbin.org/](http://httpbin.org/) to test methods
+  - Enforcing INTERNET permission
+  - Support for Gradle buildscript
+  - Support for Travis CI (Continuous Integration) testing
+  - Dropped support for Eclipse ADT usage (obsolete)
+  - Added HTTP HEAD method support
+  - Releasing both AAR and JAR (+javadoc and sources) into Maven Central repository
+  - Added tons of mising Javadoc for both classes and methods
diff --git a/README.md b/README.md
index 182a9605..63ae378e 100755
--- a/README.md
+++ b/README.md
@@ -4,6 +4,19 @@ Asynchronous Http Client for Android
 
 An asynchronous, callback-based Http client for Android built on top of Apache's [HttpClient](http://hc.apache.org/httpcomponents-client-ga/) libraries.
 
+Changelog
+---------
+
+See what is new in version 1.4.5 released on 22th June 2014
+
+https://github.com/loopj/android-async-http/blob/1.4.5/CHANGELOG.md
+
+Javadoc
+-------
+
+Latest Javadoc for 1.4.5 release are available here (also included in Maven repository):
+
+http://loopj.com/android-async-http/doc/
 
 Features
 --------
@@ -18,30 +31,44 @@ Features
 - Optional built-in response parsing into **JSON** (JsonHttpResponseHandler)
 - Optional **persistent cookie store**, saves cookies into your app's SharedPreferences
 
+Examples
+--------
+
+For inspiration and testing on device we've provided Sample Application.  
+See individual samples [here on Github](https://github.com/loopj/android-async-http/tree/1.4.5/sample/src/main/java/com/loopj/android/http/sample)  
+To run Sample application, simply clone the repository and run this command, to install it on connected device  
+
+```java
+gradle :sample:installDebug
+```
+
 Maven
 -----
 You can now integrate this library in your project via Maven. There are available two kind of builds.
 
-**development snapshots**
-https://oss.sonatype.org/content/repositories/snapshots/com/loopj/android/android-async-http/
+**releases, maven central**
+
+http://central.maven.org/maven2/com/loopj/android/android-async-http/
 ```
-Maven URL: https://oss.sonatype.org/content/repositories/snapshots/
+Maven URL: http://repo1.maven.org/maven2/
 GroupId: com.loopj.android
 ArtifactId: android-async-http
-Version: 1.4.5-SNAPSHOT
+Version: 1.4.5
 Packaging: JAR or AAR
 ```
+Gradle: `com.loopj.android:async-http-client:1.4.5`
 
-**releases, maven central**
+**development snapshots**
 
-http://central.maven.org/maven2/com/loopj/android/android-async-http/
+https://oss.sonatype.org/content/repositories/snapshots/com/loopj/android/android-async-http/
 ```
-Maven URL: http://repo1.maven.org/maven2/
+Maven URL: https://oss.sonatype.org/content/repositories/snapshots/
 GroupId: com.loopj.android
 ArtifactId: android-async-http
-Version: 1.4.4
+Version: 1.4.6-SNAPSHOT
 Packaging: JAR or AAR
 ```
+Gradle: `com.loopj.android:async-http-client:1.4.6-SNAPSHOT`
 
 Documentation, Features and Examples
 ------------------------------------
diff --git a/build.gradle b/build.gradle
index 21db9553..8cd902d2 100755
--- a/build.gradle
+++ b/build.gradle
@@ -14,7 +14,7 @@ def isReleaseBuild() {
 
 allprojects {
     group = 'com.loopj.android'
-    version = '1.4.5-SNAPSHOT'
+    version = '1.4.5'
 
     repositories {
         mavenCentral()
diff --git a/gradle.properties b/gradle.properties
index 01f4bd2c..b80c3224 100755
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-VERSION_NAME=1.4.5-SNAPSHOT
+VERSION_NAME=1.4.5
 VERSION_CODE=145
 GROUP=com.loopj.android
 
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index d7a1fcad..ccb41e6e 100755
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.loopj.android.http"
-          android:versionName="1.4.5-SNAPSHOT"
+          android:versionName="1.4.5"
           android:versionCode="145">
 
     <uses-permission android:name="android.permission.INTERNET"/>
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index a122f742..b5e80c9d 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -73,6 +73,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.PushbackInputStream;
+import java.lang.reflect.Field;
 import java.net.URI;
 import java.util.Collections;
 import java.util.HashMap;
@@ -1262,21 +1263,58 @@ private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosin
         return requestBase;
     }
 
+    /**
+     * This horrible hack is required on Android, due to implementation of BasicManagedEntity, which
+     * doesn't chain call consumeContent on underlying wrapped HttpEntity
+     *
+     * @param entity HttpEntity, may be null
+     */
+    public static void endEntityViaReflection(HttpEntity entity) {
+        if (entity instanceof HttpEntityWrapper) {
+            try {
+                Field f = null;
+                Field[] fields = HttpEntityWrapper.class.getDeclaredFields();
+                for (Field ff : fields) {
+                    if (ff.getName().equals("wrappedEntity")) {
+                        f = ff;
+                        break;
+                    }
+                }
+                if (f != null) {
+                    f.setAccessible(true);
+                    HttpEntity wrapped = (HttpEntity) f.get(entity);
+                    if (wrapped != null) {
+                        wrapped.consumeContent();
+                    }
+                }
+            } catch (Throwable t) {
+                Log.e(LOG_TAG, "wrappedEntity consume", t);
+            }
+        }
+    }
+
     /**
      * Enclosing entity to hold stream of gzip decoded data for accessing HttpEntity contents
      */
     private static class InflatingEntity extends HttpEntityWrapper {
+
         public InflatingEntity(HttpEntity wrapped) {
             super(wrapped);
         }
 
+        InputStream wrappedStream;
+        PushbackInputStream pushbackStream;
+        GZIPInputStream gzippedStream;
+
         @Override
         public InputStream getContent() throws IOException {
-            PushbackInputStream content = new PushbackInputStream(wrappedEntity.getContent(), 2);
-            if (isInputStreamGZIPCompressed(content)) {
-                return new GZIPInputStream(content);
+            wrappedStream = wrappedEntity.getContent();
+            pushbackStream = new PushbackInputStream(wrappedStream, 2);
+            if (isInputStreamGZIPCompressed(pushbackStream)) {
+                gzippedStream = new GZIPInputStream(pushbackStream);
+                return gzippedStream;
             } else {
-                return content;
+                return pushbackStream;
             }
         }
 
@@ -1284,5 +1322,13 @@ public InputStream getContent() throws IOException {
         public long getContentLength() {
             return -1;
         }
+
+        @Override
+        public void consumeContent() throws IOException {
+            AsyncHttpClient.silentCloseInputStream(wrappedStream);
+            AsyncHttpClient.silentCloseInputStream(pushbackStream);
+            AsyncHttpClient.silentCloseInputStream(gzippedStream);
+            super.consumeContent();
+        }
     }
 }
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
index fde3cf87..6eaa5f59 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -411,6 +411,7 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                         }
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
+                        AsyncHttpClient.endEntityViaReflection(entity);
                     }
                     responseBody = buffer.toByteArray();
                 } catch (OutOfMemoryError e) {
diff --git a/releases/android-async-http-1.4.5.jar b/releases/android-async-http-1.4.5.jar
new file mode 100755
index 00000000..d383f60e
Binary files /dev/null and b/releases/android-async-http-1.4.5.jar differ
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index d2bbd6aa..59f9265c 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -37,6 +37,7 @@
         <activity android:name=".RetryRequestSample"/>
         <activity android:name=".RangeResponseSample"/>
         <activity android:name=".Http401AuthSample"/>
+        <activity android:name=".PersistentCookiesSample"/>
 
         <service android:name=".services.ExampleIntentService"/>
     </application>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java b/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
index 46133fd2..b30bb8b0 100644
--- a/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/PersistentCookiesSample.java
@@ -115,6 +115,7 @@ protected SampleJSON parseResponse(String rawJsonData, boolean isFailure) throws
 
     @Override
     public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        client.setEnableRedirects(true);
         return client.get(this, URL, headers, null, responseHandler);
     }
 
