diff --git a/build.xml b/build.xml
deleted file mode 100644
index 1cd94b37..00000000
--- a/build.xml
+++ /dev/null
@@ -1,98 +0,0 @@
-<project default="package">
-    <property file="local.properties"/>
-    <property file="project.properties"/>
-
-    <!-- Package properties -->
-    <property name="package.name" value="android-async-http" />
-    <property name="package.packagename" value="com.loopj.android.http" />
-    
-    <!-- Get git commit -->
-    <available file=".git" type="dir" property="git.present"/>
-
-    <target name="git-details">
-        <exec executable="git" outputproperty="git.status">
-            <arg value="status" />
-        </exec>
-        <echo message="${git.status}"/>
-        
-        <exec executable="git" outputproperty="package.versionname">
-          <arg value="describe"/>
-          <arg value="--tags"/>
-          <arg value="--dirty"/>
-          <arg value="--always"/>
-        </exec>
-        <echo message="${package.versionname}" />
-    </target>
-
-    <!-- Standard jar stuff -->
-    <property environment="env"/>
-    <condition property="android.base" value="${sdk.dir}" else="${env.ANDROID_HOME}">
-      <isset property="sdk.dir" />
-    </condition>
-    <fail message="Please set either the sdk.dir property or the ANDROID_HOME environment variable to point to your Android SDK installation.">
-      <condition>
-        <not>
-          <available file="${android.base}" type="dir"/>
-        </not>
-      </condition>
-    </fail>
-
-    <property name="lib.dir" value="${android.base}/platforms/${target}" />
-    <property name="build.dir" value="./build"/>
-    <property name="classes.dir"  value="${build.dir}/classes"/>
-    <buildnumber file="build.num" />
-
-    <!-- Set up classpath -->
-    <path id="classpath">
-        <fileset dir="${lib.dir}" includes="**/*.jar" />
-    </path>
-
-    <!-- Build javadoc -->
-    <target name="doc">
-        <javadoc 
-            classpathref="classpath"
-            sourcepath="gen:src"
-            destdir="doc"
-            packagenames="${package.packagename}"
-            linkoffline="http://d.android.com/reference ${android.base}/docs/reference" 
-            additionalparam="-author  -version"
-            />
-    </target>
-
-    <!-- Compile java files into classes -->
-    <target name="compile">
-        <mkdir dir="${build.dir}" />
-        <mkdir dir="${classes.dir}" />
-
-        <javac
-            includeantruntime="false"
-            srcdir="src"
-            destdir="${classes.dir}"
-            classpathref="classpath"
-            debug="true"
-            debuglevel="lines,source" />
-    </target>
-
-    <!-- Package a jar from compiled class files -->
-    <target name="jar" depends="git-details,compile">
-        <manifest file="MANIFEST.MF">
-            <attribute name="Built-By" value="${user.name}" />
-            <attribute name="Implementation-Version" value="${package.versionname}"/> 
-        </manifest>
-
-        <jar destfile="${package.name}-${package.versionname}.jar" basedir="build/classes" includes="com/loopj/android/http/**/*.class" manifest="MANIFEST.MF" />
-    </target>
-
-    <!-- Clean out the build files -->
-    <target name="clean">
-        <delete dir="build" />
-        <delete dir="doc" />
-        <delete>
-            <fileset dir="." includes="*.jar"/>
-            <fileset file="MANIFEST.MF"/>
-        </delete>
-    </target>
-
-    <!-- Compile and package a jar -->
-    <target name="package" depends="compile,jar" />
-</project>
diff --git a/res/drawable-hdpi/ic_launcher.png b/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 00000000..8074c4c5
Binary files /dev/null and b/res/drawable-hdpi/ic_launcher.png differ
diff --git a/src/com/allthelucky/net/WebImageUtils.java b/src/com/allthelucky/net/WebImageUtils.java
new file mode 100644
index 00000000..d284d495
--- /dev/null
+++ b/src/com/allthelucky/net/WebImageUtils.java
@@ -0,0 +1,26 @@
+package com.allthelucky.net;
+
+import java.util.HashMap;
+
+import android.graphics.Bitmap;
+
+public class WebImageUtils {
+    private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
+
+    public synchronized static Bitmap get(String url) {
+        try {
+            return caches.get(url);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    public synchronized static void put(String url, Bitmap bitmap) {
+        try {
+            caches.put(url, bitmap);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/src/com/allthelucky/net/WebImageView.java b/src/com/allthelucky/net/WebImageView.java
new file mode 100644
index 00000000..f8267aaa
--- /dev/null
+++ b/src/com/allthelucky/net/WebImageView.java
@@ -0,0 +1,119 @@
+package com.allthelucky.net;
+
+import android.R;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.BitmapFactory.Options;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.widget.ImageView;
+
+/**
+ * 网络图片控件
+ */
+public class WebImageView extends ImageView {
+
+    private Context context;
+
+    /**
+     * @param context
+     */
+    public WebImageView(Context context) {
+        this(context, null);
+    }
+
+    /**
+     * @param context
+     * @param attrs
+     */
+    public WebImageView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    /**
+     * @param context
+     * @param attrs
+     * @param defStyle
+     */
+    public WebImageView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        init(context);
+    }
+
+    /**
+     * @param context
+     */
+    private void init(Context context) {
+        this.context = context;
+    }
+
+    /**
+     * Sets the content of this ImageView to the specified URL.
+     * 
+     * @param url
+     *            The URL of an image
+     */
+    public void setURLAsync(String url) {
+        setURLAsync(url, R.drawable.ic_menu_help);
+    }
+
+    /**
+     * @param url
+     * @param loadNoCache
+     */
+    public synchronized void setURLAsync(String url, int defaultImage) {
+        if (TextUtils.isEmpty(url)) {
+            return;
+        }
+        RequestManager.getInstance().get(context, url, new ImageRequestListener(url, defaultImage), true, 0);
+    }
+
+    final class ImageRequestListener implements RequestListener {
+        private String url;
+        private int defaultImage;
+
+        public ImageRequestListener(String url, int defaultImage) {
+            this.url = url;
+        }
+
+        @Override
+        public void onStart() {
+            
+        }
+
+        @Override
+        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
+            if (actionId == 0) {
+                if (null != data && statusCode != RequestListener.ERR) {
+                    BitmapFactory.Options options = new Options();
+                    options.inDither = false; /* 不进行图片抖动处理 */
+                    options.inPreferredConfig = null; /* 设置让解码器以最佳方式解码 */
+                    options.inSampleSize = 1; /* 图片长宽方向缩小倍数 */
+                    options.inPreferredConfig = Bitmap.Config.RGB_565;
+                    options.inJustDecodeBounds = false;
+                    Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
+                    if (bitmap != null) {
+                        setImageBitmap(bitmap);
+                        WebImageUtils.put(url, bitmap);
+                    } else {
+                        bitmap = WebImageUtils.get(url);
+                        if (null != bitmap) {
+                            setImageBitmap(bitmap);
+                        }
+                    }
+                } else {
+                    Bitmap bitmap = WebImageUtils.get(url);
+                    if (bitmap == null) {
+                        setImageDrawable(getResources().getDrawable(defaultImage));
+                    } else {
+                        setImageBitmap(bitmap);
+                    }
+                }
+            } else {
+                setImageDrawable(getResources().getDrawable(defaultImage));
+            }
+        }
+    }
+
+}
