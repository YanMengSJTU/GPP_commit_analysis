diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index c65ee0ee..4063ae57 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -216,32 +216,6 @@ public void addHeader(String header, String value) {
     	clientHeaderMap.put(header, value);
     }
 
-    /**
-     * Cancels any pending (or potentially active) requests associated with the
-     * passed Context.
-     * <p>
-     * <b>Note:</b> This will only affect requests which were created with a non-null
-     * android Context. This method is intended to be used in the onDestroy
-     * method of your android activities to destroy all requests which are no
-     * longer required.
-     *
-     * @param context the android Context instance associated to the request.
-     * @param mayInterruptIfRunning specifies if active requests should be cancelled along with pending requests.
-     */
-    public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
-        List<WeakReference<Future>> requestList = requestMap.get(context);
-        if(requestList != null) {
-            for(WeakReference<Future> requestRef : requestList) {
-                Future request = requestRef.get();
-                if(request != null) {
-                    request.cancel(mayInterruptIfRunning);
-                }
-            }
-        }
-        requestMap.remove(context);
-    }
-
-
     //
     // HTTP GET Requests
     //
@@ -413,20 +387,7 @@ private void sendRequest(DefaultHttpClient client, HttpContext httpContext, Http
             uriRequest.addHeader("Content-Type", contentType);
         }
 
-        Future request = threadPool.submit(new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler));
-
-        if(context != null) {
-            // Add request to request map
-            List<WeakReference<Future>> requestList = requestMap.get(context);
-            if(requestList == null) {
-                requestList = new LinkedList<WeakReference<Future>>();
-                requestMap.put(context, requestList);
-            }
-
-            requestList.add(new WeakReference<Future>(request));
-
-            // TODO: Remove dead weakrefs from requestLists?
-        }
+        new Thread(new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)).start();
     }
 
     private String getUrlWithQueryString(String url, RequestParams params) {
