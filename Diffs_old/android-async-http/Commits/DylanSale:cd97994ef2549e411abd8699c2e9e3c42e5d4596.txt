diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 9837f77a..70f8fc34 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
 	package="com.loopj.android.http"
-	android:versionName="1.3.2"
+	android:versionName="1.3.2_Enabled"
 	android:versionCode="1">
 	<application
 		android:name="android_async_http">
 	</application>
-	<uses-sdk android:minSdkVersion="3" />
+	<uses-sdk android:minSdkVersion="7" />
 	<uses-permission android:name="android.permission.INTERNET" />
 </manifest> 
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 831d1a97..024b398c 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -490,7 +490,27 @@ public void delete(Context context, String url, Header[] headers, AsyncHttpRespo
         if(headers != null) delete.setHeaders(headers);
         sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
     }
+    
+    //HTTP Custom Request
+    
+    /**
+     * Perform a given Request
+     * @param request the custom request object to pass to the http client.
+     * @param responseHandler the response handler instance that should handle the response.
+     */
+    public void request(HttpUriRequest request, AsyncHttpResponseHandler responseHandler) {
+    	request(null, request, responseHandler);
+    }
 
+    /**
+     * Perform a given Request
+     * @param context the Android Context which initiated the request.
+     * @param request the custom request object to pass to the http client.
+     * @param responseHandler the response handler instance that should handle the response.
+     */
+    public void request(Context context, HttpUriRequest request, AsyncHttpResponseHandler responseHandler) {
+    	sendRequest(httpClient, httpContext, request, null, responseHandler, context);
+    }
 
     // Private stuff
     private void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 29139b9e..be98f9b9 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -55,7 +55,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(new Throwable(e.toString()), null);
+                responseHandler.sendFailureMessage(new Throwable(e.toString()), null, null);
             }
         }
     }
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6a71face..4abef29c 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -73,11 +73,14 @@
     private static final int FINISH_MESSAGE = 3;
 
     private Handler handler;
-
+    private boolean convertResponseToString = true;
+    
     /**
      * Creates a new AsyncHttpResponseHandler
+     * @param convertResponseToString if this is false, the callbacks will be given null as the content string
+     * and you have to get the data from the response object's entity directly.
      */
-    public AsyncHttpResponseHandler() {
+    public AsyncHttpResponseHandler(boolean convertResponseToString) {
         // Set up a handler to post events back to the correct thread if possible
         if(Looper.myLooper() != null) {
             handler = new Handler(){
@@ -86,6 +89,11 @@ public void handleMessage(Message msg){
                 }
             };
         }
+        this.convertResponseToString = convertResponseToString;
+    }
+    
+    public AsyncHttpResponseHandler() {
+    	this(true);
     }
 
 
@@ -116,9 +124,11 @@ public void onSuccess(HttpResponse response, String content) {}
      */
     public void onFailure(Throwable error) {}
 
+ 
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
+     * @param response the response returned from the server
      * @param content the response body, if any
      */
     public void onFailure(Throwable error, String content) {
@@ -126,6 +136,16 @@ public void onFailure(Throwable error, String content) {
         onFailure(error);
     }
 
+    /**
+     * Fired when a request fails to complete, override to handle in your own code
+     * @param error the underlying cause of the failure
+     * @param response the response returned from the server
+     * @param content the response body, if any
+     */
+    public void onFailure(Throwable error, HttpResponse response, String content) {
+    	onFailure(error, content);
+    }
+
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
@@ -135,8 +155,8 @@ protected void sendSuccessMessage(HttpResponse response, String responseBody) {
         sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{response, responseBody}));
     }
 
-    protected void sendFailureMessage(Throwable e, String responseBody) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
+    protected void sendFailureMessage(Throwable e, HttpResponse response, String responseBody) {
+        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, response, responseBody}));
     }
 
     protected void sendStartMessage() {
@@ -156,8 +176,8 @@ protected void handleSuccessMessage(HttpResponse response, String responseBody)
         onSuccess(response, responseBody);
     }
 
-    protected void handleFailureMessage(Throwable e, String responseBody) {
-        onFailure(e, responseBody);
+    protected void handleFailureMessage(Throwable e, HttpResponse response, String responseBody) {
+        onFailure(e, response, responseBody);
     }
 
 
@@ -170,7 +190,7 @@ protected void handleMessage(Message msg) {
                 handleSuccessMessage((HttpResponse)response[0], (String)response[1]);
                 break;
             case FAILURE_MESSAGE:
-                handleFailureMessage((Throwable)response[0], (String)response[1]);
+                handleFailureMessage((Throwable)response[0], (HttpResponse)response[1], (String)response[2]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -206,21 +226,23 @@ protected Message obtainMessage(int responseMessage, Object response) {
     void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         String responseBody = null;
-        try {
-            HttpEntity entity = null;
-            HttpEntity temp = response.getEntity();
-            if(temp != null) {
-                entity = new BufferedHttpEntity(temp);
-                responseBody = EntityUtils.toString(entity, "UTF-8");
-            }
-        } catch(IOException e) {
-            sendFailureMessage(new Throwable("BufferedHttpEntity IO exception"), null);
+        if(convertResponseToString) {
+	        try {
+	            HttpEntity entity = null;
+	            HttpEntity temp = response.getEntity();
+	            if(temp != null) {
+	                entity = new BufferedHttpEntity(temp);
+	                responseBody = EntityUtils.toString(entity, "UTF-8");
+	            }
+	        } catch(IOException e) {
+	            sendFailureMessage(new Throwable("BufferedHttpEntity IO exception"), response, null);
+	        }
         }
-
+        
         if(status.getStatusCode() >= 300) {
             //sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
         	String detailMessage = status.getStatusCode() + " - " + status.getReasonPhrase();
-        	sendFailureMessage(new Throwable(detailMessage), responseBody);
+        	sendFailureMessage(new Throwable(detailMessage), response, responseBody);
         } else {
             sendSuccessMessage(response, responseBody);
         }
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index a7e5b66f..0570babe 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -89,8 +89,8 @@ public void onFailure(Throwable e, JSONObject errorResponse) {}
     public void onFailure(Throwable e, JSONArray errorResponse) {}
     
     @Override 
-    protected void handleFailureMessage(Throwable e, String responseBody) {
-        super.handleFailureMessage(e, responseBody);
+    protected void handleFailureMessage(Throwable e, HttpResponse response, String responseBody) {
+        super.handleFailureMessage(e, response, responseBody);
         if (responseBody != null) try {
             Object jsonResponse = parseResponse(responseBody);
             if(jsonResponse instanceof JSONObject) {
