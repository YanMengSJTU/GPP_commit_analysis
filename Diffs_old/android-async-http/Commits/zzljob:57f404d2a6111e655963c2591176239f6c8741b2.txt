diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 5f0750d7..c7ec2335 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -30,6 +30,7 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.zip.GZIPInputStream;
+import java.util.zip.InflaterInputStream;
 
 import org.apache.http.Header;
 import org.apache.http.HeaderElement;
@@ -98,6 +99,7 @@
     private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
     private static final String ENCODING_GZIP = "gzip";
+    private static final String ENCODING_DEFLATE = "deflate";
 
     private static int maxConnections = DEFAULT_MAX_CONNECTIONS;
     private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
@@ -138,7 +140,8 @@ public AsyncHttpClient() {
             @Override
             public void process(HttpRequest request, HttpContext context) {
                 if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
-                    request.addHeader(HEADER_ACCEPT_ENCODING, ENCODING_GZIP);
+                	String encoding = String.format("%s,%s", ENCODING_GZIP, ENCODING_DEFLATE);
+                    request.addHeader(HEADER_ACCEPT_ENCODING, encoding);
                 }
                 for (String header : clientHeaderMap.keySet()) {
                     request.addHeader(header, clientHeaderMap.get(header));
@@ -156,9 +159,11 @@ public void process(HttpResponse response, HttpContext context) {
                 final Header encoding = entity.getContentEncoding();
                 if (encoding != null) {
                     for (HeaderElement element : encoding.getElements()) {
-                        if (element.getName().equalsIgnoreCase(ENCODING_GZIP)) {
-                            response.setEntity(new InflatingEntity(response.getEntity()));
+                        if (ENCODING_GZIP.equalsIgnoreCase(element.getName())) {
+                            response.setEntity(new GzipInflatingEntity(response.getEntity()));
                             break;
+                        } else if (ENCODING_DEFLATE.equalsIgnoreCase(element.getName())) {
+                        	response.setEntity(new ZlibInflatingEntity(response.getEntity()));
                         }
                     }
                 }
@@ -602,8 +607,8 @@ private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosin
         return requestBase;
     }
 
-    private static class InflatingEntity extends HttpEntityWrapper {
-        public InflatingEntity(HttpEntity wrapped) {
+    private static class GzipInflatingEntity extends HttpEntityWrapper {
+        public GzipInflatingEntity(HttpEntity wrapped) {
             super(wrapped);
         }
 
@@ -617,4 +622,20 @@ public long getContentLength() {
             return -1;
         }
     }
+    
+    private static class ZlibInflatingEntity extends HttpEntityWrapper {
+        public ZlibInflatingEntity(HttpEntity wrapped) {
+            super(wrapped);
+        }
+
+        @Override
+        public InputStream getContent() throws IOException {
+            return new InflaterInputStream(wrappedEntity.getContent());
+        }
+
+        @Override
+        public long getContentLength() {
+            return -1;
+        }
+    }
 }
