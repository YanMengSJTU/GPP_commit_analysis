diff --git a/.classpath b/.classpath
index 14fcf527..b464b7d9 100644
--- a/.classpath
+++ b/.classpath
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="examples"/>
-	<classpathentry kind="output" path="bin/classes"/>
+ <classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+ <classpathentry kind="src" path="src"/>
+ <classpathentry kind="src" path="gen"/>
+ <classpathentry kind="src" path="examples"/>
+ <classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/.project b/.project
index a9793139..3d803bce 100644
--- a/.project
+++ b/.project
@@ -1,33 +1,33 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>android-async-http</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
+ <name>android-async-http</name>
+ <comment></comment>
+ <projects>
+ </projects>
+ <buildSpec>
+  <buildCommand>
+   <name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+   <arguments>
+   </arguments>
+  </buildCommand>
+  <buildCommand>
+   <name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+   <arguments>
+   </arguments>
+  </buildCommand>
+  <buildCommand>
+   <name>org.eclipse.jdt.core.javabuilder</name>
+   <arguments>
+   </arguments>
+  </buildCommand>
+  <buildCommand>
+   <name>com.android.ide.eclipse.adt.ApkBuilder</name>
+   <arguments>
+   </arguments>
+  </buildCommand>
+ </buildSpec>
+ <natures>
+  <nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+  <nature>org.eclipse.jdt.core.javanature</nature>
+ </natures>
 </projectDescription>
diff --git a/releases/android-async-http-1.2.0.jar b/releases/android-async-http-1.2.0.jar
deleted file mode 100644
index 3fd4789b..00000000
Binary files a/releases/android-async-http-1.2.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.2.1.jar b/releases/android-async-http-1.2.1.jar
deleted file mode 100644
index 4db7cf11..00000000
Binary files a/releases/android-async-http-1.2.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.0.jar b/releases/android-async-http-1.3.0.jar
deleted file mode 100644
index faebdf0f..00000000
Binary files a/releases/android-async-http-1.3.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.1.jar b/releases/android-async-http-1.3.1.jar
deleted file mode 100644
index 107b032d..00000000
Binary files a/releases/android-async-http-1.3.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.3.2.jar b/releases/android-async-http-1.3.2.jar
deleted file mode 100644
index 0af40632..00000000
Binary files a/releases/android-async-http-1.3.2.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.0.jar b/releases/android-async-http-1.4.0.jar
deleted file mode 100644
index 2109150d..00000000
Binary files a/releases/android-async-http-1.4.0.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.1.jar b/releases/android-async-http-1.4.1.jar
deleted file mode 100644
index 551f5fbf..00000000
Binary files a/releases/android-async-http-1.4.1.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.2.jar b/releases/android-async-http-1.4.2.jar
deleted file mode 100644
index 1c568cb9..00000000
Binary files a/releases/android-async-http-1.4.2.jar and /dev/null differ
diff --git a/releases/android-async-http-1.4.3.jar b/releases/android-async-http-1.4.3.jar
deleted file mode 100644
index 3a749a59..00000000
Binary files a/releases/android-async-http-1.4.3.jar and /dev/null differ
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 0bfbccf7..d82e26ec 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -95,10 +95,10 @@ private void makeRequestWithRetries() throws ConnectException {
                 makeRequest();
                 return;
             } catch (UnknownHostException e) {
-		        if(responseHandler != null) {
-		            responseHandler.sendFailureMessage(e, "can't resolve host");
-		        }
-	        	return;
+                if(responseHandler != null) {
+                    responseHandler.sendFailureMessage(e, "can't resolve host");
+                }
+                return;
             }catch (SocketException e){
                 // Added to detect host unreachable
                 if(responseHandler != null) {
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 084bf339..d8c688cd 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -95,16 +95,16 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
 
     @Override
     protected void sendSuccessMessage(int statusCode, String responseBody) {
-    	if (statusCode != HttpStatus.SC_NO_CONTENT){
-	        try {
-	            Object jsonResponse = parseResponse(responseBody);
-	            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse}));
-	        } catch(JSONException e) {
-	            sendFailureMessage(e, responseBody);
-	        }
-    	}else{
-    		sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
-    	}
+        if (statusCode != HttpStatus.SC_NO_CONTENT){
+            try {
+                Object jsonResponse = parseResponse(responseBody);
+                sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, jsonResponse}));
+            } catch(JSONException e) {
+                sendFailureMessage(e, responseBody);
+            }
+        }else{
+            sendMessage(obtainMessage(SUCCESS_JSON_MESSAGE, new Object[]{statusCode, new JSONObject()}));
+        }
     }
 
 
@@ -137,14 +137,14 @@ protected void handleSuccessJsonMessage(int statusCode, Object jsonResponse) {
     protected Object parseResponse(String responseBody) throws JSONException {
         Object result = null;
         //trim the string to prevent start with blank, and test if the string is valid JSON, because the parser don't do this :(. If Json is not valid this will return null
-		responseBody = responseBody.trim();
-		if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
-			result = new JSONTokener(responseBody).nextValue();
-		}
-		if (result == null) {
-			result = responseBody;
-		}
-		return result;
+        responseBody = responseBody.trim();
+        if(responseBody.startsWith("{") || responseBody.startsWith("[")) {
+            result = new JSONTokener(responseBody).nextValue();
+        }
+        if (result == null) {
+            result = responseBody;
+        }
+        return result;
     }
 
     @Override
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 715456fb..5727cbde 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -102,12 +102,12 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
     }
     
     protected boolean isInList(HashSet<Class<?>> list, Throwable error) {
-    	Iterator<Class<?>> itr = list.iterator();
-    	while (itr.hasNext()) {
-    		if (itr.next().isInstance(error)) {
-    			return true;
-    		}
-    	}
-    	return false;
+        Iterator<Class<?>> itr = list.iterator();
+        while (itr.hasNext()) {
+            if (itr.next().isInstance(error)) {
+                return true;
+            }
+        }
+        return false;
     }
-}
\ No newline at end of file
+}
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 8f55991e..d1b3d6ba 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -8,114 +8,114 @@
 import android.os.Message;
 
 public abstract class SyncHttpClient extends AsyncHttpClient {
-	private int responseCode;
-	/*
-	 * as this is a synchronous request this is just a helping mechanism to pass
-	 * the result back to this method. Therefore the result object has to be a
-	 * field to be accessible
-	 */
-	private String result;
-	AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
-
-		void sendResponseMessage(org.apache.http.HttpResponse response) {
-			responseCode = response.getStatusLine().getStatusCode();
-			super.sendResponseMessage(response);
-		};
-
-		@Override
-		protected void sendMessage(Message msg) {
-			/*
-			 * Dont use the handler and send it directly to the analysis
-			 * (because its all the same thread)
-			 */
-			handleMessage(msg);
-		}
-
-		@Override
-		public void onSuccess(String content) {
-			result = content;
-		}
-
-		@Override
-		public void onFailure(Throwable error, String content) {
-			result = onRequestFailed(error, content);
-		}
-	};
-
-	/**
-	 * @return the response code for the last request, might be usefull
-	 *         sometimes
-	 */
-	public int getResponseCode() {
-		return responseCode;
-	}
-
-	// Private stuff
-	protected void sendRequest(DefaultHttpClient client,
-			HttpContext httpContext, HttpUriRequest uriRequest,
-			String contentType, AsyncHttpResponseHandler responseHandler,
-			Context context) {
-		if (contentType != null) {
-			uriRequest.addHeader("Content-Type", contentType);
-		}
-
-		/*
-		 * will execute the request directly
-		 */
-		new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)
-				.run();
-	}
-
-	public abstract String onRequestFailed(Throwable error, String content);
-
-	public void delete(String url, RequestParams queryParams,
-			AsyncHttpResponseHandler responseHandler) {
-		// TODO what about query params??
-		delete(url, responseHandler);
-	}
-
-	public String get(String url, RequestParams params) {
-		this.get(url, params, responseHandler);
-		/*
-		 * the response handler will have set the result when this line is
-		 * reached
-		 */
-		return result;
-	}
-
-	public String get(String url) {
-		this.get(url, null, responseHandler);
-		return result;
-	}
-
-	public String put(String url, RequestParams params) {
-		this.put(url, params, responseHandler);
-		return result;
-	}
-
-	public String put(String url) {
-		this.put(url, null, responseHandler);
-		return result;
-	}
-
-	public String post(String url, RequestParams params) {
-		this.post(url, params, responseHandler);
-		return result;
-	}
-
-	public String post(String url) {
-		this.post(url, null, responseHandler);
-		return result;
-	}
-
-	public String delete(String url, RequestParams params) {
-		this.delete(url, params, responseHandler);
-		return result;
-	}
-
-	public String delete(String url) {
-		this.delete(url, null, responseHandler);
-		return result;
-	}
+    private int responseCode;
+    /*
+     * as this is a synchronous request this is just a helping mechanism to pass
+     * the result back to this method. Therefore the result object has to be a
+     * field to be accessible
+     */
+    private String result;
+    AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
+
+        void sendResponseMessage(org.apache.http.HttpResponse response) {
+            responseCode = response.getStatusLine().getStatusCode();
+            super.sendResponseMessage(response);
+        };
+
+        @Override
+        protected void sendMessage(Message msg) {
+            /*
+             * Dont use the handler and send it directly to the analysis
+             * (because its all the same thread)
+             */
+            handleMessage(msg);
+        }
+
+        @Override
+        public void onSuccess(String content) {
+            result = content;
+        }
+
+        @Override
+        public void onFailure(Throwable error, String content) {
+            result = onRequestFailed(error, content);
+        }
+    };
+
+    /**
+     * @return the response code for the last request, might be usefull
+     *         sometimes
+     */
+    public int getResponseCode() {
+        return responseCode;
+    }
+
+    // Private stuff
+    protected void sendRequest(DefaultHttpClient client,
+            HttpContext httpContext, HttpUriRequest uriRequest,
+            String contentType, AsyncHttpResponseHandler responseHandler,
+            Context context) {
+        if (contentType != null) {
+            uriRequest.addHeader("Content-Type", contentType);
+        }
+
+        /*
+         * will execute the request directly
+         */
+        new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)
+                .run();
+    }
+
+    public abstract String onRequestFailed(Throwable error, String content);
+
+    public void delete(String url, RequestParams queryParams,
+            AsyncHttpResponseHandler responseHandler) {
+        // TODO what about query params??
+        delete(url, responseHandler);
+    }
+
+    public String get(String url, RequestParams params) {
+        this.get(url, params, responseHandler);
+        /*
+         * the response handler will have set the result when this line is
+         * reached
+         */
+        return result;
+    }
+
+    public String get(String url) {
+        this.get(url, null, responseHandler);
+        return result;
+    }
+
+    public String put(String url, RequestParams params) {
+        this.put(url, params, responseHandler);
+        return result;
+    }
+
+    public String put(String url) {
+        this.put(url, null, responseHandler);
+        return result;
+    }
+
+    public String post(String url, RequestParams params) {
+        this.post(url, params, responseHandler);
+        return result;
+    }
+
+    public String post(String url) {
+        this.post(url, null, responseHandler);
+        return result;
+    }
+
+    public String delete(String url, RequestParams params) {
+        this.delete(url, params, responseHandler);
+        return result;
+    }
+
+    public String delete(String url) {
+        this.delete(url, null, responseHandler);
+        return result;
+    }
 
 }
