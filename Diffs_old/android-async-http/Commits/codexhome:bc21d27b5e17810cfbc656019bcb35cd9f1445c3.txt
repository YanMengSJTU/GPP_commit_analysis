diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 832e19de..9ef10325 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,38 +1,44 @@
 CONTRIBUTING
-------------
-AsyncHttpClient is an open-source project made by developers for developers!  
-If you would like to contribute to the project, that's really great. You can contribute in a variety of ways:  
+============
+AsyncHttpClient is an open-source project made by developers for developers!
 
-1) Help us with test cases and examples for the Wiki  
-2) If you have a good idea/patch for the project, create a pull request (see PULL)  
-3) Found a bug? You're more than welcome to submit an issue (see ISSUES)  
-4) Help other fellow developers solve their problems, you're welcome to do so in issues
+If you would like to contribute to the project, it's really great. You can contribute in a variety of ways:
+
+  * Help us with test cases and examples for the Wiki (and kindly follow our [Coding Standards](#coding-standards))
+  * If you have a good idea/patch for the project, create a [pull request](#pull-requests)
+  * Found a bug? You're more than welcome to [submit an issue](#issues)
+  * Help other fellow developers solve their problems, you're welcome to do so in issues
 
 We do require certain guidelines to be followed so that the quality of the project remains top-notch:
 
-1. PULL requests
-----------------
-When you submit a patch or a new functionality for the project, you must open a pull request. We will get to the pull request as soon as possible, investigate what functionality or bug fixes have been added and decide whether to include it in the library or not -- for the benefit of everyone.  
-You further agree that any contribution that you make to the library will be distributed further under the same license as the library itself (Apache v2.0).  
+PULL requests
+-------------
+When you submit a patch or a new functionality for the project, you must open a pull request. We will get to the pull request as soon as possible, investigate what functionality or bug fixes have been added and decide whether to include it in the library or not -- for the benefit of everyone.
+
+**You agree that all contributions that you make to the library will be distributed further under the same license as the library itself (Apache V2).**
+
 Don't be discouraged if your pull request is rejected. This is not a deadline and sometimes with a proper explanation on your side, we are persuaded to merge in the request. Just remember that this is a library for everyone and as such must meet certain, generic rules that we would like to believe are following.  
 
-2. ISSUES
+ISSUES
 ---------
-The issues system is the place to report bugs. Please do not use it to submit patches or new functionality. As helpful as we would like to be, we cannot replace the developer and we certainly do not see what you're seeing. So when you come to report an issue, please follow these simple rules:  
-
-1) Reporting bugs in English language only  
-2) If the issue is due to a crash, we need the stack trace -- throwable.printStackTrace() -- and any other detail that will shed light on the problem  
-3) We need to see the source code (minus certain details that you think are confidential) that caused the problem in the first place  
-4) Opening issues without providing us with the information necessary to debug and fix it is useless; so we will close such issues within 7 days period  
-
-3. CODING STANDARDS
--------------------
-We need you to follow certain rules when sending source code contributions. These are the basic principles that we ourselves abide to and we require that you do so too:  
-
-1) Do not use the Tab character (it's in first place for a reason)  
-2) Indentation is 4 spaces  
-3) You must provide proper Javadoc, including description, in English for both public and protected methods, classes and properties  
-4) Group packages that belong to the same top-level package together, followed by an empty line  
-5) Add an empty line after and before class/interface declarations, methods and constructors  
-6) Add an empty line before and after a group of properties  
-7) Do not catch generic Exception/Throwable errors, but always catch the most specific type of the exception/error  
+The issues system is the place to report bugs and not for submitting patches or new functionality. As helpful as we would like to be, we cannot replace the developer and we certainly do not see what you're seeing. So when you come to report an issue, follow these simple rules:  
+
+  * Report bugs in the English language only
+  * Use Markdown to format your issue in a fashionable way (easier to read): [Familiarize yourself](https://help.github.com/articles/github-flavored-markdown)
+  * If the issue is due to a crash, include the stack trace -- `throwable.printStackTrace()` -- and any other detail that will shed light on the problem
+  * We need to see the source code (minus certain details that you think are confidential) that caused the problem in the first place, so include it too
+
+Opening issues without providing us with the information necessary to debug and fix it is useless; so we will close such issues within 7 days period  
+
+CODING STANDARDS
+----------------
+We need you to follow certain rules when sending source code contributions. These are the basic principles that we ourselves abide to and we require that you do so as well:
+
+  * Do not use the Tab character (it's in first place for a reason)
+  * Indentation is 4 spaces
+  * Include the copyright info (as in other files) at the top of the class file
+  * You must provide proper Javadoc, including description, in English for both public and protected methods, classes and properties
+  * Group packages that belong to the same top-level package together, followed by an empty line
+  * Add an empty line after and before class/interface declarations, methods and constructors
+  * Add an empty line before and after a group of properties
+  * Do not catch generic Exception/Throwable errors, but always catch the most specific type of the exception/error
diff --git a/library/build.gradle b/library/build.gradle
index 537f1abd..f10d39ab 100755
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -10,13 +10,24 @@ android {
     }
 
     lintOptions {
-        abortOnError false
+        xmlReport false
+        warningsAsErrors true
+        quiet false
+        showAll true
     }
 
     compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_7
-        targetCompatibility JavaVersion.VERSION_1_7
+        sourceCompatibility JavaVersion.VERSION_1_6
+        targetCompatibility JavaVersion.VERSION_1_6
     }
 }
 
+android.libraryVariants.all { variant ->
+    def name = variant.buildType.name
+    def task = project.tasks.create "jar${name.capitalize()}", Jar
+    task.dependsOn variant.javaCompile
+    task.from variant.javaCompile.destinationDir
+    artifacts.add('archives', task);
+}
+
 apply from: '../maven_push.gradle'
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 12362f5a..7e49df73 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -72,6 +72,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.PushbackInputStream;
 import java.net.URI;
 import java.util.Collections;
 import java.util.HashMap;
@@ -1164,6 +1165,24 @@ public static String getUrlWithQueryString(boolean shouldEncodeUrl, String url,
         return url;
     }
 
+    /**
+     * Checks the InputStream if it contains  GZIP compressed data
+     *
+     * @param inputStream InputStream to be checked
+     * @return true or false if the stream contains GZIP compressed data
+     * @throws java.io.IOException
+     */
+    public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {
+        if (inputStream == null)
+            return false;
+
+        byte[] signature = new byte[2];
+        int readStatus = inputStream.read(signature);
+        inputStream.unread(signature);
+        int streamHeader = ((int) signature[0] & 0xff) | ((signature[1] << 8) & 0xff00);
+        return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader;
+    }
+
     /**
      * A utility function to close an input stream without raising an exception.
      *
@@ -1208,11 +1227,11 @@ private HttpEntity paramsToEntity(RequestParams params, ResponseHandlerInterface
             if (params != null) {
                 entity = params.getEntity(responseHandler);
             }
-        } catch (Throwable t) {
+        } catch (IOException e) {
             if (responseHandler != null)
-                responseHandler.sendFailureMessage(0, null, null, t);
+                responseHandler.sendFailureMessage(0, null, null, e);
             else
-                t.printStackTrace();
+                e.printStackTrace();
         }
 
         return entity;
@@ -1247,7 +1266,12 @@ public InflatingEntity(HttpEntity wrapped) {
 
         @Override
         public InputStream getContent() throws IOException {
-            return new GZIPInputStream(wrappedEntity.getContent());
+            PushbackInputStream content = new PushbackInputStream(wrappedEntity.getContent(), 2);
+            if (isInputStreamGZIPCompressed(content)) {
+                return new GZIPInputStream(content);
+            } else {
+                return content;
+            }
         }
 
         @Override
diff --git a/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
index 6e6f3275..5a005d6a 100755
--- a/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/FileAsyncHttpResponseHandler.java
@@ -74,8 +74,8 @@ protected File getTemporaryFile(Context context) {
         assert (context != null);
         try {
             return File.createTempFile("temp_", "_handled", context.getCacheDir());
-        } catch (Throwable t) {
-            Log.e(LOG_TAG, "Cannot create temporary file", t);
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "Cannot create temporary file", e);
         }
         return null;
     }
diff --git a/library/src/main/java/com/loopj/android/http/MyRedirectHandler.java b/library/src/main/java/com/loopj/android/http/MyRedirectHandler.java
index f67579ea..dfc45ec0 100644
--- a/library/src/main/java/com/loopj/android/http/MyRedirectHandler.java
+++ b/library/src/main/java/com/loopj/android/http/MyRedirectHandler.java
@@ -52,6 +52,7 @@ public MyRedirectHandler(final boolean allowRedirects) {
         this.enableRedirects = allowRedirects;
     }
 
+    @Override
     public boolean isRedirectRequested(
             final HttpResponse response,
             final HttpContext context) {
@@ -73,6 +74,7 @@ public boolean isRedirectRequested(
         } //end of switch
     }
 
+    @Override
     public URI getLocationURI(
             final HttpResponse response,
             final HttpContext context) throws ProtocolException {
diff --git a/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java b/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
index ca328e6b..0fefaf72 100755
--- a/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
+++ b/library/src/main/java/com/loopj/android/http/PersistentCookieStore.java
@@ -30,6 +30,9 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+
+import java.io.IOException;
+
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -165,7 +168,7 @@ public void setOmitNonPersistentCookies(boolean omitNonPersistentCookies) {
      * @param cookie cookie to be removed
      */
     public void deleteCookie(Cookie cookie) {
-        String name = cookie.getName();
+        String name = cookie.getName() + cookie.getDomain();
         cookies.remove(name);
         SharedPreferences.Editor prefsWriter = cookiePrefs.edit();
         prefsWriter.remove(COOKIE_NAME_PREFIX + name);
@@ -185,7 +188,8 @@ protected String encodeCookie(SerializableCookie cookie) {
         try {
             ObjectOutputStream outputStream = new ObjectOutputStream(os);
             outputStream.writeObject(cookie);
-        } catch (Exception e) {
+        } catch (IOException e) {
+            Log.d(LOG_TAG, "IOException in encodeCookie", e);
             return null;
         }
 
@@ -205,8 +209,10 @@ protected Cookie decodeCookie(String cookieString) {
         try {
             ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
             cookie = ((SerializableCookie) objectInputStream.readObject()).getCookie();
-        } catch (Exception exception) {
-            Log.d(LOG_TAG, "decodeCookie failed", exception);
+        } catch (IOException e) {
+            Log.d(LOG_TAG, "IOException in decodeCookie", e);
+        } catch (ClassNotFoundException e) {
+            Log.d(LOG_TAG, "ClassNotFoundException in decodeCookie", e);
         }
 
         return cookie;
diff --git a/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
index 2209fb78..f5e21fc8 100755
--- a/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/RangeFileAsyncHttpResponseHandler.java
@@ -67,7 +67,7 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                         append = false;
                         current = 0;
                     } else
-                        Log.v(LOG_TAG, "Content-Rnage: " + header.getValue());
+                        Log.v(LOG_TAG, "Content-Range: " + header.getValue());
                     sendSuccessMessage(status.getStatusCode(), response.getAllHeaders(), getResponseData(response.getEntity()));
                 }
             }
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index 68488f8f..b115bdc3 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -469,13 +469,13 @@ private HttpEntity createMultipartEntity(ResponseHandlerInterface progressHandle
 
         // Add string params
         for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
-            entity.addPart(entry.getKey(), entry.getValue());
+            entity.addPartWithCharset(entry.getKey(), entry.getValue(), contentEncoding);
         }
 
         // Add non-string params
         List<BasicNameValuePair> params = getParamsList(null, urlParamsWithObjects);
         for (BasicNameValuePair kv : params) {
-            entity.addPart(kv.getName(), kv.getValue());
+            entity.addPartWithCharset(kv.getName(), kv.getValue(), contentEncoding);
         }
 
         // Add stream params
diff --git a/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
index 22a51c2f..f4663b7b 100644
--- a/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/SaxAsyncHttpResponseHandler.java
@@ -54,6 +54,7 @@
  *     });
  * <pre/>
  *
+ * @param <T> Handler extending {@link org.xml.sax.helpers.DefaultHandler}
  * @see org.xml.sax.helpers.DefaultHandler
  * @see com.loopj.android.http.AsyncHttpResponseHandler
  */
@@ -83,6 +84,8 @@ public SaxAsyncHttpResponseHandler(T t) {
      * Deconstructs response into given content handler
      *
      * @param entity returned HttpEntity
+     * @return deconstructed response
+     * @throws java.io.IOException
      * @see org.apache.http.HttpEntity
      */
     @Override
@@ -98,7 +101,9 @@ public SaxAsyncHttpResponseHandler(T t) {
                     rssReader.setContentHandler(handler);
                     inputStreamReader = new InputStreamReader(instream, DEFAULT_CHARSET);
                     rssReader.parse(new InputSource(inputStreamReader));
-                } catch (SAXException | ParserConfigurationException e) {
+                } catch (SAXException e) {
+                    Log.e(LOG_TAG, "getResponseData exception", e);
+                } catch (ParserConfigurationException e) {
                     Log.e(LOG_TAG, "getResponseData exception", e);
                 } finally {
                     AsyncHttpClient.silentCloseInputStream(instream);
@@ -107,7 +112,6 @@ public SaxAsyncHttpResponseHandler(T t) {
                             inputStreamReader.close();
                         } catch (IOException e) { /*ignore*/ }
                     }
-
                 }
             }
         }
@@ -142,4 +146,4 @@ public void onFailure(int statusCode, Header[] headers,
                           byte[] responseBody, Throwable error) {
         onSuccess(statusCode, headers, handler);
     }
-}
\ No newline at end of file
+}
diff --git a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
index 423ab478..baca2281 100755
--- a/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/library/src/main/java/com/loopj/android/http/SimpleMultipartEntity.java
@@ -28,6 +28,7 @@
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.message.BasicHeader;
+import org.apache.http.protocol.HTTP;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -99,8 +100,13 @@ public void addPart(String key, String value, String contentType) {
         }
     }
 
+    public void addPartWithCharset(String key, String value, String charset) {
+        if (charset == null) charset = HTTP.UTF_8;
+        addPart(key, value, "text/plain; charset=" + charset);
+    }
+
     public void addPart(String key, String value) {
-        addPart(key, value, "text/plain; charset=UTF-8");
+        addPartWithCharset(key, value, null);
     }
 
     public void addPart(String key, File file) {
diff --git a/maven_push.gradle b/maven_push.gradle
index 07ac60ed..27fff0d8 100755
--- a/maven_push.gradle
+++ b/maven_push.gradle
@@ -93,7 +93,7 @@ afterEvaluate { project ->
     }
 
     task androidJavadocs(type: Javadoc) {
-        source = android.sourceSets.main.allJava
+        source = android.sourceSets.main.java.srcDirs
         classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
     }
 
@@ -104,7 +104,7 @@ afterEvaluate { project ->
 
     task androidSourcesJar(type: Jar) {
         classifier = 'sources'
-        from android.sourceSets.main.allSource
+        from android.sourceSets.main.java.srcDirs
     }
 
     artifacts {
diff --git a/sample/build.gradle b/sample/build.gradle
index 505653ff..f6541400 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -30,7 +30,10 @@ android {
     }
 
     lintOptions {
-        abortOnError false
+        xmlReport false
+        warningsAsErrors true
+        quiet false
+        showAll true
     }
 
     packagingOptions {
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
index 31876077..8361ade8 100755
--- a/sample/src/main/AndroidManifest.xml
+++ b/sample/src/main/AndroidManifest.xml
@@ -29,7 +29,11 @@
         <activity android:name=".CancelAllRequestsSample"/>
         <activity android:name=".CancelRequestHandleSample"/>
         <activity android:name=".SynchronousClientSample"/>
+        <activity android:name=".IntentServiceSample"/>
         <activity android:name=".SaxSample"/>
+        <activity android:name=".FilesSample"/>
+
+        <service android:name=".services.ExampleIntentService"/>
     </application>
 
 </manifest>
diff --git a/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java b/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
new file mode 100644
index 00000000..491c2b36
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/FilesSample.java
@@ -0,0 +1,65 @@
+package com.loopj.android.http.sample;
+
+import android.util.Log;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.RequestParams;
+import com.loopj.android.http.ResponseHandlerInterface;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.util.Random;
+
+public class FilesSample extends PostSample {
+
+    public static final String LOG_TAG = "PostFilesSample";
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_post_files;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        try {
+            RequestParams params = new RequestParams();
+            final String contentType = "application/octet-stream";
+            params.put("fileOne", createTempFile("fileOne", 1020), contentType);
+            params.put("fileTwo", createTempFile("fileTwo", 1030), contentType);
+            params.put("fileThree", createTempFile("fileThree", 1040), contentType);
+            params.put("fileFour", createTempFile("fileFour", 1050), contentType);
+            params.put("fileFive", createTempFile("fileFive", 1060), contentType);
+            return client.post(this, URL, params, responseHandler);
+        } catch (FileNotFoundException fnfException) {
+            Log.e(LOG_TAG, "executeSample failed with FileNotFoundException", fnfException);
+        }
+        return null;
+    }
+
+    public File createTempFile(String namePart, int byteSize) {
+        try {
+            File f = File.createTempFile(namePart, "_handled", getCacheDir());
+            FileOutputStream fos = new FileOutputStream(f);
+            Random r = new Random();
+            byte[] buffer = new byte[byteSize];
+            r.nextBytes(buffer);
+            fos.write(buffer);
+            fos.flush();
+            fos.close();
+            return f;
+        } catch (Throwable t) {
+            Log.e(LOG_TAG, "createTempFile failed", t);
+        }
+        return null;
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/IntentServiceSample.java b/sample/src/main/java/com/loopj/android/http/sample/IntentServiceSample.java
new file mode 100644
index 00000000..7b7dde62
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/IntentServiceSample.java
@@ -0,0 +1,106 @@
+package com.loopj.android.http.sample;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.RequestHandle;
+import com.loopj.android.http.ResponseHandlerInterface;
+import com.loopj.android.http.sample.services.ExampleIntentService;
+import com.loopj.android.http.sample.util.IntentUtil;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+
+public class IntentServiceSample extends SampleParentActivity {
+
+    public static final String LOG_TAG = "IntentServiceSample";
+    public static final String ACTION_START = "SYNC_START";
+    public static final String ACTION_RETRY = "SYNC_RETRY";
+    public static final String ACTION_CANCEL = "SYNC_CANCEL";
+    public static final String ACTION_SUCCESS = "SYNC_SUCCESS";
+    public static final String ACTION_FAILURE = "SYNC_FAILURE";
+    public static final String ACTION_FINISH = "SYNC_FINISH";
+    public static final String[] ALLOWED_ACTIONS = {ACTION_START,
+            ACTION_RETRY, ACTION_CANCEL, ACTION_SUCCESS, ACTION_FAILURE, ACTION_FINISH};
+    private final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+
+            // switch() doesn't support strings in older JDK.
+            if(ACTION_START.equals(action)) {
+                clearOutputs();
+                addView(getColoredView(LIGHTBLUE, "Request started"));
+            } else if(ACTION_FINISH.equals(action)) {
+                addView(getColoredView(LIGHTBLUE, "Request finished"));
+            } else if(ACTION_CANCEL.equals(action)) {
+                addView(getColoredView(LIGHTBLUE, "Request cancelled"));
+            } else if(ACTION_RETRY.equals(action)) {
+                addView(getColoredView(LIGHTBLUE, "Request retried"));
+            } else if(ACTION_FAILURE.equals(action) || ACTION_SUCCESS.equals(action)) {
+                debugThrowable(LOG_TAG, (Throwable) intent.getSerializableExtra(ExampleIntentService.INTENT_THROWABLE));
+                if(ACTION_SUCCESS.equals(action)) {
+                    debugStatusCode(LOG_TAG, intent.getIntExtra(ExampleIntentService.INTENT_STATUS_CODE, 0));
+                    debugHeaders(LOG_TAG, IntentUtil.deserializeHeaders(intent.getStringArrayExtra(ExampleIntentService.INTENT_HEADERS)));
+                    byte[] returnedBytes = intent.getByteArrayExtra(ExampleIntentService.INTENT_DATA);
+                    if (returnedBytes != null) {
+                        debugResponse(LOG_TAG, new String(returnedBytes));
+                    }
+                }
+            }
+        }
+    };
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        IntentFilter iFilter = new IntentFilter();
+        for (String action : ALLOWED_ACTIONS) {
+            iFilter.addAction(action);
+        }
+        registerReceiver(broadcastReceiver, iFilter);
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        unregisterReceiver(broadcastReceiver);
+    }
+
+    @Override
+    public ResponseHandlerInterface getResponseHandler() {
+        // no response handler on activity
+        return null;
+    }
+
+    @Override
+    public String getDefaultURL() {
+        return "https://httpbin.org/get";
+    }
+
+    @Override
+    public boolean isRequestHeadersAllowed() {
+        return false;
+    }
+
+    @Override
+    public boolean isRequestBodyAllowed() {
+        return false;
+    }
+
+    @Override
+    public int getSampleTitle() {
+        return R.string.title_intent_service_sample;
+    }
+
+    @Override
+    public RequestHandle executeSample(AsyncHttpClient client, String URL, Header[] headers, HttpEntity entity, ResponseHandlerInterface responseHandler) {
+        Intent serviceCall = new Intent(this, ExampleIntentService.class);
+        serviceCall.putExtra(ExampleIntentService.INTENT_URL, URL);
+        startService(serviceCall);
+        return null;
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
index 6f097724..d559b8d5 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/SampleParentActivity.java
@@ -50,7 +50,7 @@
     private AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
     private EditText urlEditText, headersEditText, bodyEditText;
     private LinearLayout responseLayout;
-    private final List<RequestHandle> requestHandles = new LinkedList<>();
+    private final List<RequestHandle> requestHandles = new LinkedList<RequestHandle>();
 
     protected static final int LIGHTGREEN = Color.parseColor("#00FF66");
     protected static final int LIGHTRED = Color.parseColor("#FF3300");
@@ -126,7 +126,7 @@ public void onClick(View v) {
     };
 
     public Header[] getRequestHeaders() {
-        List<Header> headers = new ArrayList<>();
+        List<Header> headers = new ArrayList<Header>();
         String headersRaw = headersEditText.getText() == null ? null : headersEditText.getText().toString();
 
         if (headersRaw != null && headersRaw.length() > 3) {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
index 5222355b..752559e7 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/ThreadingTimeoutSample.java
@@ -31,7 +31,7 @@
 public class ThreadingTimeoutSample extends SampleParentActivity {
 
     private static final String LOG_TAG = "ThreadingTimeoutSample";
-    private SparseArray<String> states = new SparseArray<>();
+    private final SparseArray<String> states = new SparseArray<String>();
     private int counter = 0;
 
     @Override
@@ -72,7 +72,7 @@ private synchronized void setStatus(int id, String status) {
     public ResponseHandlerInterface getResponseHandler() {
         return new AsyncHttpResponseHandler() {
 
-            private int id = counter++;
+            private final int id = counter++;
 
             @Override
             public void onStart() {
diff --git a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
index 3f0c1a45..2d8a42c3 100755
--- a/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
+++ b/sample/src/main/java/com/loopj/android/http/sample/WaypointsActivity.java
@@ -30,37 +30,23 @@
 
 public class WaypointsActivity extends ListActivity {
 
-    private static final int[] samples = new int[]{
-            R.string.title_get_sample,
-            R.string.title_post_sample,
-            R.string.title_delete_sample,
-            R.string.title_put_sample,
-            R.string.title_json_sample,
-            R.string.title_sax_example,
-            R.string.title_file_sample,
-            R.string.title_binary_sample,
-            R.string.title_gzip_sample,
-            R.string.title_redirect_302,
-            R.string.title_threading_timeout,
-            R.string.title_cancel_all,
-            R.string.title_cancel_handle,
-            R.string.title_synchronous
-    };
-    private static final Class[] targets = {
-            GetSample.class,
-            PostSample.class,
-            DeleteSample.class,
-            PutSample.class,
-            JsonSample.class,
-            SaxSample.class,
-            FileSample.class,
-            BinarySample.class,
-            GzipSample.class,
-            Redirect302Sample.class,
-            ThreadingTimeoutSample.class,
-            CancelAllRequestsSample.class,
-            CancelRequestHandleSample.class,
-            SynchronousClientSample.class
+    private static final SampleConfig[] samplesConfig = new SampleConfig[] {
+        new SampleConfig(R.string.title_get_sample, GetSample.class),
+        new SampleConfig(R.string.title_post_sample, PostSample.class),
+        new SampleConfig(R.string.title_delete_sample, DeleteSample.class),
+        new SampleConfig(R.string.title_put_sample, PutSample.class),
+        new SampleConfig(R.string.title_json_sample, JsonSample.class),
+        new SampleConfig(R.string.title_sax_example, SaxSample.class),
+        new SampleConfig(R.string.title_file_sample, FileSample.class),
+        new SampleConfig(R.string.title_binary_sample, BinarySample.class),
+        new SampleConfig(R.string.title_gzip_sample, GzipSample.class),
+        new SampleConfig(R.string.title_redirect_302, Redirect302Sample.class),
+        new SampleConfig(R.string.title_threading_timeout, ThreadingTimeoutSample.class),
+        new SampleConfig(R.string.title_cancel_all, CancelAllRequestsSample.class),
+        new SampleConfig(R.string.title_cancel_handle, CancelRequestHandleSample.class),
+        new SampleConfig(R.string.title_synchronous, SynchronousClientSample.class),
+        new SampleConfig(R.string.title_intent_service_sample, IntentServiceSample.class),
+        new SampleConfig(R.string.title_post_files, FilesSample.class)
     };
 
     @Override
@@ -71,15 +57,28 @@ protected void onCreate(Bundle savedInstanceState) {
 
     private List<String> getTitlesList() {
         List<String> titles = new ArrayList<String>();
-        for (int title : samples) {
-            titles.add(getString(title));
+        for (SampleConfig config : samplesConfig) {
+            titles.add(getString(config.titleId));
         }
         return titles;
     }
 
     @Override
     protected void onListItemClick(ListView l, View v, int position, long id) {
-        if (position >= 0 && position < targets.length)
-            startActivity(new Intent(this, targets[position]));
+        if (position >= 0 && position < samplesConfig.length)
+            startActivity(new Intent(this, samplesConfig[position].targetClass));
+    }
+
+    private static class SampleConfig {
+
+        final int titleId;
+        final Class targetClass;
+
+        SampleConfig(int titleId, Class targetClass) {
+          this.titleId = titleId;
+          this.targetClass = targetClass;
+        }
+
     }
+
 }
diff --git a/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java b/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
new file mode 100644
index 00000000..7fe49c71
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/services/ExampleIntentService.java
@@ -0,0 +1,87 @@
+package com.loopj.android.http.sample.services;
+
+import android.app.IntentService;
+import android.content.Intent;
+import android.util.Log;
+
+import com.loopj.android.http.AsyncHttpClient;
+import com.loopj.android.http.AsyncHttpResponseHandler;
+import com.loopj.android.http.SyncHttpClient;
+import com.loopj.android.http.sample.IntentServiceSample;
+import com.loopj.android.http.sample.util.IntentUtil;
+
+import org.apache.http.Header;
+
+public class ExampleIntentService extends IntentService {
+
+    public static final String LOG_TAG = "ExampleIntentService:IntentServiceSample";
+    public static final String INTENT_URL = "INTENT_URL";
+    public static final String INTENT_STATUS_CODE = "INTENT_STATUS_CODE";
+    public static final String INTENT_HEADERS = "INTENT_HEADERS";
+    public static final String INTENT_DATA = "INTENT_DATA";
+    public static final String INTENT_THROWABLE = "INTENT_THROWABLE";
+
+    private AsyncHttpClient aClient = new SyncHttpClient();
+
+    public ExampleIntentService() {
+        super("ExampleIntentService");
+    }
+
+    @Override
+    public void onStart(Intent intent, int startId) {
+        Log.d(LOG_TAG, "onStart()");
+        super.onStart(intent, startId);
+    }
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        if (intent != null && intent.hasExtra(INTENT_URL)) {
+            aClient.get(this, intent.getStringExtra(INTENT_URL), new AsyncHttpResponseHandler() {
+                @Override
+                public void onStart() {
+                    sendBroadcast(new Intent(IntentServiceSample.ACTION_START));
+                    Log.d(LOG_TAG, "onStart");
+                }
+
+                @Override
+                public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
+                    Intent broadcast = new Intent(IntentServiceSample.ACTION_SUCCESS);
+                    broadcast.putExtra(INTENT_STATUS_CODE, statusCode);
+                    broadcast.putExtra(INTENT_HEADERS, IntentUtil.serializeHeaders(headers));
+                    broadcast.putExtra(INTENT_DATA, responseBody);
+                    sendBroadcast(broadcast);
+                    Log.d(LOG_TAG, "onSuccess");
+                }
+
+                @Override
+                public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
+                    Intent broadcast = new Intent(IntentServiceSample.ACTION_FAILURE);
+                    broadcast.putExtra(INTENT_STATUS_CODE, statusCode);
+                    broadcast.putExtra(INTENT_HEADERS, IntentUtil.serializeHeaders(headers));
+                    broadcast.putExtra(INTENT_DATA, responseBody);
+                    broadcast.putExtra(INTENT_THROWABLE, error);
+                    sendBroadcast(broadcast);
+                    Log.d(LOG_TAG, "onFailure");
+                }
+
+                @Override
+                public void onCancel() {
+                    sendBroadcast(new Intent(IntentServiceSample.ACTION_CANCEL));
+                    Log.d(LOG_TAG, "onCancel");
+                }
+
+                @Override
+                public void onRetry(int retryNo) {
+                    sendBroadcast(new Intent(IntentServiceSample.ACTION_RETRY));
+                    Log.d(LOG_TAG, String.format("onRetry: %d", retryNo));
+                }
+
+                @Override
+                public void onFinish() {
+                    sendBroadcast(new Intent(IntentServiceSample.ACTION_FINISH));
+                    Log.d(LOG_TAG, "onFinish");
+                }
+            });
+        }
+    }
+}
diff --git a/sample/src/main/java/com/loopj/android/http/sample/services/package-info.java b/sample/src/main/java/com/loopj/android/http/sample/services/package-info.java
new file mode 100644
index 00000000..df4ac428
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/services/package-info.java
@@ -0,0 +1,19 @@
+/*
+    Android Asynchronous Http Client
+    Copyright (c) 2014 Marek Sebera <marek.sebera@gmail.com>
+    http://loopj.com
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+*/
+
+package com.loopj.android.http.sample.services;
\ No newline at end of file
diff --git a/sample/src/main/java/com/loopj/android/http/sample/util/IntentUtil.java b/sample/src/main/java/com/loopj/android/http/sample/util/IntentUtil.java
new file mode 100644
index 00000000..a0ccb54b
--- /dev/null
+++ b/sample/src/main/java/com/loopj/android/http/sample/util/IntentUtil.java
@@ -0,0 +1,32 @@
+package com.loopj.android.http.sample.util;
+
+import org.apache.http.Header;
+import org.apache.http.message.BasicHeader;
+
+public class IntentUtil {
+
+    public static String[] serializeHeaders(Header[] headers) {
+        if (headers == null) {
+            return new String[0];
+        }
+        String[] rtn = new String[headers.length * 2];
+        int index = -1;
+        for (Header h : headers) {
+            rtn[++index] = h.getName();
+            rtn[++index] = h.getValue();
+        }
+        return rtn;
+    }
+
+    public static Header[] deserializeHeaders(String[] serialized) {
+        if (serialized == null || serialized.length % 2 != 0) {
+            return new Header[0];
+        }
+        Header[] headers = new Header[serialized.length / 2];
+        for (int i = 0, h = 0; h < headers.length; i++, h++) {
+            headers[h] = new BasicHeader(serialized[i], serialized[++i]);
+        }
+        return headers;
+    }
+
+}
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
index f71393e5..48c71f14 100755
--- a/sample/src/main/res/values/strings.xml
+++ b/sample/src/main/res/values/strings.xml
@@ -1,7 +1,13 @@
 <?xml version="1.0" encoding="utf-8"?>
-<resources>
 
+<resources>
     <string name="app_name">Android Async Http Samples</string>
+
+    <string name="button_run">Run</string>
+    <string name="label_headers">Headers (key=val, one per line)</string>
+    <string name="label_req_body">Request body</string>
+    <string name="button_cancel">Cancel</string>
+
     <string name="title_get_sample">GET</string>
     <string name="title_json_sample">GET JSON and parse it</string>
     <string name="title_post_sample">POST</string>
@@ -15,9 +21,7 @@
     <string name="title_synchronous">Synchronous GET request</string>
     <string name="title_threading_timeout">Threading timeouts</string>
     <string name="title_gzip_sample">GET Gzipped JSON and parse it</string>
-    <string name="button_run">Run</string>
-    <string name="label_headers">Headers (key=val, one per line)</string>
-    <string name="label_req_body">Request body</string>
-    <string name="button_cancel">Cancel</string>
+    <string name="title_intent_service_sample">IntentService Synchronised Request</string>
+    <string name="title_post_files">Post Multipart-encoded files</string>
     <string name="title_redirect_302">302 Redirect handling</string>
 </resources>
