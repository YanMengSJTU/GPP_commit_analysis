diff --git a/.travis.yml b/.travis.yml
index c2243e4d..201b1af9 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -28,7 +28,7 @@ before_install:
   - echo "sdk.dir=$ANDROID_HOME" > local.properties
   # list packages for debug purpose
   - android list sdk -a -e -u
-  - echo yes | android update sdk -t tools,platform-tools,extra-android-support,extra-android-m2repository,android-19,build-tools-19.0.3 --force --no-ui
+  - echo yes | android update sdk -t 1,2,3,tools,platform-tools,extra-android-support,extra-android-m2repository,android-19,build-tools-19.1.0 --force --no-ui
   # Sonatype bypass
   - echo "nexusUsername=dummy" >> library/gradle.properties
   - echo "nexusPassword=dummy" >> library/gradle.properties
diff --git a/library/build.gradle b/library/build.gradle
index 3fc50c7e..b6c39ab0 100755
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -4,7 +4,7 @@ apply plugin: 'android-library'
 
 android {
     compileSdkVersion 19
-    buildToolsVersion '19.0.3'
+    buildToolsVersion '19.1'
 
     defaultConfig {
         minSdkVersion 3
diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
index 9bfd473a..37ebc860 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpClient.java
@@ -359,7 +359,7 @@ protected ExecutorService getDefaultThreadPool() {
     /**
      * Simple interface method, to enable or disable redirects. If you set manually RedirectHandler
      * on underlying HttpClient, effects of this method will be canceled.
-     * <p/>
+     * <p>&nbsp;</p>
      * Default setting is to disallow redirects.
      *
      * @param enableRedirects         boolean
@@ -1029,6 +1029,22 @@ public RequestHandle delete(Context context, String url, Header[] headers, Reque
 
     // [-] HTTP DELETE
 
+    /**
+     * Instantiate a new asynchronous HTTP request for the passed parameters.
+     *
+     * @param client          HttpClient to be used for request, can differ in single requests
+     * @param contentType     MIME body type, for POST and PUT requests, may be null
+     * @param context         Context of Android application, to hold the reference of request
+     * @param httpContext     HttpContext in which the request will be executed
+     * @param responseHandler ResponseHandler or its subclass to put the response into
+     * @param uriRequest      instance of HttpUriRequest, which means it must be of HttpDelete,
+     *                        HttpPost, HttpGet, HttpPut, etc.
+     * @return AsyncHttpRequest ready to be dispatched
+     */
+    protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, ResponseHandlerInterface responseHandler, Context context) {
+        return new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler);
+    }
+
     /**
      * Puts a new request in queue as a new thread in pool to be executed
      *
@@ -1061,7 +1077,7 @@ protected RequestHandle sendRequest(DefaultHttpClient client, HttpContext httpCo
         responseHandler.setRequestHeaders(uriRequest.getAllHeaders());
         responseHandler.setRequestURI(uriRequest.getURI());
 
-        AsyncHttpRequest request = new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler);
+        AsyncHttpRequest request = newAsyncHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context);
         threadPool.submit(request);
         RequestHandle requestHandle = new RequestHandle(request);
 
diff --git a/library/src/main/java/com/loopj/android/http/Base64.java b/library/src/main/java/com/loopj/android/http/Base64.java
index 0fae7e9a..8da2be16 100755
--- a/library/src/main/java/com/loopj/android/http/Base64.java
+++ b/library/src/main/java/com/loopj/android/http/Base64.java
@@ -90,7 +90,7 @@
 
     /**
      * Decode the Base64-encoded data in input and return the data in a new byte array.
-     * <p/>
+     * <p>&nbsp;</p>
      * <p>The padding '=' characters at the end are considered optional, but if any are present,
      * there must be the correct number of them.
      *
@@ -99,6 +99,7 @@
      * @param flags controls certain features of the decoded output. Pass {@code DEFAULT} to decode
      *              standard Base64.
      * @throws IllegalArgumentException if the input contains incorrect padding
+     * @return decoded bytes
      */
     public static byte[] decode(String str, int flags) {
         return decode(str.getBytes(), flags);
@@ -106,7 +107,7 @@
 
     /**
      * Decode the Base64-encoded data in input and return the data in a new byte array.
-     * <p/>
+     * <p>&nbsp;</p>
      * <p>The padding '=' characters at the end are considered optional, but if any are present,
      * there must be the correct number of them.
      *
@@ -114,6 +115,7 @@
      * @param flags controls certain features of the decoded output. Pass {@code DEFAULT} to decode
      *              standard Base64.
      * @throws IllegalArgumentException if the input contains incorrect padding
+     * @return decoded bytes
      */
     public static byte[] decode(byte[] input, int flags) {
         return decode(input, 0, input.length, flags);
@@ -121,7 +123,7 @@
 
     /**
      * Decode the Base64-encoded data in input and return the data in a new byte array.
-     * <p/>
+     * <p>&nbsp;</p>
      * <p>The padding '=' characters at the end are considered optional, but if any are present,
      * there must be the correct number of them.
      *
@@ -131,6 +133,7 @@
      * @param flags  controls certain features of the decoded output. Pass {@code DEFAULT} to decode
      *               standard Base64.
      * @throws IllegalArgumentException if the input contains incorrect padding
+     * @return decoded bytes for given offset and length
      */
     public static byte[] decode(byte[] input, int offset, int len, int flags) {
         // Allocate space for the most data the input could represent.
@@ -425,6 +428,7 @@ public boolean process(byte[] input, int offset, int len, boolean finish) {
      * @param input the data to encode
      * @param flags controls certain features of the encoded output. Passing {@code DEFAULT} results
      *              in output that adheres to RFC 2045.
+     * @return base64 string containing encoded input
      */
     public static String encodeToString(byte[] input, int flags) {
         try {
@@ -443,6 +447,7 @@ public static String encodeToString(byte[] input, int flags) {
      * @param len    the number of bytes of input to encode
      * @param flags  controls certain features of the encoded output. Passing {@code DEFAULT}
      *               results in output that adheres to RFC 2045.
+     * @return base64 string containing encoded range of input
      */
     public static String encodeToString(byte[] input, int offset, int len, int flags) {
         try {
@@ -459,6 +464,7 @@ public static String encodeToString(byte[] input, int offset, int len, int flags
      * @param input the data to encode
      * @param flags controls certain features of the encoded output. Passing {@code DEFAULT} results
      *              in output that adheres to RFC 2045.
+     * @return base64 encoded input as bytes
      */
     public static byte[] encode(byte[] input, int flags) {
         return encode(input, 0, input.length, flags);
@@ -472,6 +478,7 @@ public static String encodeToString(byte[] input, int offset, int len, int flags
      * @param len    the number of bytes of input to encode
      * @param flags  controls certain features of the encoded output. Passing {@code DEFAULT}
      *               results in output that adheres to RFC 2045.
+     * @return base64 encoded input as bytes
      */
     public static byte[] encode(byte[] input, int offset, int len, int flags) {
         Encoder encoder = new Encoder(flags, null);
diff --git a/library/src/main/java/com/loopj/android/http/BaseJsonHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/BaseJsonHttpResponseHandler.java
index bc5deabd..f643bf3f 100755
--- a/library/src/main/java/com/loopj/android/http/BaseJsonHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/BaseJsonHttpResponseHandler.java
@@ -29,7 +29,7 @@
  * class, response will be then handled to implementation of abstract methods {@link #onSuccess(int,
  * org.apache.http.Header[], String, Object)} or {@link #onFailure(int, org.apache.http.Header[],
  * Throwable, String, Object)}, depending of response HTTP status line (result http code)
- * @param <JSON_TYPE>
+ * @param <JSON_TYPE> Generic type meant to be returned in callback
  */
 public abstract class BaseJsonHttpResponseHandler<JSON_TYPE> extends TextHttpResponseHandler {
     private static final String LOG_TAG = "BaseJsonHttpResponseHandler";
diff --git a/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java b/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
index 4c4df9ce..2753801a 100755
--- a/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
+++ b/library/src/main/java/com/loopj/android/http/MySSLSocketFactory.java
@@ -44,6 +44,10 @@
      * Creates a new SSL Socket Factory with the given KeyStore.
      *
      * @param truststore A KeyStore to create the SSL Socket Factory in context of
+     * @throws NoSuchAlgorithmException NoSuchAlgorithmException
+     * @throws KeyManagementException KeyManagementException
+     * @throws KeyStoreException KeyStoreException
+     * @throws UnrecoverableKeyException UnrecoverableKeyException
      */
     public MySSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {
         super(truststore);
diff --git a/library/src/main/java/com/loopj/android/http/RequestParams.java b/library/src/main/java/com/loopj/android/http/RequestParams.java
index a6fdab8d..8a1cb5ce 100755
--- a/library/src/main/java/com/loopj/android/http/RequestParams.java
+++ b/library/src/main/java/com/loopj/android/http/RequestParams.java
@@ -64,7 +64,7 @@
  * params.put("like", set); // url params: "like=music&amp;like=art"
  *
  * List&lt;String&gt; list = new ArrayList&lt;String&gt;(); // Ordered collection
- * list.add("Java");<>
+ * list.add("Java");
  * list.add("C");
  * params.put("languages", list); // url params: "languages[]=Java&amp;languages[]=C"
  *
@@ -326,6 +326,19 @@ public void remove(String key) {
         urlParamsWithObjects.remove(key);
     }
 
+    /**
+     * Check if a parameter is defined.
+     *
+     * @param key the key name for the parameter to check existence.
+     * @return Boolean
+     */
+    public boolean has(String key) {
+        return urlParams.get(key) != null ||
+        streamParams.get(key) != null ||
+        fileParams.get(key) != null ||
+        urlParamsWithObjects.get(key) != null;
+    }
+
     @Override
     public String toString() {
         StringBuilder result = new StringBuilder();
diff --git a/library/src/main/java/com/loopj/android/http/SyncHttpClient.java b/library/src/main/java/com/loopj/android/http/SyncHttpClient.java
index ac5ca66d..dd57d5a5 100755
--- a/library/src/main/java/com/loopj/android/http/SyncHttpClient.java
+++ b/library/src/main/java/com/loopj/android/http/SyncHttpClient.java
@@ -75,7 +75,7 @@ protected RequestHandle sendRequest(DefaultHttpClient client,
 		/*
          * will execute the request directly
 		*/
-        new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler).run();
+        newAsyncHttpRequest(client, httpContext, uriRequest, contentType, responseHandler, context).run();
 
         // Return a Request Handle that cannot be used to cancel the request
         // because it is already complete by the time this returns
diff --git a/sample/build.gradle b/sample/build.gradle
index b4fdad60..505653ff 100755
--- a/sample/build.gradle
+++ b/sample/build.gradle
@@ -17,7 +17,7 @@ repositories {
 
 android {
     compileSdkVersion 19
-    buildToolsVersion '19.0.3'
+    buildToolsVersion '19.1'
 
     defaultConfig {
         minSdkVersion 3
