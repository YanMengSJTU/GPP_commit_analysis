diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index fbaafd21..2921e682 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -60,15 +60,13 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
 import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpParams;
 import org.apache.http.params.HttpConnectionParams;
+import org.apache.http.params.HttpParams;
 import org.apache.http.params.HttpProtocolParams;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.SyncBasicHttpContext;
 
-import android.content.Context;
-
 
 /**
  * The AsyncHttpClient can be used to make asynchronous GET, POST, PUT and 
@@ -105,7 +103,7 @@
     private final DefaultHttpClient httpClient;
     private final HttpContext httpContext;
     private ThreadPoolExecutor threadPool;
-    private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
+    private final Map<Object, List<WeakReference<Future<?>>>> requestMap;
     private final Map<String, String> clientHeaderMap;
 
 
@@ -167,7 +165,7 @@ public void process(HttpResponse response, HttpContext context) {
 
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();
 
-        requestMap = new WeakHashMap<Context, List<WeakReference<Future<?>>>>();
+        requestMap = new WeakHashMap<Object, List<WeakReference<Future<?>>>>();
         clientHeaderMap = new HashMap<String, String>();
     }
 
@@ -193,8 +191,9 @@ public HttpContext getHttpContext() {
      * Sets an optional CookieStore to use when making requests
      * @param cookieStore The CookieStore implementation to use, usually an instance of {@link PersistentCookieStore}
      */
-    public void setCookieStore(CookieStore cookieStore) {
+    public AsyncHttpClient setCookieStore(CookieStore cookieStore) {
         httpContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
+        return this;
     }
 
     /**
@@ -202,8 +201,9 @@ public void setCookieStore(CookieStore cookieStore) {
      * requests. By default, Executors.newCachedThreadPool() is used.
      * @param threadPool an instance of {@link ThreadPoolExecutor} to use for queuing/pooling requests.
      */
-    public void setThreadPool(ThreadPoolExecutor threadPool) {
+    public AsyncHttpClient setThreadPool(ThreadPoolExecutor threadPool) {
         this.threadPool = threadPool;
+        return this;
     }
 
     /**
@@ -211,19 +211,21 @@ public void setThreadPool(ThreadPoolExecutor threadPool) {
      * "Android Asynchronous Http Client/VERSION (http://loopj.com/android-async-http/)" is used.
      * @param userAgent the string to use in the User-Agent header.
      */
-    public void setUserAgent(String userAgent) {
+    public AsyncHttpClient setUserAgent(String userAgent) {
         HttpProtocolParams.setUserAgent(this.httpClient.getParams(), userAgent);
+        return this;
     }
 
     /**
      * Sets the connection time oout. By default, 10 seconds
      * @param timeout the connect/socket timeout in milliseconds
      */
-    public void setTimeout(int timeout){
+    public AsyncHttpClient setTimeout(int timeout){
         final HttpParams httpParams = this.httpClient.getParams();
         ConnManagerParams.setTimeout(httpParams, timeout);
         HttpConnectionParams.setSoTimeout(httpParams, timeout);
         HttpConnectionParams.setConnectionTimeout(httpParams, timeout);
+        return this;
     }
 
     /**
@@ -231,8 +233,9 @@ public void setTimeout(int timeout){
      * a new, default SSLSocketFactory is used.
      * @param sslSocketFactory the socket factory to use for https requests.
      */
-    public void setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
+    public AsyncHttpClient setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
         this.httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme("https", sslSocketFactory, 443));
+        return this;
     }
     
     /**
@@ -240,8 +243,9 @@ public void setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
      * @param header the name of the header
      * @param value the contents of the header
      */
-    public void addHeader(String header, String value) {
+    public AsyncHttpClient addHeader(String header, String value) {
         clientHeaderMap.put(header, value);
+        return this;
     }
 
     /**
@@ -250,9 +254,10 @@ public void addHeader(String header, String value) {
      * @param username
      * @param password
      */
-    public void setBasicAuth(String user, String pass){
+    public AsyncHttpClient setBasicAuth(String user, String pass){
         AuthScope scope = AuthScope.ANY;
         setBasicAuth(user, pass, scope);
+        return this;
     }
     
    /**
@@ -263,25 +268,26 @@ public void setBasicAuth(String user, String pass){
      * @param scope - an AuthScope object
      *
      */
-    public void setBasicAuth( String user, String pass, AuthScope scope){
+    public AsyncHttpClient setBasicAuth( String user, String pass, AuthScope scope){
         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(user,pass);
         this.httpClient.getCredentialsProvider().setCredentials(scope, credentials);
+        return this;
     }
 
     /**
      * Cancels any pending (or potentially active) requests associated with the
-     * passed Context.
+     * passed cancelKey.
      * <p>
      * <b>Note:</b> This will only affect requests which were created with a non-null
-     * android Context. This method is intended to be used in the onDestroy
+     * cancelKey. This method is intended to be used in the onDestroy
      * method of your android activities to destroy all requests which are no
      * longer required.
      *
-     * @param context the android Context instance associated to the request.
+     * @param cancelKey the Object (for instance an android Context instance) associated to the request.
      * @param mayInterruptIfRunning specifies if active requests should be cancelled along with pending requests.
      */
-    public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
-        List<WeakReference<Future<?>>> requestList = requestMap.get(context);
+    public void cancelRequests(Object cancelKey, boolean mayInterruptIfRunning) {
+        List<WeakReference<Future<?>>> requestList = requestMap.get(cancelKey);
         if(requestList != null) {
             for(WeakReference<Future<?>> requestRef : requestList) {
                 Future<?> request = requestRef.get();
@@ -290,69 +296,139 @@ public void cancelRequests(Context context, boolean mayInterruptIfRunning) {
                 }
             }
         }
-        requestMap.remove(context);
+        requestMap.remove(cancelKey);
+    }
+
+
+    /**
+     * Create, setup and execute a HTTP Transaction using method chaining to set up the call.
+     * This class should be used in place of the various get(), post(), put() and delete() calls.<br>
+     * <br>
+     * For Instance, <code>get(url, params, responseHandler)</code><br>
+     * can be replaced with <code> new Transaction().setParams(params).get(url,responseHandler)</code><br>
+     * As new parameters are added to the request system, it becomes more and more difficult
+     * to support the various permutations of possible parameters to get() calls. This
+     * class fixes that.
+     */
+    class Transaction {
+    	private RequestParams params = null;
+    	public Transaction setParams(RequestParams params){this.params=params;return this;}
+
+    	private Object cancelKey = null;
+    	public Transaction setCancelKey(Object cancelKey){this.cancelKey=cancelKey;return this;}
+    	
+    	private Header[] headers = null;
+    	public Transaction setHeaders(Header[] headers){this.headers=headers;return this;}
+    	
+    	HttpEntity entity = null;
+    	public Transaction setEntity(HttpEntity entity){this.entity=entity;return this;}
+
+    	private String contentType = null;
+    	public Transaction setContentType(String contentType){this.contentType=contentType;return this;}
+    	
+    	public Transaction get(String url, AsyncHttpResponseHandler responseHandler){
+    		if (entity!=null) throw new IllegalArgumentException("Cannot setEntity for a get");
+    		HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
+            if(headers != null) request.setHeaders(headers);
+            sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+    		return this;
+    	}
+    	public Transaction post(String url, AsyncHttpResponseHandler responseHandler){
+    		if (entity!=null && params!=null) throw new IllegalArgumentException("On post can't do both setEntity and setParams");
+            HttpEntityEnclosingRequestBase request = new HttpPost(url);
+            if(entity != null) request = addEntityToRequestBase(request, entity);
+            if(params != null) request.setEntity(paramsToEntity(params));
+            if(headers != null) request.setHeaders(headers);
+            sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+    		return this;
+    	}
+    	public Transaction put(String url, AsyncHttpResponseHandler responseHandler){
+    		if (entity!=null && params!=null) throw new IllegalArgumentException("On put can't do both setEntity and setParams");
+    		if (params!=null) entity = paramsToEntity(params);
+            HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
+            if(headers != null) request.setHeaders(headers);
+            sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+    		return this;
+    	}
+    	public Transaction delete(String url, AsyncHttpResponseHandler responseHandler){
+    		if (entity!=null) throw new IllegalArgumentException("Cannot setEntity for a delete");
+    		if (params!=null) throw new IllegalArgumentException("Cannot setParams for a delete");
+            final HttpDelete request = new HttpDelete(url);
+            if(headers != null) request.setHeaders(headers);
+            sendRequest(httpClient, httpContext, request, null, responseHandler, cancelKey);
+    		return this;
+    	}
     }
 
-
     //
     // HTTP GET Requests
     //
-
+    
     /**
+     * @deprecated
      * Perform a HTTP GET request, without any parameters.
      * @param url the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(String url, AsyncHttpResponseHandler responseHandler) {
-        get(null, url, null, responseHandler);
+//        get(null, url, null, responseHandler);
+    	new Transaction().get(url, responseHandler);
+    	
     }
 
     /**
+     * @deprecated
      * Perform a HTTP GET request with parameters.
      * @param url the URL to send the request to.
      * @param params additional GET parameters to send with the request.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        get(null, url, params, responseHandler);
+//        get(null, url, params, responseHandler);
+        new Transaction().setParams(params).get(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP GET request without any parameters and track the Android Context which initiated the request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP GET request without any parameters and track the cancelKey which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void get(Context context, String url, AsyncHttpResponseHandler responseHandler) {
-        get(context, url, null, responseHandler);
+    public void get(Object cancelKey, String url, AsyncHttpResponseHandler responseHandler) {
+//        get(cancelKey, url, null, responseHandler);
+        new Transaction().setCancelKey(cancelKey).get(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP GET request and track the Android Context which initiated the request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP GET request and track the cancelKey Object which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param params additional GET parameters to send with the request.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void get(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context);
+    public void get(Object cancelKey, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+//        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, cancelKey);
+    	new Transaction().setCancelKey(cancelKey).setParams(params).get(url, responseHandler);
     }
     
     /**
-     * Perform a HTTP GET request and track the Android Context which initiated
-     * the request with customized headers
-     * 
+     * @deprecated
+     * Perform a HTTP GET request and track the cancelKey Object which initiated the request
+     * with customized headers
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set headers only for this request
      * @param params additional GET parameters to send with the request.
      * @param responseHandler the response handler instance that should handle
      *        the response.
      */
-    public void get(Context context, String url, Header[] headers, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
-        if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, null, responseHandler,
-                context);
+    public void get(Object cancelKey, String url, Header[] headers, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+//        HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
+//        if(headers != null) request.setHeaders(headers);
+//        sendRequest(httpClient, httpContext, request, null, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setHeaders(headers).setParams(params).get(url, responseHandler);
     }
 
 
@@ -361,25 +437,30 @@ public void get(Context context, String url, Header[] headers, RequestParams par
     //
 
     /**
+     * @deprecated
      * Perform a HTTP POST request, without any parameters.
      * @param url the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(String url, AsyncHttpResponseHandler responseHandler) {
-        post(null, url, null, responseHandler);
+//        post(null, url, null, responseHandler);
+        new Transaction().post(url, responseHandler);
     }
 
     /**
+     * @deprecated
      * Perform a HTTP POST request with parameters.
      * @param url the URL to send the request to.
      * @param params additional POST parameters or files to send with the request.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        post(null, url, params, responseHandler);
+//        post(null, url, params, responseHandler);
+        new Transaction().setParams(params).post(url, responseHandler);
     }
 
     /**
+     * @deprecated
      * Perform a HTTP POST request with parameters.
      * And set one-time headers and content-type for the request
      * @param url the URL to send the request to.
@@ -388,37 +469,43 @@ public void post(String url, RequestParams params, AsyncHttpResponseHandler resp
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        post(null, url, entity, contentType, responseHandler);
+//        post(null, url, entity, contentType, responseHandler);
+        new Transaction().setEntity(entity).setContentType(contentType).post(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP POST request and track the Android Context which initiated the request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP POST request and track the cancelKey which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param params additional POST parameters or files to send with the request.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void post(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        post(context, url, paramsToEntity(params), null, responseHandler);
+    public void post(Object cancelKey, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+//        post(cancelKey, url, paramsToEntity(params), null, responseHandler);
+        new Transaction().setCancelKey(cancelKey).setEntity(paramsToEntity(params)).post(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP POST request and track the Android Context which initiated the request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP POST request and track the cancelKey which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void post(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context);
+    public void post(Object cancelKey, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+//        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setEntity(entity).setContentType(contentType).post(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP POST request and track the Android Context which initiated
+     * @deprecated
+     * Perform a HTTP POST request and track the cancelKey which initiated
      * the request. Set headers only for this request
      * 
-     * @param context the Android Context which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set headers only for this request
      * @param params additional POST parameters to send with the request.
@@ -427,20 +514,20 @@ public void post(Context context, String url, HttpEntity entity, String contentT
      * @param responseHandler the response handler instance that should handle
      *        the response.
      */
-    public void post(Context context, String url, Header[] headers, RequestParams params, String contentType,
-            AsyncHttpResponseHandler responseHandler) {
-        HttpEntityEnclosingRequestBase request = new HttpPost(url);
-        if(params != null) request.setEntity(paramsToEntity(params));
-        if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType,
-                responseHandler, context);
+    public void post(Object cancelKey, String url, Header[] headers, RequestParams params, String contentType, AsyncHttpResponseHandler responseHandler) {
+//        HttpEntityEnclosingRequestBase request = new HttpPost(url);
+//        if(params != null) request.setEntity(paramsToEntity(params));
+//        if(headers != null) request.setHeaders(headers);
+//        sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setHeaders(headers).setParams(params).setContentType(contentType).post(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP POST request and track the Android Context which initiated
+     * @deprecated
+     * Perform a HTTP POST request and track the cancelKey which initiated
      * the request. Set headers only for this request
-     *
-     * @param context the Android Context which initiated the request.
+     * 
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set headers only for this request
      * @param entity a raw {@link HttpEntity} to send with the request, for
@@ -451,11 +538,12 @@ public void post(Context context, String url, Header[] headers, RequestParams pa
      * @param responseHandler the response handler instance that should handle
      *        the response.
      */
-    public void post(Context context, String url, Header[] headers, HttpEntity entity, String contentType,
-            AsyncHttpResponseHandler responseHandler) {
-        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);
-        if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+    public void post(Object cancelKey, String url, Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+//        HttpEntityEnclosingRequestBase request = new HttpPost(url);
+//        request = addEntityToRequestBase(request, entity);
+//        if(headers != null) request.setHeaders(headers);
+//        sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setHeaders(headers).setEntity(entity).setContentType(contentType).post(url, responseHandler);
     }
 
     //
@@ -463,25 +551,30 @@ public void post(Context context, String url, Header[] headers, HttpEntity entit
     //
 
     /**
+     * @deprecated
      * Perform a HTTP PUT request, without any parameters.
      * @param url the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(String url, AsyncHttpResponseHandler responseHandler) {
-        put(null, url, null, responseHandler);
+//        put(null, url, null, responseHandler);
+        new Transaction().put(url, responseHandler);
     }
 
     /**
+     * @deprecated
      * Perform a HTTP PUT request with parameters.
      * @param url the URL to send the request to.
      * @param params additional PUT parameters or files to send with the request.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        put(null, url, params, responseHandler);
+//        put(null, url, params, responseHandler);
+        new Transaction().setParams(params).put(url, responseHandler);
     }
 
     /**
+     * @deprecated
      * Perform a HTTP PUT request with parameters.
      * And set one-time headers and content-type for the request
      * @param url the URL to send the request to.
@@ -490,47 +583,56 @@ public void put(String url, RequestParams params, AsyncHttpResponseHandler respo
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-    	put(null, url, entity, contentType, responseHandler);
+//    	put(null, url, entity, contentType, responseHandler);
+    	new Transaction().setEntity(entity).setContentType(contentType).put(url, responseHandler);
+    	
     }
 
     /**
-     * Perform a HTTP PUT request and track the Android Context which initiated the request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP PUT request and track the cancelKey Object which initiated the request
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param params additional PUT parameters or files to send with the request.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void put(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        put(context, url, paramsToEntity(params), null, responseHandler);
+    public void put(Object cancelKey, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
+//      put(cancelKey, url, paramsToEntity(params), null, responseHandler);
+        new Transaction().setCancelKey(cancelKey).setParams(params).put(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP PUT request and track the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP PUT request and track the cancelKey Object which initiated the request
      * And set one-time headers for the request
-     * @param context the Android Context which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void put(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
+    public void put(Object cancelKey, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+//        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
+//        sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setEntity(entity).setContentType(contentType).put(url, responseHandler);
     }
     
     /**
-     * Perform a HTTP PUT request and track the Android Context which initiated the request.
+     * @deprecated
+     * Perform a HTTP PUT request and track the cancelKey Object which initiated the request
      * And set one-time headers for the request
-     * @param context the Android Context which initiated the request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set one-time headers for this request
      * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void put(Context context, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
-        if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+    public void put(Object cancelKey, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
+//        HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
+//        if(headers != null) request.setHeaders(headers);
+//        sendRequest(httpClient, httpContext, request, contentType, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setHeaders(headers).setEntity(entity).setContentType(contentType).put(url, responseHandler);
     }
 
     //
@@ -538,53 +640,59 @@ public void put(Context context, String url,Header[] headers, HttpEntity entity,
     //
 
     /**
+     * @deprecated
      * Perform a HTTP DELETE request.
      * @param url the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void delete(String url, AsyncHttpResponseHandler responseHandler) {
-        delete(null, url, responseHandler);
+//        delete(null, url, responseHandler);
+        new Transaction().delete(url, responseHandler);
     }
 
     /**
-     * Perform a HTTP DELETE request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a cancelable HTTP DELETE request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void delete(Context context, String url, AsyncHttpResponseHandler responseHandler) {
-        final HttpDelete delete = new HttpDelete(url);
-        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+    public void delete(Object cancelKey, String url, AsyncHttpResponseHandler responseHandler) {
+//        final HttpDelete delete = new HttpDelete(url);
+//        sendRequest(httpClient, httpContext, delete, null, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).delete(url, responseHandler);
     }
     
     /**
-     * Perform a HTTP DELETE request.
-     * @param context the Android Context which initiated the request.
+     * @deprecated
+     * Perform a cancelable HTTP DELETE request.
+     * @param cancelKey the Object (for instance, an Android Context) which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set one-time headers for this request
      * @param responseHandler the response handler instance that should handle the response.
      */
-    public void delete(Context context, String url, Header[] headers, AsyncHttpResponseHandler responseHandler) {
-        final HttpDelete delete = new HttpDelete(url);
-        if(headers != null) delete.setHeaders(headers);
-        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+    public void delete(Object cancelKey, String url, Header[] headers, AsyncHttpResponseHandler responseHandler) {
+//        final HttpDelete delete = new HttpDelete(url);
+//        if(headers != null) delete.setHeaders(headers);
+//        sendRequest(httpClient, httpContext, delete, null, responseHandler, cancelKey);
+        new Transaction().setCancelKey(cancelKey).setHeaders(headers).delete(url, responseHandler);
     }
 
 
     // Private stuff
-    private void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
+    private void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Object cancelKey) {
         if(contentType != null) {
             uriRequest.addHeader("Content-Type", contentType);
         }
 
         Future<?> request = threadPool.submit(new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler));
 
-        if(context != null) {
+        if(cancelKey != null) {
             // Add request to request map
-            List<WeakReference<Future<?>>> requestList = requestMap.get(context);
+            List<WeakReference<Future<?>>> requestList = requestMap.get(cancelKey);
             if(requestList == null) {
                 requestList = new LinkedList<WeakReference<Future<?>>>();
-                requestMap.put(context, requestList);
+                requestMap.put(cancelKey, requestList);
             }
 
             requestList.add(new WeakReference<Future<?>>(request));
