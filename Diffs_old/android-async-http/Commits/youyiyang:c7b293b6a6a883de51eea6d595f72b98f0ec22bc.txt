diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index af956321..746b139d 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -389,7 +389,11 @@ public void post(String url, RequestParams params, AsyncHttpResponseHandler resp
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        post(context, url, null, params, null, responseHandler);
+        try {
+            post(context, url, paramsToEntity(params, responseHandler), null, responseHandler);
+        } catch (IOException e) {
+            responseHandler.onFailure(e, null);
+        }
     }
 
     /**
@@ -422,11 +426,12 @@ public void post(Context context, String url, Header[] headers, RequestParams pa
         HttpEntityEnclosingRequestBase request = new HttpPost(url);
         if (params != null) {
             try {
-                request.setEntity(paramsToEntity(params));
+                request.setEntity(paramsToEntity(params, responseHandler));
             } catch (IOException e) {
                 responseHandler.onFailure(e, null);
             }
         }
+
         if(headers != null) request.setHeaders(headers);
         sendRequest(httpClient, httpContext, request, contentType,
                 responseHandler, context);
@@ -486,7 +491,7 @@ public void put(String url, RequestParams params, AsyncHttpResponseHandler respo
      */
     public void put(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
         try {
-            put(context, url, paramsToEntity(params), null, responseHandler);
+            put(context, url, paramsToEntity(params, responseHandler), null, responseHandler);
         } catch (IOException e) {
             responseHandler.onFailure(e, null);
         }
@@ -594,11 +599,13 @@ public static String getUrlWithQueryString(String url, RequestParams params) {
         return url;
     }
 
-    private HttpEntity paramsToEntity(RequestParams params) throws IOException {
+    private HttpEntity paramsToEntity(RequestParams params, AsyncHttpResponseHandler responseHandler)
+            throws IOException {
+
         HttpEntity entity = null;
 
-        if(params != null) {
-            entity = params.getEntity();
+        if (params != null) {
+            entity = params.getEntity(responseHandler);
         }
 
         return entity;
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 2030265f..4cd1aef9 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,8 +21,8 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+
 import org.apache.http.Header;
-import java.io.IOException;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -30,9 +30,7 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
-import android.os.Looper;
-import android.os.Message;
+import java.io.IOException;
 
 /**
  * Used to intercept and handle the responses from requests made using 
@@ -74,6 +72,7 @@
     protected static final int FAILURE_MESSAGE = 1;
     protected static final int START_MESSAGE = 2;
     protected static final int FINISH_MESSAGE = 3;
+    protected static final int PROGRESS_MESSAGE = 4;
 
     private Handler handler;
 
@@ -151,6 +150,10 @@ public void onFailure(Throwable error, String content) {
         onFailure(error);
     }
 
+    /**
+     * Fired when the request progress, override to handle in your own code
+     */
+    public void onProgress(int position, int length) {}
 
     //
     // Pre-processing of messages (executes in background threadpool thread)
@@ -176,6 +179,9 @@ protected void sendFinishMessage() {
         sendMessage(obtainMessage(FINISH_MESSAGE, null));
     }
 
+    protected void sendProgressMessage(int position, int length) {
+        sendMessage(obtainMessage(PROGRESS_MESSAGE, new Object[]{position, length}));
+    }
 
     //
     // Pre-processing of messages (in original calling thread, typically the UI thread)
@@ -210,6 +216,10 @@ protected void handleMessage(Message msg) {
             case FINISH_MESSAGE:
                 onFinish();
                 break;
+            case PROGRESS_MESSAGE:
+            	response = (Object[])msg.obj;
+            	onProgress(((Integer)response[0]).intValue(), ((Integer)response[1]).intValue());
+            	break;
         }
     }
 
@@ -224,7 +234,7 @@ protected void sendMessage(Message msg) {
     protected Message obtainMessage(int responseMessage, Object response) {
         Message msg = null;
         if(handler != null){
-            msg = this.handler.obtainMessage(responseMessage, response);
+            msg = handler.obtainMessage(responseMessage, response);
         }else{
             msg = Message.obtain();
             msg.what = responseMessage;
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index 6a48f0a9..ac86bc3c 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -250,14 +250,15 @@ public String toString() {
 
     /**
      * Returns an HttpEntity containing all request parameters
+<<<<<<< HEAD
      * 
      * @throws IOException if one of the streams cannot be read
      */
-    public HttpEntity getEntity() throws IOException {
+    public HttpEntity getEntity(AsyncHttpResponseHandler progressHandler) throws IOException {
         if (streamParams.isEmpty() && fileParams.isEmpty()) {
             return createFormEntity();
         } else {
-            return createMultipartEntity();
+            return createMultipartEntity(progressHandler);
         }
     }
 
@@ -269,8 +270,8 @@ private HttpEntity createFormEntity() {
         }
     }
 
-    private HttpEntity createMultipartEntity() throws IOException {
-        SimpleMultipartEntity entity = new SimpleMultipartEntity();
+    private HttpEntity createMultipartEntity(AsyncHttpResponseHandler progressHandler) throws IOException {
+        SimpleMultipartEntity entity = new SimpleMultipartEntity(progressHandler);
 
         // Add string params
         for (ConcurrentHashMap.Entry<String, String> entry : urlParams.entrySet()) {
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index 80686f7b..2773200a 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -63,15 +63,24 @@
     // boundary
     private ByteArrayOutputStream out = new ByteArrayOutputStream();
 
-    public SimpleMultipartEntity() {
+    private AsyncHttpResponseHandler progressHandler;
+
+    private int bytesWritten;
+
+    private int totalSize;
+
+    public SimpleMultipartEntity(AsyncHttpResponseHandler progressHandler) {
         final StringBuffer buf = new StringBuffer();
         final Random rand = new Random();
         for (int i = 0; i < 30; i++) {
             buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);
         }
+
         boundary = buf.toString();
         boundaryLine = ("--" + boundary + "\r\n").getBytes();
         boundaryEnd = ("--" + boundary + "--\r\n").getBytes();
+
+        this.progressHandler = progressHandler;
     }
 
     public void addPart(final String key, final String value) {
@@ -149,6 +158,11 @@ public void addPart(String key, String streamName, InputStream inputStream, Stri
         builder.append("\"\r\n");
         return builder.toString().getBytes();
     }
+
+    private void updateProgress(int count) {
+        bytesWritten += count;
+        progressHandler.sendProgressMessage(bytesWritten, totalSize);
+    }
     
     private class FilePart {
         public File file;
@@ -182,14 +196,17 @@ public long getTotalLength() {
 
         public void writeTo(OutputStream out) throws IOException {
             out.write(header);
-            
+            updateProgress(header.length);
+
             FileInputStream inputStream = new FileInputStream(file);
             final byte[] tmp = new byte[4096];
             int l = 0;
             while ((l = inputStream.read(tmp)) != -1) {
                 out.write(tmp, 0, l);
+                updateProgress(l);
             }
             out.write(CR_LF);
+            updateProgress(CR_LF.length);
             out.flush();
             try {
                 inputStream.close();
@@ -238,11 +255,16 @@ public boolean isStreaming() {
 
     @Override
     public void writeTo(final OutputStream outstream) throws IOException {
+        bytesWritten = 0;
+        totalSize = (int) getContentLength();
         out.writeTo(outstream);
+        updateProgress(out.size());
+
         for (FilePart filePart : fileParts) {
             filePart.writeTo(outstream);
         }
         outstream.write(boundaryEnd);
+        updateProgress(boundaryEnd.length);
     }
 
     @Override
