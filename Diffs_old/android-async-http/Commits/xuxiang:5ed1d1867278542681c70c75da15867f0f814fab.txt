diff --git a/src/com/allthelucky/net/ApplicationUtils.java b/src/com/allthelucky/net/ApplicationUtils.java
index 1e50f9e4..01c62cbb 100644
--- a/src/com/allthelucky/net/ApplicationUtils.java
+++ b/src/com/allthelucky/net/ApplicationUtils.java
@@ -1,6 +1,7 @@
 package com.allthelucky.net;
 
 import java.io.UnsupportedEncodingException;
+import java.security.MessageDigest;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -69,5 +70,56 @@ public static boolean hasNetwork(Context context) {
         }
         return false;
     }
+    
+    /**
+     * 16位MD5
+     */
+    public static String encryptMD5(String strInput) {
+        return encryptMD532(strInput).substring(8, 24);
+    }
+
+    public static String encryptMD532(String strInput) {
+        StringBuffer buf = null;
+        try {
+            MessageDigest md = MessageDigest.getInstance("MD5");
+            md.update(strInput.getBytes("UTF-8"));
+            byte b[] = md.digest();
+            buf = new StringBuffer(b.length * 2);
+            for (int i = 0; i < b.length; i++) {
+                if (((int) b[i] & 0xff) < 0x10) { /* & 0xff转换无符号整型 */
+                    buf.append("0");
+                }
+                buf.append(Long.toHexString((int) b[i] & 0xff)); // 转换16进制,下方法同
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        return buf.toString();
+    }
+
+    /**
+     * 网址汉字编码
+     */
+    public static String urlEncode(String str) {
+        StringBuffer buf = new StringBuffer();
+        byte c;
+        byte[] utfBuf;
+        try {
+            utfBuf = str.getBytes("UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            System.out.println("URLEncode: Failed to get UTF-8 bytes from string.");
+            utfBuf = str.getBytes();
+        }
+        for (int i = 0; i < utfBuf.length; i++) {
+            c = utfBuf[i];
+            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == '.' || c == '-' || c == '*' || c == '_')
+                    || (c == ':' || c == '/' || c == '=' || c == '?' || c == '&' || c == '%')) {
+                buf.append((char) c);
+            } else {
+                buf.append("%").append(Integer.toHexString((0x000000FF & c)));
+            }
+        }
+        return buf.toString();
+    }
 
 }
diff --git a/src/com/allthelucky/net/RequestManager.java b/src/com/allthelucky/net/RequestManager.java
index 8fba26bb..16c65f6a 100644
--- a/src/com/allthelucky/net/RequestManager.java
+++ b/src/com/allthelucky/net/RequestManager.java
@@ -1,5 +1,11 @@
 package com.allthelucky.net;
 
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 
 import org.apache.http.Header;
@@ -10,8 +16,8 @@
 import org.json.JSONObject;
 
 import android.content.Context;
+import android.os.AsyncTask;
 import android.text.TextUtils;
-
 import com.loopj.android.http.AsyncHttpClient;
 import com.loopj.android.http.AsyncHttpResponseHandler;
 import com.loopj.android.http.RequestParams;
@@ -115,7 +121,117 @@ public void post(Context context, String url, Header[] headers, String params, R
     }
 
     public void get(Context context, String url, RequestListener requestListener, int actionId) {
-        asyncHttpClient.get(context, url, new RequeseHttpResponseHandler(requestListener, actionId));
+        get(context, url, requestListener, false, actionId);
+    }
+
+    public void get(Context context, String url, RequestListener requestListener, boolean cache, int actionId) {
+        if (!cache) {
+            asyncHttpClient.get(context, url, new RequeseHttpResponseHandler(requestListener, actionId));
+        } else {
+            if (!hasCache(context, ApplicationUtils.urlEncode(url))) {
+                asyncHttpClient.get(context, url, new RequeseHttpResponseHandler(new CacheRequestListener(context, url,
+                        requestListener), actionId));
+            } else {
+                loadCache(context, ApplicationUtils.urlEncode(url), requestListener, actionId);
+            }
+        }
+    }
+
+    private class CacheRequestListener implements RequestListener {
+
+        private Context context = null;
+        private String url = "";
+        private RequestListener requestListener = null;
+
+        public CacheRequestListener(Context context, String url, RequestListener requestListener) {
+            this.context = context;
+            this.url = url;
+            this.requestListener = requestListener;
+        }
+
+        @Override
+        public void onStart() {
+            if (requestListener != null) {
+                requestListener.onStart();
+            }
+        }
+
+        @Override
+        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
+            if (requestListener != null) {
+                requestListener.onCompleted(data, statusCode, description, actionId);
+            }
+            if (data != null && statusCode != RequestListener.ERR) {
+                saveCache(context, url, data);
+            }
+        }
+    }
+
+    /**
+     * 保存
+     */
+    private void saveCache(Context context, String url, byte[] data) {
+        try {
+            ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
+            FileOutputStream os = context.openFileOutput(ApplicationUtils.encryptMD5(url), Context.MODE_PRIVATE);
+
+            byte[] buffer = new byte[1024];
+            int len = 0;
+            while ((len = inputStream.read(buffer)) > 0) {
+                os.write(buffer, 0, len);
+            }
+
+            os.close();
+            inputStream.close();
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void loadCache(final Context context, final String url, final RequestListener requestListener,
+            final int actionId) {
+        requestListener.onStart();
+        new AsyncTask<Void, Void, byte[]>() {
+            @Override
+            protected byte[] doInBackground(Void... params) {
+                try {
+                    InputStream is = context.openFileInput(ApplicationUtils.encryptMD5(url));
+                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                    byte[] bytes = new byte[4096];
+                    int len = 0;
+                    while ((len = is.read(bytes)) > 0) {
+                        bos.write(bytes, 0, len);
+                    }
+                    bos.flush();
+                    return bos.toByteArray();
+
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    return null;
+                }
+            }
+
+            protected void onPostExecute(byte[] result) {
+                boolean flag = (result != null);
+                requestListener.onCompleted(result, (flag ? RequestListener.OK : RequestListener.ERR),
+                        flag ? "load cache ok" : "load cache error", actionId);
+            }
+        }.execute();
+    }
+
+    /**
+     * 检测缓存
+     */
+    private boolean hasCache(Context context, String url) {
+        try {
+            context.openFileInput(ApplicationUtils.encryptMD5(url));
+            return true;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
+        }
     }
 
     /**
diff --git a/src/com/allthelucky/net/sample/TestActivity.java b/src/com/allthelucky/net/sample/TestActivity.java
index e4a37626..96e135c1 100644
--- a/src/com/allthelucky/net/sample/TestActivity.java
+++ b/src/com/allthelucky/net/sample/TestActivity.java
@@ -9,6 +9,7 @@
 import com.loopj.android.http.RequestParams;
 
 import android.os.Bundle;
+import android.speech.tts.TextToSpeech;
 
 /**
  * 网络请求测试
@@ -23,12 +24,16 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         this.requestManager = RequestManager.getInstance();
+        testGetCache();
         testHttpsRequest();
         testParamsListRequest();
         testJSONObjectRequest();
         testXMLRequest();
+        TextToSpeech tts = new TextToSpeech(this, null);  ;  
+        tts.speak("测试一下", TextToSpeech.QUEUE_FLUSH, null);  
     }
 
+
     @Override
     public void onBackPressed() {
         if (this.requestManager != null) {// 取消请求
@@ -51,7 +56,12 @@ public void onCompleted(byte[] data, int statusCode, String description, int act
             }
         }
     };
-
+    
+    private void testGetCache() {
+        final String url = "http://www.baidu.com/img/shouye_b5486898c692066bd2cbaeda86d74448.gif";
+        requestManager.get(TestActivity.this, url , requestListener, true, -2); 
+    }
+    
     private void testHttpsRequest() {
         final String url = "https://github.com";
         requestManager.get(TestActivity.this, url , requestListener, -1);
