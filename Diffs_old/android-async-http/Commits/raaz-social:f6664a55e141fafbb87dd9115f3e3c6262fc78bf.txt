diff --git a/.classpath b/.classpath
index 6960f98b..96656443 100644
--- a/.classpath
+++ b/.classpath
@@ -2,10 +2,10 @@
 <classpath>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="lib" path="libs/httpclientandroidlib-1.1.1.jar" sourcepath="/home/adam/dev/surespot/libs/android/google/httpclientandroidlib/script"/>
 	<classpathentry kind="lib" path="libs/disklrucache-1.3.2-SNAPSHOT.jar" sourcepath="/home/adam/dev/surespot/libs/android/github/2fours/DiskLruCache/src/main"/>
 	<classpathentry kind="lib" path="libs/acra-4.4.0.jar"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 1366e066..5c3deae7 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -147,7 +147,7 @@ public AsyncHttpClient(Context context) throws IOException {
         
         
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        DefaultHttpClient defaultClient = new DefaultHttpClient(cm, httpParams);
+        DefaultHttpClient defaultClient = new DefaultHttpClient(cm, httpParams);        
         cachingHttpClient = SurespotCachingHttpClient.createSurespotDiskCachingHttpClient(context, defaultClient);
         
         cachingHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 947afea0..14e37ef9 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -137,6 +137,7 @@ private void makeRequestWithRetries() throws ConnectException {
                 }
                 return;
             } catch (IOException e) {
+            	Log.w(TAG,"makeRequestWithRetries",e);
                 cause = e;
                 retry = retryHandler.retryRequest(cause, ++executionCount, context);
             } catch (NullPointerException e) {
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 04671e39..7d035623 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -102,7 +102,7 @@ else if (!sent) {
 		}
 
 		if (retry) {
-			Log.v(TAG, "retryRequest, executionCount: " + executionCount);
+			Log.w(TAG, "retryRequest, executionCount: " + executionCount, exception);
 			int timerInterval = (int) (Math.pow(2, executionCount) * 1000);
 			Log.v(TAG, "retryRequest, setting retry interval to: " + timerInterval);
 			SystemClock.sleep(timerInterval);
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
index cd5d88db..4e698614 100644
--- a/src/com/twofours/surespot/SurespotCachingHttpClient.java
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -6,8 +6,14 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.OutputStream;
+import java.security.KeyManagementException;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
@@ -22,6 +28,8 @@
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheStorage;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateCallback;
 import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateException;
+import ch.boye.httpclientandroidlib.conn.scheme.Scheme;
+import ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;
 import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
 import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
 import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
@@ -52,6 +60,26 @@ public SurespotCachingHttpClient(Context context, CachingHttpClient diskCacheCli
 
 	}
 
+	public static TrustManager[] getTrustingManager() {
+		TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
+			@Override
+			public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+				return null;
+			}
+
+			@Override
+			public void checkClientTrusted(X509Certificate[] certs, String authType) {
+				// Do nothing
+			}
+
+			@Override
+			public void checkServerTrusted(X509Certificate[] certs, String authType) {
+				// Do nothing
+			}
+
+		} };
+		return trustAllCerts;
+	}
 	/**
 	 * Use disk cache only
 	 * 
@@ -61,13 +89,36 @@ public SurespotCachingHttpClient(Context context, CachingHttpClient diskCacheCli
 	 */
 	public SurespotCachingHttpClient(Context context, AbstractHttpClient defaultHttpClient) throws IOException {
 		super(defaultHttpClient, getHttpCacheStorage(context), getDiskCacheConfig());
-//		log.enableDebug(true);
-//		log.enableError(true);
-//		log.enableInfo(true);
-//		log.enableTrace(true);
-//		log.enableWarn(true);
+		log.enableDebug(true);
+		log.enableError(true);
+		log.enableInfo(true);
+		log.enableTrace(true);
+		log.enableWarn(true);
 
 		mAbstractHttpClient = defaultHttpClient;
+		
+
+//        SSLContext sc;
+//		try {
+//			sc = SSLContext.getInstance("SSL");
+//			sc.init(null, getTrustingManager(), null);
+//			SSLSocketFactory socketFactory = new SSLSocketFactory(sc);
+//	        Scheme sch = new Scheme("https", 443, socketFactory);
+//	        defaultHttpClient.getConnectionManager().getSchemeRegistry().register(sch);
+//	        
+//		}
+//		catch (NoSuchAlgorithmException e) {
+//			// TODO Auto-generated catch block
+//			e.printStackTrace();
+//		}
+//		catch (KeyManagementException e) {
+//			// TODO Auto-generated catch block
+//			e.printStackTrace();
+//		}
+        
+
+        
+		
 		// make it parse the cookie
 		// http://stackoverflow.com/questions/9500714/invalid-cookie-header-unable-to-parse-expires-attribute-when-expires-attribute
 		// 01-28 22:01:25.105: W/ResponseProcessCookies(23413): Invalid cookie header:
