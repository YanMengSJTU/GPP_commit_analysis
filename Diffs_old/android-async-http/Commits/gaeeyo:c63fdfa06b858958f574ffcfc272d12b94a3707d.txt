diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 1c98434f..24023b45 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -30,7 +30,7 @@
 import android.os.Handler;
 import android.os.Message;
 import android.os.Looper;
-
+ 
 /**
  * Used to intercept and handle the responses from requests made using 
  * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
@@ -217,14 +217,15 @@ void sendResponseMessage(HttpResponse response) {
                 entity = new BufferedHttpEntity(temp);
                 responseBody = EntityUtils.toString(entity, "UTF-8");
             }
+            if(status.getStatusCode() >= 300) {
+                sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+            } else {
+                sendSuccessMessage(responseBody);
+            }
         } catch(IOException e) {
             sendFailureMessage(e, (String) null);
-        }
-
-        if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
-        } else {
-            sendSuccessMessage(responseBody);
+        } catch(OutOfMemoryError e) {
+        	sendFailureMessage(e, (String) null);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 967f632e..0fc54e78 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -28,10 +28,8 @@
 import org.apache.http.entity.BufferedHttpEntity;
 import org.apache.http.util.EntityUtils;
 
-import android.os.Handler;
 import android.os.Message;
-import android.os.Looper;
-
+ 
 /**
  * Used to intercept and handle the responses from requests made using
  * {@link AsyncHttpClient}. Receives response body as byte array with a 
@@ -170,14 +168,15 @@ void sendResponseMessage(HttpResponse response) {
                 entity = new BufferedHttpEntity(temp);
             }
             responseBody = EntityUtils.toByteArray(entity);
+            if(status.getStatusCode() >= 300) {
+                sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+            } else {
+                sendSuccessMessage(responseBody);
+            }
         } catch(IOException e) {
             sendFailureMessage(e, (byte[]) null);
-        }
-
-        if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
-        } else {
-            sendSuccessMessage(responseBody);
+        } catch(OutOfMemoryError e) {
+        	sendFailureMessage(e, (byte[]) null);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 6c6be6d5..b60882fc 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -39,7 +39,7 @@
     //
     // Callbacks to be overridden, typically anonymously
     //
-
+ 
     /**
      * Fired when a request returns successfully and contains a json object
      * at the base of the response string. Override to handle in your
@@ -89,18 +89,22 @@ public void onFailure(Throwable e, JSONArray errorResponse) {}
 
     @Override
     protected void handleFailureMessage(Throwable e, String responseBody) {
-        if (responseBody != null) try {
-            Object jsonResponse = parseResponse(responseBody);
-            if(jsonResponse instanceof JSONObject) {
-                onFailure(e, (JSONObject)jsonResponse);
-            } else if(jsonResponse instanceof JSONArray) {
-                onFailure(e, (JSONArray)jsonResponse);
-            }
-        }
-        catch(JSONException ex) {
-            onFailure(e, responseBody);
-        }
-        else {
+        if (responseBody != null) {
+        	try {
+	            Object jsonResponse = parseResponse(responseBody);
+	            if(jsonResponse instanceof JSONObject) {
+	                onFailure(e, (JSONObject)jsonResponse);
+	            } else if(jsonResponse instanceof JSONArray) {
+	                onFailure(e, (JSONArray)jsonResponse);
+	            }
+	        }
+	        catch(JSONException ex) {
+	            onFailure(e, responseBody);
+	        }
+	        catch(OutOfMemoryError ex) {
+	        	onFailure(ex, responseBody);
+	        }
+        } else {
             onFailure(e, "");
         }
     }
