diff --git a/src/com/allthelucky/framework/WebImageBuffer.java b/src/com/allthelucky/framework/WebImageBuffer.java
index 8bdc45e9..0d09ef4e 100644
--- a/src/com/allthelucky/framework/WebImageBuffer.java
+++ b/src/com/allthelucky/framework/WebImageBuffer.java
@@ -4,23 +4,29 @@
 
 import android.graphics.Bitmap;
 
+/**
+ * Buffer Utils for WebImageView
+ * 
+ * @author savant
+ * 
+ */
 public class WebImageBuffer {
-    private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
+	private final static HashMap<String, Bitmap> caches = new HashMap<String, Bitmap>();
 
-    public synchronized static Bitmap get(String url) {
-        try {
-            return caches.get(url);
-        } catch (Exception e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
+	public synchronized static Bitmap get(String url) {
+		try {
+			return caches.get(url);
+		} catch (Exception e) {
+			e.printStackTrace();
+			return null;
+		}
+	}
 
-    public synchronized static void put(String url, Bitmap bitmap) {
-        try {
-            caches.put(url, bitmap);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
+	public synchronized static void put(String url, Bitmap bitmap) {
+		try {
+			caches.put(url, bitmap);
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
 }
diff --git a/src/com/allthelucky/framework/WebImageView.java b/src/com/allthelucky/framework/WebImageView.java
index fd20520f..f2edd8a5 100644
--- a/src/com/allthelucky/framework/WebImageView.java
+++ b/src/com/allthelucky/framework/WebImageView.java
@@ -10,111 +10,111 @@
 import android.widget.ImageView;
 
 /**
- * 网络图片控件
+ * WebImageView
  */
 public class WebImageView extends ImageView {
 
-    private Context context;
+	private Context context;
 
-    /**
-     * @param context
-     */
-    public WebImageView(Context context) {
-        this(context, null);
-    }
+	/**
+	 * @param context
+	 */
+	public WebImageView(Context context) {
+		this(context, null);
+	}
 
-    /**
-     * @param context
-     * @param attrs
-     */
-    public WebImageView(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
+	/**
+	 * @param context
+	 * @param attrs
+	 */
+	public WebImageView(Context context, AttributeSet attrs) {
+		this(context, attrs, 0);
+	}
 
-    /**
-     * @param context
-     * @param attrs
-     * @param defStyle
-     */
-    public WebImageView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        init(context);
-    }
+	/**
+	 * @param context
+	 * @param attrs
+	 * @param defStyle
+	 */
+	public WebImageView(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+		init(context);
+	}
 
-    /**
-     * @param context
-     */
-    private void init(Context context) {
-        this.context = context;
-    }
+	/**
+	 * @param context
+	 */
+	private void init(Context context) {
+		this.context = context;
+	}
 
-    /**
-     * Sets the content of this ImageView to the specified URL.
-     * 
-     * @param url
-     *            The URL of an image
-     */
-    public void setURLAsync(String url) {
-        setURLAsync(url, android.R.drawable.btn_default);
-    }
+	/**
+	 * Sets the content of this ImageView to the specified URL.
+	 * 
+	 * @param url
+	 *            The URL of an image
+	 */
+	public void setURLAsync(String url) {
+		setURLAsync(url, android.R.drawable.btn_default);
+	}
 
-    /**
-     * @param url
-     * @param loadNoCache
-     */
-    public synchronized void setURLAsync(String url, int defaultImage) {
-        if (TextUtils.isEmpty(url)) {
-            return;
-        }
-        RequestManager.getInstance().get(context, url, new ImageRequestListener(url, defaultImage), true, 0);
-    }
+	/**
+	 * @param url
+	 * @param loadNoCache
+	 */
+	public synchronized void setURLAsync(String url, int defaultImage) {
+		if (TextUtils.isEmpty(url)) {
+			return;
+		}
+		RequestManager.getInstance().get(context, url, new ImageRequestListener(url, defaultImage), true, 0);
+	}
 
-    final class ImageRequestListener implements RequestListener {
-        private String url;
-        private int defaultImage;
+	final class ImageRequestListener implements RequestListener {
+		private String url;
+		private int defaultImage;
 
-        public ImageRequestListener(String url, int defaultImage) {
-            this.url = url;
-            this.defaultImage = defaultImage;
-        }
+		public ImageRequestListener(String url, int defaultImage) {
+			this.url = url;
+			this.defaultImage = defaultImage;
+		}
 
-        @Override
-        public void onStart() {
-            
-        }
+		@Override
+		public void onStart() {
 
-        @Override
-        public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
-            if (actionId == 0) {
-                if (null != data && statusCode != RequestListener.ERR) {
-                    BitmapFactory.Options options = new Options();
-                    options.inDither = false; /* 不进行图片抖动处理 */
-                    options.inPreferredConfig = null; /* 设置让解码器以最佳方式解码 */
-                    options.inSampleSize = 2; /* 图片长宽方向缩小倍数 */
-                    options.inPreferredConfig = Bitmap.Config.RGB_565;
-                    options.inJustDecodeBounds = false;
-                    Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
-                    if (bitmap != null) {
-                        setImageBitmap(bitmap);
-                        WebImageBuffer.put(url, bitmap);
-                    } else {
-                        bitmap = WebImageBuffer.get(url);
-                        if (null != bitmap) {
-                            setImageBitmap(bitmap);
-                        }
-                    }
-                } else {
-                    Bitmap bitmap = WebImageBuffer.get(url);
-                    if (bitmap == null) {
-                        setImageDrawable(getResources().getDrawable(defaultImage));
-                    } else {
-                        setImageBitmap(bitmap);
-                    }
-                }
-            } else {
-                setImageDrawable(getResources().getDrawable(defaultImage));
-            }
-        }
-    }
+		}
+
+		@Override
+		public void onCompleted(byte[] data, int statusCode, String description, int actionId) {
+			if (actionId == 0) {
+				if (null != data && statusCode != RequestListener.ERR) {
+					BitmapFactory.Options options = new Options();
+					options.inDither = false; /* 不进行图片抖动处理 */
+					options.inPreferredConfig = null; /* 设置让解码器以最佳方式解码 */
+					options.inSampleSize = 2; /* 图片长宽方向缩小倍数 */
+					options.inPreferredConfig = Bitmap.Config.RGB_565;
+					options.inJustDecodeBounds = false;
+					Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
+					if (bitmap != null) {
+						setImageBitmap(bitmap);
+						WebImageBuffer.put(url, bitmap);
+					} else {
+						bitmap = WebImageBuffer.get(url);
+						if (null != bitmap) {
+							setImageBitmap(bitmap);
+						}
+					}
+				} else {
+					Bitmap bitmap = WebImageBuffer.get(url);
+					if (bitmap == null) {
+						setImageDrawable(getResources().getDrawable(defaultImage));
+					} else {
+						setImageBitmap(bitmap);
+					}
+				}
+			} else {
+				setImageDrawable(getResources().getDrawable(defaultImage));
+			}
+		}
+	}
 
 }
