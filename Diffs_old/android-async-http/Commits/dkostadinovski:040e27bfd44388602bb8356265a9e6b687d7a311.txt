diff --git a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
index 88f105a2..0b8f94c4 100755
--- a/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/library/src/main/java/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -18,14 +18,17 @@
 
 package com.loopj.android.http;
 
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import android.util.Log;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.WeakReference;
 import java.net.URI;
+import java.util.Arrays;
 
 import cz.msebera.android.httpclient.Header;
 import cz.msebera.android.httpclient.HttpEntity;
@@ -102,6 +105,18 @@
     private Looper looper = null;
     private WeakReference<Object> TAG = new WeakReference<Object>(null);
 
+    private EBralecSpeakDataInterface eBralecSpeakDataInterface;
+
+    /***
+     * Set EBralec interface. If not set and if speakRequest is false, AsyncHttpResponseHandler will return byte[] data instead of
+     * sending it through this interface.
+     *
+     * @param eBralecSpeakDataInterface
+     */
+    public void setEBralecSpeakDataInterface(EBralecSpeakDataInterface eBralecSpeakDataInterface) {
+        this.eBralecSpeakDataInterface = eBralecSpeakDataInterface;
+    }
+
     /**
      * Creates a new AsyncHttpResponseHandler
      */
@@ -458,9 +473,11 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
      *
      * @param entity can be null
      * @return response entity body or null
-     * @throws java.io.IOException if reading entity or creating byte array failed
+     * @throws IOException if reading entity or creating byte array failed
      */
     byte[] getResponseData(HttpEntity entity) throws IOException {
+        Log.e("AsyncClient", "getResponseData");
+
         byte[] responseBody = null;
         if (entity != null) {
             InputStream instream = entity.getContent();
@@ -472,20 +489,51 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                 int buffersize = (contentLength <= 0) ? BUFFER_SIZE : (int) contentLength;
                 try {
                     ByteArrayBuffer buffer = new ByteArrayBuffer(buffersize);
+
                     try {
                         byte[] tmp = new byte[BUFFER_SIZE];
                         long count = 0;
                         int l;
                         // do not send messages if request has been cancelled
+                        int bufferLen = 4096;
                         while ((l = instream.read(tmp)) != -1 && !Thread.currentThread().isInterrupted()) {
                             count += l;
-                            buffer.append(tmp, 0, l);
+
+                             if (eBralecSpeakDataInterface != null) {
+
+                                buffer.append(tmp, 0, l);
+                                if(buffer.length() >= bufferLen) {
+                                    byte[] audio = buffer.toByteArray();
+                                    byte[] send = Arrays.copyOfRange(audio, 0, bufferLen);
+                                    byte[] append = Arrays.copyOfRange(audio, bufferLen, audio.length);
+
+                                    buffer.clear();
+                                    buffer.append(append, 0, append.length);
+
+                                    boolean readMore = eBralecSpeakDataInterface.speakResponseData(send);
+                                    if(!readMore) {
+                                        instream.close();
+                                        Log.e("AsyncClient", "Input Stream CLOSED!");
+                                        break;
+                                    }
+                                }
+                            } else {
+                                 // For every other request other than Speak request
+                                 buffer.append(tmp, 0, l);
+                             }
+
                             sendProgressMessage(count, (contentLength <= 0 ? 1 : contentLength));
                         }
+
+                        if (eBralecSpeakDataInterface != null) {
+                            eBralecSpeakDataInterface.speakResponseData(buffer.toByteArray());
+                        }
+
                     } finally {
                         AsyncHttpClient.silentCloseInputStream(instream);
                         AsyncHttpClient.endEntityViaReflection(entity);
                     }
+
                     responseBody = buffer.toByteArray();
                 } catch (OutOfMemoryError e) {
                     System.gc();
@@ -493,6 +541,9 @@ public void sendResponseMessage(HttpResponse response) throws IOException {
                 }
             }
         }
+
+        // TODO Remove
+        eBralecSpeakDataInterface = null;
         return responseBody;
     }
 
