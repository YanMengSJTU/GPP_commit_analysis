diff --git a/.gitignore b/.gitignore
index aab3ee78..b47e093a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,6 @@
+*.iml
+out/
+.idea/
 _site
 MANIFEST.MF
 *.jar
@@ -7,4 +10,4 @@ local.properties
 bin/
 gen/
 _layouts
-.DS_Store
\ No newline at end of file
+.DS_Store
diff --git a/examples/ExampleUsage.java b/examples/ExampleUsage.java
index 2b7a4fa0..b35af93d 100644
--- a/examples/ExampleUsage.java
+++ b/examples/ExampleUsage.java
@@ -1,4 +1,5 @@
 import com.loopj.android.http.*;
+import org.apache.http.Header;
 
 public class ExampleUsage {
     public static void makeRequest() {
@@ -6,7 +7,7 @@ public static void makeRequest() {
 
         client.get("http://www.google.com", new AsyncHttpResponseHandler() {
             @Override
-            public void onSuccess(String response) {
+            public void onSuccess(String response, Header[] headers) {
                 System.out.println(response);
             }
         });
diff --git a/examples/TwitterRestClientUsage.java b/examples/TwitterRestClientUsage.java
index a4c89c8c..091b5034 100644
--- a/examples/TwitterRestClientUsage.java
+++ b/examples/TwitterRestClientUsage.java
@@ -1,3 +1,4 @@
+import org.apache.http.Header;
 import org.json.*;
 import com.loopj.android.http.*;
 
@@ -5,7 +6,7 @@
     public void getPublicTimeline() {
         TwitterRestClient.get("statuses/public_timeline.json", null, new JsonHttpResponseHandler() {
             @Override
-            public void onSuccess(JSONArray timeline) {
+            public void onSuccess(JSONArray timeline, Header[] headers) {
                 try {
                     JSONObject firstEvent = (JSONObject)timeline.get(0);
                     String tweetText = firstEvent.getString("text");
diff --git a/local.properties.dist b/local.properties.dist
deleted file mode 100644
index 5ecd58e1..00000000
--- a/local.properties.dist
+++ /dev/null
@@ -1 +0,0 @@
-sdk.dir=/usr/local/android_sdk/
\ No newline at end of file
diff --git a/project.properties b/project.properties
index 1880987e..d97194a1 100644
--- a/project.properties
+++ b/project.properties
@@ -7,6 +7,6 @@
 # "ant.properties", and override values to adapt the script to your
 # project structure.
 
-android.library=true
+android.library=false
 # Project target.
-target=android-3
+target=android-14
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index d7ebdd6d..7e63a20b 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -57,12 +57,13 @@ public void run() {
                 responseHandler.sendFinishMessage();
             }
         } catch (IOException e) {
+            System.out.println("ISTO DEU AQUI GRANDE BODE DE IO!");
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
                 if(this.isBinaryRequest) {
-                    responseHandler.sendFailureMessage(e, (byte[]) null);
+                    responseHandler.sendFailureMessage(e, (byte[]) null, null);
                 } else {
-                    responseHandler.sendFailureMessage(e, (String) null);
+                    responseHandler.sendFailureMessage(e, (String) null, null);
                 }
             }
         }
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 1c98434f..649466c7 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 
+import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -33,10 +34,10 @@
 
 /**
  * Used to intercept and handle the responses from requests made using 
- * {@link AsyncHttpClient}. The {@link #onSuccess(String)} method is 
+ * {@link AsyncHttpClient}. The {@link #onSuccess(String, Header[])} method is
  * designed to be anonymously overridden with your own response handling code.
  * <p>
- * Additionally, you can override the {@link #onFailure(Throwable, String)},
+ * Additionally, you can override the {@link #onFailure(Throwable, String, Header[])},
  * {@link #onStart()}, and {@link #onFinish()} methods as required.
  * <p>
  * For example:
@@ -81,7 +82,7 @@ public AsyncHttpResponseHandler() {
         // Set up a handler to post events back to the correct thread if possible
         if(Looper.myLooper() != null) {
             handler = new Handler(){
-                public void handleMessage(Message msg){
+                public void handleMessage(Message msg) {
                     AsyncHttpResponseHandler.this.handleMessage(msg);
                 }
             };
@@ -107,23 +108,23 @@ public void onFinish() {}
      * Fired when a request returns successfully, override to handle in your own code
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(String content) {}
+    public void onSuccess(String content, Header[] headers) {}
 
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
-     * @deprecated use {@link #onFailure(Throwable, String)}
+     * @deprecated use {@link #onFailure(Throwable, String, Header[])}
      */
-    public void onFailure(Throwable error) {}
+    public void onFailure(Throwable error, Header[] headers) {}
 
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
      * @param content the response body, if any
      */
-    public void onFailure(Throwable error, String content) {
+    public void onFailure(Throwable error, String content, Header[] headers) {
         // By default, call the deprecated onFailure(Throwable) for compatibility
-        onFailure(error);
+        onFailure(error, headers);
     }
 
 
@@ -131,24 +132,24 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(String responseBody, Header[] headers) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody, headers));
     }
 
-    protected void sendFailureMessage(Throwable e, String responseBody) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
+    protected void sendFailureMessage(Throwable e, String responseBody, Header[] headers) {
+        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}, headers));
     }
     
-    protected void sendFailureMessage(Throwable e, byte[] responseBody) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
+    protected void sendFailureMessage(Throwable e, byte[] responseBody, Header[] headers) {
+        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}, headers));
     }
 
     protected void sendStartMessage() {
-        sendMessage(obtainMessage(START_MESSAGE, null));
+        sendMessage(obtainMessage(START_MESSAGE, null, null));
     }
 
     protected void sendFinishMessage() {
-        sendMessage(obtainMessage(FINISH_MESSAGE, null));
+        sendMessage(obtainMessage(FINISH_MESSAGE, null, null));
     }
 
 
@@ -156,25 +157,26 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(String responseBody, Header[] headers) {
+        onSuccess(responseBody, headers);
     }
 
-    protected void handleFailureMessage(Throwable e, String responseBody) {
-        onFailure(e, responseBody);
+    protected void handleFailureMessage(Throwable e, String responseBody, Header[] headers) {
+        onFailure(e, responseBody, headers);
     }
 
 
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+	    AsyncResponse response = (AsyncResponse)msg.obj;
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
+                handleSuccessMessage((String)response.getResponse(), response.getHeaders());
                 break;
             case FAILURE_MESSAGE:
-                Object[] repsonse = (Object[])msg.obj;
-                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
+                Object[] error = (Object[])response.getResponse();
+                handleFailureMessage((Throwable)error[0], (String)error[1], response.getHeaders());
                 break;
             case START_MESSAGE:
                 onStart();
@@ -193,14 +195,16 @@ protected void sendMessage(Message msg) {
         }
     }
 
-    protected Message obtainMessage(int responseMessage, Object response) {
+    protected Message obtainMessage(int responseMessage, Object response, Header[] headers) {
         Message msg = null;
-        if(handler != null){
-            msg = this.handler.obtainMessage(responseMessage, response);
+	     AsyncResponse asyncResponse = new AsyncResponse(response, headers);
+
+	    if(handler != null){
+            msg = this.handler.obtainMessage(responseMessage, asyncResponse);
         }else{
             msg = new Message();
             msg.what = responseMessage;
-            msg.obj = response;
+            msg.obj = asyncResponse;
         }
         return msg;
     }
@@ -210,6 +214,7 @@ protected Message obtainMessage(int responseMessage, Object response) {
     void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         String responseBody = null;
+	    Header[] headers = response.getAllHeaders();
         try {
             HttpEntity entity = null;
             HttpEntity temp = response.getEntity();
@@ -218,13 +223,14 @@ void sendResponseMessage(HttpResponse response) {
                 responseBody = EntityUtils.toString(entity, "UTF-8");
             }
         } catch(IOException e) {
-            sendFailureMessage(e, (String) null);
+            sendFailureMessage(e, (String) null, headers);
         }
 
         if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+	        HttpResponseException ex = new HttpResponseException(status.getStatusCode(), status.getReasonPhrase());
+	        sendFailureMessage(ex, responseBody, headers);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(responseBody, headers);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/AsyncResponse.java b/src/com/loopj/android/http/AsyncResponse.java
new file mode 100644
index 00000000..dd988592
--- /dev/null
+++ b/src/com/loopj/android/http/AsyncResponse.java
@@ -0,0 +1,29 @@
+package com.loopj.android.http;
+
+import org.apache.http.Header;
+
+public class AsyncResponse {
+	protected Object response;
+	protected Header[] headers;
+
+	public AsyncResponse(Object response, Header[] headers) {
+		this.response = response;
+		this.headers = headers;
+	}
+
+	public void setResponse(Object response) {
+		this.response = response;
+	}
+
+	public Object getResponse() {
+		return response;
+	}
+
+	public void setHeaders(Header[] headers) {
+		this.headers = headers;
+	}
+
+	public Header[] getHeaders() {
+		return headers;
+	}
+}
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index 967f632e..3bb48e40 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -86,18 +86,18 @@ public BinaryHttpResponseHandler(String[] allowedContentTypes) {
 
     /**
      * Fired when a request returns successfully, override to handle in your own code
-     * @param content the body of the HTTP response from the server
+     * @param binaryData the body of the HTTP response from the server
      */
     public void onSuccess(byte[] binaryData) {}
 
     /**
      * Fired when a request fails to complete, override to handle in your own code
      * @param error the underlying cause of the failure
-     * @param content the response body, if any
+     * @param binaryData the response body, if any
      */
-    public void onFailure(Throwable error, byte[] binaryData) {
+    public void onFailure(Throwable error, byte[] binaryData, Header[] headers) {
         // By default, call the deprecated onFailure(Throwable) for compatibility
-        onFailure(error);
+        onFailure(error, headers);
     }
 
 
@@ -105,12 +105,12 @@ public void onFailure(Throwable error, byte[] binaryData) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(byte[] responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(byte[] responseBody, Header[] headers) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody, headers));
     }
 
-    protected void sendFailureMessage(Throwable e, byte[] responseBody) {
-        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}));
+    protected void sendFailureMessage(Throwable e, byte[] responseBody, Header[] headers) {
+        sendMessage(obtainMessage(FAILURE_MESSAGE, new Object[]{e, responseBody}, headers));
     }
 
     //
@@ -121,19 +121,20 @@ protected void handleSuccessMessage(byte[] responseBody) {
         onSuccess(responseBody);
     }
 
-    protected void handleFailureMessage(Throwable e, byte[] responseBody) {
-        onFailure(e, responseBody);
+    protected void handleFailureMessage(Throwable e, byte[] responseBody, Header[] headers) {
+        onFailure(e, responseBody, headers);
     }
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+	    AsyncResponse response = (AsyncResponse) msg.obj;
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((byte[])msg.obj);
+                handleSuccessMessage((byte[])response.getResponse());
                 break;
             case FAILURE_MESSAGE:
-                Object[] response = (Object[])msg.obj;
-                handleFailureMessage((Throwable)response[0], (byte[])response[1]);
+                Object[] error = (Object[])response.getResponse();
+                handleFailureMessage((Throwable)error[0], (byte[])error[1], response.getHeaders());
                 break;
             default:
                 super.handleMessage(msg);
@@ -145,10 +146,11 @@ protected void handleMessage(Message msg) {
     void sendResponseMessage(HttpResponse response) {
         StatusLine status = response.getStatusLine();
         Header[] contentTypeHeaders = response.getHeaders("Content-Type");
+	    Header[] headers = response.getAllHeaders();
         byte[] responseBody = null;
         if(contentTypeHeaders.length != 1) {
             //malformed/ambiguous HTTP Header, ABORT!
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), "None, or more than one, Content-Type Header found!"), responseBody);
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), "None, or more than one, Content-Type Header found!"), responseBody, headers);
             return;
         }
         Header contentTypeHeader = contentTypeHeaders[0];
@@ -160,7 +162,7 @@ void sendResponseMessage(HttpResponse response) {
         }
         if(!foundAllowedContentType) {
             //Content-Type not in allowed list, ABORT!
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), "Content-Type not allowed!"), responseBody);
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), "Content-Type not allowed!"), responseBody, headers);
             return;
         }
         try {
@@ -171,13 +173,13 @@ void sendResponseMessage(HttpResponse response) {
             }
             responseBody = EntityUtils.toByteArray(entity);
         } catch(IOException e) {
-            sendFailureMessage(e, (byte[]) null);
+            sendFailureMessage(e, (byte[]) null, headers);
         }
 
         if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody, headers);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(responseBody.clone(), headers);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 6c6be6d5..6ce66fb2 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http;
 
+import org.apache.http.Header;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -29,7 +30,7 @@
  * or {@link JSONArray}.
  * <p>
  * This class is designed to be passed to get, post, put and delete requests
- * with the {@link #onSuccess(JSONObject)} or {@link #onSuccess(JSONArray)}
+ * with the {@link #onSuccess(JSONObject, Header[])} or {@link #onSuccess(JSONArray, Header[])}
  * methods anonymously overridden.
  * <p>
  * Additionally, you can override the other event methods from the
@@ -46,7 +47,7 @@
      * own code.
      * @param response the parsed json object found in the server response (if any)
      */
-    public void onSuccess(JSONObject response) {}
+    public void onSuccess(JSONObject response, Header[] headers) {}
 
 
     /**
@@ -55,25 +56,26 @@ public void onSuccess(JSONObject response) {}
      * own code.
      * @param response the parsed json array found in the server response (if any)
      */
-    public void onSuccess(JSONArray response) {}
+    public void onSuccess(JSONArray response, Header[] headers) {}
 
 
     // Utility methods
     @Override
-    protected void handleSuccessMessage(String responseBody) {
-        super.handleSuccessMessage(responseBody);
+    protected void handleSuccessMessage(String responseBody, Header[] headers) {
+        super.handleSuccessMessage(responseBody, headers);
 
         try {
+	        System.out.println("JSONRESPONSE ------> "+responseBody);
             Object jsonResponse = parseResponse(responseBody);
             if(jsonResponse instanceof JSONObject) {
-                onSuccess((JSONObject)jsonResponse);
+                onSuccess((JSONObject) jsonResponse, headers);
             } else if(jsonResponse instanceof JSONArray) {
-                onSuccess((JSONArray)jsonResponse);
+                onSuccess((JSONArray)jsonResponse, headers);
             } else {
                 throw new JSONException("Unexpected type " + jsonResponse.getClass().getName());
             }
         } catch(JSONException e) {
-            onFailure(e, responseBody);
+            onFailure(e, responseBody, headers);
         }
     }
 
@@ -88,7 +90,7 @@ public void onFailure(Throwable e, JSONObject errorResponse) {}
     public void onFailure(Throwable e, JSONArray errorResponse) {}
 
     @Override
-    protected void handleFailureMessage(Throwable e, String responseBody) {
+    protected void handleFailureMessage(Throwable e, String responseBody, Header[] headers) {
         if (responseBody != null) try {
             Object jsonResponse = parseResponse(responseBody);
             if(jsonResponse instanceof JSONObject) {
@@ -98,10 +100,10 @@ protected void handleFailureMessage(Throwable e, String responseBody) {
             }
         }
         catch(JSONException ex) {
-            onFailure(e, responseBody);
+            onFailure(e, responseBody, headers);
         }
         else {
-            onFailure(e, "");
+            onFailure(e, "", headers);
         }
     }
 }
