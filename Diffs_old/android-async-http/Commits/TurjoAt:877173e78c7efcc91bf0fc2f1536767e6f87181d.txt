diff --git a/.classpath b/.classpath
index 14fcf527..fa94be66 100644
--- a/.classpath
+++ b/.classpath
@@ -1,8 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="src" path="examples"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="examples"/>
+	<classpathentry kind="lib" path="libs/httpclientandroidlib-1.1.1.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/.gitignore b/.gitignore
index 0900c481..df4e0a17 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,4 +8,5 @@ bin/
 gen/
 _layouts
 .DS_Store
-gh-pages
\ No newline at end of file
+gh-pages.settings/
+.settings/
diff --git a/project.properties b/project.properties
index 1880987e..a67d80ba 100644
--- a/project.properties
+++ b/project.properties
@@ -9,4 +9,4 @@
 
 android.library=true
 # Project target.
-target=android-3
+target=android-10
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index 6053a569..a7f4e147 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -31,41 +31,45 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.zip.GZIPInputStream;
 
-import org.apache.http.Header;
-import org.apache.http.HeaderElement;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpResponseInterceptor;
-import org.apache.http.HttpVersion;
-import org.apache.http.auth.AuthScope;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.CookieStore;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpDelete;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.client.methods.HttpPut;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.client.protocol.ClientContext;
-import org.apache.http.conn.params.ConnManagerParams;
-import org.apache.http.conn.params.ConnPerRouteBean;
-import org.apache.http.conn.scheme.PlainSocketFactory;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.conn.ssl.SSLSocketFactory;
-import org.apache.http.entity.HttpEntityWrapper;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpProtocolParams;
-import org.apache.http.protocol.BasicHttpContext;
-import org.apache.http.protocol.HttpContext;
-import org.apache.http.protocol.SyncBasicHttpContext;
+import com.twofours.surespot.SurespotCachingHttpClient;
+
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HeaderElement;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.HttpRequest;
+import ch.boye.httpclientandroidlib.HttpRequestInterceptor;
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.HttpResponseInterceptor;
+import ch.boye.httpclientandroidlib.HttpVersion;
+import ch.boye.httpclientandroidlib.auth.AuthScope;
+import ch.boye.httpclientandroidlib.auth.UsernamePasswordCredentials;
+import ch.boye.httpclientandroidlib.client.CookieStore;
+import ch.boye.httpclientandroidlib.client.HttpClient;
+import ch.boye.httpclientandroidlib.client.methods.HttpDelete;
+import ch.boye.httpclientandroidlib.client.methods.HttpEntityEnclosingRequestBase;
+import ch.boye.httpclientandroidlib.client.methods.HttpGet;
+import ch.boye.httpclientandroidlib.client.methods.HttpPost;
+import ch.boye.httpclientandroidlib.client.methods.HttpPut;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.client.protocol.ClientContext;
+import ch.boye.httpclientandroidlib.conn.params.ConnManagerParams;
+import ch.boye.httpclientandroidlib.conn.params.ConnPerRouteBean;
+import ch.boye.httpclientandroidlib.conn.scheme.PlainSocketFactory;
+import ch.boye.httpclientandroidlib.conn.scheme.Scheme;
+import ch.boye.httpclientandroidlib.conn.scheme.SchemeRegistry;
+import ch.boye.httpclientandroidlib.conn.ssl.SSLSocketFactory;
+import ch.boye.httpclientandroidlib.entity.HttpEntityWrapper;
+import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
+import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
+import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
+import ch.boye.httpclientandroidlib.impl.conn.tsccm.ThreadSafeClientConnManager;
+import ch.boye.httpclientandroidlib.params.BasicHttpParams;
+import ch.boye.httpclientandroidlib.params.HttpParams;
+import ch.boye.httpclientandroidlib.params.HttpConnectionParams;
+import ch.boye.httpclientandroidlib.params.HttpProtocolParams;
+import ch.boye.httpclientandroidlib.protocol.BasicHttpContext;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
+import ch.boye.httpclientandroidlib.protocol.SyncBasicHttpContext;
 
 import android.content.Context;
 
@@ -102,7 +106,7 @@
     private static int maxConnections = DEFAULT_MAX_CONNECTIONS;
     private static int socketTimeout = DEFAULT_SOCKET_TIMEOUT;
 
-    private final DefaultHttpClient httpClient;
+    private final SurespotCachingHttpClient cachingHttpClient;    
     private final HttpContext httpContext;
     private ThreadPoolExecutor threadPool;
     private final Map<Context, List<WeakReference<Future<?>>>> requestMap;
@@ -133,8 +137,8 @@ public AsyncHttpClient() {
         ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
 
         httpContext = new SyncBasicHttpContext(new BasicHttpContext());
-        httpClient = new DefaultHttpClient(cm, httpParams);
-        httpClient.addRequestInterceptor(new HttpRequestInterceptor() {
+        cachingHttpClient = new SurespotCachingHttpClient(new DefaultHttpClient(cm, httpParams));
+        cachingHttpClient.addRequestInterceptor(new HttpRequestInterceptor() {
             public void process(HttpRequest request, HttpContext context) {
                 if (!request.containsHeader(HEADER_ACCEPT_ENCODING)) {
                     request.addHeader(HEADER_ACCEPT_ENCODING, ENCODING_GZIP);
@@ -145,7 +149,7 @@ public void process(HttpRequest request, HttpContext context) {
             }
         });
 
-        httpClient.addResponseInterceptor(new HttpResponseInterceptor() {
+        cachingHttpClient.addResponseInterceptor(new HttpResponseInterceptor() {
             public void process(HttpResponse response, HttpContext context) {
                 final HttpEntity entity = response.getEntity();
                 if (entity == null) {
@@ -163,7 +167,14 @@ public void process(HttpResponse response, HttpContext context) {
             }
         });
 
-        httpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
+        cachingHttpClient.setHttpRequestRetryHandler(new RetryHandler(DEFAULT_MAX_RETRIES));
+        
+        
+        CacheConfig cacheConfig = new CacheConfig();  
+        cacheConfig.setMaxCacheEntries(1000);
+        cacheConfig.setMaxObjectSizeBytes(8192);
+        
+        
 
         threadPool = (ThreadPoolExecutor)Executors.newCachedThreadPool();
 
@@ -177,7 +188,7 @@ public void process(HttpResponse response, HttpContext context) {
      * client's ConnectionManager, HttpParams and SchemeRegistry.
      */
     public HttpClient getHttpClient() {
-        return this.httpClient;
+        return this.cachingHttpClient;
     }
 
     /**
@@ -212,7 +223,7 @@ public void setThreadPool(ThreadPoolExecutor threadPool) {
      * @param userAgent the string to use in the User-Agent header.
      */
     public void setUserAgent(String userAgent) {
-        HttpProtocolParams.setUserAgent(this.httpClient.getParams(), userAgent);
+        HttpProtocolParams.setUserAgent(this.cachingHttpClient.getParams(), userAgent);
     }
 
     /**
@@ -220,7 +231,7 @@ public void setUserAgent(String userAgent) {
      * @param timeout the connect/socket timeout in milliseconds
      */
     public void setTimeout(int timeout){
-        final HttpParams httpParams = this.httpClient.getParams();
+        final HttpParams httpParams = this.cachingHttpClient.getParams();
         ConnManagerParams.setTimeout(httpParams, timeout);
         HttpConnectionParams.setSoTimeout(httpParams, timeout);
         HttpConnectionParams.setConnectionTimeout(httpParams, timeout);
@@ -232,7 +243,7 @@ public void setTimeout(int timeout){
      * @param sslSocketFactory the socket factory to use for https requests.
      */
     public void setSSLSocketFactory(SSLSocketFactory sslSocketFactory) {
-        this.httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme("https", sslSocketFactory, 443));
+        this.cachingHttpClient.getConnectionManager().getSchemeRegistry().register(new Scheme("https", sslSocketFactory, 443));
     }
     
     /**
@@ -265,7 +276,7 @@ public void setBasicAuth(String user, String pass){
      */
     public void setBasicAuth( String user, String pass, AuthScope scope){
         UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(user,pass);
-        this.httpClient.getCredentialsProvider().setCredentials(scope, credentials);
+        this.cachingHttpClient.getCredentialsProvider().setCredentials(scope, credentials);
     }
 
     /**
@@ -335,7 +346,7 @@ public void get(Context context, String url, AsyncHttpResponseHandler responseHa
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void get(Context context, String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null, responseHandler, context);
     }
     
     /**
@@ -351,7 +362,7 @@ public void get(Context context, String url, RequestParams params, AsyncHttpResp
     public void get(Context context, String url, Header[] headers, RequestParams params, AsyncHttpResponseHandler responseHandler) {
         HttpUriRequest request = new HttpGet(getUrlWithQueryString(url, params));
         if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, null, responseHandler,
+        sendRequest(cachingHttpClient, httpContext, request, null, responseHandler,
                 context);
     }
 
@@ -394,12 +405,12 @@ public void post(Context context, String url, RequestParams params, AsyncHttpRes
      * Perform a HTTP POST request and track the Android Context which initiated the request.
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link ch.boye.httpclientandroidlib.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void post(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity), contentType, responseHandler, context);
     }
 
     /**
@@ -420,7 +431,7 @@ public void post(Context context, String url, Header[] headers, RequestParams pa
         HttpEntityEnclosingRequestBase request = new HttpPost(url);
         if(params != null) request.setEntity(paramsToEntity(params));
         if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType,
+        sendRequest(cachingHttpClient, httpContext, request, contentType,
                 responseHandler, context);
     }
 
@@ -433,7 +444,7 @@ public void post(Context context, String url, Header[] headers, RequestParams pa
      * @param headers set headers only for this request
      * @param entity a raw {@link HttpEntity} to send with the request, for
      *        example, use this to send string/json/xml payloads to a server by
-     *        passing a {@link org.apache.http.entity.StringEntity}.
+     *        passing a {@link ch.boye.httpclientandroidlib.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for
      *        example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle
@@ -443,7 +454,7 @@ public void post(Context context, String url, Header[] headers, HttpEntity entit
             AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);
         if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, request, contentType, responseHandler, context);
     }
 
     //
@@ -485,12 +496,12 @@ public void put(Context context, String url, RequestParams params, AsyncHttpResp
      * And set one-time headers for the request
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
-     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link ch.boye.httpclientandroidlib.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(Context context, String url, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
-        sendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity), contentType, responseHandler, context);
     }
     
     /**
@@ -499,14 +510,14 @@ public void put(Context context, String url, HttpEntity entity, String contentTy
      * @param context the Android Context which initiated the request.
      * @param url the URL to send the request to.
      * @param headers set one-time headers for this request
-     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link org.apache.http.entity.StringEntity}.
+     * @param entity a raw {@link HttpEntity} to send with the request, for example, use this to send string/json/xml payloads to a server by passing a {@link ch.boye.httpclientandroidlib.entity.StringEntity}.
      * @param contentType the content type of the payload you are sending, for example application/json if sending a json payload.
      * @param responseHandler the response handler instance that should handle the response.
      */
     public void put(Context context, String url,Header[] headers, HttpEntity entity, String contentType, AsyncHttpResponseHandler responseHandler) {
         HttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);
         if(headers != null) request.setHeaders(headers);
-        sendRequest(httpClient, httpContext, request, contentType, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, request, contentType, responseHandler, context);
     }
 
     //
@@ -530,7 +541,7 @@ public void delete(String url, AsyncHttpResponseHandler responseHandler) {
      */
     public void delete(Context context, String url, AsyncHttpResponseHandler responseHandler) {
         final HttpDelete delete = new HttpDelete(url);
-        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, delete, null, responseHandler, context);
     }
     
     /**
@@ -543,12 +554,12 @@ public void delete(Context context, String url, AsyncHttpResponseHandler respons
     public void delete(Context context, String url, Header[] headers, AsyncHttpResponseHandler responseHandler) {
         final HttpDelete delete = new HttpDelete(url);
         if(headers != null) delete.setHeaders(headers);
-        sendRequest(httpClient, httpContext, delete, null, responseHandler, context);
+        sendRequest(cachingHttpClient, httpContext, delete, null, responseHandler, context);
     }
 
 
     // Private stuff
-    protected void sendRequest(DefaultHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
+    protected void sendRequest(SurespotCachingHttpClient client, HttpContext httpContext, HttpUriRequest uriRequest, String contentType, AsyncHttpResponseHandler responseHandler, Context context) {
         if(contentType != null) {
             uriRequest.addHeader("Content-Type", contentType);
         }
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 0bfbccf7..96a9b438 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -24,21 +24,25 @@
 import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
 
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpRequestRetryHandler;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.AbstractHttpClient;
-import org.apache.http.protocol.HttpContext;
+import com.twofours.surespot.SurespotCachingHttpClient;
+
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
+import ch.boye.httpclientandroidlib.client.cache.CacheResponseStatus;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.impl.client.AbstractHttpClient;
+import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
 class AsyncHttpRequest implements Runnable {
-    private final AbstractHttpClient client;
+    private final SurespotCachingHttpClient client;
     private final HttpContext context;
     private final HttpUriRequest request;
     private final AsyncHttpResponseHandler responseHandler;
     private boolean isBinaryRequest;
     private int executionCount;
 
-    public AsyncHttpRequest(AbstractHttpClient client, HttpContext context, HttpUriRequest request, AsyncHttpResponseHandler responseHandler) {
+    public AsyncHttpRequest(SurespotCachingHttpClient client, HttpContext context, HttpUriRequest request, AsyncHttpResponseHandler responseHandler) {
         this.client = client;
         this.context = context;
         this.request = request;
@@ -76,6 +80,24 @@ private void makeRequest() throws IOException {
             HttpResponse response = client.execute(request, context);
             if(!Thread.currentThread().isInterrupted()) {
                 if(responseHandler != null) {
+                	CacheResponseStatus responseStatus = (CacheResponseStatus) context.getAttribute(
+                	        CachingHttpClient.CACHE_RESPONSE_STATUS);
+                	switch (responseStatus) {
+                	case CACHE_HIT:
+                	    System.out.println("A response was generated from the cache with no requests " +
+                	            "sent upstream");
+                	    break;
+                	case CACHE_MODULE_RESPONSE:
+                	    System.out.println("The response was generated directly by the caching module");
+                	    break;
+                	case CACHE_MISS:
+                	    System.out.println("The response came from an upstream server");
+                	    break;
+                	case VALIDATED:
+                	    System.out.println("The response was generated from the cache after validating " +
+                	            "the entry with the origin server");
+                	    break;
+                	}
                     responseHandler.sendResponseMessage(response);
                 }
             } else{
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 6c6ba088..137455ec 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -21,12 +21,12 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.StatusLine;
-import org.apache.http.client.HttpResponseException;
-import org.apache.http.entity.BufferedHttpEntity;
-import org.apache.http.util.EntityUtils;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.StatusLine;
+import ch.boye.httpclientandroidlib.client.HttpResponseException;
+import ch.boye.httpclientandroidlib.entity.BufferedHttpEntity;
+import ch.boye.httpclientandroidlib.util.EntityUtils;
 
 import java.io.IOException;
 
diff --git a/src/com/loopj/android/http/BinaryHttpResponseHandler.java b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
index aff1c631..dc40cffc 100644
--- a/src/com/loopj/android/http/BinaryHttpResponseHandler.java
+++ b/src/com/loopj/android/http/BinaryHttpResponseHandler.java
@@ -19,13 +19,13 @@
 package com.loopj.android.http;
 
 import android.os.Message;
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.StatusLine;
-import org.apache.http.client.HttpResponseException;
-import org.apache.http.entity.BufferedHttpEntity;
-import org.apache.http.util.EntityUtils;
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.HttpResponse;
+import ch.boye.httpclientandroidlib.StatusLine;
+import ch.boye.httpclientandroidlib.client.HttpResponseException;
+import ch.boye.httpclientandroidlib.entity.BufferedHttpEntity;
+import ch.boye.httpclientandroidlib.util.EntityUtils;
 
 import java.io.IOException;
 
diff --git a/src/com/loopj/android/http/PersistentCookieStore.java b/src/com/loopj/android/http/PersistentCookieStore.java
index 94076682..8fc52d24 100644
--- a/src/com/loopj/android/http/PersistentCookieStore.java
+++ b/src/com/loopj/android/http/PersistentCookieStore.java
@@ -27,8 +27,8 @@
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.http.client.CookieStore;
-import org.apache.http.cookie.Cookie;
+import ch.boye.httpclientandroidlib.client.CookieStore;
+import ch.boye.httpclientandroidlib.cookie.Cookie;
 
 import android.content.Context;
 import android.content.SharedPreferences;
diff --git a/src/com/loopj/android/http/RequestParams.java b/src/com/loopj/android/http/RequestParams.java
index d8110e25..b9db5d8a 100644
--- a/src/com/loopj/android/http/RequestParams.java
+++ b/src/com/loopj/android/http/RequestParams.java
@@ -28,10 +28,10 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.http.HttpEntity;
-import org.apache.http.client.entity.UrlEncodedFormEntity;
-import org.apache.http.client.utils.URLEncodedUtils;
-import org.apache.http.message.BasicNameValuePair;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.client.entity.UrlEncodedFormEntity;
+import ch.boye.httpclientandroidlib.client.utils.URLEncodedUtils;
+import ch.boye.httpclientandroidlib.message.BasicNameValuePair;
 
 /**
  * A collection of string request parameters or files to send along with
diff --git a/src/com/loopj/android/http/RetryHandler.java b/src/com/loopj/android/http/RetryHandler.java
index 96d7c00a..3e71eecc 100644
--- a/src/com/loopj/android/http/RetryHandler.java
+++ b/src/com/loopj/android/http/RetryHandler.java
@@ -31,15 +31,15 @@
 
 import javax.net.ssl.SSLHandshakeException;
 
-import org.apache.http.NoHttpResponseException;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.client.HttpRequestRetryHandler;
-import org.apache.http.protocol.ExecutionContext;
-import org.apache.http.protocol.HttpContext;
+import ch.boye.httpclientandroidlib.NoHttpResponseException;
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
+import ch.boye.httpclientandroidlib.protocol.ExecutionContext;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
 import android.os.SystemClock;
 
-class RetryHandler implements HttpRequestRetryHandler {
+public class RetryHandler implements HttpRequestRetryHandler {
     private static final int RETRY_SLEEP_TIME_MILLIS = 1500;
     private static HashSet<Class<?>> exceptionWhitelist = new HashSet<Class<?>>();
     private static HashSet<Class<?>> exceptionBlacklist = new HashSet<Class<?>>();
diff --git a/src/com/loopj/android/http/SerializableCookie.java b/src/com/loopj/android/http/SerializableCookie.java
index cc12993c..c024d19c 100644
--- a/src/com/loopj/android/http/SerializableCookie.java
+++ b/src/com/loopj/android/http/SerializableCookie.java
@@ -24,8 +24,8 @@
 import java.io.IOException;
 import java.util.Date;
 
-import org.apache.http.cookie.Cookie;
-import org.apache.http.impl.cookie.BasicClientCookie;
+import ch.boye.httpclientandroidlib.cookie.Cookie;
+import ch.boye.httpclientandroidlib.impl.cookie.BasicClientCookie;
 
 /**
  * A wrapper class around {@link Cookie} and/or {@link BasicClientCookie}
diff --git a/src/com/loopj/android/http/SimpleMultipartEntity.java b/src/com/loopj/android/http/SimpleMultipartEntity.java
index bff0efcc..464c1f80 100644
--- a/src/com/loopj/android/http/SimpleMultipartEntity.java
+++ b/src/com/loopj/android/http/SimpleMultipartEntity.java
@@ -33,9 +33,9 @@
 import java.io.OutputStream;
 import java.util.Random;
 
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.message.BasicHeader;
+import ch.boye.httpclientandroidlib.Header;
+import ch.boye.httpclientandroidlib.HttpEntity;
+import ch.boye.httpclientandroidlib.message.BasicHeader;
 
 class SimpleMultipartEntity implements HttpEntity {
     private final static char[] MULTIPART_CHARS = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray();
diff --git a/src/com/loopj/android/http/SyncHttpClient.java b/src/com/loopj/android/http/SyncHttpClient.java
index 8f55991e..ae2fb028 100644
--- a/src/com/loopj/android/http/SyncHttpClient.java
+++ b/src/com/loopj/android/http/SyncHttpClient.java
@@ -1,8 +1,10 @@
 package com.loopj.android.http;
 
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.protocol.HttpContext;
+import com.twofours.surespot.SurespotCachingHttpClient;
+
+import ch.boye.httpclientandroidlib.client.methods.HttpUriRequest;
+import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
+import ch.boye.httpclientandroidlib.protocol.HttpContext;
 
 import android.content.Context;
 import android.os.Message;
@@ -17,7 +19,7 @@
 	private String result;
 	AsyncHttpResponseHandler responseHandler = new AsyncHttpResponseHandler() {
 
-		void sendResponseMessage(org.apache.http.HttpResponse response) {
+		void sendResponseMessage(ch.boye.httpclientandroidlib.HttpResponse response) {
 			responseCode = response.getStatusLine().getStatusCode();
 			super.sendResponseMessage(response);
 		};
@@ -51,7 +53,7 @@ public int getResponseCode() {
 	}
 
 	// Private stuff
-	protected void sendRequest(DefaultHttpClient client,
+	protected void sendRequest(SurespotCachingHttpClient client,
 			HttpContext httpContext, HttpUriRequest uriRequest,
 			String contentType, AsyncHttpResponseHandler responseHandler,
 			Context context) {
diff --git a/src/com/twofours/surespot/SurespotCachingHttpClient.java b/src/com/twofours/surespot/SurespotCachingHttpClient.java
new file mode 100644
index 00000000..f23056e9
--- /dev/null
+++ b/src/com/twofours/surespot/SurespotCachingHttpClient.java
@@ -0,0 +1,88 @@
+package com.twofours.surespot;
+
+import java.io.IOException;
+
+import ch.boye.httpclientandroidlib.HttpRequestInterceptor;
+import ch.boye.httpclientandroidlib.HttpResponseInterceptor;
+import ch.boye.httpclientandroidlib.client.CredentialsProvider;
+import ch.boye.httpclientandroidlib.client.HttpRequestRetryHandler;
+import ch.boye.httpclientandroidlib.client.cache.HttpCacheEntry;
+import ch.boye.httpclientandroidlib.client.cache.HttpCacheStorage;
+import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateCallback;
+import ch.boye.httpclientandroidlib.client.cache.HttpCacheUpdateException;
+import ch.boye.httpclientandroidlib.impl.client.DefaultHttpClient;
+import ch.boye.httpclientandroidlib.impl.client.cache.CacheConfig;
+import ch.boye.httpclientandroidlib.impl.client.cache.CachingHttpClient;
+
+import com.loopj.android.http.RetryHandler;
+
+public class SurespotCachingHttpClient extends CachingHttpClient {
+	private DefaultHttpClient mDefaultHttpClient;
+	
+	public SurespotCachingHttpClient(DefaultHttpClient defaultHttpClient) {
+		super(defaultHttpClient, getCacheConfig());
+		mDefaultHttpClient = defaultHttpClient;
+		
+
+	}
+	
+	public class SurespotHttpCacheStorage implements HttpCacheStorage {
+
+		@Override
+		public HttpCacheEntry getEntry(String arg0) throws IOException {
+			// TODO Auto-generated method stub
+			return null;
+		}
+
+		@Override
+		public void putEntry(String arg0, HttpCacheEntry arg1) throws IOException {
+			// TODO Auto-generated method stub		
+		}
+
+		@Override
+		public void removeEntry(String arg0) throws IOException {
+			// TODO Auto-generated method stub
+			
+		}
+
+		@Override
+		public void updateEntry(String arg0, HttpCacheUpdateCallback arg1) throws IOException, HttpCacheUpdateException {
+			// TODO Auto-generated method stub
+			
+		}
+		
+	}
+	
+	private static CacheConfig getCacheConfig() {
+		
+		
+		
+		CacheConfig cacheConfig = new CacheConfig();  
+		cacheConfig.setMaxCacheEntries(50);
+		cacheConfig.setMaxObjectSizeBytes(120000);
+		return cacheConfig;
+	}
+
+	public HttpRequestRetryHandler getHttpRequestRetryHandler() {
+		return mDefaultHttpClient.getHttpRequestRetryHandler();
+	}
+
+	public CredentialsProvider getCredentialsProvider() {
+		return mDefaultHttpClient.getCredentialsProvider();
+	}
+
+	public void addRequestInterceptor(HttpRequestInterceptor httpRequestInterceptor) {
+		mDefaultHttpClient.addRequestInterceptor(httpRequestInterceptor);
+	}
+
+	public void addResponseInterceptor(HttpResponseInterceptor httpResponseInterceptor) {
+		mDefaultHttpClient.addResponseInterceptor(httpResponseInterceptor);
+
+	}
+
+	public void setHttpRequestRetryHandler(RetryHandler retryHandler) {
+		mDefaultHttpClient.setHttpRequestRetryHandler(retryHandler);
+		
+	}
+
+}
