diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 00000000..99f26c02
--- /dev/null
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/examples/ExampleUsage.java b/examples/ExampleUsage.java
deleted file mode 100644
index 2b7a4fa0..00000000
--- a/examples/ExampleUsage.java
+++ /dev/null
@@ -1,14 +0,0 @@
-import com.loopj.android.http.*;
-
-public class ExampleUsage {
-    public static void makeRequest() {
-        AsyncHttpClient client = new AsyncHttpClient();
-
-        client.get("http://www.google.com", new AsyncHttpResponseHandler() {
-            @Override
-            public void onSuccess(String response) {
-                System.out.println(response);
-            }
-        });
-    }
-}
\ No newline at end of file
diff --git a/examples/TwitterRestClient.java b/examples/TwitterRestClient.java
deleted file mode 100644
index f55708cf..00000000
--- a/examples/TwitterRestClient.java
+++ /dev/null
@@ -1,21 +0,0 @@
-// Static wrapper library around AsyncHttpClient
-
-import com.loopj.android.http.*;
-
-public class TwitterRestClient {
-    private static final String BASE_URL = "http://api.twitter.com/1/";
-
-    private static AsyncHttpClient client = new AsyncHttpClient();
-
-    public static void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.get(getAbsoluteUrl(url), params, responseHandler);
-    }
-
-    public static void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
-        client.get(getAbsoluteUrl(url), params, responseHandler);
-    }
-
-    private static String getAbsoluteUrl(String relativeUrl) {
-        return BASE_URL + relativeUrl;
-    }
-}
\ No newline at end of file
diff --git a/examples/TwitterRestClientUsage.java b/examples/TwitterRestClientUsage.java
deleted file mode 100644
index a4c89c8c..00000000
--- a/examples/TwitterRestClientUsage.java
+++ /dev/null
@@ -1,21 +0,0 @@
-import org.json.*;
-import com.loopj.android.http.*;
-
-class TwitterRestClientUsage {
-    public void getPublicTimeline() {
-        TwitterRestClient.get("statuses/public_timeline.json", null, new JsonHttpResponseHandler() {
-            @Override
-            public void onSuccess(JSONArray timeline) {
-                try {
-                    JSONObject firstEvent = (JSONObject)timeline.get(0);
-                    String tweetText = firstEvent.getString("text");
-
-                    // Do something with the response
-                    System.out.println(tweetText);
-                } catch(JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-        });
-    }
-}
\ No newline at end of file
diff --git a/src/com/loopj/android/http/AsyncHttpClient.java b/src/com/loopj/android/http/AsyncHttpClient.java
index ddc888ff..831d1a97 100644
--- a/src/com/loopj/android/http/AsyncHttpClient.java
+++ b/src/com/loopj/android/http/AsyncHttpClient.java
@@ -91,7 +91,7 @@
     private static final String VERSION = "1.3.2_Enabled";
 
     private static final int DEFAULT_MAX_CONNECTIONS = 10;
-    private static final int DEFAULT_SOCKET_TIMEOUT = 10 * 1000;
+    private static final int DEFAULT_SOCKET_TIMEOUT = 20 * 1000;
     private static final int DEFAULT_MAX_RETRIES = 5;
     private static final int DEFAULT_SOCKET_BUFFER_SIZE = 8192;
     private static final String HEADER_ACCEPT_ENCODING = "Accept-Encoding";
diff --git a/src/com/loopj/android/http/AsyncHttpRequest.java b/src/com/loopj/android/http/AsyncHttpRequest.java
index 8054141a..29139b9e 100644
--- a/src/com/loopj/android/http/AsyncHttpRequest.java
+++ b/src/com/loopj/android/http/AsyncHttpRequest.java
@@ -55,7 +55,7 @@ public void run() {
         } catch (IOException e) {
             if(responseHandler != null) {
                 responseHandler.sendFinishMessage();
-                responseHandler.sendFailureMessage(e, null);
+                responseHandler.sendFailureMessage(new Throwable(e.toString()), null);
             }
         }
     }
diff --git a/src/com/loopj/android/http/AsyncHttpResponseHandler.java b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
index 1403114c..6a71face 100644
--- a/src/com/loopj/android/http/AsyncHttpResponseHandler.java
+++ b/src/com/loopj/android/http/AsyncHttpResponseHandler.java
@@ -107,7 +107,7 @@ public void onFinish() {}
      * Fired when a request returns successfully, override to handle in your own code
      * @param content the body of the HTTP response from the server
      */
-    public void onSuccess(String content) {}
+    public void onSuccess(HttpResponse response, String content) {}
 
     /**
      * Fired when a request fails to complete, override to handle in your own code
@@ -131,8 +131,8 @@ public void onFailure(Throwable error, String content) {
     // Pre-processing of messages (executes in background threadpool thread)
     //
 
-    protected void sendSuccessMessage(String responseBody) {
-        sendMessage(obtainMessage(SUCCESS_MESSAGE, responseBody));
+    protected void sendSuccessMessage(HttpResponse response, String responseBody) {
+        sendMessage(obtainMessage(SUCCESS_MESSAGE, new Object[]{response, responseBody}));
     }
 
     protected void sendFailureMessage(Throwable e, String responseBody) {
@@ -152,8 +152,8 @@ protected void sendFinishMessage() {
     // Pre-processing of messages (in original calling thread, typically the UI thread)
     //
 
-    protected void handleSuccessMessage(String responseBody) {
-        onSuccess(responseBody);
+    protected void handleSuccessMessage(HttpResponse response, String responseBody) {
+        onSuccess(response, responseBody);
     }
 
     protected void handleFailureMessage(Throwable e, String responseBody) {
@@ -164,13 +164,13 @@ protected void handleFailureMessage(Throwable e, String responseBody) {
 
     // Methods which emulate android's Handler and Message methods
     protected void handleMessage(Message msg) {
+    	Object[] response = (Object[])msg.obj;
         switch(msg.what) {
             case SUCCESS_MESSAGE:
-                handleSuccessMessage((String)msg.obj);
+                handleSuccessMessage((HttpResponse)response[0], (String)response[1]);
                 break;
             case FAILURE_MESSAGE:
-                Object[] repsonse = (Object[])msg.obj;
-                handleFailureMessage((Throwable)repsonse[0], (String)repsonse[1]);
+                handleFailureMessage((Throwable)response[0], (String)response[1]);
                 break;
             case START_MESSAGE:
                 onStart();
@@ -214,13 +214,15 @@ void sendResponseMessage(HttpResponse response) {
                 responseBody = EntityUtils.toString(entity, "UTF-8");
             }
         } catch(IOException e) {
-            sendFailureMessage(e, null);
+            sendFailureMessage(new Throwable("BufferedHttpEntity IO exception"), null);
         }
 
         if(status.getStatusCode() >= 300) {
-            sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+            //sendFailureMessage(new HttpResponseException(status.getStatusCode(), status.getReasonPhrase()), responseBody);
+        	String detailMessage = status.getStatusCode() + " - " + status.getReasonPhrase();
+        	sendFailureMessage(new Throwable(detailMessage), responseBody);
         } else {
-            sendSuccessMessage(responseBody);
+            sendSuccessMessage(response, responseBody);
         }
     }
 }
\ No newline at end of file
diff --git a/src/com/loopj/android/http/JsonHttpResponseHandler.java b/src/com/loopj/android/http/JsonHttpResponseHandler.java
index 355a6a17..a7e5b66f 100644
--- a/src/com/loopj/android/http/JsonHttpResponseHandler.java
+++ b/src/com/loopj/android/http/JsonHttpResponseHandler.java
@@ -18,6 +18,7 @@
 
 package com.loopj.android.http;
 
+import org.apache.http.HttpResponse;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -60,8 +61,8 @@ public void onSuccess(JSONArray response) {}
 
     // Utility methods
     @Override
-    protected void handleSuccessMessage(String responseBody) {
-        super.handleSuccessMessage(responseBody);
+    protected void handleSuccessMessage(HttpResponse response, String responseBody) {
+        super.handleSuccessMessage(response, responseBody);
 
         try {
             Object jsonResponse = parseResponse(responseBody);
