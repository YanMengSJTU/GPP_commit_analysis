diff --git a/android-app-http/src/com/app/library/http/RequestChache.java b/android-app-http/src/com/app/library/http/RequestChache.java
new file mode 100644
index 00000000..6173f7dc
--- /dev/null
+++ b/android-app-http/src/com/app/library/http/RequestChache.java
@@ -0,0 +1,117 @@
+package com.app.library.http;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+
+public class RequestChache {
+	private static RequestChache INSTANCE = null;
+	private RequestDBHelper requestDBHelper;
+
+	public RequestChache(Context context) {
+		this.requestDBHelper = new RequestDBHelper(context);
+	}
+
+	public static RequestChache getInstance(Context context) {
+		if (INSTANCE == null) {
+			INSTANCE = new RequestChache(context);
+		}
+		return INSTANCE;
+	}
+
+	/**
+	 * 更新数据，
+	 * 
+	 * @param item
+	 */
+	public void update(String url, long lastModified) {
+		if (!find(url)) { // 创建
+			add(url, lastModified);
+		} else { // 有则更新
+			SQLiteDatabase db = requestDBHelper.getWritableDatabase();
+			db.execSQL("update request_cache set lastmodified=? where url=?",
+					new Object[] { String.valueOf(lastModified), url });
+		}
+	}
+
+	private void add(String url, long lastModified) {
+		SQLiteDatabase db = requestDBHelper.getWritableDatabase();
+		db.execSQL("insert into request_cache(url, lastmodified) values(?,?)",
+				new Object[] { url, String.valueOf(lastModified) });
+	}
+	
+	/**
+	 * 取最近更新
+	 * @param filename
+	 * @return
+	 */
+	public long getLastModified(String url) {
+		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
+		Cursor cursor = null;
+		long ret = 0l;
+
+		try {
+			cursor = db.rawQuery("select * from request_cache where url=?", new String[] { url });
+			if (cursor.moveToFirst()) {
+				String last = cursor.getString(cursor.getColumnIndex("lastmodified"));
+				ret = Long.valueOf(last);
+			}
+			System.out.println(ret);
+		} catch (Exception e) {
+			e.printStackTrace();
+		} finally {
+			if (cursor != null) {
+				cursor.close();
+			}
+		}
+		return ret;
+	}
+
+	/**
+	 * 查询存在
+	 * 
+	 * @param filename
+	 * @return
+	 */
+	private boolean find(String url) {
+		SQLiteDatabase db = requestDBHelper.getReadableDatabase();
+		Cursor cursor = null;
+		boolean flag = false;
+
+		try {
+			cursor = db.rawQuery("select * from request_cache where url=?", new String[] { url });
+			if (cursor.moveToFirst()) {
+				flag = true;
+			}
+		} catch (Exception e) {
+			e.printStackTrace();
+		} finally {
+			if (cursor != null) {
+				cursor.close();
+			}
+		}
+		return flag;
+	}
+
+	class RequestDBHelper extends SQLiteOpenHelper {
+		private static final String DB_NAME = "requestCache.db";
+		private static final int DB_VER = 1;
+		private static final String TABLE_CREATE = "create table request_cache(url varchar(32) primary key,  lastmodified varchar(16))";
+
+		public RequestDBHelper(Context context) {
+			super(context, DB_NAME, null, DB_VER);
+		}
+
+		@Override
+		public void onCreate(SQLiteDatabase db) {
+			db.execSQL(TABLE_CREATE);
+		}
+
+		@Override
+		public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
+
+		}
+
+	}
+}
diff --git a/android-app-http/src/com/app/library/http/RequestManager.java b/android-app-http/src/com/app/library/http/RequestManager.java
index 983d71d9..b80dad71 100644
--- a/android-app-http/src/com/app/library/http/RequestManager.java
+++ b/android-app-http/src/com/app/library/http/RequestManager.java
@@ -2,6 +2,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -20,6 +21,7 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.graphics.Path.FillType;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.AsyncTask;
@@ -169,11 +171,14 @@ public void get(Context context, String url, RequestParams params, RequestListen
 			int actionId) {
 		final String encodeUrl = urlEncode(url);
 		if (!cache) {
+			System.out.println("no cache--");
 			asyncHttpClient.get(context, url, params, new HttpRequestListener(requestListener, actionId));
 		} else {
 			if (!hasCache(context, encodeUrl)) {
+				System.out.println("no cache file--");
 				loadAndSaveResource(context, encodeUrl, requestListener, 0l, actionId);
 			} else {
+				System.out.println("cache file--");
 				loadCache(context, encodeUrl, requestListener, actionId);
 				if (!hasNetwork(context)) {
 					return;
@@ -206,8 +211,6 @@ private void loadAndSaveResource(final Context context, final String url, final
 	 * @param actionId
 	 */
 	private void checkUpdate(final Context context, final String url, final int actionId) {
-		final SharedPreferences pref = context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE);
-		final String fileName = getFileName(url);
 		new AsyncTask<Void, Void, Long>() {
 			@Override
 			protected Long doInBackground(Void... params) {
@@ -215,7 +218,7 @@ protected Long doInBackground(Void... params) {
 				try {
 					final URL u = new URL(url);
 					final HttpURLConnection conn = (HttpURLConnection) u.openConnection();
-					conn.setConnectTimeout(5 * 1000);
+					conn.setConnectTimeout(3 * 1000);
 					conn.setRequestProperty("User-agent", "Mozilla/4.0");
 					conn.setRequestProperty("Connection", "Keep-Alive");
 					conn.setRequestProperty("Charset", "UTF-8");
@@ -232,7 +235,10 @@ protected Long doInBackground(Void... params) {
 			}
 
 			protected void onPostExecute(Long result) {
-				if (result != -1l && result != pref.getLong(fileName, 0l)) {
+				long ret = RequestChache.getInstance(context).getLastModified(convertFilename(url));
+				System.out.println("result="+result+",ret"+ret);
+				if (result != -1l && result != ret) {
+					System.out.println("update--");
 					loadAndSaveResource(context, url, null, result, actionId);// 不返回数据到接口
 				}
 			}
@@ -253,20 +259,28 @@ private void loadCache(final Context context, final String url, final RequestLis
 		new AsyncTask<Void, Void, byte[]>() {
 			@Override
 			protected byte[] doInBackground(Void... params) {
+				FileInputStream ins = null;
 				try {
-					InputStream is = context.openFileInput(getFileName(url));
+					ins = context.openFileInput(convertFilename(url));
 					ByteArrayOutputStream bos = new ByteArrayOutputStream();
 					byte[] bytes = new byte[4096];
 					int len = 0;
-					while ((len = is.read(bytes)) > 0) {
+					while ((len = ins.read(bytes)) > 0) {
 						bos.write(bytes, 0, len);
 					}
 					bos.flush();
 					return bos.toByteArray();
-
 				} catch (Exception e) {
 					e.printStackTrace();
 					return null;
+				} finally {
+					if (ins != null) {
+						try {
+							ins.close();
+						} catch (IOException e) {
+							e.printStackTrace();
+						}
+					}
 				}
 			}
 
@@ -282,11 +296,20 @@ protected void onPostExecute(byte[] result) {
 	 * 检测缓存
 	 */
 	private boolean hasCache(Context context, String url) {
+		FileInputStream ins = null;
 		try {
-			context.openFileInput(getFileName(url));
+			ins = context.openFileInput(convertFilename(url));
 			return true;
 		} catch (Exception e) {
 			return false;
+		} finally {
+			if (ins != null) {
+				try {
+					ins.close();
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
+			}
 		}
 	}
 
@@ -349,7 +372,7 @@ public void onCompleted(byte[] data, int statusCode, String description, int act
 		private void saveCache(Context context, String url, byte[] data) {
 			try {
 				ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
-				FileOutputStream os = context.openFileOutput(getFileName(url), Context.MODE_PRIVATE);
+				FileOutputStream os = context.openFileOutput(convertFilename(url), Context.MODE_PRIVATE);
 
 				byte[] buffer = new byte[1024];
 				int len = 0;
@@ -359,19 +382,13 @@ private void saveCache(Context context, String url, byte[] data) {
 
 				os.close();
 				inputStream.close();
-				saveLastModified();
-
+				RequestChache.getInstance(context).update(url, lastModified);
 			} catch (FileNotFoundException e) {
 				e.printStackTrace();
 			} catch (IOException e) {
 				e.printStackTrace();
 			}
 		}
-
-		private void saveLastModified() {
-			context.getSharedPreferences("cachefiles", Context.MODE_PRIVATE).edit()
-					.putLong(getFileName(url), lastModified).commit();
-		}
 	}
 
 	/**
@@ -422,12 +439,23 @@ public static boolean hasNetwork(Context context) {
 	/**
 	 * 对字符串进行MD5加密。
 	 */
-	public static String getFileName(String input) {
-		if (null != input) {
-			return input.hashCode() + "";
-		} else {
-			return "error";
+	public static String convertFilename(String strInput) {
+		StringBuffer buf = null;
+		try {
+			MessageDigest md = MessageDigest.getInstance("MD5");
+			md.update(strInput.getBytes("UTF-8"));
+			byte b[] = md.digest();
+			buf = new StringBuffer(b.length * 2);
+			for (int i = 0; i < b.length; i++) {
+				if (((int) b[i] & 0xff) < 0x10) { /* & 0xff转换无符号整型 */
+					buf.append("0");
+				}
+				buf.append(Long.toHexString((int) b[i] & 0xff)); /* 转换16进制,下方法同 */
+			}
+		} catch (Exception ex) {
+			ex.printStackTrace();
 		}
+		return buf.toString().substring(8, 24);
 	}
 
 	/**
