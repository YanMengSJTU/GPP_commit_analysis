diff --git a/README.md b/README.md
index 3ab88b264..f4bb5ed31 100644
--- a/README.md
+++ b/README.md
@@ -31,8 +31,8 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.github.bumptech.glide:glide:4.8.0'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
+  implementation 'com.github.bumptech.glide:glide:4.9.0'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
 }
 ```
 
@@ -42,12 +42,12 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.8.0</version>
+  <version>4.9.0</version>
 </dependency>
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.8.0</version>
+  <version>4.9.0</version>
   <optional>true</optional>
 </dependency>
 ```
@@ -76,7 +76,7 @@ Check out the [documentation][20] for pages on a variety of topics, and see the
 
 For Glide v3, see the [wiki][2].
 
-Simple use cases with Glide's [generated API][21] will look something like this:
+Simple use cases will look something like this:
 
 ```java
 // For a simple view:
@@ -84,7 +84,7 @@ Simple use cases with Glide's [generated API][21] will look something like this:
   ...
   ImageView imageView = (ImageView) findViewById(R.id.my_image_view);
 
-  GlideApp.with(this).load("http://goo.gl/gEgYUd").into(imageView);
+  Glide.with(this).load("http://goo.gl/gEgYUd").into(imageView);
 }
 
 // For a simple image list:
@@ -98,7 +98,7 @@ Simple use cases with Glide's [generated API][21] will look something like this:
 
   String url = myUrls.get(position);
 
-  GlideApp
+  Glide
     .with(myFragment)
     .load(url)
     .centerCrop()
@@ -111,7 +111,7 @@ Simple use cases with Glide's [generated API][21] will look something like this:
 
 Status
 ------
-Version 4 is now released and stable. Updates are currently released at least monthly with new features and bug fixes.
+Version 4 is now released and stable. Updates are released periodically with new features and bug fixes.
 
 Comments/bugs/questions/pull requests are always welcome! Please read [CONTRIBUTING.md][5] on how to report issues.
 
@@ -133,7 +133,7 @@ Build
 Building Glide with gradle is fairly straight forward:
 
 ```shell
-git clone https://github.com/bumptech/glide.git 
+git clone https://github.com/bumptech/glide.git
 cd glide
 ./gradlew jar
 ```
@@ -216,7 +216,6 @@ This is not an official Google product.
 [18]: https://github.com/bumptech/glide/issues?q=is%3Aissue+CircleImageView+OR+CircularImageView+OR+RoundedImageView
 [19]: https://github.com/wasabeef/glide-transformations
 [20]: https://bumptech.github.io/glide/
-[21]: https://bumptech.github.io/glide/doc/generatedapi.html
 [22]: https://muyangmin.github.io/glide-docs-cn/
 [23]: http://bumptech.github.io/glide/int/okhttp3.html
 [24]: http://bumptech.github.io/glide/int/volley.html
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index dea6e476f..41b9eb986 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -121,9 +121,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -131,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index 24e38fddb..5cdd03bec 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -124,9 +124,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -134,8 +133,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index 48a2d8bd4..10605ac8e 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index 0fe0aa379..0fa5e1aa2 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -122,8 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index bd338d637..41baaf8ff 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index 1baed9ffa..9e4a0f16c 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 32c1ab8b8..872ab87ed 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index 25d649038..311b65c3a 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index bedefc889..74ffc0dc0 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/gradle.properties b/gradle.properties
index 58d6319a6..5031f4c83 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,9 +1,9 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=false
 
-VERSION_NAME=4.9.0-SNAPSHOT
+VERSION_NAME=4.10.0-SNAPSHOT
 VERSION_MAJOR=4
-VERSION_MINOR=9
+VERSION_MINOR=10
 VERSION_PATCH=0
 GROUP=com.github.bumptech.glide
 
@@ -19,7 +19,7 @@ ANDROID_SUPPORT_VERSION=27.1.1
 ANDROID_X_VERSION=1.0.0
 ANDROIDX_TEST_VERSION=1.1.0-alpha4
 VOLLEY_VERSION=1.1.0
-OK_HTTP_VERSION=3.9.1
+OK_HTTP_VERSION=3.12.1
 ANDROID_GRADLE_VERSION=3.2.1
 DAGGER_VERSION=2.15
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 9a4163a4f..910703705 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,6 @@
+#Mon Mar 04 18:37:29 PST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
index 033aecfec..9292a7ec8 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
@@ -13,6 +13,8 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.os.Looper;
 import androidx.test.InstrumentationRegistry;
 import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
@@ -20,7 +22,9 @@
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.test.BitmapSubject;
 import com.bumptech.glide.test.GlideApp;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -117,6 +121,26 @@ public void load_withColorDrawable_sizeOriginal_requiredTransform_fails()
       throws ExecutionException, InterruptedException {
     final Drawable colorDrawable = new ColorDrawable(Color.RED);
 
+    // The following section is a hack to workaround a weird behavior where a post in RequestManager
+    // can cause a failed request to be started twice in a row if the first attempt happens before.
+    // the post. This seems rather unlikely to happen in real applications and it only occurs when
+    // the request fails unexpectedly, so we're working around this weird behavior in this test.
+    // See #3551.
+
+    // Trigger the Glide application RequestManager to be created.
+    Glide.get(context).getRequestManagerRetriever().get(context);
+    // Wait until it's added as a lifecycle observer.
+    final CountDownLatch latch = new CountDownLatch(1);
+    new Handler(Looper.getMainLooper()).post(new Runnable() {
+      @Override
+      public void run() {
+        latch.countDown();
+      }
+    });
+    latch.await(5, TimeUnit.SECONDS);
+
+    // End hacks.
+
     assertThrows(
         ExecutionException.class,
         new ThrowingRunnable() {
diff --git a/library/findbugs-exclude.xml b/library/findbugs-exclude.xml
index f27b2c382..dee0fdbe5 100644
--- a/library/findbugs-exclude.xml
+++ b/library/findbugs-exclude.xml
@@ -54,4 +54,10 @@
       <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS" />
     </Match>
 
+    <!-- Inconsistent synchronization is due to synchronizing on Engine/listener to avoid deadlock only. -->
+    <Match>
+      <Class name="com.bumptech.glide.load.engine.EngineResource" />
+      <Bug pattern="IS2_INCONSISTENT_SYNC" />
+    </Match>
+
 </FindBugsFilter>
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 8691928f6..a4ceab042 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -267,7 +267,15 @@ private static void initializeGlide(@NonNull Context context, @NonNull GlideBuil
     }
     Glide glide = builder.build(applicationContext);
     for (com.bumptech.glide.module.GlideModule module : manifestModules) {
-      module.registerComponents(applicationContext, glide, glide.registry);
+      try {
+        module.registerComponents(applicationContext, glide, glide.registry);
+      } catch (AbstractMethodError e) {
+        throw new IllegalStateException(
+            "Attempting to register a Glide v3 module. If you see this, you or one of your"
+                + " dependencies may be including Glide v3 even though you're using Glide v4."
+                + " You'll need to find and remove (or update) the offending dependency."
+                + " The v3 module name is: " + module.getClass().getName(), e);
+      }
     }
     if (annotationGeneratedModule != null) {
       annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry);
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 98338cfcd..fd4d859a2 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -484,7 +484,7 @@ Glide build(@NonNull Context context) {
               diskCacheExecutor,
               sourceExecutor,
               GlideExecutor.newUnlimitedSourceExecutor(),
-              GlideExecutor.newAnimationExecutor(),
+              animationExecutor,
               isActiveResourceRetentionAllowed);
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
index 7749477ac..ed01c158d 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
@@ -90,13 +90,19 @@ public InputStream open(Uri uri) throws FileNotFoundException {
 
   @Nullable
   private String getPath(@NonNull Uri uri) {
-    final Cursor cursor = query.query(uri);
+    Cursor cursor = null;
     try {
+      cursor = query.query(uri);
       if (cursor != null && cursor.moveToFirst()) {
         return cursor.getString(0);
       } else {
         return null;
       }
+    } catch (SecurityException e) {
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to query for thumbnail for Uri: " + uri, e);
+      }
+      return null;
     } finally {
       if (cursor != null) {
         cursor.close();
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java
index 9b25b8a97..16e548732 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java
@@ -118,8 +118,12 @@ void cleanupActiveReference(@NonNull ResourceWeakReference ref) {
           return;
         }
         EngineResource<?> newResource =
-            new EngineResource<>(ref.resource, /*isCacheable=*/ true, /*isRecyclable=*/ false);
-        newResource.setResourceListener(ref.key, listener);
+            new EngineResource<>(
+                ref.resource,
+                /*isMemoryCacheable=*/ true,
+                /*isRecyclable=*/ false,
+                ref.key,
+                listener);
         listener.onResourceReleased(ref.key, newResource);
       }
     }
@@ -180,9 +184,9 @@ void shutdown() {
       super(referent, queue);
       this.key = Preconditions.checkNotNull(key);
       this.resource =
-          referent.isCacheable() && isActiveResourceRetentionAllowed
+          referent.isMemoryCacheable() && isActiveResourceRetentionAllowed
               ? Preconditions.checkNotNull(referent.getResource()) : null;
-      isCacheable = referent.isCacheable();
+      isCacheable = referent.isMemoryCacheable();
     }
 
     void reset() {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index f3050c8b7..54697616d 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -11,6 +11,7 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.EngineResource.ResourceListener;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.DiskCacheAdapter;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
@@ -102,7 +103,12 @@ public Engine(
     if (engineJobFactory == null) {
       engineJobFactory =
           new EngineJobFactory(
-              diskCacheExecutor, sourceExecutor, sourceUnlimitedExecutor, animationExecutor, this);
+              diskCacheExecutor,
+              sourceExecutor,
+              sourceUnlimitedExecutor,
+              animationExecutor,
+              /*engineJobListener=*/ this,
+              /*resourceListener=*/ this);
     }
     this.engineJobFactory = engineJobFactory;
 
@@ -276,7 +282,8 @@ private static void logWithTimeAndKey(String log, long startTime, Key key) {
       // Save an object allocation if we've cached an EngineResource (the typical case).
       result = (EngineResource<?>) cached;
     } else {
-      result = new EngineResource<>(cached, true /*isMemoryCacheable*/, true /*isRecyclable*/);
+      result = new EngineResource<>(
+          cached, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ true, key, /*listener=*/ this);
     }
     return result;
   }
@@ -294,12 +301,8 @@ public void release(Resource<?> resource) {
   public synchronized void onEngineJobComplete(
       EngineJob<?> engineJob, Key key, EngineResource<?> resource) {
     // A null resource indicates that the load failed, usually due to an exception.
-    if (resource != null) {
-      resource.setResourceListener(key, this);
-
-      if (resource.isCacheable()) {
-        activeResources.activate(key, resource);
-      }
+    if (resource != null && resource.isMemoryCacheable()) {
+      activeResources.activate(key, resource);
     }
 
     jobs.removeIfCurrent(key, engineJob);
@@ -318,7 +321,7 @@ public void onResourceRemoved(@NonNull final Resource<?> resource) {
   @Override
   public synchronized void onResourceReleased(Key cacheKey, EngineResource<?> resource) {
     activeResources.deactivate(cacheKey);
-    if (resource.isCacheable()) {
+    if (resource.isMemoryCacheable()) {
       cache.put(cacheKey, resource);
     } else {
       resourceRecycler.recycle(resource);
@@ -456,7 +459,8 @@ public DiskCache getDiskCache() {
     @Synthetic final GlideExecutor sourceExecutor;
     @Synthetic final GlideExecutor sourceUnlimitedExecutor;
     @Synthetic final GlideExecutor animationExecutor;
-    @Synthetic final EngineJobListener listener;
+    @Synthetic final EngineJobListener engineJobListener;
+    @Synthetic final ResourceListener resourceListener;
     @Synthetic final Pools.Pool<EngineJob<?>> pool =
         FactoryPools.threadSafe(
             JOB_POOL_SIZE,
@@ -468,7 +472,8 @@ public DiskCache getDiskCache() {
                     sourceExecutor,
                     sourceUnlimitedExecutor,
                     animationExecutor,
-                    listener,
+                    engineJobListener,
+                    resourceListener,
                     pool);
               }
             });
@@ -478,12 +483,14 @@ public DiskCache getDiskCache() {
         GlideExecutor sourceExecutor,
         GlideExecutor sourceUnlimitedExecutor,
         GlideExecutor animationExecutor,
-        EngineJobListener listener) {
+        EngineJobListener engineJobListener,
+        ResourceListener resourceListener) {
       this.diskCacheExecutor = diskCacheExecutor;
       this.sourceExecutor = sourceExecutor;
       this.sourceUnlimitedExecutor = sourceUnlimitedExecutor;
       this.animationExecutor = animationExecutor;
-      this.listener = listener;
+      this.engineJobListener = engineJobListener;
+      this.resourceListener = resourceListener;
     }
 
     @VisibleForTesting
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index c3bd7358e..0a1846c95 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -5,6 +5,7 @@
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.engine.EngineResource.ResourceListener;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.util.Executors;
@@ -31,9 +32,10 @@
   final ResourceCallbacksAndExecutors cbs = new ResourceCallbacksAndExecutors();
 
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
+  private final ResourceListener resourceListener;
   private final Pools.Pool<EngineJob<?>> pool;
   private final EngineResourceFactory engineResourceFactory;
-  private final EngineJobListener listener;
+  private final EngineJobListener engineJobListener;
   private final GlideExecutor diskCacheExecutor;
   private final GlideExecutor sourceExecutor;
   private final GlideExecutor sourceUnlimitedExecutor;
@@ -73,14 +75,16 @@
       GlideExecutor sourceExecutor,
       GlideExecutor sourceUnlimitedExecutor,
       GlideExecutor animationExecutor,
-      EngineJobListener listener,
+      EngineJobListener engineJobListener,
+      ResourceListener resourceListener,
       Pools.Pool<EngineJob<?>> pool) {
     this(
         diskCacheExecutor,
         sourceExecutor,
         sourceUnlimitedExecutor,
         animationExecutor,
-        listener,
+        engineJobListener,
+        resourceListener,
         pool,
         DEFAULT_FACTORY);
   }
@@ -91,14 +95,16 @@
       GlideExecutor sourceExecutor,
       GlideExecutor sourceUnlimitedExecutor,
       GlideExecutor animationExecutor,
-      EngineJobListener listener,
+      EngineJobListener engineJobListener,
+      ResourceListener resourceListener,
       Pools.Pool<EngineJob<?>> pool,
       EngineResourceFactory engineResourceFactory) {
     this.diskCacheExecutor = diskCacheExecutor;
     this.sourceExecutor = sourceExecutor;
     this.sourceUnlimitedExecutor = sourceUnlimitedExecutor;
     this.animationExecutor = animationExecutor;
-    this.listener = listener;
+    this.engineJobListener = engineJobListener;
+    this.resourceListener = resourceListener;
     this.pool = pool;
     this.engineResourceFactory = engineResourceFactory;
   }
@@ -197,7 +203,7 @@ void cancel() {
 
     isCancelled = true;
     decodeJob.cancel();
-    listener.onEngineJobCancelled(this, key);
+    engineJobListener.onEngineJobCancelled(this, key);
   }
 
   // Exposed for testing.
@@ -231,7 +237,7 @@ void notifyCallbacksOfResult() {
       } else if (hasResource) {
         throw new IllegalStateException("Already have resource");
       }
-      engineResource = engineResourceFactory.build(resource, isCacheable);
+      engineResource = engineResourceFactory.build(resource, isCacheable, key, resourceListener);
       // Hold on to resource for duration of our callbacks below so we don't recycle it in the
       // middle of notifying if it synchronously released by one of the callbacks. Acquire it under
       // a lock here so that any newly added callback that executes before the next locked section
@@ -244,7 +250,7 @@ void notifyCallbacksOfResult() {
       localResource = engineResource;
     }
 
-    listener.onEngineJobComplete(this, localKey, localResource);
+    engineJobListener.onEngineJobComplete(this, localKey, localResource);
 
     for (final ResourceCallbackAndExecutor entry : copy) {
       entry.executor.execute(new CallResourceReady(entry.cb));
@@ -347,7 +353,7 @@ void notifyCallbacksOfException() {
       incrementPendingCallbacks(copy.size() + 1);
     }
 
-    listener.onEngineJobComplete(this, localKey, /*resource=*/ null);
+    engineJobListener.onEngineJobComplete(this, localKey, /*resource=*/ null);
 
     for (ResourceCallbackAndExecutor entry : copy) {
       entry.executor.execute(new CallLoadFailed(entry.cb));
@@ -480,8 +486,10 @@ public int hashCode() {
 
   @VisibleForTesting
   static class EngineResourceFactory {
-    public <R> EngineResource<R> build(Resource<R> resource, boolean isMemoryCacheable) {
-      return new EngineResource<>(resource, isMemoryCacheable, /*isRecyclable=*/ true);
+    public <R> EngineResource<R> build(
+        Resource<R> resource, boolean isMemoryCacheable, Key key, ResourceListener listener) {
+      return new EngineResource<>(
+          resource, isMemoryCacheable, /*isRecyclable=*/ true, key, listener);
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java
index 5a4cd298b..4db3a1db7 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineResource.java
@@ -11,35 +11,38 @@
  * @param <Z> The type of data returned by the wrapped {@link Resource}.
  */
 class EngineResource<Z> implements Resource<Z> {
-  private final boolean isCacheable;
+  private final boolean isMemoryCacheable;
   private final boolean isRecyclable;
-  private ResourceListener listener;
-  private Key key;
+  private final Resource<Z> resource;
+  private final ResourceListener listener;
+  private final Key key;
+
   private int acquired;
   private boolean isRecycled;
-  private final Resource<Z> resource;
 
   interface ResourceListener {
     void onResourceReleased(Key key, EngineResource<?> resource);
   }
 
-  EngineResource(Resource<Z> toWrap, boolean isCacheable, boolean isRecyclable) {
+  EngineResource(
+      Resource<Z> toWrap,
+      boolean isMemoryCacheable,
+      boolean isRecyclable,
+      Key key,
+      ResourceListener listener) {
     resource = Preconditions.checkNotNull(toWrap);
-    this.isCacheable = isCacheable;
+    this.isMemoryCacheable = isMemoryCacheable;
     this.isRecyclable = isRecyclable;
-  }
-
-  synchronized void setResourceListener(Key key, ResourceListener listener) {
     this.key = key;
-    this.listener = listener;
+    this.listener = Preconditions.checkNotNull(listener);
   }
 
   Resource<Z> getResource() {
     return resource;
   }
 
-  boolean isCacheable() {
-    return isCacheable;
+  boolean isMemoryCacheable() {
+    return isMemoryCacheable;
   }
 
   @NonNull
@@ -97,19 +100,28 @@ synchronized void acquire() {
    * done with the resource. Generally external users should never call this method, the framework
    * will take care of this for you.
    */
-  synchronized void release() {
-    if (acquired <= 0) {
-      throw new IllegalStateException("Cannot release a recycled or not yet acquired resource");
-    }
-    if (--acquired == 0) {
-      listener.onResourceReleased(key, this);
+  // listener is effectively final.
+  @SuppressWarnings("SynchronizeOnNonFinalField")
+  void release() {
+    // To avoid deadlock, always acquire the listener lock before our lock so that the locking
+    // scheme is consistent (Engine -> EngineResource). Violating this order leads to deadlock
+    // (b/123646037).
+    synchronized (listener) {
+      synchronized (this) {
+        if (acquired <= 0) {
+          throw new IllegalStateException("Cannot release a recycled or not yet acquired resource");
+        }
+        if (--acquired == 0) {
+          listener.onResourceReleased(key, this);
+        }
+      }
     }
   }
 
   @Override
   public synchronized String toString() {
     return "EngineResource{"
-        + "isCacheable=" + isCacheable
+        + "isMemoryCacheable=" + isMemoryCacheable
         + ", listener=" + listener
         + ", key=" + key
         + ", acquired=" + acquired
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
index 1991d205f..652505fd0 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
@@ -44,17 +44,23 @@
    * arbitrary.
    */
   private static final int MINIMUM_DECODES_BETWEEN_FD_CHECKS = 50;
-
   /**
    * 700 with an error of 50 Bitmaps in between at two FDs each lets us use up to 800 FDs for
    * hardware Bitmaps.
+   *
+   * <p>Reduced on S7 Edge devices due to  https://github.com/bumptech/glide/issues/3275.
    */
-  private static final int MAXIMUM_FDS_FOR_HARDWARE_CONFIGS = 700;
+  private static final int MAXIMUM_FDS_FOR_HARDWARE_CONFIGS = isSamsungGalaxyS7Edge() ? 350 : 700;
+
+  private static volatile HardwareConfigState instance;
 
   private volatile int decodesSinceLastFdCheck;
   private volatile boolean isHardwareConfigAllowed = true;
 
-  private static volatile HardwareConfigState instance;
+  // See https://bit.ly/2IW5AmI
+  private static boolean isSamsungGalaxyS7Edge() {
+    return Build.MODEL.startsWith("SM-G935") || Build.MODEL.startsWith("SM-G930");
+  }
 
   static HardwareConfigState getInstance() {
     if (instance == null) {
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index f712ce726..8a255d412 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -135,9 +135,7 @@ public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
   @SuppressWarnings("WeakerAccess") // Public API
   @NonNull
   @CheckResult
-  public static RequestOptions overrideOf(
-      @IntRange(from = 0) int width,
-      @IntRange(from = 0) int height) {
+  public static RequestOptions overrideOf(int width, int height) {
     return new RequestOptions().override(width, height);
   }
 
@@ -148,7 +146,7 @@ public static RequestOptions overrideOf(
   @SuppressWarnings("WeakerAccess") // Public API
   @NonNull
   @CheckResult
-  public static RequestOptions overrideOf(@IntRange(from = 0) int size) {
+  public static RequestOptions overrideOf(int size) {
     return overrideOf(size, size);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
index ce7ebba38..1939bd5aa 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
@@ -61,8 +61,9 @@ public CustomTarget() {
    * as the requested size (unless overridden by
    * {@link com.bumptech.glide.request.RequestOptions#override(int)} in the request).
    *
-   * @param width The requested width (>= 0, or == Target.SIZE_ORIGINAL).
-   * @param height The requested height (>= 0, or == Target.SIZE_ORIGINAL).
+   * @param width The requested width (> 0, or == Target.SIZE_ORIGINAL).
+   * @param height The requested height (> 0, or == Target.SIZE_ORIGINAL).
+   * @throws IllegalArgumentException if width/height doesn't meet (> 0, or == Target.SIZE_ORIGINAL)
    */
   public CustomTarget(int width, int height) {
      if (!Util.isValidDimensions(width, height)) {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
index 7c25a0580..903ebeea6 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
@@ -1,8 +1,10 @@
 package com.bumptech.glide.load.data.mediastore;
 
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -89,6 +91,12 @@ public void testReturnsOpenedInputStreamWhenFileFound() throws FileNotFoundExcep
     assertEquals(expected, harness.get().open(harness.uri));
   }
 
+  @Test
+  public void open_returnsNull_whenQueryThrowsSecurityException() throws FileNotFoundException {
+    when(harness.query.query(any(Uri.class))).thenThrow(new SecurityException());
+    assertThat(harness.get().open(harness.uri)).isNull();
+  }
+
   @Test
   public void testVideoQueryReturnsVideoCursor() {
     Uri queryUri = MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI;
@@ -123,7 +131,7 @@ private static ContentResolver getContentResolver() {
     final FileService service = mock(FileService.class);
     final ArrayPool byteArrayPool = new LruArrayPool();
 
-    public Harness() {
+    Harness() {
       cursor.addRow(new String[] { file.getAbsolutePath() });
       when(query.query(eq(uri))).thenReturn(cursor);
       when(service.get(eq(file.getAbsolutePath()))).thenReturn(file);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
index a467ea774..acc1b6a30 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
@@ -7,6 +7,7 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 
+import android.os.Looper;
 import android.support.annotation.NonNull;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.engine.ActiveResources.DequeuedResourceCallback;
@@ -26,8 +27,8 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(shadows = GlideShadowLooper.class)
@@ -60,16 +61,14 @@ public void get_withMissingKey_returnsNull() {
 
   @Test
   public void get_withActiveKey_returnsResource() {
-    EngineResource<Object> expected =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> expected = newCacheableEngineResource();
     resources.activate(key, expected);
     assertThat(resources.get(key)).isEqualTo(expected);
   }
 
   @Test
   public void get_withDeactivatedKey_returnsNull() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.deactivate(key);
     assertThat(resources.get(key)).isNull();
@@ -82,8 +81,7 @@ public void deactivate_withNotActiveKey_doesNotThrow() {
 
   @Test
   public void get_withActiveAndClearedKey_returnsNull() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.activeEngineResources.get(key).clear();
     assertThat(resources.get(key)).isNull();
@@ -91,8 +89,7 @@ public void get_withActiveAndClearedKey_returnsNull() {
 
   @Test
   public void get_withActiveAndClearedKey_andCacheableResource_callsListenerWithWrappedResource() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.activeEngineResources.get(key).clear();
     resources.get(key);
@@ -106,8 +103,7 @@ public void get_withActiveAndClearedKey_andCacheableResource_callsListenerWithWr
 
   @Test
   public void get_withActiveAndClearedKey_andCacheableResource_callsListenerWithNotRecycleable() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.activeEngineResources.get(key).clear();
     resources.get(key);
@@ -122,8 +118,7 @@ public void get_withActiveAndClearedKey_andCacheableResource_callsListenerWithNo
 
   @Test
   public void get_withActiveAndClearedKey_andCacheableResource_callsListenerWithCacheable() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.activeEngineResources.get(key).clear();
     resources.get(key);
@@ -132,13 +127,12 @@ public void get_withActiveAndClearedKey_andCacheableResource_callsListenerWithCa
 
     verify(listener).onResourceReleased(eq(key), captor.capture());
 
-    assertThat(captor.getValue().isCacheable()).isTrue();
+    assertThat(captor.getValue().isMemoryCacheable()).isTrue();
   }
 
   @Test
   public void get_withActiveAndClearedKey_andNotCacheableResource_doesNotCallListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ false, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newNonCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.activeEngineResources.get(key).clear();
     resources.get(key);
@@ -148,8 +142,7 @@ public void get_withActiveAndClearedKey_andNotCacheableResource_doesNotCallListe
 
   @Test
   public void queueIdle_afterResourceRemovedFromActive_doesNotCallListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -162,8 +155,7 @@ public void queueIdle_afterResourceRemovedFromActive_doesNotCallListener() {
 
   @Test
   public void queueIdle_withCacheableResourceInActive_callListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -175,7 +167,7 @@ public void queueIdle_withCacheableResourceInActive_callListener() {
 
     EngineResource<?> released = captor.getValue();
     assertThat(released.getResource()).isEqualTo(resource);
-    assertThat(released.isCacheable()).isTrue();
+    assertThat(released.isMemoryCacheable()).isTrue();
 
     released.recycle();
     verify(resource, never()).recycle();
@@ -183,8 +175,7 @@ public void queueIdle_withCacheableResourceInActive_callListener() {
 
   @Test
   public void queueIdle_withNotCacheableResourceInActive_doesNotCallListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ false, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newNonCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -196,8 +187,7 @@ public void queueIdle_withNotCacheableResourceInActive_doesNotCallListener() {
 
   @Test
   public void queueIdle_withCacheableResourceInActive_removesResourceFromActive() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -208,8 +198,7 @@ public void queueIdle_withCacheableResourceInActive_removesResourceFromActive()
 
   @Test
   public void queueIdle_withNotCacheableResourceInActive_removesResourceFromActive() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ false, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newNonCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -220,8 +209,7 @@ public void queueIdle_withNotCacheableResourceInActive_removesResourceFromActive
 
   @Test
   public void get_withQueuedReference_returnsResource() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -232,8 +220,7 @@ public void get_withQueuedReference_returnsResource() {
 
   @Test
   public void get_withQueuedReference_doesNotNotifyListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -244,8 +231,7 @@ public void get_withQueuedReference_doesNotNotifyListener() {
 
   @Test
   public void queueIdle_withQueuedReferenceRetrievedFromGet_notifiesListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -261,8 +247,7 @@ public void queueIdle_withQueuedReferenceRetrievedFromGet_notifiesListener() {
 
   @Test
   public void queueIdle_withQueuedReferenceRetrievedFromGetAndNotCacheable_doesNotNotifyListener() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ false, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newNonCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -303,8 +288,7 @@ public void run() {
               });
       resources.setListener(listener);
 
-      EngineResource<Object> engineResource =
-          new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+      EngineResource<Object> engineResource = newCacheableEngineResource();
       resources.activate(key, engineResource);
 
       ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -349,16 +333,14 @@ public void run() {
               });
       resources.setListener(listener);
 
-      EngineResource<Object> first =
-          new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+      EngineResource<Object> first = newCacheableEngineResource();
       resources.activate(key, first);
 
       ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
       CountDownLatch latch = getLatchForClearedRef();
       weakRef.enqueue();
 
-      EngineResource<Object> second =
-          new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+      EngineResource<Object> second = newCacheableEngineResource();
       resources.activate(key, second);
       blockExecutor.countDown();
 
@@ -373,8 +355,7 @@ public void run() {
 
   @Test
   public void activate_withNonCacheableResource_doesNotSaveResource() {
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ false, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newNonCacheableEngineResource();
     resources.activate(key, engineResource);
 
     assertThat(resources.activeEngineResources.get(key).resource).isNull();
@@ -384,8 +365,7 @@ public void activate_withNonCacheableResource_doesNotSaveResource() {
   public void get_withActiveClearedKey_cacheableResource_retentionDisabled_doesNotCallListener() {
     resources = new ActiveResources(/*isActiveResourceRetentionAllowed=*/ false);
     resources.setListener(listener);
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
     resources.activeEngineResources.get(key).clear();
     resources.get(key);
@@ -397,8 +377,7 @@ public void get_withActiveClearedKey_cacheableResource_retentionDisabled_doesNot
   public void get_withQueuedReference_retentionDisabled_returnsResource() {
     resources = new ActiveResources(/*isActiveResourceRetentionAllowed=*/ false);
     resources.setListener(listener);
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -411,8 +390,7 @@ public void get_withQueuedReference_retentionDisabled_returnsResource() {
   public void queueIdle_withQueuedReferenceRetrievedFromGet_retentionDisabled_doesNotNotify() {
     resources = new ActiveResources(/*isActiveResourceRetentionAllowed=*/ false);
     resources.setListener(listener);
-    EngineResource<Object> engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
+    EngineResource<Object> engineResource = newCacheableEngineResource();
     resources.activate(key, engineResource);
 
     ResourceWeakReference weakRef = resources.activeEngineResources.get(key);
@@ -438,7 +416,7 @@ private void waitForLatch(CountDownLatch latch) {
     } catch (InterruptedException e) {
       throw new RuntimeException(e);
     }
-    ShadowLooper.getShadowMainLooper().runToEndOfTasks();
+    Shadows.shadowOf(Looper.getMainLooper()).runToEndOfTasks();
   }
 
   private CountDownLatch getLatchForClearedRef() {
@@ -452,6 +430,16 @@ public void onResourceDequeued() {
     return toWait;
   }
 
+  private EngineResource<Object> newCacheableEngineResource() {
+    return new EngineResource<>(
+        resource, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ false, key, listener);
+  }
+
+  private EngineResource<Object> newNonCacheableEngineResource() {
+    return new EngineResource<>(
+        resource, /*isMemoryCacheable=*/ false, /*isRecyclable=*/ false, key, listener);
+  }
+
   @SuppressWarnings("unchecked")
   private static ArgumentCaptor<EngineResource<?>> getEngineResourceCaptor() {
     return (ArgumentCaptor<EngineResource<?>>) (ArgumentCaptor<?>)
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
index d6bb580ed..51368f8a7 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
@@ -21,6 +21,7 @@
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.engine.EngineResource.ResourceListener;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.load.engine.executor.MockGlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
@@ -66,7 +67,7 @@ public void testListenerNotifiedJobCompleteOnOnResourceReady() {
 
     ShadowLooper.runUiThreadTasks();
 
-    verify(harness.listener)
+    verify(harness.engineJobListener)
         .onEngineJobComplete(eq(job), eq(harness.key), eq(harness.engineResource));
   }
 
@@ -110,7 +111,7 @@ public void testListenerNotifiedJobCompleteOnException() {
     job.start(harness.decodeJob);
     job.onLoadFailed(new GlideException("test"));
     ShadowLooper.runUiThreadTasks();
-    verify(harness.listener)
+    verify(harness.engineJobListener)
         .onEngineJobComplete(eq(job), eq(harness.key), isNull(EngineResource.class));
   }
 
@@ -122,7 +123,9 @@ public void testResourceIsCacheableWhenIsCacheableOnReady() {
     job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.factory).build(anyResource(), eq(harness.isCacheable));
+    verify(harness.factory)
+        .build(
+            anyResource(), eq(harness.isCacheable), eq(harness.key), eq(harness.resourceListener));
   }
 
   @Test
@@ -133,7 +136,9 @@ public void testResourceIsCacheableWhenNotIsCacheableOnReady() {
     job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.factory).build(anyResource(), eq(harness.isCacheable));
+    verify(harness.factory)
+        .build(
+            anyResource(), eq(harness.isCacheable), eq(harness.key), eq(harness.resourceListener));
   }
 
   @Test
@@ -142,7 +147,7 @@ public void testListenerNotifiedOfCancelOnCancel() {
     job.start(harness.decodeJob);
     job.cancel();
 
-    verify(harness.listener).onEngineJobCancelled(eq(job), eq(harness.key));
+    verify(harness.engineJobListener).onEngineJobCancelled(eq(job), eq(harness.key));
   }
 
   @Test
@@ -205,7 +210,7 @@ public void testDoesNotNotifyCancelledIfCompletes() {
     job.start(harness.decodeJob);
     job.onResourceReady(harness.resource, harness.dataSource);
 
-    verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));
+    verify(harness.engineJobListener, never()).onEngineJobCancelled(eq(job), eq(harness.key));
   }
 
   @Test
@@ -215,7 +220,7 @@ public void testDoesNotNotifyCancelledIfAlreadyCancelled() {
     job.cancel();
     job.cancel();
 
-    verify(harness.listener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));
+    verify(harness.engineJobListener, times(1)).onEngineJobCancelled(eq(job), eq(harness.key));
   }
 
   @Test
@@ -224,9 +229,10 @@ public void testDoesNotNotifyCancelledIfReceivedException() {
     job.start(harness.decodeJob);
     job.onLoadFailed(new GlideException("test"));
 
-    verify(harness.listener)
+    verify(harness.engineJobListener)
         .onEngineJobComplete(eq(job), eq(harness.key), isNull(EngineResource.class));
-    verify(harness.listener, never()).onEngineJobCancelled(any(EngineJob.class), any(Key.class));
+    verify(harness.engineJobListener, never())
+        .onEngineJobCancelled(any(EngineJob.class), any(Key.class));
   }
 
   @Test
@@ -481,7 +487,8 @@ public void testSubmitsDecodeJobToUnlimitedSourceServiceWhenDecodingFromSourceOn
     final Key key = mock(Key.class);
     final Resource<Object> resource = mockResource();
     final EngineResource<Object> engineResource = mock(EngineResource.class);
-    final EngineJobListener listener = mock(EngineJobListener.class);
+    final EngineJobListener engineJobListener = mock(EngineJobListener.class);
+    final ResourceListener resourceListener = mock(ResourceListener.class);
     final boolean isCacheable = true;
     final boolean useUnlimitedSourceGeneratorPool = false;
     final boolean useAnimationPool = false;
@@ -499,14 +506,15 @@ public void testSubmitsDecodeJobToUnlimitedSourceServiceWhenDecodingFromSourceOn
     final DataSource dataSource = DataSource.LOCAL;
 
     public MultiCbHarness() {
-      when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);
+      when(factory.build(resource, isCacheable, key, resourceListener)).thenReturn(engineResource);
       job =
           new EngineJob<>(
               diskCacheService,
               sourceService,
               sourceUnlimitedService,
               animationService,
-              listener,
+              engineJobListener,
+              resourceListener,
               pool,
               factory);
       job.init(
@@ -532,7 +540,8 @@ public MultiCbHarness() {
     final ResourceCallback cb = mock(ResourceCallback.class);
     final Resource<Object> resource = mockResource();
     final EngineResource<Object> engineResource = mock(EngineResource.class);
-    final EngineJobListener listener = mock(EngineJobListener.class);
+    final EngineJobListener engineJobListener = mock(EngineJobListener.class);
+    final ResourceListener resourceListener = mock(ResourceListener.class);
     final GlideExecutor diskCacheService = MockGlideExecutor.newMainThreadExecutor();
     final GlideExecutor sourceService = MockGlideExecutor.newMainThreadExecutor();
     final GlideExecutor sourceUnlimitedService = MockGlideExecutor.newMainThreadExecutor();
@@ -546,14 +555,15 @@ public MultiCbHarness() {
     final DataSource dataSource = DataSource.DATA_DISK_CACHE;
 
     EngineJob<Object> getJob() {
-      when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);
+      when(factory.build(resource, isCacheable, key, resourceListener)).thenReturn(engineResource);
       EngineJob<Object> result =
           new EngineJob<>(
               diskCacheService,
               sourceService,
               sourceUnlimitedService,
               animationService,
-              listener,
+              engineJobListener,
+              resourceListener,
               pool,
               factory);
       result.init(
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
index 3468931eb..954e4f1b7 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
@@ -32,8 +32,8 @@
   public void setUp() {
     MockitoAnnotations.initMocks(this);
     engineResource =
-        new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ true);
-    engineResource.setResourceListener(cacheKey, listener);
+        new EngineResource<>(
+            resource, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ true, cacheKey, listener);
   }
 
   @Test
@@ -143,24 +143,36 @@ public void testThrowsIfReleasedMoreThanAcquired() {
 
   @Test(expected = NullPointerException.class)
   public void testThrowsIfWrappedResourceIsNull() {
-    new EngineResource<>(/*toWrap=*/ null, /*isCacheable=*/ false, /*isRecyclable=*/ true);
+    new EngineResource<>(
+        /*toWrap=*/ null, /*isMemoryCacheable=*/ false, /*isRecyclable=*/ true, cacheKey, listener);
   }
 
   @Test
   public void testCanSetAndGetIsCacheable() {
     engineResource =
-        new EngineResource<>(mockResource(), /*isCacheable=*/ true, /*isRecyclable=*/ true);
-    assertTrue(engineResource.isCacheable());
+        new EngineResource<>(
+            mockResource(),
+            /*isMemoryCacheable=*/ true,
+            /*isRecyclable=*/ true,
+            cacheKey,
+            listener);
+    assertTrue(engineResource.isMemoryCacheable());
     engineResource =
-        new EngineResource<>(mockResource(), /*isCacheable=*/ false, /*isRecyclable=*/ true);
-    assertFalse(engineResource.isCacheable());
+        new EngineResource<>(
+            mockResource(),
+            /*isMemoryCacheable=*/ false,
+            /*isRecyclable=*/ true,
+            cacheKey,
+            listener);
+    assertFalse(engineResource.isMemoryCacheable());
   }
 
   @Test
   public void release_whenNotRecycleable_doesNotRecycleResource() {
     resource = mockResource();
-    engineResource = new EngineResource<>(resource, /*isCacheable=*/ true, /*isRecyclable=*/ false);
-    engineResource.setResourceListener(cacheKey, listener);
+    engineResource =
+        new EngineResource<>(
+            resource, /*isMemoryCacheable=*/ true, /*isRecyclable=*/ false, cacheKey, listener);
     engineResource.recycle();
 
     verify(listener, never()).onResourceReleased(any(Key.class), any(EngineResource.class));
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 207d7abcc..172c8b1d7 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -267,15 +267,6 @@ public void testRunnerIsRemovedFromRunnersOnEngineNotifiedJobComplete() {
     assertThat(harness.jobs.getAll()).doesNotContainKey(harness.cacheKey);
   }
 
-  @Test
-  public void testEngineIsSetAsResourceListenerOnJobComplete() {
-    harness.doLoad();
-
-    harness.callOnEngineJobComplete();
-
-    verify(harness.resource).setResourceListener(eq(harness.cacheKey), eq(harness.getEngine()));
-  }
-
   @Test
   public void testEngineIsNotSetAsResourceListenerIfResourceIsNullOnJobComplete() {
     harness.doLoad();
@@ -285,7 +276,7 @@ public void testEngineIsNotSetAsResourceListenerIfResourceIsNullOnJobComplete()
 
   @Test
   public void testResourceIsAddedToActiveResourcesOnEngineComplete() {
-    when(harness.resource.isCacheable()).thenReturn(true);
+    when(harness.resource.isMemoryCacheable()).thenReturn(true);
     harness.callOnEngineJobComplete();
 
     EngineResource<?> resource = harness.activeResources.get(harness.cacheKey);
@@ -300,7 +291,7 @@ public void testDoesNotPutNullResourceInActiveResourcesOnEngineComplete() {
 
   @Test
   public void testDoesNotPutResourceThatIsNotCacheableInActiveResourcesOnEngineComplete() {
-    when(harness.resource.isCacheable()).thenReturn(false);
+    when(harness.resource.isMemoryCacheable()).thenReturn(false);
     harness.callOnEngineJobComplete();
     assertThat(harness.activeResources.get(harness.cacheKey)).isNull();
   }
@@ -326,7 +317,7 @@ public void testJobIsNotRemovedFromJobsIfOldJobIsCancelled() {
   @Test
   public void testResourceIsAddedToCacheOnReleased() {
     final Object expected = new Object();
-    when(harness.resource.isCacheable()).thenReturn(true);
+    when(harness.resource.isMemoryCacheable()).thenReturn(true);
     when(harness.resource.get()).thenReturn(expected);
     doAnswer(
             new Answer<Void>() {
@@ -347,7 +338,7 @@ public Void answer(InvocationOnMock invocationOnMock) {
 
   @Test
   public void testResourceIsNotAddedToCacheOnReleasedIfNotCacheable() {
-    when(harness.resource.isCacheable()).thenReturn(false);
+    when(harness.resource.isMemoryCacheable()).thenReturn(false);
     harness.getEngine().onResourceReleased(harness.cacheKey, harness.resource);
 
     verify(harness.cache, never()).put(eq(harness.cacheKey), eq(harness.resource));
@@ -355,7 +346,7 @@ public void testResourceIsNotAddedToCacheOnReleasedIfNotCacheable() {
 
   @Test
   public void testResourceIsRecycledIfNotCacheableWhenReleased() {
-    when(harness.resource.isCacheable()).thenReturn(false);
+    when(harness.resource.isMemoryCacheable()).thenReturn(false);
     harness.getEngine().onResourceReleased(harness.cacheKey, harness.resource);
     verify(harness.resourceRecycler).recycle(eq(harness.resource));
   }
@@ -446,7 +437,7 @@ public void runTest() {
 
   @Test
   public void load_afterResourceIsLoadedInActiveResources_returnsFromMemoryCache() {
-    when(harness.resource.isCacheable()).thenReturn(true);
+    when(harness.resource.isMemoryCacheable()).thenReturn(true);
     doAnswer(
             new Answer<Object>() {
               @Override
@@ -465,7 +456,7 @@ public Object answer(InvocationOnMock invocationOnMock) {
   @Test
   public void load_afterResourceIsLoadedAndReleased_returnsFromMemoryCache() {
     harness.cache = new LruResourceCache(100);
-    when(harness.resource.isCacheable()).thenReturn(true);
+    when(harness.resource.isMemoryCacheable()).thenReturn(true);
     doAnswer(
             new Answer<Object>() {
               @Override
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
index 9256943d9..446f67953 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
@@ -278,6 +278,13 @@ public synchronized Bitmap getNextFrame() {
       act = pct;
       // Set transparent color if specified.
       act[currentFrame.transIndex] = COLOR_TRANSPARENT_BLACK;
+
+      if (currentFrame.dispose == DISPOSAL_BACKGROUND && framePointer == 0) {
+        // TODO: We should check and see if all individual pixels are replaced. If they are, the
+        // first frame isn't actually transparent. For now, it's simpler and safer to assume
+        // drawing a transparent background means the GIF contains transparency.
+        isFirstFrameTransparent = true;
+      }
     }
 
     // Transfer pixel data to image.
@@ -446,11 +453,6 @@ private Bitmap setPixels(GifFrame currentFrame, GifFrame previousFrame) {
           if (currentFrame.lct != null && header.bgIndex == currentFrame.transIndex) {
             c = COLOR_TRANSPARENT_BLACK;
           }
-        } else if (framePointer == 0) {
-          // TODO: We should check and see if all individual pixels are replaced. If they are, the
-          // first frame isn't actually transparent. For now, it's simpler and safer to assume
-          // drawing a transparent background means the GIF contains transparency.
-          isFirstFrameTransparent = true;
         }
         // The area used by the graphic must be restored to the background color.
         int downsampledIH = previousFrame.ih / sampleSize;
@@ -540,7 +542,8 @@ private void copyIntoScratchFast(GifFrame currentFrame) {
     }
 
     isFirstFrameTransparent =
-        isFirstFrameTransparent == null && isFirstFrame && transparentColorIndex != -1;
+        (isFirstFrameTransparent != null && isFirstFrameTransparent)
+            || (isFirstFrameTransparent == null && isFirstFrame && transparentColorIndex != -1);
   }
 
   private void copyCopyIntoScratchRobust(GifFrame currentFrame) {
