diff --git a/.gitmodules b/.gitmodules
index 525eef67a..d9d405d51 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,12 +1,6 @@
-[submodule "third_party/volley/volley"]
-	path = third_party/volley/volley
-	url = https://android.googlesource.com/platform/frameworks/volley
 [submodule "third_party/disklrucache"]
 	path = third_party/disklrucache
 	url = https://github.com/sjudd/DiskLruCache.git
-[submodule "library/src/androidTest/resources/exif-orientation-examples"]
-	path = library/src/androidTest/resources/exif-orientation-examples
+[submodule "library/test/src/test/resources/exif-orientation-examples"]
+	path = library/test/src/test/resources/exif-orientation-examples
 	url = https://github.com/recurser/exif-orientation-examples.git
-[submodule "library/src/test/resources/exif-orientation-examples"]
-	path = library/src/test/resources/exif-orientation-examples
-	url = https://github.com/recurser/exif-orientation-examples
diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 000000000..7b49f092c
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,53 @@
+# Change Log
+
+## [v4.5.0](https://github.com/bumptech/glide/tree/HEAD)
+
+[Full Changelog](https://github.com/bumptech/glide/compare/v4.4.0...v4.5.0)
+
+## Features
+* Add an API to pause all requests for a given `Activity` or `Fragment` to allow callers to manually reduce memory when their Fragment or Application is backgrounded (@kurtisnelson, 09e33a2133eb1d4005b227439c0c53c9c4e8c89b) 
+* Fully support Bitmap re-use for `RGBA_F16` `Bitmap`s. Previously Glide supported decoding `RGBA_F16` `Bitmap`s, but would not re-use any stored in the `BitmapPool` when doing so (cc0288c3b4bfb82a109a3f279af52c57fc5e1499)
+* Support decoding Videos from resources as `AssetFileDescriptor`s (6e9866b5a19d06625006a9a8c605db21047df74b)
+* Added support for the [`MediaMetadataRetriever#getScaledFrameAtTime`][2] method added in OMR1 to marginally reduce memory usage when decoding video frames (ded8f77c9f2471e3c3413aa234656df8cf72dd2f)
+* Support transcoding `BitmapDrawable`s to `byte[]`s (015d2659a9ea7438ab72b94500a0921f8ff35aa3)
+
+## Bugs
+* Cleaned up old and incorrect `@TargetApi` annoatations (@SUPERCILEX, 67783961c71639871cc3687894976e6caeb6609e)
+* Added `@Nullable` and `@NonNull` annotations to many of Glide's APIs (@SUPERCILEX, dc12b60c8f0a21eb9b3ab2164471c93d2e20ae25, c3dafde00a061bafcd43a739336ca3503af13a7d, 0cffd1da977e9ca334032ebc1d798213a177aab7, f541b65e596a49d252ba6b80d3b05a111ce93461, 36e0b802c3a1e564caf230b351a6438fa32100ac, 650bb7770d08b279c2a7f00e25337618da54f7f3, bd2f21595d3404e6aadf1f4333bef369509c4a56, e35a73b4e78f2f05dc5c1163b8083ac1b662b02f, f37ced1512f7eabf37f6c93b1b7ffb32c3629b72, bb96b633174184965cd1bdf9027ef3843f59c54f, 276d4ff4bdce85763c985c90a87ea5e858a1ffe4, c3107801dab8ccbe121157bee7dba29b7d9723e6, )
+* Fixed a case where restarting an identical request with `skipMemoryCache(true)` would complete the load from the memory cache (#2663, 3dc1d18da75b44d8d97f4161fe0d330e4993e537)
+* Fixed decoding interlaced and downsampled GIFs as static images (#2698, b64f23de2a7ba38fceac1cda85f05158e80132f9)
+* Added more models to the list of devices requiring a lock when decoding or drawing Bitmaps (@strooooke, #738, c809f7ec03bbfc2c529f2c211cfc644c2073aab0, e923554b10fa9625f4fa6fe706f3d5a553843ab9)
+* Fixed a race condition where starting multiple loads simultaneously the first time any request is made for a given model and resource could lead to NPEs (#2708, d427cbd33206cbcc88ac4a0f0c29ef831d4bb5b5)
+* Make the annotation processor tests pass on Windows (@SUPERCILEX, #2709, 2b4be8b8c210abb34740f0778434679b644a6525)
+* Fix NPE and RuntimeExceptions thrown in `DefaultConnectivityMonitor` on some devices (c902730b75085cecdd40cd5817453d8af0eff4e9)
+* Only trim to half of the memory cache maximum size, not the current size, when background the app (@kurtisnelson, 429b7e2d9854da549eb0b852e2e08de176f05fbf)
+* Fix a `StateVerifier` exception thrown when `ResourceEncoder` implementations unexpectedly throw exceptions while writing resources to Glide's disk cache (6c7cf3f8cae998469a7e7df8c70c459311479a38)
+* Fix an NPE error message when `ResourceDrawableDecoder` fails to decode an image (d522ac7249ca1bf71f6de30e62d71a1faa8d4c4c)
+* Fix an `IllegalStateException` if a request using [`.error()`][3] is cleared while the error request is running (#2767, 9c70aa5f92f523c6bac29628554fdde5428e0cdd)
+* Cleaned up a number of accessor classes generated by unnecessarily strict visibility in inner classes (@TWiStErRob, e02969417a75048af0fcb61c5fbf6ea94bd2c4aa)
+* Updated OkHttp and removed a no longer necessary workaround for `ClassCastException`s thrown by the Android framework on O (#2355, 642b2dc431e54cb677088e934743d78f1ad84810)
+* Added missing annotations to overrides on some of Glide's generated classes (@TWiStErRob, 62d7464fb4f874897121591815ecb7503f7bc01b, 9fde00628f223e96372aeceadcb3e35a0635cb6d, d7bb6f956b34dd00ad0dbcb64f15f4b9c2fb0538)
+* Avoid throwing exceptions when `LruBitmapPool` was asked to provide `Bitmap`s with a `null` config (c1036c1cdc3c85827bf566e104a12ca880e26411)
+
+
+## Behavior Changes
+* Default to `aar` packaging in POMs, so `@aar` should no longer be required to avoid warnings about jars depending on aars (06ba3442fd8d25c943e986c2bd6c138aa4b390e3)
+* Default active resource retention to false (73759b9eb1d3b186c4deb6412137b0b1193fbd5d), but leave the option in `GlideBuilder` to manually enable it. Enabling active resource retention can lead to recycled `Bitmap` errors or `Bitmap` re-use bugs if applications call `Bitmap.recycle()` on any images loaded by Glide or mutate the contents of `Bitmap`s loaded by Glide. 
+* Treat devices with API < 19 as having `ActivityManager.isLowRam` set to `true` (#2650, b221d4bbec138efcdb1aabd07600b7df713f9e40)
+
+## Breaking Changes
+* Removed deprecated constructors requiring `Context`s in most of Glide's default `Transformation` (23975d933bcda7d136340b9988f2bd575065b667, 733b2e0f25a6d3ddbb4942172e92a9fe01c87363, 9bedc2b5fe5b1b2e05203af173c73f0e599a0177, 55594baf791ccb49dd5cdc256662360717b409bb, d8f6224d127b984c3ac1356d44f62126e4843d07, d840533448fd7bde528e0af7ce10c49653430c12, 2f76842b8ef9ac15c43a2c5175f23496b5a13f37, 144ac5374eb0bd11a8f8e92d7346dafac1426621, 150ebabbd7d5e8751c8678fa01418d1b1f1259da, 92d761d002da25320f2c504267f56d73b889b2d4, a6f1b1c1bef5b4e8be736c564792715266b07463) 
+
+## Deprecations
+* Deprecated [`VideoBitmapDecoder`][4], use [`VideoDecoder`][5] instead.
+
+## Build Changes
+* Glide must be compiled against API 27 (@SUPERCILEX, #2730, 75c2a8b6d216013e7fbf797231839a8f4c82757a)
+* Glide uses v27 of the support libraries (though v26 should work as well, to use v26 of the support library, see [Glide's Android SDK requirements docs page][1])
+* Updated to PMD 6.0.0 (@TWiStErRob, f16aef4c6ad583bafe796c7a952a0d10920c4dcd)
+* Fix a PMD failure when building with --profile or any other way in which class files didn't happen to have already been compiled (@TWiStErRob, #2776, fd73179166b15af246769c9b1ae205c65c584e5b)
+
+[1]: http://bumptech.github.io/glide/doc/download-setup.html#android-sdk-requirements
+[2]: https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getScaledFrameAtTime(long,%20int,%20int,%20int)
+[3]: http://bumptech.github.io/glide/javadocs/440/com/bumptech/glide/RequestBuilder.html#error-com.bumptech.glide.RequestBuilder-
+[4]: http://bumptech.github.io/glide/javadocs/450/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.html
diff --git a/annotation/compiler/test/build.gradle b/annotation/compiler/test/build.gradle
index 63c8404e3..5bb534de3 100644
--- a/annotation/compiler/test/build.gradle
+++ b/annotation/compiler/test/build.gradle
@@ -46,3 +46,6 @@ task regenerateTestResources {
     }
 }
 regenerateTestResources.finalizedBy(test)
+
+test.maxParallelForks = 2
+
diff --git a/build.gradle b/build.gradle
index 9b8145722..8987d5961 100644
--- a/build.gradle
+++ b/build.gradle
@@ -60,7 +60,9 @@ subprojects { project ->
     }
 
     project.afterEvaluate {
-        if (project.hasProperty("android")) {
+        if (project.hasProperty("android")
+                && project.name != 'pmd'
+                && project.name != 'findbugs') {
             android {
                 lintOptions {
                     warningsAsErrors true
@@ -69,6 +71,12 @@ subprojects { project ->
                     abortOnError false
                 }
             }
+
+            android.variantFilter { variant ->
+                if(variant.buildType.name == 'release') {
+                    variant.setIgnore(true)
+                }
+            }
         }
     }
 }
@@ -113,7 +121,7 @@ subprojects { project ->
         diffMaxViolations = 0
 
         // Formats are listed here: https://github.com/tomasbjerre/violations-lib
-        def dir = projectDir.absolutePath;
+        def dir = projectDir.absolutePath
         violations = [
                 ["FINDBUGS",    dir, ".*/findbugs/.*\\.xml\$",   "Findbugs"],
                 ["PMD",         dir, ".*/pmd/.*\\.xml\$",        "PMD"],
diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index f40e867cc..32352561b 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -5,7 +5,7 @@
     "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
 
 <suppressions>
-    <suppress files=".*[/\\]library[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
+    <suppress files=".*[/\\]library[/\\]test[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]annotation[/\\]compiler[/\\]test[/\\]src[/\\]test[/\\]resources[/\\].*" checks=".*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>
diff --git a/glide/build.gradle b/glide/build.gradle
index bb7a98b70..ac0ec536a 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -61,8 +61,8 @@ def getInternalJavaProjectsForJavadoc() {
     asProjects(getJavaPathsForJavadoc())
 }
 
-def getReleaseVariantAndroidProjectsForJar() {
-    getAndroidLibraryVariantsForJar('release')
+def getAndroidProjectsForJar() {
+    getAndroidLibraryVariantsForJar('debug')
 }
 
 def getAndroidLibraryVariantsForJar(variantName) {
@@ -102,7 +102,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
 // Generate javadocs and sources containing batched documentation and sources for all internal
 // projects.
-['release'].each { variantName ->
+['debug'].each { variantName ->
 
     task("${variantName}SourceJar", type: Jar) {
         from getSourceFilesForVariantJar(variantName)
@@ -131,7 +131,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
                             // Finds dependencies of Android packages that would otherwise be
                             // ignored (Volley in particular)
                             getInternalAndroidProjectsForJavadoc().collect { Project project ->
-                                project.file('build/intermediates/classes/release')
+                                project.file('build/intermediates/classes/debug')
                             }
             )
         }
@@ -161,7 +161,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
 jar {
     from files(
-            getReleaseVariantAndroidProjectsForJar().collect { LibraryVariant variant ->
+            getAndroidProjectsForJar().collect { LibraryVariant variant ->
                 variant.getJavaCompiler().destinationDir
             }
     )
@@ -174,21 +174,21 @@ jar {
 
 (getInternalAndroidProjectsForJar() + getInternalAndroidProjectsForJavadoc()).each {
     project ->
-        releaseJavadoc.dependsOn(project.tasks.compileReleaseSources)
-        jar.dependsOn(project.tasks.compileReleaseSources)
+        debugJavadoc.dependsOn(project.tasks.compileDebugSources)
+        jar.dependsOn(project.tasks.compileDebugSources)
 }
 
 (getInternalJavaProjectsForJar() + getInternalJavaProjectsForJavadoc()).each {
     project ->
-        releaseJavadoc.dependsOn(project.tasks.compileJava)
+        debugJavadoc.dependsOn(project.tasks.compileJava)
         jar.dependsOn(project.tasks.compileJava)
 }
 
 artifacts {
-    archives releaseJavadocJar {
+    archives debugJavadocJar {
         classifier 'javadoc'
     }
-    archives releaseSourceJar {
+    archives debugSourceJar {
         classifier 'sources'
     }
 }
diff --git a/gradle.properties b/gradle.properties
index 54dbc42c2..1d1f415af 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -42,5 +42,5 @@ COMPILE_SDK_VERSION=27
 TARGET_SDK_VERSION=27
 MIN_SDK_VERSION=14
 
-org.gradle.jvmargs=-Xmx2048M
-TEST_JVM_MEMORY_SIZE=2048M
+org.gradle.jvmargs=-Xmx4096M
+TEST_JVM_MEMORY_SIZE=4096M
diff --git a/library/build.gradle b/library/build.gradle
index fc9dfe2cc..a47b7173b 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,40 +1,25 @@
 apply plugin: 'com.android.library'
-apply plugin: 'findbugs'
-apply plugin: 'pmd'
 
 if (!hasProperty('DISABLE_ERROR_PRONE')) {
     apply plugin: "net.ltgt.errorprone"
 }
 
+tasks.withType(JavaCompile) {
+    options.fork = true
+}
+
 dependencies {
     api project(':third_party:gif_decoder')
     api project(':third_party:disklrucache')
     api project(':annotation')
     api "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
     compileOnly "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
-    testImplementation project(':testutil')
-    testImplementation 'com.google.guava:guava-testlib:18.0'
-    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
-    testImplementation "junit:junit:${JUNIT_VERSION}"
-    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
-    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
-    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
 
     if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
         errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
     }
 }
 
-android.testOptions.unitTests.all { Test testTask ->
-    // configure max heap size of the test JVM
-    testTask.maxHeapSize = TEST_JVM_MEMORY_SIZE as String
-    if (JavaVersion.current() <= JavaVersion.VERSION_1_7) {
-        // Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=2048m; support was removed in 8.0
-        testTask.jvmArgs "-XX:MaxPermSize=${TEST_JVM_MEMORY_SIZE}"
-    }
-}
-
 android {
     compileSdkVersion COMPILE_SDK_VERSION as int
 
@@ -42,13 +27,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
         versionName VERSION_NAME as String
-        consumerProguardFiles 'proguard-rules.txt'
-    }
-
-    buildTypes {
-        debug {
-            testCoverageEnabled = false
-        }
     }
 
     compileOptions {
@@ -57,79 +35,12 @@ android {
     }
 }
 
-afterEvaluate {
-    if (tasks.findByName("assembleDebug") == null) {
-        return
-    }
-
-    findbugs {
-        toolVersion FINDBUGS_VERSION
-    }
-
-    tasks.create('findbugs', FindBugs) {
-        dependsOn tasks.compileDebugJavaWithJavac
-
-        description 'Run findbugs'
-        group 'verification'
-
-        classes = fileTree(tasks.compileDebugJavaWithJavac.destinationDir)
-        source android.sourceSets.main.java.srcDirs
-        classpath = files()
-        doFirst {
-            classpath += classPathForQuality()
-        }
-        effort = 'max'
-        excludeFilter = file("findbugs-exclude.xml")
-
-        // Failures are caught and printed by the violations plugin.
-        ignoreFailures = true
-
-        reports {
-            xml.enabled = true
-            html.enabled = false
-        }
-    }
-
-    check.dependsOn('findbugs')
-
-    pmd {
-        toolVersion PMD_VERSION
-    }
-
-    tasks.create('pmd', Pmd) {
-        dependsOn tasks.compileDebugJavaWithJavac
-        targetJdk = TargetJdk.VERSION_1_7
-
-        description 'Run pmd'
-        group 'verification'
-
-        // If ruleSets is not empty, it seems to contain some
-        // defaults which override rules in the ruleset file...
-        ruleSets = []
-        ruleSetFiles = files('pmd-ruleset.xml')
-        source android.sourceSets.main.java.srcDirs
-        classpath = files()
-        classpath += files(tasks.compileDebugJavaWithJavac.destinationDir)
-        doFirst {
-            classpath += classPathForQuality()
-        }
-
-        //TODO enable this once new Gradle containing this flag is out
-        //see https://github.com/gradle/gradle/pull/3125#issuecomment-352442432
-        //incrementalAnalysis = true
-
-        // Failures are caught and printed by the violations plugin.
-        ignoreFailures = true
-
-        reports {
-            xml.enabled = true
-            html.enabled = false
-        }
-    }
-
-    check.dependsOn('pmd')
-}
+check.dependsOn(':library:findbugs:findbugs')
+check.dependsOn(':library:pmd:pmd')
+check.dependsOn(':library:test:check')
 
+// Used in pmd and findbugs subprojects.
+@SuppressWarnings("GroovyUnusedDeclaration")
 def classPathForQuality() {
     return files(
             android.bootClasspath,
diff --git a/library/findbugs/build.gradle b/library/findbugs/build.gradle
new file mode 100644
index 000000000..a2e5b3f2a
--- /dev/null
+++ b/library/findbugs/build.gradle
@@ -0,0 +1,31 @@
+apply plugin: 'findbugs'
+
+findbugs {
+    toolVersion FINDBUGS_VERSION
+}
+
+def library = project(':library')
+
+tasks.create('findbugs', FindBugs) {
+    dependsOn library.tasks.compileDebugJavaWithJavac
+
+    description 'Run findbugs'
+    group 'verification'
+
+    classes = fileTree(library.tasks.compileDebugJavaWithJavac.destinationDir)
+    source library.android.sourceSets.main.java.srcDirs
+    classpath = files()
+    doFirst {
+        classpath += library.classPathForQuality()
+    }
+    effort = 'max'
+    excludeFilter = file("${library.projectDir}/findbugs-exclude.xml")
+
+    // Failures are caught and printed by the violations plugin.
+    ignoreFailures = true
+
+    reports {
+        xml.enabled = true
+        html.enabled = false
+    }
+}
diff --git a/library/pmd/build.gradle b/library/pmd/build.gradle
new file mode 100644
index 000000000..d02349082
--- /dev/null
+++ b/library/pmd/build.gradle
@@ -0,0 +1,39 @@
+apply plugin: 'pmd'
+
+def library = project(':library')
+
+pmd {
+    toolVersion PMD_VERSION
+}
+
+tasks.create('pmd', Pmd) {
+    dependsOn library.tasks.compileDebugJavaWithJavac
+    targetJdk = TargetJdk.VERSION_1_7
+
+    description 'Run pmd'
+    group 'verification'
+
+    // If ruleSets is not empty, it seems to contain some
+    // defaults which override rules in the ruleset file...
+    ruleSets = []
+    ruleSetFiles = files("${library.projectDir}/pmd-ruleset.xml")
+    source library.android.sourceSets.main.java.srcDirs
+    classpath = files()
+    classpath += files(library.tasks.compileDebugJavaWithJavac.destinationDir)
+    doFirst {
+        classpath += library.classPathForQuality()
+    }
+
+    //TODO enable this once new Gradle containing this flag is out
+    //see https://github.com/gradle/gradle/pull/3125#issuecomment-352442432
+    //incrementalAnalysis = true
+
+    // Failures are caught and printed by the violations plugin.
+    ignoreFailures = true
+
+    reports {
+        xml.enabled = true
+        html.enabled = false
+    }
+}
+
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 1677b1ff2..63b0f12c7 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -351,7 +351,7 @@ private static void throwIncorrectGlideModule(Exception e) {
         new ResourceLoader.FileDescriptorFactory(resources);
     ResourceLoader.AssetFileDescriptorFactory resourceLoaderAssetFileDescriptorFactory =
         new ResourceLoader.AssetFileDescriptorFactory(resources);
-    BitmapEncoder bitmapEncoder = new BitmapEncoder();
+    BitmapEncoder bitmapEncoder = new BitmapEncoder(arrayPool);
 
     BitmapBytesTranscoder bitmapBytesTranscoder = new BitmapBytesTranscoder();
     GifDrawableBytesTranscoder gifDrawableBytesTranscoder = new GifDrawableBytesTranscoder();
diff --git a/library/src/main/java/com/bumptech/glide/load/data/BufferedOutputStream.java b/library/src/main/java/com/bumptech/glide/load/data/BufferedOutputStream.java
new file mode 100644
index 000000000..ce9cd17b1
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/data/BufferedOutputStream.java
@@ -0,0 +1,102 @@
+package com.bumptech.glide.load.data;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import java.io.IOException;
+import java.io.OutputStream;
+
+/**
+ * An {@link OutputStream} implementation that recycles and re-uses {@code byte[]}s using the
+ * provided {@link ArrayPool}.
+ */
+public final class BufferedOutputStream extends OutputStream {
+  @NonNull
+  private final OutputStream out;
+  private byte[] buffer;
+  private ArrayPool arrayPool;
+  private int index;
+
+  public BufferedOutputStream(@NonNull OutputStream out, @NonNull ArrayPool arrayPool) {
+    this(out, arrayPool, ArrayPool.STANDARD_BUFFER_SIZE_BYTES);
+  }
+
+  @VisibleForTesting
+  BufferedOutputStream(@NonNull OutputStream out, ArrayPool arrayPool, int bufferSize) {
+    this.out = out;
+    this.arrayPool = arrayPool;
+    buffer = arrayPool.get(bufferSize, byte[].class);
+  }
+
+  @Override
+  public void write(int b) throws IOException {
+    buffer[index++] = (byte) b;
+    maybeFlushBuffer();
+  }
+
+  @Override
+  public void write(@NonNull byte[] b) throws IOException {
+    write(b, 0, b.length);
+  }
+
+  @Override
+  public void write(@NonNull byte[] b, int initialOffset, int length) throws IOException {
+    int writtenSoFar = 0;
+    do {
+      int remainingToWrite = length - writtenSoFar;
+      int currentOffset = initialOffset + writtenSoFar;
+      // If we still need to write at least the buffer size worth of bytes, we might as well do so
+      // directly and avoid the overhead of copying to the buffer first.
+      if (index == 0 && remainingToWrite >= buffer.length) {
+        out.write(b, currentOffset, remainingToWrite);
+        return;
+      }
+
+      int remainingSpaceInBuffer = buffer.length - index;
+      int totalBytesToWriteToBuffer = Math.min(remainingToWrite, remainingSpaceInBuffer);
+
+      System.arraycopy(b, currentOffset, buffer, index, totalBytesToWriteToBuffer);
+
+      index += totalBytesToWriteToBuffer;
+      writtenSoFar += totalBytesToWriteToBuffer;
+
+      maybeFlushBuffer();
+    } while (writtenSoFar < length);
+  }
+
+  @Override
+  public void flush() throws IOException {
+    flushBuffer();
+    out.flush();
+  }
+
+  private void flushBuffer() throws IOException {
+    if (index > 0) {
+      out.write(buffer, 0, index);
+      index = 0;
+    }
+  }
+
+  private void maybeFlushBuffer() throws IOException {
+    if (index == buffer.length) {
+      flushBuffer();
+    }
+  }
+
+  @Override
+  public void close() throws IOException {
+    try {
+      flush();
+    } finally {
+      out.close();
+    }
+    release();
+  }
+
+  private void release() {
+    if (buffer != null) {
+      arrayPool.put(buffer);
+      buffer = null;
+    }
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
index 3c3e65275..8de58d9a3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
@@ -2,13 +2,16 @@
 
 import android.graphics.Bitmap;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.os.TraceCompat;
 import android.util.Log;
 import com.bumptech.glide.load.EncodeStrategy;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceEncoder;
+import com.bumptech.glide.load.data.BufferedOutputStream;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.util.LogTime;
 import com.bumptech.glide.util.Util;
 import java.io.File;
@@ -49,6 +52,20 @@
       "com.bumptech.glide.load.resource.bitmap.BitmapEncoder.CompressionFormat");
 
   private static final String TAG = "BitmapEncoder";
+  @Nullable
+  private final ArrayPool arrayPool;
+
+  public BitmapEncoder(@NonNull ArrayPool arrayPool) {
+    this.arrayPool = arrayPool;
+  }
+
+  /**
+   * @deprecated Use {@link #BitmapEncoder(ArrayPool)} instead.
+   */
+  @Deprecated
+  public BitmapEncoder() {
+    arrayPool = null;
+  }
 
   @Override
   public boolean encode(@NonNull Resource<Bitmap> resource, @NonNull File file,
@@ -65,6 +82,9 @@ public boolean encode(@NonNull Resource<Bitmap> resource, @NonNull File file,
       OutputStream os = null;
       try {
         os = new FileOutputStream(file);
+        if (arrayPool != null) {
+          os = new BufferedOutputStream(os, arrayPool);
+        }
         bitmap.compress(format, quality, os);
         os.close();
         success = true;
diff --git a/library/src/test/resources/exif-orientation-examples b/library/src/test/resources/exif-orientation-examples
deleted file mode 160000
index 85c6e142e..000000000
--- a/library/src/test/resources/exif-orientation-examples
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 85c6e142ee57d1c5c7a29b2efcd5980a584758e2
diff --git a/library/test/build.gradle b/library/test/build.gradle
new file mode 100644
index 000000000..67c391819
--- /dev/null
+++ b/library/test/build.gradle
@@ -0,0 +1,51 @@
+apply plugin: 'com.android.library'
+
+dependencies {
+    testImplementation "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    testImplementation project(':library')
+    testImplementation project(':testutil')
+    testImplementation 'com.google.guava:guava-testlib:18.0'
+    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    testImplementation "junit:junit:${JUNIT_VERSION}"
+    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
+    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
+}
+
+tasks.withType(JavaCompile) {
+    options.fork = true
+}
+
+afterEvaluate {
+    lint.enabled = false
+    compileDebugJavaWithJavac.enabled = false
+}
+
+android.testOptions.unitTests.all { Test testTask ->
+    // configure max heap size of the test JVM
+    testTask.maxHeapSize = TEST_JVM_MEMORY_SIZE as String
+    if (JavaVersion.current() <= JavaVersion.VERSION_1_7) {
+        // Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=2048m; support was removed in 8.0
+        testTask.jvmArgs "-XX:MaxPermSize=${TEST_JVM_MEMORY_SIZE}"
+    }
+
+    // Initializing Robolectric is expensive, two threads seem to be around the only level where any
+    // improvement is seen.
+    testTask.maxParallelForks = 2
+}
+
+android {
+    compileSdkVersion COMPILE_SDK_VERSION as int
+
+    defaultConfig {
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
+        versionName VERSION_NAME as String
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+}
diff --git a/library/test/src/main/AndroidManifest.xml b/library/test/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..600ac91f9
--- /dev/null
+++ b/library/test/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest package="com.bumptech.glide.test">
+    <application/>
+</manifest>
diff --git a/library/src/test/java/com/bumptech/glide/GlideContextTest.java b/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/GlideContextTest.java
rename to library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/test/src/test/java/com/bumptech/glide/GlideTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/GlideTest.java
rename to library/test/src/test/java/com/bumptech/glide/GlideTest.java
diff --git a/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java b/library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java b/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
rename to library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/RequestManagerTest.java b/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/RequestManagerTest.java
rename to library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/OptionsTest.java b/library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/OptionsTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamFuzzTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamFuzzTest.java
new file mode 100644
index 000000000..21e6120a1
--- /dev/null
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamFuzzTest.java
@@ -0,0 +1,172 @@
+package com.bumptech.glide.load.data;
+
+import static org.junit.Assert.fail;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.when;
+
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Random;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+/**
+ * Runs some tests based on a random seed that asserts the output of writing to our buffered stream
+ * matches the output of writing to {@link java.io.ByteArrayOutputStream}.
+ */
+@RunWith(JUnit4.class)
+public class BufferedOutputStreamFuzzTest {
+  private static final int TESTS = 500;
+  private static final int BUFFER_SIZE = 10;
+  private static final int WRITES_PER_TEST = 50;
+  private static final int MAX_BYTES_PER_WRITE = BUFFER_SIZE * 6;
+  private static final Random RANDOM = new Random(-3207167907493985134L);
+
+  @Mock private ArrayPool arrayPool;
+
+  @Before
+  public void setUp() {
+    MockitoAnnotations.initMocks(this);
+
+    when(arrayPool.get(anyInt(), eq(byte[].class)))
+        .thenAnswer(new Answer<byte[]>() {
+          @Override
+          public byte[] answer(InvocationOnMock invocation) throws Throwable {
+            int size = (Integer) invocation.getArguments()[0];
+            return new byte[size];
+          }
+        });
+  }
+
+  @Test
+  public void runFuzzTest() throws IOException {
+    for (int i = 0; i < TESTS; i++) {
+      runTest(RANDOM);
+    }
+  }
+
+  private void runTest(Random random) throws IOException {
+    List<Write> writes = new ArrayList<>(WRITES_PER_TEST);
+    for (int i = 0; i < WRITES_PER_TEST; i++) {
+      WriteType writeType = getType(random);
+      writes.add(getWrite(random, writeType));
+    }
+
+    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+
+    ByteArrayOutputStream wrapped = new ByteArrayOutputStream();
+    BufferedOutputStream bufferedOutputStream =
+        new BufferedOutputStream(wrapped, arrayPool, BUFFER_SIZE);
+
+    for (Write write : writes) {
+      switch (write.writeType) {
+        case BYTE:
+          byteArrayOutputStream.write(write.data[0]);
+          bufferedOutputStream.write(write.data[0]);
+          break;
+        case BUFFER:
+          byteArrayOutputStream.write(write.data);
+          bufferedOutputStream.write(write.data);
+          break;
+        case OFFSET_BUFFER:
+          byteArrayOutputStream.write(write.data, write.offset, write.length);
+          bufferedOutputStream.write(write.data, write.offset, write.length);
+          break;
+        default:
+            throw new IllegalArgumentException();
+      }
+    }
+
+    byte[] fromByteArrayStream = byteArrayOutputStream.toByteArray();
+    bufferedOutputStream.close();
+    byte[] fromWrappedStream = wrapped.toByteArray();
+    if (!Arrays.equals(fromWrappedStream, fromByteArrayStream)) {
+      StringBuilder writesBuilder = new StringBuilder();
+      for (Write write : writes) {
+        writesBuilder.append(write).append("\n");
+      }
+      fail("Expected: " + Arrays.toString(fromByteArrayStream) + "\n"
+          + "but got: " + Arrays.toString(fromWrappedStream) + "\n"
+          + writesBuilder.toString());
+    }
+  }
+
+  private Write getWrite(Random random, WriteType type) {
+    switch (type) {
+      case BYTE:
+        return getByteWrite(random);
+      case BUFFER:
+        return getBufferWrite(random);
+      case OFFSET_BUFFER:
+        return getOffsetBufferWrite(random);
+      default:
+        throw new IllegalArgumentException("Unrecognized type: " + type);
+    }
+  }
+
+  private Write getOffsetBufferWrite(Random random) {
+    int dataSize = random.nextInt(MAX_BYTES_PER_WRITE * 2);
+    byte[] data = new byte[dataSize];
+    int length = dataSize == 0 ? 0 : random.nextInt(dataSize);
+    int offset = dataSize - length <= 0 ? 0 : random.nextInt(dataSize - length);
+    random.nextBytes(data);
+    return new Write(data, length, offset, WriteType.OFFSET_BUFFER);
+  }
+
+  private Write getBufferWrite(Random random) {
+    byte[] data = new byte[random.nextInt(MAX_BYTES_PER_WRITE)];
+    random.nextBytes(data);
+    return new Write(data, /*length=*/ data.length, /*offset=*/ 0, WriteType.BUFFER);
+  }
+
+  private Write getByteWrite(Random random) {
+    byte[] data = new byte[1];
+    random.nextBytes(data);
+    return new Write(data, /*length=*/ 1, /*offset=*/ 0, WriteType.BYTE);
+  }
+
+  private WriteType getType(Random random) {
+    return WriteType.values()[random.nextInt(WriteType.values().length)];
+  }
+
+  private static final class Write {
+    private final byte[] data;
+    private final int length;
+    private final int offset;
+    private final WriteType writeType;
+
+    @Override
+    public String toString() {
+      return "Write{"
+          + "data=" + Arrays.toString(data)
+          + ", length=" + length
+          + ", offset=" + offset
+          + ", writeType=" + writeType
+          + '}';
+    }
+
+    Write(byte[] data, int length, int offset, WriteType writeType) {
+      this.data = data;
+      this.length = length;
+      this.offset = offset;
+      this.writeType = writeType;
+    }
+  }
+
+  private enum WriteType {
+    BYTE,
+    BUFFER,
+    OFFSET_BUFFER
+  }
+}
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamTest.java
new file mode 100644
index 000000000..ab32ce4a5
--- /dev/null
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/BufferedOutputStreamTest.java
@@ -0,0 +1,940 @@
+package com.bumptech.glide.load.data;
+
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
+import static org.junit.Assert.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.function.ThrowingRunnable;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+@RunWith(JUnit4.class)
+public class BufferedOutputStreamTest {
+  @Mock private ArrayPool arrayPool;
+  @Mock private OutputStream mockOutputStream;
+
+  private final int bufferSize = 10;
+  private final ByteArrayOutputStream inner = new ByteArrayOutputStream();
+  private int currentValue = 0;
+  private BufferedOutputStream os;
+
+  @Before
+  public void setUp() {
+    MockitoAnnotations.initMocks(this);
+
+    when(arrayPool.get(bufferSize, byte[].class)).thenReturn(new byte[bufferSize]);
+    os = new BufferedOutputStream(inner, arrayPool, bufferSize);
+  }
+
+  @Test
+  public void constructor_obtainsBufferFromArrayPool() {
+    verify(arrayPool).get(bufferSize, byte[].class);
+  }
+
+  @Test
+  public void close_returnsBufferObtainedFromConstructor() throws IOException {
+    byte[] data = new byte[bufferSize];
+    when(arrayPool.get(bufferSize, byte[].class)).thenReturn(data);
+    os = new BufferedOutputStream(inner, arrayPool, bufferSize);
+
+    os.close();
+    verify(arrayPool).put(data);
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andSingleByte_doesNotWriteToStream() throws IOException {
+    os.write(next());
+
+    assertThat(inner.toByteArray()).isEmpty();
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataSmallerThanBuffer_doesNotWriteToStream()
+      throws IOException {
+    os.write(next(bufferSize - 1));
+
+    assertThat(inner.toByteArray()).isEmpty();
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataWithOffsetSizeSmallerThanBuffer_doesNotWriteToStream()
+    throws IOException {
+    int offset = 1;
+    int length = bufferSize - offset;
+    byte[] data = nextWithOffset(offset, length);
+    os.write(data, offset, length);
+
+    assertThat(inner.toByteArray()).isEmpty();
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataWithPaddingSizeSmallerThanBuffer_doesNotWriteToStream()
+    throws IOException {
+    int padding = 1;
+    int length = bufferSize - padding;
+    byte[] data = nextWithPadding(length, padding);
+    os.write(data, 0, length);
+
+    assertThat(inner.toByteArray()).isEmpty();
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataEqualToBufferSize_writesDataToStream()
+      throws IOException {
+    os.write(next(bufferSize));
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataGreaterThanBufferSize_writesDataToStream()
+      throws IOException {
+    os.write(next(bufferSize + 1));
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataWithOffsetAndLengthEqualToBufferSize_writesDataToStream()
+      throws IOException {
+    int offset = 5;
+    int length = bufferSize;
+    byte[] data = nextWithOffset(offset, length);
+    os.write(data, offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataWithPaddingAndLengthEqualToBufferSize_writesData()
+      throws IOException {
+    int padding = 5;
+    int length = bufferSize;
+    byte[] data = nextWithPadding(length, padding);
+    os.write(data, 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataWithOffsetAndLengthGreaterThanBuffer_writesDataToStream()
+      throws IOException {
+    int offset = 5;
+    int length = bufferSize + 1;
+    byte[] data = nextWithOffset(offset, length);
+    os.write(data, offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withEmptyBuffer_andDataWithPaddingAndLengthGreaterThanBuffer_writesData()
+      throws IOException {
+    int padding = 5;
+    int length = bufferSize + 1;
+    byte[] data = nextWithPadding(length, padding);
+    os.write(data, 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void writeSingleByte_whenBufferAlmostFull_writesBufferToStream() throws IOException {
+    for (int i = 0; i < bufferSize; i++) {
+      os.write(next());
+    }
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_withSingleByteInBuffer_writesBufferToStream() throws IOException {
+    os.write(next());
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWritingByteAfterBufferFull_writesByteToStream() throws IOException {
+    for (int i = 0; i < bufferSize; i++) {
+      os.write(next());
+    }
+
+    os.write(next());
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flushAfterPreviousFlush_withSingleByte_writesOnlySingleByte() throws IOException {
+    os.write(next());
+    os.flush();
+    os.write(next());
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_withSingleByteInBuffer_writesBufferToStream() throws IOException {
+    os.write(next());
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWritingByteAfterBufferFull_writesByteToStream() throws IOException {
+    for (int i = 0; i < bufferSize; i++) {
+      os.write(next());
+    }
+
+    os.write(next());
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void closeAfterPreviousFlush_withSingleByte_writesOnlySingleByte() throws IOException {
+    os.write(next());
+    os.flush();
+    os.write(next());
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withDataInBuffer_bufferLessThanRemaining_doesNotWriteToStream()
+      throws IOException {
+    os.write(next());
+    os.write(next(remaining() - 1));
+
+    assertThat(inner.toByteArray()).isEmpty();
+  }
+
+  @Test
+  public void flush_afterWriteWithDataInBuffer_bufferLessThanRemaining_writesToStream()
+      throws IOException {
+    os.write(next());
+    byte[] data = next(remaining() - 1);
+
+    os.write(data);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteWithDataInBuffer_bufferLessThanRemaining_writesToStream()
+      throws IOException {
+    os.write(next());
+    byte[] data = next(remaining());
+
+    os.write(data);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withBufferEqualToRemaining_lessThanLength_writesToStream() throws IOException {
+    os.write(next());
+    os.write(next(remaining()));
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWriteBufferEqualToRemaining_doesNothing() throws IOException {
+    os.write(next());
+    os.write(next(remaining()));
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteBufferEqualToRemaining_doesNothing() throws IOException {
+    os.write(next());
+    os.write(next(remaining()));
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withOffsetBufferEqualToRemaining_lessThanLength_writesToStream()
+      throws IOException {
+    os.write(next());
+    int offset = 5;
+    int length = remaining();
+    os.write(nextWithOffset(offset, length), offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWriteOffsetBufferEqualToRemaining_lessThanLength_writesToStream()
+      throws IOException {
+    os.write(next());
+    int offset = 5;
+    int length = remaining();
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteOffsetBufferEqualToRemaining_lessThanLength_writesToStream()
+      throws IOException {
+    os.write(next());
+    int offset = 5;
+    int length = remaining();
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withPaddedBufferEqualToRemaining_lessThanLength_writesToStream()
+      throws IOException {
+    os.write(next());
+    int padding = 5;
+    int length = remaining();
+    os.write(nextWithPadding(length, padding), 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWritePaddedBufferEqualToRemaining_lessThanLength_writesToStream()
+      throws IOException {
+    os.write(next());
+    int padding = 5;
+    int length = remaining();
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWritePaddedBufferEqualToRemaining_lessThanLength_writesToStream()
+      throws IOException {
+    os.write(next());
+    int padding = 5;
+    int length = remaining();
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withBufferGreaterThanRemaining_lessThanLength_writesUpToBufferToStream()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize - 1));
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWriteBufferGreaterThanRemaining_lessThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize - 1));
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteBufferGreaterThanRemaining_lessThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize - 1));
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withOffsetBufferGreaterThanRemaining_lessThanLength_writesUpToBuffer()
+      throws IOException {
+    os.write(next(2));
+    int offset = 5;
+    int length = bufferSize - 1;
+    os.write(nextWithOffset(offset, length), offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWriteOffsetBufferGreaterThanRemaining_lessThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = 5;
+    int length = bufferSize - 1;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteOffsetBufferGreaterThanRemaining_lessThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = 5;
+    int length = bufferSize - 1;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withPaddedBufferGreaterThanRemaining_lessThanLength_writesUpToBuffer()
+      throws IOException {
+    os.write(next(2));
+    int padding = 5;
+    int length = bufferSize - 1;
+    os.write(nextWithPadding(length, padding), 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWritePaddedBufferGreaterThanRemaining_lessThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = 5;
+    int length = bufferSize - 1;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWritePaddedBufferGreaterThanRemaining_lessThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = 5;
+    int length = bufferSize - 1;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withBufferGreaterThanRemaining_equalToLength_writesUpToBufferToStream()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize));
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWriteBufferGreaterThanRemaining_equalToLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize));
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteBufferGreaterThanRemaining_equalToLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize));
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withOffsetBufferGreaterThanRemaining_equalToLength_writesUpToBufferToStream()
+      throws IOException {
+    os.write(next(2));
+    int offset = 6;
+    int length = bufferSize;
+    os.write(nextWithOffset(offset, length), offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWriteOffsetBufferGreaterThanRemaining_equalToLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = 6;
+    int length = bufferSize;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteOffsetBufferGreaterThanRemaining_equalToLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = 6;
+    int length = bufferSize;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withPaddedBufferGreaterThanRemaining_equalToLength_writesUpToBufferToStream()
+      throws IOException {
+    os.write(next(2));
+    int padding = 6;
+    int length = bufferSize;
+    os.write(nextWithPadding(length, padding), 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWritePaddedBufferGreaterThanRemaining_equalToLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = 6;
+    int length = bufferSize;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWritePaddedBufferGreaterThanRemaining_equalToLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = 6;
+    int length = bufferSize;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withBufferGreaterThanRemaining_greaterThanLength_writesUpToBufferToStream()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize + 1));
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWriteBufferGreaterThanRemaining_greaterThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize + 1));
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteBufferGreaterThanRemaining_greaterThanLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize + 1));
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withOffsetBufferGreaterThanRemaining_greaterThanLength_writesUpToBuffer()
+      throws IOException {
+    os.write(next(2));
+    int offset = 2;
+    int length = bufferSize + 1;
+    os.write(nextWithOffset(offset, length), offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWriteOffsetBufferGreaterThanRemaining_greaterThanLength_writesAllToStream()
+      throws IOException {
+    os.write(next(2));
+    int offset = 2;
+    int length = bufferSize + 1;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteOffsetBufferGreaterThanRemaining_greaterThanLength_writesAllToStream()
+      throws IOException {
+    os.write(next(2));
+    int offset = 2;
+    int length = bufferSize + 1;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withPaddedBufferGreaterThanRemaining_greaterThanLength_writesUpToBuffer()
+      throws IOException {
+    os.write(next(2));
+    int padding = 2;
+    int length = bufferSize + 1;
+    os.write(nextWithPadding(length, padding), 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(upTo(bufferSize));
+  }
+
+  @Test
+  public void flush_afterWritePaddedBufferGreaterThanRemaining_greaterThanLength_writesAllToStream()
+      throws IOException {
+    os.write(next(2));
+    int padding = 2;
+    int length = bufferSize + 1;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWritePaddedBufferGreaterThanRemaining_greaterThanLength_writesAllToStream()
+      throws IOException {
+    os.write(next(2));
+    int padding = 2;
+    int length = bufferSize + 1;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize * 2 + 1));
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWriteBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize * 2 + 1));
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    os.write(next(bufferSize * 2 + 1));
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withOffsetBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = bufferSize + 1;
+    int length = bufferSize * 2 + 2;
+    os.write(nextWithOffset(offset, length), offset, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWriteOffsetBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = bufferSize + 1;
+    int length = bufferSize * 2 + 2;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWriteOffsetBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int offset = bufferSize + 1;
+    int length = bufferSize * 2 + 2;
+    os.write(nextWithOffset(offset, length), offset, length);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_withPaddedBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = bufferSize + 1;
+    int length = bufferSize * 2 + 2;
+    os.write(nextWithPadding(length, padding), 0, length);
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_afterWritePaddedBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = bufferSize + 1;
+    int length = bufferSize * 2 + 2;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void close_afterWritePaddedBufferMoreThanRemains_greaterThanTwiceLength_writesAll()
+      throws IOException {
+    os.write(next(2));
+    int padding = bufferSize + 1;
+    int length = bufferSize * 2 + 2;
+    os.write(nextWithPadding(length, padding), 0, length);
+    os.close();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void flush_flushesUnderlyingStream() throws IOException {
+    os = new BufferedOutputStream(mockOutputStream, arrayPool, bufferSize);
+    os.flush();
+
+    verify(mockOutputStream).flush();
+  }
+
+  @Test
+  public void overflowBuffer_doesNotFlushUnderlyingStream() throws IOException {
+    os = new BufferedOutputStream(mockOutputStream, arrayPool, bufferSize);
+    os.write(1);
+    os.write(next(remaining() + 1));
+
+    verify(mockOutputStream, never()).flush();
+  }
+
+  @Test
+  public void close_closesUnderlyingStream() throws IOException {
+    os = new BufferedOutputStream(mockOutputStream, arrayPool, bufferSize);
+    os.close();
+
+    verify(mockOutputStream).close();
+  }
+
+  @Test
+  public void close_whenUnderlyingStreamThrows_closesStream() throws IOException {
+    os = new BufferedOutputStream(mockOutputStream, arrayPool, bufferSize);
+    doThrow(new IOException()).when(mockOutputStream).write(any(byte[].class), anyInt(), anyInt());
+
+    os.write(1);
+    try {
+      os.close();
+      fail("Failed to receive expected exception");
+    } catch (IOException e) {
+      // Expected.
+    }
+
+    verify(mockOutputStream).close();
+  }
+
+  @Test
+  public void flush_withZeroBytesWritten_doesNotWriteToStream() throws IOException {
+    os = new BufferedOutputStream(mockOutputStream, arrayPool, bufferSize);
+    os.flush();
+
+    verify(mockOutputStream, never()).write(anyInt());
+    verify(mockOutputStream, never()).write(any(byte[].class));
+    verify(mockOutputStream, never()).write(any(byte[].class), anyInt(), anyInt());
+  }
+
+  @Test
+  public void write_throwsIfOffsetIsLessThanZero() {
+    assertThrows(IndexOutOfBoundsException.class, new ThrowingRunnable() {
+      @Override
+      public void run() throws Throwable {
+        os.write(new byte[0], /*initialOffset=*/ -1, /*length=*/ 0);
+      }
+    });
+  }
+
+  @Test
+  public void write_throwsIfLengthIsLessThanZero() {
+    assertThrows(IndexOutOfBoundsException.class, new ThrowingRunnable() {
+      @Override
+      public void run() throws Throwable {
+        os.write(new byte[0], /*initialOffset=*/ 0, /*length=*/ -1);
+      }
+    });
+  }
+
+  @Test
+  public void write_throwsIfOffsetIsGreaterThanLength() {
+    assertThrows(IndexOutOfBoundsException.class, new ThrowingRunnable() {
+      @Override
+      public void run() throws Throwable {
+        os.write(new byte[0], /*initialOffset=*/ 1, /*length=*/ 0);
+      }
+    });
+  }
+
+  @Test
+  public void write_throwsIfLengthsIsGreaterThanLength() {
+    assertThrows(IndexOutOfBoundsException.class, new ThrowingRunnable() {
+      @Override
+      public void run() throws Throwable {
+        os.write(new byte[0], /*initialOffset=*/ 0, /*length=*/ 1);
+      }
+    });
+  }
+
+
+  @Test
+  public void write_throwsIfLengthAndOffsetsIsGreaterThanLength() {
+    assertThrows(IndexOutOfBoundsException.class, new ThrowingRunnable() {
+      @Override
+      public void run() throws Throwable {
+        os.write(new byte[1], /*initialOffset=*/ 1, /*length=*/ 1);
+      }
+    });
+  }
+
+  @Test
+  public void write_withZeroLengthBuffer_doesNothing() throws IOException {
+    os.write(new byte[0]);
+
+    assertThat(inner.toByteArray()).hasLength(0);
+  }
+
+  @Test
+  public void write_withZeroLengthBufferAndZeroOffsetAndLength_doesNothing() throws IOException {
+    os.write(new byte[0], 0, 0);
+
+    assertThat(inner.toByteArray()).hasLength(0);
+  }
+
+
+  @Test
+  public void write_afterWriteWithZeroLengthBuffer_writesExpected() throws IOException {
+    os.write(new byte[0]);
+    os.write(next());
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  @Test
+  public void write_afterWriteZeroLengthBufferAndZeroOffsetAndLength_writesExpected()
+      throws IOException {
+    os.write(new byte[0], 0, 0);
+    os.write(next());
+    os.flush();
+
+    assertThat(inner.toByteArray()).isEqualTo(all());
+  }
+
+  private int soFar() {
+    return currentValue;
+  }
+
+  private int remaining() {
+    return bufferSize - soFar();
+  }
+
+  private int next() {
+    return nextWithOffset(0, 1)[0];
+  }
+
+  private byte[] next(int count) {
+    return nextWithOffset(0, count);
+  }
+
+  private byte[] nextWithPadding(int count, int padding) {
+    byte[] result = new byte[count + padding];
+    for (int i = 0; i < count; i++) {
+      result[i] = (byte) ++currentValue;
+    }
+    for (int i = count; i < count + padding; i++) {
+      result[i] = (byte) (i + currentValue);
+    }
+    return result;
+  }
+
+  private byte[] nextWithOffset(int offset, int count) {
+    byte[] result = new byte[offset + count];
+    for (int i = offset - 1; i >= 0; i--) {
+      result[i] = (byte) -offset;
+    }
+    for (int i = offset; i < offset + count; i++) {
+      result[i] = (byte) ++currentValue;
+    }
+    return result;
+  }
+
+  private byte[] upTo(int size) {
+    assertThat(size).isLessThan(currentValue);
+    byte[] result = new byte[size];
+    for (int i = 0; i < size; i++) {
+      result[i] = (byte) (i + 1);
+    }
+    return result;
+  }
+
+  private byte[] all() {
+    byte[] result = new byte[currentValue];
+    for (int i = 0; i < currentValue; i++) {
+      result[i] = (byte) (i + 1);
+    }
+    return result;
+  }
+}
diff --git a/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
similarity index 99%
rename from library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
index ab95ec0db..288ac29d5 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
@@ -13,6 +13,7 @@
 import com.bumptech.glide.load.engine.EngineResource.ResourceListener;
 import com.bumptech.glide.tests.GlideShadowLooper;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -368,7 +369,7 @@ private void enqueueAndWaitForRef(ResourceWeakReference ref) {
 
   private void waitForLatch(CountDownLatch latch) {
      try {
-      latch.await();
+      latch.await(10, TimeUnit.SECONDS);
     } catch (InterruptedException e) {
       throw new RuntimeException(e);
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java b/library/test/src/test/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/executor/MockGlideExecutor.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
similarity index 91%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
index 9db7c4994..68d4a56c3 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
@@ -10,6 +10,8 @@
 import com.bumptech.glide.load.EncodeStrategy;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
 import java.io.File;
 import java.io.IOException;
@@ -86,13 +88,13 @@ public void testEncoderEncodesPngWithNullFormatAndBitmapWithAlpha() throws IOExc
 
   @Test
   public void testReturnsTrueFromWrite() {
-    BitmapEncoder encoder = new BitmapEncoder();
+    BitmapEncoder encoder = new BitmapEncoder(harness.arrayPool);
     assertTrue(encoder.encode(harness.resource, harness.file, harness.options));
   }
 
   @Test
   public void testEncodeStrategy_alwaysReturnsTransformed() {
-    BitmapEncoder encoder = new BitmapEncoder();
+    BitmapEncoder encoder = new BitmapEncoder(harness.arrayPool);
     assertEquals(EncodeStrategy.TRANSFORMED, encoder.getEncodeStrategy(harness.options));
   }
 
@@ -105,6 +107,7 @@ private static void assertContains(String string, String expected) {
     final Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
     final Options options = new Options();
     final File file = new File(RuntimeEnvironment.application.getCacheDir(), "test");
+    final ArrayPool arrayPool = new LruArrayPool();
 
     EncoderHarness() {
       when(resource.get()).thenReturn(bitmap);
@@ -119,7 +122,7 @@ void setFormat(Bitmap.CompressFormat format) {
     }
 
     String encode() throws IOException {
-      BitmapEncoder encoder = new BitmapEncoder();
+      BitmapEncoder encoder = new BitmapEncoder(arrayPool);
       encoder.encode(resource, file, options);
       byte[] data = ByteBufferUtil.toBytes(ByteBufferUtil.fromFile(file));
       return new String(data, "UTF-8");
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParserTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParserTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParserTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParserTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
rename to library/test/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
rename to library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
rename to library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/Issue117Activity.java b/library/test/src/test/java/com/bumptech/glide/manager/Issue117Activity.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/Issue117Activity.java
rename to library/test/src/test/java/com/bumptech/glide/manager/Issue117Activity.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/LifecycleTest.java b/library/test/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
rename to library/test/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
rename to library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
rename to library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
diff --git a/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
rename to library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
diff --git a/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java b/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
rename to library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java b/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java b/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
rename to library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
diff --git a/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java b/library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
rename to library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
diff --git a/library/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java b/library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
rename to library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
diff --git a/library/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java b/library/test/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java
rename to library/test/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java
diff --git a/library/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java b/library/test/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
rename to library/test/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
diff --git a/library/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java b/library/test/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java
rename to library/test/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/BackgroundUtil.java b/library/test/src/test/java/com/bumptech/glide/tests/BackgroundUtil.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/BackgroundUtil.java
rename to library/test/src/test/java/com/bumptech/glide/tests/BackgroundUtil.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/ContentResolverShadow.java b/library/test/src/test/java/com/bumptech/glide/tests/ContentResolverShadow.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/ContentResolverShadow.java
rename to library/test/src/test/java/com/bumptech/glide/tests/ContentResolverShadow.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/GlideShadowLog.java b/library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLog.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/GlideShadowLog.java
rename to library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLog.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java b/library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
rename to library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/KeyTester.java b/library/test/src/test/java/com/bumptech/glide/tests/KeyTester.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/KeyTester.java
rename to library/test/src/test/java/com/bumptech/glide/tests/KeyTester.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/TearDownGlide.java b/library/test/src/test/java/com/bumptech/glide/tests/TearDownGlide.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/TearDownGlide.java
rename to library/test/src/test/java/com/bumptech/glide/tests/TearDownGlide.java
diff --git a/library/src/test/java/com/bumptech/glide/tests/Util.java b/library/test/src/test/java/com/bumptech/glide/tests/Util.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/tests/Util.java
rename to library/test/src/test/java/com/bumptech/glide/tests/Util.java
diff --git a/library/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java b/library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
diff --git a/library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
diff --git a/library/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
diff --git a/library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java b/library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
diff --git a/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
diff --git a/library/src/test/java/com/bumptech/glide/util/UtilTest.java b/library/test/src/test/java/com/bumptech/glide/util/UtilTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/UtilTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/UtilTest.java
diff --git a/library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java b/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
similarity index 100%
rename from library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
rename to library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
diff --git a/library/src/test/java/javax/microedition/khronos/opengles/GL.java b/library/test/src/test/java/opengles/GL.java
similarity index 100%
rename from library/src/test/java/javax/microedition/khronos/opengles/GL.java
rename to library/test/src/test/java/opengles/GL.java
diff --git a/library/test/src/test/resources/exif-orientation-examples b/library/test/src/test/resources/exif-orientation-examples
new file mode 160000
index 000000000..9c4ccfaea
--- /dev/null
+++ b/library/test/src/test/resources/exif-orientation-examples
@@ -0,0 +1 @@
+Subproject commit 9c4ccfaea6bfd434ac1c4bb0750ac6fc5848a5f4
diff --git a/library/src/test/resources/issue387_rotated_jpeg.jpg b/library/test/src/test/resources/issue387_rotated_jpeg.jpg
similarity index 100%
rename from library/src/test/resources/issue387_rotated_jpeg.jpg
rename to library/test/src/test/resources/issue387_rotated_jpeg.jpg
diff --git a/library/src/test/resources/org.robolectric.Config.properties b/library/test/src/test/resources/org.robolectric.Config.properties
similarity index 100%
rename from library/src/test/resources/org.robolectric.Config.properties
rename to library/test/src/test/resources/org.robolectric.Config.properties
diff --git a/library/src/test/resources/short_exif_sample.jpg b/library/test/src/test/resources/short_exif_sample.jpg
similarity index 100%
rename from library/src/test/resources/short_exif_sample.jpg
rename to library/test/src/test/resources/short_exif_sample.jpg
diff --git a/library/src/test/resources/test.gif b/library/test/src/test/resources/test.gif
similarity index 100%
rename from library/src/test/resources/test.gif
rename to library/test/src/test/resources/test.gif
diff --git a/scripts/travis_unit.sh b/scripts/travis_unit.sh
index bc2f576d3..ec19192f6 100755
--- a/scripts/travis_unit.sh
+++ b/scripts/travis_unit.sh
@@ -9,4 +9,4 @@ set -e
   -x :samples:gallery:build \
   -x :samples:imgur:build \
   -x :samples:svg:build \
-  -x testReleaseUnitTest --parallel
+  --parallel
diff --git a/scripts/upload.gradle b/scripts/upload.gradle
index 2d5c30073..b6922c969 100644
--- a/scripts/upload.gradle
+++ b/scripts/upload.gradle
@@ -130,22 +130,22 @@ afterEvaluate { project ->
     def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')
 
     if (isAndroidProject) {
-        def releaseVariants = project.android.libraryVariants.findAll {
-            it.buildType.name.equalsIgnoreCase('release')
+        def variants = project.android.libraryVariants.findAll {
+            it.buildType.name.equalsIgnoreCase('debug')
         }
 
         def getAndroidSdkDirectory = project.android.sdkDirectory
 
         def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"
 
-        task androidJavadocs(type: Javadoc, dependsOn: assembleRelease) {
-            source = releaseVariants.collect { it.javaCompile.source }
+        task androidJavadocs(type: Javadoc, dependsOn: assembleDebug) {
+            source = variants.collect { it.javaCompile.source }
             classpath = files(
                     getAndroidJar,
-                    project.file("build/intermediates/classes/release")
+                    project.file("build/intermediates/classes/debug")
             )
             doFirst {
-                classpath += files(releaseVariants.collect { it.javaCompile.classpath.files })
+                classpath += files(variants.collect { it.javaCompile.classpath.files })
             }
             options {
                 links("http://docs.oracle.com/javase/7/docs/api/")
@@ -174,8 +174,8 @@ afterEvaluate { project ->
             baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"
         }
 
-        task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
-            from compileReleaseJavaWithJavac.destinationDir
+        task androidLibraryJar(type: Jar, dependsOn: compileDebugJavaWithJavac /* == variant.javaCompile */) {
+            from compileDebugJavaWithJavac.destinationDir
             exclude '**/R.class'
             exclude '**/BuildConfig.class'
             exclude '**/R$*.class'
diff --git a/settings.gradle b/settings.gradle
index b6e39d145..464936b4e 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -2,6 +2,9 @@ exec {
     commandLine "git", "submodule", "update", "--init", "--recursive"
 }
 include ':library'
+include ':library:pmd'
+include ':library:findbugs'
+include ':library:test'
 include ':instrumentation'
 include ':annotation'
 include ':annotation:compiler'
