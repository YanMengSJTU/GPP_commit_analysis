diff --git a/.travis.yml b/.travis.yml
index d7e468055..7e00e8d6a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -17,13 +17,15 @@ jdk:
 
 sudo: false
 
-script: 'travis_retry ./gradlew build --parallel'
+script: 'travis_retry ./gradlew build'
 
 after_success:
 - scripts/travis-sonatype-publish.sh
 - ./gradlew jacocoTestReport coveralls
 
+before_cache:
+  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
 cache:
   directories:
-    - $HOME/.gradle/caches
-
+    - $HOME/.gradle/caches/
+    - $HOME/.gradle/wrapper/
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 950f16a66..2576a1c95 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -9,13 +9,14 @@ The best way to ask general questions is to send an email to our [mailing list][
 
 ## Filing issues
 When in doubt, file an issue. We'd rather close a few duplicate issues than let a problem go unnoticed.
-Similarly if you support a particular feature request, feel free to let us know by commenting on the issue.
+Similarly if you support a particular feature request, feel free to let us know by commenting on the issue or [subscribing][6] to the issue.
 
 To file a new issue, please use our issue template and fill out the template as much as possible (remove irrelevant parts).
 
-<pre>**Glide Version/Integration library (if any)**:
+<pre>**Glide Version**:
+**Integration libraries**:
 **Device/Android Version**:
-**Issue details/Repro steps/Use case background**:
+**Issue details / Repro steps / Use case background**:
 
 **Glide load line**:
 ```java
@@ -46,9 +47,27 @@ Our code style is defined in Intellij project files in the repo and also by our
 If you'd like to submit code, but can't get the style checks to pass, feel free to put up your pull request anyway and we can help you fix the style issues.
 If you'd like to contribute code, you will need to sign [Google's individual contributor license agreement][4] which will be asked when you create the PR by [googlebot](https://github.com/googlebot) should you forget it.
 
+## Labels
+Labels on issues are managed by contributors, you don't have to worry about them. Here's a list of what they mean:
 
-[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60
+ * **bug**: feature that should work, but doesn't
+ * **enhancement**: minor tweak/addition to existing behavior
+ * **feature**: new behavior, bigger than enhancement, it gives more bang to Glide
+ * **question**: no need to modify Glide to fix the issue, usually a usage problem
+ * **reproducible**: has enough information to very easily reproduce, mostly in form of a small project in a GitHub repo
+ * **repro-needed**: we need some code to be able to reproduce and debug locally, otherwise there's not much we can do
+ * **duplicate**: there's another issue which already covers/tracks this
+ * **wontfix**: working as intended, or won't be fixed due to compatibility or other reasons
+ * **invalid**: there isn't enough information to make a verdict, or unrelated to Glide
+ * **non-library**: issue is not in the core library code, but rather in documentation, samples, build process, releases
+ * **v4**: problem originated in v4, or question about v4 (while v3 is in wide use)
+
+*bug + enhancement: feature that doesn't work, but it's an edge case that either has a workaround or doesn't affect many users*
+
+
+[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version**%3A%0A**Integration%20libraries**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details%20/%20Repro%20steps%20/%20Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60
 [2]: https://groups.google.com/forum/#!forum/glidelibrary
 [3]: http://webchat.freenode.net/?channels=glide-library
 [4]: https://developers.google.com/open-source/cla/individual
-[5]: /bumptech/glide
\ No newline at end of file
+[5]: https://github.com/bumptech/glide
+[6]: https://help.github.com/articles/subscribing-to-conversations/
\ No newline at end of file
diff --git a/README.md b/README.md
index 0871e7076..1831f82cb 100644
--- a/README.md
+++ b/README.md
@@ -2,6 +2,7 @@ Glide
 =====
 
 [![Build Status](https://travis-ci.org/bumptech/glide.svg?branch=master)](https://travis-ci.org/bumptech/glide)
+[Report an issue with Glide][5]
 
 Glide is a fast and efficient open source media management and image loading framework for Android that wraps media
 decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.
@@ -23,12 +24,12 @@ Or use Gradle:
 
 ```gradle
 repositories {
-    mavenCentral()
+  mavenCentral() // jcenter() works as well because it pulls from Maven Central
 }
 
 dependencies {
-    compile 'com.github.bumptech.glide:glide:3.6.1'
-    compile 'com.android.support:support-v4:19.1.0'
+  compile 'com.github.bumptech.glide:glide:3.7.0'
+  compile 'com.android.support:support-v4:19.1.0'
 }
 ```
 
@@ -36,17 +37,19 @@ Or Maven:
 
 ```xml
 <dependency>
-    <groupId>com.github.bumptech.glide</groupId>
-    <artifactId>glide</artifactId>
-    <version>3.6.1</version>
+  <groupId>com.github.bumptech.glide</groupId>
+  <artifactId>glide</artifactId>
+  <version>3.7.0</version>
 </dependency>
 <dependency>
-    <groupId>com.google.android</groupId>
-    <artifactId>support-v4</artifactId>
-    <version>r7</version>
+  <groupId>com.google.android</groupId>
+  <artifactId>support-v4</artifactId>
+  <version>r7</version>
 </dependency>
 ```
 
+For info on using the bleeding edge, see the [Snapshots][17] wiki page.
+
 Proguard
 --------
 Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:
@@ -54,8 +57,8 @@ Depending on your proguard config and usage, you may need to include the followi
 ```pro
 -keep public class * implements com.bumptech.glide.module.GlideModule
 -keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
-    **[] $VALUES;
-    public *;
+  **[] $VALUES;
+  public *;
 }
 ```
 
@@ -67,58 +70,53 @@ Simple use cases will look something like this:
 
 ```java
 // For a simple view:
-@Override
-public void onCreate(Bundle savedInstanceState) {
-    ...
-    ImageView imageView = (ImageView) findViewById(R.id.my_image_view);
+@Override public void onCreate(Bundle savedInstanceState) {
+  ...
+  ImageView imageView = (ImageView) findViewById(R.id.my_image_view);
 
-    Glide.with(this).load("http://goo.gl/gEgYUd").into(imageView);
+  Glide.with(this).load("http://goo.gl/gEgYUd").into(imageView);
 }
 
 // For a simple image list:
-@Override
-public View getView(int position, View recycled, ViewGroup container) {
-    final ImageView myImageView;
-    if (recycled == null) {
-        myImageView = (ImageView) inflater.inflate(R.layout.my_image_view, container, false);
-    } else {
-        myImageView = (ImageView) recycled;
-    }
-
-    String url = myUrls.get(position);
-
-    Glide.with(myFragment)
-        .load(url)
-        .centerCrop()
-        .placeholder(R.drawable.loading_spinner)
-        .crossFade()
-        .into(myImageView);
-
-    return myImageView;
+@Override public View getView(int position, View recycled, ViewGroup container) {
+  final ImageView myImageView;
+  if (recycled == null) {
+    myImageView = (ImageView) inflater.inflate(R.layout.my_image_view, container, false);
+  } else {
+    myImageView = (ImageView) recycled;
+  }
+
+  String url = myUrls.get(position);
+
+  Glide
+    .with(myFragment)
+    .load(url)
+    .centerCrop()
+    .placeholder(R.drawable.loading_spinner)
+    .crossFade()
+    .into(myImageView);
+
+  return myImageView;
 }
 
 ```
 
-OkHttp and Volley
------------------
-Support for OkHttp and Volley is provided by integration libraries you can optionally include as dependencies.
-The integration libraries are available via Maven or the [releases page][1].
-
-For instructions on including either the OkHttp or the Volley integration libraries, see the [Integration Libraries][12] wiki page.
-
-Android SDK Version
--------------------
-Glide requires a minimum SDK version of 10.
-
-License
--------
-BSD, part MIT and Apache 2.0. See the [LICENSE][16] file for details.
-
 Status
 ------
-[*Version 3*][14] is a stable public release used in multiple open source projects at Google including in the Android Camera
+[*Version 3* on the `3.0` branch][14] is a stable public release used in multiple open source projects at Google including in the Android Camera
 app and in the 2014 Google IO app. *Version 4* is currently under development on the `master` branch.
-Comments/bugs/questions/pull requests welcome!
+
+Comments/bugs/questions/pull requests are always welcome! Please read [CONTRIBUTING.md][5] on how to report issues.
+
+Compatibility
+-------------
+
+ * **Android SDK**: Glide requires a minimum API level of 10.
+ * **OkHttp 2.x**: there are optional dependencies available called `okhttp-integration`, see [Integration Libraries][12] wiki page.
+ * **OkHttp 3.x**: there are optional dependencies available called `okhttp3-integration`, see [Integration Libraries][12] wiki page.
+ * **Volley**: there are optional dependencies available called `volley-integration`, see [Integration Libraries][12] wiki page.
+ * **Round Pictures**: `CircleImageView`/`CircularImageView`/`RoundedImageView` are known to have [issues][18] with `TransitionDrawable` (`.crossFade()` with `.thumbnail()` or `.placeholder()`) and animated GIFs, use a [`BitmapTransformation`][19] (`.circleCrop()` will be available in v4) or `.dontAnimate()` to fix the issue.
+ * **Huge Images** (maps, comic strips): Glide can load huge images by downsampling them, but does not support zooming and panning `ImageView`s as they require special resource optimizations (such as tiling) to work without `OutOfMemoryError`s.
 
 Build
 -----
@@ -150,7 +148,7 @@ Development
 Follow the steps in the [Build](#build) section to setup the project and then edit the files however you wish.
 [Intellij IDEA 14][4] cleanly imports both Glide's source and tests and is the recommended way to work with Glide.
 
-To open the project in Intellij 14:
+To open the project in IntelliJ IDEA:
 
 1. Go to *File* menu or the *Welcome Screen*
 2. Click on *Open...*
@@ -176,7 +174,11 @@ Thanks
 
 Author
 ------
-Sam Judd - @samajudd
+Sam Judd - @sjudd on GitHub, @samajudd on Twitter
+
+License
+-------
+BSD, part MIT and Apache 2.0. See the [LICENSE][16] file for details.
 
 Disclaimer
 ---------
@@ -186,7 +188,7 @@ This is not an official Google product.
 [2]: https://github.com/bumptech/glide/wiki
 [3]: http://bumptech.github.io/glide/javadocs/latest/index.html
 [4]: https://www.jetbrains.com/idea/download/
-[5]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60
+[5]: https://github.com/bumptech/glide/blob/master/CONTRIBUTING.md
 [6]: https://groups.google.com/forum/#!forum/glidelibrary
 [7]: https://developers.google.com/open-source/cla/individual
 [8]: https://github.com/JakeWharton/DiskLruCache
@@ -198,3 +200,6 @@ This is not an official Google product.
 [14]: https://github.com/bumptech/glide/tree/3.0
 [15]: https://github.com/bumptech/glide/tree/master
 [16]: https://github.com/bumptech/glide/blob/master/LICENSE
+[17]: https://github.com/bumptech/glide/wiki/Snapshots
+[18]: https://github.com/bumptech/glide/issues?q=is%3Aissue+CircleImageView+OR+CircularImageView+OR+RoundedImageView
+[19]: https://github.com/wasabeef/glide-transformations
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 33868cbea..aab6d6df7 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,12 +1,10 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=true
-org.gradle.parallel=true
 
 VERSION_NAME=4.0.0-SNAPSHOT
 VERSION_MAJOR=4
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=12
 GROUP=com.github.bumptech.glide
 
 POM_DESCRIPTION=A fast and efficient image loading library for Android focused on smooth scrolling.
diff --git a/integration/gifencoder/build.gradle b/integration/gifencoder/build.gradle
index b2ff2d6ae..0eddb12b8 100644
--- a/integration/gifencoder/build.gradle
+++ b/integration/gifencoder/build.gradle
@@ -26,7 +26,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode = VERSION_CODE as int
         versionName = VERSION_NAME as String
     }
 
diff --git a/integration/gifencoder/gradle.properties b/integration/gifencoder/gradle.properties
index 45aef2b4a..9687ee227 100644
--- a/integration/gifencoder/gradle.properties
+++ b/integration/gifencoder/gradle.properties
@@ -6,6 +6,5 @@ VERSION_NAME=2.0.0-SNAPSHOT
 VERSION_MAJOR=2
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=8
 
 POM_DESCRIPTION=An integration library allowing users to re-encode or create animated GIFs
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index 5daa78f23..2a48a7443 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -14,7 +14,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode VERSION_CODE as int
         versionName VERSION_NAME as String
     }
 
diff --git a/integration/okhttp/gradle.properties b/integration/okhttp/gradle.properties
index 7001e0c1c..990db7764 100644
--- a/integration/okhttp/gradle.properties
+++ b/integration/okhttp/gradle.properties
@@ -6,6 +6,5 @@ VERSION_NAME=2.0.0-SNAPSHOT
 VERSION_MAJOR=2
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=8
 
 POM_DESCRIPTION=An integration library to use OkHttp 2.x to fetch data over http/https in Glide
diff --git a/integration/okhttp3/build.gradle b/integration/okhttp3/build.gradle
index cc6ffe26b..6ef7599ff 100644
--- a/integration/okhttp3/build.gradle
+++ b/integration/okhttp3/build.gradle
@@ -14,7 +14,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode VERSION_CODE as int
         versionName VERSION_NAME as String
     }
 
diff --git a/integration/okhttp3/gradle.properties b/integration/okhttp3/gradle.properties
index 477f1f526..4e8d18972 100644
--- a/integration/okhttp3/gradle.properties
+++ b/integration/okhttp3/gradle.properties
@@ -6,6 +6,5 @@ VERSION_NAME=2.0.0-SNAPSHOT
 VERSION_MAJOR=2
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=8
 
 POM_DESCRIPTION=An integration library to use OkHttp 3.x to fetch data over http/https in Glide
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
index 4dbd99396..0aa8b2fe3 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
@@ -25,6 +25,7 @@
   private final GlideUrl url;
   private InputStream stream;
   private ResponseBody responseBody;
+  private volatile Call call;
 
   public OkHttpStreamFetcher(Call.Factory client, GlideUrl url) {
     this.client = client;
@@ -40,7 +41,8 @@ public void loadData(Priority priority, final DataCallback<? super InputStream>
     }
     Request request = requestBuilder.build();
 
-    client.newCall(request).enqueue(new okhttp3.Callback() {
+    call = client.newCall(request);
+    call.enqueue(new okhttp3.Callback() {
       @Override
       public void onFailure(Call call, IOException e) {
         if (Log.isLoggable(TAG, Log.DEBUG)) {
@@ -79,7 +81,10 @@ public void cleanup() {
 
   @Override
   public void cancel() {
-    // TODO: call cancel on the client when this method is called on a background thread. See #257
+    Call local = call;
+    if (local != null) {
+      local.cancel();
+    }
   }
 
   @Override
diff --git a/integration/recyclerview/build.gradle b/integration/recyclerview/build.gradle
index 226629d9c..498808a55 100644
--- a/integration/recyclerview/build.gradle
+++ b/integration/recyclerview/build.gradle
@@ -14,7 +14,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode VERSION_CODE as int
         versionName VERSION_NAME as String
     }
 
diff --git a/integration/recyclerview/gradle.properties b/integration/recyclerview/gradle.properties
index 71a1c55f3..7bf1e8bea 100644
--- a/integration/recyclerview/gradle.properties
+++ b/integration/recyclerview/gradle.properties
@@ -6,6 +6,5 @@ VERSION_NAME=2.0.0-SNAPSHOT
 VERSION_MAJOR=2
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=8
 
 POM_DESCRIPTION=An integration library to display images in RecyclerView.
diff --git a/integration/volley/build.gradle b/integration/volley/build.gradle
index 769b56438..7c9f79531 100644
--- a/integration/volley/build.gradle
+++ b/integration/volley/build.gradle
@@ -21,7 +21,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode VERSION_CODE as int
         versionName VERSION_NAME as String
     }
 
diff --git a/integration/volley/gradle.properties b/integration/volley/gradle.properties
index 3a8aaa76d..ff93096bd 100644
--- a/integration/volley/gradle.properties
+++ b/integration/volley/gradle.properties
@@ -6,6 +6,5 @@ VERSION_NAME=2.0.0-SNAPSHOT
 VERSION_MAJOR=2
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=8
 
 POM_DESCRIPTION=An integration library to use Volley to fetch data over http/https in Glide
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
index 02e517cc0..89466cfca 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
@@ -93,7 +93,7 @@ public DataSource getDataSource() {
   }
 
   /**
-   * Default {@link com.android.volley.Request} implementation for Glide that recives errors and
+   * Default {@link com.android.volley.Request} implementation for Glide that receives errors and
    * results on volley's background thread.
    */
   public static class GlideRequest extends Request<byte[]> {
diff --git a/library/build.gradle b/library/build.gradle
index 628e7afa6..bde7cf66c 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -44,7 +44,6 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode VERSION_CODE as int
         versionName VERSION_NAME as String
 
         consumerProguardFiles 'proguard-rules.txt'
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 8800231ca..68843d6fb 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -22,8 +22,6 @@
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.engine.prefill.BitmapPreFiller;
 import com.bumptech.glide.load.engine.prefill.PreFillType;
@@ -97,7 +95,6 @@
   private final GlideContext glideContext;
   private final Registry registry;
   private final ArrayPool arrayPool;
-  private final ByteArrayPool byteArrayPool;
   private final ConnectivityMonitorFactory connectivityMonitorFactory;
   private final List<RequestManager> managers = new ArrayList<>();
 
@@ -185,7 +182,6 @@ static void tearDown() {
     this.arrayPool = arrayPool;
     this.memoryCache = memoryCache;
     this.connectivityMonitorFactory = connectivityMonitorFactory;
-    this.byteArrayPool = new LruByteArrayPool();
 
     DecodeFormat decodeFormat = defaultRequestOptions.getOptions().get(Downsampler.DECODE_FORMAT);
     bitmapPreFiller = new BitmapPreFiller(memoryCache, bitmapPool, decodeFormat);
@@ -193,17 +189,17 @@ static void tearDown() {
     Resources resources = context.getResources();
 
     Downsampler downsampler =
-        new Downsampler(resources.getDisplayMetrics(), bitmapPool, byteArrayPool);
+        new Downsampler(resources.getDisplayMetrics(), bitmapPool, arrayPool);
     ByteBufferGifDecoder byteBufferGifDecoder =
         new ByteBufferGifDecoder(context, bitmapPool, arrayPool);
     registry = new Registry(context)
         .register(ByteBuffer.class, new ByteBufferEncoder())
-        .register(InputStream.class, new StreamEncoder(byteArrayPool))
+        .register(InputStream.class, new StreamEncoder(arrayPool))
         /* Bitmaps */
         .append(ByteBuffer.class, Bitmap.class,
             new ByteBufferBitmapDecoder(downsampler))
         .append(InputStream.class, Bitmap.class,
-            new StreamBitmapDecoder(downsampler, byteArrayPool))
+            new StreamBitmapDecoder(downsampler, arrayPool))
         .append(ParcelFileDescriptor.class, Bitmap.class, new VideoBitmapDecoder(bitmapPool))
         .register(Bitmap.class, new BitmapEncoder())
         /* GlideBitmapDrawables */
@@ -212,13 +208,13 @@ static void tearDown() {
                 new ByteBufferBitmapDecoder(downsampler)))
         .append(InputStream.class, BitmapDrawable.class,
             new BitmapDrawableDecoder<>(resources, bitmapPool,
-                new StreamBitmapDecoder(downsampler, byteArrayPool)))
+                new StreamBitmapDecoder(downsampler, arrayPool)))
         .append(ParcelFileDescriptor.class, BitmapDrawable.class,
             new BitmapDrawableDecoder<>(resources, bitmapPool, new VideoBitmapDecoder(bitmapPool)))
         .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder()))
         /* Gifs */
         .prepend(InputStream.class, GifDrawable.class,
-            new StreamGifDecoder(byteBufferGifDecoder, byteArrayPool))
+            new StreamGifDecoder(byteBufferGifDecoder, arrayPool))
         .prepend(ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder)
         .register(GifDrawable.class, new GifDrawableEncoder())
         /* Gif Frames */
@@ -232,7 +228,7 @@ static void tearDown() {
         .append(File.class, ParcelFileDescriptor.class, new FileLoader.FileDescriptorFactory())
         .append(File.class, File.class, new UnitModelLoader.Factory<File>())
         /* Models */
-        .register(new InputStreamRewinder.Factory(byteArrayPool))
+        .register(new InputStreamRewinder.Factory(arrayPool))
         .append(int.class, InputStream.class, new ResourceLoader.StreamFactory())
         .append(int.class, ParcelFileDescriptor.class, new ResourceLoader.FileDescriptorFactory())
         .append(Integer.class, InputStream.class, new ResourceLoader.StreamFactory())
@@ -288,10 +284,6 @@ public BitmapPool getBitmapPool() {
     return bitmapPool;
   }
 
-  public ByteArrayPool getByteArrayPool() {
-    return byteArrayPool;
-  }
-
   public ArrayPool getArrayPool() {
     return arrayPool;
   }
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index c8766199c..d22e33b2f 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -20,7 +20,7 @@
 import com.bumptech.glide.request.target.PreloadTarget;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.signature.ApplicationVersionSignature;
-import com.bumptech.glide.signature.StringSignature;
+import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
 
@@ -312,7 +312,7 @@
    * @see #load(Object)
    */
   public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
-    return loadGeneric(model).apply(signatureOf(new StringSignature(UUID.randomUUID().toString()))
+    return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString()))
         .diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true /*skipMemoryCache*/));
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
index 823ed42bf..25ae1c129 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
@@ -63,7 +63,7 @@ public DataSource getDataSource() {
 
   /**
    * Opens the given asset path with the given {@link android.content.res.AssetManager} and returns
-   * the conrete data type returned by the AssetManager.
+   * the concrete data type returned by the AssetManager.
    *
    * @param assetManager An AssetManager to use to open the given path.
    * @param path         A string path pointing to a resource in assets to open.
diff --git a/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java b/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
index 13d0700fd..a79a24c33 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
@@ -1,6 +1,6 @@
 package com.bumptech.glide.load.data;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;
 
 import java.io.IOException;
@@ -16,7 +16,7 @@
 
   private final RecyclableBufferedInputStream bufferedStream;
 
-  InputStreamRewinder(InputStream is, ByteArrayPool byteArrayPool) {
+  InputStreamRewinder(InputStream is, ArrayPool byteArrayPool) {
     bufferedStream = new RecyclableBufferedInputStream(is, byteArrayPool);
     bufferedStream.mark(MARK_LIMIT);
   }
@@ -37,9 +37,9 @@ public void cleanup() {
    * java.io.InputStream}s.
    */
   public static final class Factory implements DataRewinder.Factory<InputStream> {
-    private final ByteArrayPool byteArrayPool;
+    private final ArrayPool byteArrayPool;
 
-    public Factory(ByteArrayPool byteArrayPool) {
+    public Factory(ArrayPool byteArrayPool) {
       this.byteArrayPool = byteArrayPool;
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
index 307f2385e..e5e67fdd7 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
@@ -11,7 +11,7 @@
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.data.ExifOrientationStream;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -37,7 +37,7 @@ public static ThumbFetcher buildVideoFetcher(Context context, Uri uri) {
   }
 
   private static ThumbFetcher build(Context context, Uri uri, ThumbnailQuery query) {
-    ByteArrayPool byteArrayPool = Glide.get(context).getByteArrayPool();
+    ArrayPool byteArrayPool = Glide.get(context).getArrayPool();
     return new ThumbFetcher(context, uri, new ThumbnailStreamOpener(query, byteArrayPool));
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
index 9b9f899f8..e6cfbc23f 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
@@ -6,7 +6,7 @@
 import android.text.TextUtils;
 import android.util.Log;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 
 import java.io.File;
@@ -19,14 +19,14 @@
   private static final FileService DEFAULT_SERVICE = new FileService();
   private final FileService service;
   private final ThumbnailQuery query;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
-  public ThumbnailStreamOpener(ThumbnailQuery query, ByteArrayPool byteArrayPool) {
+  public ThumbnailStreamOpener(ThumbnailQuery query, ArrayPool byteArrayPool) {
     this(DEFAULT_SERVICE, query, byteArrayPool);
   }
 
   public ThumbnailStreamOpener(FileService service, ThumbnailQuery query,
-      ByteArrayPool byteArrayPool) {
+      ArrayPool byteArrayPool) {
     this.service = service;
     this.query = query;
     this.byteArrayPool = byteArrayPool;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
index bd1899d7a..2b42d1f9b 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
@@ -28,7 +28,7 @@
      * @param sourceKey The id of the loaded data.
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
-     * @param dataSource The data souce we were loading from.
+     * @param dataSource The data source we were loading from.
      * @param attemptedKey The key we were loading data from (may be an alternate).
      */
     void onDataFetcherReady(Key sourceKey, @Nullable Object data, DataFetcher<?> fetcher,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 222d32249..907826b3a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -561,7 +561,7 @@ private boolean isComplete(boolean isRemovedFromQueue) {
     private ResourceEncoder<Z> encoder;
     private LockedResource<Z> toEncode;
 
-    // We just need the encoder and resouce type to match, which this will enforce.
+    // We just need the encoder and resource type to match, which this will enforce.
     @SuppressWarnings("unchecked")
     <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
       this.key = key;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
index a945ca874..34d78b312 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
@@ -4,6 +4,12 @@
  * Interface for an array pool that pools arrays of different types.
  */
 public interface ArrayPool {
+  /**
+   * A standard size to use to increase hit rates when the required size isn't defined.
+   * Currently 64KB.
+   */
+  int STANDARD_BUFFER_SIZE_BYTES = 64 * 1024;
+
   /**
    * Optionally adds the given array of the given type to the pool.
    *
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java
deleted file mode 100644
index df88773ff..000000000
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.bumptech.glide.load.engine.bitmap_recycle;
-
-/**
- * Pool containing byte[] arrays of various sizes.
- * TODO: this should be replaced with an ArrayPool
- */
-public interface ByteArrayPool {
-  /**
-   * A standard size to use to increase hit rates when the required size isn't defined.
-   * Currently 64KB.
-   */
-  int STANDARD_BUFFER_SIZE_BYTES = 64 * 1024;
-
-  /**
-   * Optionally adds the given byte array to the pool.
-   *
-   * <p>Arrays may be ignored, for example if the array is larger than the maximum size of the
-   * pool.
-   */
-  void put(byte[] bytes);
-
-  /**
-   * Returns a non-null byte array with a length >= to the given size.
-   *
-   * <p>If an array of the given size isn't in the pool, a new one will be allocated.
-   */
-  byte[] get(int size);
-}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
index 10f17c25f..072aa25fd 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 
 import com.bumptech.glide.util.Preconditions;
@@ -15,9 +16,11 @@
  * the maximum byte size.
  */
 public final class LruArrayPool implements ArrayPool {
+  // 4MB.
+  static final int DEFAULT_SIZE = 4 * 1024 * 1024;
 
   /**
-   * The maximum number of times larger an int array may be to be than a requested size to eligble
+   * The maximum number of times larger an int array may be to be than a requested size to eligible
    * to be returned from the pool.
    */
   private static final int MAX_OVER_SIZE_MULTIPLE = 8;
@@ -31,6 +34,11 @@
   private final int maxSize;
   private int currentSize;
 
+  @VisibleForTesting
+  public LruArrayPool() {
+    maxSize = DEFAULT_SIZE;
+  }
+
   /**
    * Constructor for a new pool.
    *
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java
deleted file mode 100644
index 957a550df..000000000
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.bumptech.glide.load.engine.bitmap_recycle;
-
-/**
- * A fixed size LruByteArrayPool that evicts arrays using an LRU strategy to keep the pool under
- * the maximum byte size.
- *
- * TODO: update Glide to use ArrayPool<byte[]> instead.
- */
-public final class LruByteArrayPool implements ByteArrayPool {
-  // 4MB.
-  static final int DEFAULT_SIZE = 4 * 1024 * 1024;
-
-  private final ArrayPool arrayPool;
-
-  public LruByteArrayPool() {
-    this(DEFAULT_SIZE);
-  }
-
-  public LruByteArrayPool(int maxSize) {
-    this.arrayPool = new LruArrayPool(maxSize);
-  }
-
-  @Override
-  public synchronized void put(byte[] bytes) {
-    arrayPool.put(bytes, byte[].class);
-  }
-
-  @Override
-  public byte[] get(int size) {
-    return arrayPool.get(size, byte[].class);
-  }
-}
diff --git a/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
index 45b168512..496dd9e84 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
@@ -4,7 +4,7 @@
 
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.Options;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -18,15 +18,15 @@
  */
 public class StreamEncoder implements Encoder<InputStream> {
   private static final String TAG = "StreamEncoder";
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
-  public StreamEncoder(ByteArrayPool byteArrayPool) {
+  public StreamEncoder(ArrayPool byteArrayPool) {
     this.byteArrayPool = byteArrayPool;
   }
 
   @Override
   public boolean encode(InputStream data, File file, Options options) {
-    byte[] buffer = byteArrayPool.get(ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES);
+    byte[] buffer = byteArrayPool.get(ArrayPool.STANDARD_BUFFER_SIZE_BYTES, byte[].class);
     boolean success = false;
     OutputStream os = null;
     try {
@@ -49,7 +49,7 @@ public boolean encode(InputStream data, File file, Options options) {
           // Do nothing.
         }
       }
-      byteArrayPool.put(buffer);
+      byteArrayPool.put(buffer, byte[].class);
     }
     return success;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 7db211e77..d84dd89ab 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -11,8 +11,8 @@
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.SampleSizeRounding;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.util.Preconditions;
@@ -73,10 +73,10 @@ public void onDecodeComplete(BitmapPool bitmapPool, Bitmap downsampled) throws I
 
   private final BitmapPool bitmapPool;
   private final DisplayMetrics displayMetrics;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
   public Downsampler(DisplayMetrics displayMetrics, BitmapPool bitmapPool,
-      ByteArrayPool byteArrayPool) {
+       ArrayPool byteArrayPool) {
     this.displayMetrics = Preconditions.checkNotNull(displayMetrics);
     this.bitmapPool = Preconditions.checkNotNull(bitmapPool);
     this.byteArrayPool = Preconditions.checkNotNull(byteArrayPool);
@@ -134,7 +134,7 @@ public boolean handles(ByteBuffer byteBuffer) {
     Preconditions.checkArgument(is.markSupported(), "You must provide an InputStream that supports"
         + " mark()");
 
-    byte[] bytesForOptions = byteArrayPool.get(ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES);
+    byte[] bytesForOptions = byteArrayPool.get(ArrayPool.STANDARD_BUFFER_SIZE_BYTES, byte[].class);
     BitmapFactory.Options bitmapFactoryOptions = getDefaultOptions();
     bitmapFactoryOptions.inTempStorage = bytesForOptions;
 
@@ -147,7 +147,7 @@ public boolean handles(ByteBuffer byteBuffer) {
       return BitmapResource.obtain(result, bitmapPool);
     } finally {
       releaseOptions(bitmapFactoryOptions);
-      byteArrayPool.put(bytesForOptions);
+      byteArrayPool.put(bytesForOptions, byte[].class);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
index 0fa7e01e1..6f261e000 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
@@ -8,7 +8,7 @@
 
 import android.util.Log;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.util.Preconditions;
 
 import java.io.IOException;
@@ -91,16 +91,16 @@ public boolean hasAlpha() {
   private static final int WEBP_EXTENDED_ALPHA_FLAG = 1 << 4;
   private static final int WEBP_LOSSLESS_ALPHA_FLAG = 1 << 3;
 
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
   private final Reader reader;
 
-  public ImageHeaderParser(InputStream is, ByteArrayPool byteArrayPool) {
+  public ImageHeaderParser(InputStream is, ArrayPool byteArrayPool) {
     Preconditions.checkNotNull(is);
     this.byteArrayPool = Preconditions.checkNotNull(byteArrayPool);
     reader = new StreamReader(is);
   }
 
-  public ImageHeaderParser(ByteBuffer byteBuffer, ByteArrayPool byteArrayPool) {
+  public ImageHeaderParser(ByteBuffer byteBuffer, ArrayPool byteArrayPool) {
     Preconditions.checkNotNull(byteBuffer);
     this.byteArrayPool = Preconditions.checkNotNull(byteArrayPool);
     reader = new ByteBufferReader(byteBuffer);
@@ -190,11 +190,11 @@ public int getOrientation() throws IOException {
         return UNKNOWN_ORIENTATION;
       }
 
-      byte[] exifData = byteArrayPool.get(exifSegmentLength);
+      byte[] exifData = byteArrayPool.get(exifSegmentLength, byte[].class);
       try {
         return parseExifSegment(exifData, exifSegmentLength);
       } finally {
-        byteArrayPool.put(exifData);
+        byteArrayPool.put(exifData, byte[].class);
       }
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
index 33a25b6f7..187d3633f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
@@ -17,7 +17,7 @@
  *  limitations under the License.
  */
 
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 
 import java.io.FilterInputStream;
 import java.io.IOException;
@@ -62,18 +62,18 @@
    * The current position within the byte array {@code buf}.
    */
   private int pos;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
-  public RecyclableBufferedInputStream(InputStream in, ByteArrayPool byteArrayPool) {
-    this(in, byteArrayPool, ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES);
+  public RecyclableBufferedInputStream(InputStream in, ArrayPool byteArrayPool) {
+    this(in, byteArrayPool, ArrayPool.STANDARD_BUFFER_SIZE_BYTES);
   }
 
   // Visible for testing
-  RecyclableBufferedInputStream(InputStream in, ByteArrayPool byteArrayPool,
+  RecyclableBufferedInputStream(InputStream in, ArrayPool byteArrayPool,
       int bufferSize) {
     super(in);
     this.byteArrayPool = byteArrayPool;
-    buf = byteArrayPool.get(bufferSize);
+    buf = byteArrayPool.get(bufferSize, byte[].class);
   }
 
   /**
@@ -111,7 +111,7 @@ public synchronized void fixMarkLimit() {
 
   public synchronized void release() {
     if (buf != null) {
-      byteArrayPool.put(buf);
+      byteArrayPool.put(buf, byte[].class);
       buf = null;
     }
   }
@@ -125,7 +125,7 @@ public synchronized void release() {
   @Override
   public void close() throws IOException {
     if (buf != null) {
-      byteArrayPool.put(buf);
+      byteArrayPool.put(buf, byte[].class);
       buf = null;
     }
     InputStream localIn = in;
@@ -161,13 +161,13 @@ private int fillbuf(InputStream localIn, byte[] localBuf) throws IOException {
       if (newLength > marklimit) {
         newLength = marklimit;
       }
-      byte[] newbuf = byteArrayPool.get(newLength);
+      byte[] newbuf = byteArrayPool.get(newLength, byte[].class);
       System.arraycopy(localBuf, 0, newbuf, 0, localBuf.length);
       byte[] oldbuf = localBuf;
       // Reassign buf, which will invalidate any local references
       // FIXME: what if buf was null?
       localBuf = buf = newbuf;
-      byteArrayPool.put(oldbuf);
+      byteArrayPool.put(oldbuf, byte[].class);
     } else if (markpos > 0) {
       System.arraycopy(localBuf, markpos, localBuf, 0, localBuf.length - markpos);
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
index bedf360ba..7d580e161 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
@@ -5,8 +5,8 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 import com.bumptech.glide.util.ExceptionCatchingInputStream;
 import com.bumptech.glide.util.MarkEnforcingInputStream;
 
@@ -19,9 +19,9 @@
 public class StreamBitmapDecoder implements ResourceDecoder<InputStream, Bitmap> {
 
   private final Downsampler downsampler;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
-  public StreamBitmapDecoder(Downsampler downsampler, ByteArrayPool byteArrayPool) {
+  public StreamBitmapDecoder(Downsampler downsampler, ArrayPool byteArrayPool) {
     this.downsampler = downsampler;
     this.byteArrayPool = byteArrayPool;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
index da9ba30ff..51f73252d 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
@@ -14,8 +14,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.UnitTransformation;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
@@ -75,7 +74,7 @@ public ByteBufferGifDecoder(
 
   @Override
   public boolean handles(ByteBuffer source, Options options) throws IOException {
-    ByteArrayPool byteArrayPool = new LruByteArrayPool();
+    ArrayPool byteArrayPool = new LruArrayPool();
     return !options.get(DISABLE_ANIMATION)
         && new ImageHeaderParser(source, byteArrayPool).getType() == ImageType.GIF;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
index bef067093..91038724c 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
@@ -6,7 +6,7 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
 
@@ -31,10 +31,10 @@
       "com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder.DisableAnimation", false);
 
   private final ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder;
-  private final ByteArrayPool byteArrayPool;
+  private final ArrayPool byteArrayPool;
 
   public StreamGifDecoder(ResourceDecoder<ByteBuffer, GifDrawable> byteBufferDecoder,
-      ByteArrayPool byteArrayPool) {
+      ArrayPool byteArrayPool) {
     this.byteBufferDecoder = byteBufferDecoder;
     this.byteArrayPool = byteArrayPool;
   }
diff --git a/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
index 5a84cd246..53044cee1 100644
--- a/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
+++ b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
@@ -11,7 +11,7 @@
 
   /**
    * Removes the given listener from the set of listeners managed by this Lifecycle implementation,
-   * returning {@code true} if the listener was removed sucessfully, and {@code false} otherwise.
+   * returning {@code true} if the listener was removed successfully, and {@code false} otherwise.
    *
    * <p>This is an optimization only, there is no guarantee that every added listener will
    * eventually be removed.
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index 1650bf2f2..86cb7bd8a 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -165,7 +165,7 @@ public void onAttach(Activity activity) {
     super.onAttach(activity);
     try {
       registerFragmentWithRoot(activity);
-    } catch (IllegalArgumentException e) {
+    } catch (IllegalStateException e) {
       // OnAttach can be called after the activity is destroyed, see #497.
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(TAG, "Unable to register fragment with root", e);
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index 6fa4b4c41..df141b567 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -154,7 +154,7 @@ public void onAttach(Activity activity) {
     super.onAttach(activity);
     try {
       registerFragmentWithRoot(getActivity());
-    } catch (IllegalArgumentException e) {
+    } catch (IllegalStateException e) {
       // OnAttach can be called after the activity is destroyed, see #497.
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(TAG, "Unable to register fragment with root", e);
diff --git a/library/src/main/java/com/bumptech/glide/module/GlideModule.java b/library/src/main/java/com/bumptech/glide/module/GlideModule.java
index 061856a6c..132e669f8 100644
--- a/library/src/main/java/com/bumptech/glide/module/GlideModule.java
+++ b/library/src/main/java/com/bumptech/glide/module/GlideModule.java
@@ -19,7 +19,7 @@
  *                      public class FlickrGlideModule implements GlideModule {
  *                          {@literal @}Override
  *                          public void applyOptions(Context context, GlideBuilder builder) {
- *                              buidler.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
+ *                              builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
  *                          }
  *
  *                          {@literal @}Override
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index 3c57db530..681a949ce 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -23,13 +23,27 @@
  *
  * <pre>
  *     {@code
- *      RequestFutureTarget target = Glide.load("")...
- *     Object resource = target.get();
- *     // Do something with resource, and when finished:
- *     target.cancel(false);
+ *      FutureTarget<File> target = null;
+ *      RequestManager requestManager = Glide.with(context);
+ *      try {
+ *        target = requestManager
+ *           .downloadOnly()
+ *           .load(model)
+ *           .submit();
+ *        File downloadedFile = target.get();
+ *        // ... do something with the file (usually throws IOException)
+ *      } catch (ExecutionException | InterruptedException | IOException e) {
+ *        // ... bug reporting or recovery
+ *      } finally {
+ *        // make sure to cancel pending operations and free resources
+ *        if (target != null) {
+ *          target.cancel(true); // mayInterruptIfRunning
+ *        }
+ *      }
  *     }
  *     </pre>
- * The {@link #cancel(boolean)} call will make sure any resources used are recycled.
+ * The {@link #cancel(boolean)} call will cancel pending operations and
+ * make sure that any resources used are recycled.
  * </p>
  *
  * @param <R> The type of the resource that will be loaded.
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 0f07a3dec..4509e3401 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -341,9 +341,9 @@ private Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
-  private Drawable loadDrawable(int resouceId) {
+  private Drawable loadDrawable(int resourceId) {
     Resources resources = glideContext.getResources();
-    return ResourcesCompat.getDrawable(resources, resouceId, requestOptions.getTheme());
+    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());
   }
 
   private void setErrorPlaceholder() {
diff --git a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
index 195c24d69..d878f0c07 100644
--- a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
@@ -43,7 +43,7 @@ private boolean parentCanSetImage() {
 
   /**
    * Returns true if the request is the request loading the fullsize image and if neither the full
-   * nor the thumbnail image have completed sucessfully.
+   * nor the thumbnail image have completed successfully.
    *
    * @param request {@inheritDoc}.
    */
diff --git a/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java
index 60171de82..35d32b295 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java
@@ -21,6 +21,7 @@
   private final RemoteViews remoteViews;
   private final Context context;
   private final int notificationId;
+  private final String notificationTag;
   private final Notification notification;
   private final int viewId;
 
@@ -29,35 +30,58 @@
    * Notification in order to update it that uses {@link #SIZE_ORIGINAL} as the target width and
    * height.
    *
-   * @param context        Context to use in the AppWidgetManager initialization.
-   * @param viewId         The id of the ImageView view that will load the image.
-   * @param remoteViews    RemoteViews object which contains the ImageView that will load the
-   *                       bitmap.
-   * @param notification   The Notification object that we want to update.
-   * @param notificationId The notificationId of the Notification that we want to load the Bitmap.
+   * @param context         Context to use in the AppWidgetManager initialization.
+   * @param viewId          The id of the ImageView view that will load the image.
+   * @param remoteViews     RemoteViews object which contains the ImageView that will load the
+   *                        bitmap.
+   * @param notification    The Notification object that we want to update.
+   * @param notificationId  The notificationId of the Notification that we want to load the Bitmap.
    */
   public NotificationTarget(Context context,
       int viewId, RemoteViews remoteViews, Notification notification, int notificationId) {
-    this(context, SIZE_ORIGINAL, SIZE_ORIGINAL, viewId, remoteViews, notification, notificationId);
+    this(context, viewId, remoteViews, notification, notificationId, null);
   }
 
   /**
-   * Constructor using a Notification object and a notificationId to get a handle on the
-   * Notification in order to update it.
+   * Constructor using a Notification object, a notificationId, and a notificationTag to get a
+   * handle on the Notification in order to update it that uses {@link #SIZE_ORIGINAL} as the
+   * target width and height.
    *
-   * @param context        Context to use in the AppWidgetManager initialization.
-   * @param width          Desired width of the bitmap that will be loaded.(Need to be manually put
-   *                       because of RemoteViews limitations.)
-   * @param height         Desired height of the bitmap that will be loaded. (Need to be manually
-   *                       put because of RemoteViews limitations.)
-   * @param viewId         The id of the ImageView view that will load the image.
-   * @param remoteViews    RemoteViews object which contains the ImageView that will load the
-   *                       bitmap.
-   * @param notification   The Notification object that we want to update.
-   * @param notificationId The notificationId of the Notification that we want to load the Bitmap.
+   * @param context         Context to use in the AppWidgetManager initialization.
+   * @param viewId          The id of the ImageView view that will load the image.
+   * @param remoteViews     RemoteViews object which contains the ImageView that will load the
+   *                        bitmap.
+   * @param notification    The Notification object that we want to update.
+   * @param notificationId  The notificationId of the Notification that we want to load the Bitmap.
+   * @param notificationTag The notificationTag of the Notification that we want to load the Bitmap.
+   *                        May be {@code null}.
    */
-  public NotificationTarget(Context context, int width, int height,
-      int viewId, RemoteViews remoteViews, Notification notification, int notificationId) {
+  public NotificationTarget(Context context, int viewId, RemoteViews remoteViews,
+      Notification notification, int notificationId, String notificationTag) {
+    this(context, SIZE_ORIGINAL, SIZE_ORIGINAL, viewId, remoteViews, notification, notificationId,
+      notificationTag);
+  }
+
+  /**
+   * Constructor using a Notification object, a notificationId, and a notificationTag to get a
+   * handle on the Notification in order to update it.
+   *
+   * @param context         Context to use in the AppWidgetManager initialization.
+   * @param width           Desired width of the bitmap that will be loaded.(Need to be manually put
+   *                        because of RemoteViews limitations.)
+   * @param height          Desired height of the bitmap that will be loaded. (Need to be manually
+   *                        put because of RemoteViews limitations.)
+   * @param viewId          The id of the ImageView view that will load the image.
+   * @param remoteViews     RemoteViews object which contains the ImageView that will load the
+   *                        bitmap.
+   * @param notification    The Notification object that we want to update.
+   * @param notificationId  The notificationId of the Notification that we want to load the Bitmap.
+   * @param notificationTag The notificationTag of the Notification that we want to load the
+   *                        Bitmap. May be {@code null}.
+   */
+  public NotificationTarget(Context context, int width, int height, int viewId,
+      RemoteViews remoteViews, Notification notification, int notificationId,
+      String notificationTag) {
     super(width, height);
     this.context = Preconditions.checkNotNull(context, "Context must not be null!");
     this.notification =
@@ -66,6 +90,7 @@ public NotificationTarget(Context context, int width, int height,
         Preconditions.checkNotNull(remoteViews, "RemoteViews object can not be null!");
     this.viewId = viewId;
     this.notificationId = notificationId;
+    this.notificationTag = notificationTag;
   }
 
   /**
@@ -74,7 +99,7 @@ public NotificationTarget(Context context, int width, int height,
   private void update() {
     NotificationManager manager =
         (NotificationManager) this.context.getSystemService(Context.NOTIFICATION_SERVICE);
-    manager.notify(this.notificationId, this.notification);
+    manager.notify(this.notificationTag, this.notificationId, this.notification);
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
index 1199c6870..8144e5d90 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
@@ -5,7 +5,7 @@
 /**
  * A simple {@link com.bumptech.glide.request.target.Target} base class with default (usually noop)
  * implementations of non essential methods that allows the caller to specify an exact width/height.
- * Typicaly use cases look something like this:
+ * Typically use cases look something like this:
  * <pre>
  * <code>
  * Glide.load("http://somefakeurl.com/fakeImage.jpeg")
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
index 84306618b..c3d658f9b 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
@@ -14,7 +14,7 @@
  * com.bumptech.glide.RequestBuilder#thumbnail(com.bumptech.glide.RequestBuilder)} API into views in
  * a scrolling list like ListView, GridView, or RecyclerView.
  *
- * <p>{@link FixedSizeDrawable} may cause skewing or other undesireable behavior depending on
+ * <p>{@link FixedSizeDrawable} may cause skewing or other undesirable behavior depending on
  * your images, views, and scaling. If this occurs, consider {@link DrawableImageViewTarget} or
  * {@link BitmapImageViewTarget} as alternatives.
  *
diff --git a/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java b/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
index 0764fe285..907a4effb 100644
--- a/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
+++ b/library/src/main/java/com/bumptech/glide/signature/ApplicationVersionSignature.java
@@ -55,7 +55,7 @@ private static Key obtainVersionSignature(Context context) {
     } else {
       versionCode = UUID.randomUUID().toString();
     }
-    return new StringSignature(versionCode);
+    return new ObjectKey(versionCode);
   }
 
   private ApplicationVersionSignature() {
diff --git a/library/src/main/java/com/bumptech/glide/signature/StringSignature.java b/library/src/main/java/com/bumptech/glide/signature/StringSignature.java
deleted file mode 100644
index 5492f2216..000000000
--- a/library/src/main/java/com/bumptech/glide/signature/StringSignature.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.bumptech.glide.signature;
-
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.util.Preconditions;
-
-import java.security.MessageDigest;
-
-/**
- * A unique Signature that wraps a String.
- *
- * TODO: remove this and replace with ObjectKey.
- */
-public class StringSignature implements Key {
-  private final String signature;
-
-  public StringSignature(String signature) {
-    this.signature = Preconditions.checkNotNull(signature);
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    if (this == o) {
-      return true;
-    }
-    if (o == null || getClass() != o.getClass()) {
-      return false;
-    }
-
-    StringSignature that = (StringSignature) o;
-
-    return signature.equals(that.signature);
-  }
-
-  @Override
-  public int hashCode() {
-    return signature.hashCode();
-  }
-
-  @Override
-  public String toString() {
-    return "StringSignature{"
-        + "signature='" + signature + '\''
-        + '}';
-  }
-
-  @Override
-  public void updateDiskCacheKey(MessageDigest messageDigest) {
-    messageDigest.update(signature.getBytes(CHARSET));
-  }
-}
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
index b5268c68b..65460d082 100644
--- a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
+++ b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
@@ -26,7 +26,7 @@ private StateVerifier() { }
   public abstract void throwIfRecycled();
 
   /**
-   * Sets whether or not our objet is recycled.
+   * Sets whether or not our object is recycled.
    */
   abstract void setRecycled(boolean isRecycled);
 
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index c64747fdb..18fc12548 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -508,7 +508,7 @@ public void testNullModelPrefersErrorDrawable() {
   }
 
   @Test
-  public void testNullModelPrefersFallbackDrwaable() {
+  public void testNullModelPrefersFallbackDrawable() {
     Drawable placeholder = new ColorDrawable(Color.GREEN);
     Drawable error = new ColorDrawable(Color.RED);
     Drawable fallback = new ColorDrawable(Color.BLUE);
@@ -535,7 +535,7 @@ public void testClone() throws IOException {
     doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));
     Target secondTarget = mock(Target.class);
     doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));
-    RequestBuilder<Drawable> firstRequest = Glide.with(getContext())
+    RequestBuilder<Drawable> firstRequest = requestManager
         .load(mockUri("content://first"));
 
     firstRequest.into(firstTarget);
@@ -544,7 +544,7 @@ public void testClone() throws IOException {
         .apply(placeholderOf(new ColorDrawable(Color.RED)))
         .into(secondTarget);
 
-    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
+    verify(firstTarget).onResourceReady(isA(Drawable.class), isA(Transition.class));
     verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
index 34d04e635..b76b5dc58 100644
--- a/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
@@ -75,7 +75,7 @@ public void testGetItemsIsCalledInOrderIncreasing() {
       public int expectedPosition;
 
       @Override
-      public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {
+      public int[] getPreloadSize(Object item, int adapterPosition, int itemPosition) {
         return new int[] { 10, 10 };
       }
 
@@ -132,7 +132,7 @@ public void testGetItemsIsCalledInOrderDecreasing() {
       int expectedPosition = toPreload - 1;
 
       @Override
-      public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {
+      public int[] getPreloadSize(Object item, int adapterPosition, int itemPosition) {
         return new int[] { 10, 10 };
       }
 
@@ -257,8 +257,8 @@ public void testMultipleItemsForPositionIncreasing() throws NoSuchFieldException
       }
 
       @Override
-      public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {
-        assertEquals(expectedPosition / 2, adapterPostion);
+      public int[] getPreloadSize(Object item, int adapterPosition, int itemPosition) {
+        assertEquals(expectedPosition / 2, adapterPosition);
         assertEquals(expectedPosition % 2, itemPosition);
         expectedPosition++;
         return itemPosition == 0 ? new int[] { 10, 11 } : new int[] { 20, 21 };
@@ -275,7 +275,7 @@ public RequestBuilder getPreloadRequestBuilder(Object item) {
 
     preloader.onScroll(null, 1, 10, 1 + 10 + 2);
 
-    List<Integer> allValues = getTagetsSizes(request, times(4));
+    List<Integer> allValues = getTargetsSizes(request, times(4));
     assertEquals(expected, allValues);
   }
 
@@ -293,8 +293,8 @@ public void testMultipleItemsForPositionDecreasing() throws NoSuchFieldException
       }
 
       @Override
-      public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {
-        assertEquals(expectedPosition / 2, adapterPostion);
+      public int[] getPreloadSize(Object item, int adapterPosition, int itemPosition) {
+        assertEquals(expectedPosition / 2, adapterPosition);
         assertEquals(expectedPosition % 2, itemPosition);
         expectedPosition--;
         return itemPosition == 0 ? new int[] { 10, 11 } : new int[] { 20, 21 };
@@ -312,11 +312,11 @@ public RequestBuilder getPreloadRequestBuilder(Object item) {
     preloader.onScroll(null, 3, 2, 3 + 2);
     preloader.onScroll(null, 2, 2, 3 + 2);
 
-    List<Integer> allValues = getTagetsSizes(request, times(4));
+    List<Integer> allValues = getTargetsSizes(request, times(4));
     assertEquals(expected, allValues);
   }
 
-  private List<Integer> getTagetsSizes(RequestBuilder<?> requestBuilder, VerificationMode mode) {
+  private List<Integer> getTargetsSizes(RequestBuilder<?> requestBuilder, VerificationMode mode) {
     ArgumentCaptor<Integer> integerArgumentCaptor = ArgumentCaptor.forClass(Integer.class);
     ArgumentCaptor<Target> targetArgumentCaptor = ArgumentCaptor.forClass(Target.class);
     SizeReadyCallback cb = mock(SizeReadyCallback.class);
@@ -372,7 +372,7 @@ public RequestBuilder getPreloadRequestBuilder(Object item) {
     }
 
     @Override
-    public int[] getPreloadSize(Object item, int adapterPostion, int itemPosition) {
+    public int[] getPreloadSize(Object item, int adapterPosition, int itemPosition) {
       return new int[] { 100, 100 };
     }
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java b/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
index a682ff139..d60e9c262 100644
--- a/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
@@ -2,7 +2,8 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 
@@ -18,7 +19,7 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class ExifOrientationStreamTest {
-  private LruByteArrayPool byteArrayPool;
+  private ArrayPool byteArrayPool;
 
   private InputStream openOrientationExample(boolean isLandscape, int item) {
     String filePrefix = isLandscape ? "Landscape" : "Portrait";
@@ -28,7 +29,7 @@ private InputStream openOrientationExample(boolean isLandscape, int item) {
 
   @Before
   public void setUp() {
-    byteArrayPool = new LruByteArrayPool();
+    byteArrayPool = new LruArrayPool();
   }
 
   @Test
diff --git a/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java b/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
index a6f9070da..f06fd0382 100644
--- a/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
@@ -12,8 +12,8 @@
 import android.net.Uri;
 import android.provider.MediaStore;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -100,7 +100,7 @@ public void testVideoQueryReturnsVideoCursor() {
   }
 
   @Test
-  public void testImageQueryReturnsImageCurosr() {
+  public void testImageQueryReturnsImageCursor() {
     Uri queryUri = MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI;
     ThumbFetcher.ImageThumbnailQuery query = new ThumbFetcher.ImageThumbnailQuery();
     RoboCursor testCursor = new RoboCursor();
@@ -115,7 +115,7 @@ public void testImageQueryReturnsImageCurosr() {
     Uri uri = Uri.fromFile(file);
     ThumbnailQuery query = mock(ThumbnailQuery.class);
     FileService service = mock(FileService.class);
-    ByteArrayPool byteArrayPool = new LruByteArrayPool();
+    ArrayPool byteArrayPool = new LruArrayPool();
 
     public Harness() {
       cursor.addRow(new String[] { file.getAbsolutePath() });
diff --git a/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
index 9e93b4880..16f6d63cc 100644
--- a/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
@@ -61,8 +61,8 @@ public void testLoadResource_withNullInputStream_callsLoadFailed() {
 
     shadow.registerInputStream(uri, null /*inputStream*/);
 
-    StreamLocalUriFetcher fecther = new StreamLocalUriFetcher(context, uri);
-    fecther.loadData(Priority.LOW, callback);
+    StreamLocalUriFetcher fetcher = new StreamLocalUriFetcher(context, uri);
+    fetcher.loadData(Priority.LOW, callback);
 
     verify(callback).onLoadFailed(isA(FileNotFoundException.class));
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
index eb9198f88..2f3ea0229 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
@@ -432,7 +432,7 @@ public void testSubmitsDecodeJobToDiskCacheServiceWhenDecodingFromCacheOnStart()
   }
 
   @Test
-  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSoureOnlyOnStart() {
+  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSourceOnlyOnStart() {
     EngineJob<Object> job = harness.getJob();
     when(harness.decodeJob.willDecodeFromCache()).thenReturn(false);
     harness.diskCacheService.shutdownNow();
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
index fe8c252b1..97bac56e7 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
@@ -7,7 +7,7 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.signature.StringSignature;
+import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.tests.KeyAssertions;
 import com.bumptech.glide.tests.Util;
 
@@ -42,7 +42,7 @@ public void testDifferIfSourceKeyDiffers()
     mutateAndAssertDifferent(new FactoryMutation() {
       @Override
       public void mutate(Factory factory) {
-        factory.sourceKey = new StringSignature("secondKey");
+        factory.sourceKey = new ObjectKey("secondKey");
       }
     });
   }
@@ -52,7 +52,7 @@ public void testDiffersIfSignatureDiffers() {
     mutateAndAssertDifferent(new FactoryMutation() {
       @Override
       public void mutate(Factory factory) {
-        factory.signature = new StringSignature("secondSignature");
+        factory.signature = new ObjectKey("secondSignature");
       }
     });
   }
@@ -116,8 +116,8 @@ private void mutateAndAssertDifferent(FactoryMutation mutation) {
   }
 
   static class Factory {
-    Key sourceKey = new StringSignature("sourceKey");
-    Key signature = new StringSignature("signature");
+    Key sourceKey = new ObjectKey("sourceKey");
+    Key signature = new ObjectKey("signature");
     int width = 100;
     int height = 100;
     Transformation<?> transformation = mock(Transformation.class);
diff --git a/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java b/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
index 184012b38..b2ca67086 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
@@ -3,7 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import com.bumptech.glide.load.Options;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.util.ByteBufferUtil;
 
 import org.junit.After;
@@ -26,7 +26,7 @@
 
   @Before
   public void setUp() {
-    encoder = new StreamEncoder(new LruByteArrayPool());
+    encoder = new StreamEncoder(new LruArrayPool());
     file = new File(RuntimeEnvironment.application.getCacheDir(), "test");
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
index 7ce96f19c..039dfec05 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
@@ -13,13 +13,14 @@
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
 import com.bumptech.glide.load.resource.bitmap.DownsamplerTest.AllocationSizeBitmap;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
@@ -39,7 +40,7 @@
 @Config(manifest = Config.NONE, sdk = 19, shadows = AllocationSizeBitmap.class)
 public class DownsamplerTest {
   @Mock private BitmapPool bitmapPool;
-  @Mock private ByteArrayPool byteArrayPool;
+  @Mock private ArrayPool byteArrayPool;
   private Downsampler downsampler;
   private Options options;
 
@@ -49,8 +50,8 @@ public void setUp() throws Exception {
     options = new Options();
     DisplayMetrics displayMetrics =
         RuntimeEnvironment.application.getResources().getDisplayMetrics();
-    when(byteArrayPool.get(anyInt()))
-        .thenReturn(new byte[ByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
+    when(byteArrayPool.get(anyInt(), Matchers.eq(byte[].class)))
+        .thenReturn(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
     downsampler = new Downsampler(displayMetrics, bitmapPool, byteArrayPool);
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
index 4718f0a40..ff4c32ff4 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
@@ -3,7 +3,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
 import com.bumptech.glide.testutil.TestResourceUtil;
 
@@ -28,11 +29,11 @@
       new byte[] { (byte) 0x89, 0x50, 0x4e, 0x47, 0xd, 0xa, 0x1a, 0xa, 0x0, 0x0, 0x0, 0xd, 0x49,
           0x48, 0x44, 0x52, 0x0, 0x0, 0x1, (byte) 0x90, 0x0, 0x0, 0x1, 0x2c, 0x8, 0x6 };
 
-  private LruByteArrayPool byteArrayPool;
+  private ArrayPool byteArrayPool;
 
   @Before
   public void setUp() {
-    byteArrayPool = new LruByteArrayPool();
+    byteArrayPool = new LruArrayPool();
   }
 
   @Test
@@ -186,11 +187,11 @@ public void testHandlesSometimesZeroSkips() throws IOException {
 
   private static void runTest(byte[] data, ParserTestCase test) throws IOException {
     InputStream is = new ByteArrayInputStream(data);
-    ImageHeaderParser parser = new ImageHeaderParser(is, new LruByteArrayPool());
+    ImageHeaderParser parser = new ImageHeaderParser(is, new LruArrayPool());
     test.run(parser);
 
     ByteBuffer buffer = ByteBuffer.wrap(data);
-    parser = new ImageHeaderParser(buffer, new LruByteArrayPool());
+    parser = new ImageHeaderParser(buffer, new LruArrayPool());
     test.run(parser);
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
index c8edbaeac..f9b3e6452 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
@@ -7,7 +7,8 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -29,7 +30,7 @@
 
   private RecyclableBufferedInputStream stream;
   private byte[] data;
-  private LruByteArrayPool byteArrayPool;
+  private ArrayPool byteArrayPool;
 
   @Before
   public void setUp() {
@@ -38,7 +39,7 @@ public void setUp() {
       data[i] = (byte) i;
     }
 
-    byteArrayPool = new LruByteArrayPool();
+    byteArrayPool = new LruArrayPool();
     InputStream wrapped = new ByteArrayInputStream(data);
     stream = new RecyclableBufferedInputStream(wrapped, byteArrayPool, BUFFER_SIZE);
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
index bd4efeda5..c87378fe9 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
@@ -4,7 +4,7 @@
 
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -32,7 +32,7 @@
   public void setUp() {
     MockitoAnnotations.initMocks(this);
 
-    decoder = new StreamGifDecoder(byteBufferDecoder, new LruByteArrayPool());
+    decoder = new StreamGifDecoder(byteBufferDecoder, new LruArrayPool());
     options = new Options();
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
index 41fea2adc..0631bd73f 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
@@ -49,7 +49,7 @@ public void testUsesGivenFormat() {
   }
 
   @Test
-  public void testBitampResourceIsRecycled() {
+  public void testBitmapResourceIsRecycled() {
     harness.getTranscodedDescription();
 
     verify(harness.bitmapResource).recycle();
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
index 2219e7720..d3d024977 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
@@ -26,7 +26,7 @@ public void testReturnsUnitDecoderIfClassesAreIdentical() {
   }
 
   @Test
-  public void testCanRegisterAndRetreiveResouceTranscoder() {
+  public void testCanRegisterAndRetrieveResourceTranscoder() {
     ResourceTranscoder transcoder = mock(ResourceTranscoder.class);
     factories.register(File.class, String.class, transcoder);
 
diff --git a/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
index 2110a1613..3ee515868 100644
--- a/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
@@ -65,7 +65,7 @@ public void testClearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturn
   }
 
   @Test
-  public void testClearRemoveAndRecyle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
+  public void testClearRemoveAndRecycle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
     Request request = mock(Request.class);
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);
diff --git a/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
index 5e085c26e..38d60fe05 100644
--- a/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
@@ -31,6 +31,7 @@
   private int viewId;
   private Notification notification;
   private int notificationId;
+  private String notificationTag;
   private NotificationTarget target;
 
   @Before
@@ -43,11 +44,12 @@ public void setUp() {
     viewId = 123;
     notification = mock(Notification.class);
     notificationId = 456;
+    notificationTag = "tag";
 
 
     target =
         new NotificationTarget(RuntimeEnvironment.application, 100 /*width*/, 100 /*height*/,
-            viewId, remoteViews, notification, notificationId);
+            viewId, remoteViews, notification, notificationId, notificationTag);
   }
 
   @Test
@@ -63,35 +65,41 @@ public void updatesNotificationManagerWithNotificationIdAndNotificationOnResourc
     /*glideAnimation*/);
 
     assertEquals(notificationId, shadowManager.updatedNotificationId);
+    assertEquals(notificationTag, shadowManager.updatedNotificationTag);
     assertEquals(notification, shadowManager.updatedNotification);
   }
 
   @Test(expected = NullPointerException.class)
   public void testThrowsIfContextIsNull() {
     new NotificationTarget(null /*context*/, 100 /*width*/, 100 /*height*/,
-        123 /*viewId*/, mock(RemoteViews.class), mock(Notification.class), 456 /*notificationId*/);
+        123 /*viewId*/, mock(RemoteViews.class), mock(Notification.class), 456 /*notificationId*/,
+        "tag" /*notificationTag*/);
   }
 
 
   @Test(expected = NullPointerException.class)
   public void testThrowsIfNotificationIsNull() {
     new NotificationTarget(RuntimeEnvironment.application, 100 /*width*/, 100 /*height*/,
-        123 /*viewId*/, mock(RemoteViews.class), null /*notification*/, 456 /*notificationId*/);
+        123 /*viewId*/, mock(RemoteViews.class), null /*notification*/, 456 /*notificationId*/,
+        "tag" /*notificationTag*/);
   }
 
   @Test(expected = NullPointerException.class)
   public void testThrowsIfRemoteViewsIsNull() {
     new NotificationTarget(RuntimeEnvironment.application, 100 /*width*/, 100 /*height*/,
-        123 /*viewId*/, null /*remoteViews*/, mock(Notification.class), 456 /*notificationId*/);
+        123 /*viewId*/, null /*remoteViews*/, mock(Notification.class), 456 /*notificationId*/,
+        "tag" /*notificationTag*/);
   }
 
   @Implements(NotificationManager.class)
   public static class UpdateShadowNotificationManager extends ShadowNotificationManager {
     int updatedNotificationId;
+    String updatedNotificationTag;
     Notification updatedNotification;
 
     @Implementation
-    public void notify(int notificationId, Notification notification) {
+    public void notify(String notificationTag, int notificationId, Notification notification) {
+      updatedNotificationTag = notificationTag;
       updatedNotificationId = notificationId;
       updatedNotification = notification;
     }
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
index b6fa33ac8..5bc27b14a 100644
--- a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
@@ -40,7 +40,7 @@ public void testReturnsReturnsAnimationIfNotFromMemoryCacheAndIsFirstResource()
   }
 
   @Test
-  public void testReturnsAnimationIfNotFromMemocyCacheAndNotIsFirstResource() {
+  public void testReturnsAnimationIfNotFromMemoryCacheAndNotIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
         factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }
diff --git a/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java b/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
index 2d92de3d4..79f8e961c 100644
--- a/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
+++ b/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
@@ -3,7 +3,8 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.testutil.TestResourceUtil;
 
@@ -20,7 +21,7 @@
 @Config(manifest = Config.NONE, sdk = 18)
 public class ExifTest {
 
-  private LruByteArrayPool byteArrayPool;
+  private ArrayPool byteArrayPool;
 
   private InputStream open(String imageName) throws IOException {
     return TestResourceUtil.openResource(getClass(), "exif-orientation-examples/" + imageName);
@@ -47,7 +48,7 @@ private void assertOrientation(String filePrefix, int expectedOrientation) {
 
   @Before
   public void setUp() {
-    byteArrayPool = new LruByteArrayPool();
+    byteArrayPool = new LruArrayPool();
   }
 
   @Test
@@ -73,11 +74,11 @@ public void testPortrait() throws IOException {
   @Test
   public void testHandlesInexactSizesInByteArrayPools() {
     for (int i = 1; i <= 8; i++) {
-      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
+      byteArrayPool.put(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES], byte[].class);
       assertOrientation("Portrait", i);
     }
     for (int i = 1; i <= 8; i++) {
-      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
+      byteArrayPool.put(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES], byte[].class);
       assertOrientation("Landscape", i);
     }
   }
diff --git a/library/src/test/java/com/bumptech/glide/signature/StringSignatureTest.java b/library/src/test/java/com/bumptech/glide/signature/StringSignatureTest.java
deleted file mode 100644
index 463d17cca..000000000
--- a/library/src/test/java/com/bumptech/glide/signature/StringSignatureTest.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.bumptech.glide.signature;
-
-import com.bumptech.glide.tests.KeyAssertions;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-import java.io.UnsupportedEncodingException;
-import java.security.NoSuchAlgorithmException;
-
-@RunWith(JUnit4.class)
-public class StringSignatureTest {
-
-  @Test
-  public void testStringSignatureIsNotEqualIfStringDiffers()
-      throws UnsupportedEncodingException, NoSuchAlgorithmException {
-    StringSignature first = new StringSignature("first");
-    StringSignature second = new StringSignature("second");
-
-    KeyAssertions.assertDifferent(first, second);
-  }
-
-  @Test
-  public void testStringSignatureIsEqualIfStringIsTheSame()
-      throws UnsupportedEncodingException, NoSuchAlgorithmException {
-    StringSignature first = new StringSignature("signature");
-    StringSignature second = new StringSignature("signature");
-
-    KeyAssertions.assertSame(first, second);
-  }
-}
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
index de9b10705..7bbcb4d81 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
@@ -31,7 +31,7 @@
 import java.util.List;
 
 /**
- * A fragment that shows square image thumbnails whose size is determined by the framgent's
+ * A fragment that shows square image thumbnails whose size is determined by the fragment's
  * arguments in a grid pattern.
  */
 public class FlickrPhotoGrid extends Fragment implements PhotoViewer {
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
index b3442f26b..2858df855 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
@@ -2,7 +2,7 @@
 
 import android.os.Parcel;
 
-/** Query wusing flickr's recent API. */
+/** Query using Flickr's recent API. */
 public final class RecentQuery implements Query {
   public static final Creator<RecentQuery> CREATOR = new Creator<RecentQuery>() {
     @Override
diff --git a/third_party/disklrucache b/third_party/disklrucache
index 4f6ac93bd..743de2592 160000
--- a/third_party/disklrucache
+++ b/third_party/disklrucache
@@ -1 +1 @@
-Subproject commit 4f6ac93bd973f5b42f428b9ae68266bc951e121b
+Subproject commit 743de259274020cdef3de809b8537c0775043c8a
diff --git a/third_party/gif_decoder/gradle.properties b/third_party/gif_decoder/gradle.properties
index 53d022433..75215b58f 100644
--- a/third_party/gif_decoder/gradle.properties
+++ b/third_party/gif_decoder/gradle.properties
@@ -6,6 +6,5 @@ VERSION_NAME=1.0.0-SNAPSHOT
 VERSION_MAJOR=1
 VERSION_MINOR=0
 VERSION_PATCH=0
-VERSION_CODE=1
 
 POM_DESCRIPTION=Implementation of GifDecoder that is more memory efficient to animate for Android devices.
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
index a6defca35..bab7cd168 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
@@ -318,12 +318,10 @@ public synchronized Bitmap getNextFrame() {
     status = STATUS_OK;
 
     GifFrame currentFrame = header.frames.get(framePointer);
-    GifFrame previousFrame;
+    GifFrame previousFrame = null;
     int previousIndex = framePointer - 1;
     if (previousIndex >= 0) {
       previousFrame = header.frames.get(previousIndex);
-    } else {
-      previousFrame = header.frames.get(getFrameCount() - 1);
     }
 
     final int savedBgColor = header.bgColor;
@@ -497,6 +495,11 @@ private Bitmap setPixels(GifFrame currentFrame, GifFrame previousFrame) {
     // Final location of blended pixels.
     final int[] dest = mainScratch;
 
+    // clear all pixels when meet first frame
+    if (previousFrame == null) {
+      Arrays.fill(dest, 0);
+    }
+
     // fill in starting image contents based on last image's dispose code
     if (previousFrame != null && previousFrame.dispose > DISPOSAL_UNSPECIFIED) {
       // We don't need to do anything for DISPOSAL_NONE, if it has the correct pixels so will our
@@ -520,7 +523,7 @@ private Bitmap setPixels(GifFrame currentFrame, GifFrame previousFrame) {
       }
     }
 
-    // Decode pixels for this frame  into the global pixels[] scratch.
+    // Decode pixels for this frame into the global pixels[] scratch.
     decodeBitmapData(currentFrame);
 
     int downsampledIH = currentFrame.ih / sampleSize;
diff --git a/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
index 210818ea2..9b1b600b0 100644
--- a/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
+++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
@@ -101,9 +101,29 @@ public void testSettingDataResetsFramePointer() {
   }
 
   @Test
-  @Config(shadows = { CustomShadowBitmap.class })
-  public void testFirstFrameMustUsingLastFrameDispose() throws IOException {
-    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_dispose.gif");
+  @Config(shadows = {CustomShadowBitmap.class})
+  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalBackground()
+      throws IOException {
+    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_background.gif");
+    GifHeaderParser headerParser = new GifHeaderParser();
+    headerParser.setData(data);
+    GifHeader header = headerParser.parseHeader();
+    GifDecoder decoder = new GifDecoder(provider);
+    decoder.setData(header, data);
+    decoder.advance();
+    Bitmap firstFrame = decoder.getNextFrame();
+    decoder.advance();
+    decoder.getNextFrame();
+    decoder.advance();
+    Bitmap firstFrameTwice = decoder.getNextFrame();
+    assertTrue(Arrays.equals((((CustomShadowBitmap) shadowOf(firstFrame))).getPixels(),
+        (((CustomShadowBitmap) shadowOf(firstFrameTwice))).getPixels()));
+  }
+
+  @Test
+  @Config(shadows = {CustomShadowBitmap.class})
+  public void testFirstFrameMustClearBeforeDrawingWhenLastFrameIsDisposalNone() throws IOException {
+    byte[] data = TestUtil.resourceToBytes(getClass(), "transparent_disposal_none.gif");
     GifHeaderParser headerParser = new GifHeaderParser();
     headerParser.setData(data);
     GifHeader header = headerParser.parseHeader();
diff --git a/third_party/gif_decoder/src/test/resources/transparent_dispose.gif b/third_party/gif_decoder/src/test/resources/transparent_disposal_background.gif
similarity index 100%
rename from third_party/gif_decoder/src/test/resources/transparent_dispose.gif
rename to third_party/gif_decoder/src/test/resources/transparent_disposal_background.gif
diff --git a/third_party/gif_decoder/src/test/resources/transparent_disposal_none.gif b/third_party/gif_decoder/src/test/resources/transparent_disposal_none.gif
new file mode 100644
index 000000000..158e329ba
Binary files /dev/null and b/third_party/gif_decoder/src/test/resources/transparent_disposal_none.gif differ
