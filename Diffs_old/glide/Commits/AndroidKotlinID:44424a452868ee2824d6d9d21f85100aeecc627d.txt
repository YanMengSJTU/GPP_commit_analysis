diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index f6d86cd79..7e852e18a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -359,6 +359,7 @@ public boolean apply(AnnotationSpec input) {
         .addStatement("super($N, $N)", "transcodeClass", "other")
         .build();
 
+    ClassName context = ClassName.get("android.content", "Context");
     ClassName glide = ClassName.get("com.bumptech.glide", "Glide");
     ClassName requestManager = ClassName.get("com.bumptech.glide", "RequestManager");
     MethodSpec secondConstructor =
@@ -366,7 +367,9 @@ public boolean apply(AnnotationSpec input) {
             .addParameter(glide, "glide")
             .addParameter(requestManager, "requestManager")
             .addParameter(classOfTranscodeType, "transcodeClass")
-            .addStatement("super($N, $N ,$N)", "glide", "requestManager", "transcodeClass")
+            .addParameter(context, "context")
+            .addStatement(
+                "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context")
             .build();
     return ImmutableList.of(firstConstructor, secondConstructor);
   }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
index eb923f37a..bc059256b 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
@@ -39,6 +39,8 @@
       "com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory";
   private static final String REQUEST_MANAGER_QUALIFIED_NAME =
       "com.bumptech.glide.RequestManager";
+  private static final ClassName CONTEXT_CLASS_NAME =
+      ClassName.get("android.content", "Context");
 
   static final String GENERATED_REQUEST_MANAGER_FACTORY_PACKAGE_NAME =
       "com.bumptech.glide";
@@ -79,8 +81,9 @@ TypeSpec generate(String generatedCodePackageName, TypeSpec generatedRequestMana
                 .addParameter(ClassName.get(glideType), "glide")
                 .addParameter(ClassName.get(lifecycleType), "lifecycle")
                 .addParameter(ClassName.get(requestManagerTreeNodeType), "treeNode")
+                .addParameter(CONTEXT_CLASS_NAME, "context")
                 .addStatement(
-                    "return new $T(glide, lifecycle, treeNode)",
+                    "return new $T(glide, lifecycle, treeNode, context)",
                     ClassName.get(generatedCodePackageName, generatedRequestManagerSpec.name))
                 .build()
         )
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index ba624c744..9e7d618c8 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -59,6 +59,8 @@
       "com.bumptech.glide.manager.RequestManagerTreeNode";
   private static final ClassName CHECK_RESULT_CLASS_NAME =
       ClassName.get("android.support.annotation", "CheckResult");
+  private static final ClassName CONTEXT_CLASS_NAME =
+      ClassName.get("android.content", "Context");
 
   private static final String GENERATED_REQUEST_MANAGER_SIMPLE_NAME =
       "GlideRequests";
@@ -128,7 +130,8 @@ private MethodSpec generateCallSuperConstructor() {
         .addParameter(ClassName.get(glideType), "glide")
         .addParameter(ClassName.get(lifecycleType), "lifecycle")
         .addParameter(ClassName.get(requestManagerTreeNodeType), "treeNode")
-        .addStatement("super(glide, lifecycle, treeNode)")
+        .addParameter(CONTEXT_CLASS_NAME, "context")
+        .addStatement("super(glide, lifecycle, treeNode, context)")
         .build();
   }
 
@@ -150,7 +153,7 @@ private MethodSpec generateAsMethod(String generatedCodePackageName, TypeSpec re
         .addParameter(classOfResouceType, "resourceClass")
         .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .returns(requestBuilderOfResourceType)
-        .addStatement("return new $T<>(glide, this, resourceClass)",
+        .addStatement("return new $T<>(glide, this, resourceClass, context)",
             this.generatedRequestBuilderClassName)
         .build();
   }
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 91b2d4215..e755b07f4 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -2,6 +2,7 @@
 
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 
+import android.content.Context;
 import android.net.Uri;
 import android.support.annotation.CheckResult;
 import android.support.annotation.DrawableRes;
@@ -41,11 +42,12 @@
       new RequestOptions().diskCacheStrategy(DiskCacheStrategy.DATA).priority(Priority.LOW)
           .skipMemoryCache(true);
 
-  private final GlideContext context;
+  private final Context context;
   private final RequestManager requestManager;
   private final Class<TranscodeType> transcodeClass;
   private final RequestOptions defaultRequestOptions;
   private final Glide glide;
+  private final GlideContext glideContext;
 
   @NonNull protected RequestOptions requestOptions;
 
@@ -65,18 +67,19 @@
   private boolean isThumbnailBuilt;
 
   protected RequestBuilder(Glide glide, RequestManager requestManager,
-      Class<TranscodeType> transcodeClass) {
+      Class<TranscodeType> transcodeClass, Context context) {
     this.glide = glide;
     this.requestManager = requestManager;
-    this.context = glide.getGlideContext();
     this.transcodeClass = transcodeClass;
     this.defaultRequestOptions = requestManager.getDefaultRequestOptions();
+    this.context = context;
     this.transitionOptions = requestManager.getDefaultTransitionOptions(transcodeClass);
     this.requestOptions = defaultRequestOptions;
+    this.glideContext = glide.getGlideContext();
   }
 
   protected RequestBuilder(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
-    this(other.glide, other.requestManager, transcodeClass);
+    this(other.glide, other.requestManager, transcodeClass, other.context);
     model = other.model;
     isModelSet = other.isModelSet;
     requestOptions = other.requestOptions;
@@ -554,7 +557,7 @@ protected RequestOptions getMutableOptions() {
       }
     }
 
-    return into(context.buildImageViewTarget(view, transcodeClass), requestOptions);
+    return into(glideContext.buildImageViewTarget(view, transcodeClass), requestOptions);
   }
 
   /**
@@ -607,10 +610,10 @@ protected RequestOptions getMutableOptions() {
    */
   public FutureTarget<TranscodeType> submit(int width, int height) {
     final RequestFutureTarget<TranscodeType> target =
-        new RequestFutureTarget<>(context.getMainHandler(), width, height);
+        new RequestFutureTarget<>(glideContext.getMainHandler(), width, height);
 
     if (Util.isOnBackgroundThread()) {
-      context.getMainHandler().post(new Runnable() {
+      glideContext.getMainHandler().post(new Runnable() {
         @Override
         public void run() {
           if (!target.isCancelled()) {
@@ -839,6 +842,7 @@ private Request obtainRequest(Target<TranscodeType> target,
       int overrideWidth, int overrideHeight) {
     return SingleRequest.obtain(
         context,
+        glideContext,
         model,
         transcodeClass,
         requestOptions,
@@ -848,7 +852,7 @@ private Request obtainRequest(Target<TranscodeType> target,
         target,
         requestListener,
         requestCoordinator,
-        context.getEngine(),
+        glideContext.getEngine(),
         transitionOptions.getTransitionFactory());
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 18e84d3c7..ecd2e5821 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -51,6 +51,7 @@
           .skipMemoryCache(true);
 
   protected final Glide glide;
+  protected final Context context;
   @Synthetic final Lifecycle lifecycle;
   private final RequestTracker requestTracker;
   private final RequestManagerTreeNode treeNode;
@@ -67,8 +68,15 @@ public void run() {
   @NonNull
   private RequestOptions requestOptions;
 
-  public RequestManager(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode) {
-    this(glide, lifecycle, treeNode, new RequestTracker(), glide.getConnectivityMonitorFactory());
+  public RequestManager(
+      Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode, Context context) {
+    this(
+        glide,
+        lifecycle,
+        treeNode,
+        new RequestTracker(),
+        glide.getConnectivityMonitorFactory(),
+        context);
   }
 
   // Our usage is safe here.
@@ -78,16 +86,18 @@ public RequestManager(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode t
       Lifecycle lifecycle,
       RequestManagerTreeNode treeNode,
       RequestTracker requestTracker,
-      ConnectivityMonitorFactory factory) {
+      ConnectivityMonitorFactory factory,
+      Context context) {
     this.glide = glide;
     this.lifecycle = lifecycle;
     this.treeNode = treeNode;
     this.requestTracker = requestTracker;
-
-    final Context context = glide.getGlideContext().getBaseContext();
+    this.context = context;
 
     connectivityMonitor =
-        factory.build(context, new RequestManagerConnectivityListener(requestTracker));
+        factory.build(
+            context.getApplicationContext(),
+            new RequestManagerConnectivityListener(requestTracker));
 
     // If we're the application level request manager, we may be created on a background thread.
     // In that case we cannot risk synchronously pausing or resuming requests, so we hack around the
@@ -393,7 +403,7 @@ public void onDestroy() {
    */
   @CheckResult
   public <ResourceType> RequestBuilder<ResourceType> as(Class<ResourceType> resourceClass) {
-    return new RequestBuilder<>(glide, this, resourceClass);
+    return new RequestBuilder<>(glide, this, resourceClass, context);
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index ed0ad6a58..db2052254 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -499,9 +499,9 @@ public boolean queueIdle() {
 
     @SuppressWarnings("unchecked")
     <R> EngineJob<R> build(Key key, boolean isMemoryCacheable,
-        boolean useUnlimitedSourceGeneratorPool, boolean isAnimation) {
+        boolean useUnlimitedSourceGeneratorPool, boolean useAnimationPool) {
       EngineJob<R> result = (EngineJob<R>) pool.acquire();
-      return result.init(key, isMemoryCacheable, useUnlimitedSourceGeneratorPool, isAnimation);
+      return result.init(key, isMemoryCacheable, useUnlimitedSourceGeneratorPool, useAnimationPool);
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 38957f280..87c714a6a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -44,7 +44,7 @@
   private Key key;
   private boolean isCacheable;
   private boolean useUnlimitedSourceGeneratorPool;
-  private boolean isAnimation;
+  private boolean useAnimationPool;
   private Resource<?> resource;
   private DataSource dataSource;
   private boolean hasResource;
@@ -99,11 +99,11 @@
       Key key,
       boolean isCacheable,
       boolean useUnlimitedSourceGeneratorPool,
-      boolean isAnimation) {
+      boolean useAnimationPool) {
     this.key = key;
     this.isCacheable = isCacheable;
     this.useUnlimitedSourceGeneratorPool = useUnlimitedSourceGeneratorPool;
-    this.isAnimation = isAnimation;
+    this.useAnimationPool = useAnimationPool;
     return this;
   }
 
@@ -141,10 +141,8 @@ public void removeCallback(ResourceCallback cb) {
   }
 
   private GlideExecutor getActiveSourceExecutor() {
-    if (isAnimation) {
-      return animationExecutor;
-    }
-    return useUnlimitedSourceGeneratorPool ? sourceUnlimitedExecutor : sourceExecutor;
+    return useUnlimitedSourceGeneratorPool
+        ? sourceUnlimitedExecutor : (useAnimationPool ? animationExecutor : sourceExecutor);
   }
 
   // We cannot remove callbacks while notifying our list of callbacks directly because doing so
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifOptions.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifOptions.java
index 4a7bbc61e..cb2f71e5e 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifOptions.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifOptions.java
@@ -16,7 +16,7 @@
    * decoding frames of GIFs.
    */
   public static final Option<DecodeFormat> DECODE_FORMAT = Option.memory(
-      "com.bumptech.glide.load.resource.gif.DecodeFormat", DecodeFormat.DEFAULT);
+      "com.bumptech.glide.load.resource.gif.GifOptions.DecodeFormat", DecodeFormat.DEFAULT);
 
   /**
    * If set to {@code true}, disables the GIF {@link com.bumptech.glide.load.ResourceDecoder}s
@@ -24,7 +24,7 @@
    * {@code false}.
    */
   public static final Option<Boolean> DISABLE_ANIMATION = Option.memory(
-      "com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder.DisableAnimation", false);
+      "com.bumptech.glide.load.resource.gif.GifOptions.DisableAnimation", false);
 
   private GifOptions() {
     // Utility class.
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index 81c3749fb..fedf092a4 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -90,9 +90,13 @@ private RequestManager getApplicationManager(Context context) {
           // ApplicationLifecycle.
 
           // TODO(b/27524013): Factor out this Glide.get() call.
-          Glide glide = Glide.get(context);
+          Glide glide = Glide.get(context.getApplicationContext());
           applicationManager =
-              factory.build(glide, new ApplicationLifecycle(), new EmptyRequestManagerTreeNode());
+              factory.build(
+                  glide,
+                  new ApplicationLifecycle(),
+                  new EmptyRequestManagerTreeNode(),
+                  context.getApplicationContext());
         }
       }
     }
@@ -338,7 +342,8 @@ private RequestManager fragmentGet(Context context, android.app.FragmentManager
       // TODO(b/27524013): Factor out this Glide.get() call.
       Glide glide = Glide.get(context);
       requestManager =
-          factory.build(glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode());
+          factory.build(
+              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);
       current.setRequestManager(requestManager);
     }
     return requestManager;
@@ -369,7 +374,8 @@ private RequestManager supportFragmentGet(Context context, FragmentManager fm,
       // TODO(b/27524013): Factor out this Glide.get() call.
       Glide glide = Glide.get(context);
       requestManager =
-          factory.build(glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode());
+          factory.build(
+              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);
       current.setRequestManager(requestManager);
     }
     return requestManager;
@@ -406,14 +412,17 @@ public boolean handleMessage(Message message) {
    */
   public interface RequestManagerFactory {
     RequestManager build(
-        Glide glide, Lifecycle lifecycle, RequestManagerTreeNode requestManagerTreeNode);
+        Glide glide,
+        Lifecycle lifecycle,
+        RequestManagerTreeNode requestManagerTreeNode,
+        Context context);
   }
 
   private static final RequestManagerFactory DEFAULT_FACTORY = new RequestManagerFactory() {
     @Override
     public RequestManager build(Glide glide, Lifecycle lifecycle,
-        RequestManagerTreeNode requestManagerTreeNode) {
-      return new RequestManager(glide, lifecycle, requestManagerTreeNode);
+        RequestManagerTreeNode requestManagerTreeNode, Context context) {
+      return new RequestManager(glide, lifecycle, requestManagerTreeNode, context);
     }
   };
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index fc06b8908..f661cdbb9 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -426,6 +426,10 @@ public RequestOptions sizeMultiplier(@FloatRange(from = 0, to = 1) float sizeMul
    * of Glide's threads as part of another request. Using this method in other scenarios can lead
    * to excessive memory usage and OOMs and/or a significant decrease in performance across an
    * application.
+   *
+   * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and
+   * {@link #useAnimationPool(boolean)} are set, {@link #useUnlimitedSourceGeneratorsPool(boolean)}
+   * will be preferred and {@link #useAnimationPool(boolean)} will be ignored.
    */
   @CheckResult
   public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
@@ -447,6 +451,10 @@ public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
    * may load remote data. The animation executor has fewer threads available to it than Glide's
    * normal executors and is only useful as a way of avoiding blocking on longer and more expensive
    * reads for critical requests like those in an animating GIF.
+   *
+   * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and
+   * {@link #useAnimationPool(boolean)} are set, {@link #useUnlimitedSourceGeneratorsPool(boolean)}
+   * will be preferred and {@link #useAnimationPool(boolean)} will be ignored.
    */
   @CheckResult
   public RequestOptions useAnimationPool(boolean flag) {
@@ -645,6 +653,16 @@ public RequestOptions error(@DrawableRes int resourceId) {
    * for resource ids provided via {@link #error(int)}, {@link #placeholder(int)}, and
    * {@link #fallback(Drawable)}.
    *
+   * <p>The theme is <em>NOT</em> applied in the decoder that will attempt to decode a given
+   * resource id model on Glide's background threads. The theme is used exclusively on the main
+   * thread to obtain placeholder/error/fallback drawables to avoid leaking Activities.
+   *
+   * <p>If the {@link android.content.Context} of the {@link android.app.Fragment} or
+   * {@link android.app.Activity} used to start this load has a different
+   * {@link android.content.res.Resources.Theme}, the {@link android.content.res.Resources.Theme}
+   * provided here will override the {@link android.content.res.Resources.Theme} of the
+   * {@link android.content.Context}.
+   *
    * @param theme The theme to use when loading Drawables.
    * @return this request builder.
    */
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index d8338d8fd..49a6e988a 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request;
 
+import android.content.Context;
+import android.content.res.Resources.Theme;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.Nullable;
@@ -84,6 +86,7 @@
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
 
   private RequestCoordinator requestCoordinator;
+  private Context context;
   private GlideContext glideContext;
   @Nullable
   private Object model;
@@ -107,6 +110,7 @@
   private int height;
 
   public static <R> SingleRequest<R> obtain(
+      Context context,
       GlideContext glideContext,
       Object model,
       Class<R> transcodeClass,
@@ -125,6 +129,7 @@
       request = new SingleRequest<>();
     }
     request.init(
+        context,
         glideContext,
         model,
         transcodeClass,
@@ -146,6 +151,7 @@
   }
 
   private void init(
+      Context context,
       GlideContext glideContext,
       Object model,
       Class<R> transcodeClass,
@@ -158,6 +164,7 @@ private void init(
       RequestCoordinator requestCoordinator,
       Engine engine,
       TransitionFactory<? super R> animationFactory) {
+    this.context = context;
     this.glideContext = glideContext;
     this.model = model;
     this.transcodeClass = transcodeClass;
@@ -181,6 +188,7 @@ public StateVerifier getVerifier() {
   @Override
   public void recycle() {
     assertNotCallingCallbacks();
+    context = null;
     glideContext = null;
     model = null;
     transcodeClass = null;
@@ -379,7 +387,9 @@ private Drawable getFallbackDrawable() {
   }
 
   private Drawable loadDrawable(@DrawableRes int resourceId) {
-    return DrawableDecoderCompat.getDrawable(glideContext, resourceId, requestOptions.getTheme());
+    Theme theme = requestOptions.getTheme() != null
+        ? requestOptions.getTheme() : context.getTheme();
+    return DrawableDecoderCompat.getDrawable(glideContext, resourceId, theme);
   }
 
   private void setErrorPlaceholder() {
@@ -595,7 +605,8 @@ public boolean isEquivalentTo(Request o) {
           // We do not want to require that RequestListeners implement equals/hashcode, so we don't
           // compare them using equals(). We can however, at least assert that the request listener
           // is either present or not present in both requests.
-          && requestListener != null ? that.requestListener != null : that.requestListener == null;
+          && (requestListener != null
+          ? that.requestListener != null : that.requestListener == null);
     }
     return false;
   }
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index 337bd2965..dfb45ba0c 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -127,7 +127,7 @@ public Boolean answer(InvocationOnMock invocation) throws Throwable {
 
     Lifecycle lifecycle = mock(Lifecycle.class);
     RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);
-    requestManager = new RequestManager(Glide.get(getContext()), lifecycle, treeNode);
+    requestManager = new RequestManager(Glide.get(getContext()), lifecycle, treeNode, getContext());
     requestManager.resumeRequests();
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
index 22bab0325..4a9d72750 100644
--- a/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
+++ b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
@@ -8,6 +8,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import android.app.Application;
 import android.widget.ImageView;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestOptions;
@@ -30,11 +31,13 @@
   @Mock GlideContext glideContext;
   @Mock RequestManager requestManager;
   private Glide glide;
+  private Application context;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
     glide = Glide.get(RuntimeEnvironment.application);
+    context = RuntimeEnvironment.application;
   }
 
   @After
@@ -44,7 +47,7 @@ public void tearDown() {
 
   @Test(expected = NullPointerException.class)
   public void testThrowsIfContextIsNull() {
-    new RequestBuilder<>(null /*context*/, requestManager, Object.class);
+    new RequestBuilder<>(null /*context*/, requestManager, Object.class, context);
   }
 
   @Test(expected = NullPointerException.class)
@@ -119,7 +122,7 @@ public void runTest() throws Exception {
         .thenReturn(new RequestOptions());
     when(requestManager.getDefaultTransitionOptions(any(Class.class)))
         .thenReturn(new GenericTransitionOptions<>());
-    return new RequestBuilder<>(glide, requestManager, Object.class)
+    return new RequestBuilder<>(glide, requestManager, Object.class, context)
         .load((Object) null);
   }
 }
diff --git a/library/src/test/java/com/bumptech/glide/RequestManagerTest.java b/library/src/test/java/com/bumptech/glide/RequestManagerTest.java
index 68551d56d..0091ddb8d 100644
--- a/library/src/test/java/com/bumptech/glide/RequestManagerTest.java
+++ b/library/src/test/java/com/bumptech/glide/RequestManagerTest.java
@@ -44,6 +44,7 @@
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
+    Context context = RuntimeEnvironment.application;
     connectivityMonitor = mock(ConnectivityMonitor.class);
     ConnectivityMonitorFactory factory = mock(ConnectivityMonitorFactory.class);
     when(factory.build(isA(Context.class), isA(ConnectivityMonitor.ConnectivityListener.class)))
@@ -61,7 +62,8 @@ public ConnectivityMonitor answer(InvocationOnMock invocation) throws Throwable
             lifecycle,
             treeNode,
             requestTracker,
-            factory);
+            factory,
+            context);
   }
 
   @Test
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
index de3766e31..417845a13 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
@@ -459,7 +459,7 @@ public void testSubmitsDecodeJobToUnlimitedSourceServiceWhenDecodingFromSourceOn
     EngineJobListener listener = mock(EngineJobListener.class);
     boolean isCacheable = true;
     boolean useUnlimitedSourceGeneratorPool = false;
-    boolean isAnimation = false;
+    boolean useAnimationPool = false;
     int numCbs = 10;
     List<ResourceCallback> cbs = new ArrayList<>();
     EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);
@@ -482,7 +482,7 @@ public MultiCbHarness() {
               animationService,
               listener,
               pool,
-              factory).init(key, isCacheable, useUnlimitedSourceGeneratorPool, isAnimation);
+              factory).init(key, isCacheable, useUnlimitedSourceGeneratorPool, useAnimationPool);
       for (int i = 0; i < numCbs; i++) {
         cbs.add(mock(ResourceCallback.class));
       }
@@ -507,7 +507,7 @@ public MultiCbHarness() {
     GlideExecutor animationService = MockGlideExecutor.newMainThreadUnlimitedExecutor();
     boolean isCacheable = true;
     boolean useUnlimitedSourceGeneratorPool = false;
-    boolean isAnimation = false;
+    boolean useAnimationPool = false;
     DecodeJob<Object> decodeJob = mock(DecodeJob.class);
     Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);
     DataSource dataSource = DataSource.DATA_DISK_CACHE;
@@ -523,7 +523,7 @@ public MultiCbHarness() {
               listener,
               pool,
               factory)
-              .init(key, isCacheable, useUnlimitedSourceGeneratorPool, isAnimation);
+              .init(key, isCacheable, useUnlimitedSourceGeneratorPool, useAnimationPool);
       result.addCallback(cb);
       return result;
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index b226e3aa3..caa85b86c 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -423,7 +423,7 @@ public void testFactoryIsGivenNecessaryArguments() {
         eq(harness.cacheKey),
         eq(true) /*isMemoryCacheable*/,
         eq(false) /*useUnlimitedSourceGeneratorPool*/,
-        /*isAnimation=*/ eq(false));
+        /*useAnimationPool=*/ eq(false));
   }
 
   @Test
@@ -435,7 +435,7 @@ public void testFactoryIsGivenNecessaryArgumentsWithUnlimitedPool() {
         eq(harness.cacheKey),
         eq(true) /*isMemoryCacheable*/,
         eq(true) /*useUnlimitedSourceGeneratorPool*/,
-        /*isAnimation=*/ eq(false));
+        /*useAnimationPool=*/ eq(false));
   }
 
   @Test
diff --git a/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index 6edd0940f..86c73fa82 100644
--- a/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -2,7 +2,7 @@
 
 import static com.bumptech.glide.tests.Util.isADataSource;
 import static com.bumptech.glide.tests.Util.mockResource;
-import static org.junit.Assert.assertEquals;
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
@@ -20,6 +20,7 @@
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.GlideContext;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -34,6 +35,9 @@
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.request.transition.TransitionFactory;
+import com.bumptech.glide.signature.ObjectKey;
+import com.google.common.base.Equivalence;
+import com.google.common.testing.EquivalenceTester;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -50,112 +54,62 @@
 @Config(manifest = Config.NONE, sdk = 18)
 @SuppressWarnings("rawtypes")
 public class SingleRequestTest {
-  private RequestHarness harness = new RequestHarness();
-
-  /**
-   * {@link Number} and {@link List} are arbitrarily chosen types to test some type safety as well.
-   * Both are in the middle of the hierarchy having multiple descendants and ancestors.
-   */
-  private static class RequestHarness {
-    Engine engine = mock(Engine.class);
-    Number model = 123456;
-    @SuppressWarnings("unchecked")
-    Target<List> target = mock(Target.class);
-    Resource<List> resource = mockResource();
-    RequestCoordinator requestCoordinator = mock(RequestCoordinator.class);
-    Drawable placeholderDrawable = null;
-    Drawable errorDrawable = null;
-    Drawable fallbackDrawable = null;
-    @SuppressWarnings("unchecked")
-    RequestListener<List> requestListener = mock(RequestListener.class);
-    @SuppressWarnings("unchecked")
-    TransitionFactory<List> factory = mock(TransitionFactory.class);
-    int overrideWidth = -1;
-    int overrideHeight = -1;
-    List<?> result = new ArrayList<>();
-    GlideContext glideContext = mock(GlideContext.class);
-    Key signature = mock(Key.class);
-    Priority priority = Priority.HIGH;
-    boolean useUnlimitedSourceGeneratorsPool = false;
-    Class<List> transcodeClass = List.class;
-
-    Map<Class<?>, Transformation<?>>  transformations = new HashMap<>();
-
-    public RequestHarness() {
-      when(requestCoordinator.canSetImage(any(Request.class))).thenReturn(true);
-      when(requestCoordinator.canNotifyStatusChanged(any(Request.class))).thenReturn(true);
-      when(resource.get()).thenReturn(result);
-    }
 
-    public SingleRequest<List> getRequest() {
-       RequestOptions requestOptions = new RequestOptions()
-        .error(errorDrawable)
-        .placeholder(placeholderDrawable)
-        .fallback(fallbackDrawable)
-        .override(overrideWidth, overrideHeight)
-        .priority(priority)
-        .signature(signature)
-        .useUnlimitedSourceGeneratorsPool(useUnlimitedSourceGeneratorsPool);
-      return SingleRequest
-          .obtain(glideContext, model, transcodeClass, requestOptions, overrideWidth,
-              overrideHeight, priority, target, requestListener, requestCoordinator, engine,
-              factory);
-    }
-  }
+  private SingleRequestBuilder builder;
 
   @Before
   public void setUp() {
-    harness = new RequestHarness();
+    builder = new SingleRequestBuilder();
   }
 
   @Test
   public void testIsNotCompleteBeforeReceivingResource() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     assertFalse(request.isComplete());
   }
 
   @Test
   public void testCanHandleNullResources() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     request.onResourceReady(null, DataSource.LOCAL);
 
     assertTrue(request.isFailed());
-    verify(harness.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),
-        eq(harness.target), anyBoolean());
+    verify(builder.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),
+        eq(builder.target), anyBoolean());
   }
 
   @Test
   public void testCanHandleEmptyResources() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.resource.get()).thenReturn(null);
+    SingleRequest<List> request = builder.build();
+    when(builder.resource.get()).thenReturn(null);
 
-    request.onResourceReady(harness.resource, DataSource.REMOTE);
+    request.onResourceReady(builder.resource, DataSource.REMOTE);
 
     assertTrue(request.isFailed());
-    verify(harness.engine).release(eq(harness.resource));
-    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
-        eq(harness.target), anyBoolean());
+    verify(builder.engine).release(eq(builder.resource));
+    verify(builder.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
+        eq(builder.target), anyBoolean());
   }
 
   @Test
   public void testCanHandleNonConformingResources() {
-    SingleRequest<List> request = harness.getRequest();
-    when(((Resource) (harness.resource)).get())
+    SingleRequest<List> request = builder.build();
+    when(((Resource) (builder.resource)).get())
         .thenReturn("Invalid mocked String, this should be a List");
 
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
     assertTrue(request.isFailed());
-    verify(harness.engine).release(eq(harness.resource));
-    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
-        eq(harness.target), anyBoolean());
+    verify(builder.engine).release(eq(builder.resource));
+    verify(builder.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
+        eq(builder.target), anyBoolean());
   }
 
   @Test
   public void testIsNotFailedAfterClear() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     request.onResourceReady(null, DataSource.DATA_DISK_CACHE);
     request.clear();
@@ -165,7 +119,7 @@ public void testIsNotFailedAfterClear() {
 
   @Test
   public void testIsPausedAfterPause() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.pause();
 
     assertTrue(request.isPaused());
@@ -173,7 +127,7 @@ public void testIsPausedAfterPause() {
 
   @Test
   public void testIsNotCancelledAfterPause() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.pause();
 
     assertFalse(request.isCancelled());
@@ -181,7 +135,7 @@ public void testIsNotCancelledAfterPause() {
 
   @Test
   public void testIsNotPausedAfterBeginningWhilePaused() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.pause();
     request.begin();
 
@@ -191,7 +145,7 @@ public void testIsNotPausedAfterBeginningWhilePaused() {
 
   @Test
   public void testIsNotFailedAfterBegin() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     request.onResourceReady(null, DataSource.DATA_DISK_CACHE);
     request.begin();
@@ -201,17 +155,17 @@ public void testIsNotFailedAfterBegin() {
 
   @Test
   public void testIsCompleteAfterReceivingResource() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
-    request.onResourceReady(harness.resource, DataSource.LOCAL);
+    request.onResourceReady(builder.resource, DataSource.LOCAL);
 
     assertTrue(request.isComplete());
   }
 
   @Test
   public void testIsNotCompleteAfterClear() {
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.REMOTE);
+    SingleRequest<List> request = builder.build();
+    request.onResourceReady(builder.resource, DataSource.REMOTE);
     request.clear();
 
     assertFalse(request.isComplete());
@@ -219,7 +173,7 @@ public void testIsNotCompleteAfterClear() {
 
   @Test
   public void testIsCancelledAfterClear() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.clear();
 
     assertTrue(request.isCancelled());
@@ -227,11 +181,11 @@ public void testIsCancelledAfterClear() {
 
   @Test
   public void testDoesNotNotifyTargetTwiceIfClearedTwiceInARow() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.clear();
     request.clear();
 
-    verify(harness.target, times(1)).onLoadCleared(any(Drawable.class));
+    verify(builder.target, times(1)).onLoadCleared(any(Drawable.class));
   }
 
   @Test
@@ -246,24 +200,25 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
       }
     }).when(requestCoordinator).canSetImage(any(Request.class));
 
-    harness.requestCoordinator = requestCoordinator;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setRequestCoordinator(requestCoordinator)
+        .build();
 
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
     verify(requestCoordinator).canSetImage(eq(request));
   }
 
   @Test
   public void testIsNotFailedWithoutException() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     assertFalse(request.isFailed());
   }
 
   @Test
   public void testIsFailedAfterException() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     request.onLoadFailed(new GlideException("test"));
     assertTrue(request.isFailed());
@@ -271,23 +226,23 @@ public void testIsFailedAfterException() {
 
   @Test
   public void testIgnoresOnSizeReadyIfNotWaitingForSize() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.begin();
     request.onSizeReady(100, 100);
     request.onSizeReady(100, 100);
 
-    verify(harness.engine, times(1))
+    verify(builder.engine, times(1))
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             eq(100),
             eq(100),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -300,7 +255,7 @@ public void testIgnoresOnSizeReadyIfNotWaitingForSize() {
 
   @Test
   public void testIsFailedAfterNoResultAndNullException() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
     request.onLoadFailed(new GlideException("test"));
     assertTrue(request.isFailed());
@@ -310,29 +265,29 @@ public void testIsFailedAfterNoResultAndNullException() {
   public void testEngineLoadCancelledOnCancel() {
     Engine.LoadStatus loadStatus = mock(Engine.LoadStatus.class);
 
-    when(harness.engine
-       .load(
-           eq(harness.glideContext),
-           eq(harness.model),
-           eq(harness.signature),
-           anyInt(),
-           anyInt(),
-           eq(Object.class),
-           eq(List.class),
-           any(Priority.class),
-           any(DiskCacheStrategy.class),
-           eq(harness.transformations),
-           anyBoolean(),
-           anyBoolean(),
-           any(Options.class),
-           anyBoolean(),
-           anyBoolean(),
-           anyBoolean(),
-           anyBoolean(),
-           any(ResourceCallback.class)))
+    when(builder.engine
+        .load(
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
+            anyInt(),
+            anyInt(),
+            eq(Object.class),
+            eq(List.class),
+            any(Priority.class),
+            any(DiskCacheStrategy.class),
+            eq(builder.transformations),
+            anyBoolean(),
+            anyBoolean(),
+            any(Options.class),
+            anyBoolean(),
+            anyBoolean(),
+            anyBoolean(),
+            anyBoolean(),
+            any(ResourceCallback.class)))
         .thenReturn(loadStatus);
 
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.begin();
 
     request.onSizeReady(100, 100);
@@ -343,12 +298,12 @@ public void testEngineLoadCancelledOnCancel() {
 
   @Test
   public void testResourceIsRecycledOnClear() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
 
-    request.onResourceReady(harness.resource, DataSource.REMOTE);
+    request.onResourceReady(builder.resource, DataSource.REMOTE);
     request.clear();
 
-    verify(harness.engine).release(eq(harness.resource));
+    verify(builder.engine).release(eq(builder.resource));
   }
 
   @Test
@@ -357,12 +312,13 @@ public void testPlaceholderDrawableIsSet() {
 
     MockTarget target = new MockTarget();
 
-    harness.placeholderDrawable = expected;
-    harness.target = target;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setPlaceholderDrawable(expected)
+        .setTarget(target)
+        .build();
     request.begin();
 
-    assertEquals(expected, target.currentPlaceholder);
+    assertThat(target.currentPlaceholder).isEqualTo(expected);
   }
 
   @Test
@@ -371,13 +327,14 @@ public void testErrorDrawableIsSetOnLoadFailed() {
 
     MockTarget target = new MockTarget();
 
-    harness.errorDrawable = expected;
-    harness.target = target;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setErrorDrawable(expected)
+        .setTarget(target)
+        .build();
 
     request.onLoadFailed(new GlideException("test"));
 
-    assertEquals(expected, target.currentPlaceholder);
+    assertThat(target.currentPlaceholder).isEqualTo(expected);
   }
 
   @Test
@@ -386,14 +343,15 @@ public void testPlaceholderDrawableSetOnNullModelWithNoErrorDrawable() {
 
     MockTarget target = new MockTarget();
 
-    harness.errorDrawable = placeholder;
-    harness.target = target;
-    harness.model = null;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setErrorDrawable(placeholder)
+        .setTarget(target)
+        .setModel(null)
+        .build();
 
     request.begin();
 
-    assertEquals(placeholder, target.currentPlaceholder);
+    assertThat(target.currentPlaceholder).isEqualTo(placeholder);
   }
 
   @Test
@@ -403,15 +361,16 @@ public void testErrorDrawableSetOnNullModelWithErrorDrawable() {
 
     MockTarget target = new MockTarget();
 
-    harness.placeholderDrawable = placeholder;
-    harness.errorDrawable = errorPlaceholder;
-    harness.target = target;
-    harness.model = null;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setPlaceholderDrawable(placeholder)
+        .setErrorDrawable(errorPlaceholder)
+        .setTarget(target)
+        .setModel(null)
+        .build();
 
     request.begin();
 
-    assertEquals(errorPlaceholder, target.currentPlaceholder);
+    assertThat(target.currentPlaceholder).isEqualTo(errorPlaceholder);
   }
 
 
@@ -422,41 +381,43 @@ public void testFallbackDrawableSetOnNullModelWithErrorAndFallbackDrawables() {
     Drawable fallback = new ColorDrawable(Color.BLUE);
 
     MockTarget target = new MockTarget();
-    harness.placeholderDrawable = placeholder;
-    harness.errorDrawable = errorPlaceholder;
-    harness.fallbackDrawable = fallback;
-    harness.target = target;
-    harness.model = null;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setPlaceholderDrawable(placeholder)
+        .setErrorDrawable(errorPlaceholder)
+        .setFallbackDrawable(fallback)
+        .setTarget(target)
+        .setModel(null)
+        .build();
     request.begin();
-    assertEquals(fallback, target.currentPlaceholder);
+
+    assertThat(target.currentPlaceholder).isEqualTo(fallback);
   }
 
 
   @Test
   public void testIsNotRunningBeforeRunCalled() {
-    assertFalse(harness.getRequest().isRunning());
+    assertFalse(builder.build().isRunning());
   }
 
   @Test
   public void testIsRunningAfterRunCalled() {
-    Request request = harness.getRequest();
+    Request request = builder.build();
     request.begin();
     assertTrue(request.isRunning());
   }
 
   @Test
   public void testIsNotRunningAfterComplete() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.begin();
-    request.onResourceReady(harness.resource, DataSource.REMOTE);
+    request.onResourceReady(builder.resource, DataSource.REMOTE);
 
     assertFalse(request.isRunning());
   }
 
   @Test
   public void testIsNotRunningAfterFailing() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.begin();
     request.onLoadFailed(new GlideException("test"));
 
@@ -465,7 +426,7 @@ public void testIsNotRunningAfterFailing() {
 
   @Test
   public void testIsNotRunningAfterClear() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.begin();
     request.clear();
 
@@ -474,113 +435,115 @@ public void testIsNotRunningAfterClear() {
 
   @Test
   public void testCallsTargetOnResourceReadyIfNoRequestListener() {
-    harness.requestListener = null;
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.LOCAL);
+    SingleRequest<List> request = builder
+        .setRequestListener(null)
+        .build();
+    request.onResourceReady(builder.resource, DataSource.LOCAL);
 
-    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());
+    verify(builder.target).onResourceReady(eq(builder.result), anyTransition());
   }
 
   @Test
   public void testCallsTargetOnResourceReadyIfRequestListenerReturnsFalse() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestListener
-        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), isADataSource(),
+    SingleRequest<List> request = builder.build();
+    when(builder.requestListener
+        .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
             anyBoolean())).thenReturn(false);
-    request.onResourceReady(harness.resource, DataSource.LOCAL);
+    request.onResourceReady(builder.resource, DataSource.LOCAL);
 
-    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());
+    verify(builder.target).onResourceReady(eq(builder.result), anyTransition());
   }
 
   @Test
   public void testDoesNotCallTargetOnResourceReadyIfRequestListenerReturnsTrue() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestListener
-        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), isADataSource(),
+    SingleRequest<List> request = builder.build();
+    when(builder.requestListener
+        .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
             anyBoolean())).thenReturn(true);
-    request.onResourceReady(harness.resource, DataSource.REMOTE);
+    request.onResourceReady(builder.resource, DataSource.REMOTE);
 
-    verify(harness.target, never()).onResourceReady(any(List.class), anyTransition());
+    verify(builder.target, never()).onResourceReady(any(List.class), anyTransition());
   }
 
   @Test
   public void testCallsTargetOnExceptionIfNoRequestListener() {
-    harness.requestListener = null;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setRequestListener(null)
+        .build();
     request.onLoadFailed(new GlideException("test"));
 
-    verify(harness.target).onLoadFailed(eq(harness.errorDrawable));
+    verify(builder.target).onLoadFailed(eq(builder.errorDrawable));
   }
 
   @Test
   public void testCallsTargetOnExceptionIfRequestListenerReturnsFalse() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
-        eq(harness.target), anyBoolean()))
+    SingleRequest<List> request = builder.build();
+    when(builder.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
+        eq(builder.target), anyBoolean()))
         .thenReturn(false);
     request.onLoadFailed(new GlideException("test"));
 
-    verify(harness.target).onLoadFailed(eq(harness.errorDrawable));
+    verify(builder.target).onLoadFailed(eq(builder.errorDrawable));
   }
 
   @Test
   public void testDoesNotCallTargetOnExceptionIfRequestListenerReturnsTrue() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
-        eq(harness.target), anyBoolean()))
+    SingleRequest<List> request = builder.build();
+    when(builder.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
+        eq(builder.target), anyBoolean()))
         .thenReturn(true);
 
     request.onLoadFailed(new GlideException("test"));
 
-    verify(harness.target, never()).onLoadFailed(any(Drawable.class));
+    verify(builder.target, never()).onLoadFailed(any(Drawable.class));
   }
 
   @Test
   public void testRequestListenerIsCalledWithResourceResult() {
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    SingleRequest<List> request = builder.build();
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), isADataSource(),
+    verify(builder.requestListener)
+        .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithModel() {
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    SingleRequest<List> request = builder.build();
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.requestListener)
-        .onResourceReady(any(List.class), eq(harness.model), isAListTarget(), isADataSource(),
+    verify(builder.requestListener)
+        .onResourceReady(any(List.class), eq(builder.model), isAListTarget(), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithTarget() {
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    SingleRequest<List> request = builder.build();
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.requestListener)
-        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), isADataSource(),
+    verify(builder.requestListener)
+        .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithLoadedFromMemoryIfLoadCompletesSynchronously() {
-    final SingleRequest<List> request = harness.getRequest();
+    final SingleRequest<List> request = builder.build();
 
-    when(harness.engine
+    when(builder.engine
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             anyInt(),
             anyInt(),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -592,124 +555,129 @@ public void testRequestListenerIsCalledWithLoadedFromMemoryIfLoadCompletesSynchr
         .thenAnswer(new Answer<Object>() {
           @Override
           public Object answer(InvocationOnMock invocation) throws Throwable {
-            request.onResourceReady(harness.resource, DataSource.MEMORY_CACHE);
+            request.onResourceReady(builder.resource, DataSource.MEMORY_CACHE);
             return null;
           }
         });
 
     request.begin();
     request.onSizeReady(100, 100);
-    verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),
+    verify(builder.requestListener)
+        .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(),
             eq(DataSource.MEMORY_CACHE), anyBoolean());
   }
 
   @Test
   public void
   testRequestListenerIsCalledWithNotLoadedFromMemoryCacheIfLoadCompletesAsynchronously() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.onSizeReady(100, 100);
-    request.onResourceReady(harness.resource, DataSource.LOCAL);
+    request.onResourceReady(builder.resource, DataSource.LOCAL);
 
-    verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),
+    verify(builder.requestListener)
+        .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(),
             eq(DataSource.LOCAL), anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithIsFirstResourceIfNoRequestCoordinator() {
-    harness.requestCoordinator = null;
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    SingleRequest<List> request = builder
+        .setRequestCoordinator(null)
+        .build();
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), isADataSource(),
+    verify(builder.requestListener)
+        .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(), isADataSource(),
             eq(true));
   }
 
   @Test
   public void testRequestListenerIsCalledWithFirstImageIfRequestCoordinatorReturnsNoResourceSet() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestCoordinator.isAnyResourceSet()).thenReturn(false);
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    SingleRequest<List> request = builder.build();
+    when(builder.requestCoordinator.isAnyResourceSet()).thenReturn(false);
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), isADataSource(),
+    verify(builder.requestListener)
+        .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(), isADataSource(),
             eq(true));
   }
 
   @Test
   public void
   testRequestListenerIsCalledWithNotIsFirstRequestIfRequestCoordinatorReturnsResourceSet() {
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestCoordinator.isAnyResourceSet()).thenReturn(true);
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    SingleRequest<List> request = builder.build();
+    when(builder.requestCoordinator.isAnyResourceSet()).thenReturn(true);
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),
+    verify(builder.requestListener)
+        .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(),
             isADataSource(), eq(false));
   }
 
   @Test
   public void testTargetIsCalledWithAnimationFromFactory() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     Transition<List> transition = mockTransition();
-    when(harness.factory.build(any(DataSource.class), anyBoolean())).thenReturn(transition);
-    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
+    when(builder.transitionFactory.build(any(DataSource.class), anyBoolean()))
+        .thenReturn(transition);
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(harness.target).onResourceReady(eq(harness.result), eq(transition));
+    verify(builder.target).onResourceReady(eq(builder.result), eq(transition));
   }
 
   @Test
   public void testCallsGetSizeIfOverrideWidthIsLessThanZero() {
-    harness.overrideWidth = -1;
-    harness.overrideHeight = 100;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setOverrideWidth(-1)
+        .setOverrideHeight(100)
+        .build();
     request.begin();
 
-    verify(harness.target).getSize(any(SizeReadyCallback.class));
+    verify(builder.target).getSize(any(SizeReadyCallback.class));
   }
 
   @Test
   public void testCallsGetSizeIfOverrideHeightIsLessThanZero() {
-    harness.overrideHeight = -1;
-    harness.overrideWidth = 100;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setOverrideWidth(100)
+        .setOverrideHeight(-1)
+        .build();
     request.begin();
 
-    verify(harness.target).getSize(any(SizeReadyCallback.class));
+    verify(builder.target).getSize(any(SizeReadyCallback.class));
   }
 
   @Test
   public void testDoesNotCallGetSizeIfOverrideWidthAndHeightAreSet() {
-    harness.overrideWidth = 100;
-    harness.overrideHeight = 100;
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setOverrideWidth(100)
+        .setOverrideHeight(100)
+        .build();
     request.begin();
 
-    verify(harness.target, never()).getSize(any(SizeReadyCallback.class));
+    verify(builder.target, never()).getSize(any(SizeReadyCallback.class));
   }
 
   @Test
   public void testCallsEngineWithOverrideWidthAndHeightIfSet() {
-    harness.overrideWidth = 1;
-    harness.overrideHeight = 2;
-
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setOverrideWidth(1)
+        .setOverrideHeight(2)
+        .build();
     request.begin();
 
-    verify(harness.engine)
+    verify(builder.engine)
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             anyInt(),
             anyInt(),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -722,31 +690,32 @@ public void testCallsEngineWithOverrideWidthAndHeightIfSet() {
 
   @Test
   public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {
-    harness.errorDrawable = new ColorDrawable(Color.RED);
-    SingleRequest<List> request = harness.getRequest();
-    when(harness.requestCoordinator.canNotifyStatusChanged(any(Request.class))).thenReturn(false);
+    SingleRequest<List> request = builder
+        .setErrorDrawable(new ColorDrawable(Color.RED))
+        .build();
+    when(builder.requestCoordinator.canNotifyStatusChanged(any(Request.class))).thenReturn(false);
     request.onLoadFailed(new GlideException("test"));
 
-    verify(harness.target, never()).onLoadFailed(any(Drawable.class));
+    verify(builder.target, never()).onLoadFailed(any(Drawable.class));
   }
 
   @Test
   public void testCanReRunCancelledRequests() {
-    doAnswer(new CallSizeReady(100, 100)).when(harness.target)
+    doAnswer(new CallSizeReady(100, 100)).when(builder.target)
         .getSize(any(SizeReadyCallback.class));
 
-    when(harness.engine
+    when(builder.engine
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             eq(100),
             eq(100),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -755,42 +724,42 @@ public void testCanReRunCancelledRequests() {
             /*useAnimationPool=*/ anyBoolean(),
             anyBoolean(),
             any(ResourceCallback.class)))
-        .thenAnswer(new CallResourceCallback(harness.resource));
-    SingleRequest<List> request = harness.getRequest();
+        .thenAnswer(new CallResourceCallback(builder.resource));
+    SingleRequest<List> request = builder.build();
 
     request.begin();
     request.cancel();
     request.begin();
 
-    verify(harness.target, times(2)).onResourceReady(eq(harness.result), anyTransition());
+    verify(builder.target, times(2)).onResourceReady(eq(builder.result), anyTransition());
   }
 
   @Test
   public void testResourceOnlyReceivesOneGetOnResourceReady() {
-    SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource, DataSource.LOCAL);
+    SingleRequest<List> request = builder.build();
+    request.onResourceReady(builder.resource, DataSource.LOCAL);
 
-    verify(harness.resource, times(1)).get();
+    verify(builder.resource, times(1)).get();
   }
 
   @Test
   public void testDoesNotStartALoadIfOnSizeReadyIsCalledAfterCancel() {
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder.build();
     request.cancel();
     request.onSizeReady(100, 100);
 
-    verify(harness.engine, never())
+    verify(builder.engine, never())
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             anyInt(),
             anyInt(),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -804,26 +773,26 @@ public void testDoesNotStartALoadIfOnSizeReadyIsCalledAfterCancel() {
 
   @Test
   public void testCallsSourceUnlimitedExecutorEngineIfOptionsIsSet() {
-    doAnswer(new CallSizeReady(100, 100)).when(harness.target)
+    doAnswer(new CallSizeReady(100, 100)).when(builder.target)
         .getSize(any(SizeReadyCallback.class));
 
-    harness.useUnlimitedSourceGeneratorsPool = true;
-
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setUseUnlimitedSourceGeneratorsPool(true)
+        .build();
     request.begin();
 
-    verify(harness.engine)
+    verify(builder.engine)
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             anyInt(),
             anyInt(),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -836,26 +805,26 @@ public void testCallsSourceUnlimitedExecutorEngineIfOptionsIsSet() {
 
   @Test
   public void testCallsSourceExecutorEngineIfOptionsIsSet() {
-    doAnswer(new CallSizeReady(100, 100)).when(harness.target)
+    doAnswer(new CallSizeReady(100, 100)).when(builder.target)
         .getSize(any(SizeReadyCallback.class));
 
-    harness.useUnlimitedSourceGeneratorsPool = false;
-
-    SingleRequest<List> request = harness.getRequest();
+    SingleRequest<List> request = builder
+        .setUseUnlimitedSourceGeneratorsPool(false)
+        .build();
     request.begin();
 
-    verify(harness.engine)
+    verify(builder.engine)
         .load(
-            eq(harness.glideContext),
-            eq(harness.model),
-            eq(harness.signature),
+            eq(builder.glideContext),
+            eq(builder.model),
+            eq(builder.signature),
             anyInt(),
             anyInt(),
             eq(Object.class),
             eq(List.class),
             any(Priority.class),
             any(DiskCacheStrategy.class),
-            eq(harness.transformations),
+            eq(builder.transformations),
             anyBoolean(),
             anyBoolean(),
             any(Options.class),
@@ -867,52 +836,177 @@ public void testCallsSourceExecutorEngineIfOptionsIsSet() {
   }
 
   @Test
+  // Varargs
+  @SuppressWarnings("unchecked")
   public void testIsEquivalentTo() {
-    SingleRequest<List> originalRequest1 = harness.getRequest();
-    SingleRequest<List> originalRequest2 = harness.getRequest();
-    assertTrue(originalRequest1.isEquivalentTo(originalRequest2));
-
-    harness = new RequestHarness();
-    harness.overrideWidth = harness.overrideWidth * 2;
-    SingleRequest<List> widthRequest = harness.getRequest();
-    assertTrue(widthRequest.isEquivalentTo(widthRequest));
-    assertFalse(widthRequest.isEquivalentTo(originalRequest1));
-    assertFalse(originalRequest1.isEquivalentTo(widthRequest));
-
-    harness = new RequestHarness();
-    harness.overrideHeight = harness.overrideHeight * 2;
-    SingleRequest<List> heightRequest = harness.getRequest();
-    assertTrue(heightRequest.isEquivalentTo(heightRequest));
-    assertFalse(heightRequest.isEquivalentTo(originalRequest1));
-    assertFalse(originalRequest1.isEquivalentTo(heightRequest));
-
-    harness = new RequestHarness();
-    harness.model = 12345679;
-    SingleRequest<List> modelRequest = harness.getRequest();
-    assertTrue(modelRequest.isEquivalentTo(modelRequest));
-    assertFalse(modelRequest.isEquivalentTo(originalRequest1));
-    assertFalse(originalRequest1.isEquivalentTo(modelRequest));
-
-    harness = new RequestHarness();
-    harness.model = null;
-    SingleRequest<List> nullModelRequest = harness.getRequest();
-    assertTrue(nullModelRequest.isEquivalentTo(nullModelRequest));
-    assertFalse(nullModelRequest.isEquivalentTo(originalRequest1));
-    assertFalse(originalRequest1.isEquivalentTo(nullModelRequest));
-
-    harness = new RequestHarness();
-    harness.errorDrawable = new ColorDrawable(Color.GRAY);
-    SingleRequest<List> errorRequest = harness.getRequest();
-    assertTrue(errorRequest.isEquivalentTo(errorRequest));
-    assertFalse(errorRequest.isEquivalentTo(originalRequest1));
-    assertFalse(originalRequest1.isEquivalentTo(errorRequest));
-
-    harness = new RequestHarness();
-    harness.priority = Priority.LOW;
-    SingleRequest<List> priorityRequest = harness.getRequest();
-    assertTrue(priorityRequest.isEquivalentTo(priorityRequest));
-    assertFalse(priorityRequest.isEquivalentTo(originalRequest1));
-    assertFalse(originalRequest1.isEquivalentTo(priorityRequest));
+    EquivalenceTester<SingleRequestBuilder> tester = EquivalenceTester
+        .of(new Equivalence<SingleRequestBuilder>() {
+          @Override
+          protected boolean doEquivalent(
+              @NonNull SingleRequestBuilder a, @NonNull SingleRequestBuilder b) {
+            return a.build().isEquivalentTo(b.build()) && b.build().isEquivalentTo(a.build());
+          }
+
+          @Override
+          protected int doHash(@NonNull SingleRequestBuilder listSingleRequest) {
+            return 0;
+          }
+        });
+    tester
+        .addEquivalenceGroup(
+            new SingleRequestBuilder(),
+            new SingleRequestBuilder(),
+            // Non-null request listeners are treated as equivalent, even if they're not equal.
+            new SingleRequestBuilder().setRequestListener(mock(RequestListener.class)))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setRequestListener(null),
+            new SingleRequestBuilder().setRequestListener(null))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setOverrideHeight(500),
+            new SingleRequestBuilder().setOverrideHeight(500))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setOverrideWidth(500),
+            new SingleRequestBuilder().setOverrideWidth(500))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setModel(12345),
+            new SingleRequestBuilder().setModel(12345))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setModel(null),
+            new SingleRequestBuilder().setModel(null))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setErrorDrawable(new ColorDrawable(Color.GRAY)),
+            new SingleRequestBuilder().setErrorDrawable(new ColorDrawable(Color.GRAY)))
+        .addEquivalenceGroup(
+            new SingleRequestBuilder().setPriority(Priority.LOW),
+            new SingleRequestBuilder().setPriority(Priority.LOW))
+        .test();
+  }
+
+  static final class SingleRequestBuilder {
+    private Engine engine = mock(Engine.class);
+    private Number model = 123456;
+    @SuppressWarnings("unchecked")
+    private Target<List> target = mock(Target.class);
+    private Resource<List> resource = mockResource();
+    private RequestCoordinator requestCoordinator = mock(RequestCoordinator.class);
+    private Drawable placeholderDrawable = null;
+    private Drawable errorDrawable = null;
+    private Drawable fallbackDrawable = null;
+    @SuppressWarnings("unchecked")
+    private RequestListener<List> requestListener = mock(RequestListener.class);
+    @SuppressWarnings("unchecked")
+    private TransitionFactory<List> transitionFactory = mock(TransitionFactory.class);
+    private int overrideWidth = -1;
+    private int overrideHeight = -1;
+    private List<?> result = new ArrayList<>();
+    private GlideContext glideContext = mock(GlideContext.class);
+    private Key signature = new ObjectKey(12345);
+    private Priority priority = Priority.HIGH;
+    private boolean useUnlimitedSourceGeneratorsPool = false;
+    private Class<List> transcodeClass = List.class;
+    private Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
+
+    SingleRequestBuilder() {
+      when(requestCoordinator.canSetImage(any(Request.class))).thenReturn(true);
+      when(requestCoordinator.canNotifyStatusChanged(any(Request.class))).thenReturn(true);
+      when(resource.get()).thenReturn(result);
+    }
+
+    SingleRequestBuilder setEngine(Engine engine) {
+      this.engine = engine;
+      return this;
+    }
+
+    SingleRequestBuilder setModel(Number model) {
+      this.model = model;
+      return this;
+    }
+
+    SingleRequestBuilder setTarget(Target<List> target) {
+      this.target = target;
+      return this;
+    }
+
+    SingleRequestBuilder setResource(Resource<List> resource) {
+      this.resource = resource;
+      return this;
+    }
+
+    SingleRequestBuilder setRequestCoordinator(RequestCoordinator requestCoordinator) {
+      this.requestCoordinator = requestCoordinator;
+      return this;
+    }
+
+    SingleRequestBuilder setPlaceholderDrawable(Drawable placeholderDrawable) {
+      this.placeholderDrawable = placeholderDrawable;
+      return this;
+    }
+
+    SingleRequestBuilder setErrorDrawable(Drawable errorDrawable) {
+      this.errorDrawable = errorDrawable;
+      return this;
+    }
+
+    SingleRequestBuilder setFallbackDrawable(Drawable fallbackDrawable) {
+      this.fallbackDrawable = fallbackDrawable;
+      return this;
+    }
+
+    SingleRequestBuilder setRequestListener(RequestListener<List> requestListener) {
+      this.requestListener = requestListener;
+      return this;
+    }
+
+    SingleRequestBuilder setOverrideWidth(int overrideWidth) {
+      this.overrideWidth = overrideWidth;
+      return this;
+    }
+
+    SingleRequestBuilder setOverrideHeight(int overrideHeight) {
+      this.overrideHeight = overrideHeight;
+      return this;
+    }
+
+    SingleRequestBuilder setResult(List<?> result) {
+      this.result = result;
+      return this;
+    }
+
+    SingleRequestBuilder setPriority(Priority priority) {
+      this.priority = priority;
+      return this;
+    }
+
+    SingleRequestBuilder setUseUnlimitedSourceGeneratorsPool(
+        boolean useUnlimitedSourceGeneratorsPool) {
+      this.useUnlimitedSourceGeneratorsPool = useUnlimitedSourceGeneratorsPool;
+      return this;
+    }
+
+    SingleRequest<List> build() {
+      RequestOptions requestOptions = new RequestOptions()
+          .error(errorDrawable)
+          .placeholder(placeholderDrawable)
+          .fallback(fallbackDrawable)
+          .override(overrideWidth, overrideHeight)
+          .priority(priority)
+          .signature(signature)
+          .useUnlimitedSourceGeneratorsPool(useUnlimitedSourceGeneratorsPool);
+      return SingleRequest.obtain(
+          /*context=*/glideContext,
+          /*glideContext=*/glideContext,
+          model,
+          transcodeClass,
+          requestOptions,
+          overrideWidth,
+          overrideHeight,
+          priority,
+          target,
+          requestListener,
+          requestCoordinator,
+          engine,
+          transitionFactory);
+    }
   }
 
   // TODO do we want to move these to Util?
@@ -939,15 +1033,16 @@ private static GlideException isAGlideException() {
 
     private Resource resource;
 
-    public CallResourceCallback(Resource resource) {
+    CallResourceCallback(Resource resource) {
       this.resource = resource;
     }
 
     @Override
     public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
       ResourceCallback cb =
-          (ResourceCallback) invocationOnMock.getArguments()[invocationOnMock.getArguments().length
-              - 1];
+          (ResourceCallback) invocationOnMock.getArguments()[
+              invocationOnMock.getArguments().length
+                  - 1];
       cb.onResourceReady(resource, DataSource.REMOTE);
       return null;
     }
@@ -958,7 +1053,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     private int width;
     private int height;
 
-    public CallSizeReady(int width, int height) {
+    CallSizeReady(int width, int height) {
       this.width = width;
       this.height = height;
     }
@@ -972,6 +1067,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
   }
 
   private static class MockTarget implements Target<List> {
+
     private Drawable currentPlaceholder;
 
     @Override
