diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
index 98595daf3..4a2aabcae 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
@@ -16,8 +16,14 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeMirror;
 
 /**
  * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules
@@ -80,9 +86,11 @@
   private static final String GENERATED_APP_MODULE_IMPL_SIMPLE_NAME = "GeneratedAppGlideModuleImpl";
   private static final String GENERATED_ROOT_MODULE_SIMPLE_NAME = "GeneratedAppGlideModule";
 
+  private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
 
-  AppModuleGenerator(ProcessorUtil processorUtil) {
+  AppModuleGenerator(ProcessingEnvironment processingEnv, ProcessorUtil processorUtil) {
+    this.processingEnv = processingEnv;
     this.processorUtil = processorUtil;
   }
 
@@ -231,12 +239,53 @@ private MethodSpec generateRegisterComponents(
     return registerComponents.build();
   }
 
+  private boolean doesAppGlideModuleConstructorAcceptContext(ClassName appGlideModule) {
+    TypeElement appGlideModuleType =
+        processingEnv.getElementUtils().getTypeElement(appGlideModule.reflectionName());
+
+    for (Element enclosed : appGlideModuleType.getEnclosedElements()) {
+      if (enclosed.getKind() == ElementKind.CONSTRUCTOR) {
+        ExecutableElement constructor = (ExecutableElement) enclosed;
+        List<? extends VariableElement> parameters = constructor.getParameters();
+        if (parameters.isEmpty()) {
+          return false;
+        } else if (parameters.size() > 1) {
+          throw new IllegalStateException(
+              "Constructor for "
+                  + appGlideModule
+                  + " accepts too many parameters"
+                  + ", it should accept no parameters, or a single Context");
+        } else {
+          VariableElement parameter = parameters.get(0);
+          TypeMirror parameterType = parameter.asType();
+          TypeMirror contextType =
+              processingEnv.getElementUtils().getTypeElement("android.content.Context").asType();
+          if (!processingEnv.getTypeUtils().isSameType(parameterType, contextType)) {
+            throw new IllegalStateException("Unrecognized type: " + parameterType);
+          }
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
   private MethodSpec generateConstructor(
       ClassName appGlideModule,
       Collection<String> libraryGlideModuleClassNames,
       Collection<String> excludedGlideModuleClassNames) {
-    MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
-    constructorBuilder.addStatement("appGlideModule = new $T()", appGlideModule);
+    MethodSpec.Builder constructorBuilder =
+        MethodSpec.constructorBuilder()
+            .addModifiers(Modifier.PUBLIC)
+            .addParameter(
+                ParameterSpec.builder(ClassName.get("android.content", "Context"), "context")
+                    .build());
+
+    if (doesAppGlideModuleConstructorAcceptContext(appGlideModule)) {
+      constructorBuilder.addStatement("appGlideModule = new $T(context)", appGlideModule);
+    } else {
+      constructorBuilder.addStatement("appGlideModule = new $T()", appGlideModule);
+    }
 
     ClassName androidLogName = ClassName.get("android.util", "Log");
 
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
index 6fa850c5a..1d2f8b8f5 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
@@ -36,7 +36,7 @@
     this.processingEnv = processingEnv;
     this.processorUtil = processorUtil;
 
-    appModuleGenerator = new AppModuleGenerator(processorUtil);
+    appModuleGenerator = new AppModuleGenerator(processingEnv, processorUtil);
     requestOptionsGenerator = new RequestOptionsGenerator(processingEnv, processorUtil);
     requestManagerGenerator = new RequestManagerGenerator(processingEnv, processorUtil);
     requestManagerFactoryGenerator =
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
index e4e14f972..65601ab29 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final AppModuleWithExcludes appGlideModule;
 
-  GeneratedAppGlideModuleImpl() {
+  public GeneratedAppGlideModuleImpl(Context context) {
     appGlideModule = new AppModuleWithExcludes();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithExcludes");
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
index fe59ab971..02d9b660f 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final AppModuleWithLibraryInPackage appGlideModule;
 
-  GeneratedAppGlideModuleImpl() {
+  public GeneratedAppGlideModuleImpl(Context context) {
     appGlideModule = new AppModuleWithLibraryInPackage();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithLibraryInPackage");
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
index 02aac77b8..6b285af41 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final AppModuleWithMultipleExcludes appGlideModule;
 
-  GeneratedAppGlideModuleImpl() {
+  public GeneratedAppGlideModuleImpl(Context context) {
     appGlideModule = new AppModuleWithMultipleExcludes();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithMultipleExcludes");
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
index 759ec2325..7180b6f62 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
@@ -12,7 +12,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final EmptyAppModule appGlideModule;
 
-  GeneratedAppGlideModuleImpl() {
+  public GeneratedAppGlideModuleImpl(Context context) {
     appGlideModule = new EmptyAppModule();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.EmptyAppModule");
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
index 56bdd756e..8ed710b2b 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final EmptyAppModule appGlideModule;
 
-  GeneratedAppGlideModuleImpl() {
+  public GeneratedAppGlideModuleImpl(Context context) {
     appGlideModule = new EmptyAppModule();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.EmptyAppModule");
diff --git a/library/findbugs-exclude.xml b/library/findbugs-exclude.xml
index dee0fdbe5..919868ba9 100644
--- a/library/findbugs-exclude.xml
+++ b/library/findbugs-exclude.xml
@@ -60,4 +60,10 @@
       <Bug pattern="IS2_INCONSISTENT_SYNC" />
     </Match>
 
+     <!-- Inconsistent synchronization is due to synchronizing on Engine/listener to avoid deadlock only. -->
+    <Match>
+      <Class name="com.bumptech.glide.load.engine.EngineJob" />
+      <Bug pattern="IS2_INCONSISTENT_SYNC" />
+    </Match>
+
 </FindBugsFilter>
diff --git a/library/proguard-rules.txt b/library/proguard-rules.txt
index 39e209882..bc714028d 100644
--- a/library/proguard-rules.txt
+++ b/library/proguard-rules.txt
@@ -1,9 +1,11 @@
 -keep public class * implements com.bumptech.glide.module.GlideModule
--keep public class * extends com.bumptech.glide.module.AppGlideModule
+-keep class * extends com.bumptech.glide.module.AppGlideModule {
+ <init>(...);
+}
 -keep public enum com.bumptech.glide.load.ImageHeaderParser$** {
   **[] $VALUES;
   public *;
 }
 
 # Uncomment for DexGuard only
-#-keepresourcexmlelements manifest/application/meta-data@value=GlideModule
\ No newline at end of file
+#-keepresourcexmlelements manifest/application/meta-data@value=GlideModule
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 4283555ac..6a2c652d1 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -172,7 +172,8 @@ public static File getPhotoCacheDir(@NonNull Context context, @NonNull String ca
   @NonNull
   public static Glide get(@NonNull Context context) {
     if (glide == null) {
-      GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
+      GeneratedAppGlideModule annotationGeneratedModule =
+          getAnnotationGeneratedGlideModules(context.getApplicationContext());
       synchronized (Glide.class) {
         if (glide == null) {
           checkAndInitializeGlide(context, annotationGeneratedModule);
@@ -214,7 +215,7 @@ public static synchronized void init(Glide glide) {
 
   @VisibleForTesting
   public static void init(@NonNull Context context, @NonNull GlideBuilder builder) {
-    GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
+    GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules(context);
     synchronized (Glide.class) {
       if (Glide.glide != null) {
         tearDown();
@@ -305,14 +306,15 @@ private static void initializeGlide(
   }
 
   @Nullable
-  @SuppressWarnings({"unchecked", "deprecation", "TryWithIdenticalCatches"})
-  private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
+  @SuppressWarnings({"unchecked", "TryWithIdenticalCatches"})
+  private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules(Context context) {
     GeneratedAppGlideModule result = null;
     try {
       Class<GeneratedAppGlideModule> clazz =
           (Class<GeneratedAppGlideModule>)
               Class.forName("com.bumptech.glide.GeneratedAppGlideModuleImpl");
-      result = clazz.getDeclaredConstructor().newInstance();
+      result =
+          clazz.getDeclaredConstructor(Context.class).newInstance(context.getApplicationContext());
     } catch (ClassNotFoundException e) {
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index 728a5891f..5872340cc 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -152,7 +152,7 @@ public Engine(
    * @param height The target height in pixels of the desired resource.
    * @param cb The callback that will be called when the load completes.
    */
-  public synchronized <R> LoadStatus load(
+  public <R> LoadStatus load(
       GlideContext glideContext,
       Object model,
       Key signature,
@@ -185,24 +185,65 @@ public Engine(
             transcodeClass,
             options);
 
-    EngineResource<?> active = loadFromActiveResources(key, isMemoryCacheable);
-    if (active != null) {
-      cb.onResourceReady(active, DataSource.MEMORY_CACHE);
-      if (VERBOSE_IS_LOGGABLE) {
-        logWithTimeAndKey("Loaded resource from active resources", startTime, key);
-      }
-      return null;
-    }
+    EngineResource<?> memoryResource;
+    synchronized (this) {
+      memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);
 
-    EngineResource<?> cached = loadFromCache(key, isMemoryCacheable);
-    if (cached != null) {
-      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);
-      if (VERBOSE_IS_LOGGABLE) {
-        logWithTimeAndKey("Loaded resource from cache", startTime, key);
+      if (memoryResource == null) {
+        return waitForExistingOrStartNewJob(
+            glideContext,
+            model,
+            signature,
+            width,
+            height,
+            resourceClass,
+            transcodeClass,
+            priority,
+            diskCacheStrategy,
+            transformations,
+            isTransformationRequired,
+            isScaleOnlyOrNoTransform,
+            options,
+            isMemoryCacheable,
+            useUnlimitedSourceExecutorPool,
+            useAnimationPool,
+            onlyRetrieveFromCache,
+            cb,
+            callbackExecutor,
+            key,
+            startTime);
       }
-      return null;
     }
 
+    // Avoid calling back while holding the engine lock, doing so makes it easier for callers to
+    // deadlock.
+    cb.onResourceReady(memoryResource, DataSource.MEMORY_CACHE);
+    return null;
+  }
+
+  private <R> LoadStatus waitForExistingOrStartNewJob(
+      GlideContext glideContext,
+      Object model,
+      Key signature,
+      int width,
+      int height,
+      Class<?> resourceClass,
+      Class<R> transcodeClass,
+      Priority priority,
+      DiskCacheStrategy diskCacheStrategy,
+      Map<Class<?>, Transformation<?>> transformations,
+      boolean isTransformationRequired,
+      boolean isScaleOnlyOrNoTransform,
+      Options options,
+      boolean isMemoryCacheable,
+      boolean useUnlimitedSourceExecutorPool,
+      boolean useAnimationPool,
+      boolean onlyRetrieveFromCache,
+      ResourceCallback cb,
+      Executor callbackExecutor,
+      EngineKey key,
+      long startTime) {
+
     EngineJob<?> current = jobs.get(key, onlyRetrieveFromCache);
     if (current != null) {
       current.addCallback(cb, callbackExecutor);
@@ -250,15 +291,38 @@ public Engine(
     return new LoadStatus(cb, engineJob);
   }
 
+  @Nullable
+  private EngineResource<?> loadFromMemory(
+      EngineKey key, boolean isMemoryCacheable, long startTime) {
+    if (!isMemoryCacheable) {
+      return null;
+    }
+
+    EngineResource<?> active = loadFromActiveResources(key);
+    if (active != null) {
+      if (VERBOSE_IS_LOGGABLE) {
+        logWithTimeAndKey("Loaded resource from active resources", startTime, key);
+      }
+      return active;
+    }
+
+    EngineResource<?> cached = loadFromCache(key);
+    if (cached != null) {
+      if (VERBOSE_IS_LOGGABLE) {
+        logWithTimeAndKey("Loaded resource from cache", startTime, key);
+      }
+      return cached;
+    }
+
+    return null;
+  }
+
   private static void logWithTimeAndKey(String log, long startTime, Key key) {
     Log.v(TAG, log + " in " + LogTime.getElapsedMillis(startTime) + "ms, key: " + key);
   }
 
   @Nullable
-  private EngineResource<?> loadFromActiveResources(Key key, boolean isMemoryCacheable) {
-    if (!isMemoryCacheable) {
-      return null;
-    }
+  private EngineResource<?> loadFromActiveResources(Key key) {
     EngineResource<?> active = activeResources.get(key);
     if (active != null) {
       active.acquire();
@@ -267,11 +331,7 @@ private static void logWithTimeAndKey(String log, long startTime, Key key) {
     return active;
   }
 
-  private EngineResource<?> loadFromCache(Key key, boolean isMemoryCacheable) {
-    if (!isMemoryCacheable) {
-      return null;
-    }
-
+  private EngineResource<?> loadFromCache(Key key) {
     EngineResource<?> cached = getEngineResourceFromCache(key);
     if (cached != null) {
       cached.acquire();
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 34bb02018..bd34729c8 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import androidx.annotation.GuardedBy;
 import androidx.annotation.NonNull;
 import androidx.annotation.VisibleForTesting;
 import androidx.core.util.Pools;
@@ -148,7 +149,8 @@ synchronized void addCallback(final ResourceCallback cb, Executor callbackExecut
 
   @SuppressWarnings("WeakerAccess")
   @Synthetic
-  synchronized void callCallbackOnResourceReady(ResourceCallback cb) {
+  @GuardedBy("this")
+  void callCallbackOnResourceReady(ResourceCallback cb) {
     try {
       // This is overly broad, some Glide code is actually called here, but it's much
       // simpler to encapsulate here than to do so at the actual call point in the
@@ -161,7 +163,8 @@ synchronized void callCallbackOnResourceReady(ResourceCallback cb) {
 
   @SuppressWarnings("WeakerAccess")
   @Synthetic
-  synchronized void callCallbackOnLoadFailed(ResourceCallback cb) {
+  @GuardedBy("this")
+  void callCallbackOnLoadFailed(ResourceCallback cb) {
     // This is overly broad, some Glide code is actually called here, but it's much
     // simpler to encapsulate here than to do so at the actual call point in the Request
     // implementation.
@@ -382,12 +385,16 @@ public StateVerifier getVerifier() {
 
     @Override
     public void run() {
-      synchronized (EngineJob.this) {
-        if (cbs.contains(cb)) {
-          callCallbackOnLoadFailed(cb);
+      // Make sure we always acquire the request lock, then the EngineJob lock to avoid deadlock
+      // (b/136032534).
+      synchronized (cb) {
+        synchronized (EngineJob.this) {
+          if (cbs.contains(cb)) {
+            callCallbackOnLoadFailed(cb);
+          }
+
+          decrementPendingCallbacks();
         }
-
-        decrementPendingCallbacks();
       }
     }
   }
@@ -402,14 +409,18 @@ public void run() {
 
     @Override
     public void run() {
-      synchronized (EngineJob.this) {
-        if (cbs.contains(cb)) {
-          // Acquire for this particular callback.
-          engineResource.acquire();
-          callCallbackOnResourceReady(cb);
-          removeCallback(cb);
+      // Make sure we always acquire the request lock, then the EngineJob lock to avoid deadlock
+      // (b/136032534).
+      synchronized (cb) {
+        synchronized (EngineJob.this) {
+          if (cbs.contains(cb)) {
+            // Acquire for this particular callback.
+            engineResource.acquire();
+            callCallbackOnResourceReady(cb);
+            removeCallback(cb);
+          }
+          decrementPendingCallbacks();
         }
-        decrementPendingCallbacks();
       }
     }
   }
