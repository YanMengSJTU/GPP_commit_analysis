diff --git a/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java b/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java
index 5bb048eb5..ddf6ce8c8 100644
--- a/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java
+++ b/library/src/com/bumptech/glide/resize/cache/LruMemoryCache.java
@@ -53,13 +53,7 @@ public void setImageRemovedListener(ImageRemovedListener listener) {
 
     @Override
     public void clearMemory() {
-        final Iterator<Map.Entry<String,Bitmap>> iterator = cache.entrySet().iterator();
-        while (iterator.hasNext()) {
-            final Bitmap bitmap = iterator.next().getValue();
-            bitmap.recycle();
-            iterator.remove();
-        }
-        currentSize = 0;
+        trimToSize(0);
     }
 
     @Override
diff --git a/library/tests/src/com/bumptech/glide/LruCacheTest.java b/library/tests/src/com/bumptech/glide/LruCacheTest.java
index 6e846d119..b577aa197 100644
--- a/library/tests/src/com/bumptech/glide/LruCacheTest.java
+++ b/library/tests/src/com/bumptech/glide/LruCacheTest.java
@@ -118,6 +118,32 @@ public void onImageRemoved(Bitmap removed) {
         assertEquals(1, totalRemoved.get());
     }
 
+    public void testClearMemoryCallsListener() {
+        List<String> keys = fillCache();
+        final AtomicInteger totalRemoved = new AtomicInteger();
+        cache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {
+            @Override
+            public void onImageRemoved(Bitmap removed) {
+                totalRemoved.getAndIncrement();
+            }
+        });
+        cache.clearMemory();
+        assertEquals(keys.size(), totalRemoved.get());
+    }
+
+    public void testTrimMemoryCallsListener() {
+        List<String> keys = fillCache();
+        final AtomicInteger totalRemoved = new AtomicInteger();
+        cache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {
+            @Override
+            public void onImageRemoved(Bitmap removed) {
+                totalRemoved.getAndIncrement();
+            }
+        });
+        cache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);
+        assertEquals(keys.size(), totalRemoved.get());
+    }
+
     public void testClearMemory() {
         List<String> keys = fillCache();
         cache.clearMemory();
