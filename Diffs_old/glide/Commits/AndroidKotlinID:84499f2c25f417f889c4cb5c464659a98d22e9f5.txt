diff --git a/.travis.yml b/.travis.yml
index 4bd84ebda..a16977739 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -14,7 +14,7 @@ jdk:
 
 sudo: false
 
-script: 'travis_retry ./gradlew build'
+script: 'travis_retry ./gradlew build --parallel'
 
 after_success:
 - scripts/travis-sonatype-publish.sh
diff --git a/gradle.properties b/gradle.properties
index 63ca735ce..bf364c726 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -19,6 +19,7 @@ ANDROID_SUPPORT_VERSION=26.0.2
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.0
 ANDROID_GRADLE_VERSION=2.3.0
+DAGGER_VERSION=2.10
 
 COVERALLS_GRADLE_VERSION=2.4.0
 JUNIT_VERSION=4.12
diff --git a/library/build.gradle b/library/build.gradle
index d71386050..52b79d6af 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -69,6 +69,7 @@ afterEvaluate {
     if (tasks.findByName("assembleDebug") == null) {
         return
     }
+
     task findbugs(type: FindBugs, dependsOn: assembleDebug) {
 
         description 'Run findbugs'
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
index 921b998fe..e74320bf0 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
@@ -42,7 +42,7 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
       Options options, DecodeCallback<ResourceType> callback) throws GlideException {
     Resource<ResourceType> decoded = decodeResource(rewinder, width, height, options);
     Resource<ResourceType> transformed = callback.onResourceDecoded(decoded);
-    return transcoder.transcode(transformed);
+    return transcoder.transcode(transformed, options);
   }
 
   private Resource<ResourceType> decodeResource(DataRewinder<DataType> rewinder, int width,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
index b79e11178..d80ff2059 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
@@ -71,6 +71,24 @@ public static GlideExecutor newDiskCacheExecutor() {
         DEFAULT_DISK_CACHE_EXECUTOR_NAME, UncaughtThrowableStrategy.DEFAULT);
   }
 
+  /**
+   * Returns a new fixed thread pool with the default thread count returned from
+   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_DISK_CACHE_EXECUTOR_NAME} thread name
+   * prefix, and a custom
+   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}
+   * uncaught throwable strategy.
+   *
+   * <p>Disk cache executors do not allow network operations on their threads.
+   * @param uncaughtThrowableStrategy The {@link
+   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to
+   *                                  handle uncaught exceptions.
+   */
+  public static GlideExecutor newDiskCacheExecutor(
+          UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,
+                                DEFAULT_DISK_CACHE_EXECUTOR_NAME, uncaughtThrowableStrategy);
+  }
+
   /**
    * Returns a new fixed thread pool with the given thread count, thread name prefix,
    * and {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}.
@@ -103,6 +121,25 @@ public static GlideExecutor newSourceExecutor() {
         UncaughtThrowableStrategy.DEFAULT);
   }
 
+  /**
+   * Returns a new fixed thread pool with the default thread count returned from
+   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_SOURCE_EXECUTOR_NAME} thread name
+   * prefix, and a custom
+   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}
+   * uncaught throwable strategy.
+   *
+   * <p>Source executors allow network operations on their threads.
+   *
+   * @param uncaughtThrowableStrategy The {@link
+   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to
+   *                                  handle uncaught exceptions.
+   */
+  public static GlideExecutor newSourceExecutor(
+          UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,
+                                DEFAULT_DISK_CACHE_EXECUTOR_NAME, uncaughtThrowableStrategy);
+  }
+
   /**
    * Returns a new fixed thread pool with the given thread count, thread name prefix,
    * and {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}.
@@ -274,29 +311,33 @@ public boolean accept(File file, String s) {
    * A strategy for handling unexpected and uncaught {@link Throwable}s thrown by futures run on the
    * pool.
    */
-  public enum UncaughtThrowableStrategy {
+  public interface UncaughtThrowableStrategy {
     /**
      * Silently catches and ignores the uncaught {@link Throwable}s.
      */
-    IGNORE,
+    UncaughtThrowableStrategy IGNORE = new UncaughtThrowableStrategy() {
+      @Override
+      public void handle(Throwable t) {
+        //ignore
+      }
+    };
     /**
      * Logs the uncaught {@link Throwable}s using {@link #TAG} and {@link Log}.
      */
-    LOG {
+    UncaughtThrowableStrategy LOG = new UncaughtThrowableStrategy() {
       @Override
-      protected void handle(Throwable t) {
+      public void handle(Throwable t) {
         if (t != null && Log.isLoggable(TAG, Log.ERROR)) {
           Log.e(TAG, "Request threw uncaught throwable", t);
         }
       }
-    },
+    };
     /**
      * Rethrows the uncaught {@link Throwable}s to crash the app.
      */
-    THROW {
+    UncaughtThrowableStrategy THROW = new UncaughtThrowableStrategy() {
       @Override
-      protected void handle(Throwable t) {
-        super.handle(t);
+      public void handle(Throwable t) {
         if (t != null) {
           throw new RuntimeException("Request threw uncaught throwable", t);
         }
@@ -304,11 +345,9 @@ protected void handle(Throwable t) {
     };
 
     /** The default strategy, currently {@link #LOG}. */
-    public static final UncaughtThrowableStrategy DEFAULT = LOG;
+    UncaughtThrowableStrategy DEFAULT = LOG;
 
-    protected void handle(Throwable t) {
-      // Ignore.
-    }
+    void handle(Throwable t);
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
index 5e8419a7c..2b09adb40 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.resource.transcode;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bytes.BytesResource;
 import java.io.ByteArrayOutputStream;
@@ -25,7 +26,7 @@ public BitmapBytesTranscoder(Bitmap.CompressFormat compressFormat, int quality)
   }
 
   @Override
-  public Resource<byte[]> transcode(Resource<Bitmap> toTranscode) {
+  public Resource<byte[]> transcode(Resource<Bitmap> toTranscode, Options options) {
     ByteArrayOutputStream os = new ByteArrayOutputStream();
     toTranscode.get().compress(compressFormat, quality, os);
     toTranscode.recycle();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
index 9fbbd4c05..03642bbe4 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
@@ -5,6 +5,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.bitmap.LazyBitmapDrawableResource;
@@ -28,7 +29,7 @@ public BitmapDrawableTranscoder(Resources resources, BitmapPool bitmapPool) {
   }
 
   @Override
-  public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode) {
+  public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode, Options options) {
     return LazyBitmapDrawableResource.obtain(resources, bitmapPool, toTranscode.get());
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
index 94ff7864d..0bc3c12b3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bytes.BytesResource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -13,7 +14,7 @@
  */
 public class GifDrawableBytesTranscoder implements ResourceTranscoder<GifDrawable, byte[]> {
   @Override
-  public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode) {
+  public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode, Options options) {
     GifDrawable gifData = toTranscode.get();
     ByteBuffer byteBuffer = gifData.getBuffer();
     return new BytesResource(ByteBufferUtil.toBytes(byteBuffer));
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
index ad1c55c6e..e84bd6b00 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -15,5 +16,5 @@
    *
    * @param toTranscode The resource to transcode.
    */
-  Resource<R> transcode(Resource<Z> toTranscode);
+  Resource<R> transcode(Resource<Z> toTranscode, Options options);
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
index 966e11ecf..0fd6d0964 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -16,7 +17,7 @@
   }
 
   @Override
-  public Resource<Z> transcode(Resource<Z> toTranscode) {
+  public Resource<Z> transcode(Resource<Z> toTranscode, Options options) {
     return toTranscode;
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 146075dd2..6951e10d6 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -45,6 +45,7 @@
           return new SingleRequest<Object>();
         }
       });
+  private boolean isCallingCallbacks;
 
   private enum Status {
     /**
@@ -182,6 +183,7 @@ public StateVerifier getVerifier() {
 
   @Override
   public void recycle() {
+    assertNotCallingCallbacks();
     glideContext = null;
     model = null;
     transcodeClass = null;
@@ -203,6 +205,7 @@ public void recycle() {
 
   @Override
   public void begin() {
+    assertNotCallingCallbacks();
     stateVerifier.throwIfRecycled();
     startTime = LogTime.getLogTime();
     if (model == null) {
@@ -260,6 +263,7 @@ public void begin() {
    * @see #clear()
    */
   void cancel() {
+    assertNotCallingCallbacks();
     stateVerifier.throwIfRecycled();
     target.removeCallback(this);
     status = Status.CANCELLED;
@@ -269,6 +273,15 @@ void cancel() {
     }
   }
 
+  // Avoids difficult to understand errors like #2413.
+  private void assertNotCallingCallbacks() {
+    if (isCallingCallbacks) {
+      throw new IllegalStateException("You can't start or clear loads in RequestListener or"
+          + " Target callbacks. If you must do so, consider posting your into() or clear() calls"
+          + " to the main thread using a Handler instead.");
+    }
+  }
+
   /**
    * Cancels the current load if it is in progress, clears any resources held onto by the request
    * and replaces the loaded resource if the load completed with the placeholder.
@@ -280,6 +293,7 @@ void cancel() {
   @Override
   public void clear() {
     Util.assertMainThread();
+    assertNotCallingCallbacks();
     if (status == Status.CLEARED) {
       return;
     }
@@ -535,11 +549,16 @@ private void onResourceReady(Resource<R> resource, R result, DataSource dataSour
           + LogTime.getElapsedMillis(startTime) + " ms");
     }
 
-    if (requestListener == null
-        || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {
-      Transition<? super R> animation =
-          animationFactory.build(dataSource, isFirstResource);
-      target.onResourceReady(result, animation);
+    isCallingCallbacks = true;
+    try {
+      if (requestListener == null
+          || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {
+        Transition<? super R> animation =
+            animationFactory.build(dataSource, isFirstResource);
+        target.onResourceReady(result, animation);
+      }
+    } finally {
+      isCallingCallbacks = false;
     }
 
     notifyLoadSuccess();
@@ -565,10 +584,16 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
 
     loadStatus = null;
     status = Status.FAILED;
-    //TODO: what if this is a thumbnail request?
-    if (requestListener == null
-        || !requestListener.onLoadFailed(e, model, target, isFirstReadyResource())) {
-      setErrorPlaceholder();
+
+    isCallingCallbacks = true;
+    try {
+      //TODO: what if this is a thumbnail request?
+      if (requestListener == null
+          || !requestListener.onLoadFailed(e, model, target, isFirstReadyResource())) {
+        setErrorPlaceholder();
+      }
+    } finally {
+      isCallingCallbacks = false;
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
index 7b9f884a9..caab4ac19 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
@@ -1,5 +1,9 @@
 package com.bumptech.glide.request.target;
 
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Looper;
+import android.os.Message;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.transition.Transition;
 
@@ -10,6 +14,17 @@
  * @param <Z> The type of resource that will be loaded into memory.
  */
 public final class PreloadTarget<Z> extends SimpleTarget<Z> {
+  private static final int MESSAGE_CLEAR = 1;
+  private static final Handler HANDLER = new Handler(Looper.getMainLooper(), new Callback() {
+    @Override
+    public boolean handleMessage(Message message) {
+      if (message.what == MESSAGE_CLEAR) {
+        ((PreloadTarget<?>) message.obj).clear();
+        return true;
+      }
+      return false;
+    }
+  });
 
   private final RequestManager requestManager;
 
@@ -31,6 +46,10 @@ private PreloadTarget(RequestManager requestManager, int width, int height) {
 
   @Override
   public void onResourceReady(Z resource, Transition<? super Z> transition) {
+    HANDLER.obtainMessage(MESSAGE_CLEAR, this).sendToTarget();
+  }
+
+  private void clear() {
     requestManager.clear(this);
   }
 }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
index 9d8e2b1b1..b4379c750 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
@@ -6,6 +6,7 @@
 import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Before;
 import org.junit.Test;
@@ -59,6 +60,7 @@ public void testBitmapResourceIsRecycled() {
     final String description = "TestDescription";
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ALPHA_8);
     Resource<Bitmap> bitmapResource = mockResource();
+    Options options = new Options();
 
     public BitmapBytesTranscoderHarness() {
       when(bitmapResource.get()).thenReturn(bitmap);
@@ -67,7 +69,7 @@ public BitmapBytesTranscoderHarness() {
 
     public String getTranscodedDescription() {
       BitmapBytesTranscoder transcoder = new BitmapBytesTranscoder(compressFormat, quality);
-      Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource);
+      Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource, options);
 
       return new String(bytesResource.get());
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
index 62689518a..0707a342a 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
@@ -7,6 +7,7 @@
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import org.junit.Before;
@@ -33,7 +34,7 @@ public void testReturnsBitmapDrawableResourceContainingGivenBitmap() {
     Resource<Bitmap> resource = mockResource();
     when(resource.get()).thenReturn(expected);
 
-    Resource<BitmapDrawable> transcoded = transcoder.transcode(resource);
+    Resource<BitmapDrawable> transcoded = transcoder.transcode(resource, new Options());
 
     assertEquals(expected, transcoded.get().getBitmap());
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
index 1f6d4fd8f..d1cd38b01 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
@@ -5,6 +5,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import java.nio.ByteBuffer;
@@ -33,7 +34,7 @@ public void testReturnsBytesOfGivenGifDrawable() {
       ByteBuffer expected = ByteBuffer.wrap(fakeData.getBytes());
       when(gifDrawable.getBuffer()).thenReturn(expected);
 
-      Resource<byte[]> transcoded = transcoder.transcode(resource);
+      Resource<byte[]> transcoded = transcoder.transcode(resource, new Options());
 
       assertArrayEquals(expected.array(), transcoded.get());
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
index a1d8eb507..0c8713cf2 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -16,6 +17,6 @@ public void testReturnsTheGivenResource() {
     Resource<Object> resource = mockResource();
     ResourceTranscoder<Object, Object> unitTranscoder = UnitTranscoder.get();
 
-    assertEquals(resource, unitTranscoder.transcode(resource));
+    assertEquals(resource, unitTranscoder.transcode(resource, new Options()));
   }
 }
diff --git a/samples/flickr/build.gradle b/samples/flickr/build.gradle
index 0405ef67d..73b2b4e01 100644
--- a/samples/flickr/build.gradle
+++ b/samples/flickr/build.gradle
@@ -8,7 +8,7 @@ dependencies {
     annotationProcessor project(':annotation:compiler')
 
     compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
+    compile "com.android.volley:volley:${VOLLEY_VERSION}"
     compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
 }
 
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
index ab7baa997..9539d0006 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
@@ -201,7 +201,7 @@ public int getItemCount() {
     @NonNull
     @Override
     public RequestBuilder<Drawable> getPreloadRequestBuilder(Photo item) {
-      return fullRequest.clone().thumbnail(thumbnailRequest.clone().load(item)).load(item);
+      return preloadRequest.load(item);
     }
   }
 
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
index 08c5f5257..cedac252f 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
@@ -10,7 +10,6 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentPagerAdapter;
-import android.support.v4.view.MenuItemCompat;
 import android.support.v4.view.ViewPager;
 import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
@@ -90,8 +89,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
     MenuInflater menuInflater = getMenuInflater();
     menuInflater.inflate(R.menu.search_activity, menu);
 
-    searchView =
-        (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.search));
+    searchView = (SearchView) menu.findItem(R.id.search).getActionView();
     searchView.setSubmitButtonEnabled(true);
     searchView.setIconified(false);
     searchView.setOnQueryTextListener(this);
diff --git a/samples/imgur/.gitignore b/samples/imgur/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/samples/imgur/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/samples/imgur/build.gradle b/samples/imgur/build.gradle
new file mode 100644
index 000000000..944bdde8d
--- /dev/null
+++ b/samples/imgur/build.gradle
@@ -0,0 +1,57 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion COMPILE_SDK_VERSION as int
+    buildToolsVersion BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.bumptech.glide.samples.imgur"
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile project(':library')
+    annotationProcessor project(':annotation:compiler')
+
+    compile "com.google.dagger:dagger:${DAGGER_VERSION}"
+    annotationProcessor("com.google.dagger:dagger-compiler:${DAGGER_VERSION}", {
+        exclude group: 'com.google.code.findbugs', module: "jsr305"
+    })
+    compile("com.google.dagger:dagger-android:${DAGGER_VERSION}", {
+        exclude group: 'com.google.code.findbugs', module: "jsr305"
+    })
+
+    compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
+    compile 'com.squareup.retrofit2:retrofit:2.2.0'
+    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
+    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
+
+    compile 'io.reactivex:rxandroid:1.2.1'
+    compile 'io.reactivex:rxjava:1.2.9'
+
+    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+}
+
+task run(type: Exec, dependsOn: 'installDebug') {
+    description 'Installs the APK and runs the main activity: "gradlew :samples:???:run"'
+    commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.card/.MainActivity'
+}
diff --git a/samples/imgur/lint.xml b/samples/imgur/lint.xml
new file mode 100644
index 000000000..ac292ab1a
--- /dev/null
+++ b/samples/imgur/lint.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Not supported by all build systems -->
+    <issue id="GradleOverrides" severity="ignore" />
+    <issue id="IconMissingDensityFolder" severity="ignore"/>
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+</lint>
diff --git a/samples/imgur/proguard-rules.pro b/samples/imgur/proguard-rules.pro
new file mode 100644
index 000000000..896f865d9
--- /dev/null
+++ b/samples/imgur/proguard-rules.pro
@@ -0,0 +1,25 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/judds/Library/Android/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/samples/imgur/src/main/AndroidManifest.xml b/samples/imgur/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..23f5ec718
--- /dev/null
+++ b/samples/imgur/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  package="com.bumptech.glide.samples.imgur">
+  <uses-permission android:name="android.permission.INTERNET" />
+  <application
+    android:allowBackup="false"
+    android:icon="@mipmap/ic_launcher"
+    android:label="@string/app_name"
+    android:roundIcon="@mipmap/ic_launcher_round"
+    android:supportsRtl="true"
+    android:theme="@style/AppTheme"
+    android:name="com.bumptech.glide.samples.imgur.ImgurApplication">
+    <activity android:name="com.bumptech.glide.samples.imgur.MainActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.LAUNCHER"/>
+      </intent-filter>
+    </activity>
+  </application>
+
+</manifest>
\ No newline at end of file
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java
new file mode 100644
index 000000000..d40c24c8c
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java
@@ -0,0 +1,16 @@
+package com.bumptech.glide.samples.imgur;
+
+import dagger.Module;
+import dagger.Provides;
+import okhttp3.OkHttpClient;
+
+/**
+ * The Application Dagger module for the Imgur sample.
+ */
+@Module
+public class ApplicationModule {
+  @Provides
+  OkHttpClient okHttpClient() {
+    return new OkHttpClient();
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java
new file mode 100644
index 000000000..76794db00
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java
@@ -0,0 +1,27 @@
+package com.bumptech.glide.samples.imgur;
+
+import android.app.Activity;
+import android.app.Application;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.android.HasDispatchingActivityInjector;
+import javax.inject.Inject;
+
+/**
+ * Runs Dagger injection in the Imgur sample.
+ */
+public final class ImgurApplication extends Application
+    implements HasDispatchingActivityInjector {
+  @Inject DispatchingAndroidInjector<Activity> dispatchingActivityInjector;
+
+  @Override
+  public void onCreate() {
+    super.onCreate();
+    DaggerImgurApplicationComponent.create()
+        .inject(this);
+  }
+
+  @Override
+  public DispatchingAndroidInjector<Activity> activityInjector() {
+    return dispatchingActivityInjector;
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java
new file mode 100644
index 000000000..f399bdae6
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java
@@ -0,0 +1,14 @@
+package com.bumptech.glide.samples.imgur;
+
+import com.bumptech.glide.samples.imgur.api.ApiModule;
+import dagger.Component;
+import javax.inject.Singleton;
+
+/**
+ * Specifies Dagger modules for {@link ImgurApplication}.
+ */
+@Singleton
+@Component(modules = {MainActivityModule.class, ApplicationModule.class, ApiModule.class})
+public interface ImgurApplicationComponent {
+  void inject(ImgurApplication application);
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurGlideModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurGlideModule.java
new file mode 100644
index 000000000..c673ad244
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurGlideModule.java
@@ -0,0 +1,12 @@
+package com.bumptech.glide.samples.imgur;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+
+/**
+ * Generates a Glide API for the Imgur sample.
+ */
+@GlideModule(glideName = "ImgurGlide")
+public class ImgurGlideModule extends AppGlideModule {
+  // Intentionally Empty.
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivity.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivity.java
new file mode 100644
index 000000000..384543997
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivity.java
@@ -0,0 +1,114 @@
+package com.bumptech.glide.samples.imgur;
+
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.RecyclerView.ViewHolder;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.bumptech.glide.samples.imgur.api.Image;
+import dagger.android.AndroidInjection;
+import java.util.Collections;
+import java.util.List;
+import javax.inject.Inject;
+import javax.inject.Named;
+import rx.Observable;
+import rx.Observer;
+import rx.android.schedulers.AndroidSchedulers;
+import rx.schedulers.Schedulers;
+
+/**
+ * Displays images and GIFs from Imgur in a scrollable list of cards.
+ */
+public final class MainActivity extends AppCompatActivity {
+
+  @Inject @Named("hotViralImages") Observable<List<Image>> fetchImagesObservable;
+  private ImgurImageAdapter adapter;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    AndroidInjection.inject(this);
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.activity_main);
+    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);
+
+    recyclerView.setHasFixedSize(true);
+    LinearLayoutManager layoutManager = new LinearLayoutManager(this);
+    recyclerView.setLayoutManager(layoutManager);
+    adapter = new ImgurImageAdapter();
+    recyclerView.setAdapter(adapter);
+
+    fetchImagesObservable
+        .subscribeOn(Schedulers.newThread())
+        .observeOn(AndroidSchedulers.mainThread())
+        .subscribe(new Observer<List<Image>>() {
+          @Override
+          public void onCompleted() { }
+
+          @Override
+          public void onError(Throwable e) { }
+
+          @Override
+          public void onNext(List<Image> images) {
+            adapter.setData(images);
+          }
+        });
+  }
+
+  @Override
+  protected void onDestroy() {
+    super.onDestroy();
+    fetchImagesObservable.unsubscribeOn(AndroidSchedulers.mainThread());
+  }
+
+  private final class ImgurImageAdapter extends RecyclerView.Adapter<ViewHolder> {
+
+    private List<Image> images = Collections.emptyList();
+
+    public void setData(@NonNull List<Image> images) {
+      this.images = images;
+      notifyDataSetChanged();
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+      return new ViewHolder(LayoutInflater.from(parent.getContext())
+          .inflate(R.layout.image_card, parent, false));
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+      ViewHolder vh = (ViewHolder) holder;
+      Image image = images.get(position);
+      vh.title.setText(
+          TextUtils.isEmpty(image.title) ? image.description : image.title);
+
+      ImgurGlide.with(vh.imageView)
+          .load(image.link)
+          .into(vh.imageView);
+    }
+
+    @Override
+    public int getItemCount() {
+      return images.size();
+    }
+
+    private final class ViewHolder extends RecyclerView.ViewHolder {
+
+      private final ImageView imageView;
+      private final TextView title;
+
+      ViewHolder(View itemView) {
+        super(itemView);
+        imageView = (ImageView) itemView.findViewById(R.id.image);
+        title = (TextView) itemView.findViewById(R.id.title);
+      }
+    }
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivityModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivityModule.java
new file mode 100644
index 000000000..e195b9a7c
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivityModule.java
@@ -0,0 +1,17 @@
+package com.bumptech.glide.samples.imgur;
+
+import android.app.Activity;
+import dagger.Binds;
+import dagger.Module;
+import dagger.android.ActivityKey;
+import dagger.android.AndroidInjector;
+import dagger.multibindings.IntoMap;
+
+@Module(subcomponents = MainActivitySubcomponent.class)
+abstract class MainActivityModule {
+  @Binds
+  @IntoMap
+  @ActivityKey(MainActivity.class)
+  abstract AndroidInjector.Factory<? extends Activity> bindYourActivityInjectorFactory(
+      MainActivitySubcomponent.Builder builder);
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivitySubcomponent.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivitySubcomponent.java
new file mode 100644
index 000000000..580ab55ba
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivitySubcomponent.java
@@ -0,0 +1,19 @@
+package com.bumptech.glide.samples.imgur;
+
+import dagger.Subcomponent;
+import dagger.android.AndroidInjector;
+
+/**
+ * The subcomponent for the Imgur sample's main activity.
+ */
+@Subcomponent
+public interface MainActivitySubcomponent extends AndroidInjector<MainActivity> {
+
+  /**
+   * Dagger componeent for Activity injection.
+   */
+  @Subcomponent.Builder
+  abstract class Builder extends AndroidInjector.Builder<MainActivity> {
+    // Intentionally empty.
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java
new file mode 100644
index 000000000..85b056916
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java
@@ -0,0 +1,59 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import dagger.Module;
+import dagger.Provides;
+import java.io.IOException;
+import java.util.List;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Response;
+import retrofit2.Retrofit;
+import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
+import retrofit2.converter.gson.GsonConverterFactory;
+import rx.Observable;
+
+/**
+ * Provides classes related to the Imgur API via Dagger.
+ */
+@Singleton
+@Module
+public final class ApiModule {
+
+  @Singleton
+  @Named("hotViralImages")
+  @Provides
+  Observable<List<Image>> provideHotViralImages(ImgurObservables imgurObservables) {
+    return imgurObservables.getHotViralImages(5 /*maxPages*/);
+  }
+
+  @Provides ImgurObservables imgurObservables(ImgurService imgurService) {
+    return new ImgurObservables(imgurService);
+  }
+
+  @Provides ImgurService getImgurService(Retrofit retrofit) {
+    return retrofit.create(ImgurService.class);
+  }
+
+  @Provides Retrofit retrofit() {
+    OkHttpClient client = new OkHttpClient.Builder()
+        .addInterceptor(new Interceptor() {
+          @Override
+          public Response intercept(Chain chain) throws IOException {
+            return chain.proceed(
+                chain.request()
+                    .newBuilder()
+                    .addHeader("Authorization", "Client-ID " + ImgurService.CLIENT_ID)
+                    .build());
+          }
+        })
+        .build();
+    return new Retrofit.Builder()
+        .client(client)
+        .addConverterFactory(GsonConverterFactory.create())
+        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
+        .baseUrl("https://api.imgur.com/3/")
+        .build();
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java
new file mode 100644
index 000000000..6466b1527
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java
@@ -0,0 +1,19 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import java.util.List;
+
+/**
+ * Represents Imgur's Gallery resource.
+ *
+ * <p>Populated automatically by GSON.
+ */
+public final class Gallery {
+  public List<Image> data;
+
+  @Override
+  public String toString() {
+    return "Gallery{"
+        + "data=" + data
+        + '}';
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java
new file mode 100644
index 000000000..3f0008234
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java
@@ -0,0 +1,25 @@
+package com.bumptech.glide.samples.imgur.api;
+
+/**
+ * Represents Imgur's Image resource.
+ *
+ * <p>Populated automatically by GSON
+ */
+public final class Image {
+  public String id;
+  public String title;
+  public String description;
+  public String link;
+  public boolean is_album;
+
+  @Override
+  public String toString() {
+    return "Image{"
+        + "id='" + id + '\''
+        + ", title='" + title + '\''
+        + ", description='" + description + '\''
+        + ", link='" + link + '\''
+        + ", is_album='" + is_album + '\''
+        + '}';
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java
new file mode 100644
index 000000000..26d5f034a
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java
@@ -0,0 +1,64 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import rx.Observable;
+import rx.functions.Func1;
+import rx.functions.Func2;
+
+/**
+ * Observables for retrieving metadata from Imgur's API.
+ */
+public final class ImgurObservables {
+
+  private final ImgurService imgurService;
+
+  ImgurObservables(ImgurService imgurService) {
+    this.imgurService = imgurService;
+  }
+
+  public Observable<List<Image>> getHotViralImages(int maxPages) {
+    return Observable.range(0, maxPages)
+        .flatMap(new Func1<Integer, Observable<List<Image>>>() {
+          @Override
+          public Observable<List<Image>> call(Integer integer) {
+            return imgurService.getHotViral(integer).map(new GetData()).flatMap(
+                new Func1<List<Image>, Observable<List<Image>>>() {
+                  @Override
+                  public Observable<List<Image>> call(List<Image> images) {
+                    for (Iterator<Image> iterator = images.iterator(); iterator.hasNext();) {
+                      if (iterator.next().is_album) {
+                        iterator.remove();
+                      }
+                    }
+                    return Observable.just(images);
+                  }
+                });
+          }
+        })
+        .takeWhile(new Func1<List<Image>, Boolean>() {
+          @Override
+          public Boolean call(List<Image> images) {
+            return !images.isEmpty();
+          }
+        })
+        .scan(new Func2<List<Image>, List<Image>, List<Image>>() {
+          @Override
+          public List<Image> call(List<Image> images, List<Image> images2) {
+            List<Image> result = new ArrayList<>(images.size() + images2.size());
+            result.addAll(images);
+            result.addAll(images2);
+            return result;
+          }
+        })
+        .cache();
+  }
+
+  private static class GetData implements Func1<Gallery, List<Image>> {
+    @Override
+    public List<Image> call(Gallery gallery) {
+      return gallery.data;
+    }
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurService.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurService.java
new file mode 100644
index 000000000..ddab15062
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurService.java
@@ -0,0 +1,41 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import retrofit2.http.GET;
+import retrofit2.http.Path;
+import rx.Observable;
+
+/**
+ * Define's Imgur's API for Retrofit.
+ */
+public interface ImgurService {
+  String CLIENT_ID = "36d1f6bef16370c";
+
+  @GET("gallery/hot/viral/{page}")
+  Observable<Gallery> getHotViral(@Path("page") int page);
+
+  @GET("gallery/hot/{sort}/{page}.json")
+  Observable<Gallery> getHot(@Path("sort") Sort sort, @Path("page") int page);
+
+  @GET("gallery/{section}/{sort}/{page}.json")
+  Observable<Gallery> getGallery(@Path("section") Section section,
+      @Path("sort") Sort sort, @Path("page") int page);
+
+  /**
+   * Sections that Imgur's API allows us to query from.
+   */
+  enum Section {
+    hot,
+    top,
+    user
+  }
+
+  /**
+   * The sort order for content within a particular section.
+   */
+  enum Sort {
+    viral,
+    top,
+    time,
+    rising
+  }
+}
diff --git a/samples/imgur/src/main/res/layout/activity_main.xml b/samples/imgur/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..4e7309f0a
--- /dev/null
+++ b/samples/imgur/src/main/res/layout/activity_main.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:tools="http://schemas.android.com/tools"
+  tools:context="com.bumptech.glide.samples.imgur.MainActivity">
+
+  <android.support.v7.widget.RecyclerView
+    android:id="@+id/recycler_view"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:scrollbars="vertical"
+    />
+</merge>
diff --git a/samples/imgur/src/main/res/layout/image_card.xml b/samples/imgur/src/main/res/layout/image_card.xml
new file mode 100644
index 000000000..92f2cbb76
--- /dev/null
+++ b/samples/imgur/src/main/res/layout/image_card.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:card_view="http://schemas.android.com/apk/res-auto"
+  android:layout_width="match_parent"
+  android:layout_height="wrap_content"
+  android:padding="16dp">
+
+  <android.support.v7.widget.CardView
+    android:id="@+id/card_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    card_view:cardCornerRadius="4dp">
+    <LinearLayout
+      android:orientation="vertical"
+      android:padding="16dp"
+      android:gravity="center"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content">
+      <ImageView
+        android:id="@+id/image"
+        android:scaleType="fitCenter"
+        android:layout_width="match_parent"
+        android:layout_height="150dp"
+        android:contentDescription="@null"/>
+      <TextView
+        android:id="@+id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:paddingTop="16dp"
+        />
+    </LinearLayout>
+  </android.support.v7.widget.CardView>
+</FrameLayout>
diff --git a/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 000000000..9a078e3e1
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 000000000..efc028a63
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..3af2608a4
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..9bec2e623
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..34947cd6b
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/values/colors.xml b/samples/imgur/src/main/res/values/colors.xml
new file mode 100644
index 000000000..5a077b3a7
--- /dev/null
+++ b/samples/imgur/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <color name="colorPrimary">#3F51B5</color>
+  <color name="colorPrimaryDark">#303F9F</color>
+  <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/samples/imgur/src/main/res/values/strings.xml b/samples/imgur/src/main/res/values/strings.xml
new file mode 100644
index 000000000..73f9f0e5a
--- /dev/null
+++ b/samples/imgur/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+  <string name="app_name">Imgur</string>
+</resources>
diff --git a/samples/imgur/src/main/res/values/styles.xml b/samples/imgur/src/main/res/values/styles.xml
new file mode 100644
index 000000000..ccfe4e02e
--- /dev/null
+++ b/samples/imgur/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+  <!-- Base application theme. -->
+  <style name="AppTheme" parent="Theme.AppCompat">
+    <!-- Customize your theme here. -->
+    <item name="colorPrimary">@color/colorPrimary</item>
+    <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+    <item name="colorAccent">@color/colorAccent</item>
+  </style>
+
+</resources>
diff --git a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
index 43352acd8..4f600fdc1 100644
--- a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
@@ -2,7 +2,7 @@
 
 import android.graphics.Picture;
 import android.graphics.drawable.PictureDrawable;
-
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.SimpleResource;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
@@ -14,7 +14,7 @@
  */
 public class SvgDrawableTranscoder implements ResourceTranscoder<SVG, PictureDrawable> {
   @Override
-  public Resource<PictureDrawable> transcode(Resource<SVG> toTranscode) {
+  public Resource<PictureDrawable> transcode(Resource<SVG> toTranscode, Options options) {
     SVG svg = toTranscode.get();
     Picture picture = svg.renderToPicture();
     PictureDrawable drawable = new PictureDrawable(picture);
diff --git a/settings.gradle b/settings.gradle
index 650b0e229..20c2b4430 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -12,6 +12,7 @@ include ':samples:giphy'
 include ':samples:svg'
 include ':samples:gallery'
 include ':samples:contacturi'
+include ':samples:imgur'
 include ':integration'
 include ':integration:volley'
 include ':integration:okhttp'
