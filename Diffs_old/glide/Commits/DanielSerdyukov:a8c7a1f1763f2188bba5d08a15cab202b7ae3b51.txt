diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
index 881e98c1b..bc917e9d2 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
@@ -11,6 +11,7 @@
 import android.view.View;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
+import com.bumptech.glide.manager.ArchLifecycleOwner;
 import java.io.File;
 import java.lang.Deprecated;
 import java.lang.String;
@@ -128,4 +129,12 @@ public static GlideRequests with(@NonNull android.app.Fragment fragment) {
   public static GlideRequests with(@NonNull View view) {
     return (GlideRequests) Glide.with(view);
   }
+
+  /**
+   * @see Glide#with(ArchLifecycleOwner)
+   */
+  @NonNull
+  public static GlideRequests with(@NonNull ArchLifecycleOwner owner) {
+    return (GlideRequests) Glide.with(owner);
+  }
 }
diff --git a/gradle.properties b/gradle.properties
index 0af4d3a62..6933642fb 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,6 +16,7 @@ POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
 ANDROID_SUPPORT_VERSION=27.1.1
+ANDROID_LIFECYCLE_VERSION=1.1.1
 ANDROIDX_TEST_VERSION=1.1.0-alpha4
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.1
diff --git a/library/build.gradle b/library/build.gradle
index 6f01832e2..fbfa40167 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -14,6 +14,8 @@ dependencies {
     api project(':annotation')
     api "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
     compileOnly "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    compileOnly "android.arch.lifecycle:common:${ANDROID_LIFECYCLE_VERSION}"
+    compileOnly "android.arch.lifecycle:common-java8:${ANDROID_LIFECYCLE_VERSION}"
 
     if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
         errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 89b950cd8..abfd1b2db 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -74,6 +74,7 @@
 import com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder;
 import com.bumptech.glide.load.resource.transcode.DrawableBytesTranscoder;
 import com.bumptech.glide.load.resource.transcode.GifDrawableBytesTranscoder;
+import com.bumptech.glide.manager.ArchLifecycleOwner;
 import com.bumptech.glide.manager.ConnectivityMonitorFactory;
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.module.ManifestParser;
@@ -801,6 +802,19 @@ public static RequestManager with(@NonNull View view) {
     return getRetriever(view.getContext()).get(view);
   }
 
+  /**
+   * Begin a load with Glide that will be tied to the given
+   * {@link android.arch.lifecycle.Lifecycle}'s lifecycle and that uses the given
+   * {@link android.arch.lifecycle.Lifecycle}'s default options.
+   *
+   * @param owner The lifecycle owner to use
+   * @return A RequestManager for the given Lifecycle that can be used to start a load.
+   */
+  @NonNull
+  public static RequestManager with(@NonNull ArchLifecycleOwner owner) {
+    return getRetriever(owner.getContext()).get(owner);
+  }
+
   @NonNull
   public Registry getRegistry() {
     return registry;
diff --git a/library/src/main/java/com/bumptech/glide/manager/ArchLifecycle.java b/library/src/main/java/com/bumptech/glide/manager/ArchLifecycle.java
new file mode 100644
index 000000000..f65864dcc
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/manager/ArchLifecycle.java
@@ -0,0 +1,102 @@
+package com.bumptech.glide.manager;
+
+import android.arch.lifecycle.LifecycleObserver;
+import android.arch.lifecycle.LifecycleOwner;
+import android.arch.lifecycle.OnLifecycleEvent;
+import android.support.annotation.NonNull;
+import android.support.v4.util.ArrayMap;
+import java.util.Map;
+
+class ArchLifecycle implements Lifecycle {
+
+  private final android.arch.lifecycle.Lifecycle lifecycle;
+
+  private final Map<LifecycleListener, LifecycleObserver> listeners = new ArrayMap<>();
+
+  ArchLifecycle(@NonNull android.arch.lifecycle.Lifecycle lifecycle) {
+    this.lifecycle = lifecycle;
+  }
+
+  @Override
+  public void addListener(@NonNull LifecycleListener listener) {
+    if (listeners.containsKey(listener)) {
+      return;
+    }
+    LifecycleObserver observer = wrap(listener);
+    listeners.put(listener, observer);
+    lifecycle.addObserver(observer);
+  }
+
+  @Override
+  public void removeListener(@NonNull LifecycleListener listener) {
+    LifecycleObserver observer = listeners.remove(listener);
+    if (observer != null) {
+      lifecycle.removeObserver(observer);
+    }
+  }
+
+  @NonNull
+  private LifecycleObserver wrap(@NonNull LifecycleListener listener) {
+    try {
+      Class.forName("android.arch.lifecycle.DefaultLifecycleObserver");
+      return wrapWithDefaultLifecycleObserver(listener);
+    } catch (ClassNotFoundException ignore) {
+      return wrapWithGenericLifecycleObserver(listener);
+    }
+  }
+
+  @NonNull
+  private LifecycleObserver wrapWithDefaultLifecycleObserver(
+      @NonNull final LifecycleListener listener) {
+    return new android.arch.lifecycle.DefaultLifecycleObserver() {
+      @Override
+      public void onCreate(@NonNull LifecycleOwner owner) {
+      }
+
+      @Override
+      public void onStart(@NonNull LifecycleOwner owner) {
+        listener.onStart();
+      }
+
+      @Override
+      public void onResume(@NonNull LifecycleOwner owner) {
+      }
+
+      @Override
+      public void onPause(@NonNull LifecycleOwner owner) {
+      }
+
+      @Override
+      public void onStop(@NonNull LifecycleOwner owner) {
+        listener.onStop();
+      }
+
+      @Override
+      public void onDestroy(@NonNull LifecycleOwner owner) {
+        listener.onDestroy();
+      }
+    };
+  }
+
+  private LifecycleObserver wrapWithGenericLifecycleObserver(
+      @NonNull final LifecycleListener listener) {
+    return new LifecycleObserver() {
+      @OnLifecycleEvent(android.arch.lifecycle.Lifecycle.Event.ON_START)
+      public void onStart(@NonNull LifecycleOwner owner) {
+        listener.onStart();
+      }
+
+      @OnLifecycleEvent(android.arch.lifecycle.Lifecycle.Event.ON_STOP)
+      public void onStop(@NonNull LifecycleOwner owner) {
+        listener.onStop();
+      }
+
+      @OnLifecycleEvent(android.arch.lifecycle.Lifecycle.Event.ON_DESTROY)
+      public void onDestroy(@NonNull LifecycleOwner owner) {
+        listener.onDestroy();
+      }
+    };
+  }
+
+
+}
diff --git a/library/src/main/java/com/bumptech/glide/manager/ArchLifecycleOwner.java b/library/src/main/java/com/bumptech/glide/manager/ArchLifecycleOwner.java
new file mode 100644
index 000000000..2a872cfa9
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/manager/ArchLifecycleOwner.java
@@ -0,0 +1,35 @@
+package com.bumptech.glide.manager;
+
+import android.arch.lifecycle.Lifecycle;
+import android.arch.lifecycle.LifecycleOwner;
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+/**
+ * The simple wrapper around Context and Lifecycle.
+ *
+ * @see Lifecycle
+ */
+public class ArchLifecycleOwner implements LifecycleOwner {
+
+  private final Context context;
+
+  private final Lifecycle lifecycle;
+
+  public ArchLifecycleOwner(@NonNull Context context, @NonNull Lifecycle lifecycle) {
+    this.context = context;
+    this.lifecycle = lifecycle;
+  }
+
+  @NonNull
+  public Context getContext() {
+    return context;
+  }
+
+  @NonNull
+  @Override
+  public Lifecycle getLifecycle() {
+    return lifecycle;
+  }
+
+}
diff --git a/library/src/main/java/com/bumptech/glide/manager/ArchLifecycleRegistry.java b/library/src/main/java/com/bumptech/glide/manager/ArchLifecycleRegistry.java
new file mode 100644
index 000000000..58c6e2794
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/manager/ArchLifecycleRegistry.java
@@ -0,0 +1,43 @@
+package com.bumptech.glide.manager;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Set;
+import java.util.WeakHashMap;
+
+final class ArchLifecycleRegistry {
+
+  private static final Map<android.arch.lifecycle.Lifecycle, RequestManager> REGISTRY =
+      new WeakHashMap<>();
+
+  private ArchLifecycleRegistry() {
+  }
+
+  @Nullable
+  static RequestManager get(@NonNull android.arch.lifecycle.Lifecycle lifecycle) {
+    return REGISTRY.get(lifecycle);
+  }
+
+  static void set(@NonNull android.arch.lifecycle.Lifecycle lifecycle,
+                  @NonNull RequestManager requestManager) {
+    REGISTRY.put(lifecycle, requestManager);
+  }
+
+  @NonNull
+  static RequestManager build(@NonNull RequestManagerRetriever.RequestManagerFactory factory,
+                              @NonNull Glide glide,
+                              @NonNull android.arch.lifecycle.Lifecycle lifecycle) {
+    return factory.build(glide, new ArchLifecycle(lifecycle), new RequestManagerTreeNode() {
+      @NonNull
+      @Override
+      public Set<RequestManager> getDescendants() {
+        return Collections.emptySet();
+      }
+    }, glide.getContext());
+  }
+
+}
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index a8260fa81..82603ee72 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -194,6 +194,21 @@ public RequestManager get(@NonNull View view) {
     return get(fragment);
   }
 
+  @NonNull
+  public RequestManager get(@NonNull ArchLifecycleOwner owner) {
+    if (Util.isOnBackgroundThread()) {
+      return get(owner.getContext().getApplicationContext());
+    }
+    RequestManager requestManager = ArchLifecycleRegistry.get(owner.getLifecycle());
+    if (requestManager == null) {
+      // TODO(b/27524013): Factor out this Glide.get() call.
+      Glide glide = Glide.get(owner.getContext());
+      requestManager = ArchLifecycleRegistry.build(factory, glide, owner.getLifecycle());
+      ArchLifecycleRegistry.set(owner.getLifecycle(), requestManager);
+    }
+    return requestManager;
+  }
+
   private static void findAllSupportFragmentsWithViews(
       @Nullable Collection<Fragment> topLevelFragments,
       @NonNull Map<View, Fragment> result) {
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/ArchLifecycleSupportTest.java b/library/test/src/test/java/com/bumptech/glide/manager/ArchLifecycleSupportTest.java
new file mode 100644
index 000000000..b0b585069
--- /dev/null
+++ b/library/test/src/test/java/com/bumptech/glide/manager/ArchLifecycleSupportTest.java
@@ -0,0 +1,119 @@
+package com.bumptech.glide.manager;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+import android.arch.lifecycle.Lifecycle.Event;
+import android.arch.lifecycle.LifecycleObserver;
+import android.arch.lifecycle.LifecycleOwner;
+import android.arch.lifecycle.LifecycleRegistry;
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.tests.GlideShadowLooper;
+import com.bumptech.glide.tests.TearDownGlide;
+import com.bumptech.glide.tests.Util;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, sdk = 18, shadows = GlideShadowLooper.class)
+public class ArchLifecycleSupportTest {
+
+  @Rule
+  public TearDownGlide tearDownGlide = new TearDownGlide();
+
+  private RequestManagerRetriever retriever;
+
+  private LifecycleRegistry lifecycle;
+
+  private ArchLifecycleOwner lifecycleOwner;
+
+  private int initialSdkVersion;
+
+  @Before
+  public void setUp() {
+    retriever = new RequestManagerRetriever(new RequestManagerRetriever.RequestManagerFactory() {
+      @NonNull
+      @Override
+      public RequestManager build(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+                                  @NonNull RequestManagerTreeNode requestManagerTreeNode,
+                                  @NonNull Context context) {
+        RequestManager requestManager = mock(RequestManager.class);
+        lifecycle.addListener(requestManager);
+        return requestManager;
+      }
+    });
+    lifecycle = new TestLifecycleOwner().registry;
+    lifecycleOwner = new ArchLifecycleOwner(RuntimeEnvironment.application, lifecycle);
+    initialSdkVersion = Build.VERSION.SDK_INT;
+    lifecycle.markState(android.arch.lifecycle.Lifecycle.State.CREATED);
+    Util.setSdkVersionInt(18);
+  }
+
+  @Test
+  public void testReturnsNewManagerIfNoneExists() {
+    assertNotNull(retriever.get(lifecycleOwner));
+  }
+
+  @Test
+  public void testReturnsExistingRequestManagerIfExists() {
+    RequestManager requestManager = retriever.get(lifecycleOwner);
+    assertEquals(requestManager, retriever.get(lifecycleOwner));
+  }
+
+  @Test
+  public void testNotifyRequestManagerLifecycle() {
+    RequestManager requestManager = retriever.get(lifecycleOwner);
+    lifecycle.handleLifecycleEvent(Event.ON_START);
+    verify(requestManager).onStart();
+
+    lifecycle.handleLifecycleEvent(Event.ON_STOP);
+    verify(requestManager).onStop();
+
+    lifecycle.handleLifecycleEvent(Event.ON_DESTROY);
+    verify(requestManager).onDestroy();
+  }
+
+  @Test
+  public void testNotifyLifecycleEventsAddedLater() {
+    ArchLifecycle archLifecycle = new ArchLifecycle(lifecycle);
+    lifecycle.handleLifecycleEvent(Event.ON_START);
+    LifecycleListener listener = mock(LifecycleListener.class);
+    archLifecycle.addListener(listener);
+    verify(listener).onStart();
+  }
+
+  @After
+  public void tearDown() {
+    Util.setSdkVersionInt(initialSdkVersion);
+  }
+
+  private static class TestLifecycleOwner implements LifecycleOwner {
+
+    final LifecycleRegistry registry = new LifecycleRegistry(this) {
+      @Override
+      public void addObserver(@NonNull LifecycleObserver observer) {
+        super.addObserver(observer);
+      }
+    };
+
+    @NonNull
+    @Override
+    public android.arch.lifecycle.Lifecycle getLifecycle() {
+      return registry;
+    }
+
+  }
+
+}
