diff --git a/.travis.yml b/.travis.yml
index c2f8037b5..93bf4f945 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -24,7 +24,6 @@ env:
     - COMPONENT=instrumentation ANDROID_TARGET=16
     - COMPONENT=instrumentation ANDROID_TARGET=17
     - COMPONENT=instrumentation ANDROID_TARGET=18
-    - COMPONENT=instrumentation ANDROID_TARGET=19
     - COMPONENT=samples
 
 before_script:
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
index d4da883b5..c1720e466 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
@@ -76,12 +76,6 @@
   private static final String REQUEST_MANAGER_QUALIFIED_NAME =
       "com.bumptech.glide.RequestManager";
 
-  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME =
-      "android.support.annotation.VisibleForTesting";
-
-  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX =
-      "androidx.annotation.VisibleForTesting";
-
   private static final String SUPPRESS_LINT_PACKAGE_NAME =
       "android.annotation";
   private static final String SUPPRESS_LINT_CLASS_NAME =
@@ -179,11 +173,7 @@ private MethodSpec overrideGlideStaticMethod(ExecutableElement methodToOverride)
   private Builder addReturnAnnotations(Builder builder, ExecutableElement methodToOverride) {
     Elements elements = processingEnv.getElementUtils();
     TypeElement visibleForTestingTypeElement = elements
-        .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME_ANDROIDX);
-    if (visibleForTestingTypeElement == null) {
-      // Fall back to looking for the Support library version.
-      visibleForTestingTypeElement = elements.getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);
-    }
+        .getTypeElement(ProcessorUtil.visibleForTesting().reflectionName());
     String visibleForTestingTypeQualifiedName = visibleForTestingTypeElement.toString();
 
     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index b9832f365..25c7a8ce8 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -74,6 +74,10 @@
       ClassName.get("android.support.annotation", "CheckResult");
   private static final ClassName ANDROIDX_CHECK_RESULT_ANNOTATION =
       ClassName.get("androidx.annotation", "CheckResult");
+  private static final ClassName VISIBLE_FOR_TESTING =
+      ClassName.get("android.support.annotation", "VisibleForTesting");
+  private static final ClassName ANDROIDX_VISIBLE_FOR_TESTING =
+      ClassName.get("androidx.annotation", "VisibleForTesting");
 
   private final ProcessingEnvironment processingEnv;
   private final TypeElement appGlideModuleType;
@@ -440,6 +444,15 @@ private static String applySmartParameterNameReplacements(String name) {
     return result;
   }
 
+  static ClassName visibleForTesting() {
+    try {
+      Class.forName(ANDROIDX_VISIBLE_FOR_TESTING.reflectionName());
+      return ANDROIDX_VISIBLE_FOR_TESTING;
+    } catch (ClassNotFoundException e) {
+      return VISIBLE_FOR_TESTING;
+    }
+  }
+
   static ClassName nonNull() {
     try {
       Class.forName(ANDROIDX_NONNULL_ANNOTATION.reflectionName());
diff --git a/gradle.properties b/gradle.properties
index 5031f4c83..0c866d1ab 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -27,9 +27,9 @@ JUNIT_VERSION=4.13-SNAPSHOT
 # Matches the version in Google.
 MOCKITO_VERSION=1.9.5
 MOCKITO_ANDROID_VERSION=2.21.0
-ROBOLECTRIC_VERSION=4.1
+ROBOLECTRIC_VERSION=4.3-beta-1
 MOCKWEBSERVER_VERSION=3.0.0-RC1
-TRUTH_VERSION=0.36
+TRUTH_VERSION=0.44
 JSR_305_VERSION=3.0.2
 AUTO_SERVICE_VERSION=1.0-rc3
 JAVAPOET_VERSION=1.9.0
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java
index 364ef5150..9d89d6838 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/AsFileTest.java
@@ -46,6 +46,18 @@ public void asFile_withUrl_succeeds() {
     assertThat(file).isNotNull();
   }
 
+  @Test
+  public void asFile_withUrlAndDiskCacheStrategyAutomatic_succeeds() {
+    File file =
+        concurrency.get(
+            GlideApp.with(context)
+                .asFile()
+                .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
+                .load(URL)
+                .submit());
+    assertThat(file).isNotNull();
+  }
+
   @Test
   public void asFile_withUrlAndDiskCacheStrategyData_succeeds() {
     File file =
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
index 9292a7ec8..955fe208b 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
@@ -208,7 +208,7 @@ public void load_withColorDrawable_fixedSize_unitBitmapTransform_recyclesInterme
     Bitmap first = bitmapPool.get(width, height, Config.ARGB_8888);
     Bitmap second = bitmapPool.get(width, height, Config.ARGB_8888);
 
-    assertThat(first).isNotSameAs(second);
+    assertThat(first).isNotSameInstanceAs(second);
   }
    @Test
   public void load_withColorDrawable_fixedSize_functionalBitmapTransform_doesNotRecycleOutput()
@@ -232,6 +232,6 @@ public void load_withColorDrawable_fixedSize_functionalBitmapTransform_doesNotRe
     Bitmap first = bitmapPool.get(width, height, Config.ARGB_8888);
     Bitmap second = bitmapPool.get(width, height, Config.ARGB_8888);
 
-    assertThat(first).isNotSameAs(second);
+    assertThat(first).isNotSameInstanceAs(second);
   }
 }
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
index db3802c31..56f2e1f40 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
@@ -94,7 +94,7 @@ public void loadFromRequestManager_intoImageView_withDifferentByteArrays_loadsDi
 
     // This assertion alone doesn't catch the case where the second Bitmap is loaded from the result
     // cache of the data from the first Bitmap.
-    BitmapSubject.assertThat(firstBitmap).isNotSameAs(secondBitmap);
+    BitmapSubject.assertThat(firstBitmap).isNotSameInstanceAs(secondBitmap);
 
     Bitmap expectedCanonicalBitmap =
         BitmapFactory.decodeByteArray(canonicalBytes, /*offset=*/ 0, canonicalBytes.length);
@@ -127,7 +127,7 @@ public void loadFromRequestBuilder_intoImageView_withDifferentByteArrays_loadsDi
 
     // This assertion alone doesn't catch the case where the second Bitmap is loaded from the result
     // cache of the data from the first Bitmap.
-    BitmapSubject.assertThat(firstBitmap).isNotSameAs(secondBitmap);
+    BitmapSubject.assertThat(firstBitmap).isNotSameInstanceAs(secondBitmap);
 
     Bitmap expectedCanonicalBitmap =
         BitmapFactory.decodeByteArray(canonicalBytes, /*offset=*/ 0, canonicalBytes.length);
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
index cdacb09bd..bc795234b 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.test;
 
+import static com.google.common.truth.Fact.simpleFact;
+
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
@@ -28,8 +30,11 @@ public BitmapSubject createSubject(
         }
       };
 
+  private final Bitmap actual;
+
   private BitmapSubject(FailureMetadata failureMetadata, Bitmap subject) {
     super(failureMetadata, subject);
+    this.actual = subject;
   }
 
   public static BitmapSubject assertThat(Drawable drawable) {
@@ -45,7 +50,7 @@ public static BitmapSubject assertThat(Bitmap bitmap) {
 
   @Override
   protected String actualCustomStringRepresentation() {
-    return getDisplayString(actual());
+    return getDisplayString(actual);
   }
 
   private static String getDisplayString(Bitmap bitmap) {
@@ -64,59 +69,52 @@ public void sameAs(@DrawableRes int resourceId) {
   }
 
   public void hasDimensions(int expectedWidth, int expectedHeight) {
-    int actualWidth = actual().getWidth();
-    int actualHeight = actual().getHeight();
-    String message;
+    int actualWidth = actual.getWidth();
+    int actualHeight = actual.getHeight();
     if (expectedWidth != actualWidth && expectedHeight != actualHeight) {
-      message = "has dimensions of [" + expectedWidth + "x" + expectedHeight + "]";
+      failWithActual("expected to have dimensions", expectedWidth + "x" + expectedHeight);
     } else if (expectedWidth != actualWidth) {
-      message = "has width of " + expectedWidth;
+      failWithActual("expected to have width", expectedWidth);
     } else if (expectedHeight != actualHeight) {
-      message = "has height of " + expectedHeight;
-    } else {
-      message = null;
-    }
-
-    if (message != null) {
-      fail(message);
+      failWithActual("expected to have height", expectedHeight);
     }
   }
 
   public void isMutable()  {
-    if (!actual().isMutable()) {
-      fail("is mutable");
+    if (!actual.isMutable()) {
+      failWithActual(simpleFact("expected to be mutable"));
     }
   }
 
   public void isImmutable() {
-    if (actual().isMutable()) {
-      fail("is immutable");
+    if (actual.isMutable()) {
+      failWithActual(simpleFact("expected to be immutable"));
     }
   }
 
   public void isNotRecycled() {
-    if (actual().isRecycled()) {
-      fail("is not recycled");
+    if (actual.isRecycled()) {
+      failWithActual(simpleFact("expected not to be recycled"));
     }
   }
 
   @SuppressWarnings({"unchecked", "ConstantConditions"})
   public void sameAs(Drawable other) {
     if (!(other instanceof BitmapDrawable)) {
-      fail("Not a BitmapDrawable");
+      failWithoutActual(simpleFact("The given expected value was not a BitmapDrawable."));
     }
     sameAs(((BitmapDrawable) other).getBitmap());
   }
 
   public void sameAs(Bitmap other) {
-    if (!actual().sameAs(other)) {
-      fail("is the same as " + getDisplayString(other));
+    if (!actual.sameAs(other)) {
+      failWithActual("expected to be the same as", getDisplayString(other));
     }
   }
 
   public void isNotSameAs(Bitmap other) {
-    if (actual().sameAs(other)) {
-      fail("is not the same as " + getDisplayString(other));
+    if (actual.sameAs(other)) {
+      failWithActual("expected not to be the same as", getDisplayString(other));
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index a4ceab042..ce3b5eafb 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -12,7 +12,9 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
+import android.os.MessageQueue.IdleHandler;
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.GuardedBy;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
@@ -31,6 +33,7 @@
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.engine.prefill.BitmapPreFiller;
 import com.bumptech.glide.load.engine.prefill.PreFillType;
+import com.bumptech.glide.load.engine.prefill.PreFillType.Builder;
 import com.bumptech.glide.load.model.AssetUriLoader;
 import com.bumptech.glide.load.model.ByteArrayLoader;
 import com.bumptech.glide.load.model.ByteBufferEncoder;
@@ -109,14 +112,17 @@
   private final Engine engine;
   private final BitmapPool bitmapPool;
   private final MemoryCache memoryCache;
-  private final BitmapPreFiller bitmapPreFiller;
   private final GlideContext glideContext;
   private final Registry registry;
   private final ArrayPool arrayPool;
   private final RequestManagerRetriever requestManagerRetriever;
   private final ConnectivityMonitorFactory connectivityMonitorFactory;
   private final List<RequestManager> managers = new ArrayList<>();
+  private final RequestOptionsFactory defaultRequestOptionsFactory;
   private MemoryCategory memoryCategory = MemoryCategory.NORMAL;
+  @GuardedBy("this")
+  @Nullable
+  private BitmapPreFiller bitmapPreFiller;
 
   /**
    * Returns a directory with a default name in the private cache directory of the application to
@@ -328,7 +334,7 @@ private static void throwIncorrectGlideModule(Exception e) {
       @NonNull RequestManagerRetriever requestManagerRetriever,
       @NonNull ConnectivityMonitorFactory connectivityMonitorFactory,
       int logLevel,
-      @NonNull RequestOptions defaultRequestOptions,
+      @NonNull RequestOptionsFactory defaultRequestOptionsFactory,
       @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,
       @NonNull List<RequestListener<Object>> defaultRequestListeners,
       boolean isLoggingRequestOriginsEnabled) {
@@ -338,9 +344,7 @@ private static void throwIncorrectGlideModule(Exception e) {
     this.memoryCache = memoryCache;
     this.requestManagerRetriever = requestManagerRetriever;
     this.connectivityMonitorFactory = connectivityMonitorFactory;
-
-    DecodeFormat decodeFormat = defaultRequestOptions.getOptions().get(Downsampler.DECODE_FORMAT);
-    bitmapPreFiller = new BitmapPreFiller(memoryCache, bitmapPool, decodeFormat);
+    this.defaultRequestOptionsFactory = defaultRequestOptionsFactory;
 
     final Resources resources = context.getResources();
 
@@ -525,7 +529,7 @@ private static void throwIncorrectGlideModule(Exception e) {
             arrayPool,
             registry,
             imageViewTargetFactory,
-            defaultRequestOptions,
+            defaultRequestOptionsFactory,
             defaultTransitionOptions,
             defaultRequestListeners,
             engine,
@@ -580,7 +584,7 @@ GlideContext getGlideContext() {
   }
 
   /**
-   * Pre-fills the {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool} using the given
+   * Pre-fills the {@link BitmapPool} using the given
    * sizes.
    *
    * <p> Enough Bitmaps are added to completely fill the pool, so most or all of the Bitmaps
@@ -589,23 +593,30 @@ GlideContext getGlideContext() {
    * </p>
    *
    * <p> Note - Pre-filling is done asynchronously using and
-   * {@link android.os.MessageQueue.IdleHandler}. Any currently running pre-fill will be cancelled
+   * {@link IdleHandler}. Any currently running pre-fill will be cancelled
    * and replaced by a call to this method. </p>
    *
    * <p> This method should be used with caution, overly aggressive pre-filling is substantially
    * worse than not pre-filling at all. Pre-filling should only be started in onCreate to avoid
    * constantly clearing and re-filling the
-   * {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool}. Rotation should be carefully
+   * {@link BitmapPool}. Rotation should be carefully
    * considered as well. It may be worth calling this method only when no saved instance state
    * exists so that pre-filling only happens when the Activity is first created, rather than on
    * every rotation. </p>
    *
    * @param bitmapAttributeBuilders The list of
-   * {@link com.bumptech.glide.load.engine.prefill.PreFillType.Builder Builders} representing
-   * individual sizes and configurations of {@link android.graphics.Bitmap}s to be pre-filled.
+   * {@link Builder Builders} representing
+   * individual sizes and configurations of {@link Bitmap}s to be pre-filled.
    */
   @SuppressWarnings("unused") // Public API
-  public void preFillBitmapPool(@NonNull PreFillType.Builder... bitmapAttributeBuilders) {
+  public synchronized void preFillBitmapPool(
+      @NonNull PreFillType.Builder... bitmapAttributeBuilders) {
+    if (bitmapPreFiller == null) {
+      DecodeFormat decodeFormat =
+          defaultRequestOptionsFactory.build().getOptions().get(Downsampler.DECODE_FORMAT);
+      bitmapPreFiller = new BitmapPreFiller(memoryCache, bitmapPool, decodeFormat);
+    }
+
     bitmapPreFiller.preFill(bitmapAttributeBuilders);
   }
 
@@ -858,4 +869,16 @@ public void onConfigurationChanged(Configuration newConfig) {
   public void onLowMemory() {
     clearMemory();
   }
+
+  /**
+   * Creates a new instance of {@link RequestOptions}.
+   */
+  public interface RequestOptionsFactory {
+
+    /**
+     * Returns a non-null {@link RequestOptions} object.
+     */
+    @NonNull
+    RequestOptions build();
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index fd4d859a2..d1c5d8816 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -6,6 +6,7 @@
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 import android.util.Log;
+import com.bumptech.glide.Glide.RequestOptionsFactory;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.GlideException;
@@ -28,6 +29,7 @@
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.util.Preconditions;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -48,7 +50,13 @@
   private MemorySizeCalculator memorySizeCalculator;
   private ConnectivityMonitorFactory connectivityMonitorFactory;
   private int logLevel = Log.INFO;
-  private RequestOptions defaultRequestOptions = new RequestOptions();
+  private RequestOptionsFactory defaultRequestOptionsFactory = new RequestOptionsFactory() {
+    @NonNull
+    @Override
+    public RequestOptions build() {
+      return new RequestOptions();
+    }
+  };
   @Nullable
   private RequestManagerFactory requestManagerFactory;
   private GlideExecutor animationExecutor;
@@ -209,12 +217,38 @@ public GlideBuilder setAnimationExecutor(@Nullable GlideExecutor service) {
    * RequestBuilder#apply(BaseRequestOptions)} will override defaults
    * set here.
    *
+   * @see #setDefaultRequestOptions(RequestOptionsFactory)
+   *
    * @param requestOptions The options to use by default.
    * @return This builder.
    */
   @NonNull
-  public GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOptions) {
-    this.defaultRequestOptions = requestOptions;
+  public GlideBuilder setDefaultRequestOptions(@Nullable final RequestOptions requestOptions) {
+    return setDefaultRequestOptions(new RequestOptionsFactory() {
+      @NonNull
+      @Override
+      public RequestOptions build() {
+        return requestOptions != null ? requestOptions : new RequestOptions();
+      }
+    });
+  }
+
+  /**
+   * Sets a factory for the default {@link RequestOptions} to use for all loads across the app and
+   * returns this {@code GlideBuilder}.
+   *
+   * <p>This factory will <em>NOT</em> be called once per load. Instead it will be called a handful
+   * of times and memoized. It's not safe to assume that this factory will be called again for
+   * every new load.
+   *
+   * <p>Applying additional options with {@link RequestBuilder#apply(BaseRequestOptions)} will
+   * override defaults set here.
+   *
+   * @see #setDefaultRequestOptions(RequestOptionsFactory)
+   */
+  @NonNull
+  public GlideBuilder setDefaultRequestOptions(@NonNull RequestOptionsFactory factory) {
+    this.defaultRequestOptionsFactory = Preconditions.checkNotNull(factory);
     return this;
   }
 
@@ -506,7 +540,7 @@ Glide build(@NonNull Context context) {
         requestManagerRetriever,
         connectivityMonitorFactory,
         logLevel,
-        defaultRequestOptions.lock(),
+        defaultRequestOptionsFactory,
         defaultTransitionOptions,
         defaultRequestListeners,
         isLoggingRequestOriginsEnabled);
diff --git a/library/src/main/java/com/bumptech/glide/GlideContext.java b/library/src/main/java/com/bumptech/glide/GlideContext.java
index 22f138e84..b6c580555 100644
--- a/library/src/main/java/com/bumptech/glide/GlideContext.java
+++ b/library/src/main/java/com/bumptech/glide/GlideContext.java
@@ -2,9 +2,12 @@
 
 import android.content.Context;
 import android.content.ContextWrapper;
+import android.support.annotation.GuardedBy;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
 import android.widget.ImageView;
+import com.bumptech.glide.Glide.RequestOptionsFactory;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.request.RequestListener;
@@ -26,19 +29,22 @@
   private final ArrayPool arrayPool;
   private final Registry registry;
   private final ImageViewTargetFactory imageViewTargetFactory;
-  private final RequestOptions defaultRequestOptions;
+  private final RequestOptionsFactory defaultRequestOptionsFactory;
   private final List<RequestListener<Object>> defaultRequestListeners;
   private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions;
   private final Engine engine;
   private final boolean isLoggingRequestOriginsEnabled;
   private final int logLevel;
+  @Nullable
+  @GuardedBy("this")
+  private RequestOptions defaultRequestOptions;
 
   public GlideContext(
       @NonNull Context context,
       @NonNull ArrayPool arrayPool,
       @NonNull Registry registry,
       @NonNull ImageViewTargetFactory imageViewTargetFactory,
-      @NonNull RequestOptions defaultRequestOptions,
+      @NonNull RequestOptionsFactory defaultRequestOptionsFactory,
       @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,
       @NonNull List<RequestListener<Object>> defaultRequestListeners,
       @NonNull Engine engine,
@@ -48,7 +54,7 @@ public GlideContext(
     this.arrayPool = arrayPool;
     this.registry = registry;
     this.imageViewTargetFactory = imageViewTargetFactory;
-    this.defaultRequestOptions = defaultRequestOptions;
+    this.defaultRequestOptionsFactory = defaultRequestOptionsFactory;
     this.defaultRequestListeners = defaultRequestListeners;
     this.defaultTransitionOptions = defaultTransitionOptions;
     this.engine = engine;
@@ -60,7 +66,11 @@ public GlideContext(
     return defaultRequestListeners;
   }
 
-  public RequestOptions getDefaultRequestOptions() {
+  public synchronized RequestOptions getDefaultRequestOptions() {
+    if (defaultRequestOptions == null) {
+      defaultRequestOptions = defaultRequestOptionsFactory.build().lock();
+    }
+
     return defaultRequestOptions;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/ListPreloader.java b/library/src/main/java/com/bumptech/glide/ListPreloader.java
index e82125729..f0ce095c2 100644
--- a/library/src/main/java/com/bumptech/glide/ListPreloader.java
+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java
@@ -1,10 +1,12 @@
 package com.bumptech.glide;
 
+import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.AbsListView;
-import com.bumptech.glide.request.target.BaseTarget;
+import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.target.SizeReadyCallback;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
@@ -243,16 +245,33 @@ public PreloadTarget next(int width, int height) {
     }
   }
 
-  private static final class PreloadTarget extends BaseTarget<Object> {
+  private static final class PreloadTarget implements Target<Object> {
     @Synthetic int photoHeight;
     @Synthetic int photoWidth;
+    @Nullable
+    private Request request;
 
     @Synthetic
     PreloadTarget() { }
 
     @Override
-    public void onResourceReady(@NonNull Object resource,
-        @Nullable Transition<? super Object> transition) {
+    public void onLoadStarted(@Nullable Drawable placeholder) {
+      // Do nothing.
+    }
+
+    @Override
+    public void onLoadFailed(@Nullable Drawable errorDrawable) {
+      // Do nothing.
+    }
+
+    @Override
+    public void onResourceReady(
+        @NonNull Object resource, @Nullable Transition<? super Object> transition) {
+      // Do nothing.
+    }
+
+    @Override
+    public void onLoadCleared(@Nullable Drawable placeholder) {
       // Do nothing.
     }
 
@@ -265,5 +284,31 @@ public void getSize(@NonNull SizeReadyCallback cb) {
     public void removeCallback(@NonNull SizeReadyCallback cb) {
       // Do nothing because we don't retain references to SizeReadyCallbacks.
     }
+
+    @Override
+    public void setRequest(@Nullable Request request) {
+      this.request = request;
+    }
+
+    @Nullable
+    @Override
+    public Request getRequest() {
+      return request;
+    }
+
+    @Override
+    public void onStart() {
+      // Do nothing.
+    }
+
+    @Override
+    public void onStop() {
+      // Do nothing.
+    }
+
+    @Override
+    public void onDestroy() {
+      // Do nothing.
+    }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index cc415d705..2da90583c 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -32,8 +32,8 @@
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.target.CustomViewTarget;
 import com.bumptech.glide.request.target.Target;
-import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
@@ -678,16 +678,26 @@ public void onConnectivityChanged(boolean isConnected) {
     }
   }
 
-  private static class ClearTarget extends ViewTarget<View, Object> {
+  private static class ClearTarget extends CustomViewTarget<View, Object> {
 
     ClearTarget(@NonNull View view) {
       super(view);
     }
 
     @Override
-    public void onResourceReady(@NonNull Object resource,
-        @Nullable Transition<? super Object> transition) {
+    protected void onResourceCleared(@Nullable Drawable placeholder) {
+      // Do nothing, we don't retain a reference to our resource.
+    }
 
+    @Override
+    public void onLoadFailed(@Nullable Drawable errorDrawable) {
+      // Do nothing.
+    }
+
+    @Override
+    public void onResourceReady(
+        @NonNull Object resource, @Nullable Transition<? super Object> transition) {
+      // Do nothing.
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
index 652505fd0..5d271dad6 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
@@ -44,24 +44,18 @@
    * arbitrary.
    */
   private static final int MINIMUM_DECODES_BETWEEN_FD_CHECKS = 50;
+
   /**
    * 700 with an error of 50 Bitmaps in between at two FDs each lets us use up to 800 FDs for
    * hardware Bitmaps.
-   *
-   * <p>Reduced on S7 Edge devices due to  https://github.com/bumptech/glide/issues/3275.
    */
-  private static final int MAXIMUM_FDS_FOR_HARDWARE_CONFIGS = isSamsungGalaxyS7Edge() ? 350 : 700;
+  private static final int MAXIMUM_FDS_FOR_HARDWARE_CONFIGS = 700;
 
   private static volatile HardwareConfigState instance;
 
   private volatile int decodesSinceLastFdCheck;
   private volatile boolean isHardwareConfigAllowed = true;
 
-  // See https://bit.ly/2IW5AmI
-  private static boolean isSamsungGalaxyS7Edge() {
-    return Build.MODEL.startsWith("SM-G935") || Build.MODEL.startsWith("SM-G930");
-  }
-
   static HardwareConfigState getInstance() {
     if (instance == null) {
       synchronized (HardwareConfigState.class) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
index c46775bd2..9e90d9579 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
@@ -4,6 +4,7 @@
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 
 import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
@@ -20,7 +21,7 @@
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.request.RequestOptions;
-import com.bumptech.glide.request.target.SimpleTarget;
+import com.bumptech.glide.request.target.CustomTarget;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.util.Preconditions;
@@ -49,6 +50,9 @@
   private DelayTarget pendingTarget;
   @Nullable
   private GifFrameLoader.OnEveryFrameListener onEveryFrameListener;
+  private int firstFrameSize;
+  private int width;
+  private int height;
 
   public interface FrameCallback {
     void onFrameReady();
@@ -97,6 +101,10 @@ void setFrameTransformation(Transformation<Bitmap> transformation, Bitmap firstF
     this.transformation = Preconditions.checkNotNull(transformation);
     this.firstFrame = Preconditions.checkNotNull(firstFrame);
     requestBuilder = requestBuilder.apply(new RequestOptions().transform(transformation));
+
+    firstFrameSize = Util.getBitmapByteSize(firstFrame);
+    width = firstFrame.getWidth();
+    height = firstFrame.getHeight();
   }
 
   Transformation<Bitmap> getFrameTransformation() {
@@ -129,26 +137,21 @@ void unsubscribe(FrameCallback frameCallback) {
   }
 
   int getWidth() {
-    return getCurrentFrame().getWidth();
+    return width;
   }
 
   int getHeight() {
-    return getCurrentFrame().getHeight();
+    return height;
   }
 
   int getSize() {
-    return gifDecoder.getByteSize() + getFrameSize();
+    return gifDecoder.getByteSize() + firstFrameSize;
   }
 
   int getCurrentIndex() {
     return current != null ? current.index : -1;
   }
 
-  private int getFrameSize() {
-    return Util.getBitmapByteSize(getCurrentFrame().getWidth(), getCurrentFrame().getHeight(),
-        getCurrentFrame().getConfig());
-  }
-
   ByteBuffer getBuffer() {
     return gifDecoder.getData().asReadOnlyBuffer();
   }
@@ -306,7 +309,7 @@ public boolean handleMessage(Message msg) {
   }
 
   @VisibleForTesting
-  static class DelayTarget extends SimpleTarget<Bitmap> {
+  static class DelayTarget extends CustomTarget<Bitmap> {
     private final Handler handler;
     @Synthetic final int index;
     private final long targetTime;
@@ -329,6 +332,11 @@ public void onResourceReady(@NonNull Bitmap resource,
       Message msg = handler.obtainMessage(FrameLoaderCallback.MSG_DELAY, this);
       handler.sendMessageAtTime(msg, targetTime);
     }
+
+    @Override
+    public void onLoadCleared(@Nullable Drawable placeholder) {
+      this.resource = null;
+    }
   }
 
   private static RequestBuilder<Bitmap> getRequestBuilder(
diff --git a/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
index 85ebda0de..f2e6aa91e 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
@@ -4,6 +4,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.RemoteViews;
@@ -19,7 +20,7 @@
  */
 // Public API.
 @SuppressWarnings("WeakerAccess")
-public class AppWidgetTarget extends SimpleTarget<Bitmap> {
+public class AppWidgetTarget extends CustomTarget<Bitmap> {
   private final int[] widgetIds;
   private final ComponentName componentName;
   private final RemoteViews remoteViews;
@@ -122,7 +123,16 @@ private void update() {
   @Override
   public void onResourceReady(@NonNull Bitmap resource,
       @Nullable Transition<? super Bitmap> transition) {
-    this.remoteViews.setImageViewBitmap(this.viewId, resource);
-    this.update();
+    setBitmap(resource);
+  }
+
+  @Override
+  public void onLoadCleared(@Nullable Drawable placeholder) {
+    setBitmap(null);
+  }
+
+  private void setBitmap(@Nullable Bitmap bitmap) {
+    this.remoteViews.setImageViewBitmap(viewId, bitmap);
+    update();
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java
index 393b40cf1..de968de48 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/NotificationTarget.java
@@ -5,6 +5,7 @@
 import android.app.NotificationManager;
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.RemoteViews;
@@ -20,7 +21,7 @@
  */
 // Public API.
 @SuppressWarnings({"WeakerAccess", "unused"})
-public class NotificationTarget extends SimpleTarget<Bitmap> {
+public class NotificationTarget extends CustomTarget<Bitmap> {
   private final RemoteViews remoteViews;
   private final Context context;
   private final int notificationId;
@@ -109,7 +110,16 @@ private void update() {
   @Override
   public void onResourceReady(@NonNull Bitmap resource,
       @Nullable Transition<? super Bitmap> transition) {
-    this.remoteViews.setImageViewBitmap(this.viewId, resource);
+    setBitmap(resource);
+  }
+
+  @Override
+  public void onLoadCleared(@Nullable Drawable placeholder) {
+    setBitmap(null);
+  }
+
+  private void setBitmap(@Nullable Bitmap bitmap) {
+    this.remoteViews.setImageViewBitmap(this.viewId, bitmap);
     this.update();
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
index 903522fc0..32d47160b 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request.target;
 
+import android.graphics.drawable.Drawable;
 import android.os.Handler;
 import android.os.Handler.Callback;
 import android.os.Looper;
@@ -16,7 +17,7 @@
  *
  * @param <Z> The type of resource that will be loaded into memory.
  */
-public final class PreloadTarget<Z> extends SimpleTarget<Z> {
+public final class PreloadTarget<Z> extends CustomTarget<Z> {
   private static final int MESSAGE_CLEAR = 1;
   private static final Handler HANDLER = new Handler(Looper.getMainLooper(), new Callback() {
     @Override
@@ -52,6 +53,11 @@ public void onResourceReady(@NonNull Z resource, @Nullable Transition<? super Z>
     HANDLER.obtainMessage(MESSAGE_CLEAR, this).sendToTarget();
   }
 
+  @Override
+  public void onLoadCleared(@Nullable Drawable placeholder) {
+    // Do nothing, we don't retain a reference to our resource.
+  }
+
   @SuppressWarnings("WeakerAccess")
   @Synthetic void clear() {
     requestManager.clear(this);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
index 9d28c0bd0..758680bca 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
@@ -62,9 +62,9 @@
  * @deprecated Use {@link CustomViewTarget} if loading the content into a view, the download API if
  *     in the background
  *     (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a
- *     {@link CustomTarget} for any specialized use-cases. Using BaseView is unsafe if the
- *     user does not implement {@link #onLoadCleared}, resulting in recycled bitmaps being
- *     referenced from the UI and hard to root-cause crashes.
+ *     {@link CustomTarget} for any specialized use-cases. Using {@link SimpleTarget} or
+ *     {@link BaseTarget} is unsafe if the user does not implement {@link #onLoadCleared}, resulting
+ *     in recycled bitmaps being referenced from the UI and hard to root-cause crashes.
  */
 @Deprecated
 public abstract class SimpleTarget<Z> extends BaseTarget<Z> {
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 9bc6d8b2e..e83e1eafa 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -14,6 +14,7 @@
 import android.view.ViewGroup.LayoutParams;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
+import com.bumptech.glide.R;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Synthetic;
@@ -48,7 +49,7 @@
 public abstract class ViewTarget<T extends View, Z> extends BaseTarget<Z> {
   private static final String TAG = "ViewTarget";
   private static boolean isTagUsedAtLeastOnce;
-  @Nullable private static Integer tagId;
+  private static int tagId = R.id.glide_custom_view_target_tag;
 
   protected final T view;
   private final SizeDeterminer sizeDeterminer;
@@ -57,7 +58,6 @@
   private boolean isClearedByUs;
   private boolean isAttachStateListenerAdded;
 
-
   /**
    * Constructor that defaults {@code waitForLayout} to {@code false}.
    */
@@ -281,21 +281,13 @@ public String toString() {
   }
 
   private void setTag(@Nullable Object tag) {
-    if (tagId == null) {
-      isTagUsedAtLeastOnce = true;
-      view.setTag(tag);
-    } else {
-      view.setTag(tagId, tag);
-    }
+    isTagUsedAtLeastOnce = true;
+    view.setTag(tagId, tag);
   }
 
   @Nullable
   private Object getTag() {
-    if (tagId == null) {
-      return view.getTag();
-    } else {
-      return view.getTag(tagId);
-    }
+    return view.getTag(tagId);
   }
 
   /**
@@ -314,12 +306,16 @@ private Object getTag() {
    *   any view you start a load into to ensure that the static state is removed.
    * </p>
    *
+   * @deprecated Glide uses it's own default tag id, so there's no need to specify your own. This
+   * method will be removed in a future version.
+   *
    * @param tagId The android resource to use.
    */
   // Public API.
   @SuppressWarnings("unused")
+  @Deprecated
   public static void setTagId(int tagId) {
-    if (ViewTarget.tagId != null || isTagUsedAtLeastOnce) {
+    if (isTagUsedAtLeastOnce) {
       throw new IllegalArgumentException("You cannot set the tag id more than once or change"
           + " the tag id after the first request has been made");
     }
diff --git a/library/src/main/java/com/bumptech/glide/util/ViewPreloadSizeProvider.java b/library/src/main/java/com/bumptech/glide/util/ViewPreloadSizeProvider.java
index 90580d544..b54f9f127 100644
--- a/library/src/main/java/com/bumptech/glide/util/ViewPreloadSizeProvider.java
+++ b/library/src/main/java/com/bumptech/glide/util/ViewPreloadSizeProvider.java
@@ -1,11 +1,12 @@
 package com.bumptech.glide.util;
 
+import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
 import com.bumptech.glide.ListPreloader;
+import com.bumptech.glide.request.target.CustomViewTarget;
 import com.bumptech.glide.request.target.SizeReadyCallback;
-import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.request.transition.Transition;
 import java.util.Arrays;
 
@@ -42,7 +43,8 @@ public ViewPreloadSizeProvider() {
   // Public API.
   @SuppressWarnings("WeakerAccess")
   public ViewPreloadSizeProvider(@NonNull View view) {
-    viewTarget = new SizeViewTarget(view, this);
+    viewTarget = new SizeViewTarget(view);
+    viewTarget.getSize(this);
   }
 
   @Nullable
@@ -74,19 +76,29 @@ public void setView(@NonNull View view) {
     if (size != null || viewTarget != null) {
       return;
     }
-    viewTarget = new SizeViewTarget(view, this);
+    viewTarget = new SizeViewTarget(view);
+    viewTarget.getSize(this);
   }
 
-  private static final class SizeViewTarget extends ViewTarget<View, Object> {
-    SizeViewTarget(@NonNull View view, @NonNull SizeReadyCallback callback) {
+  static final class SizeViewTarget extends CustomViewTarget<View, Object> {
+    SizeViewTarget(@NonNull View view) {
       super(view);
-      getSize(callback);
+    }
+
+    @Override
+    protected void onResourceCleared(@Nullable Drawable placeholder) {
+
+    }
+
+    @Override
+    public void onLoadFailed(@Nullable Drawable errorDrawable) {
+
     }
 
     @Override
     public void onResourceReady(@NonNull Object resource,
         @Nullable Transition<? super Object> transition) {
-      // Do nothing
+
     }
   }
 }
diff --git a/library/src/test/java/com/bumptech/glide/request/target/CustomViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/CustomViewTargetTest.java
index 21a15ded9..13b415500 100644
--- a/library/src/test/java/com/bumptech/glide/request/target/CustomViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/CustomViewTargetTest.java
@@ -45,6 +45,7 @@
 import org.robolectric.Shadows;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.TextLayoutMode;
 import org.robolectric.util.ReflectionHelpers;
 
 /**
@@ -56,6 +57,7 @@
  */
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 19, manifest = "build/intermediates/manifests/full/debug/AndroidManifest.xml")
+@TextLayoutMode(value = TextLayoutMode.Mode.LEGACY, issueId = "130378660")
 public class CustomViewTargetTest {
   private ActivityController<Activity> activity;
   private View view;
diff --git a/library/test/build.gradle b/library/test/build.gradle
index 67c391819..8b0823363 100644
--- a/library/test/build.gradle
+++ b/library/test/build.gradle
@@ -48,4 +48,6 @@ android {
         sourceCompatibility JavaVersion.VERSION_1_7
         targetCompatibility JavaVersion.VERSION_1_7
     }
+
+    testOptions.unitTests.includeAndroidResources = true
 }
diff --git a/library/test/gradle.properties b/library/test/gradle.properties
new file mode 100644
index 000000000..9eff84e6c
--- /dev/null
+++ b/library/test/gradle.properties
@@ -0,0 +1 @@
+android.enableUnitTestBinaryResources=true
diff --git a/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java b/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
index 41e8201fb..118a320e5 100644
--- a/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
@@ -7,7 +7,9 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
 import android.util.Log;
+import com.bumptech.glide.Glide.RequestOptionsFactory;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
@@ -41,7 +43,13 @@ public void setUp() {
         new LruArrayPool(),
         new Registry(),
         new ImageViewTargetFactory(),
-        new RequestOptions(),
+        new RequestOptionsFactory() {
+          @NonNull
+          @Override
+          public RequestOptions build() {
+            return new RequestOptions();
+          }
+        },
         transitionOptions,
         /*defaultRequestListeners=*/ Collections.<RequestListener<Object>>emptyList(),
         mock(Engine.class),
diff --git a/library/test/src/test/java/com/bumptech/glide/GlideTest.java b/library/test/src/test/java/com/bumptech/glide/GlideTest.java
index 7efa6b523..e2c42de91 100644
--- a/library/test/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/GlideTest.java
@@ -53,7 +53,7 @@
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
-import com.bumptech.glide.request.target.SimpleTarget;
+import com.bumptech.glide.request.target.CustomTarget;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.transition.Transition;
@@ -687,13 +687,23 @@ public void testByteData() {
 
   @Test
   public void removeFromManagers_afterRequestManagerRemoved_clearsRequest() {
-    target = requestManager.load(mockUri("content://uri")).into(new SimpleTarget<Drawable>() {
-      @Override
-      public void onResourceReady(@NonNull Drawable resource,
-          @Nullable Transition<? super Drawable> transition) {
-        // Do nothing.
-      }
-    });
+    target =
+        requestManager
+            .load(mockUri("content://uri"))
+            .into(
+                new CustomTarget<Drawable>() {
+                  @Override
+                  public void onResourceReady(
+                      @NonNull Drawable resource,
+                      @Nullable Transition<? super Drawable> transition) {
+                    // Do nothing.
+                  }
+                  @Override
+                  public void onLoadCleared(@Nullable Drawable placeholder) {
+                    // Do nothing, we don't retain a reference to our resource.
+                  }
+                });
+
     Request request = Preconditions.checkNotNull(target.getRequest());
 
     requestManager.onDestroy();
diff --git a/library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java b/library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java
index e6c957d27..92960087a 100644
--- a/library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/ListPreloaderTest.java
@@ -370,7 +370,7 @@ public void testItemsArePreloadedWithGlide() {
         preloaderAdapter, preloaderAdapter, 10);
 
     preloader.onScroll(null, 1, 10, 13);
-    assertThat(loadedObjects).containsAllIn(objects);
+    assertThat(loadedObjects).containsAtLeastElementsIn(objects);
   }
 
   private static class ListPreloaderAdapter implements ListPreloader.PreloadModelProvider<Object>,
diff --git a/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java b/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
index 9a60f6f2e..a7b894580 100644
--- a/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
@@ -21,8 +21,7 @@
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
 import com.bumptech.glide.manager.RequestTracker;
-import com.bumptech.glide.request.target.BaseTarget;
-import com.bumptech.glide.request.target.SizeReadyCallback;
+import com.bumptech.glide.request.target.CustomTarget;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.tests.BackgroundUtil;
 import com.bumptech.glide.tests.GlideShadowLooper;
@@ -56,7 +55,7 @@
   private RequestTracker requestTracker;
   private ConnectivityListener connectivityListener;
   private Application context;
-  private BaseTarget<Drawable> target;
+  private CustomTarget<Drawable> target;
 
   @Before
   public void setUp() {
@@ -73,7 +72,7 @@ public ConnectivityMonitor answer(InvocationOnMock invocation) {
           }
         });
 
-    target = new BaseTarget<Drawable>() {
+    target = new CustomTarget<Drawable>() {
       @Override
       public void onResourceReady(@NonNull Drawable resource,
           @Nullable Transition<? super Drawable> transition) {
@@ -81,13 +80,8 @@ public void onResourceReady(@NonNull Drawable resource,
       }
 
       @Override
-      public void getSize(@NonNull SizeReadyCallback cb) {
-        // Empty.
-      }
+      public void onLoadCleared(@Nullable Drawable placeholder) {
 
-      @Override
-      public void removeCallback(@NonNull SizeReadyCallback cb) {
-        // Empty.
       }
     };
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
index 6b7be90f6..68727e648 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
@@ -101,7 +101,7 @@ public void get_withEmptyPool_returnsExactArray() {
   public void get_withPoolContainingLargerArray_returnsLargerArray() {
     byte[] expected = new byte[MAX_PUT_SIZE];
     pool.put(expected);
-    assertThat(pool.get(MAX_PUT_SIZE - 1, byte[].class)).isSameAs(expected);
+    assertThat(pool.get(MAX_PUT_SIZE - 1, byte[].class)).isSameInstanceAs(expected);
   }
 
   @Test
@@ -115,7 +115,7 @@ public void get_withPoolLessThanHalfFull_returnsFromPools() {
     int size = MAX_SIZE / 2;
     byte[] expected = new byte[size];
     pool.put(expected);
-    assertThat(pool.get(1, byte[].class)).isSameAs(expected);
+    assertThat(pool.get(1, byte[].class)).isSameInstanceAs(expected);
   }
 
   @Test
@@ -165,7 +165,7 @@ public void getExact_withPoolContainingSmallerArray_returnsExactArray() {
   public void getExact_withPoolContainingExactArray_returnsArray() {
     byte[] expected = new byte[MAX_PUT_SIZE];
     pool.put(expected);
-    assertThat(pool.getExact(MAX_PUT_SIZE, byte[].class)).isSameAs(expected);
+    assertThat(pool.getExact(MAX_PUT_SIZE, byte[].class)).isSameInstanceAs(expected);
   }
 
   @Test
@@ -174,7 +174,7 @@ public void put_withArrayMoreThanHalfPoolSize_doesNotRetainArray() {
     byte[] toPut = new byte[targetSize];
     pool.put(toPut);
     assertThat(pool.getCurrentSize()).isEqualTo(0);
-    assertThat(pool.get(targetSize, byte[].class)).isNotSameAs(toPut);
+    assertThat(pool.get(targetSize, byte[].class)).isNotSameInstanceAs(toPut);
   }
 
   private void testTrimMemory(int fillSize, int trimLevel, int expectedSize) {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java
index 1ad62cac2..3f698e8ab 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResourceTest.java
@@ -65,7 +65,7 @@ public void recycle_doesNotRecycleWrappedBitmap() {
   @Test
   public void get_returnsDrawableContainingWrappedBitmap() {
     BitmapDrawable drawable = resource.get();
-    assertThat(drawable.getBitmap()).isSameAs(bitmap);
+    assertThat(drawable.getBitmap()).isSameInstanceAs(bitmap);
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
index 58b6557f6..0d7e83530 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
@@ -120,7 +120,7 @@ public void getScaledFrameAtTime() throws IOException {
     when(retriever.getScaledFrameAtTime(-1, MediaMetadataRetriever.OPTION_CLOSEST_SYNC, 100, 100))
         .thenReturn(expected);
 
-    assertThat(decoder.decode(resource, 100, 100, options).get()).isSameAs(expected);
+    assertThat(decoder.decode(resource, 100, 100, options).get()).isSameInstanceAs(expected);
   }
 
   @Test
@@ -131,7 +131,7 @@ public void decodeFrame_withTargetSizeOriginal_onApi27_doesNotThrow() throws IOE
 
     verify(retriever, never()).getScaledFrameAtTime(anyLong(), anyInt(), anyInt(), anyInt());
     assertThat(decoder.decode(resource, Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL, options).get())
-        .isSameAs(expected);
+        .isSameInstanceAs(expected);
   }
 
   @Test
@@ -143,7 +143,7 @@ public void decodeFrame_withTargetSizeOriginalWidthOnly_onApi27_doesNotThrow()
 
     verify(retriever, never()).getScaledFrameAtTime(anyLong(), anyInt(), anyInt(), anyInt());
     assertThat(decoder.decode(resource, Target.SIZE_ORIGINAL, 100, options).get())
-        .isSameAs(expected);
+        .isSameInstanceAs(expected);
   }
 
   @Test
@@ -155,6 +155,6 @@ public void decodeFrame_withTargetSizeOriginalHeightOnly_onApi27_doesNotThrow()
 
     verify(retriever, never()).getScaledFrameAtTime(anyLong(), anyInt(), anyInt(), anyInt());
     assertThat(decoder.decode(resource, 100, Target.SIZE_ORIGINAL, options).get())
-        .isSameAs(expected);
+        .isSameInstanceAs(expected);
   }
 }
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 1fae53bbc..1e18b6556 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -569,7 +569,7 @@ public void testSetColorFilterSetsColorFilterOnPaint() {
     // uses a method that can't be found (PorterDuffColorFilter.getColor).
     ArgumentCaptor<ColorFilter> captor = ArgumentCaptor.forClass(ColorFilter.class);
     verify(paint).setColorFilter(captor.capture());
-    assertThat(captor.getValue()).isSameAs(colorFilter);
+    assertThat(captor.getValue()).isSameInstanceAs(colorFilter);
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
index c7a77bcfd..9cb5b0e21 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
@@ -187,10 +187,11 @@ public void testOnFrameReadyClearsPreviousFrame() {
     // Force the loader to create a real Handler.
     loader = createGifFrameLoader(null);
 
-    DelayTarget previous = mock(DelayTarget.class);
+    DelayTarget previous = newDelayTarget();
     Request previousRequest = mock(Request.class);
-    when(previous.getRequest()).thenReturn(previousRequest);
-    when(previous.getResource()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));
+    previous.setRequest(previousRequest);
+    previous.onResourceReady(
+        Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888), /*transition=*/ null);
 
     DelayTarget current = mock(DelayTarget.class);
     when(current.getResource()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));
@@ -205,10 +206,11 @@ public void testOnFrameReadyWithNullResourceDoesNotClearPreviousFrame() {
     // Force the loader to create a real Handler by passing null.
     loader = createGifFrameLoader(null);
 
-    DelayTarget previous = mock(DelayTarget.class);
+    DelayTarget previous = newDelayTarget();
     Request previousRequest = mock(Request.class);
-    when(previous.getRequest()).thenReturn(previousRequest);
-    when(previous.getResource()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));
+    previous.setRequest(previousRequest);
+    previous.onResourceReady(
+        Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888), null);
 
     DelayTarget current = mock(DelayTarget.class);
     when(current.getResource()).thenReturn(null);
@@ -241,9 +243,9 @@ public void testClearsCompletedLoadOnFrameReadyIfCleared() {
     // Force the loader to create a real Handler by passing null;
     loader = createGifFrameLoader(null);
     loader.clear();
-    DelayTarget delayTarget = mock(DelayTarget.class);
+    DelayTarget delayTarget = newDelayTarget();
     Request request = mock(Request.class);
-    when(delayTarget.getRequest()).thenReturn(request);
+    delayTarget.setRequest(request);
 
     loader.onFrameReady(delayTarget);
 
@@ -354,6 +356,10 @@ public void startFromFirstFrame_withPendingFrame_clearsPendingFrame() {
     verify(callback, times(1)).onFrameReady();
   }
 
+  private DelayTarget newDelayTarget() {
+    return new DelayTarget(handler, /*index=*/ 0, /*targetTime=*/ 0);
+  }
+
   @SuppressWarnings("unchecked")
   private static Target<Bitmap> aTarget() {
     return isA(Target.class);
diff --git a/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
index f6ae534f4..54ce83580 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
@@ -90,12 +90,6 @@ public void testReturnsNullFromGetRequestIfNoRequestSet() {
     assertNull(target.getRequest());
   }
 
-  @Test(expected = IllegalArgumentException.class)
-  public void testThrowsIfViewTagIsNotRequestObject() {
-    view.setTag(new Object());
-    target.getRequest();
-  }
-
   @Test
   public void testCanSetAndRetrieveRequest() {
     target.setRequest(request);
diff --git a/library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java b/library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
index fede54a45..760c5a152 100644
--- a/library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
+++ b/library/test/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
@@ -7,10 +7,10 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.shadows.ShadowLooper;
+import org.robolectric.shadows.ShadowLegacyLooper;
 
 @Implements(Looper.class)
-public class GlideShadowLooper extends ShadowLooper {
+public class GlideShadowLooper extends ShadowLegacyLooper {
   public static MessageQueue queue = mock(MessageQueue.class);
 
   @Implementation
diff --git a/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java b/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
index 5cc8f12ff..222d848b9 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
@@ -12,8 +12,6 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
-// containsExactly does not need its return value checked.
-@SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class ViewPreloadSizeProviderTest {
@@ -39,7 +37,7 @@ public void testReturnsValidSizeFromGetPreloadSizeAfterHasSize() {
     provider.onSizeReady(width, height);
 
     int[] size = provider.getPreloadSize(new Object(), 0, 0);
-    assertThat(size).asList().containsExactly(width, height);
+    assertThat(size).asList().containsExactly(width, height).inOrder();
   }
 
   @Test
@@ -53,7 +51,7 @@ public void testDoesNotObtainSizeFromViewOnceSizeIsSet() {
     provider.setView(view);
 
     int[] size = provider.getPreloadSize(new Object(), 0, 0);
-    assertThat(size).asList().containsExactly(width, height);
+    assertThat(size).asList().containsExactly(width, height).inOrder();
   }
 
   @Test
@@ -66,7 +64,7 @@ public void testCanObtainFixedSizeFromView() {
     provider.setView(view);
 
     int[] size = provider.getPreloadSize(new Object(), 0, 0);
-    assertThat(size).asList().containsExactly(width, height);
+    assertThat(size).asList().containsExactly(width, height).inOrder();
   }
 
   @Test
@@ -90,6 +88,6 @@ public void testCanObtainSizeFromViewWhenGivenViewInConstructor() {
     provider = new ViewPreloadSizeProvider<>(view);
 
     int[] size = provider.getPreloadSize(new Object(), 0, 0);
-    assertThat(size).asList().containsExactly(width, height);
+    assertThat(size).asList().containsExactly(width, height).inOrder();
   }
 }
