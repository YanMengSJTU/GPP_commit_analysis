diff --git a/build.gradle b/build.gradle
index d54f9c4e5..d9423ea2d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -50,6 +50,13 @@ subprojects { project ->
         // modified, so we're not going to worry about cleaning it up.
         if ("gifencoder" != project.getName()) {
           options.compilerArgs \
+                /*
+                 * Treat all warnings as errors.
+                 */ \
+                << "-Werror" \
+                /*
+                 * Enable all warnings.
+                 */ \
                 << "-Xlint:all" \
                 /*
                  * Java expects every annotation to have a processor, but we use
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
index 97348ecc6..3137fdcdb 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
@@ -133,13 +133,17 @@ protected VolleyError parseNetworkError(VolleyError volleyError) {
       if (Log.isLoggable(TAG, Log.DEBUG)) {
         Log.d(TAG, "Volley failed to retrieve response", volleyError);
       }
-      callback.onLoadFailed(volleyError);
+      if (!isCanceled()) {
+        callback.onLoadFailed(volleyError);
+      }
       return super.parseNetworkError(volleyError);
     }
 
     @Override
     protected Response<byte[]> parseNetworkResponse(NetworkResponse response) {
-      callback.onDataReady(new ByteArrayInputStream(response.data));
+      if (!isCanceled()) {
+        callback.onDataReady(new ByteArrayInputStream(response.data));
+      }
       return Response.success(response.data, HttpHeaderParser.parseCacheHeaders(response));
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 2a336aa82..431eddae8 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -30,8 +30,6 @@
 /**
  * A builder class for setting default structural classes for Glide to use.
  */
-// Public API.
-@SuppressWarnings({"unused", "WeakerAccess"})
 public final class GlideBuilder {
   private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions = new ArrayMap<>();
   private Engine engine;
@@ -83,6 +81,8 @@ public GlideBuilder setArrayPool(@Nullable ArrayPool arrayPool) {
    * @param memoryCache The cache to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setMemoryCache(@Nullable MemoryCache memoryCache) {
     this.memoryCache = memoryCache;
@@ -99,6 +99,8 @@ public GlideBuilder setMemoryCache(@Nullable MemoryCache memoryCache) {
    * use {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead.
    * Scheduled to be removed in Glide 4.0.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @Deprecated
   public GlideBuilder setDiskCache(final DiskCache diskCache) {
     return setDiskCache(new DiskCache.Factory() {
@@ -117,6 +119,8 @@ public DiskCache build() {
    * @param diskCacheFactory The disk cache factory to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setDiskCache(@Nullable DiskCache.Factory diskCacheFactory) {
     this.diskCacheFactory = diskCacheFactory;
@@ -160,6 +164,8 @@ public GlideBuilder setResizeExecutor(@Nullable GlideExecutor service) {
    * @see #setDiskCacheExecutor(GlideExecutor)
    * @see GlideExecutor
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setSourceExecutor(@Nullable GlideExecutor service) {
     this.sourceExecutor = service;
@@ -181,6 +187,8 @@ public GlideBuilder setSourceExecutor(@Nullable GlideExecutor service) {
    * @see #setSourceExecutor(GlideExecutor)
    * @see GlideExecutor
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service) {
     this.diskCacheExecutor = service;
@@ -199,6 +207,8 @@ public GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service) {
    * @param service The {@link GlideExecutor} to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setAnimationExecutor(@Nullable GlideExecutor service) {
     this.animationExecutor = service;
@@ -237,6 +247,8 @@ public GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOpt
    * {@link android.graphics.drawable.BitmapDrawable}s, the transition you registered for
    * {@link android.graphics.drawable.BitmapDrawable}s will be used.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public <T> GlideBuilder setDefaultTransitionOptions(
       @NonNull Class<T> clazz, @Nullable TransitionOptions<?, T> options) {
@@ -257,6 +269,8 @@ public GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOpt
    *
    * @deprecated Use {@link #setDefaultRequestOptions(RequestOptions)} instead.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @Deprecated
   public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
     defaultRequestOptions = defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
@@ -272,6 +286,8 @@ public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
    * @param builder The builder to use (will not be modified).
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setMemorySizeCalculator(@NonNull MemorySizeCalculator.Builder builder) {
     return setMemorySizeCalculator(builder.build());
@@ -287,6 +303,8 @@ public GlideBuilder setMemorySizeCalculator(@NonNull MemorySizeCalculator.Builde
    * @param calculator The calculator to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setMemorySizeCalculator(@Nullable MemorySizeCalculator calculator) {
     this.memorySizeCalculator = calculator;
@@ -301,6 +319,8 @@ public GlideBuilder setMemorySizeCalculator(@Nullable MemorySizeCalculator calcu
    * @param factory The factory to use
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setConnectivityMonitorFactory(@Nullable ConnectivityMonitorFactory factory) {
     this.connectivityMonitorFactory = factory;
@@ -332,6 +352,8 @@ public GlideBuilder setConnectivityMonitorFactory(@Nullable ConnectivityMonitorF
    * @param logLevel The log level to use from {@link Log}.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setLogLevel(int logLevel) {
     if (logLevel < Log.VERBOSE || logLevel > Log.ERROR) {
@@ -385,6 +407,8 @@ public GlideBuilder setLogLevel(int logLevel) {
    *
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setIsActiveResourceRetentionAllowed(
       boolean isActiveResourceRetentionAllowed) {
@@ -403,7 +427,7 @@ GlideBuilder setEngine(Engine engine) {
   }
 
   @NonNull
-  public Glide build(@NonNull Context context) {
+  Glide build(@NonNull Context context) {
     if (sourceExecutor == null) {
       sourceExecutor = GlideExecutor.newSourceExecutor();
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index 443304fcc..fb9d7206a 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -52,7 +52,7 @@
         }
       }
     }
-    return !fetchers.isEmpty()
+    return !fetchers.isEmpty() && sourceKey != null
         ? new LoadData<>(sourceKey, new MultiFetcher<>(fetchers, exceptionListPool)) : null;
   }
 
@@ -80,8 +80,10 @@ public String toString() {
     private DataCallback<? super Data> callback;
     @Nullable
     private List<Throwable> exceptions;
+    private boolean isCancelled;
 
-    MultiFetcher(@NonNull List<DataFetcher<Data>> fetchers,
+    MultiFetcher(
+        @NonNull List<DataFetcher<Data>> fetchers,
         @NonNull Pool<List<Throwable>> throwableListPool) {
       this.throwableListPool = throwableListPool;
       Preconditions.checkNotEmpty(fetchers);
@@ -90,7 +92,8 @@ public String toString() {
     }
 
     @Override
-    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
+    public synchronized void loadData(
+        @NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       this.priority = priority;
       this.callback = callback;
       exceptions = throwableListPool.acquire();
@@ -98,7 +101,7 @@ public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super D
     }
 
     @Override
-    public void cleanup() {
+    public synchronized void cleanup() {
       if (exceptions != null) {
         throwableListPool.release(exceptions);
       }
@@ -109,7 +112,8 @@ public void cleanup() {
     }
 
     @Override
-    public void cancel() {
+    public synchronized void cancel() {
+      isCancelled = true;
       for (DataFetcher<Data> fetcher : fetchers) {
         fetcher.cancel();
       }
@@ -128,7 +132,11 @@ public DataSource getDataSource() {
     }
 
     @Override
-    public void onDataReady(@Nullable Data data) {
+    public synchronized void onDataReady(@Nullable Data data) {
+      if (isCancelled) {
+        return;
+      }
+
       if (data != null) {
         callback.onDataReady(data);
       } else {
@@ -137,12 +145,20 @@ public void onDataReady(@Nullable Data data) {
     }
 
     @Override
-    public void onLoadFailed(@NonNull Exception e) {
+    public synchronized void onLoadFailed(@NonNull Exception e) {
+      if (isCancelled) {
+        return;
+      }
+
       Preconditions.checkNotNull(exceptions).add(e);
       startNextOrFail();
     }
 
     private void startNextOrFail() {
+      if (isCancelled) {
+        return;
+      }
+
       if (currentIndex < fetchers.size() - 1) {
         currentIndex++;
         loadData(priority, callback);
