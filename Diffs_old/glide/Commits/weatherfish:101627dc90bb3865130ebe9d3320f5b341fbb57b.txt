diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
index 38cd129af..aca220c91 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
@@ -6,6 +6,7 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
+import com.bumptech.glide.util.Synthetic;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.Response;
@@ -24,8 +25,8 @@
   private static final String TAG = "OkHttpFetcher";
   private final OkHttpClient client;
   private final GlideUrl url;
-  private InputStream stream;
-  private ResponseBody responseBody;
+  @Synthetic InputStream stream;
+  @Synthetic ResponseBody responseBody;
 
   public OkHttpStreamFetcher(OkHttpClient client, GlideUrl url) {
     this.client = client;
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
index f6b57f87d..c08955f7b 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
@@ -7,6 +7,7 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
+import com.bumptech.glide.util.Synthetic;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
@@ -22,8 +23,8 @@
   private static final String TAG = "OkHttpFetcher";
   private final Call.Factory client;
   private final GlideUrl url;
-  private InputStream stream;
-  private ResponseBody responseBody;
+  @Synthetic InputStream stream;
+  @Synthetic ResponseBody responseBody;
   private volatile Call call;
 
   public OkHttpStreamFetcher(Call.Factory client, GlideUrl url) {
diff --git a/library/pmd-ruleset.xml b/library/pmd-ruleset.xml
index 01bb11a73..76249e191 100644
--- a/library/pmd-ruleset.xml
+++ b/library/pmd-ruleset.xml
@@ -35,4 +35,24 @@
     </rule>
 
 
+    <!--Overrides default check to avoid violation when @Synthetic annotation is present-->
+    <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"
+          message="Document empty constructor">
+
+        <properties>
+            <property name="xpath">
+                <value>
+                    <![CDATA[
+//ConstructorDeclaration[@Private='false'][count(BlockStatement) = 0 and
+($ignoreExplicitConstructorInvocation = 'true' or not(ExplicitConstructorInvocation)) and @containsComment = 'false'
+ and not(../Annotation/MarkerAnnotation/Name[@Image='Synthetic'])]
+ ]]>
+                </value>
+            </property>
+
+        </properties>
+
+    </rule>
+
+
 </ruleset>
diff --git a/library/src/main/java/com/bumptech/glide/ListPreloader.java b/library/src/main/java/com/bumptech/glide/ListPreloader.java
index 4491beae8..ddaae41d7 100644
--- a/library/src/main/java/com/bumptech/glide/ListPreloader.java
+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java
@@ -5,6 +5,7 @@
 import com.bumptech.glide.request.target.BaseTarget;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.util.List;
 import java.util.Queue;
@@ -210,8 +211,11 @@ public PreloadTarget next(int width, int height) {
   }
 
   private static class PreloadTarget extends BaseTarget<Object> {
-    private int photoHeight;
-    private int photoWidth;
+    @Synthetic int photoHeight;
+    @Synthetic int photoWidth;
+
+    @Synthetic
+    PreloadTarget() { }
 
     @Override
     public void onResourceReady(Object resource, Transition<? super Object> transition) {
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index cdbd7424f..8c6876c05 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -28,6 +28,7 @@
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.io.File;
 
@@ -51,7 +52,7 @@
           .skipMemoryCache(true);
 
   private final Glide glide;
-  private final Lifecycle lifecycle;
+  @Synthetic final Lifecycle lifecycle;
   private final RequestTracker requestTracker;
   private final RequestManagerTreeNode treeNode;
   private final TargetTracker targetTracker = new TargetTracker();
diff --git a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
index 637c39e15..5dab84909 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
@@ -8,6 +8,7 @@
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Synthetic;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
@@ -164,6 +165,10 @@ public DataSource getDataSource() {
   }
 
   private static class DefaultHttpUrlConnectionFactory implements HttpUrlConnectionFactory {
+
+    @Synthetic
+    DefaultHttpUrlConnectionFactory() { }
+
     @Override
     public HttpURLConnection build(URL url) throws IOException {
       return (HttpURLConnection) url.openConnection();
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index ec894778c..c00824e23 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -15,6 +15,7 @@
 import com.bumptech.glide.load.data.DataRewinder;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.pool.FactoryPools.Poolable;
 import com.bumptech.glide.util.pool.StateVerifier;
 import java.util.ArrayList;
@@ -36,22 +37,22 @@
     Poolable {
   private static final String TAG = "DecodeJob";
 
-  private final DecodeHelper<R> decodeHelper = new DecodeHelper<>();
+  @Synthetic final DecodeHelper<R> decodeHelper = new DecodeHelper<>();
   private final List<Exception> exceptions = new ArrayList<>();
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
   private final DiskCacheProvider diskCacheProvider;
   private final Pools.Pool<DecodeJob<?>> pool;
-  private final DeferredEncodeManager<?> deferredEncodeManager = new DeferredEncodeManager<>();
+  @Synthetic final DeferredEncodeManager<?> deferredEncodeManager = new DeferredEncodeManager<>();
   private final ReleaseManager releaseManager = new ReleaseManager();
 
   private GlideContext glideContext;
-  private Key signature;
+  @Synthetic Key signature;
   private Priority priority;
   private EngineKey loadKey;
-  private int width;
-  private int height;
-  private DiskCacheStrategy diskCacheStrategy;
-  private Options options;
+  @Synthetic int width;
+  @Synthetic int height;
+  @Synthetic DiskCacheStrategy diskCacheStrategy;
+  @Synthetic Options options;
   private Callback<R> callback;
   private int order;
   private Stage stage;
@@ -59,7 +60,7 @@
   private long startFetchTime;
 
   private Thread currentThread;
-  private Key currentSourceKey;
+  @Synthetic Key currentSourceKey;
   private Key currentAttemptingKey;
   private Object currentData;
   private DataSource currentDataSource;
@@ -524,6 +525,9 @@ public DecodeCallback(DataSource dataSource) {
     private boolean isEncodeComplete;
     private boolean isFailed;
 
+    @Synthetic
+    ReleaseManager() { }
+
     synchronized boolean release(boolean isRemovedFromQueue) {
       isReleased = true;
       return isComplete(isRemovedFromQueue);
@@ -559,6 +563,9 @@ private boolean isComplete(boolean isRemovedFromQueue) {
     private ResourceEncoder<Z> encoder;
     private LockedResource<Z> toEncode;
 
+    @Synthetic
+    DeferredEncodeManager() { }
+
     // We just need the encoder and resource type to match, which this will enforce.
     @SuppressWarnings("unchecked")
     <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index 878c63acc..fdeff2601 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools;
 import java.lang.ref.ReferenceQueue;
@@ -356,7 +357,7 @@ public DiskCache getDiskCache() {
   }
 
   private static class ResourceWeakReference extends WeakReference<EngineResource<?>> {
-    private final Key key;
+    @Synthetic final Key key;
 
     public ResourceWeakReference(Key key, EngineResource<?> r,
         ReferenceQueue<? super EngineResource<?>> q) {
@@ -390,8 +391,8 @@ public boolean queueIdle() {
 
   // Visible for testing.
   static class DecodeJobFactory {
-    private final DecodeJob.DiskCacheProvider diskCacheProvider;
-    private final Pools.Pool<DecodeJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,
+    @Synthetic final DecodeJob.DiskCacheProvider diskCacheProvider;
+    @Synthetic final Pools.Pool<DecodeJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,
         new FactoryPools.Factory<DecodeJob<?>>() {
           @Override
           public DecodeJob<?> create() {
@@ -441,11 +442,11 @@ public boolean queueIdle() {
 
   // Visible for testing.
   static class EngineJobFactory {
-    private final GlideExecutor diskCacheExecutor;
-    private final GlideExecutor sourceExecutor;
-    private final GlideExecutor sourceUnlimitedExecutor;
-    private final EngineJobListener listener;
-    private final Pools.Pool<EngineJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,
+    @Synthetic final GlideExecutor diskCacheExecutor;
+    @Synthetic final GlideExecutor sourceExecutor;
+    @Synthetic final GlideExecutor sourceUnlimitedExecutor;
+    @Synthetic final EngineJobListener listener;
+    @Synthetic final Pools.Pool<EngineJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,
         new FactoryPools.Factory<EngineJob<?>>() {
           @Override
           public EngineJob<?> create() {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 43727c8b3..6c193eafc 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -8,6 +8,7 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools.Poolable;
 import com.bumptech.glide.util.pool.StateVerifier;
@@ -162,7 +163,8 @@ boolean isCancelled() {
     return isCancelled;
   }
 
-  private void handleResultOnMainThread() {
+  @Synthetic
+  void handleResultOnMainThread() {
     stateVerifier.throwIfRecycled();
     if (isCancelled) {
       resource.recycle();
@@ -193,7 +195,8 @@ private void handleResultOnMainThread() {
     release(false /*isRemovedFromQueue*/);
   }
 
-  private void handleCancelledOnMainThread() {
+  @Synthetic
+  void handleCancelledOnMainThread() {
     stateVerifier.throwIfRecycled();
     if (!isCancelled) {
       throw new IllegalStateException("Not cancelled");
@@ -243,7 +246,8 @@ public void reschedule(DecodeJob<?> job) {
     }
   }
 
-  private void handleExceptionOnMainThread() {
+  @Synthetic
+  void handleExceptionOnMainThread() {
     stateVerifier.throwIfRecycled();
     if (isCancelled) {
       release(false /*isRemovedFromQueue*/);
@@ -280,6 +284,9 @@ public StateVerifier getVerifier() {
 
   private static class MainThreadCallback implements Handler.Callback {
 
+    @Synthetic
+    MainThreadCallback() { }
+
     @Override
     public boolean handleMessage(Message message) {
       EngineJob<?> job = (EngineJob<?>) message.obj;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
index a953a77ec..5ee05aca7 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.support.v4.util.Pools;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
 
@@ -32,7 +33,8 @@
     return result;
   }
 
-  private LockedResource() { }
+  @Synthetic
+  LockedResource() { }
 
   private void init(Resource<Z> toWrap) {
     isRecycled = false;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
index 3ef9c6fb2..6d8d365b8 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
@@ -3,6 +3,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 
 /**
@@ -32,6 +33,9 @@ public void recycle(Resource<?> resource) {
   private static class ResourceRecyclerCallback implements Handler.Callback {
     public static final int RECYCLE_RESOURCE = 1;
 
+    @Synthetic
+    ResourceRecyclerCallback() { }
+
     @Override
     public boolean handleMessage(Message message) {
       if (message.what == RECYCLE_RESOURCE) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategy.java
index 422f72983..f9448856b 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategy.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 
 /**
@@ -53,7 +54,8 @@ private static String getBitmapString(Bitmap bitmap) {
     return getBitmapString(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());
   }
 
-  private static String getBitmapString(int width, int height, Bitmap.Config config) {
+  @Synthetic
+  static String getBitmapString(int width, int height, Bitmap.Config config) {
     return "[" + width + "x" + height + "], " + config;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
index edec811f1..d190a475f 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.support.annotation.Nullable;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -119,7 +120,7 @@ private void makeTail(LinkedEntry<K, V> entry) {
   }
 
   private static class LinkedEntry<K, V> {
-    private final K key;
+    @Synthetic final K key;
     private List<V> values;
     LinkedEntry<K, V> next;
     LinkedEntry<K, V> prev;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
index c5d6fdbbc..87301f1ca 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
@@ -4,6 +4,7 @@
 import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.NavigableMap;
@@ -204,6 +205,9 @@ int getCurrentSize() {
 
   private static final class KeyPool extends BaseKeyPool<Key> {
 
+    @Synthetic
+    KeyPool() { }
+
     Key get(int size, Class<?> arrayClass) {
       Key result = get();
       result.init(size, arrayClass);
@@ -218,7 +222,7 @@ protected Key create() {
 
   private static final class Key implements Poolable {
     private final KeyPool pool;
-    private int size;
+    @Synthetic int size;
     private Class<?> arrayClass;
 
     Key(KeyPool pool) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index 780bedeef..69eaa843a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -8,6 +8,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;
+import com.bumptech.glide.util.Synthetic;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
@@ -291,6 +292,10 @@ public void remove(Bitmap bitmap) {
   }
 
   private static class NullBitmapTracker implements BitmapTracker {
+
+    @Synthetic
+    NullBitmapTracker() { }
+
     @Override
     public void add(Bitmap bitmap) {
       // Do nothing.
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
index 0a1a6e43b..05964ba05 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.support.annotation.Nullable;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.util.HashMap;
 import java.util.Map;
@@ -178,7 +179,7 @@ protected Key create() {
   static final class Key implements Poolable {
     private final KeyPool pool;
 
-    private int size;
+    @Synthetic int size;
     private Bitmap.Config config;
 
     public Key(KeyPool pool) {
@@ -224,7 +225,8 @@ public int hashCode() {
     }
   }
 
-  private static String getBitmapString(int size, Bitmap.Config config) {
+  @Synthetic
+  static String getBitmapString(int size, Bitmap.Config config) {
     return "[" + size + "](" + config + ")";
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
index 9e8903f31..205ec7e4f 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.support.annotation.Nullable;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.util.TreeMap;
 
@@ -100,7 +101,8 @@ private static String getBitmapString(Bitmap bitmap) {
     return getBitmapString(size);
   }
 
-  private static String getBitmapString(int size) {
+  @Synthetic
+  static String getBitmapString(int size) {
     return "[" + size + "]";
   }
 
@@ -122,7 +124,7 @@ protected Key create() {
   // Visible for testing.
   static final class Key implements Poolable {
     private final KeyPool pool;
-    private int size;
+    @Synthetic int size;
 
     Key(KeyPool pool) {
       this.pool = pool;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
index 821afe32b..13318a8fc 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
@@ -2,6 +2,7 @@
 
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayDeque;
 import java.util.HashMap;
 import java.util.Map;
@@ -64,12 +65,18 @@ void release(Key key) {
   private static class WriteLock  {
     final Lock lock = new ReentrantLock();
     int interestedThreads;
+
+    @Synthetic
+    WriteLock() { }
   }
 
   private static class WriteLockPool {
     private static final int MAX_POOL_SIZE = 10;
     private final Queue<WriteLock> pool = new ArrayDeque<>();
 
+    @Synthetic
+    WriteLockPool() { }
+
     WriteLock obtain() {
       WriteLock result;
       synchronized (pool) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
index fc0c61364..2a81c4d9a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
@@ -3,6 +3,7 @@
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.util.LruCache;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
@@ -54,7 +55,7 @@ private String calculateHexStringDigest(Key key) {
 
   private static final class PoolableDigestContainer implements FactoryPools.Poolable {
 
-    private final MessageDigest messageDigest;
+    @Synthetic final MessageDigest messageDigest;
     private final StateVerifier stateVerifier = StateVerifier.newInstance();
 
     PoolableDigestContainer(MessageDigest messageDigest) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
index 80d17b4bf..b79e11178 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
@@ -4,6 +4,7 @@
 import android.os.StrictMode.ThreadPolicy;
 import android.support.annotation.NonNull;
 import android.util.Log;
+import com.bumptech.glide.util.Synthetic;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.util.concurrent.BlockingQueue;
@@ -316,8 +317,8 @@ protected void handle(Throwable t) {
    */
   private static final class DefaultThreadFactory implements ThreadFactory {
     private final String name;
-    private final UncaughtThrowableStrategy uncaughtThrowableStrategy;
-    private final boolean preventNetworkOperations;
+    @Synthetic final UncaughtThrowableStrategy uncaughtThrowableStrategy;
+    @Synthetic final boolean preventNetworkOperations;
     private int threadNum;
 
     DefaultThreadFactory(String name, UncaughtThrowableStrategy uncaughtThrowableStrategy,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
index 867c745e3..a2f92a9db 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
@@ -9,6 +9,7 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.resource.bitmap.BitmapResource;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.security.MessageDigest;
 import java.util.HashSet;
@@ -141,6 +142,9 @@ private long getNextDelay() {
 
   private static class UniqueKey implements Key {
 
+    @Synthetic
+    UniqueKey() { }
+
     @Override
     public void updateDiskCacheKey(MessageDigest messageDigest) {
       throw new UnsupportedOperationException();
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
index 1acbd25c3..77923f2c4 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.support.v4.util.Pools.Pool;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -93,6 +94,9 @@ public ModelLoaderRegistry(Pool<List<Exception>> exceptionListPool) {
   private static class ModelLoaderCache {
     private final Map<Class<?>, Entry<?>> cachedModelLoaders = new HashMap<>();
 
+    @Synthetic
+    ModelLoaderCache() { }
+
     public void clear() {
       cachedModelLoaders.clear();
     }
@@ -111,7 +115,7 @@ public void clear() {
     }
 
     private static class Entry<Model> {
-      private final List<ModelLoader<Model, ?>> loaders;
+      @Synthetic final List<ModelLoader<Model, ?>> loaders;
 
       public Entry(List<ModelLoader<Model, ?>> loaders) {
         this.loaders = loaders;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
index 87969e333..4c63136a5 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
@@ -5,6 +5,7 @@
 import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -163,8 +164,8 @@ public MultiModelLoaderFactory(Pool<List<Exception>> exceptionListPool) {
 
   private static class Entry<Model, Data> {
     private final Class<Model> modelClass;
-    private final Class<Data> dataClass;
-    private final ModelLoaderFactory<Model, Data> factory;
+    @Synthetic final Class<Data> dataClass;
+    @Synthetic final ModelLoaderFactory<Model, Data> factory;
 
     public Entry(Class<Model> modelClass, Class<Data> dataClass,
         ModelLoaderFactory<Model, Data> factory) {
@@ -191,6 +192,9 @@ public boolean handles(Class<?> modelClass) {
 
   private static class EmptyModelLoader implements ModelLoader<Object, Object> {
 
+    @Synthetic
+    EmptyModelLoader() { }
+
     @Nullable
     @Override
     public LoadData<Object> buildLoadData(Object o, int width, int height, Options options) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
index c5c293483..27e401045 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import com.bumptech.glide.util.Synthetic;
+
 /**
  * Indicates the algorithm to use when downsampling images.
  */
@@ -99,6 +101,9 @@ public abstract SampleSizeRounding getSampleSizeRounding(int sourceWidth, int so
 
   private static class FitCenter extends DownsampleStrategy {
 
+    @Synthetic
+    FitCenter() { }
+
     @Override
     public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth,
         int requestedHeight) {
@@ -115,7 +120,11 @@ public SampleSizeRounding getSampleSizeRounding(int sourceWidth, int sourceHeigh
   }
 
   private static class CenterOutside extends DownsampleStrategy {
-     @Override
+
+    @Synthetic
+    CenterOutside() { }
+
+    @Override
     public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth,
         int requestedHeight) {
       float widthPercentage = requestedWidth / (float) sourceWidth;
@@ -132,6 +141,9 @@ public SampleSizeRounding getSampleSizeRounding(int sourceWidth, int sourceHeigh
 
   private static class AtLeast extends DownsampleStrategy {
 
+    @Synthetic
+    AtLeast() { }
+
     @Override
     public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth,
         int requestedHeight) {
@@ -147,6 +159,10 @@ public SampleSizeRounding getSampleSizeRounding(int sourceWidth, int sourceHeigh
   }
 
   private static class AtMost extends DownsampleStrategy {
+
+    @Synthetic
+    AtMost() { }
+
     @Override
     public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth,
         int requestedHeight) {
@@ -166,7 +182,11 @@ public SampleSizeRounding getSampleSizeRounding(int sourceWidth, int sourceHeigh
   }
 
   private static class None extends DownsampleStrategy {
-     @Override
+
+    @Synthetic
+    None() { }
+
+    @Override
     public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth,
         int requestedHeight) {
       return 1f;
@@ -181,6 +201,9 @@ public SampleSizeRounding getSampleSizeRounding(int sourceWidth, int sourceHeigh
 
   private static class CenterInside extends DownsampleStrategy {
 
+    @Synthetic
+    CenterInside() { }
+
     @Override
     public float getScaleFactor(int sourceWidth, int sourceHeight, int requestedWidth,
         int requestedHeight) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
index 75df7676f..cbfb156a8 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
@@ -17,6 +17,7 @@
 import android.util.Log;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.Lock;
@@ -454,6 +455,10 @@ static void initializeMatrixForRotation(int exifOrientation, Matrix matrix) {
   }
 
   private static final class NoLock implements Lock {
+
+    @Synthetic
+    NoLock() { }
+
     @Override
     public void lock() {
       // do nothing
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
index b58cc3bb5..61ef285c5 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
@@ -21,6 +21,7 @@
 import com.bumptech.glide.request.target.SimpleTarget;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
@@ -33,7 +34,7 @@
   private final Handler handler;
   private final Context context;
   private final List<FrameCallback> callbacks = new ArrayList<>();
-  private final RequestManager requestManager;
+  @Synthetic final RequestManager requestManager;
   private final BitmapPool bitmapPool;
 
   private boolean isRunning = false;
@@ -245,6 +246,9 @@ void onFrameReady(DelayTarget delayTarget) {
     public static final int MSG_DELAY = 1;
     public static final int MSG_CLEAR = 2;
 
+    @Synthetic
+    FrameLoaderCallback() { }
+
     @Override
     public boolean handleMessage(Message msg) {
       if (msg.what == MSG_DELAY) {
@@ -262,7 +266,7 @@ public boolean handleMessage(Message msg) {
   // Visible for testing.
   static class DelayTarget extends SimpleTarget<Bitmap> {
     private final Handler handler;
-    private final int index;
+    @Synthetic final int index;
     private final long targetTime;
     private Bitmap resource;
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
index c0a0bdb42..b632c35ad 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -75,7 +76,7 @@
   private static final class Entry<Z, R> {
     private final Class<Z> fromClass;
     private final Class<R> toClass;
-    private final ResourceTranscoder<Z, R> transcoder;
+    @Synthetic final ResourceTranscoder<Z, R> transcoder;
 
     Entry(Class<Z> fromClass, Class<R> toClass, ResourceTranscoder<Z, R> transcoder) {
       this.fromClass = fromClass;
diff --git a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
index d191bda2a..d2967bffa 100644
--- a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
@@ -6,15 +6,16 @@
 import android.content.IntentFilter;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * Uses {@link android.net.ConnectivityManager} to identify connectivity changes.
  */
 class DefaultConnectivityMonitor implements ConnectivityMonitor {
   private final Context context;
-  private final ConnectivityListener listener;
+  @Synthetic final ConnectivityListener listener;
 
-  private boolean isConnected;
+  @Synthetic boolean isConnected;
   private boolean isRegistered;
 
   private final BroadcastReceiver connectivityReceiver = new BroadcastReceiver() {
@@ -53,7 +54,8 @@ private void unregister() {
     isRegistered = false;
   }
 
-  private boolean isConnected(Context context) {
+  @Synthetic
+  boolean isConnected(Context context) {
     ConnectivityManager connectivityManager =
         (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
     NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index 47af60d59..265550362 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -8,6 +8,7 @@
 import android.support.annotation.Nullable;
 import android.util.Log;
 import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.util.Synthetic;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
@@ -222,6 +223,10 @@ public String toString() {
   }
 
   private class FragmentRequestManagerTreeNode implements RequestManagerTreeNode {
+
+    @Synthetic
+    FragmentRequestManagerTreeNode() { }
+
     @Override
     public Set<RequestManager> getDescendants() {
       Set<RequestManagerFragment> descendantFragments = getDescendantRequestManagerFragments();
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index f8a8498a1..611747452 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -7,6 +7,7 @@
 import android.support.v4.app.FragmentActivity;
 import android.util.Log;
 import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.util.Synthetic;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
@@ -202,6 +203,10 @@ public String toString() {
   }
 
   private class SupportFragmentRequestManagerTreeNode implements RequestManagerTreeNode {
+
+    @Synthetic
+    SupportFragmentRequestManagerTreeNode() { }
+
     @Override
     public Set<RequestManager> getDescendants() {
       Set<SupportRequestManagerFragment> descendantFragments =
diff --git a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
index b348a3d6a..29bd3af62 100644
--- a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
@@ -2,6 +2,7 @@
 
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Encoder;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -29,7 +30,7 @@
 
   private static final class Entry<T> {
     private final Class<T> dataClass;
-    private final Encoder<T> encoder;
+    @Synthetic final Encoder<T> encoder;
 
     public Entry(Class<T> dataClass, Encoder<T> encoder) {
       this.dataClass = dataClass;
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
index 153b81d84..877114e90 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.provider;
 
 import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -50,8 +51,8 @@
 
   private static class Entry<T, R> {
     private final Class<T> dataClass;
-    private final Class<R> resourceClass;
-    private final ResourceDecoder<T, R> decoder;
+    @Synthetic final Class<R> resourceClass;
+    @Synthetic final ResourceDecoder<T, R> decoder;
 
     public Entry(Class<T> dataClass, Class<R> resourceClass, ResourceDecoder<T, R> decoder) {
       this.dataClass = dataClass;
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
index 698a308ab..e096cc759 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
@@ -2,6 +2,7 @@
 
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.ResourceEncoder;
+import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -33,14 +34,15 @@
 
   private static final class Entry<T> {
     private final Class<T> resourceClass;
-    private final ResourceEncoder<T> encoder;
+    @Synthetic final ResourceEncoder<T> encoder;
 
     Entry(Class<T> resourceClass, ResourceEncoder<T> encoder) {
       this.resourceClass = resourceClass;
       this.encoder = encoder;
     }
 
-    private boolean handles(Class<?> resourceClass) {
+    @Synthetic
+    boolean handles(Class<?> resourceClass) {
       return this.resourceClass.isAssignableFrom(resourceClass);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 3c2a63a05..c0dba86d6 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.request.transition.TransitionFactory;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
@@ -136,7 +137,8 @@
     return request;
   }
 
-  private SingleRequest() {
+  @Synthetic
+  SingleRequest() {
     // just create, instances are reused with recycle/init
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java b/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
index 3b6914443..81942e412 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
@@ -11,6 +11,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A wrapper drawable to square the wrapped drawable so that it expands to fill a square with
@@ -195,8 +196,8 @@ public ConstantState getConstantState() {
 
   static class State extends ConstantState {
     private final ConstantState wrapped;
-    private final int width;
-    private final int height;
+    @Synthetic final int width;
+    @Synthetic final int height;
 
     State(State other) {
       this(other.wrapped, other.width, other.height);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 37f0b01b5..2ffb77553 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -15,6 +15,7 @@
 import android.view.WindowManager;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.List;
@@ -184,7 +185,8 @@ private void notifyCbs(int width, int height) {
       }
     }
 
-    private void checkCurrentDimens() {
+    @Synthetic
+    void checkCurrentDimens() {
       if (cbs.isEmpty()) {
         return;
       }
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
index 2417f8ab6..d5a1c1e33 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.request.transition;
 
 import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A simple {@link Transition} that performs no actions.
@@ -9,7 +10,7 @@
  * {@link com.bumptech.glide.request.target.Target}.
  */
 public class NoTransition<R> implements Transition<R> {
-  private static final NoTransition<?> NO_ANIMATION = new NoTransition<Object>();
+  @Synthetic static final NoTransition<?> NO_ANIMATION = new NoTransition<Object>();
   @SuppressWarnings("rawtypes")
   private static final TransitionFactory<?> NO_ANIMATION_FACTORY = new NoAnimationFactory();
 
diff --git a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
index a3f5c3de0..788901575 100644
--- a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
+++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
@@ -142,9 +142,9 @@ private static SafeArray getSafeArray(ByteBuffer byteBuffer) {
   }
 
   static final class SafeArray {
-    private final int offset;
-    private final int limit;
-    private final byte[] data;
+    @Synthetic final int offset;
+    @Synthetic final int limit;
+    @Synthetic final byte[] data;
 
     public SafeArray(byte[] data, int offset, int limit) {
       this.data = data;
diff --git a/library/src/main/java/com/bumptech/glide/util/Synthetic.java b/library/src/main/java/com/bumptech/glide/util/Synthetic.java
new file mode 100644
index 000000000..0d1140b04
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/Synthetic.java
@@ -0,0 +1,14 @@
+package com.bumptech.glide.util;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Indicates that target's visibility can be relaxed to avoid synthetic methods.
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target({ElementType.FIELD, ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.TYPE})
+public @interface Synthetic {
+}
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
index ca125699a..7e6577dd3 100644
--- a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
+++ b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.util.pool;
 
+import com.bumptech.glide.util.Synthetic;
+
 /**
  * Verifies that the job is not in the recycled state.
  */
@@ -33,6 +35,9 @@ private StateVerifier() { }
   private static class DefaultStateVerifier extends StateVerifier {
     private volatile boolean isReleased;
 
+    @Synthetic
+    DefaultStateVerifier() { }
+
     @Override
     public void throwIfRecycled() {
       if (isReleased) {
@@ -50,6 +55,9 @@ public void setRecycled(boolean isRecycled) {
     // Keeps track of the stack trace where our state was set to recycled.
     private volatile RuntimeException recycledAtStackTraceException;
 
+    @Synthetic
+    DebugStateVerifier() { }
+
     @Override
     public void throwIfRecycled() {
       if (recycledAtStackTraceException != null) {
