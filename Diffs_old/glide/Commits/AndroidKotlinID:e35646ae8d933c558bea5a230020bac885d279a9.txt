diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index 9b7a17feb..bc0bf1f00 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -389,7 +389,7 @@ private static ParameterSpec getParameter(VariableElement method) {
     }
     Object value = excludedModuleAnnotationValue.getValue();
     if (value instanceof List) {
-      List values = (List) value;
+      List<?> values = (List<?>) value;
       Set<String> result = new HashSet<>(values.size());
       for (Object current : values) {
         Attribute.Class currentClass = (Attribute.Class) current;
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 7e852e18a..63d72a61e 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -21,7 +21,9 @@
 import com.squareup.javapoet.WildcardTypeName;
 import java.io.File;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
@@ -230,7 +232,11 @@ public String apply(VariableElement input) {
     if (methodToOverride.isVarArgs()) {
       builder = builder
           .addModifiers(Modifier.FINAL)
-          .addAnnotation(SafeVarargs.class);
+          .addAnnotation(SafeVarargs.class)
+          .addAnnotation(
+              AnnotationSpec.builder(SuppressWarnings.class)
+                  .addMember("value", "$S", "varargs")
+                  .build());
     }
 
     return builder.build();
@@ -312,7 +318,9 @@ public boolean apply(AnnotationSpec input) {
                     return !input.type.equals(TypeName.get(Override.class))
                         // SafeVarargs can only be applied to final methods. GlideRequest is
                         // non-final to allow for mocking.
-                        && !input.type.equals(TypeName.get(SafeVarargs.class));
+                        && !input.type.equals(TypeName.get(SafeVarargs.class))
+                        // We need to combine warnings below.
+                        && !input.type.equals(TypeName.get(SuppressWarnings.class));
                   }
                 })
                 .toList()
@@ -332,16 +340,48 @@ public boolean apply(AnnotationSpec input) {
         .endControlFlow()
         .addStatement("return this");
 
+    AnnotationSpec suppressWarnings = buildSuppressWarnings(requestOptionMethod);
+    if (suppressWarnings != null) {
+      result.addAnnotation(suppressWarnings);
+    }
+    return result.build();
+  }
+
+  @Nullable
+  private AnnotationSpec buildSuppressWarnings(MethodSpec requestOptionMethod) {
+    Set<String> suppressions = new HashSet<>();
+    if (requestOptionMethod.annotations.contains(
+        AnnotationSpec.builder(SuppressWarnings.class).build())) {
+      for (AnnotationSpec annotation : requestOptionMethod.annotations) {
+        if (annotation.type.equals(TypeName.get(SuppressWarnings.class))) {
+          List<CodeBlock> codeBlocks = annotation.members.get("value");
+          suppressions.addAll(FluentIterable.from(codeBlocks).transform(
+              new Function<CodeBlock, String>() {
+                @Override
+                public String apply(CodeBlock input) {
+                  return input.toString();
+                }
+              }).toSet());
+        }
+      }
+    }
+
     if (requestOptionMethod.annotations.contains(
         AnnotationSpec.builder(SafeVarargs.class).build())) {
-      result.addAnnotation(
-          AnnotationSpec.builder(SuppressWarnings.class)
-              .addMember("value", "$S", "unchecked")
-              .addMember("value", "$S", "varargs")
-              .build());
+      suppressions.add("unchecked");
+      suppressions.add("varargs");
     }
 
-    return result.build();
+    if (suppressions.isEmpty()) {
+      return null;
+    }
+
+    AnnotationSpec.Builder builder = AnnotationSpec.builder(SuppressWarnings.class);
+    for (String suppression : suppressions) {
+      builder.addMember("value", "$S", suppression);
+    }
+
+    return builder.build();
   }
 
   private List<MethodSpec> generateConstructors() {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index ab0cba18a..0cffa7c9a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -211,9 +211,12 @@ public String apply(VariableElement input) {
             .build());
 
     if (methodToOverride.getSimpleName().toString().equals("transforms")) {
-      result.addAnnotation(
-          AnnotationSpec.builder(SafeVarargs.class)
-              .build());
+      result
+          .addAnnotation(SafeVarargs.class)
+          .addAnnotation(
+              AnnotationSpec.builder(SuppressWarnings.class)
+                  .addMember("value", "$S", "varargs")
+                  .build());
     }
 
     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
diff --git a/annotation/compiler/test/build.gradle b/annotation/compiler/test/build.gradle
index 07993bc6c..5ebde6222 100644
--- a/annotation/compiler/test/build.gradle
+++ b/annotation/compiler/test/build.gradle
@@ -16,7 +16,11 @@ dependencies {
     testImplementation "com.squareup:javapoet:${JAVAPOET_VERSION}"
     testImplementation "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}"
     testImplementation "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
-    testImplementation 'com.google.testing.compile:compile-testing:0.12'
+    // Using 0.10 of compile-testing is required for Android Studio to function, but not for the
+    // gradle build. Not yet clear why, but it looks like some kind of version conflict between
+    // javapoet, guava and/or truth.
+    //noinspection GradleDependency
+    testImplementation 'com.google.testing.compile:compile-testing:0.10'
     // Use a stupidly old version of the Android classes jar. This works because we just need to get
     // our generated classes to compile and our generated classes tend to use simple and stable
     // Android APIs. If that changes, we'll need to find an alternative.
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index 1e811710a..b2aced03f 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -493,6 +493,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
index cb416622f..6ddaf2c81 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
@@ -639,6 +639,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index 63d8797c5..e082c19ab 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -496,6 +496,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index 323154817..7dffdd3a8 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index 6f568a0f1..c54db9e3e 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index cc504584d..81b363561 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -639,6 +639,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index b29c470b6..6c6962b80 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -479,6 +479,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
index d3c2e130b..d9e88c535 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
@@ -639,6 +639,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index b876cbe4b..3d3f388db 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index cc504584d..81b363561 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -639,6 +639,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index 78210a92b..bd449e23f 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index 323154817..7dffdd3a8 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 95f08ecd2..d3d533503 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index 323154817..7dffdd3a8 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index 6cd0830a8..d2346da25 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
index 4a001e45a..ff97af38b 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index f9efd03f0..444387326 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index b0fb6d819..6daf49a29 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -496,6 +496,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index 323154817..7dffdd3a8 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index ed6bb7812..89eca39ff 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index cc504584d..81b363561 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -639,6 +639,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 823666b54..fc8c90511 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -488,6 +488,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index cc504584d..81b363561 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -639,6 +639,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index c28a1716e..162142957 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index 323154817..7dffdd3a8 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 5d3a80144..7911b7b97 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index 323154817..7dffdd3a8 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
index 9f96d3b80..3887d0345 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
index 4a001e45a..ff97af38b 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
@@ -652,6 +652,7 @@
   @Override
   @CheckResult
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
     return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
index f9efd03f0..444387326 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
@@ -494,6 +494,7 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
 
   @Override
   @SafeVarargs
+  @SuppressWarnings("varargs")
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java b/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java
index 0a15f5a0d..13de814b2 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java
@@ -16,5 +16,5 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Excludes {
-  Class[] value();
+  Class<?>[] value();
 }
diff --git a/build.gradle b/build.gradle
index 54d487860..1667c5696 100644
--- a/build.gradle
+++ b/build.gradle
@@ -22,16 +22,45 @@ if (JavaVersion.current().isJava8Compatible()) {
     }
 }
 
-subprojects {
+subprojects { project ->
     tasks.withType(JavaCompile) {
         sourceCompatibility = 1.7
         targetCompatibility = 1.7
+
+        options.bootClasspath = "${System.getProperty('java.home')}/lib/rt.jar"
+        // gifencoder is a legacy project that has a ton of warnings and is basically never
+        // modified, so we're not going to worry about cleaning it up.
+        if ("gifencoder" != project.getName()) {
+          options.compilerArgs \
+                << "-Xlint:all" << "-Werror" \
+                /*
+                 * Java expects every annotation to have a processor, but we use
+                 * javax.annotation.Nullable, which doesn't have one.
+                 */ \
+                << "-Xlint:-processing" \
+                /*
+                 * See https://github.com/google/dagger/issues/945
+                 * and https://bugs.openjdk.java.net/browse/JDK-8190452
+                 */ \
+                << "-Xlint:-classfile"
+        }
     }
 
     // Avoid issues like #2452.
     tasks.withType(Jar) {
         duplicatesStrategy = DuplicatesStrategy.FAIL
     }
+
+    project.afterEvaluate {
+        if (project.hasProperty("android")) {
+            android {
+                lintOptions {
+                    warningsAsErrors true
+                    quiet true
+                }
+            }
+        }
+    }
 }
 
 subprojects { project ->
@@ -70,16 +99,11 @@ subprojects { project ->
             check.dependsOn('checkstyle')
         }
     }
-
-    gradle.projectsEvaluated {
-        tasks.withType(JavaCompile) {
-            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
-        }
-    }
 }
 
 task wrapper(type: Wrapper) {
     gradleVersion = '4.1'
+    //noinspection UnnecessaryQualifiedReference
     distributionType = Wrapper.DistributionType.ALL
 }
 
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
index 3e1a2718e..76c631202 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
@@ -18,8 +18,6 @@
 /**
  * Allows callers to load an object but force the load to pause until {@link WaitModel#countDown()}
  * is called.
- *
- * <p>
  */
 public final class WaitModelLoader<Model, Data>
     implements ModelLoader<WaitModel<Model>, Data> {
@@ -65,7 +63,7 @@ public void countDown() {
   }
 
   public static final class Factory<Model, Data>
-      implements ModelLoaderFactory<WaitModel, Data> {
+      implements ModelLoaderFactory<WaitModel<Model>, Data> {
 
     private final Class<Model> modelClass;
     private final Class<Data> dataClass;
@@ -76,7 +74,7 @@ public void countDown() {
     }
 
     public static synchronized <T> WaitModel<T> waitOn(T model) {
-      @SuppressWarnings("unchecked") ModelLoaderFactory<WaitModel, InputStream> streamFactory =
+      @SuppressWarnings("unchecked") ModelLoaderFactory<WaitModel<T>, InputStream> streamFactory =
           new Factory<>((Class<T>) model.getClass(), InputStream.class);
       Glide.get(InstrumentationRegistry.getTargetContext())
           .getRegistry()
@@ -85,13 +83,10 @@ public void countDown() {
       return new WaitModel<>(model);
     }
 
-    @SuppressWarnings("unchecked")
     @Override
-    public ModelLoader<WaitModel, Data> build(
+    public ModelLoader<WaitModel<Model>, Data> build(
         MultiModelLoaderFactory multiFactory) {
-      WaitModelLoader<Model, Data> result =
-          new WaitModelLoader<>(multiFactory.build(modelClass, dataClass));
-      return (ModelLoader<WaitModel, Data>) (ModelLoader<?, ?>) result;
+      return new WaitModelLoader<>(multiFactory.build(modelClass, dataClass));
     }
 
     @Override
diff --git a/library/findbugs-exclude.xml b/library/findbugs-exclude.xml
index a9455e321..bd1e9afd3 100644
--- a/library/findbugs-exclude.xml
+++ b/library/findbugs-exclude.xml
@@ -42,4 +42,10 @@
       <Bug pattern="DMI_HARDCODED_ABSOLUTE_FILENAME" />
     </Match>
 
+    <!-- Re-using the byte array saves allocations, there's no serious risk of mutations. -->
+    <Match>
+      <Class name="com.bumptech.glide.util.FixedPreloadSizeProvider" />
+      <Bug pattern="EI_EXPOSE_REP" />
+    </Match>
+
 </FindBugsFilter>
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 3c3fc3e85..082b9a603 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -447,8 +447,14 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     ImageViewTargetFactory imageViewTargetFactory = new ImageViewTargetFactory();
     glideContext =
         new GlideContext(
-            context, registry, imageViewTargetFactory, defaultRequestOptions,
-            defaultTransitionOptions, engine, logLevel);
+            context,
+            arrayPool,
+            registry,
+            imageViewTargetFactory,
+            defaultRequestOptions,
+            defaultTransitionOptions,
+            engine,
+            logLevel);
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/GlideContext.java b/library/src/main/java/com/bumptech/glide/GlideContext.java
index 54caa20cf..f4c8eaa45 100644
--- a/library/src/main/java/com/bumptech/glide/GlideContext.java
+++ b/library/src/main/java/com/bumptech/glide/GlideContext.java
@@ -10,6 +10,7 @@
 import android.support.annotation.VisibleForTesting;
 import android.widget.ImageView;
 import com.bumptech.glide.load.engine.Engine;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.ViewTarget;
@@ -26,6 +27,7 @@
   static final TransitionOptions<?, ?> DEFAULT_TRANSITION_OPTIONS =
       new GenericTransitionOptions<>();
   private final Handler mainHandler;
+  private final ArrayPool arrayPool;
   private final Registry registry;
   private final ImageViewTargetFactory imageViewTargetFactory;
   private final RequestOptions defaultRequestOptions;
@@ -33,11 +35,17 @@
   private final Engine engine;
   private final int logLevel;
 
-  public GlideContext(Context context, Registry registry,
-      ImageViewTargetFactory imageViewTargetFactory, RequestOptions defaultRequestOptions,
-      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions, Engine engine,
+  public GlideContext(
+      Context context,
+      ArrayPool arrayPool,
+      Registry registry,
+      ImageViewTargetFactory imageViewTargetFactory,
+      RequestOptions defaultRequestOptions,
+      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,
+      Engine engine,
       int logLevel) {
     super(context.getApplicationContext());
+    this.arrayPool = arrayPool;
     this.registry = registry;
     this.imageViewTargetFactory = imageViewTargetFactory;
     this.defaultRequestOptions = defaultRequestOptions;
@@ -89,4 +97,8 @@ public Registry getRegistry() {
   public int getLogLevel() {
     return logLevel;
   }
+
+  public ArrayPool getArrayPool() {
+    return arrayPool;
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/ListPreloader.java b/library/src/main/java/com/bumptech/glide/ListPreloader.java
index 7aaa9d370..06de9eaa2 100644
--- a/library/src/main/java/com/bumptech/glide/ListPreloader.java
+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java
@@ -85,7 +85,7 @@
      * @param item The model to load.
      */
     @Nullable
-    RequestBuilder getPreloadRequestBuilder(U item);
+    RequestBuilder<?> getPreloadRequestBuilder(U item);
   }
 
   /**
@@ -206,7 +206,7 @@ private void preloadItem(@Nullable T item, int position, int perItemPosition) {
       return;
     }
     RequestBuilder<Object> preloadRequestBuilder =
-        preloadModelProvider.getPreloadRequestBuilder(item);
+        (RequestBuilder<Object>) preloadModelProvider.getPreloadRequestBuilder(item);
     if (preloadRequestBuilder == null) {
       return;
     }
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index 9ff7bea20..c2d589552 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -328,7 +328,7 @@ public final Registry setResourceDecoderBucketPriorityList(List<String> buckets)
    * Registers a new {@link com.bumptech.glide.load.data.DataRewinder.Factory} to handle a
    * non-default data type that can be rewind to allow for efficient reads of file headers.
    */
-  public Registry register(DataRewinder.Factory factory) {
+  public Registry register(DataRewinder.Factory<?> factory) {
     dataRewinderRegistry.register(factory);
     return this;
   }
@@ -438,8 +438,10 @@ public Registry register(ImageHeaderParser parser) {
    * @param dataClass  the data class (e.g. {@link java.io.InputStream},
    * {@link java.io.FileDescriptor}).
    */
-  public <Model, Data> Registry replace(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
+  public <Model, Data> Registry replace(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     modelLoaderRegistry.replace(modelClass, dataClass, factory);
     return this;
   }
@@ -560,6 +562,8 @@ public boolean isResourceEncoderAvailable(Resource<?> resource) {
    * Thrown when no {@link com.bumptech.glide.load.model.ModelLoader} is registered for a given
    * model class.
    */
+  // Never serialized by Glide.
+  @SuppressWarnings("serial")
   public static class NoModelLoaderAvailableException extends MissingComponentException {
     public NoModelLoaderAvailableException(Object model) {
       super("Failed to find any ModelLoaders for model: " + model);
@@ -573,6 +577,8 @@ public NoModelLoaderAvailableException(Class<?> modelClass, Class<?> dataClass)
   /**
    * Thrown when no {@link ResourceEncoder} is registered for a given resource class.
    */
+  // Never serialized by Glide.
+  @SuppressWarnings("serial")
   public static class NoResultEncoderAvailableException extends MissingComponentException {
     public NoResultEncoderAvailableException(Class<?> resourceClass) {
       super("Failed to find result encoder for resource class: " + resourceClass);
@@ -582,6 +588,8 @@ public NoResultEncoderAvailableException(Class<?> resourceClass) {
   /**
    * Thrown when no {@link Encoder} is registered for a given data class.
    */
+  // Never serialized by Glide.
+  @SuppressWarnings("serial")
   public static class NoSourceEncoderAvailableException extends MissingComponentException {
     public NoSourceEncoderAvailableException(Class<?> dataClass) {
       super("Failed to find source encoder for data class: " + dataClass);
@@ -591,6 +599,8 @@ public NoSourceEncoderAvailableException(Class<?> dataClass) {
   /**
    * Thrown when some necessary component is missing for a load.
    */
+  // Never serialized by Glide.
+  @SuppressWarnings("serial")
   public static class MissingComponentException extends RuntimeException {
     public MissingComponentException(String message) {
       super(message);
@@ -600,6 +610,8 @@ public MissingComponentException(String message) {
   /**
    * Thrown when no {@link ImageHeaderParser} is registered.
    */
+  // Never serialized by Glide.
+  @SuppressWarnings("serial")
   public static final class NoImageHeaderParserException extends MissingComponentException {
     public NoImageHeaderParserException() {
       super("Failed to find image header parser.");
diff --git a/library/src/main/java/com/bumptech/glide/load/HttpException.java b/library/src/main/java/com/bumptech/glide/load/HttpException.java
index 79f605da8..b13edc5d7 100644
--- a/library/src/main/java/com/bumptech/glide/load/HttpException.java
+++ b/library/src/main/java/com/bumptech/glide/load/HttpException.java
@@ -13,6 +13,8 @@
 // Public API.
 @SuppressWarnings({"WeakerAccess", "unused"})
 public final class HttpException extends IOException {
+  private static final long serialVersionUID = 1L;
+
   public static final int UNKNOWN = -1;
   private final int statusCode;
 
diff --git a/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java
index b092e15f2..3ba053eb1 100644
--- a/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/ImageHeaderParserUtils.java
@@ -31,7 +31,9 @@ public static ImageType getType(List<ImageHeaderParser> parsers, @Nullable Input
     }
 
     is.mark(MARK_POSITION);
-    for (ImageHeaderParser parser : parsers) {
+    int size = parsers.size();
+    for (int i = 0; i < size; i++) {
+      ImageHeaderParser parser = parsers.get(i);
       try {
         ImageType type = parser.getType(is);
         if (type != ImageType.UNKNOWN) {
@@ -52,7 +54,9 @@ public static ImageType getType(List<ImageHeaderParser> parsers, @Nullable ByteB
       return ImageType.UNKNOWN;
     }
 
-    for (ImageHeaderParser parser : parsers) {
+    int size = parsers.size();
+    for (int i = 0; i < size; i++) {
+      ImageHeaderParser parser = parsers.get(i);
       ImageType type = parser.getType(buffer);
       if (type != ImageType.UNKNOWN) {
         return type;
@@ -74,7 +78,9 @@ public static int getOrientation(List<ImageHeaderParser> parsers, @Nullable Inpu
     }
 
     is.mark(MARK_POSITION);
-    for (ImageHeaderParser parser : parsers) {
+    int size = parsers.size();
+    for (int i = 0; i < size; i++) {
+      ImageHeaderParser parser = parsers.get(i);
       try {
         int orientation = parser.getOrientation(is, byteArrayPool);
         if (orientation != ImageHeaderParser.UNKNOWN_ORIENTATION) {
diff --git a/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java
index c4c5d712b..0c1e110ed 100644
--- a/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/MultiTransformation.java
@@ -15,6 +15,7 @@
   private final Collection<? extends Transformation<T>> transformations;
 
   @SafeVarargs
+  @SuppressWarnings("varargs")
   public MultiTransformation(Transformation<T>... transformations) {
     if (transformations.length < 1) {
       throw new IllegalArgumentException(
diff --git a/library/src/main/java/com/bumptech/glide/load/Options.java b/library/src/main/java/com/bumptech/glide/load/Options.java
index 32aa7c227..434c571f9 100644
--- a/library/src/main/java/com/bumptech/glide/load/Options.java
+++ b/library/src/main/java/com/bumptech/glide/load/Options.java
@@ -3,7 +3,6 @@
 import android.support.v4.util.ArrayMap;
 import android.support.v4.util.SimpleArrayMap;
 import java.security.MessageDigest;
-import java.util.Map;
 
 /**
  * A set of {@link Option Options} to apply to in memory and disk cache keys.
@@ -41,8 +40,10 @@ public int hashCode() {
 
   @Override
   public void updateDiskCacheKey(MessageDigest messageDigest) {
-    for (Map.Entry<Option<?>, Object> entry : values.entrySet()) {
-      updateDiskCacheKey(entry.getKey(), entry.getValue(), messageDigest);
+    for (int i = 0; i < values.size(); i++) {
+      Option<?> key = values.keyAt(i);
+      Object value = values.valueAt(i);
+      updateDiskCacheKey(key, value, messageDigest);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
index 8d3bbb77a..ae2567532 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
@@ -9,6 +9,7 @@
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DecodeJob.DiskCacheProvider;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoader.LoadData;
@@ -119,6 +120,10 @@ int getHeight() {
     return height;
   }
 
+  ArrayPool getArrayPool() {
+    return glideContext.getArrayPool();
+  }
+
   List<Class<?>> getRegisteredResourceClasses() {
     return glideContext.getRegistry()
         .getRegisteredResourceClasses(model.getClass(), resourceClass, transcodeClass);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index d07982859..35d713c25 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -562,8 +562,16 @@ public StateVerifier getVerifier() {
         if (encodeStrategy == EncodeStrategy.SOURCE) {
           key = new DataCacheKey(currentSourceKey, signature);
         } else if (encodeStrategy == EncodeStrategy.TRANSFORMED) {
-          key = new ResourceCacheKey(currentSourceKey, signature, width, height,
-              appliedTransformation, resourceSubClass, options);
+          key =
+              new ResourceCacheKey(
+                  decodeHelper.getArrayPool(),
+                  currentSourceKey,
+                  signature,
+                  width,
+                  height,
+                  appliedTransformation,
+                  resourceSubClass,
+                  options);
         } else {
           throw new IllegalArgumentException("Unknown strategy: " + encodeStrategy);
         }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index db08be0ff..9b073f5ed 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -288,7 +288,7 @@ public void onEngineJobComplete(Key key, EngineResource<?> resource) {
   }
 
   @Override
-  public void onEngineJobCancelled(EngineJob engineJob, Key key) {
+  public void onEngineJobCancelled(EngineJob<?> engineJob, Key key) {
     Util.assertMainThread();
     EngineJob<?> current = jobs.get(key);
     if (engineJob.equals(current)) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 97f0f310e..4683403c4 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -202,7 +202,9 @@ void handleResultOnMainThread() {
     engineResource.acquire();
     listener.onEngineJobComplete(key, engineResource);
 
-    for (ResourceCallback cb : cbs) {
+    int size = cbs.size();
+    for (int i = 0; i < size; i++) {
+      ResourceCallback cb = cbs.get(i);
       if (!isInIgnoredCallbacks(cb)) {
         engineResource.acquire();
         cb.onResourceReady(engineResource, dataSource);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
index 0d3c2e410..df81284b3 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJobListener.java
@@ -6,5 +6,5 @@
 
   void onEngineJobComplete(Key key, EngineResource<?> resource);
 
-  void onEngineJobCancelled(EngineJob engineJob, Key key);
+  void onEngineJobCancelled(EngineJob<?> engineJob, Key key);
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
index bd952fa13..829f779c1 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
@@ -18,6 +18,8 @@
 // Public API.
 @SuppressWarnings("WeakerAccess")
 public final class GlideException extends Exception {
+  private static final long serialVersionUID = 1L;
+
   private static final StackTraceElement[] EMPTY_ELEMENTS = new StackTraceElement[0];
 
   private final List<Throwable> causes;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java b/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
index 5596bf735..1dc651dec 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
@@ -76,6 +76,6 @@ public LoadPath(Class<Data> dataClass, Class<ResourceType> resourceClass,
   @Override
   public String toString() {
     return "LoadPath{" + "decodePaths="
-        + Arrays.toString(decodePaths.toArray(new DecodePath[decodePaths.size()])) + '}';
+        + Arrays.toString(decodePaths.toArray(new DecodePath<?, ?, ?>[decodePaths.size()])) + '}';
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 8ab59428a..43a446f59 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -57,8 +57,16 @@ public boolean startNext() {
       Class<?> resourceClass = resourceClasses.get(resourceClassIndex);
       Transformation<?> transformation = helper.getTransformation(resourceClass);
 
-      currentKey = new ResourceCacheKey(sourceId, helper.getSignature(), helper.getWidth(),
-          helper.getHeight(), transformation, resourceClass, helper.getOptions());
+      currentKey =
+          new ResourceCacheKey(
+              helper.getArrayPool(),
+              sourceId,
+              helper.getSignature(),
+              helper.getWidth(),
+              helper.getHeight(),
+              transformation,
+              resourceClass,
+              helper.getOptions());
       cacheFile = helper.getDiskCache().get(currentKey);
       if (cacheFile != null) {
         this.sourceKey = sourceId;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheKey.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheKey.java
index 53e80b553..3ee4e4666 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheKey.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheKey.java
@@ -3,6 +3,7 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.util.LruCache;
 import com.bumptech.glide.util.Util;
 import java.nio.ByteBuffer;
@@ -13,6 +14,7 @@
  */
 final class ResourceCacheKey implements Key {
   private static final LruCache<Class<?>, byte[]> RESOURCE_CLASS_BYTES = new LruCache<>(50);
+  private final ArrayPool arrayPool;
   private final Key sourceKey;
   private final Key signature;
   private final int width;
@@ -21,8 +23,16 @@
   private final Options options;
   private final Transformation<?> transformation;
 
-  ResourceCacheKey(Key sourceKey, Key signature, int width, int height,
-      Transformation<?> appliedTransformation, Class<?> decodedResourceClass, Options options) {
+  ResourceCacheKey(
+      ArrayPool arrayPool,
+      Key sourceKey,
+      Key signature,
+      int width,
+      int height,
+      Transformation<?> appliedTransformation,
+      Class<?> decodedResourceClass,
+      Options options) {
+    this.arrayPool = arrayPool;
     this.sourceKey = sourceKey;
     this.signature = signature;
     this.width = width;
@@ -63,7 +73,8 @@ public int hashCode() {
   // TODO: Include relevant options?
   @Override
   public void updateDiskCacheKey(MessageDigest messageDigest) {
-    byte[] dimensions = ByteBuffer.allocate(8).putInt(width).putInt(height).array();
+    byte[] dimensions = arrayPool.getExact(8, byte[].class);
+    ByteBuffer.wrap(dimensions).putInt(width).putInt(height).array();
     signature.updateDiskCacheKey(messageDigest);
     sourceKey.updateDiskCacheKey(messageDigest);
     messageDigest.update(dimensions);
@@ -72,6 +83,7 @@ public void updateDiskCacheKey(MessageDigest messageDigest) {
     }
     options.updateDiskCacheKey(messageDigest);
     messageDigest.update(getResourceClassBytes());
+    arrayPool.put(dimensions);
   }
 
   private byte[] getResourceClassBytes() {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
index bfdb18621..7cb169dbb 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
@@ -15,17 +15,42 @@
    *
    * <p>Arrays may be ignored, for example if the array is larger than the maximum size of the
    * pool.
+   *
+   * @deprecated Use {@link #put(Object)}
    */
+  @Deprecated
   <T> void put(T array, Class<T> arrayClass);
 
+  /**
+   * Optionally adds the given array of the given type to the pool.
+   *
+   * <p>Arrays may be ignored, for example if the array is larger than the maximum size of the
+   * pool.
+   */
+  <T> void put(T array);
+
   /**
    * Returns a non-null array of the given type with a length >= to the given size.
    *
    * <p>If an array of the given size isn't in the pool, a new one will be allocated.
    *
    * <p>This class makes no guarantees about the contents of the returned array.
+   *
+   * @see #getExact(int, Class)
    */
   <T> T get(int size, Class<T> arrayClass);
+
+  /**
+   * Returns a non-null array of the given type with a length exactly equal to the given size.
+   *
+   * <p>If an array of the given size isn't in the pool, a new one will be allocated.
+   *
+   * <p>This class makes no guarantees about the contents of the returned array.
+   *
+   * @see #get(int, Class)
+   */
+  <T> T getExact(int size, Class<T> arrayClass);
+
   /**
    * Clears all arrays from the pool.
    */
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
index 6f01b70be..45bd85b6a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
@@ -22,7 +22,8 @@
    * The maximum number of times larger an int array may be to be than a requested size to eligible
    * to be returned from the pool.
    */
-  private static final int MAX_OVER_SIZE_MULTIPLE = 8;
+  @VisibleForTesting
+  static final int MAX_OVER_SIZE_MULTIPLE = 8;
   /** Used to calculate the maximum % of the total pool size a single byte array may consume. */
   private static final int SINGLE_ARRAY_MAX_SIZE_DIVISOR = 2;
 
@@ -47,8 +48,17 @@ public LruArrayPool(int maxSize) {
     this.maxSize = maxSize;
   }
 
+  @Deprecated
   @Override
-  public synchronized <T> void put(T array, Class<T> arrayClass) {
+  public <T> void put(T array, Class<T> arrayClass) {
+    put(array);
+  }
+
+  @Override
+  public synchronized <T> void put(T array) {
+    @SuppressWarnings("unchecked")
+    Class<T> arrayClass = (Class<T>) array.getClass();
+
     ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);
     int size = arrayAdapter.getArrayLength(array);
     int arrayBytes = size * arrayAdapter.getElementSizeInBytes();
@@ -66,30 +76,36 @@ public LruArrayPool(int maxSize) {
   }
 
   @Override
-  public <T> T get(int size, Class<T> arrayClass) {
-    ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);
-    T result;
-    synchronized (this) {
-      Integer possibleSize = getSizesForAdapter(arrayClass).ceilingKey(size);
-      final Key key;
-      if (mayFillRequest(size, possibleSize)) {
-        key = keyPool.get(possibleSize, arrayClass);
-      } else {
-        key = keyPool.get(size, arrayClass);
-      }
+  public synchronized <T> T getExact(int size, Class<T> arrayClass) {
+    Key key = keyPool.get(size, arrayClass);
+    return getForKey(key, arrayClass);
+  }
 
-      result = getArrayForKey(key);
-      if (result != null) {
-        currentSize -= arrayAdapter.getArrayLength(result) * arrayAdapter.getElementSizeInBytes();
-        decrementArrayOfSize(arrayAdapter.getArrayLength(result), arrayClass);
-      }
+  @Override
+  public synchronized <T> T get(int size, Class<T> arrayClass) {
+    Integer possibleSize = getSizesForAdapter(arrayClass).ceilingKey(size);
+    final Key key;
+    if (mayFillRequest(size, possibleSize)) {
+      key = keyPool.get(possibleSize, arrayClass);
+    } else {
+      key = keyPool.get(size, arrayClass);
+    }
+    return getForKey(key, arrayClass);
+  }
+
+  private <T> T getForKey(Key key, Class<T> arrayClass) {
+    ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);
+    T result = getArrayForKey(key);
+    if (result != null) {
+      currentSize -= arrayAdapter.getArrayLength(result) * arrayAdapter.getElementSizeInBytes();
+      decrementArrayOfSize(arrayAdapter.getArrayLength(result), arrayClass);
     }
 
     if (result == null) {
       if (Log.isLoggable(arrayAdapter.getTag(), Log.VERBOSE)) {
-        Log.v(arrayAdapter.getTag(), "Allocated " + size + " bytes");
+        Log.v(arrayAdapter.getTag(), "Allocated " + key.size + " bytes");
       }
-      result = arrayAdapter.newArray(size);
+      result = arrayAdapter.newArray(key.size);
     }
     return result;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/PrettyPrintTreeMap.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/PrettyPrintTreeMap.java
index 5d4176f3c..220d3beff 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/PrettyPrintTreeMap.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/PrettyPrintTreeMap.java
@@ -2,6 +2,8 @@
 
 import java.util.TreeMap;
 
+// Never serialized.
+@SuppressWarnings("serial")
 class PrettyPrintTreeMap<K, V> extends TreeMap<K, V> {
   @Override
   public String toString() {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
index 968c2d20a..51c6bf8cc 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
@@ -27,14 +27,18 @@ private ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
     this.multiModelLoaderFactory = multiModelLoaderFactory;
   }
 
-  public synchronized <Model, Data> void append(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
+  public synchronized <Model, Data> void append(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     multiModelLoaderFactory.append(modelClass, dataClass, factory);
     cache.clear();
   }
 
-  public synchronized <Model, Data> void prepend(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
+  public synchronized <Model, Data> void prepend(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     multiModelLoaderFactory.prepend(modelClass, dataClass, factory);
     cache.clear();
   }
@@ -44,14 +48,17 @@ private ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
     cache.clear();
   }
 
-  public synchronized <Model, Data> void replace(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
+  public synchronized <Model, Data> void replace(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     tearDown(multiModelLoaderFactory.replace(modelClass, dataClass, factory));
     cache.clear();
   }
 
-  private <Model, Data> void tearDown(List<ModelLoaderFactory<Model, Data>> factories) {
-    for (ModelLoaderFactory<?, ?> factory : factories) {
+  private <Model, Data> void tearDown(
+      List<ModelLoaderFactory<? extends Model, ? extends Data>> factories) {
+    for (ModelLoaderFactory<? extends Model, ? extends Data> factory : factories) {
       factory.teardown();
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index c94eec1bf..316ee755e 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -68,7 +68,7 @@ public boolean handles(Model model) {
   @Override
   public String toString() {
     return "MultiModelLoader{" + "modelLoaders=" + Arrays
-        .toString(modelLoaders.toArray(new ModelLoader[modelLoaders.size()])) + '}';
+        .toString(modelLoaders.toArray(new ModelLoader<?, ?>[modelLoaders.size()])) + '}';
   }
 
   static class MultiFetcher<Data> implements DataFetcher<Data>, DataCallback<Data> {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
index b856b2957..c5ac00266 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
@@ -38,32 +38,43 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
     this.factory = factory;
   }
 
-  synchronized <Model, Data> void append(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
-    add(modelClass, dataClass, factory, true /*append*/);
+  synchronized <Model, Data> void append(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+    add(modelClass, dataClass, factory, /*append=*/ true);
   }
 
-  synchronized <Model, Data> void prepend(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
-    add(modelClass, dataClass, factory, false /*append*/);
+  synchronized <Model, Data> void prepend(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+    add(modelClass, dataClass, factory, /*append=*/ false);
   }
 
-  private <Model, Data> void add(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory, boolean append) {
+  private <Model, Data> void add(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory,
+      boolean append) {
     Entry<Model, Data> entry = new Entry<>(modelClass, dataClass, factory);
     entries.add(append ? entries.size() : 0, entry);
   }
 
-  synchronized <Model, Data> List<ModelLoaderFactory<Model, Data>> replace(Class<Model> modelClass,
-      Class<Data> dataClass, ModelLoaderFactory<Model, Data> factory) {
-    List<ModelLoaderFactory<Model, Data>> removed = remove(modelClass, dataClass);
+  synchronized <Model, Data> List<ModelLoaderFactory<? extends Model, ? extends Data>> replace(
+      Class<Model> modelClass,
+      Class<Data> dataClass,
+      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+    List<ModelLoaderFactory<? extends Model, ? extends Data>> removed =
+        remove(modelClass, dataClass);
     append(modelClass, dataClass, factory);
     return removed;
   }
 
-  synchronized <Model, Data> List<ModelLoaderFactory<Model, Data>> remove(Class<Model> modelClass,
+  synchronized <Model, Data> List<ModelLoaderFactory<? extends Model, ? extends Data>> remove(
+      Class<Model> modelClass,
       Class<Data> dataClass) {
-    List<ModelLoaderFactory<Model, Data>> factories = new ArrayList<>();
+    List<ModelLoaderFactory<? extends Model, ? extends Data>> factories = new ArrayList<>();
     for (Iterator<Entry<?, ?>> iterator = entries.iterator(); iterator.hasNext(); ) {
       Entry<?, ?> entry = iterator.next();
       if (entry.handles(modelClass, dataClass)) {
@@ -168,10 +179,12 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
   private static class Entry<Model, Data> {
     private final Class<Model> modelClass;
     @Synthetic final Class<Data> dataClass;
-    @Synthetic final ModelLoaderFactory<Model, Data> factory;
+    @Synthetic final ModelLoaderFactory<? extends Model, ? extends Data> factory;
 
-    public Entry(Class<Model> modelClass, Class<Data> dataClass,
-        ModelLoaderFactory<Model, Data> factory) {
+    public Entry(
+        Class<Model> modelClass,
+        Class<Data> dataClass,
+        ModelLoaderFactory<? extends Model, ? extends Data> factory) {
       this.modelClass = modelClass;
       this.dataClass = dataClass;
       this.factory = factory;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
index 28a06ca9e..50aa9630c 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/StreamEncoder.java
@@ -47,7 +47,7 @@ public boolean encode(InputStream data, File file, Options options) {
           // Do nothing.
         }
       }
-      byteArrayPool.put(buffer, byte[].class);
+      byteArrayPool.put(buffer);
     }
     return success;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
index 2cbf56769..cfab5b8bc 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
@@ -159,7 +159,7 @@ private int getOrientation(Reader reader, ArrayPool byteArrayPool) throws IOExce
       try {
         return parseExifSegment(reader, exifData, exifSegmentLength);
       } finally {
-        byteArrayPool.put(exifData, byte[].class);
+        byteArrayPool.put(exifData);
       }
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 524412993..f3e605b7a 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -211,7 +211,7 @@ public boolean handles(@SuppressWarnings("unused") ByteBuffer byteBuffer) {
       return BitmapResource.obtain(result, bitmapPool);
     } finally {
       releaseOptions(bitmapFactoryOptions);
-      byteArrayPool.put(bytesForOptions, byte[].class);
+      byteArrayPool.put(bytesForOptions);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
index 6c0770053..b3f8003ed 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
@@ -114,7 +114,7 @@ public synchronized void fixMarkLimit() {
 
   public synchronized void release() {
     if (buf != null) {
-      byteArrayPool.put(buf, byte[].class);
+      byteArrayPool.put(buf);
       buf = null;
     }
   }
@@ -128,7 +128,7 @@ public synchronized void release() {
   @Override
   public void close() throws IOException {
     if (buf != null) {
-      byteArrayPool.put(buf, byte[].class);
+      byteArrayPool.put(buf);
       buf = null;
     }
     InputStream localIn = in;
@@ -170,7 +170,7 @@ private int fillbuf(InputStream localIn, byte[] localBuf) throws IOException {
       // Reassign buf, which will invalidate any local references
       // FIXME: what if buf was null?
       localBuf = buf = newbuf;
-      byteArrayPool.put(oldbuf, byte[].class);
+      byteArrayPool.put(oldbuf);
     } else if (markpos > 0) {
       System.arraycopy(localBuf, markpos, localBuf, 0, localBuf.length - markpos);
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
index 408c91622..818d8a2f3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
@@ -60,7 +60,7 @@ public void release(byte[] bytes) {
     if (arrayPool == null) {
       return;
     }
-    arrayPool.put(bytes, byte[].class);
+    arrayPool.put(bytes);
   }
 
   @Override
@@ -77,6 +77,6 @@ public void release(int[] array) {
     if (arrayPool == null) {
       return;
     }
-    arrayPool.put(array, int[].class);
+    arrayPool.put(array);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index be7e2ef70..560548eee 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -277,6 +277,8 @@ void notifyAll(Object toNotify) {
   }
 
   private static class GlideExecutionException extends ExecutionException {
+    private static final long serialVersionUID = 1L;
+
 
     private final GlideException cause;
 
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 76b5cd4b5..8154a27a0 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -47,6 +47,9 @@
       });
   private boolean isCallingCallbacks;
 
+  private static final boolean IS_VERBOSE_LOGGABLE =
+      Log.isLoggable(TAG, Log.VERBOSE);
+
   private enum Status {
     /**
      * Created but not yet running.
@@ -82,7 +85,8 @@
     PAUSED,
   }
 
-  private final String tag = String.valueOf(super.hashCode());
+  @Nullable
+  private final String tag = IS_VERBOSE_LOGGABLE ? String.valueOf(super.hashCode()) : null;
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
 
   @Nullable
@@ -262,7 +266,7 @@ public void begin() {
         && canNotifyStatusChanged()) {
       target.onLoadStarted(getPlaceholderDrawable());
     }
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+    if (IS_VERBOSE_LOGGABLE) {
       logV("finished run method in " + LogTime.getElapsedMillis(startTime));
     }
   }
@@ -427,7 +431,7 @@ private void setErrorPlaceholder() {
   @Override
   public void onSizeReady(int width, int height) {
     stateVerifier.throwIfRecycled();
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+    if (IS_VERBOSE_LOGGABLE) {
       logV("Got onSizeReady in " + LogTime.getElapsedMillis(startTime));
     }
     if (status != Status.WAITING_FOR_SIZE) {
@@ -439,7 +443,7 @@ public void onSizeReady(int width, int height) {
     this.width = maybeApplySizeMultiplier(width, sizeMultiplier);
     this.height = maybeApplySizeMultiplier(height, sizeMultiplier);
 
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+    if (IS_VERBOSE_LOGGABLE) {
       logV("finished setup for calling load in " + LogTime.getElapsedMillis(startTime));
     }
     loadStatus = engine.load(
@@ -468,7 +472,7 @@ public void onSizeReady(int width, int height) {
     if (status != Status.RUNNING) {
       loadStatus = null;
     }
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+    if (IS_VERBOSE_LOGGABLE) {
       logV("finished onSizeReady in " + LogTime.getElapsedMillis(startTime));
     }
   }
@@ -619,7 +623,7 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
   @Override
   public boolean isEquivalentTo(Request o) {
     if (o instanceof SingleRequest) {
-      SingleRequest that = (SingleRequest) o;
+      SingleRequest<?> that = (SingleRequest<?>) o;
       return overrideWidth == that.overrideWidth
           && overrideHeight == that.overrideHeight
           && Util.bothModelsNullEquivalentOrEquals(model, that.model)
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
index bf5b9da5c..386a6a1cf 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
@@ -14,8 +14,12 @@ public BitmapImageViewTarget(ImageView view) {
     super(view);
   }
 
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   // Public API.
-  @SuppressWarnings("unused")
+  @SuppressWarnings({"unused", "deprecation"})
+  @Deprecated
   public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
index 5d5f03eee..90b03a62f 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
@@ -15,6 +15,11 @@ public BitmapThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
+  @SuppressWarnings("deprecation")
+  @Deprecated
   public BitmapThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
index 524a273d7..ca9c6528d 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
@@ -13,8 +13,12 @@ public DrawableImageViewTarget(ImageView view) {
     super(view);
   }
 
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
   // Public API.
-  @SuppressWarnings("unused")
+  @SuppressWarnings({"unused", "deprecation"})
+  @Deprecated
   public DrawableImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
index 2a105ee01..40ff2dad4 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
@@ -13,6 +13,11 @@ public DrawableThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
+  @Deprecated
+  @SuppressWarnings("deprecation")
   public DrawableThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
index d08d0da7a..2210547f9 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
@@ -25,6 +25,11 @@ public ImageViewTarget(ImageView view) {
     super(view);
   }
 
+  /**
+   * @deprecated Use {@link #waitForLayout()} instead.
+   */
+  @SuppressWarnings({"deprecation"})
+  @Deprecated
   public ImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
index 076e16642..043d31daf 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
@@ -28,6 +28,11 @@ public ThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  /**
+   * @deprecated Use {@link #waitForLayout()} insetad.
+   */
+  @Deprecated
+  @SuppressWarnings({"deprecation"})
   public ThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
     super(view, waitForLayout);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 00e041656..47743b945 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -57,7 +57,8 @@
    * Constructor that defaults {@code waitForLayout} to {@code false}.
    */
   public ViewTarget(T view) {
-    this(view, false /*waitForLayout*/);
+    this.view = Preconditions.checkNotNull(view);
+    sizeDeterminer = new SizeDeterminer(view);
   }
 
   /**
@@ -69,12 +70,17 @@ public ViewTarget(T view) {
    * some cases and should be used sparingly. If layout parameters are set to fixed sizes, they will
    * still be used instead of the View's dimensions even if this parameter is set to {@code true}.
    * This parameter is a fallback only.
+   *
+   * @deprecated Use {@link #waitForLayout()} instead.
    */
   // Public API.
   @SuppressWarnings("WeakerAccess")
+  @Deprecated
   public ViewTarget(T view, boolean waitForLayout) {
-    this.view = Preconditions.checkNotNull(view);
-    sizeDeterminer = new SizeDeterminer(view, waitForLayout);
+    this(view);
+    if (waitForLayout) {
+      waitForLayout();
+    }
   }
 
   /**
@@ -124,6 +130,30 @@ public void onViewDetachedFromWindow(View v) {
     return this;
   }
 
+  /**
+   * Indicates that Glide should always wait for any pending layout pass before checking
+   * for the size an {@link View}.
+   *
+   * <p>By default, Glide will only wait for a pending layout pass if it's unable to resolve the
+   * size from the {@link LayoutParams} or valid non-zero values for {@link View#getWidth()} and
+   * {@link View#getHeight()}.
+   *
+   * <p>Because calling this method forces Glide to wait for the layout pass to occur before
+   * starting loads, setting this parameter to {@code true} can cause Glide to asynchronous load
+   * an image even if it's in the memory cache. The load will happen asynchronously because Glide
+   * has to wait for a layout pass to occur, which won't necessarily happen in the same frame as
+   * when the image is requested. As a result, using this method can resulting in flashing in some
+   * cases and should be used sparingly.
+   *
+   * <p>If the {@link LayoutParams} of the wrapped {@link View} are set to fixed sizes, they will
+   * still be used instead of the {@link View}'s dimensions even if this method is called. This
+   * parameter is a fallback only.
+   */
+  public final ViewTarget<T, Z> waitForLayout() {
+    sizeDeterminer.waitForLayout = true;
+    return this;
+  }
+
   @CallSuper
   @Override
   public void onLoadStarted(@Nullable Drawable placeholder) {
@@ -284,14 +314,13 @@ public static void setTagId(int tagId) {
     @Nullable
     static Integer maxDisplayLength;
     private final View view;
-    private final boolean waitForLayout;
     private final List<SizeReadyCallback> cbs = new ArrayList<>();
+    private boolean waitForLayout;
 
     @Nullable private SizeDeterminerLayoutListener layoutListener;
 
-    SizeDeterminer(View view, boolean waitForLayout) {
+    SizeDeterminer(View view) {
       this.view = view;
-      this.waitForLayout = waitForLayout;
     }
 
     // Use the maximum to avoid depending on the device's current orientation.
diff --git a/library/src/main/java/com/bumptech/glide/util/FixedPreloadSizeProvider.java b/library/src/main/java/com/bumptech/glide/util/FixedPreloadSizeProvider.java
index b6c9e40d4..d047eada0 100644
--- a/library/src/main/java/com/bumptech/glide/util/FixedPreloadSizeProvider.java
+++ b/library/src/main/java/com/bumptech/glide/util/FixedPreloadSizeProvider.java
@@ -1,7 +1,6 @@
 package com.bumptech.glide.util;
 
 import com.bumptech.glide.ListPreloader;
-import java.util.Arrays;
 
 /**
  * A {@link com.bumptech.glide.ListPreloader.PreloadSizeProvider} with a fixed width and height.
@@ -24,6 +23,6 @@ public FixedPreloadSizeProvider(int width, int height) {
 
   @Override
   public int[] getPreloadSize(T item, int adapterPosition, int itemPosition) {
-    return Arrays.copyOf(this.size, this.size.length);
+    return size;
   }
 }
diff --git a/library/src/test/java/com/bumptech/glide/GlideContextTest.java b/library/src/test/java/com/bumptech/glide/GlideContextTest.java
index 199ecb38e..2281d5706 100644
--- a/library/src/test/java/com/bumptech/glide/GlideContextTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideContextTest.java
@@ -9,6 +9,7 @@
 import android.graphics.drawable.Drawable;
 import android.util.Log;
 import com.bumptech.glide.load.engine.Engine;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.request.RequestOptions;
@@ -33,9 +34,15 @@ public void setUp() {
     Application app = RuntimeEnvironment.application;
 
     transitionOptions = new HashMap<>();
-    context = new GlideContext(app, new Registry(),
-        new ImageViewTargetFactory(), new RequestOptions(),
-        transitionOptions, mock(Engine.class), Log.DEBUG);
+    context = new GlideContext(
+        app,
+        new LruArrayPool(),
+        new Registry(),
+        new ImageViewTargetFactory(),
+        new RequestOptions(),
+        transitionOptions,
+        mock(Engine.class),
+        Log.DEBUG);
   }
 
   @Test
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index 7577ae636..64d8df110 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -128,7 +128,7 @@ public void setUp() throws Exception {
         new GlideBuilder()
             .setMemoryCache(memoryCache)
             .setDiskCache(diskCacheFactory)
-            .setResizeExecutor(executor)
+            .setSourceExecutor(executor)
             .setDiskCacheExecutor(executor));
     Registry registry = Glide.get(context).getRegistry();
     registerMockModelLoader(
diff --git a/library/src/test/java/com/bumptech/glide/load/OptionsTest.java b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java
index bac793e3b..eb45b4321 100644
--- a/library/src/test/java/com/bumptech/glide/load/OptionsTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java
@@ -1,6 +1,10 @@
 package com.bumptech.glide.load;
 
-import com.google.common.testing.EqualsTester;
+import com.bumptech.glide.load.Option.CacheKeyUpdater;
+import com.bumptech.glide.tests.KeyTester;
+import java.nio.ByteBuffer;
+import java.security.MessageDigest;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -9,27 +13,64 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class OptionsTest {
+  @Rule public final KeyTester keyTester = new KeyTester();
 
   @Test
   public void testEquals() {
-    Option<Object> firstOption = Option.memory("firstKey");
+    Option<Object> firstMemoryOption = Option.memory("firstKey");
     Object firstValue = new Object();
-    Option<Object> secondOption = Option.memory("secondKey");
+    Option<Object> secondMemoryOption = Option.memory("secondKey");
     Object secondValue = new Object();
-    new EqualsTester()
-        .addEqualityGroup(new Options(), new Options())
-        .addEqualityGroup(
-            new Options().set(firstOption, firstValue),
-            new Options().set(firstOption, firstValue)
-        )
-        .addEqualityGroup(
-            new Options().set(secondOption, secondValue),
-            new Options().set(secondOption, secondValue)
-        )
-        .addEqualityGroup(
-            new Options().set(firstOption, firstValue).set(secondOption, secondValue),
-            new Options().set(firstOption, firstValue).set(secondOption, secondValue)
-        ).testEquals();
-  }
 
+    CacheKeyUpdater<Integer> updater = new CacheKeyUpdater<Integer>() {
+      @Override
+      public void update(byte[] keyBytes, Integer value, MessageDigest messageDigest) {
+        messageDigest.update(keyBytes);
+        messageDigest.update(ByteBuffer.allocate(4).putInt(value).array());
+
+      }
+    };
+    Option<Integer> firstDiskOption = Option.disk("firstDisk", updater);
+    Option<Integer> secondDiskOption = Option.disk("secondDisk", updater);
+
+    keyTester
+        .addEquivalenceGroup(new Options(), new Options())
+        .addEquivalenceGroup(
+            new Options().set(firstMemoryOption, firstValue),
+            new Options().set(firstMemoryOption, firstValue))
+        .addEquivalenceGroup(
+            new Options().set(secondMemoryOption, secondValue),
+            new Options().set(secondMemoryOption, secondValue))
+        .addEquivalenceGroup(
+            new Options().set(firstMemoryOption, firstValue).set(secondMemoryOption, secondValue),
+            new Options().set(firstMemoryOption, firstValue).set(secondMemoryOption, secondValue),
+            new Options().set(secondMemoryOption, secondValue).set(firstMemoryOption, firstValue))
+        .addEquivalenceGroup(
+            new Options().set(firstMemoryOption, secondValue))
+        .addEquivalenceGroup(
+            new Options().set(secondMemoryOption, firstValue))
+        .addEquivalenceGroup(
+            new Options().set(firstDiskOption, 1),
+            new Options().set(firstDiskOption, 1))
+        .addEquivalenceGroup(
+            new Options().set(secondDiskOption, 1),
+            new Options().set(secondDiskOption, 1))
+        .addEquivalenceGroup(
+            new Options().set(firstDiskOption, 2))
+        .addEquivalenceGroup(
+            new Options().set(secondDiskOption, 2))
+        .addEquivalenceGroup(
+            new Options().set(firstDiskOption, 1).set(secondDiskOption, 2),
+            new Options().set(secondDiskOption, 2).set(firstDiskOption, 1))
+        .addEmptyDigestRegressionTest(new Options().set(firstMemoryOption, firstValue))
+        .addEmptyDigestRegressionTest(
+            new Options().set(firstMemoryOption, firstValue).set(secondMemoryOption, secondValue))
+        .addRegressionTest(
+            new Options().set(firstDiskOption, 123),
+            "3c87124d1a765dc3d566f947d536ef140a4aca645c0947f702356714855b4a8e")
+        .addRegressionTest(
+            new Options().set(firstDiskOption, 123).set(secondDiskOption, 123),
+            "6697f654686c9a925905db3840e9c99944642c2b91d6200360d77639c1754d51")
+        .test();
+  }
 }
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 755d89c68..b4fd39697 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -439,7 +439,7 @@ public void runTest() {
   @Test
   public void load_afterResourceIsLoadedInActiveResources_returnsFromMemoryCache() {
     when(harness.resource.isCacheable()).thenReturn(true);
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Object>() {
       @Override
       public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         harness.getEngine().onEngineJobComplete(harness.cacheKey, harness.resource);
@@ -455,7 +455,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
   public void load_afterResourceIsLoadedAndReleased_returnsFromMemoryCache() {
     harness.cache = new LruResourceCache(100);
     when(harness.resource.isCacheable()).thenReturn(true);
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Object>() {
       @Override
       public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         harness.getEngine().onEngineJobComplete(harness.cacheKey, harness.resource);
@@ -473,7 +473,7 @@ public void load_afterResourceIsGcedFromActive_returnsFromMemoryCache() {
     when(harness.resource.getResource()).thenReturn(mock(Resource.class));
     when(harness.resource.isCacheable()).thenReturn(true);
     harness.cache = new LruResourceCache(100);
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Object>() {
       @Override
       public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         harness.getEngine().onEngineJobComplete(harness.cacheKey, harness.resource);
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
index 76b004428..f95935d85 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
@@ -8,11 +8,13 @@
 import com.bumptech.glide.load.Option.CacheKeyUpdater;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.tests.KeyTester;
 import com.bumptech.glide.tests.Util;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -29,11 +31,13 @@
 
   @Mock private Transformation<Object> transformation1;
   @Mock private Transformation<Object> transformation2;
+  private LruArrayPool arrayPool;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
 
+    arrayPool = new LruArrayPool();
     doAnswer(new Util.WriteDigest("transformation1")).when(transformation1)
         .updateDiskCacheKey(any(MessageDigest.class));
     doAnswer(new Util.WriteDigest("transformation1")).when(transformation2)
@@ -55,9 +59,17 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
       }
     }), "value");
 
+
+    for (int i = 0; i < 20; i++) {
+      byte[] array = new byte[9];
+      Arrays.fill(array, (byte) 2);
+      arrayPool.put(array);
+    }
+
     keyTester
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -66,6 +78,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 Object.class,
                 new Options()),
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -75,6 +88,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 new Options()))
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("otherSource"),
                 new ObjectKey("signature"),
                 100,
@@ -83,7 +97,8 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 Object.class,
                 new Options()))
         .addEquivalenceGroup(
-              new ResourceCacheKey(
+            new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("otherSignature"),
                 100,
@@ -93,6 +108,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 new Options()))
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 200,
@@ -102,6 +118,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 new Options()))
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -111,6 +128,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 new Options()))
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -120,6 +138,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 new Options()))
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -129,6 +148,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 new Options()))
         .addEquivalenceGroup(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -137,7 +157,8 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 Object.class,
                 memoryOptions))
         .addEquivalenceGroup(
-                new ResourceCacheKey(
+            new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -146,7 +167,8 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
                 Object.class,
                 diskOptions))
         .addRegressionTest(
-              new ResourceCacheKey(
+            new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
@@ -157,6 +179,7 @@ public void update(byte[] keyBytes, String value, MessageDigest messageDigest) {
             "04d632bfe8e588544909fc44edb7328fa28bea6831b96927ade22b44818654e2")
         .addRegressionTest(
             new ResourceCacheKey(
+                arrayPool,
                 new ObjectKey("source"),
                 new ObjectKey("signature"),
                 100,
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
index 4f6016cf3..77d5e5e23 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
@@ -3,6 +3,7 @@
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
@@ -10,6 +11,8 @@
 import android.annotation.TargetApi;
 import android.os.Build;
 import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -21,6 +24,7 @@
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
 public class LruArrayPoolTest {
   private static final int MAX_SIZE = 10;
+  private static final int MAX_PUT_SIZE = MAX_SIZE / 2;
   private static final Class<byte[]> ARRAY_CLASS = byte[].class;
   private static final ArrayAdapterInterface<byte[]> ADAPTER = new ByteArrayAdapter();
   private LruArrayPool pool;
@@ -40,7 +44,7 @@ public void testICanAddAndGetValidArray() {
     int size = 758;
     int value = 564;
     fillPool(pool, size - 1, value);
-    pool.put(createArray(ARRAY_CLASS, size, value), ARRAY_CLASS);
+    pool.put(createArray(ARRAY_CLASS, size, value));
     Object array = pool.get(size, ARRAY_CLASS);
     assertNotNull(array);
     assertTrue(array.getClass() == ARRAY_CLASS);
@@ -57,8 +61,7 @@ public void testItIsSizeLimited() {
   @Test
   public void testArrayLargerThanPoolIsNotAdded() {
     pool = new LruArrayPool(MAX_SIZE);
-    pool.put(createArray(ARRAY_CLASS, MAX_SIZE / ADAPTER.getElementSizeInBytes() + 1, 0),
-        ARRAY_CLASS);
+    pool.put(createArray(ARRAY_CLASS, MAX_SIZE / ADAPTER.getElementSizeInBytes() + 1, 0));
     assertEquals(0, pool.getCurrentSize());
   }
 
@@ -86,6 +89,91 @@ public void testTrimMemoryBackgroundOrGreaterRemovesAllArrays() {
     }
   }
 
+  @Test
+  public void get_withEmptyPool_returnsExactArray() {
+    assertThat(pool.get(MAX_PUT_SIZE, byte[].class)).hasLength(MAX_PUT_SIZE);
+  }
+
+  @Test
+  public void get_withPoolContainingLargerArray_returnsLargerArray() {
+    byte[] expected = new byte[MAX_PUT_SIZE];
+    pool.put(expected);
+    assertThat(pool.get(MAX_PUT_SIZE - 1, byte[].class)).isSameAs(expected);
+  }
+
+  @Test
+  public void get_withPoolContainingSmallerArray_returnsExactArray() {
+    pool.put(new byte[MAX_PUT_SIZE - 1]);
+    assertThat(pool.get(MAX_PUT_SIZE, byte[].class)).hasLength(MAX_PUT_SIZE);
+  }
+
+  @Test
+  public void get_withPoolLessThanHalfFull_returnsFromPools() {
+    int size = MAX_SIZE / 2;
+    byte[] expected = new byte[size];
+    pool.put(expected);
+    assertThat(pool.get(1, byte[].class)).isSameAs(expected);
+  }
+
+  @Test
+  public void get_withPoolMoreThanHalfFull_sizeMoreThanHalfArrayInPool_returnsArray() {
+    Set<byte[]> expected = new HashSet<>();
+    for (int i = 0; i < 3; i++) {
+      byte[] toPut = new byte[MAX_SIZE / 3];
+      expected.add(toPut);
+      pool.put(toPut);
+    }
+    byte[] received = pool.get(2, byte[].class);
+    assertThat(expected).contains(received);
+  }
+
+  @Test
+  public void get_withPoolMoreThanHalfFull_sizeLessThanHalfArrayInPool_returnsNewArray() {
+    pool = new LruArrayPool(100);
+    for (int i = 0; i < 3; i++) {
+      byte[] toPut = new byte[100 / 3];
+      pool.put(toPut);
+    }
+    int requestedSize = 100 / 3 / LruArrayPool.MAX_OVER_SIZE_MULTIPLE;
+    byte[] received = pool.get(requestedSize, byte[].class);
+    assertThat(received).hasLength(requestedSize);
+  }
+
+  @Test
+  public void getExact_withEmptyPool_returnsExactArray() {
+    byte[] result = pool.getExact(MAX_PUT_SIZE, byte[].class);
+    assertThat(result).hasLength(MAX_PUT_SIZE);
+  }
+
+  @Test
+  public void getExact_withPoolContainingLargerArray_returnsExactArray() {
+    pool.put(new byte[MAX_PUT_SIZE]);
+    int expectedSize = MAX_PUT_SIZE - 1;
+    assertThat(pool.getExact(expectedSize, byte[].class)).hasLength(expectedSize);
+  }
+
+  @Test
+  public void getExact_withPoolContainingSmallerArray_returnsExactArray() {
+    pool.put(new byte[MAX_PUT_SIZE - 1]);
+    assertThat(pool.getExact(MAX_PUT_SIZE, byte[].class)).hasLength(MAX_PUT_SIZE);
+  }
+
+  @Test
+  public void getExact_withPoolContainingExactArray_returnsArray() {
+    byte[] expected = new byte[MAX_PUT_SIZE];
+    pool.put(expected);
+    assertThat(pool.getExact(MAX_PUT_SIZE, byte[].class)).isSameAs(expected);
+  }
+
+  @Test
+  public void put_withArrayMoreThanHalfPoolSize_doesNotRetainArray() {
+    int targetSize = (MAX_SIZE / 2) + 1;
+    byte[] toPut = new byte[targetSize];
+    pool.put(toPut);
+    assertThat(pool.getCurrentSize()).isEqualTo(0);
+    assertThat(pool.get(targetSize, byte[].class)).isNotSameAs(toPut);
+  }
+
   private void testTrimMemory(int fillSize, int trimLevel, int expectedSize) {
     pool = new LruArrayPool(MAX_SIZE);
     fillPool(pool, fillSize / ADAPTER.getElementSizeInBytes(), 1);
@@ -95,7 +183,7 @@ private void testTrimMemory(int fillSize, int trimLevel, int expectedSize) {
 
   private void fillPool(LruArrayPool pool, int arrayCount, int arrayLength) {
     for (int i = 0; i < arrayCount; i++) {
-      pool.put(createArray(ARRAY_CLASS, arrayLength, 10), ARRAY_CLASS);
+      pool.put(createArray(ARRAY_CLASS, arrayLength, 10));
     }
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
index d9c83028f..de91ea572 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
@@ -4,11 +4,10 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 
-import com.bumptech.glide.load.Key;
+import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.tests.Util;
 import java.io.File;
 import java.io.IOException;
-import java.security.MessageDigest;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -22,14 +21,14 @@
 public class DiskLruCacheWrapperTest {
   private DiskCache cache;
   private byte[] data;
-  private StringKey key;
+  private ObjectKey key;
   private File dir;
 
   @Before
   public void setUp() {
     dir = RuntimeEnvironment.application.getCacheDir();
     cache = DiskLruCacheWrapper.create(dir, 10 * 1024 * 1024);
-    key = new StringKey("test" + Math.random());
+    key = new ObjectKey("test" + Math.random());
     data = new byte[] { 1, 2, 3, 4, 5, 6 };
   }
 
@@ -137,17 +136,4 @@ public boolean write(File file) {
 
     assertArrayEquals(data, received);
   }
-
-  private static final class StringKey implements Key {
-    private final String key;
-
-    StringKey(String key) {
-      this.key = key;
-    }
-
-    @Override
-    public void updateDiskCacheKey(MessageDigest messageDigest) {
-      messageDigest.update(key.getBytes());
-    }
-  }
 }
diff --git a/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java b/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
index 619a8014f..f80441cfb 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
@@ -105,7 +105,7 @@ public void testReplace_returnsPreviouslyRegisteredFactories_withModelAndDataCla
     multiFactory.append(String.class, String.class, firstOtherFactory);
     multiFactory.append(String.class, String.class, secondOtherFactory);
 
-    List<ModelLoaderFactory<String, String>> removed =
+    List<ModelLoaderFactory<? extends String, ? extends String>> removed =
         multiFactory.replace(String.class, String.class, firstFactory);
     assertThat(removed).containsExactly(firstOtherFactory, secondOtherFactory);
   }
@@ -127,7 +127,7 @@ public void testRemove_returnsPreviouslyRegisteredFactories_withModelAndDataClas
     multiFactory.append(String.class, String.class, other);
     multiFactory.append(String.class, String.class, firstFactory);
 
-    List<ModelLoaderFactory<String, String>> removed =
+    List<ModelLoaderFactory<? extends String, ? extends String>> removed =
         multiFactory.remove(String.class, String.class);
     assertThat(removed).containsExactly(firstFactory, other);
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
index ccfd2f056..087c606d3 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
@@ -49,9 +49,7 @@ public void testEqualsHashCodeDigest() throws NoSuchAlgorithmException {
             UnitTransformation.get(),
             UnitTransformation.get())
         .addEquivalenceGroup(other)
-        .addRegressionTest(
-            UnitTransformation.get(),
-            "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
+        .addEmptyDigestRegressionTest(UnitTransformation.get())
         .test();
   }
 }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
index e64b9e2be..d93bc231c 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
@@ -3,6 +3,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 import android.content.Context;
@@ -13,10 +14,13 @@
 import android.graphics.Rect;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
+import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.tests.KeyTester;
 import com.bumptech.glide.tests.Util;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -28,6 +32,7 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
 public class CircleCropTest {
+  @Rule public final KeyTester keyTester = new KeyTester();
   @Mock private BitmapPool bitmapPool;
 
   private CircleCrop circleCrop;
@@ -85,6 +90,16 @@ public void testTransform_withNarrowRectangle() {
     assertSamePixels(expected, result);
   }
 
+  @Test
+  public void testEquals() {
+    keyTester
+        .addEquivalenceGroup(circleCrop, new CircleCrop())
+        .addEquivalenceGroup(mock(Transformation.class))
+        .addRegressionTest(
+            new CircleCrop(), "1442365bcc658f89310e39844ef4be58f4b16e52c283254e5a458020f56acb90")
+        .test();
+  }
+
   private void assertSamePixels(Bitmap expected, Bitmap actual) {
     assertEquals(expected.getWidth(), actual.getWidth());
     assertEquals(expected.getHeight(), actual.getHeight());
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
index fccc93b6a..b95fee2ba 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
@@ -22,8 +22,12 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
 import com.bumptech.glide.load.resource.SimpleResource;
+import com.bumptech.glide.tests.KeyTester;
+import com.bumptech.glide.tests.Util;
+import java.security.MessageDigest;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -37,9 +41,9 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class DrawableTransformationTest {
-
-  private BitmapPool bitmapPool;
+  @Rule public final KeyTester keyTester = new KeyTester();
   @Mock private Transformation<Bitmap> bitmapTransformation;
+  private BitmapPool bitmapPool;
   private DrawableTransformation transformation;
   private Context context;
 
@@ -110,7 +114,7 @@ public void transform_withColorDrawable_andUnitBitmapTransformation_recycles() {
     ColorDrawable colorDrawable = new ColorDrawable(Color.RED);
     final Resource<Drawable> input = new SimpleResource<Drawable>(colorDrawable);
 
-    doAnswer(new Answer() {
+    doAnswer(new Answer<Void>() {
       @Override
       public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
         Bitmap bitmap = (Bitmap) invocationOnMock.getArguments()[0];
@@ -135,6 +139,33 @@ public Bitmap answer(InvocationOnMock invocationOnMock) throws Throwable {
     verify(bitmapPool).put(isA(Bitmap.class));
   }
 
+  @Test
+  public void testEquals() {
+    BitmapTransformation otherBitmapTransformation = mock(BitmapTransformation.class);
+    doAnswer(new Util.WriteDigest("bitmapTransformation"))
+        .when(bitmapTransformation).updateDiskCacheKey(any(MessageDigest.class));
+    doAnswer(new Util.WriteDigest("otherBitmapTransformation"))
+        .when(otherBitmapTransformation).updateDiskCacheKey(any(MessageDigest.class));
+
+    keyTester
+        .addEquivalenceGroup(
+            transformation,
+            new DrawableTransformation(bitmapTransformation, /*isRequired=*/ true),
+            new DrawableTransformation(bitmapTransformation, /*isRequired=*/ false))
+        .addEquivalenceGroup(bitmapTransformation)
+        .addEquivalenceGroup(otherBitmapTransformation)
+        .addEquivalenceGroup(
+            new DrawableTransformation(otherBitmapTransformation, /*isRequired=*/ true),
+            new DrawableTransformation(otherBitmapTransformation, /*isRequired=*/ false))
+        .addRegressionTest(
+            new DrawableTransformation(bitmapTransformation, /*isRequired=*/ true),
+            "eddf60c557a6315a489b8a3a19b12439a90381256289fbe9a503afa726230bd9")
+        .addRegressionTest(
+            new DrawableTransformation(otherBitmapTransformation, /*isRequired=*/ false),
+            "40931536ed0ec97c39d4be10c44f5b69a86030ec575317f5a0f17e15a0ea9be8")
+        .test();
+  }
+
   @SuppressWarnings("unchecked")
   private static Resource<Bitmap> anyBitmapResource() {
     return any(Resource.class);
diff --git a/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java b/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
index 1bdf84a28..1efd9b736 100644
--- a/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
+++ b/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
@@ -72,11 +72,11 @@ public void testPortrait() throws IOException {
   @Test
   public void testHandlesInexactSizesInByteArrayPools() {
     for (int i = 1; i <= 8; i++) {
-      byteArrayPool.put(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES], byte[].class);
+      byteArrayPool.put(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
       assertOrientation("Portrait", i);
     }
     for (int i = 1; i <= 8; i++) {
-      byteArrayPool.put(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES], byte[].class);
+      byteArrayPool.put(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
       assertOrientation("Landscape", i);
     }
   }
diff --git a/library/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java b/library/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java
new file mode 100644
index 000000000..a10b26cd7
--- /dev/null
+++ b/library/src/test/java/com/bumptech/glide/signature/EmptySignatureTest.java
@@ -0,0 +1,27 @@
+package com.bumptech.glide.signature;
+
+
+import static org.mockito.Mockito.mock;
+
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.tests.KeyTester;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class EmptySignatureTest {
+  @Rule public final KeyTester keyTester = new KeyTester();
+
+  @Test
+  public void testEquals() {
+    keyTester
+        .addEquivalenceGroup(
+            EmptySignature.obtain(),
+            EmptySignature.obtain())
+        .addEquivalenceGroup(mock(Key.class))
+        .addEmptyDigestRegressionTest(EmptySignature.obtain())
+        .test();
+  }
+}
diff --git a/library/src/test/java/com/bumptech/glide/tests/KeyTester.java b/library/src/test/java/com/bumptech/glide/tests/KeyTester.java
index f5955c19c..8a064db54 100644
--- a/library/src/test/java/com/bumptech/glide/tests/KeyTester.java
+++ b/library/src/test/java/com/bumptech/glide/tests/KeyTester.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.tests;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assert_;
 import static org.junit.Assert.fail;
 
 import android.support.annotation.CheckResult;
@@ -19,6 +20,8 @@
 import org.junit.runners.model.Statement;
 
 public final class KeyTester implements TestRule {
+  private static final String EMPTY_DIGEST_STRING =
+      "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
   // Use LinkedHashMap to keep iteration based on insertion order.
   private final Map<Key, String> regressionTests = new LinkedHashMap<>();
   private final Sha256 sha256 = new Sha256();
@@ -32,14 +35,11 @@ public Statement apply(final Statement base, Description description) {
 
       @Override
       public void evaluate() throws Throwable {
-        try {
           isUsedAsRule = true;
           base.evaluate();
-        } finally {
           if (isUsedWithoutCallingTest) {
             fail("You used KeyTester but failed to call test()!");
           }
-        }
       }
     };
   }
@@ -61,6 +61,20 @@ public KeyTester addEquivalenceGroup(Key first, Key... rest) {
   @CheckResult
   public KeyTester addRegressionTest(Key key, String expectedDigest) {
     assertUsedAsRule();
+    if (EMPTY_DIGEST_STRING.equals(expectedDigest)) {
+      throw new IllegalArgumentException("Expected digest is empty, if this is intended use "
+          + "addEmptyDigestRegressionTest instead");
+    }
+    return addRegressionTestInternal(key, expectedDigest);
+  }
+
+  @CheckResult
+  public KeyTester addEmptyDigestRegressionTest(Key key) {
+    assertUsedAsRule();
+    return addRegressionTestInternal(key, EMPTY_DIGEST_STRING);
+  }
+
+  private KeyTester addRegressionTestInternal(Key key, String expectedDigest) {
     isUsedWithoutCallingTest = true;
     String oldValue = regressionTests.put(key, expectedDigest);
     if (oldValue != null) {
@@ -76,8 +90,13 @@ public void test() {
     tester.test();
 
     assertThat(regressionTests).isNotEmpty();
+    int i = 1;
     for (Entry<Key, String> entry : regressionTests.entrySet()) {
-      assertThat(sha256.getStringDigest(entry.getKey())).isEqualTo(entry.getValue());
+      assert_()
+          .withMessage(
+              "Unexpected digest for regression test [" + i + "]: with key: " + entry.getKey())
+          .that(sha256.getStringDigest(entry.getKey())).isEqualTo(entry.getValue());
+      i++;
     }
   }
 
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
index 82536104f..d1b57740e 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
@@ -65,13 +65,14 @@
     LIST
   }
 
-  private static final Map<Page, Integer> PAGE_TO_TITLE = new HashMap<Page, Integer>() {
-    {
-      put(Page.SMALL, R.string.small);
-      put(Page.MEDIUM, R.string.medium);
-      put(Page.LIST, R.string.list);
-    }
-  };
+  private static final Map<Page, Integer> PAGE_TO_TITLE;
+  static {
+    Map<Page, Integer> temp = new HashMap<>();
+    temp.put(Page.SMALL, R.string.small);
+    temp.put(Page.MEDIUM, R.string.medium);
+    temp.put(Page.LIST, R.string.list);
+    PAGE_TO_TITLE = Collections.unmodifiableMap(temp);
+  }
 
   @Override
   public void onAttachFragment(Fragment fragment) {
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
index 7e84c1277..6fa99de2c 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
@@ -72,7 +72,9 @@ private static String getSizeKey(int width, int height) {
 
     boolean isFirstLargest = true;
     List<String> result = new ArrayList<>();
-    for (int edge : SORTED_SIZE_KEYS) {
+    int size = result.size();
+    for (int i = 0; i < size; i++) {
+      int edge = SORTED_SIZE_KEYS.get(i);
       if (largestEdge <= edge) {
         if (isFirstLargest) {
           isFirstLargest = false;
diff --git a/samples/imgur/build.gradle b/samples/imgur/build.gradle
index e1e3a27e0..1c0dd1fcf 100644
--- a/samples/imgur/build.gradle
+++ b/samples/imgur/build.gradle
@@ -49,6 +49,10 @@ dependencies {
     implementation "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
     implementation "com.android.support:cardview-v7:${ANDROID_SUPPORT_VERSION}"
     implementation "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+
+    // Fixes a compilation warning related to dagger, see
+    // https://github.com/google/guava/issues/2721.
+    compileOnly "com.google.errorprone:error_prone_annotations:2.0.19"
 }
 
 task run(type: Exec, dependsOn: 'installDebug') {
diff --git a/scripts/update_javadocs.sh b/scripts/update_javadocs.sh
index a8646613b..9383a4c8c 100755
--- a/scripts/update_javadocs.sh
+++ b/scripts/update_javadocs.sh
@@ -43,6 +43,10 @@ GIT_COMMIT_SHA="$(git rev-parse HEAD)"
 ./gradlew clean releaseJavadocJar javadoc
 rm -rf $TEMP_DIR
 cp -r glide/build/docs/javadoc $TEMP_DIR
+
+# Add the favicon to the javadocs pages.
+find $TEMP_DIR -name '*.html' -exec sed -i '' -e 's#<head>#<head><link rel="apple-touch-icon" sizes="180x180" href="/glide/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/glide/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/glide/favicon-16x16.png"><link rel="manifest" href="/glide/manifest.json">#' {} \;
+
 git checkout gh-pages
 rm -rf "${JAVADOC_GH_PAGES_DIR}/${1}"
 cp -r $TEMP_DIR $JAVADOC_GH_PAGES_DIR/$1
