diff --git a/annotation/compiler/build.gradle b/annotation/compiler/build.gradle
index 656534bf7..8ff91d3cb 100644
--- a/annotation/compiler/build.gradle
+++ b/annotation/compiler/build.gradle
@@ -22,10 +22,13 @@ dependencies {
     compile files(Jvm.current().getToolsJar())
 }
 
-def repackagedJar = file("$buildDir/intermediates/repackaged.jar")
-def proguardedJar = file("$buildDir/intermediates/proguarded.jar")
+def packagingFolder = file("${buildDir}/intermediates")
+def repackagedJar = file("${packagingFolder}/repackaged.jar")
+def proguardedJar = file("${packagingFolder}/proguarded.jar")
 
 task compiledJar(type: Jar, dependsOn: classes) {
+    destinationDir = packagingFolder
+    archiveName = 'compiled.jar'
     from sourceSets.main.output
 }
 
@@ -49,7 +52,7 @@ task jarjar(dependsOn: [tasks.compiledJar, configurations.compileOnly]) {
                         'META-INF/services/javax.annotation.processing.Processor'
                     ].join(','))
                 }
-                zipfileset(src: tasks.jar.archivePath)
+                zipfileset(src: tasks.compiledJar.archivePath)
                 def repackageIntoGlide = 'com.bumptech.glide.repackaged.@0'
                 rule result: repackageIntoGlide, pattern: 'com.squareup.javapoet.**'
                 rule result: repackageIntoGlide, pattern: 'com.google.auto.**'
@@ -71,7 +74,7 @@ task proguard(type: ProGuardTask, dependsOn: tasks.jarjar) {
     libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
 }
 
-// Create the standard jar artifact based on our repackaged and proguarded jar.
+// Create the standard jar artifact based on our compiled, repackaged and proguarded jar.
 jar {
     dependsOn proguard
     from zipTree(proguardedJar)
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
index 17f64f327..063f8681a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
@@ -15,9 +15,9 @@
 
 /**
  * Runs the final steps of Glide's annotation process and generates the combined
- * {@link AppGlideModule}, {@link com.bumptech.glide.Glide},
- * {@link com.bumptech.glide.RequestManager}, and
- * {@link com.bumptech.glide.request.RequestOptions} classes.
+ * {@code AppGlideModule}, {@code com.bumptech.glide.Glide},
+ * {@code com.bumptech.glide.RequestManager}, and
+ * {@code com.bumptech.glide.request.RequestOptions} classes.
  */
 final class AppModuleProcessor {
   private static final String COMPILER_PACKAGE_NAME =
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java
index 9046219e2..0c356b316 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java
@@ -16,8 +16,8 @@
  * Generates classes based on Glide's annotations that configure Glide, add support for additional
  * resource types, and/or extend Glide's API.
  *
- * <p>This processor discovers all {@link AppGlideModule} and
- * {@link LibraryGlideModule} implementations that are
+ * <p>This processor discovers all {@code AppGlideModule} and
+ * {@code LibraryGlideModule} implementations that are
  * annotated with {@link com.bumptech.glide.annotation.GlideModule}. Any implementations missing the
  * annotation will be ignored.
  *
@@ -26,42 +26,42 @@
  *
  * <p>Multiple classes are generated by this processor:
  * <ul>
- *   <li>For {@link LibraryGlideModule}s - A GlideIndexer class in a
+ *   <li>For {@code LibraryGlideModule}s - A GlideIndexer class in a
  *      specific package that will later be used by the processor to discover all
- *      {@link LibraryGlideModule} classes.
- *   <li>For {@link AppGlideModule}s - A single
- *      {@link AppGlideModule} implementation
- *     ({@link com.bumptech.glide.GeneratedAppGlideModule}) that calls all
- *     {@link LibraryGlideModule}s and the
- *     original {@link AppGlideModule} in the correct order when Glide is
+ *      {@code LibraryGlideModule} classes.
+ *   <li>For {@code AppGlideModule}s - A single
+ *      {@code AppGlideModule} implementation
+ *     ({@code com.bumptech.glide.GeneratedAppGlideModule}) that calls all
+ *     {@code LibraryGlideModule}s and the
+ *     original {@code AppGlideModule} in the correct order when Glide is
  *     initialized.
  *   <li>{@link com.bumptech.glide.annotation.GlideExtension}s -
  *   <ul>
- *     <li>A {@link com.bumptech.glide.request.RequestOptions} implementation that contains
+ *     <li>A {@code com.bumptech.glide.request.RequestOptions} implementation that contains
  *     static versions of all builder methods in the base class and both static and instance
  *     versions of methods in all {@link com.bumptech.glide.annotation.GlideExtension}s.
  *     <li>If one or more methods in one or more
  *     {@link com.bumptech.glide.annotation.GlideExtension} annotated classes are annotated with
  *     {@link GlideType}:
  *     <ul>
- *       <li>A {@link com.bumptech.glide.RequestManager} implementation containing a generated
+ *       <li>A {@code com.bumptech.glide.RequestManager} implementation containing a generated
  *       method for each method annotated with
  *       {@link GlideType}.
- *       <li>A {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}
- *       implementation that produces the generated {@link com.bumptech.glide.RequestManager}s.
- *       <li>A {@link com.bumptech.glide.Glide} look-alike that implements all static methods in
- *       the {@link com.bumptech.glide.Glide} singleton and returns the generated
- *       {@link com.bumptech.glide.RequestManager} implementation when appropriate.
+ *       <li>A {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}
+ *       implementation that produces the generated {@code com.bumptech.glide.RequestManager}s.
+ *       <li>A {@code com.bumptech.glide.Glide} look-alike that implements all static methods in
+ *       the {@code com.bumptech.glide.Glide} singleton and returns the generated
+ *       {@code com.bumptech.glide.RequestManager} implementation when appropriate.
  *     </ul>
  *   </ul>
  * </ul>
  *
- * <p>{@link AppGlideModule} implementations must only be included in
+ * <p>{@code AppGlideModule} implementations must only be included in
  * applications, not in libraries. There must be exactly one
- * {@link AppGlideModule} implementation per
- * Application. The {@link AppGlideModule} class is
+ * {@code AppGlideModule} implementation per
+ * Application. The {@code AppGlideModule} class is
  * used as a signal that all modules have been found and that the final merged
- * {@link com.bumptech.glide.GeneratedAppGlideModule} impl can be created.
+ * {@code com.bumptech.glide.GeneratedAppGlideModule} impl can be created.
  */
 @AutoService(Processor.class)
 public final class GlideAnnotationProcessor extends AbstractProcessor {
@@ -96,17 +96,19 @@ public SourceVersion getSupportedSourceVersion() {
   }
 
    /**
-   * Each round we do the following:
-   * <ol>
-   *   <li>Find all AppGlideModules and save them to an instance variable (throw if > 1).
-   *   <li>Find all LibraryGlideModules
-   *   <li>For each LibraryGlideModule, write an Indexer with an Annotation with the class name.
-   *   <li>If we wrote any Indexers, return and wait for the next round.
-   *   <li>If we didn't write any Indexers and there is a AppGlideModule, write the
-   *   GeneratedAppGlideModule. Once the GeneratedAppGlideModule is written, we expect to be
-   *   finished. Any further generation of related classes will result in errors.
-   * </ol>
-   */
+    * Each round we do the following:
+    * <ol>
+    *   <li>Find all {@code AppGlideModule}s and save them to an instance variable (throw if > 1).
+    *   <li>Find all {@code LibraryGlideModule}s
+    *   <li>For each {@code LibraryGlideModule},
+    *       write an {@code Indexer} with an Annotation with the class name.
+    *   <li>If we wrote any {@code Indexer}s, return and wait for the next round.
+    *   <li>If we didn't write any {@code Indexer}s and there is a {@code AppGlideModule},
+    *       write the {@code GeneratedAppGlideModule}.
+    *       Once the {@code GeneratedAppGlideModule} is written, we expect to be finished.
+    *       Any further generation of related classes will result in errors.
+    * </ol>
+    */
   @Override
   public boolean process(Set<? extends TypeElement> set, RoundEnvironment env) {
     processorUtil.process();
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
index 99805e9b0..b367a9999 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
@@ -23,7 +23,7 @@
  * Generates a Glide look-alike that acts as the entry point to the generated API
  * (GlideApp.with(...)).
  *
- * <p>>Generated {@link com.bumptech.glide.Glide} look-alikes look like this (note that the name
+ * <p>>Generated {@code com.bumptech.glide.Glide} look-alikes look like this (note that the name
  * is configurable in {@link com.bumptech.glide.annotation.GlideModule}):
  * <pre>
  * <code>
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/LibraryModuleProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/LibraryModuleProcessor.java
index 8f79cb7e2..85027ea18 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/LibraryModuleProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/LibraryModuleProcessor.java
@@ -11,7 +11,7 @@
 
 /**
  * Generates Indexer classes annotated with {@link Index} for all
- * {@link LibraryGlideModule}s.
+ * {@code LibraryGlideModule}s.
  */
 final class LibraryModuleProcessor {
   private ProcessorUtil processorUtil;
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 372d5b005..c3e75c457 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -33,8 +33,8 @@
 import javax.lang.model.type.TypeMirror;
 
 /**
- * Generates a {@link com.bumptech.glide.RequestBuilder} subclass containing all methods from
- * the base class, all methods from {@link com.bumptech.glide.request.RequestOptions} and all
+ * Generates a {@code com.bumptech.glide.RequestBuilder} subclass containing all methods from
+ * the base class, all methods from {@code com.bumptech.glide.request.RequestOptions} and all
  * non-override {@link GlideOption} annotated methods in {@link GlideExtension} annotated
  * classes.
  *
@@ -177,8 +177,8 @@ TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedO
   }
 
   /**
-   * Generates overrides of all methods in {@link com.bumptech.glide.RequestBuilder} that return
-   * {@link com.bumptech.glide.RequestBuilder} so that they return our generated subclass instead.
+   * Generates overrides of all methods in {@code com.bumptech.glide.RequestBuilder} that return
+   * {@code com.bumptech.glide.RequestBuilder} so that they return our generated subclass instead.
    */
   private List<MethodSpec> generateRequestBuilderOverrides() {
     TypeMirror rawRequestBuilderType =
@@ -194,8 +194,8 @@ public MethodSpec apply(ExecutableElement input) {
   }
 
   /**
-   * Generates an override of a particular method in {@link com.bumptech.glide.RequestBuilder} that
-   * returns {@link com.bumptech.glide.RequestBuilder} so that it returns our generated subclass
+   * Generates an override of a particular method in {@code com.bumptech.glide.RequestBuilder} that
+   * returns {@code com.bumptech.glide.RequestBuilder} so that it returns our generated subclass
    * instead.
    */
   private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOverride) {
@@ -234,7 +234,7 @@ public String apply(VariableElement input) {
    * Generates methods with equivalent names and arguments to methods annotated with
    * {@link GlideOption} in
    * {@link com.bumptech.glide.annotation.GlideExtension}s that return our generated
-   * {@link com.bumptech.glide.RequestBuilder} subclass.
+   * {@code com.bumptech.glide.RequestBuilder} subclass.
    */
   private List<MethodSpec> generateGeneratedRequestOptionsEquivalents(
       @Nullable final TypeSpec generatedOptions) {
@@ -260,10 +260,10 @@ public MethodSpec apply(MethodSpec input) {
 
   /**
    * Returns {@code true} if the given {@link MethodSpec} is a useful method to have in our
-   * {@link com.bumptech.glide.RequestBuilder} subclass.
+   * {@code com.bumptech.glide.RequestBuilder} subclass.
    *
    * <p>Only newly generated methods will be included in the generated
-   * {@link com.bumptech.glide.request.BaseRequestBuilder} subclass, so we only have to filter out
+   * {@code com.bumptech.glide.request.BaseRequestBuilder} subclass, so we only have to filter out
    * methods that override other methods to avoid duplicates.
    */
   private boolean isUsefulGeneratedRequestOption(MethodSpec requestOptionMethod) {
@@ -277,7 +277,7 @@ private boolean isUsefulGeneratedRequestOption(MethodSpec requestOptionMethod) {
 
    /**
    * Generates a particular method with  an equivalent name and arguments to the given method
-   * from the generated {@link com.bumptech.glide.request.BaseRequestBuilder} subclass.
+   * from the generated {@code com.bumptech.glide.request.BaseRequestBuilder} subclass.
    */
   private MethodSpec generateGeneratedRequestOptionEquivalent(MethodSpec requestOptionMethod) {
     CodeBlock callRequestOptionsMethod = CodeBlock.builder()
@@ -369,7 +369,7 @@ public boolean apply(AnnotationSpec input) {
   }
 
   /**
-   * Overrides the protected downloadOnly method in {@link com.bumptech.glide.RequestBuilder} to
+   * Overrides the protected downloadOnly method in {@code com.bumptech.glide.RequestBuilder} to
    * return our generated subclass instead.
    */
   private MethodSpec generateDownloadOnlyRequestMethod() {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
index a86bb1a37..eb923f37a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
@@ -10,10 +10,10 @@
 
 /**
  * Generates an implementation of
- * {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory} that returns a
- * generated {@link com.bumptech.glide.RequestManager} implementation.
+ * {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory} that returns a
+ * generated {@code com.bumptech.glide.RequestManager} implementation.
  *
- * <p>Generated {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}
+ * <p>Generated {@code com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory}
  * classes look like this:
  * <pre>
  * <code>
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index 1c20fe858..ebe989466 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -30,10 +30,10 @@
 import javax.lang.model.util.Elements;
 
 /**
- * Generates an implementation of {@link com.bumptech.glide.RequestManager} that contains generated
+ * Generates an implementation of {@code com.bumptech.glide.RequestManager} that contains generated
  * methods from {@link GlideExtension}s and {@link GlideType}.
  *
- * <p>Generated {@link com.bumptech.glide.RequestManager} implementations look like this:
+ * <p>Generated {@code com.bumptech.glide.RequestManager} implementations look like this:
  * <pre>
  * <code>
  * public final class GeneratedRequestManager extends RequestManager {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 209b7715b..4f2df6d6e 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -38,7 +38,7 @@
 import javax.lang.model.element.VariableElement;
 
 /**
- * Generates a new implementation of {@link com.bumptech.glide.request.RequestOptions}
+ * Generates a new implementation of {@code com.bumptech.glide.request.RequestOptions}
  * containing static versions of methods included in the base class and static and instance versions
  * of all methods annotated with {@link GlideOption} in classes annotated with
  * {@link GlideExtension}.
@@ -327,7 +327,7 @@ public String apply(VariableElement input) {
    * an existing method in RequestOptions.
    *
    * <p>The string names here just map between the static methods in
-   * {@link com.bumptech.glide.request.RequestOptions} and the instance methods they call.
+   * {@code com.bumptech.glide.request.RequestOptions} and the instance methods they call.
    */
   private static String getInstanceMethodNameFromStaticMethodName(String staticMethodName) {
     String equivalentInstanceMethodName;
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
index 679eb8bce..dc91418e2 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
@@ -16,7 +16,7 @@
 public @interface GlideModule {
   /**
    * Returns the name of the class that will be used as a replacement for
-   * {@link com.bumptech.glide.Glide} in Applications that depend on Glide's generated code.
+   * {@code com.bumptech.glide.Glide} in Applications that depend on Glide's generated code.
    */
   String glideName() default "GlideApp";
 }
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
index 50bfbecb0..70d7b4cbb 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
@@ -7,10 +7,10 @@
 
 /**
  * Identifies methods in {@link GlideExtension} annotated classes that extend
- * {@link com.bumptech.glide.request.RequestOptions}.
+ * {@code com.bumptech.glide.request.RequestOptions}.
  *
  * <p>All annotated methods will be added to a single
- * {@link com.bumptech.glide.request.RequestOptions} implementation generated per application.
+ * {@code com.bumptech.glide.request.RequestOptions} implementation generated per application.
  * Overlapping method names in different extensions may cause errors at compile time.
  *
  * <p>Static equivalents of annotated methods will also be generated.
@@ -51,7 +51,7 @@
 
   /**
    * {@code true} to indicate that it's safe to statically memoize the result of this method using
-   * {@link com.bumptech.glide.request.RequestOptions#autoClone()}.
+   * {@code com.bumptech.glide.request.RequestOptions#autoClone()}.
    *
    * <p>This method should only be used for no-arg methods where there's only a single possible
    * value.
@@ -65,8 +65,8 @@
    *
    * <p>By default static methods are generated for all methods annotated with
    * {@link GlideOption}. These static factory methods allow for a cleaner API when used
-   * with {@link com.bumptech.glide.RequestBuilder#apply}. The static factory method by default
-   * simply creates a new {@link com.bumptech.glide.request.RequestOptions} object, calls the
+   * with {@code com.bumptech.glide.RequestBuilder#apply}. The static factory method by default
+   * simply creates a new {@code com.bumptech.glide.request.RequestOptions} object, calls the
    * instance version of the method on it and returns it. For example:
    * <pre>
    * <code>
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java
index f0c19a599..4b51ed1c6 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java
@@ -7,10 +7,10 @@
 
 /**
  * Identifies methods in {@link GlideExtension} annotated classes that extend
- * {@link com.bumptech.glide.RequestManager}.
+ * {@code com.bumptech.glide.RequestManager}.
  *
  * <p>If one or more method is found with this annotation, an additional API entry point that
- * exposes a generated {@link com.bumptech.glide.RequestManager} subclass will be created. The
+ * exposes a generated {@code com.bumptech.glide.RequestManager} subclass will be created. The
  * generated API entry point acts as a drop in replacement for Glide. Glide.with(fragment) becomes
  * GlideApp.with(fragment). Although the Glide.with variant will still be available, only the new
  * API entry point will provide access to these additional methods.
@@ -22,7 +22,7 @@
  * with {@link GlideExtension}.
  *
  * <p>Methods annotated with GlideType must have a single parameter. The type of the
- * single parameter must be {@link com.bumptech.glide.request.RequestOptions}, with a type
+ * single parameter must be {@code com.bumptech.glide.request.RequestOptions}, with a type
  * matching the value of {@link #value()}.
  */
 @Target(ElementType.METHOD)
@@ -33,7 +33,7 @@
   /**
    * A Resource class name, like GifDrawable.class, Bitmap.class etc.
    *
-   * <p>Must match the type of the {@link com.bumptech.glide.request.RequestOptions} parameter.
+   * <p>Must match the type of the {@code com.bumptech.glide.request.RequestOptions} parameter.
    */
   Class<?> value();
 }
diff --git a/checkstyle.xml b/checkstyle.xml
index ec3f4a74d..821938198 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -15,7 +15,9 @@
     </module>
 
     <!-- Ensure trailling newline for compatibility -->
-    <module name="NewlineAtEndOfFile" />
+    <module name="NewlineAtEndOfFile">
+        <property name="lineSeparator" value="lf"/>
+    </module>
 
     <!-- Space after 'for' and 'if' -->
     <module name="RegexpSingleline">
diff --git a/glide/build.gradle b/glide/build.gradle
index 8a1ac2bff..a5f480f66 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -1,3 +1,5 @@
+import com.android.build.gradle.api.LibraryVariant
+
 apply plugin: 'java'
 
 // The paths of Android projects that should be included in the jar and javadoc.
@@ -27,12 +29,12 @@ static def getJavaPathsForJavadoc() {
 }
 
 (getAndroidPathsForJavadoc() + getAndroidPathsForJar() +
-        getJavaPathsForJar() + getJavaPathsForJavadoc()).forEach {
+        getJavaPathsForJar() + getJavaPathsForJavadoc()).each {
     evaluationDependsOn(it)
 }
 
 def asProjects(paths) {
-    paths.collect { project(it) }
+    paths.collect { String path -> project(path) }
 }
 
 def getAndroidSdkDirectory() {
@@ -93,10 +95,6 @@ def getAndroidJar() {
     "${getAndroidSdkDirectory()}/platforms/${getAndroidCompileSdkVersion()}/android.jar"
 }
 
-def getSupportJar() {
-    "${getAndroidSdkDirectory()}/extras/android/support/v4/android-support-v4.jar"
-}
-
 project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
 // Generate javadocs and sources containing batched documentation and sources for all internal
@@ -104,31 +102,33 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 ['release', 'debug'].each { variantName ->
 
     task("${variantName}SourceJar", type: Jar) {
-      from getSourceFilesForVariantJar(variantName)
+        from getSourceFilesForVariantJar(variantName)
     }
 
-    def javadocTask = task("${variantName}Javadoc", type: Javadoc) {
+    def javadocTask = tasks.create("${variantName}Javadoc", Javadoc) {
         source = getSourceFilesForVariantJar(variantName)
         source += getSourceFilesForVariantJavadoc(variantName)
 
-        def classpathFiles = files(getAndroidLibraryVariantsForJar(variantName).collect {
-            files(it.javaCompile.classpath.files, getAndroidJar(), getSupportJar())
-        })
-        classpathFiles += files(getAndroidLibraryVariantsForJavadoc(variantName).collect {
-            files(it.javaCompile.classpath.files, getAndroidJar(), getSupportJar())
-        })
-        classpathFiles += (getInternalJavaProjectsForJavadoc().collect {
-            it.sourceSets.main.compileClasspath.files
-        }.flatten())
-        classpathFiles += (getInternalJavaProjectsForJar().collect {
-            it.sourceSets.main.compileClasspath.files
-        }.flatten())
-        // Finds dependencies of Android packages that would otherwise be ignored (Volley in
-        // particular)
-        classpathFiles += getInternalAndroidProjectsForJavadoc().collect {
-            files("${it.projectDir}/build/intermediates/classes/release")
-        }
-        classpath = files(classpathFiles)
+        classpath = project.files(
+                getAndroidJar(),
+                getAndroidLibraryVariantsForJar(variantName).collect { LibraryVariant lib ->
+                    lib.javaCompile.classpath.files
+                },
+                getAndroidLibraryVariantsForJavadoc(variantName).collect { LibraryVariant lib ->
+                    lib.javaCompile.classpath.files
+                },
+                getInternalJavaProjectsForJavadoc().collect { Project project ->
+                    project.sourceSets.main.compileClasspath.files
+                },
+                getInternalJavaProjectsForJar().collect { Project project ->
+                    project.sourceSets.main.compileClasspath.files
+                },
+                // Finds dependencies of Android packages that would otherwise be ignored (Volley in
+                // particular)
+                getInternalAndroidProjectsForJavadoc().collect { Project project ->
+                    project.file('build/intermediates/classes/release')
+                }
+        )
 
         options {
             links("http://docs.oracle.com/javase/7/docs/api/")
@@ -142,7 +142,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
         exclude '**/BuildConfig.java'
         exclude '**/R.java'
-    } as Javadoc
+    }
 
     def cleanJavadocTask = task("clean${variantName.capitalize()}Javadoc", type: Delete) {
         delete javadocTask.destinationDir
@@ -157,7 +157,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
 jar {
     from files(
-            getReleaseVariantAndroidProjectsForJar().collect { variant ->
+            getReleaseVariantAndroidProjectsForJar().collect { LibraryVariant variant ->
                 variant.javaCompile.destinationDir
             }
     )
diff --git a/gradle.properties b/gradle.properties
index 28f7a33bb..bf785e9f6 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,7 +18,7 @@ POM_DEVELOPER_EMAIL=judds@google.com
 ANDROID_SUPPORT_VERSION=26.0.2
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.0
-ANDROID_GRADLE_VERSION=2.3.0
+ANDROID_GRADLE_VERSION=2.3.3
 DAGGER_VERSION=2.11
 
 COVERALLS_GRADLE_VERSION=2.4.0
@@ -28,6 +28,7 @@ ROBOLECTRIC_VERSION=3.3.2
 MOCKWEBSERVER_VERSION=3.0.0-RC1
 TRUTH_VERSION=0.26
 
+PMD_VERSION=5.4.0
 FINDBUGS_VERSION=3.0.0
 JACOCO_VERSION=0.7.1.201405082137
 
@@ -37,3 +38,4 @@ TARGET_SDK_VERSION=26
 MIN_SDK_VERSION=14
 
 org.gradle.jvmargs=-Xmx2048M
+TEST_JVM_MEMORY_SIZE=2048M
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index bf1b63c34..26b61d748 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.2-all.zip
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index dcce0013f..b30b8fb59 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -5,7 +5,7 @@ dependencies {
     annotationProcessor project(':annotation:compiler')
 
     compile "com.squareup.okhttp:okhttp:2.7.1"
-    compile "com.android.support:support-annotations:{$ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/library/build.gradle b/library/build.gradle
index 52b79d6af..cad1fbc17 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -5,16 +5,6 @@ apply plugin: 'pmd'
 apply plugin: 'jacoco'
 apply plugin: 'com.github.kt3k.coveralls'
 
-findbugs {
-    toolVersion = FINDBUGS_VERSION
-}
-jacoco {
-    toolVersion = JACOCO_VERSION
-}
-coveralls {
-    jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
-}
-
 dependencies {
     compile project(':third_party:gif_decoder')
     compile project(':third_party:disklrucache')
@@ -31,12 +21,12 @@ dependencies {
     testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
 }
 
-android.testOptions.unitTests.all {
+android.testOptions.unitTests.all { Test testTask ->
     // configure max heap size of the test JVM
-    maxHeapSize = '2048m'
+    testTask.maxHeapSize = TEST_JVM_MEMORY_SIZE as String
     if (JavaVersion.current() <= JavaVersion.VERSION_1_7) {
         // Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=2048m; support was removed in 8.0
-        jvmArgs '-XX:MaxPermSize=2048m'
+        testTask.jvmArgs "-XX:MaxPermSize=${TEST_JVM_MEMORY_SIZE}"
     }
 }
 
@@ -70,14 +60,20 @@ afterEvaluate {
         return
     }
 
-    task findbugs(type: FindBugs, dependsOn: assembleDebug) {
+    findbugs {
+        toolVersion FINDBUGS_VERSION
+    }
+
+    tasks.create('findbugs', FindBugs) {
+        dependsOn tasks.assembleDebug
 
         description 'Run findbugs'
         group 'verification'
 
-        classes = fileTree('build/intermediates/classes/debug/')
-        source = fileTree('src/main/java')
+        classes = fileTree("${project.buildDir}/intermediates/classes/debug/")
+        source android.sourceSets.main.java.srcDirs
         classpath = project.configurations.compile
+        classpath += files(android.bootClasspath)
 
         effort = 'max'
 
@@ -92,10 +88,10 @@ afterEvaluate {
     check.dependsOn('findbugs')
 
     pmd {
-        toolVersion '5.4.0'
+        toolVersion PMD_VERSION
     }
 
-    task pmd(type: Pmd) {
+    tasks.create('pmd', Pmd) {
         targetJdk = TargetJdk.VERSION_1_7
 
         description 'Run pmd'
@@ -105,7 +101,7 @@ afterEvaluate {
         // defaults which override rules in the ruleset file...
         ruleSets = []
         ruleSetFiles = files('pmd-ruleset.xml')
-        source = fileTree('src/main/java')
+        source android.sourceSets.main.java.srcDirs
 
         reports {
             xml.enabled = false
@@ -115,13 +111,21 @@ afterEvaluate {
 
     check.dependsOn('pmd')
 
-    task jacocoTestReport(type: JacocoReport, dependsOn: testDebugUnitTest) {
-        def coverageSourceDirs = ['src/main/java']
+    jacoco {
+        toolVersion JACOCO_VERSION
+    }
+    coveralls {
+        jacocoReportPath = "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
+    }
+
+    tasks.create("jacocoTestReport", JacocoReport) {
+        dependsOn tasks.testDebugUnitTest
+        def coverageSourceDirs = android.sourceSets.main.java.srcDirs
         group = "Reporting"
         description = "Generate Jacoco coverage reports"
 
         classDirectories = fileTree(
-                dir: 'build/intermediates/classes/debug',
+                dir: "${project.buildDir}/intermediates/classes/debug",
                 excludes: ['**/R.class',
                            '**/R$*.class',
                            '**/BuildConfig.*',
@@ -133,7 +137,7 @@ afterEvaluate {
 
         additionalSourceDirs = files(coverageSourceDirs)
         sourceDirectories = files(coverageSourceDirs)
-        executionData = files('build/jacoco/testDebug.exec')
+        executionData = files("${project.buildDir}/jacoco/testDebug.exec")
 
         reports {
             xml.enabled = true
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index a16617348..4a0bb21c5 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -65,7 +65,6 @@
 import com.bumptech.glide.load.resource.transcode.GifDrawableBytesTranscoder;
 import com.bumptech.glide.manager.ConnectivityMonitorFactory;
 import com.bumptech.glide.manager.RequestManagerRetriever;
-import com.bumptech.glide.module.GlideModule;
 import com.bumptech.glide.module.ManifestParser;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
@@ -188,7 +187,7 @@ private static void initializeGlide(Context context) {
     Context applicationContext = context.getApplicationContext();
 
     GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
-    List<GlideModule> manifestModules = Collections.emptyList();
+    List<com.bumptech.glide.module.GlideModule> manifestModules = Collections.emptyList();
     if (annotationGeneratedModule == null || annotationGeneratedModule.isManifestParsingEnabled()) {
       manifestModules = new ManifestParser(applicationContext).parse();
     }
@@ -197,8 +196,9 @@ private static void initializeGlide(Context context) {
         && !annotationGeneratedModule.getExcludedModuleClasses().isEmpty()) {
       Set<Class<?>> excludedModuleClasses =
           annotationGeneratedModule.getExcludedModuleClasses();
-      for (Iterator<GlideModule> iterator = manifestModules.iterator(); iterator.hasNext();) {
-        GlideModule current = iterator.next();
+      Iterator<com.bumptech.glide.module.GlideModule> iterator = manifestModules.iterator();
+      while (iterator.hasNext()) {
+        com.bumptech.glide.module.GlideModule current = iterator.next();
         if (!excludedModuleClasses.contains(current.getClass())) {
           continue;
         }
@@ -210,7 +210,7 @@ private static void initializeGlide(Context context) {
     }
 
     if (Log.isLoggable(TAG, Log.DEBUG)) {
-      for (GlideModule glideModule : manifestModules) {
+      for (com.bumptech.glide.module.GlideModule glideModule : manifestModules) {
         Log.d(TAG, "Discovered GlideModule from manifest: " + glideModule.getClass());
       }
     }
@@ -220,14 +220,14 @@ private static void initializeGlide(Context context) {
             ? annotationGeneratedModule.getRequestManagerFactory() : null;
     GlideBuilder builder = new GlideBuilder()
         .setRequestManagerFactory(factory);
-    for (GlideModule module : manifestModules) {
+    for (com.bumptech.glide.module.GlideModule module : manifestModules) {
       module.applyOptions(applicationContext, builder);
     }
     if (annotationGeneratedModule != null) {
       annotationGeneratedModule.applyOptions(applicationContext, builder);
     }
     Glide glide = builder.build(applicationContext);
-    for (GlideModule module : manifestModules) {
+    for (com.bumptech.glide.module.GlideModule module : manifestModules) {
       module.registerComponents(applicationContext, glide, glide.registry);
     }
     if (annotationGeneratedModule != null) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/Model.java b/library/src/main/java/com/bumptech/glide/load/model/Model.java
index 616b9f390..99dd48744 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/Model.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/Model.java
@@ -9,7 +9,7 @@
      * Returns {@code true} if this model produces the same image using the same mechanism
      * (server, authentication, source etc) as the given model.
      * <p>
-     * Models must also implement {@link #equals(Object other)} and {@link #hashCode()}
+     * Models must also override {@link Object#equals(Object other)} and {@link Object#hashCode()}
      * to ensure that caching functions correctly.
      * If this object returns {@code true} from this method for a given Model,
      * it must also be equal to and have the same hash code as the given model.
diff --git a/library/src/main/java/com/bumptech/glide/request/Request.java b/library/src/main/java/com/bumptech/glide/request/Request.java
index 7427ca434..ad89792fb 100644
--- a/library/src/main/java/com/bumptech/glide/request/Request.java
+++ b/library/src/main/java/com/bumptech/glide/request/Request.java
@@ -62,10 +62,10 @@
    * Returns {@code true} if this {@link Request} is equivalent to the given {@link Request} (has
    * all of the same options and sizes).
    *
-   * <p>This method is identical to {@link #equals(Object)} except that it's specific to
-   * {@link Request} subclasses. We do not use {@link #equals(Object)} directly because we track
-   * {@link Request}s in collections like {@link java.util.Set} and it's perfectly legitimate to
-   * have two different {@link Request} objects for two different
+   * <p>This method is identical to {@link Object#equals(Object)} except that it's specific to
+   * {@link Request} subclasses. We do not use {@link Object#equals(Object)} directly because we
+   * track {@link Request}s in collections like {@link java.util.Set} and it's perfectly legitimate
+   * to have two different {@link Request} objects for two different
    * {@link com.bumptech.glide.request.target.Target}s (for example). Using a similar but different
    * method let's us selectively compare {@link Request} objects to each other when it's useful in
    * specific scenarios.
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index 93f70d040..337bd2965 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.request.RequestOptions.decodeTypeOf;
 import static com.bumptech.glide.request.RequestOptions.errorOf;
 import static com.bumptech.glide.request.RequestOptions.placeholderOf;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
@@ -48,7 +49,6 @@
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
-import com.bumptech.glide.module.GlideModule;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -143,12 +143,58 @@ public void testCanSetMemoryCategory() {
 
     MemoryCategory memoryCategory = MemoryCategory.NORMAL;
     Glide glide =
-        new GlideBuilder().setMemoryCache(memoryCache).setBitmapPool(bitmapPool)
+        new GlideBuilder().setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
+            .build(getContext());
+    glide.setMemoryCategory(memoryCategory);
+
+    verify(memoryCache).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
+    verify(bitmapPool).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
+  }
+
+  @Test
+  public void testCanIncreaseMemoryCategory() {
+    MemoryCache memoryCache = mock(MemoryCache.class);
+    BitmapPool bitmapPool = mock(BitmapPool.class);
+
+    MemoryCategory memoryCategory = MemoryCategory.NORMAL;
+    Glide glide =
+        new GlideBuilder().setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
             .build(getContext());
     glide.setMemoryCategory(memoryCategory);
 
     verify(memoryCache).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
     verify(bitmapPool).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
+
+    MemoryCategory newMemoryCategory = MemoryCategory.HIGH;
+    MemoryCategory oldMemoryCategory = glide.setMemoryCategory(newMemoryCategory);
+
+    assertEquals(memoryCategory, oldMemoryCategory);
+
+    verify(memoryCache).setSizeMultiplier(eq(newMemoryCategory.getMultiplier()));
+    verify(bitmapPool).setSizeMultiplier(eq(newMemoryCategory.getMultiplier()));
+  }
+
+  @Test
+  public void testCanDecreaseMemoryCategory() {
+    MemoryCache memoryCache = mock(MemoryCache.class);
+    BitmapPool bitmapPool = mock(BitmapPool.class);
+
+    MemoryCategory memoryCategory = MemoryCategory.NORMAL;
+    Glide glide =
+        new GlideBuilder().setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
+            .build(getContext());
+    glide.setMemoryCategory(memoryCategory);
+
+    verify(memoryCache).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
+    verify(bitmapPool).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
+
+    MemoryCategory newMemoryCategory = MemoryCategory.LOW;
+    MemoryCategory oldMemoryCategory = glide.setMemoryCategory(newMemoryCategory);
+
+    assertEquals(memoryCategory, oldMemoryCategory);
+
+    verify(memoryCache).setSizeMultiplier(eq(newMemoryCategory.getMultiplier()));
+    verify(bitmapPool).setSizeMultiplier(eq(newMemoryCategory.getMultiplier()));
   }
 
   @Test
@@ -661,7 +707,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
     }
   }
 
-  public static class SetupModule implements GlideModule {
+  public static class SetupModule implements com.bumptech.glide.module.GlideModule {
 
     @Override
     public void applyOptions(Context context, GlideBuilder builder) {
diff --git a/scripts/upload.gradle b/scripts/upload.gradle
index 4b38c3961..c690a364a 100644
--- a/scripts/upload.gradle
+++ b/scripts/upload.gradle
@@ -122,25 +122,22 @@ afterEvaluate { project ->
             it.buildType.name.equalsIgnoreCase('release')
         }
 
-        def getAndroidCompileSdkVersion = project.android.compileSdkVersion
-
         def getAndroidSdkDirectory = project.android.sdkDirectory
 
-        def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${getAndroidCompileSdkVersion}/android.jar"
-
-        def getSupportJar = "${getAndroidSdkDirectory}/extras/android/support/v4/android-support-v4.jar"
+        def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"
 
         task androidJavadocs(type: Javadoc, dependsOn: assembleRelease) {
             source = releaseVariants.collect { it.javaCompile.source }
-            classpath = files(releaseVariants.collect {
-                files(it.javaCompile.classpath.files, getAndroidJar, getSupportJar)
-            })
-            classpath += files("${project.projectDir}/build/intermediates/classes/release")
+            classpath = files(
+                    getAndroidJar,
+                    releaseVariants.collect { it.javaCompile.classpath.files },
+                    project.file("build/intermediates/classes/release")
+            )
 
             options {
                 links("http://docs.oracle.com/javase/7/docs/api/")
                 linksOffline("http://d.android.com/reference",
-                    "${getAndroidSdkDirectory}/docs/reference")
+                        "${getAndroidSdkDirectory}/docs/reference")
             }
 
             exclude '**/BuildConfig.java'
