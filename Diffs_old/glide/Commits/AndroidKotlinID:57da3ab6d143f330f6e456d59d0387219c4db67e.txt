diff --git a/README.md b/README.md
index c59b4ba18..88a009c76 100644
--- a/README.md
+++ b/README.md
@@ -29,8 +29,8 @@ repositories {
 }
 
 dependencies {
-  compile 'com.github.bumptech.glide:glide:4.3.0'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.3.0'
+  compile 'com.github.bumptech.glide:glide:4.3.1'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.3.1'
 }
 ```
 
@@ -40,7 +40,7 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.3.0</version>
+  <version>4.3.1</version>
 </dependency>
 <dependency>
   <groupId>com.google.android</groupId>
@@ -50,7 +50,7 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.3.0</version>
+  <version>4.3.1</version>
   <optional>true</optional>
 </dependency>
 ```
diff --git a/annotation/compiler/build.gradle b/annotation/compiler/build.gradle
index 22a02a63a..e7dd22654 100644
--- a/annotation/compiler/build.gradle
+++ b/annotation/compiler/build.gradle
@@ -16,7 +16,6 @@ dependencies {
     compileOnly 'com.squareup:javapoet:1.9.0'
     compileOnly 'com.google.auto.service:auto-service:1.0-rc3'
     compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
-
     compile project(':annotation')
     // This is to support com.sun.tootls.javac.util.List, currently used in RootModuleGenerator.
     compile files(Jvm.current().getToolsJar())
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java
index 4d6ac80c8..b13fdd0e4 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ExtensionProcessor.java
@@ -5,6 +5,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.lang.model.element.TypeElement;
 
@@ -15,17 +16,22 @@
 final class ExtensionProcessor {
   private final ProcessorUtil processorUtil;
   private final IndexerGenerator indexerGenerator;
+  private final GlideExtensionValidator extensionValidator;
 
-  ExtensionProcessor(ProcessorUtil processorUtil, IndexerGenerator indexerGenerator) {
+  ExtensionProcessor(
+      ProcessingEnvironment processingEnvironment,
+      ProcessorUtil processorUtil,
+      IndexerGenerator indexerGenerator) {
     this.processorUtil = processorUtil;
     this.indexerGenerator = indexerGenerator;
+    extensionValidator = new GlideExtensionValidator(processingEnvironment, processorUtil);
   }
 
   boolean processExtensions(Set<? extends TypeElement> set, RoundEnvironment env) {
     List<TypeElement> elements = processorUtil.getElementsFor(GlideExtension.class, env);
     processorUtil.debugLog("Processing types : " + elements);
     for (TypeElement typeElement : elements) {
-      GlideExtensionValidator.validateExtension(typeElement);
+      extensionValidator.validateExtension(typeElement);
       processorUtil.debugLog("Processing elements: " + typeElement.getEnclosedElements());
     }
 
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java
index 0c356b316..ce6df2243 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideAnnotationProcessor.java
@@ -71,6 +71,7 @@
   private AppModuleProcessor appModuleProcessor;
   private boolean isGeneratedAppGlideModuleWritten;
   private ExtensionProcessor extensionProcessor;
+  private boolean isGeneratedAppGlideModulePending;
 
   @Override
   public synchronized void init(ProcessingEnvironment processingEnvironment) {
@@ -79,7 +80,8 @@ public synchronized void init(ProcessingEnvironment processingEnvironment) {
     IndexerGenerator indexerGenerator = new IndexerGenerator(processorUtil);
     libraryModuleProcessor = new LibraryModuleProcessor(processorUtil, indexerGenerator);
     appModuleProcessor = new AppModuleProcessor(processingEnvironment, processorUtil);
-    extensionProcessor = new ExtensionProcessor(processorUtil, indexerGenerator);
+    extensionProcessor =
+        new ExtensionProcessor(processingEnvironment, processorUtil, indexerGenerator);
   }
 
   @Override
@@ -111,6 +113,9 @@ public SourceVersion getSupportedSourceVersion() {
     */
   @Override
   public boolean process(Set<? extends TypeElement> set, RoundEnvironment env) {
+//    if (set.isEmpty() && !isGeneratedAppGlideModulePending) {
+//      return false;
+//    }
     processorUtil.process();
     boolean newModulesWritten = libraryModuleProcessor.processModules(set, env);
     boolean newExtensionWritten = extensionProcessor.processExtensions(set, env);
@@ -120,6 +125,7 @@ public boolean process(Set<? extends TypeElement> set, RoundEnvironment env) {
       if (isGeneratedAppGlideModuleWritten) {
         throw new IllegalStateException("Cannot process annotations after writing AppGlideModule");
       }
+      isGeneratedAppGlideModulePending = true;
       return true;
     }
 
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
index 488c5578f..bcc8950ed 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
@@ -2,12 +2,16 @@
 
 import com.bumptech.glide.annotation.GlideOption;
 import com.bumptech.glide.annotation.GlideType;
+import java.util.ArrayList;
+import java.util.List;
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 
@@ -21,74 +25,230 @@
  */
 final class GlideExtensionValidator {
 
-  private GlideExtensionValidator() { }
+  private final ProcessingEnvironment processingEnvironment;
+  private final ProcessorUtil processorUtil;
 
-  static void validateExtension(TypeElement typeElement) {
+  GlideExtensionValidator(
+      ProcessingEnvironment processingEnvironment, ProcessorUtil processorUtil) {
+    this.processingEnvironment = processingEnvironment;
+    this.processorUtil = processorUtil;
+  }
+
+  void validateExtension(TypeElement typeElement) {
     if (!typeElement.getModifiers().contains(Modifier.PUBLIC)) {
       throw new IllegalArgumentException("RequestOptionsExtensions must be public");
     }
     for (Element element : typeElement.getEnclosedElements()) {
       if (element.getKind() == ElementKind.CONSTRUCTOR) {
-        if (!element.getModifiers().contains(Modifier.PRIVATE)) {
-          throw new IllegalArgumentException("RequestOptionsExtensions must be public, with private"
-              + " constructors and only static methods. Found a non-private constructor");
-        }
-        ExecutableElement executableElement = (ExecutableElement) element;
-        if (!executableElement.getParameters().isEmpty()) {
-          throw new IllegalArgumentException("RequestOptionsExtensions must be public, with private"
-              + " constructors and only static methods. Found parameters in the constructor");
-        }
-        continue;
-      }
-      if (element.getKind() == ElementKind.METHOD) {
+        validateExtensionConstructor(element);
+      } else if (element.getKind() == ElementKind.METHOD) {
         ExecutableElement executableElement = (ExecutableElement) element;
         if (executableElement.getAnnotation(GlideOption.class) != null) {
-          validateExtendsRequestOptions(executableElement);
+          validateGlideOption(executableElement);
         } else if (executableElement.getAnnotation(GlideType.class) != null) {
-          validateExtendsRequestManager(executableElement);
+          validateGlideType(executableElement);
         }
       }
     }
   }
 
-  private static void validateExtendsRequestOptions(ExecutableElement executableElement) {
+  private static void validateExtensionConstructor(Element element) {
+    if (!element.getModifiers().contains(Modifier.PRIVATE)) {
+      throw new IllegalArgumentException("RequestOptionsExtensions must be public, with private"
+          + " constructors and only static methods. Found a non-private constructor");
+    }
+    ExecutableElement executableElement = (ExecutableElement) element;
+    if (!executableElement.getParameters().isEmpty()) {
+      throw new IllegalArgumentException("RequestOptionsExtensions must be public, with private"
+          + " constructors and only static methods. Found parameters in the constructor");
+    }
+  }
+
+  private void validateGlideOption(ExecutableElement executableElement) {
+    if (returnsVoid(executableElement)) {
+      validateDeprecatedGlideOption(executableElement);
+    } else {
+      validateNewGlideOption(executableElement);
+    }
+  }
+
+  private void validateNewGlideOption(ExecutableElement executableElement) {
+    validateGlideOptionParameters(executableElement);
+    TypeMirror returnType = executableElement.getReturnType();
+    if (!isRequestOptions(returnType)) {
+      throw new IllegalArgumentException("@GlideOption methods should return a RequestOptions"
+          + " object, but given: " + returnType + ". If you're using old style @GlideOption"
+          + " methods, your method may have a void return type, but doing so is deprecated and"
+          + " support will be removed in a future version");
+    }
+    validateGlideOptionOverride(executableElement);
+  }
+
+  private void validateDeprecatedGlideOption(ExecutableElement executableElement) {
     validateStaticVoid(executableElement, GlideOption.class);
+    validateGlideOptionParameters(executableElement);
+    validateGlideOptionOverride(executableElement);
+  }
+
+  private static void validateGlideOptionParameters(ExecutableElement executableElement) {
     if (executableElement.getParameters().isEmpty()) {
       throw new IllegalArgumentException("@GlideOption methods must take a "
           + "RequestOptions object as their first parameter, but given none");
     }
     VariableElement first = executableElement.getParameters().get(0);
     TypeMirror expected = first.asType();
-    if (!expected.toString().equals(
-        "com.bumptech.glide.request.RequestOptions")) {
+    if (!isRequestOptions(expected)) {
       throw new IllegalArgumentException("@GlideOption methods must take a"
           + " RequestOptions object as their first parameter, but given: " + expected);
     }
   }
 
-  private static void validateExtendsRequestManager(ExecutableElement executableElement) {
+  private static boolean isRequestOptions(TypeMirror typeMirror) {
+    return typeMirror.toString().equals("com.bumptech.glide.request.RequestOptions");
+  }
+
+  private void validateGlideOptionOverride(ExecutableElement element) {
+    int overrideType = processorUtil.getOverrideType(element);
+    boolean isOverridingRequestOptionsMethod = isMethodInRequestOptions(element);
+    if (isOverridingRequestOptionsMethod && overrideType == GlideOption.OVERRIDE_NONE) {
+      throw new IllegalArgumentException("Accidentally attempting to override a method in"
+          + " RequestOptions. Add an 'override' value in the @GlideOption annotation"
+          + " if this is intentional. Offending method: "
+          + element.getEnclosingElement() + "#" + element);
+    } else if (!isOverridingRequestOptionsMethod && overrideType != GlideOption.OVERRIDE_NONE) {
+      throw new IllegalArgumentException("Requested to override an existing method in"
+          + " RequestOptions, but no such method was found. Offending method: "
+          + element.getEnclosingElement() + "#" + element);
+    }
+  }
+
+  private boolean isMethodInRequestOptions(ExecutableElement toFind) {
+    // toFind is a method in a GlideExtension whose first argument is a BaseRequestOptions<?> type.
+    // Since we're comparing against methods in BaseRequestOptions itself, we need to drop that
+    // first type.
+    TypeElement requestOptionsType =
+        processingEnvironment
+            .getElementUtils()
+            .getTypeElement(RequestOptionsGenerator.REQUEST_OPTIONS_QUALIFIED_NAME);
+    List<String> toFindParameterNames = getComparableParameterNames(toFind, true /*skipFirst*/);
+    String toFindSimpleName = toFind.getSimpleName().toString();
+    for (Element element : requestOptionsType.getEnclosedElements()) {
+      if (element.getKind() != ElementKind.METHOD) {
+        continue;
+      }
+      ExecutableElement inBase = (ExecutableElement) element;
+      if (toFindSimpleName.equals(inBase.getSimpleName().toString())) {
+        List<String> parameterNamesInBase =
+            getComparableParameterNames(inBase, false /*skipFirst*/);
+        if (parameterNamesInBase.equals(toFindParameterNames)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  private static List<String> getComparableParameterNames(
+      ExecutableElement element, boolean skipFirst) {
+    List<? extends VariableElement> parameters = element.getParameters();
+    if (skipFirst) {
+      parameters = parameters.subList(1, parameters.size());
+    }
+    List<String> result = new ArrayList<>(parameters.size());
+    for (VariableElement parameter : parameters) {
+      result.add(parameter.asType().toString());
+    }
+    return result;
+  }
+
+  private void validateGlideType(ExecutableElement executableElement) {
+    if (returnsVoid(executableElement)) {
+      validateDeprecatedGlideType(executableElement);
+    } else {
+      validateNewGlideType(executableElement);
+    }
+  }
+
+  private void validateNewGlideType(ExecutableElement executableElement) {
+    TypeMirror returnType = executableElement.getReturnType();
+    if (!isRequestBuilder(returnType) || !typeMatchesExpected(returnType, executableElement)) {
+      String expectedClassName = getGlideTypeValue(executableElement);
+      throw new IllegalArgumentException("@GlideType methods should return a RequestBuilder<"
+          + expectedClassName + "> object, but given: " + returnType + ". If you're"
+          + " using old style @GlideType methods, your method may have a void return type, but"
+          + " doing so is deprecated and support will be removed in a future version");
+    }
+    validateGlideTypeParameters(executableElement);
+  }
+
+  private String getGlideTypeValue(ExecutableElement executableElement) {
+    return
+        processorUtil
+            .findClassValuesFromAnnotationOnClassAsNames(
+                executableElement, GlideType.class).iterator().next();
+  }
+
+  private boolean typeMatchesExpected(
+      TypeMirror returnType, ExecutableElement executableElement) {
+    if (!(returnType instanceof DeclaredType)) {
+      return false;
+    }
+    List<? extends TypeMirror> typeArguments = ((DeclaredType) returnType).getTypeArguments();
+    if (typeArguments.size() != 1) {
+      return false;
+    }
+    TypeMirror argument = typeArguments.get(0);
+    String expected = getGlideTypeValue(executableElement);
+    if (!argument.toString().equals(expected)) {
+      return false;
+    }
+    return true;
+  }
+
+  private boolean isRequestBuilder(TypeMirror typeMirror) {
+    TypeMirror toCompare = processingEnvironment.getTypeUtils().erasure(typeMirror);
+    return toCompare.toString().equals("com.bumptech.glide.RequestBuilder");
+  }
+
+  private static void validateDeprecatedGlideType(ExecutableElement executableElement) {
     validateStaticVoid(executableElement, GlideType.class);
+    validateGlideTypeParameters(executableElement);
+  }
+
+  private static void validateGlideTypeParameters(ExecutableElement executableElement) {
     if (executableElement.getParameters().size() != 1) {
       throw new IllegalArgumentException("@GlideType methods must take a"
-          + " RequestOptions object as their first and only parameter, found multiple for: "
+          + " RequestBuilder object as their first and only parameter, but given multiple for: "
       + executableElement.getEnclosingElement() + "#" + executableElement);
     }
 
     VariableElement first = executableElement.getParameters().get(0);
-    TypeMirror expected = first.asType();
-    if (!expected.toString().startsWith("com.bumptech.glide.RequestBuilder")) {
+    TypeMirror argumentType = first.asType();
+    if (!argumentType.toString().startsWith("com.bumptech.glide.RequestBuilder")) {
       throw new IllegalArgumentException("@GlideType methods must take a"
-          + " RequestBuilder object as their first parameter, but given: " + expected);
+          + " RequestBuilder object as their first and only parameter, but given: " + argumentType);
     }
   }
 
-  private static void validateStaticVoid(ExecutableElement executableElement, Class<?> clazz) {
+  private static void validateStatic(ExecutableElement executableElement, Class<?> clazz) {
     if (!executableElement.getModifiers().contains(Modifier.STATIC)) {
       throw new IllegalArgumentException("@" + clazz.getSimpleName() + " methods must be static");
     }
+  }
+
+  private static boolean returnsVoid(ExecutableElement executableElement) {
     TypeMirror returnType = executableElement.getReturnType();
-    if (returnType.getKind() != TypeKind.VOID) {
+    return returnType.getKind() == TypeKind.VOID;
+  }
+
+  private static void validateVoid(ExecutableElement executableElement, Class<?> clazz) {
+    if (!returnsVoid(executableElement)) {
       throw new IllegalArgumentException("@" + clazz.getSimpleName() + " methods must return void");
     }
   }
+
+  private static void validateStaticVoid(ExecutableElement executableElement, Class<?> clazz) {
+    validateStatic(executableElement, clazz);
+    validateVoid(executableElement, clazz);
+  }
 }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
index b367a9999..700ba1805 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
@@ -155,16 +155,18 @@ public ParameterSpec apply(VariableElement input) {
                   }
             }));
 
-    TypeElement visibleForTestingType =
+    String visibleForTestingTypeQualifiedName =
         processingEnv
             .getElementUtils()
-            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);
+            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME)
+            .toString();
     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
       builder.addAnnotation(AnnotationSpec.get(mirror));
 
       // Suppress a lint warning if we're overriding a VisibleForTesting method.
       // See #1977.
-      if (mirror.getAnnotationType().asElement().equals(visibleForTestingType)) {
+      String annotationQualfiedName = mirror.getAnnotationType().toString();
+      if (annotationQualfiedName.equals(visibleForTestingTypeQualifiedName)) {
         builder.addAnnotation(
             AnnotationSpec.builder(
                 ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME))
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index ff0dbb20f..0ec1bbd64 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.annotation.compiler.GlideAnnotationProcessor.DEBUG;
 
 import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.base.Predicate;
@@ -93,6 +94,12 @@ boolean isExtension(TypeElement element) {
     return element.getAnnotation(GlideExtension.class) != null;
   }
 
+  int getOverrideType(ExecutableElement element) {
+    GlideOption glideOption =
+        element.getAnnotation(GlideOption.class);
+    return glideOption.override();
+  }
+
   void writeIndexer(TypeSpec indexer) {
     writeClass(COMPILER_PACKAGE_NAME, indexer);
   }
@@ -211,7 +218,6 @@ private CodeBlock generateSeeMethodJavadocInternal(
     return CodeBlock.of(javadocString, javadocArgs.toArray(new Object[0]));
   }
 
-
    /**
    * Returns a safe String to use in a Javadoc that will function in a link.
    *
@@ -239,6 +245,10 @@ void infoLog(String toLog) {
     processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "[" + round + "] " + toLog);
   }
 
+  void warnLog(String toLog) {
+    processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, toLog);
+  }
+
   static CodeBlock generateCastingSuperCall(TypeName toReturn, ExecutableElement method) {
     return CodeBlock.builder()
         .add("return ($T) super.$N(", toReturn, method.getSimpleName())
@@ -368,8 +378,11 @@ private static ParameterSpec getParameter(VariableElement method) {
         throw new IllegalArgumentException("Expected single value, but found: " + values);
       }
       excludedModuleAnnotationValue = values.iterator().next().getValue();
-      if (excludedModuleAnnotationValue == null) {
-        throw new NullPointerException("Failed to find Excludes#value");
+      if (excludedModuleAnnotationValue == null
+          || excludedModuleAnnotationValue instanceof Attribute.UnresolvedClass) {
+        throw new IllegalArgumentException(
+            "Failed to find value for: " + annotationClass + " from mirrors: "
+                + clazz.getAnnotationMirrors());
       }
     }
     if (excludedModuleAnnotationValue == null) {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index 9e7d618c8..6ed2e79b6 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -24,6 +24,7 @@
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 
@@ -251,7 +252,16 @@ public MethodSpec apply(ExecutableElement input) {
 
   // Generates methods added to RequestManager via GlideExtensions.
   private MethodSpec generateAdditionalRequestManagerMethod(ExecutableElement extensionMethod) {
-    String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
+    if (extensionMethod.getReturnType().getKind() == TypeKind.VOID) {
+      return generateAdditionalRequestManagerMethodLegacy(extensionMethod);
+    } else {
+      return generateAdditionalRequestManagerMethodNew(extensionMethod);
+    }
+  }
+
+  private MethodSpec generateAdditionalRequestManagerMethodLegacy(
+      ExecutableElement extensionMethod) {
+     String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
         GlideType.class).iterator().next();
     ClassName returnTypeClassName = ClassName.bestGuess(returnType);
     ParameterizedTypeName parameterizedTypeName =
@@ -269,6 +279,27 @@ private MethodSpec generateAdditionalRequestManagerMethod(ExecutableElement exte
         .build();
   }
 
+  private MethodSpec generateAdditionalRequestManagerMethodNew(
+      ExecutableElement extensionMethod) {
+     String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
+        GlideType.class).iterator().next();
+    ClassName returnTypeClassName = ClassName.bestGuess(returnType);
+    ParameterizedTypeName parameterizedTypeName =
+        ParameterizedTypeName.get(generatedRequestBuilderClassName, returnTypeClassName);
+
+    return MethodSpec.methodBuilder(extensionMethod.getSimpleName().toString())
+        .addModifiers(Modifier.PUBLIC)
+        .returns(parameterizedTypeName)
+        .addJavadoc(processorUtil.generateSeeMethodJavadoc(extensionMethod))
+        .addStatement(
+            "return ($T) $T.$N(this.as($T.class))",
+            parameterizedTypeName,
+            extensionMethod.getEnclosingElement(),
+            extensionMethod.getSimpleName(),
+            returnTypeClassName)
+        .build();
+  }
+
   /**
    * The {@code RequestOptions} subclass should always be our
    * generated subclass type to avoid inadvertent errors where a different subclass is applied that
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 32a62649a..597ce499e 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -1,7 +1,6 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_EXTEND;
-import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_NONE;
 
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
@@ -30,12 +29,12 @@
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeKind;
 
 /**
  * Generates a new implementation of {@code com.bumptech.glide.request.RequestOptions}
@@ -225,18 +224,92 @@ public String apply(VariableElement input) {
 
   private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtension(
       ExecutableElement element) {
-    boolean isOverridingRequestOptionsMethod = isMethodInRequestOptions(element);
-    int overrideType = getOverrideType(element);
-    if (isOverridingRequestOptionsMethod && overrideType == OVERRIDE_NONE) {
-      throw new IllegalArgumentException("Accidentally attempting to override a method in"
-          + " RequestOptions. Add an 'override' value in the @GlideOption annotation"
-          + " if this is intentional. Offending method: "
-          + element.getEnclosingElement() + "#" + element);
-    } else if (!isOverridingRequestOptionsMethod && overrideType != OVERRIDE_NONE) {
-      throw new IllegalArgumentException("Requested to override an existing method in"
-          + " RequestOptions, but no such method was found. Offending method: "
-          + element.getEnclosingElement() + "#" + element);
+    if (element.getReturnType().getKind() == TypeKind.VOID) {
+      processorUtil.warnLog(
+          "The " + element.getSimpleName() + " method annotated with @GlideOption in the "
+              + element.getEnclosingElement().getSimpleName() + " @GlideExtension is using a legacy"
+              + " format. Support will be removed in a future version. Please change your method"
+              + " definition so that your @GlideModule annotated methods return RequestOptions"
+              + " objects instead of null.");
+      return generateMethodsForRequestOptionsExtensionDeprecated(element);
+    } else {
+      return generateMethodsForRequestOptionsExtensionNew(element);
+    }
+  }
+
+  private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtensionNew(
+      ExecutableElement element) {
+    int overrideType = processorUtil.getOverrideType(element);
+
+    String methodName = element.getSimpleName().toString();
+    MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName)
+        .addModifiers(Modifier.PUBLIC)
+        .addJavadoc(processorUtil.generateSeeMethodJavadoc(element))
+        .varargs(element.isVarArgs())
+        .returns(glideOptionsName);
+
+    // The 0th element is expected to be a RequestOptions object.
+    List<? extends VariableElement> parameters =
+        element.getParameters().subList(1, element.getParameters().size());
+    builder.addParameters(ProcessorUtil.getParameters(parameters));
+
+    String extensionRequestOptionsArgument;
+    if (overrideType == OVERRIDE_EXTEND) {
+      builder
+          .addJavadoc(
+              processorUtil.generateSeeMethodJavadoc(requestOptionsName, methodName, parameters))
+          .addAnnotation(Override.class);
+
+      List<Object> methodArgs = new ArrayList<>();
+      methodArgs.add(element.getSimpleName().toString());
+      String methodLiterals = "";
+      if (!parameters.isEmpty()) {
+        for (VariableElement variable : parameters) {
+          methodLiterals += "$L, ";
+          methodArgs.add(variable.getSimpleName().toString());
+        }
+        methodLiterals = methodLiterals.substring(0, methodLiterals.length() - 2);
+      }
+      extensionRequestOptionsArgument = CodeBlock.builder()
+          .add(
+            "super.$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
+          .build()
+          .toString();
+    } else {
+      extensionRequestOptionsArgument = "this";
+    }
+
+    List<Object> args = new ArrayList<>();
+    String code = "return ($T) $T.$L($L, ";
+    args.add(glideOptionsName);
+    args.add(ClassName.get(element.getEnclosingElement().asType()));
+    args.add(element.getSimpleName().toString());
+    args.add(extensionRequestOptionsArgument);
+    if (!parameters.isEmpty()) {
+      for (VariableElement variable : parameters) {
+        code += "$L, ";
+        args.add(variable.getSimpleName().toString());
+      }
+    }
+    code = code.substring(0, code.length() - 2);
+    code += ")";
+    builder.addStatement(code, args.toArray(new Object[0]));
+    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
+    List<MethodAndStaticVar> result = new ArrayList<>();
+    result.add(new MethodAndStaticVar(builder.build()));
+    MethodAndStaticVar methodAndVar = generateStaticMethodEquivalentForExtensionMethod(element);
+    if (methodAndVar != null) {
+      result.add(methodAndVar);
     }
+
+    return result;
+  }
+
+  private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtensionDeprecated(
+      ExecutableElement element) {
+    int overrideType = processorUtil.getOverrideType(element);
+
     String methodName = element.getSimpleName().toString();
     MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName)
         .addModifiers(Modifier.PUBLIC)
@@ -247,6 +320,7 @@ public String apply(VariableElement input) {
     // The 0th element is expected to be a RequestOptions object.
     List<? extends VariableElement> parameters =
         element.getParameters().subList(1, element.getParameters().size());
+    builder.addParameters(ProcessorUtil.getParameters(parameters));
 
     // Generates the String and list of arguments to pass in when calling this method or super.
     // IE centerCrop(context) creates methodLiterals="%L" and methodArgs=[centerCrop, context].
@@ -275,7 +349,6 @@ public String apply(VariableElement input) {
           .addAnnotation(Override.class);
     }
 
-    builder.addParameters(ProcessorUtil.getParameters(parameters));
 
     // Adds: <AnnotatedClass>.<thisMethodName>(RequestOptions<?>, <arg1>, <arg2>, <argN>);
     List<Object> args = new ArrayList<>();
@@ -294,13 +367,14 @@ public String apply(VariableElement input) {
     builder.addStatement(code, args.toArray(new Object[0]));
 
     builder.addStatement("return this");
-
-    List<MethodAndStaticVar> result = new ArrayList<>();
-
     builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
 
+    List<MethodAndStaticVar> result = new ArrayList<>();
     result.add(new MethodAndStaticVar(builder.build()));
-    result.add(generateStaticMethodEquivalentForExtensionMethod(element));
+    MethodAndStaticVar methodAndVar = generateStaticMethodEquivalentForExtensionMethod(element);
+    if (methodAndVar != null) {
+      result.add(methodAndVar);
+    }
 
     return result;
   }
@@ -425,11 +499,12 @@ private static boolean memoizeStaticMethodFromArguments(ExecutableElement static
         .equals("android.content.Context"));
   }
 
+  @Nullable
   private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
       ExecutableElement instanceMethod) {
     boolean skipStaticMethod = skipStaticMethod(instanceMethod);
     if (skipStaticMethod) {
-      return new MethodAndStaticVar();
+      return null;
     }
     String staticMethodName = getStaticMethodName(instanceMethod);
     String instanceMethodName = instanceMethod.getSimpleName().toString();
@@ -516,47 +591,6 @@ private boolean isAndroidContext(VariableElement variableElement) {
     return element.toString().equals("android.content.Context");
   }
 
-  private boolean isMethodInRequestOptions(ExecutableElement toFind) {
-    // toFind is a method in a GlideExtension whose first argument is a BaseRequestOptions<?> type.
-    // Since we're comparing against methods in BaseRequestOptions itself, we need to drop that
-    // first type.
-    List<String> toFindParameterNames = getComparableParameterNames(toFind, true /*skipFirst*/);
-    String toFindSimpleName = toFind.getSimpleName().toString();
-    for (Element element : requestOptionsType.getEnclosedElements()) {
-      if (element.getKind() != ElementKind.METHOD) {
-        continue;
-      }
-      ExecutableElement inBase = (ExecutableElement) element;
-      if (toFindSimpleName.equals(inBase.getSimpleName().toString())) {
-        List<String> parameterNamesInBase =
-            getComparableParameterNames(inBase, false /*skipFirst*/);
-        if (parameterNamesInBase.equals(toFindParameterNames)) {
-          return true;
-        }
-      }
-    }
-    return false;
-  }
-
-  private static List<String> getComparableParameterNames(
-      ExecutableElement element, boolean skipFirst) {
-    List<? extends VariableElement> parameters = element.getParameters();
-    if (skipFirst) {
-      parameters = parameters.subList(1, parameters.size());
-    }
-    List<String> result = new ArrayList<>(parameters.size());
-    for (VariableElement parameter : parameters) {
-      result.add(parameter.asType().toString());
-    }
-    return result;
-  }
-
-  private static int getOverrideType(ExecutableElement element) {
-    GlideOption glideOption =
-        element.getAnnotation(GlideOption.class);
-    return glideOption.override();
-  }
-
   @Nullable
   private static String getStaticMethodName(ExecutableElement element) {
     GlideOption glideOption =
@@ -583,10 +617,6 @@ private static boolean skipStaticMethod(ExecutableElement element) {
     @Nullable
     final FieldSpec staticField;
 
-    MethodAndStaticVar() {
-      this(null /*method*/);
-    }
-
     MethodAndStaticVar(@Nullable MethodSpec method) {
       this(method, null /*staticField*/);
     }
@@ -600,12 +630,12 @@ private static boolean skipStaticMethod(ExecutableElement element) {
   private static final class MethodSignature {
     private final TypeName returnType;
     private final List<TypeName> parameterTypes;
-    private final Set<Modifier> modifiers;
+    private final boolean isStatic;
     private final String name;
 
     MethodSignature(MethodSpec spec) {
       name = spec.name;
-      modifiers = spec.modifiers;
+      isStatic = spec.modifiers.contains(Modifier.STATIC);
       returnType = spec.returnType;
       parameterTypes =
           Lists.transform(spec.parameters, new Function<ParameterSpec, TypeName>() {
@@ -625,14 +655,14 @@ public boolean equals(Object o) {
         return name.equals(other.name)
             && returnType.equals(other.returnType)
             && parameterTypes.equals(other.parameterTypes)
-            && modifiers.equals(other.modifiers);
+            && isStatic == other.isStatic;
       }
       return false;
     }
 
     @Override
     public int hashCode() {
-      return Objects.hashCode(name, returnType, parameterTypes, modifiers);
+      return Objects.hashCode(name, returnType, parameterTypes, isStatic);
     }
   }
 }
diff --git a/annotation/compiler/test/.gitignore b/annotation/compiler/test/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/annotation/compiler/test/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/annotation/compiler/test/build.gradle b/annotation/compiler/test/build.gradle
new file mode 100644
index 000000000..b27a956cc
--- /dev/null
+++ b/annotation/compiler/test/build.gradle
@@ -0,0 +1,29 @@
+apply plugin: 'java'
+
+sourceSets {
+    test {
+        output.resourcesDir = "build/classes/java/test"
+    }
+}
+
+// This special test only submodule exists because adding the :glide dependency seems to break
+// the annotation processor dependency chain for the internal sample apps. It's also somewhat
+// easier to parse as a separate module given the existing complexity here and in the compiler
+dependencies {
+    // build.gradle file.
+    testCompile project(':glide')
+    testCompile project(':annotation:compiler')
+    testCompile 'com.squareup:javapoet:1.9.0'
+    testCompile 'com.google.auto.service:auto-service:1.0-rc3'
+    testCompile 'com.google.code.findbugs:jsr305:3.0.1'
+    testCompile 'com.google.testing.compile:compile-testing:0.10'
+    // Use a stupidly old version of the Android classes jar. This works because we just need to get
+    // our generated classes to compile and our generated classes tend to use simple and stable
+    // Android APIs. If that changes, we'll need to find an alternative.
+    testCompile 'com.google.android:android:4.1.1.4'
+    // Use a stupidly old version of v4 because it's a jar. The newer support v4 packages are aars,
+    // which we can't depend on in a standard Java test. Since our usage of v4 is pretty simple,
+    // hopefully this will continue to work going forward.
+    testCompile 'com.google.android:support-v4:r6'
+    testCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
new file mode 100644
index 000000000..55f07d5af
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
@@ -0,0 +1,105 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyLibraryModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.libraryResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Tests adding both an empty {@link com.bumptech.glide.module.AppGlideModule} and an empty
+ * {@link com.bumptech.glide.module.LibraryGlideModule} in a single project.
+ */
+public class EmptyAppAndLibraryGlideModulesTest {
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                emptyLibraryModule());
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideOptions.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedIndexer() throws IOException {
+    String expectedClassName =
+        "GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule";
+    assertThat(compilation)
+        .generatedSourceFile(annotation(expectedClassName))
+        .contentsAsUtf8String()
+        .isEqualTo(libraryResource(expectedClassName + ".java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
new file mode 100644
index 000000000..682afa0f2
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
@@ -0,0 +1,89 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Tests adding a single {@link com.bumptech.glide.test.EmptyAppModule} in a project.
+ */
+public class EmptyAppGlideModuleTest {
+  private static final String MODULE_NAME = "EmptyAppModule.java";
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(forResource(MODULE_NAME));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(6);
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideRequest.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideRequests.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideApp.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
+
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
new file mode 100644
index 000000000..a8e459b25
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
@@ -0,0 +1,49 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Tests adding a single {@link com.bumptech.glide.module.LibraryGlideModule} in a project.
+ */
+public class EmptyLibraryGlideModuleTest {
+  private static final String MODULE_NAME = "EmptyLibraryModule.java";
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(forResource(MODULE_NAME));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(1);
+  }
+
+  @Test
+  public void compilation_generatesExpectedIndexer() throws IOException {
+    String expectedClassName =
+        "GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule";
+    assertThat(compilation)
+        .generatedSourceFile(annotation(expectedClassName))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource(expectedClassName + ".java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
new file mode 100644
index 000000000..23bd5f121
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
@@ -0,0 +1,115 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+/**
+ * Verifies only the output we expect to change based on the various configurations of GlideOptions.
+ *
+ * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
+ */
+public class GlideExtensionOptionsTest {
+  private static final String EXTENSION_NAME = "Extension.java";
+
+  @Test
+  public void compilation_withOverrideExtend_validOptions() throws IOException {
+    runTest("OverrideExtend", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withOverrideExtend_validRequest() throws IOException {
+    runTest("OverrideExtend", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_andMultipleArguments_validOptions()
+      throws IOException {
+    runTest("OverrideExtendMultipleArguments", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_andMultipleArguments_validRequest()
+      throws IOException {
+    runTest("OverrideExtendMultipleArguments", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_validOptions() throws IOException {
+    runTest("OverrideReplace", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_validRequest() throws IOException {
+    runTest("OverrideReplace", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withStaticMethodName_validOptions() throws IOException {
+    runTest("StaticMethodName", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withStaticMethodName_validRequest() throws IOException {
+    runTest("StaticMethodName", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withMemoizeStaticMethod_validOptions() throws IOException {
+    runTest("MemoizeStaticMethod", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withMemoizeStaticMethod_validRequest() throws IOException {
+    runTest("MemoizeStaticMethod", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withSkipStaticMethod_validOptions() throws IOException {
+    runTest("SkipStaticMethod", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withSkipStaticMethod_validRequest() throws IOException {
+    runTest("SkipStaticMethod", Subject.GlideRequest);
+  }
+
+  private enum Subject {
+    GlideOptions,
+    GlideRequest;
+
+    String file() {
+      return name() + ".java";
+    }
+  }
+
+  private void runTest(String subDir, Subject subject) throws IOException {
+     Compilation compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                extension(subDir));
+    assertThat(compilation).succeededWithoutWarnings();
+
+    assertThat(compilation)
+        .generatedSourceFile(subpackage(subject.name()))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource(subDir, subject.file()).getCharContent(true));
+  }
+
+  private JavaFileObject extension(String subdir) {
+    return forResource(subdir, EXTENSION_NAME);
+  }
+
+  private JavaFileObject forResource(String subdir, String name) {
+    return Util.forResource(getClass().getSimpleName(), subdir + "/" + name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
new file mode 100644
index 000000000..b817a574d
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
@@ -0,0 +1,92 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Verifies the output of the processor with a simple single extension option in the new
+ * option style where extension methods always return values.
+ */
+public class GlideExtensionWithOptionTest {
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                forResource("ExtensionWithOption.java"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideRequest.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
new file mode 100644
index 000000000..c30527bce
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
@@ -0,0 +1,91 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Verifies the output of the processor with a simple single extension type.
+ */
+public class GlideExtensionWithTypeTest {
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                forResource("ExtensionWithType.java"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideRequests.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
new file mode 100644
index 000000000..e12d5b292
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
@@ -0,0 +1,91 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.google.testing.compile.Compilation;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+/**
+ * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s themselves.
+ */
+// Avoid warnings when using ExpectedException.
+@SuppressWarnings("ResultOfMethodCallIgnored")
+public class InvalidGlideExtensionTest {
+  @Rule public ExpectedException expectedException = ExpectedException.none();
+
+  @Test
+  public void compilation_withPublicConstructor_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "PublicConstructor",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "@GlideExtension",
+                "public class PublicConstructor { }"));
+  }
+
+  @Test
+  public void compilation_withExtension_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "@GlideExtension",
+                "class Extension {",
+                "  private Extension() {}",
+                "}"));
+  }
+
+
+  @Test
+  public void compilation_withNonStaticMethod_succeeds() {
+    Compilation compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                JavaFileObjects.forSourceLines(
+                    "Extension",
+                    "package com.bumptech.glide.test;",
+                    "import com.bumptech.glide.annotation.GlideExtension;",
+                    "@GlideExtension",
+                    "public class Extension {",
+                    "  private Extension() {}",
+                    "  public void doSomething() {}",
+                    "}"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_withStaticMethod_succeeds() {
+    Compilation compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                JavaFileObjects.forSourceLines(
+                    "Extension",
+                    "package com.bumptech.glide.test;",
+                    "import com.bumptech.glide.annotation.GlideExtension;",
+                    "@GlideExtension",
+                    "public class Extension {",
+                    "  private Extension() {}",
+                    "  public static void doSomething() {}",
+                    "}"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
new file mode 100644
index 000000000..edd87a8af
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
@@ -0,0 +1,280 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.google.testing.compile.Compilation;
+import com.google.testing.compile.JavaFileObjects;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+/**
+ * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s for methods annotated
+ * with {@link com.bumptech.glide.annotation.GlideOption}.
+ */
+// Ignore warnings since most methods use ExpectedException
+@SuppressWarnings("ResultOfMethodCallIgnored")
+public class InvalidGlideOptionsExtensionTest {
+  @Rule public ExpectedException expectedException = ExpectedException.none();
+
+  @Test
+  public void compilation_withAnnotatedNonStaticMethod_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public void doSomething() {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withoutRequestOptionsArg_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static void doSomething() {}",
+                "}"));
+
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withRequestOptionsArgInWrongOrder_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static void doSomething(Object arg1, RequestOptions options) {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withRequestOptionsArg_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static void doSomething(RequestOptions options) {}",
+                "}"));
+    assertThat(compilation).succeeded();
+    assertThat(compilation).hadWarningContaining("is using a legacy format.");
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withRequestOptionsArgAndOtherArg_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static void doSomething(RequestOptions options, Object arg2) {}",
+                "}"));
+    assertThat(compilation).succeeded();
+    assertThat(compilation).hadWarningContaining("is using a legacy format.");
+  }
+
+  @Test
+  public void compilation_overridingOptionWithoutAnnotationType_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static void centerCrop(RequestOptions options) {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withOverrideExtend_butNotOverridingMethod_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)",
+                "  public static void something(RequestOptions options) {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withOverrideExtend_andOverridingMethod_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)",
+                "  public static void centerCrop(RequestOptions options) {}",
+                "}"));
+    assertThat(compilation).succeeded();
+    assertThat(compilation).hadWarningContaining("is using a legacy format.");
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_butNotOverridingMethod_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)",
+                "  public static void something(RequestOptions options) {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_andOverridingMethod_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)",
+                "  public static void centerCrop(RequestOptions options) {}",
+                "}"));
+    assertThat(compilation).succeeded();
+    assertThat(compilation).hadWarningContaining("is using a legacy format.");
+  }
+
+  @Test
+  public void compilation_withRequestOptionsReturnValue_succeeds() {
+     Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static RequestOptions doSomething(RequestOptions options) {",
+                "    return options;",
+                "  }",
+                "}"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_withNonRequestOptionsReturnValue_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideOption;",
+                "import com.bumptech.glide.request.RequestOptions;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideOption",
+                "  public static Object doSomething(RequestOptions options) {",
+                "    return options;",
+                "  }",
+                "}"));
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
new file mode 100644
index 000000000..d1be3bff3
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
@@ -0,0 +1,302 @@
+package com.bumptech.glide.annotation.compiler;
+
+
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.google.testing.compile.Compilation;
+import com.google.testing.compile.JavaFileObjects;
+import java.io.IOException;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+/**
+ * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s for methods annotated
+ * with {@link com.bumptech.glide.annotation.GlideType}.
+ */
+// Ignore warnings since most methods use ExpectedException
+@SuppressWarnings("ResultOfMethodCallIgnored")
+public class InvalidGlideTypeExtensionTest {
+  @Rule public ExpectedException expectedException = ExpectedException.none();
+
+  @Test
+  public void compilation_withAnnotatedNonStaticMethod_fails() {
+    expectedException.expectMessage("@GlideType methods must be static");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideType;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideType(Number.class)",
+                "  public void doSomething() {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withoutRequestBuilderArg_fails() {
+    expectedException
+        .expectMessage(
+            "@GlideType methods must take a RequestBuilder object as their first and only"
+                + " parameter, but given multiple for:"
+                + " com.bumptech.glide.test.Extension#doSomething()");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideType;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideType(Number.class)",
+                "  public static void doSomething() {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withRequestBuilderArg_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.RequestBuilder;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideType;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideType(Number.class)",
+                "  public static void type(RequestBuilder<Number> builder) {}",
+                "}"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withNonRequestBuilderArg_fails() {
+    expectedException
+        .expectMessage(
+            "@GlideType methods must take a RequestBuilder object as their first and only"
+                + " parameter, but given: java.lang.Object");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines("Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.RequestBuilder;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideType;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideType(Number.class)",
+                "  public static void type(Object arg) {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_withRequestBuilderArgAndOtherArg_fails() {
+    expectedException
+        .expectMessage(
+            "@GlideType methods must take a RequestBuilder object as their first and only"
+                + " parameter, but given multiple for:"
+                + " com.bumptech.glide.test.Extension#type("
+                + "com.bumptech.glide.RequestBuilder<java.lang.Number>,"
+                + "java.lang.Object)");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.RequestBuilder;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideType;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideType(Number.class)",
+                "  public static void type(RequestBuilder<Number> builder, Object arg2) {}",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails()
+      throws IOException {
+    Compilation compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                JavaFileObjects.forSourceLines(
+                    "Extension",
+                    "package com.bumptech.glide.test;",
+                    "import android.graphics.drawable.Drawable;",
+                    "import com.bumptech.glide.RequestBuilder;",
+                    "import com.bumptech.glide.annotation.GlideExtension;",
+                    "import com.bumptech.glide.annotation.GlideType;",
+                    "@GlideExtension",
+                    "public class Extension {",
+                    "  private Extension() {}",
+                    "  @GlideType(Drawable.class)",
+                    "  public static void asDrawable(RequestBuilder<Drawable> builder) {}",
+                    "}"));
+    expectedException
+        .expectMessage(
+            "error: method asDrawable() is already defined in class"
+                + " com.bumptech.glide.test.GlideRequests");
+    compilation.generatedSourceFile(subpackage("GlideRequests"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_returningRequestBuilder_succeeds() {
+     Compilation compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                JavaFileObjects.forSourceLines(
+                    "Extension",
+                    "package com.bumptech.glide.test;",
+                    "import com.bumptech.glide.RequestBuilder;",
+                    "import com.bumptech.glide.annotation.GlideExtension;",
+                    "import com.bumptech.glide.annotation.GlideType;",
+                    "@GlideExtension",
+                    "public class Extension {",
+                    "  private Extension() {}",
+                    "  @GlideType(Number.class)",
+                    "  public static RequestBuilder<Number> asNumber(",
+                    "      RequestBuilder<Number> builder) {",
+                    "    return builder;",
+                    "  }",
+                    "}"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_returningNonRequestBuilder_fails() {
+    expectedException.expectMessage(
+        "@GlideType methods should return a RequestBuilder<java.lang.Number> object, but given:"
+            + " java.lang.Object. If you're using old style @GlideType methods, your method may"
+            + " have a void return type, but doing so is deprecated and support will be removed"
+            + " in a future version");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                "Extension",
+                "package com.bumptech.glide.test;",
+                "import com.bumptech.glide.RequestBuilder;",
+                "import com.bumptech.glide.annotation.GlideExtension;",
+                "import com.bumptech.glide.annotation.GlideType;",
+                "@GlideExtension",
+                "public class Extension {",
+                "  private Extension() {}",
+                "  @GlideType(Number.class)",
+                "  public static Object asNumber(",
+                "      RequestBuilder<Number> builder) {",
+                "    return new Object();",
+                "  }",
+                "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_returningBuilderWithIncorrectType_fails() {
+    expectedException.expectMessage(
+        "@GlideType methods should return a RequestBuilder<java.lang.Number> object, but given:"
+            + " com.bumptech.glide.RequestBuilder<java.lang.Object>. If you're using old style"
+            + " @GlideType methods, your method may have a void return type, but doing so is"
+            + " deprecated and support will be removed in a future version");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                 "Extension",
+                 "package com.bumptech.glide.test;",
+                 "import com.bumptech.glide.RequestBuilder;",
+                 "import com.bumptech.glide.annotation.GlideExtension;",
+                 "import com.bumptech.glide.annotation.GlideType;",
+                 "@GlideExtension",
+                 "public class Extension {",
+                 "  private Extension() {}",
+                 "  @GlideType(Number.class)",
+                 "  public static RequestBuilder<Object> asNumber(",
+                 "      RequestBuilder<Object> builder) {",
+                 "    return builder;",
+                 "  }",
+                 "}"));
+   }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_returningBuilder_andMultipleParams_fails() {
+    expectedException.expectMessage(
+        "@GlideType methods must take a RequestBuilder object as their first and only parameter,"
+            + " but given multiple for:"
+            + " com.bumptech.glide.test.Extension#asNumber("
+            + "com.bumptech.glide.RequestBuilder<java.lang.Number>,java.lang.Object)");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                 "Extension",
+                 "package com.bumptech.glide.test;",
+                 "import com.bumptech.glide.RequestBuilder;",
+                 "import com.bumptech.glide.annotation.GlideExtension;",
+                 "import com.bumptech.glide.annotation.GlideType;",
+                 "@GlideExtension",
+                 "public class Extension {",
+                 "  private Extension() {}",
+                 "  @GlideType(Number.class)",
+                 "  public static RequestBuilder<Number> asNumber(",
+                 "      RequestBuilder<Number> builder, Object arg1) {",
+                 "    return builder;",
+                 "  }",
+                 "}"));
+  }
+
+  @Test
+  public void compilation_withAnnotatedStaticMethod_returningBuilder_nonBuilderParam_fails() {
+    expectedException.expectMessage(
+        "@GlideType methods must take a RequestBuilder object as their first and only parameter,"
+            + " but given: java.lang.Object");
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(
+            emptyAppModule(),
+            JavaFileObjects.forSourceLines(
+                 "Extension",
+                 "package com.bumptech.glide.test;",
+                 "import com.bumptech.glide.RequestBuilder;",
+                 "import com.bumptech.glide.annotation.GlideExtension;",
+                 "import com.bumptech.glide.annotation.GlideType;",
+                 "@GlideExtension",
+                 "public class Extension {",
+                 "  private Extension() {}",
+                 "  @GlideType(Number.class)",
+                 "  public static RequestBuilder<Number> asNumber(",
+                 "      Object arg) {",
+                 "    return null;",
+                 "  }",
+                 "}"));
+   }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
new file mode 100644
index 000000000..174943da6
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
@@ -0,0 +1,104 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Test;
+
+/**
+ * Verifies only the output we expect to change based on the various configurations of GlideOptions
+ * when GlideOptions are defined in the legacy format.
+ *
+ * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
+ */
+public class LegacyGlideExtensionOptionsTest {
+  private static final String EXTENSION_NAME = "Extension.java";
+
+  @Test
+  public void compilation_withOverrideExtend_validOptions() throws IOException {
+    runTest("OverrideExtend", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withOverrideExtend_validRequest() throws IOException {
+    runTest("OverrideExtend", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_validOptions() throws IOException {
+    runTest("OverrideReplace", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withOverrideReplace_validRequest() throws IOException {
+    runTest("OverrideReplace", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withStaticMethodName_validOptions() throws IOException {
+    runTest("StaticMethodName", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withStaticMethodName_validRequest() throws IOException {
+    runTest("StaticMethodName", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withMemoizeStaticMethod_validOptions() throws IOException {
+    runTest("MemoizeStaticMethod", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withMemoizeStaticMethod_validRequest() throws IOException {
+    runTest("MemoizeStaticMethod", Subject.GlideRequest);
+  }
+
+  @Test
+  public void compilation_withSkipStaticMethod_validOptions() throws IOException {
+    runTest("SkipStaticMethod", Subject.GlideOptions);
+  }
+
+  @Test
+  public void compilation_withSkipStaticMethod_validRequest() throws IOException {
+    runTest("SkipStaticMethod", Subject.GlideRequest);
+  }
+
+  private enum Subject {
+    GlideOptions,
+    GlideRequest;
+
+    String file() {
+      return name() + ".java";
+    }
+  }
+
+  private void runTest(String subDir, Subject subject) throws IOException {
+     Compilation compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                extension(subDir));
+    assertThat(compilation).succeeded();
+
+    assertThat(compilation)
+        .generatedSourceFile(subpackage(subject.name()))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource(subDir, subject.file()).getCharContent(true));
+  }
+
+  private JavaFileObject extension(String subdir) {
+    return forResource(subdir, EXTENSION_NAME);
+  }
+
+  private JavaFileObject forResource(String subdir, String name) {
+    return Util.forResource(getClass().getSimpleName(), subdir + "/" + name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
new file mode 100644
index 000000000..c27831b5d
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
@@ -0,0 +1,98 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Verifies the output of the processor with a simple single extension option in the legacy
+ * option style where extension methods always returned {@code null}.
+ */
+public class LegacyGlideExtensionWithOptionTest {
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                forResource("ExtensionWithOption.java"));
+    assertThat(compilation).succeeded();
+    //noinspection ResultOfMethodCallIgnored
+    assertThat(compilation).hadWarningContaining(
+        "The squareThumb method annotated with @GlideOption in the ExtensionWithOption"
+            + " @GlideExtension is using a legacy format. Support will be removed in a future"
+            + " version. Please change your method definition so that your @GlideModule annotated"
+            + " methods return RequestOptions objects instead of null.");
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideRequest.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
new file mode 100644
index 000000000..47be57f75
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
@@ -0,0 +1,91 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Verifies the output of the processor with a simple single extension type.
+ */
+public class LegacyGlideExtensionWithTypeTest {
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                emptyAppModule(),
+                forResource("ExtensionWithType.java"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource("GlideRequests.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
new file mode 100644
index 000000000..17f8d648c
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
@@ -0,0 +1,51 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.testing.compile.Compilation;
+import javax.tools.JavaFileObject;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+/**
+ * Ensures that adding more than one {@link com.bumptech.glide.module.AppGlideModule} to a project
+ * will fail.
+ */
+public class MultipleAppGlideModuleTest {
+  @Rule public ExpectedException expectedException = ExpectedException.none();
+  private static final String FIRST_MODULE = "EmptyAppModule1.java";
+  private static final String SECOND_MODULE = "EmptyAppModule2.java";
+
+  // Throws.
+  @SuppressWarnings("ResultOfMethodCallIgnored")
+  @Test
+  public void compilation_withTwoAppModules_fails() {
+    expectedException.expect(RuntimeException.class);
+    javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(forResource(FIRST_MODULE), forResource(SECOND_MODULE));
+  }
+
+  @Test
+  public void compilation_withFirstModuleOnly_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(forResource(FIRST_MODULE));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_withSecondModuleOnly_succeeds() {
+    Compilation compilation = javac()
+        .withProcessors(new GlideAnnotationProcessor())
+        .compile(forResource(SECOND_MODULE));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
new file mode 100644
index 000000000..7b0bc7366
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
@@ -0,0 +1,51 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.common.truth.Truth;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Test;
+
+/**
+ * Tests adding multiple {@link com.bumptech.glide.module.LibraryGlideModule}s in a project.
+ */
+public class MultipleEmptyLibraryGlideModuleTest {
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                forResource("EmptyLibraryModule1.java"),
+                forResource("EmptyLibraryModule2.java"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  public void compilation_generatesAllExpectedFiles() {
+    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(1);
+  }
+
+  @Test
+  public void compilation_generatesExpectedIndexerForModules() throws IOException {
+    String expectedClassName =
+        "GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule1_com_bumptech_glide"
+            + "_test_EmptyLibraryModule2";
+    assertThat(compilation)
+        .generatedSourceFile(annotation(expectedClassName))
+        .contentsAsUtf8String()
+        .isEqualTo(forResource(expectedClassName + ".java").getCharContent(true));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
new file mode 100644
index 000000000..f52a7574a
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
@@ -0,0 +1,54 @@
+package com.bumptech.glide.annotation.compiler.test;
+
+import com.google.testing.compile.JavaFileObjects;
+import java.io.File;
+import javax.tools.JavaFileObject;
+
+/** Test utilities. */
+public final class Util {
+  private static final String GLIDE_PACKAGE_NAME = "com.bumptech.glide";
+  private static final String SUB_PACKAGE_NAME = qualified(GLIDE_PACKAGE_NAME, "test");
+  private static final String ANNOTATION_PACKAGE_NAME = "com.bumptech.glide.annotation.compiler";
+  private static final String DEFAULT_APP_DIR_NAME = "EmptyAppGlideModuleTest";
+  private static final String DEFAULT_LIBRARY_DIR_NAME = "EmptyLibraryGlideModuleTest";
+
+  private Util() {
+    // Utility class.
+  }
+
+  public static JavaFileObject emptyAppModule() {
+    return appResource("EmptyAppModule.java");
+  }
+
+  public static JavaFileObject emptyLibraryModule() {
+    return libraryResource("EmptyLibraryModule.java");
+  }
+
+  public static JavaFileObject appResource(String className) {
+    return forResource(DEFAULT_APP_DIR_NAME, className);
+  }
+
+  public static JavaFileObject libraryResource(String className) {
+    return forResource(DEFAULT_LIBRARY_DIR_NAME, className);
+  }
+
+  public static JavaFileObject forResource(String directoryName, String name) {
+    return JavaFileObjects.forResource(directoryName + File.separator + name);
+  }
+
+  public static String annotation(String className) {
+    return qualified(ANNOTATION_PACKAGE_NAME, className);
+  }
+
+  public static String subpackage(String className) {
+    return qualified(SUB_PACKAGE_NAME, className);
+  }
+
+  public static String glide(String className) {
+    return qualified(GLIDE_PACKAGE_NAME, className);
+  }
+
+  private static String qualified(String packageName, String className) {
+    return packageName + '.' + className;
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
new file mode 100644
index 000000000..7072cb886
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
@@ -0,0 +1,50 @@
+package com.bumptech.glide;
+
+import android.content.Context;
+import android.util.Log;
+import com.bumptech.glide.test.EmptyAppModule;
+import com.bumptech.glide.test.EmptyLibraryModule;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+import java.util.Collections;
+import java.util.Set;
+
+@SuppressWarnings("deprecation")
+final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
+  private final EmptyAppModule appGlideModule;
+
+  GeneratedAppGlideModuleImpl() {
+    appGlideModule = new EmptyAppModule();
+    if (Log.isLoggable("Glide", Log.DEBUG)) {
+      Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.EmptyAppModule");
+      Log.d("Glide", "Discovered LibraryGlideModule from annotation: com.bumptech.glide.test.EmptyLibraryModule");
+    }
+  }
+
+  @Override
+  public void applyOptions(Context context, GlideBuilder builder) {
+    appGlideModule.applyOptions(context, builder);
+  }
+
+  @Override
+  public void registerComponents(Context context, Glide glide, Registry registry) {
+    new EmptyLibraryModule().registerComponents(context, glide, registry);
+    appGlideModule.registerComponents(context, glide, registry);
+  }
+
+  @Override
+  public boolean isManifestParsingEnabled() {
+    return appGlideModule.isManifestParsingEnabled();
+  }
+
+  @Override
+  public Set<Class<?>> getExcludedModuleClasses() {
+    return Collections.emptySet();
+  }
+
+  @Override
+  GeneratedRequestManagerFactory getRequestManagerFactory() {
+    return new GeneratedRequestManagerFactory();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/EmptyAppModule.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/EmptyAppModule.java
new file mode 100644
index 000000000..203f9df63
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/EmptyAppModule.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+
+@GlideModule
+public final class EmptyAppModule extends AppGlideModule {}
\ No newline at end of file
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
new file mode 100644
index 000000000..9e437593d
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
@@ -0,0 +1,47 @@
+package com.bumptech.glide;
+
+import android.content.Context;
+import android.util.Log;
+import com.bumptech.glide.test.EmptyAppModule;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+import java.util.Collections;
+import java.util.Set;
+
+@SuppressWarnings("deprecation")
+final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
+  private final EmptyAppModule appGlideModule;
+
+  GeneratedAppGlideModuleImpl() {
+    appGlideModule = new EmptyAppModule();
+    if (Log.isLoggable("Glide", Log.DEBUG)) {
+      Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.EmptyAppModule");
+    }
+  }
+
+  @Override
+  public void applyOptions(Context context, GlideBuilder builder) {
+    appGlideModule.applyOptions(context, builder);
+  }
+
+  @Override
+  public void registerComponents(Context context, Glide glide, Registry registry) {
+    appGlideModule.registerComponents(context, glide, registry);
+  }
+
+  @Override
+  public boolean isManifestParsingEnabled() {
+    return appGlideModule.isManifestParsingEnabled();
+  }
+
+  @Override
+  public Set<Class<?>> getExcludedModuleClasses() {
+    return Collections.emptySet();
+  }
+
+  @Override
+  GeneratedRequestManagerFactory getRequestManagerFactory() {
+    return new GeneratedRequestManagerFactory();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java
new file mode 100644
index 000000000..3b28d3065
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java
@@ -0,0 +1,19 @@
+package com.bumptech.glide;
+
+import android.content.Context;
+import com.bumptech.glide.manager.Lifecycle;
+import com.bumptech.glide.manager.RequestManagerRetriever;
+import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.test.GlideRequests;
+import java.lang.Override;
+
+/**
+ * Generated code, do not modify
+ */
+final class GeneratedRequestManagerFactory implements RequestManagerRetriever.RequestManagerFactory {
+  @Override
+  public RequestManager build(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
+      Context context) {
+    return new GlideRequests(glide, lifecycle, treeNode, context);
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
new file mode 100644
index 000000000..3cee57111
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
@@ -0,0 +1,110 @@
+package com.bumptech.glide.test;
+
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
+import android.support.v4.app.FragmentActivity;
+import android.view.View;
+import com.bumptech.glide.Glide;
+import java.io.File;
+import java.lang.String;
+
+/**
+ * The entry point for interacting with Glide for Applications
+ *
+ * <p>Includes all generated APIs from all
+ * {@link com.bumptech.glide.annotation.GlideExtension}s in source and dependent libraries.
+ *
+ * <p>This class is generated and should not be modified
+ * @see Glide
+ */
+public final class GlideApp {
+  private GlideApp() {
+  }
+
+  /**
+   * @see Glide#getPhotoCacheDir(Context)
+   */
+  @Nullable
+  public static File getPhotoCacheDir(Context context) {
+    return Glide.getPhotoCacheDir(context);
+  }
+
+  /**
+   * @see Glide#getPhotoCacheDir(Context, String)
+   */
+  @Nullable
+  public static File getPhotoCacheDir(Context context, String cacheName) {
+    return Glide.getPhotoCacheDir(context, cacheName);
+  }
+
+  /**
+   * @see Glide#get(Context)
+   */
+  public static Glide get(Context context) {
+    return Glide.get(context);
+  }
+
+  /**
+   * @see Glide#init(Glide)
+   */
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void init(Glide glide) {
+    Glide.init(glide);
+  }
+
+  /**
+   * @see Glide#tearDown()
+   */
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void tearDown() {
+    Glide.tearDown();
+  }
+
+  /**
+   * @see Glide#with(Context)
+   */
+  public static GlideRequests with(Context context) {
+    return (GlideRequests) Glide.with(context);
+  }
+
+  /**
+   * @see Glide#with(Activity)
+   */
+  public static GlideRequests with(Activity activity) {
+    return (GlideRequests) Glide.with(activity);
+  }
+
+  /**
+   * @see Glide#with(FragmentActivity)
+   */
+  public static GlideRequests with(FragmentActivity activity) {
+    return (GlideRequests) Glide.with(activity);
+  }
+
+  /**
+   * @see Glide#with(Fragment)
+   */
+  public static GlideRequests with(Fragment fragment) {
+    return (GlideRequests) Glide.with(fragment);
+  }
+
+  /**
+   * @see Glide#with(Fragment)
+   */
+  public static GlideRequests with(android.support.v4.app.Fragment fragment) {
+    return (GlideRequests) Glide.with(fragment);
+  }
+
+  /**
+   * @see Glide#with(View)
+   */
+  public static GlideRequests with(View view) {
+    return (GlideRequests) Glide.with(view);
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
new file mode 100644
index 000000000..1e811710a
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -0,0 +1,547 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
new file mode 100644
index 000000000..cb416622f
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
@@ -0,0 +1,712 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
new file mode 100644
index 000000000..5a2c92d2f
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
@@ -0,0 +1,100 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.manager.Lifecycle;
+import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * Includes all additions from methods in {@link com.bumptech.glide.annotation.GlideExtension}s
+ * annotated with {@link com.bumptech.glide.annotation.GlideType}
+ *
+ * <p>Generated code, do not modify
+ */
+@SuppressWarnings("deprecation")
+public class GlideRequests extends RequestManager {
+  public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
+      Context context) {
+    super(glide, lifecycle, treeNode, context);
+  }
+
+  @Override
+  @CheckResult
+  public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resourceClass) {
+    return new GlideRequest<>(glide, this, resourceClass, context);
+  }
+
+  @Override
+  public GlideRequests applyDefaultRequestOptions(RequestOptions requestOptions) {
+    return (GlideRequests) super.applyDefaultRequestOptions(requestOptions);
+  }
+
+  @Override
+  public GlideRequests setDefaultRequestOptions(RequestOptions requestOptions) {
+    return (GlideRequests) super.setDefaultRequestOptions(requestOptions);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Bitmap> asBitmap() {
+    return (GlideRequest<Bitmap>) super.asBitmap();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<GifDrawable> asGif() {
+    return (GlideRequest<GifDrawable>) super.asGif();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Drawable> asDrawable() {
+    return (GlideRequest<Drawable>) super.asDrawable();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Object arg0) {
+    return (GlideRequest<Drawable>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> downloadOnly() {
+    return (GlideRequest<File>) super.downloadOnly();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> download(@Nullable Object arg0) {
+    return (GlideRequest<File>) super.download(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> asFile() {
+    return (GlideRequest<File>) super.asFile();
+  }
+
+  @Override
+  protected void setRequestOptions(@NonNull RequestOptions toSet) {
+    if (toSet instanceof com.bumptech.glide.test.GlideOptions) {
+      super.setRequestOptions(toSet);
+    } else {
+      super.setRequestOptions(new com.bumptech.glide.test.GlideOptions().apply(toSet));
+    }
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/EmptyLibraryGlideModuleTest/EmptyLibraryModule.java b/annotation/compiler/test/src/test/resources/EmptyLibraryGlideModuleTest/EmptyLibraryModule.java
new file mode 100644
index 000000000..60ad52260
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyLibraryGlideModuleTest/EmptyLibraryModule.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.LibraryGlideModule;
+
+@GlideModule
+public final class EmptyLibraryModule extends LibraryGlideModule {}
diff --git a/annotation/compiler/test/src/test/resources/EmptyLibraryGlideModuleTest/GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule.java b/annotation/compiler/test/src/test/resources/EmptyLibraryGlideModuleTest/GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule.java
new file mode 100644
index 000000000..b18a61cd1
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/EmptyLibraryGlideModuleTest/GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.annotation.compiler;
+
+@Index(
+    modules = "com.bumptech.glide.test.EmptyLibraryModule"
+)
+public class GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule {
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
new file mode 100644
index 000000000..e1b1e04f5
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(memoizeStaticMethod = true)
+  public static RequestOptions test(RequestOptions requestOptions) {
+    return requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
new file mode 100644
index 000000000..63d8797c5
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -0,0 +1,570 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform1;
+
+  private static GlideOptions centerInsideTransform2;
+
+  private static GlideOptions centerCropTransform3;
+
+  private static GlideOptions circleCropTransform4;
+
+  private static GlideOptions noTransformation5;
+
+  private static GlideOptions noAnimation6;
+
+  private static GlideOptions testOf0;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform1 == null) {
+      GlideOptions.fitCenterTransform1 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform2 == null) {
+      GlideOptions.centerInsideTransform2 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform2;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform3 == null) {
+      GlideOptions.centerCropTransform3 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform4 == null) {
+      GlideOptions.circleCropTransform4 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform4;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation5 == null) {
+      GlideOptions.noTransformation5 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation5;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation6 == null) {
+      GlideOptions.noAnimation6 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation6;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions test() {
+    return (GlideOptions) Extension.test(this);
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions testOf() {
+    if (GlideOptions.testOf0 == null) {
+      GlideOptions.testOf0 =
+          new GlideOptions().test().autoClone();
+    }
+    return GlideOptions.testOf0;
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
new file mode 100644
index 000000000..323154817
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#test()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> test() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java
new file mode 100644
index 000000000..862baa126
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
+  public static RequestOptions centerCrop(RequestOptions requestOptions) {
+    return requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
new file mode 100644
index 000000000..6f568a0f1
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -0,0 +1,560 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   * @see RequestOptions#centerCrop()
+   */
+  @Override
+  @CheckResult
+  public GlideOptions centerCrop() {
+    return (GlideOptions) Extension.centerCrop(super.centerCrop());
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions centerCropOf() {
+    return new GlideOptions().centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
new file mode 100644
index 000000000..cc504584d
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -0,0 +1,712 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java
new file mode 100644
index 000000000..714c287e5
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
+  public static RequestOptions override(RequestOptions requestOptions, int width, int height) {
+    return requestOptions
+        .override(width, height)
+        .centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
new file mode 100644
index 000000000..b29c470b6
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -0,0 +1,551 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#override(RequestOptions, int, int)
+   * @see RequestOptions#override(int, int)
+   */
+  @Override
+  @CheckResult
+  public GlideOptions override(int width, int height) {
+    return (GlideOptions) Extension.override(super.override(width, height), width, height);
+  }
+
+  /**
+   * @see Extension#override(RequestOptions, int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
new file mode 100644
index 000000000..d3c2e130b
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
@@ -0,0 +1,712 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java
new file mode 100644
index 000000000..ec436d765
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)
+  public static RequestOptions centerCrop(RequestOptions requestOptions) {
+    return requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
new file mode 100644
index 000000000..b876cbe4b
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -0,0 +1,558 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions centerCrop() {
+    return (GlideOptions) Extension.centerCrop(this);
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions centerCropOf() {
+    return new GlideOptions().centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
new file mode 100644
index 000000000..cc504584d
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -0,0 +1,712 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java
new file mode 100644
index 000000000..904c55a1c
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(skipStaticMethod = true)
+  public static RequestOptions test(RequestOptions requestOptions) {
+    return requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
new file mode 100644
index 000000000..78210a92b
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -0,0 +1,556 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions test() {
+    return (GlideOptions) Extension.test(this);
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
new file mode 100644
index 000000000..323154817
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#test()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> test() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java
new file mode 100644
index 000000000..aa124c142
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(staticMethodName = "testSomething")
+  public static RequestOptions test(RequestOptions requestOptions) {
+    return requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
new file mode 100644
index 000000000..95f08ecd2
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -0,0 +1,564 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions test() {
+    return (GlideOptions) Extension.test(this);
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions testSomething() {
+    return new GlideOptions().test();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
new file mode 100644
index 000000000..323154817
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#test()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> test() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java
new file mode 100644
index 000000000..8f6de0051
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class ExtensionWithOption {
+
+  private ExtensionWithOption() {
+    // Utility class.
+  }
+
+  @GlideOption
+  public static RequestOptions squareThumb(RequestOptions requestOptions) {
+    return requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
new file mode 100644
index 000000000..6cd0830a8
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -0,0 +1,564 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see ExtensionWithOption
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see ExtensionWithOption#squareThumb(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions squareThumb() {
+    return (GlideOptions) ExtensionWithOption.squareThumb(this);
+  }
+
+  /**
+   * @see ExtensionWithOption#squareThumb(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions squareThumbOf() {
+    return new GlideOptions().squareThumb();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
new file mode 100644
index 000000000..4a001e45a
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#squareThumb()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> squareThumb() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).squareThumb();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).squareThumb();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
new file mode 100644
index 000000000..c640dc455
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.annotation.GlideType;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class ExtensionWithType {
+
+  private ExtensionWithType() {
+    // Utility class.
+  }
+
+  @GlideType(Number.class)
+  public static RequestBuilder<Number> asNumber(RequestBuilder<Number> builder) {
+    return builder;
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
new file mode 100644
index 000000000..f9efd03f0
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -0,0 +1,548 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see ExtensionWithType
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
new file mode 100644
index 000000000..99aa810a1
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
@@ -0,0 +1,108 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.manager.Lifecycle;
+import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Number;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * Includes all additions from methods in {@link com.bumptech.glide.annotation.GlideExtension}s
+ * annotated with {@link com.bumptech.glide.annotation.GlideType}
+ *
+ * <p>Generated code, do not modify
+ */
+@SuppressWarnings("deprecation")
+public class GlideRequests extends RequestManager {
+  public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
+      Context context) {
+    super(glide, lifecycle, treeNode, context);
+  }
+
+  @Override
+  @CheckResult
+  public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resourceClass) {
+    return new GlideRequest<>(glide, this, resourceClass, context);
+  }
+
+  /**
+   * @see ExtensionWithType#asNumber(RequestBuilder)
+   */
+  public GlideRequest<Number> asNumber() {
+    return (GlideRequest<Number>) ExtensionWithType.asNumber(this.as(Number.class));
+  }
+
+  @Override
+  public GlideRequests applyDefaultRequestOptions(RequestOptions requestOptions) {
+    return (GlideRequests) super.applyDefaultRequestOptions(requestOptions);
+  }
+
+  @Override
+  public GlideRequests setDefaultRequestOptions(RequestOptions requestOptions) {
+    return (GlideRequests) super.setDefaultRequestOptions(requestOptions);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Bitmap> asBitmap() {
+    return (GlideRequest<Bitmap>) super.asBitmap();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<GifDrawable> asGif() {
+    return (GlideRequest<GifDrawable>) super.asGif();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Drawable> asDrawable() {
+    return (GlideRequest<Drawable>) super.asDrawable();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Object arg0) {
+    return (GlideRequest<Drawable>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> downloadOnly() {
+    return (GlideRequest<File>) super.downloadOnly();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> download(@Nullable Object arg0) {
+    return (GlideRequest<File>) super.download(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> asFile() {
+    return (GlideRequest<File>) super.asFile();
+  }
+
+  @Override
+  protected void setRequestOptions(@NonNull RequestOptions toSet) {
+    if (toSet instanceof com.bumptech.glide.test.GlideOptions) {
+      super.setRequestOptions(toSet);
+    } else {
+      super.setRequestOptions(new com.bumptech.glide.test.GlideOptions().apply(toSet));
+    }
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
new file mode 100644
index 000000000..f37b64050
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(memoizeStaticMethod = true)
+  public static void test(RequestOptions requestOptions) {
+    requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
new file mode 100644
index 000000000..b0fb6d819
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -0,0 +1,574 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform1;
+
+  private static GlideOptions centerInsideTransform2;
+
+  private static GlideOptions centerCropTransform3;
+
+  private static GlideOptions circleCropTransform4;
+
+  private static GlideOptions noTransformation5;
+
+  private static GlideOptions noAnimation6;
+
+  private static GlideOptions testOf0;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform1 == null) {
+      GlideOptions.fitCenterTransform1 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform2 == null) {
+      GlideOptions.centerInsideTransform2 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform2;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform3 == null) {
+      GlideOptions.centerCropTransform3 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform4 == null) {
+      GlideOptions.circleCropTransform4 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform4;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation5 == null) {
+      GlideOptions.noTransformation5 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation5;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation6 == null) {
+      GlideOptions.noAnimation6 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation6;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions test() {
+    if (isAutoCloneEnabled()) {
+      return clone().test();
+    }
+    Extension.test(this);
+    return this;
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions testOf() {
+    if (GlideOptions.testOf0 == null) {
+      GlideOptions.testOf0 =
+          new GlideOptions().test().autoClone();
+    }
+    return GlideOptions.testOf0;
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
new file mode 100644
index 000000000..323154817
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#test()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> test() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/Extension.java
new file mode 100644
index 000000000..5bc2838f8
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
+  public static void centerCrop(RequestOptions requestOptions) {
+    requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
new file mode 100644
index 000000000..ed6bb7812
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -0,0 +1,565 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   * @see RequestOptions#centerCrop()
+   */
+  @Override
+  @CheckResult
+  public GlideOptions centerCrop() {
+    if (isAutoCloneEnabled()) {
+      return clone().centerCrop();
+    }
+    super.centerCrop();
+    Extension.centerCrop(this);
+    return this;
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions centerCropOf() {
+    return new GlideOptions().centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
new file mode 100644
index 000000000..cc504584d
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -0,0 +1,712 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/Extension.java
new file mode 100644
index 000000000..591f857f2
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)
+  public static void centerCrop(RequestOptions requestOptions) {
+    requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
new file mode 100644
index 000000000..823666b54
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -0,0 +1,562 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions centerCrop() {
+    if (isAutoCloneEnabled()) {
+      return clone().centerCrop();
+    }
+    Extension.centerCrop(this);
+    return this;
+  }
+
+  /**
+   * @see Extension#centerCrop(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions centerCropOf() {
+    return new GlideOptions().centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
new file mode 100644
index 000000000..cc504584d
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -0,0 +1,712 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/Extension.java
new file mode 100644
index 000000000..448a02b74
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(skipStaticMethod = true)
+  public static void test(RequestOptions requestOptions) {
+    requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
new file mode 100644
index 000000000..c28a1716e
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -0,0 +1,560 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions test() {
+    if (isAutoCloneEnabled()) {
+      return clone().test();
+    }
+    Extension.test(this);
+    return this;
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
new file mode 100644
index 000000000..323154817
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#test()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> test() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/Extension.java
new file mode 100644
index 000000000..b6c72bbad
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/Extension.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class Extension {
+
+  private Extension() {
+    // Utility class.
+  }
+
+  @GlideOption(staticMethodName = "testSomething")
+  public static void test(RequestOptions requestOptions) {
+    requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
new file mode 100644
index 000000000..5d3a80144
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -0,0 +1,568 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see Extension
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions test() {
+    if (isAutoCloneEnabled()) {
+      return clone().test();
+    }
+    Extension.test(this);
+    return this;
+  }
+
+  /**
+   * @see Extension#test(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions testSomething() {
+    return new GlideOptions().test();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
new file mode 100644
index 000000000..323154817
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#test()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> test() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/ExtensionWithOption.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/ExtensionWithOption.java
new file mode 100644
index 000000000..b67065d43
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/ExtensionWithOption.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class ExtensionWithOption {
+
+  private ExtensionWithOption() {
+    // Utility class.
+  }
+
+  @GlideOption
+  public static void squareThumb(RequestOptions requestOptions) {
+    requestOptions.centerCrop();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
new file mode 100644
index 000000000..9f96d3b80
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
@@ -0,0 +1,568 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see ExtensionWithOption
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+
+  /**
+   * @see ExtensionWithOption#squareThumb(RequestOptions)
+   */
+  @CheckResult
+  public GlideOptions squareThumb() {
+    if (isAutoCloneEnabled()) {
+      return clone().squareThumb();
+    }
+    ExtensionWithOption.squareThumb(this);
+    return this;
+  }
+
+  /**
+   * @see ExtensionWithOption#squareThumb(RequestOptions)
+   */
+  @CheckResult
+  public static GlideOptions squareThumbOf() {
+    return new GlideOptions().squareThumb();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
new file mode 100644
index 000000000..4a001e45a
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
@@ -0,0 +1,725 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.TransitionOptions;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Deprecated;
+import java.lang.Integer;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.String;
+import java.lang.SuppressWarnings;
+import java.net.URL;
+
+/**
+ * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
+ * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
+ * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * <p>Generated code, do not modify.
+ *
+ * @see RequestBuilder<TranscodeType>
+ * @see RequestOptions
+ */
+@SuppressWarnings({
+    "unused",
+    "deprecation"
+})
+public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
+  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+    super(transcodeClass, other);
+  }
+
+  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
+      Context context) {
+    super(glide, requestManager ,transcodeClass, context);
+  }
+
+  @Override
+  @CheckResult
+  protected GlideRequest<File> getDownloadOnlyRequest() {
+    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * @see GlideOptions#sizeMultiplier(float)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#useAnimationPool(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#onlyRetrieveFromCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#priority(Priority)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#placeholder(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fallback(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(Drawable)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#error(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#theme(Resources.Theme)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#skipMemoryCache(boolean)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int, int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#override(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> override(int size) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#signature(Key)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#set(Option<T>, T)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#decode(Class<?>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#encodeQuality(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#frame(long)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#format(DecodeFormat)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#disallowHardwareConfig()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> disallowHardwareConfig() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#downsample(DownsampleStrategy)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#timeout(int)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalFitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalFitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#fitCenter()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> fitCenter() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCenterInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCenterInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#centerInside()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> centerInside() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalCircleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalCircleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#circleCrop()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> circleCrop() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transforms(Transformation<Bitmap>[])
+   */
+  @CheckResult
+  @SuppressWarnings({
+      "unchecked",
+      "varargs"
+  })
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   */
+  @CheckResult
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontTransform()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontTransform() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#dontAnimate()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> dontAnimate() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
+    }
+    return this;
+  }
+
+  /**
+   * @see GlideOptions#squareThumb()
+   */
+  @CheckResult
+  public GlideRequest<TranscodeType> squareThumb() {
+    if (getMutableOptions() instanceof GlideOptions) {
+      this.requestOptions = ((GlideOptions) getMutableOptions()).squareThumb();
+    } else {
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).squareThumb();
+    }
+    return this;
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
+    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  }
+
+  @Override
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  @SafeVarargs
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @Deprecated
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
+    return (GlideRequest<TranscodeType>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<TranscodeType> clone() {
+    return (GlideRequest<TranscodeType>) super.clone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
new file mode 100644
index 000000000..7df95adb5
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.annotation.GlideType;
+import com.bumptech.glide.request.RequestOptions;
+
+@GlideExtension
+public final class ExtensionWithType {
+
+  private ExtensionWithType() {
+    // Utility class.
+  }
+
+  @GlideType(Number.class)
+  public static void asInteger(RequestBuilder<Number> builder) {}
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
new file mode 100644
index 000000000..f9efd03f0
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
@@ -0,0 +1,548 @@
+package com.bumptech.glide.test;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.RequestOptions;
+import java.lang.Class;
+import java.lang.Cloneable;
+import java.lang.Override;
+import java.lang.SafeVarargs;
+import java.lang.SuppressWarnings;
+
+/**
+ * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
+ *
+ * @see RequestOptions
+ * @see ExtensionWithType
+ */
+@SuppressWarnings("deprecation")
+public final class GlideOptions extends RequestOptions implements Cloneable {
+  private static GlideOptions fitCenterTransform0;
+
+  private static GlideOptions centerInsideTransform1;
+
+  private static GlideOptions centerCropTransform2;
+
+  private static GlideOptions circleCropTransform3;
+
+  private static GlideOptions noTransformation4;
+
+  private static GlideOptions noAnimation5;
+
+  /**
+   * @see RequestOptions#sizeMultiplierOf(float)
+   */
+  @CheckResult
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return new GlideOptions().sizeMultiplier(arg0);
+  }
+
+  /**
+   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
+   */
+  @CheckResult
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
+    return new GlideOptions().diskCacheStrategy(arg0);
+  }
+
+  /**
+   * @see RequestOptions#priorityOf(Priority)
+   */
+  @CheckResult
+  public static GlideOptions priorityOf(@NonNull Priority arg0) {
+    return new GlideOptions().priority(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#placeholderOf(int)
+   */
+  @CheckResult
+  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
+    return new GlideOptions().placeholder(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(Drawable)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@Nullable Drawable arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#errorOf(int)
+   */
+  @CheckResult
+  public static GlideOptions errorOf(@DrawableRes int arg0) {
+    return new GlideOptions().error(arg0);
+  }
+
+  /**
+   * @see RequestOptions#skipMemoryCacheOf(boolean)
+   */
+  @CheckResult
+  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
+    return new GlideOptions().skipMemoryCache(skipMemoryCache);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int, int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
+      @IntRange(from = 0) int arg1) {
+    return new GlideOptions().override(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#overrideOf(int)
+   */
+  @CheckResult
+  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().override(arg0);
+  }
+
+  /**
+   * @see RequestOptions#signatureOf(Key)
+   */
+  @CheckResult
+  public static GlideOptions signatureOf(@NonNull Key arg0) {
+    return new GlideOptions().signature(arg0);
+  }
+
+  /**
+   * @see RequestOptions#fitCenterTransform()
+   */
+  @CheckResult
+  public static GlideOptions fitCenterTransform() {
+    if (GlideOptions.fitCenterTransform0 == null) {
+      GlideOptions.fitCenterTransform0 =
+          new GlideOptions().fitCenter().autoClone();
+    }
+    return GlideOptions.fitCenterTransform0;
+  }
+
+  /**
+   * @see RequestOptions#centerInsideTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerInsideTransform() {
+    if (GlideOptions.centerInsideTransform1 == null) {
+      GlideOptions.centerInsideTransform1 =
+          new GlideOptions().centerInside().autoClone();
+    }
+    return GlideOptions.centerInsideTransform1;
+  }
+
+  /**
+   * @see RequestOptions#centerCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions centerCropTransform() {
+    if (GlideOptions.centerCropTransform2 == null) {
+      GlideOptions.centerCropTransform2 =
+          new GlideOptions().centerCrop().autoClone();
+    }
+    return GlideOptions.centerCropTransform2;
+  }
+
+  /**
+   * @see RequestOptions#circleCropTransform()
+   */
+  @CheckResult
+  public static GlideOptions circleCropTransform() {
+    if (GlideOptions.circleCropTransform3 == null) {
+      GlideOptions.circleCropTransform3 =
+          new GlideOptions().circleCrop().autoClone();
+    }
+    return GlideOptions.circleCropTransform3;
+  }
+
+  /**
+   * @see RequestOptions#bitmapTransform(Transformation)
+   */
+  @CheckResult
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
+    return new GlideOptions().transform(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noTransformation()
+   */
+  @CheckResult
+  public static GlideOptions noTransformation() {
+    if (GlideOptions.noTransformation4 == null) {
+      GlideOptions.noTransformation4 =
+          new GlideOptions().dontTransform().autoClone();
+    }
+    return GlideOptions.noTransformation4;
+  }
+
+  /**
+   * @see RequestOptions#option(Option, T)
+   */
+  @CheckResult
+  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return new GlideOptions().set(arg0, arg1);
+  }
+
+  /**
+   * @see RequestOptions#decodeTypeOf(Class)
+   */
+  @CheckResult
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
+    return new GlideOptions().decode(arg0);
+  }
+
+  /**
+   * @see RequestOptions#formatOf(DecodeFormat)
+   */
+  @CheckResult
+  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
+    return new GlideOptions().format(arg0);
+  }
+
+  /**
+   * @see RequestOptions#frameOf(long)
+   */
+  @CheckResult
+  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
+    return new GlideOptions().frame(arg0);
+  }
+
+  /**
+   * @see RequestOptions#downsampleOf(DownsampleStrategy)
+   */
+  @CheckResult
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
+    return new GlideOptions().downsample(arg0);
+  }
+
+  /**
+   * @see RequestOptions#timeoutOf(int)
+   */
+  @CheckResult
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
+    return new GlideOptions().timeout(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeQualityOf(int)
+   */
+  @CheckResult
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
+    return new GlideOptions().encodeQuality(arg0);
+  }
+
+  /**
+   * @see RequestOptions#encodeFormatOf(CompressFormat)
+   */
+  @CheckResult
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
+    return new GlideOptions().encodeFormat(arg0);
+  }
+
+  /**
+   * @see RequestOptions#noAnimation()
+   */
+  @CheckResult
+  public static GlideOptions noAnimation() {
+    if (GlideOptions.noAnimation5 == null) {
+      GlideOptions.noAnimation5 =
+          new GlideOptions().dontAnimate().autoClone();
+    }
+    return GlideOptions.noAnimation5;
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+    return (GlideOptions) super.sizeMultiplier(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions useAnimationPool(boolean flag) {
+    return (GlideOptions) super.useAnimationPool(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+    return (GlideOptions) super.onlyRetrieveFromCache(flag);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+    return (GlideOptions) super.diskCacheStrategy(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions priority(@NonNull Priority arg0) {
+    return (GlideOptions) super.priority(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@Nullable Drawable arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions placeholder(@DrawableRes int arg0) {
+    return (GlideOptions) super.placeholder(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@Nullable Drawable arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fallback(@DrawableRes int arg0) {
+    return (GlideOptions) super.fallback(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@Nullable Drawable arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions error(@DrawableRes int arg0) {
+    return (GlideOptions) super.error(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
+    return (GlideOptions) super.theme(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions skipMemoryCache(boolean skip) {
+    return (GlideOptions) super.skipMemoryCache(skip);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int width, int height) {
+    return (GlideOptions) super.override(width, height);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions override(int size) {
+    return (GlideOptions) super.override(size);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions signature(@NonNull Key arg0) {
+    return (GlideOptions) super.signature(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions clone() {
+    return (GlideOptions) super.clone();
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
+    return (GlideOptions) super.set(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions decode(@NonNull Class<?> arg0) {
+    return (GlideOptions) super.decode(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+    return (GlideOptions) super.encodeFormat(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+    return (GlideOptions) super.encodeQuality(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
+    return (GlideOptions) super.frame(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions format(@NonNull DecodeFormat arg0) {
+    return (GlideOptions) super.format(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions disallowHardwareConfig() {
+    return (GlideOptions) super.disallowHardwareConfig();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
+    return (GlideOptions) super.downsample(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
+    return (GlideOptions) super.timeout(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterCrop() {
+    return (GlideOptions) super.optionalCenterCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerCrop() {
+    return (GlideOptions) super.centerCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalFitCenter() {
+    return (GlideOptions) super.optionalFitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions fitCenter() {
+    return (GlideOptions) super.fitCenter();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCenterInside() {
+    return (GlideOptions) super.optionalCenterInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions centerInside() {
+    return (GlideOptions) super.centerInside();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalCircleCrop() {
+    return (GlideOptions) super.optionalCircleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions circleCrop() {
+    return (GlideOptions) super.circleCrop();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.transform(arg0);
+  }
+
+  @Override
+  @SafeVarargs
+  @CheckResult
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
+    return (GlideOptions) super.transforms(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+    return (GlideOptions) super.optionalTransform(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
+      @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
+    return (GlideOptions) super.transform(arg0, arg1);
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontTransform() {
+    return (GlideOptions) super.dontTransform();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions dontAnimate() {
+    return (GlideOptions) super.dontAnimate();
+  }
+
+  @Override
+  @CheckResult
+  public final GlideOptions apply(@NonNull RequestOptions arg0) {
+    return (GlideOptions) super.apply(arg0);
+  }
+
+  @Override
+  public final GlideOptions lock() {
+    return (GlideOptions) super.lock();
+  }
+
+  @Override
+  public final GlideOptions autoClone() {
+    return (GlideOptions) super.autoClone();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
new file mode 100644
index 000000000..e8cf9ea52
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
@@ -0,0 +1,110 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.manager.Lifecycle;
+import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.request.RequestOptions;
+import java.io.File;
+import java.lang.Class;
+import java.lang.Number;
+import java.lang.Object;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+
+/**
+ * Includes all additions from methods in {@link com.bumptech.glide.annotation.GlideExtension}s
+ * annotated with {@link com.bumptech.glide.annotation.GlideType}
+ *
+ * <p>Generated code, do not modify
+ */
+@SuppressWarnings("deprecation")
+public class GlideRequests extends RequestManager {
+  public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
+      Context context) {
+    super(glide, lifecycle, treeNode, context);
+  }
+
+  @Override
+  @CheckResult
+  public <ResourceType> GlideRequest<ResourceType> as(Class<ResourceType> resourceClass) {
+    return new GlideRequest<>(glide, this, resourceClass, context);
+  }
+
+  /**
+   * @see ExtensionWithType#asInteger(RequestBuilder)
+   */
+  public GlideRequest<Number> asInteger() {
+    GlideRequest<Number> requestBuilder = this.as(Number.class);
+    ExtensionWithType.asInteger(requestBuilder);
+    return requestBuilder;
+  }
+
+  @Override
+  public GlideRequests applyDefaultRequestOptions(RequestOptions requestOptions) {
+    return (GlideRequests) super.applyDefaultRequestOptions(requestOptions);
+  }
+
+  @Override
+  public GlideRequests setDefaultRequestOptions(RequestOptions requestOptions) {
+    return (GlideRequests) super.setDefaultRequestOptions(requestOptions);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Bitmap> asBitmap() {
+    return (GlideRequest<Bitmap>) super.asBitmap();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<GifDrawable> asGif() {
+    return (GlideRequest<GifDrawable>) super.asGif();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Drawable> asDrawable() {
+    return (GlideRequest<Drawable>) super.asDrawable();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<Drawable> load(@Nullable Object arg0) {
+    return (GlideRequest<Drawable>) super.load(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> downloadOnly() {
+    return (GlideRequest<File>) super.downloadOnly();
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> download(@Nullable Object arg0) {
+    return (GlideRequest<File>) super.download(arg0);
+  }
+
+  @Override
+  @CheckResult
+  public GlideRequest<File> asFile() {
+    return (GlideRequest<File>) super.asFile();
+  }
+
+  @Override
+  protected void setRequestOptions(@NonNull RequestOptions toSet) {
+    if (toSet instanceof com.bumptech.glide.test.GlideOptions) {
+      super.setRequestOptions(toSet);
+    } else {
+      super.setRequestOptions(new com.bumptech.glide.test.GlideOptions().apply(toSet));
+    }
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/MultipleAppGlideModuleTest/EmptyAppModule1.java b/annotation/compiler/test/src/test/resources/MultipleAppGlideModuleTest/EmptyAppModule1.java
new file mode 100644
index 000000000..a05259d66
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/MultipleAppGlideModuleTest/EmptyAppModule1.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+
+@GlideModule
+public final class EmptyAppModule1 extends AppGlideModule {}
\ No newline at end of file
diff --git a/annotation/compiler/test/src/test/resources/MultipleAppGlideModuleTest/EmptyAppModule2.java b/annotation/compiler/test/src/test/resources/MultipleAppGlideModuleTest/EmptyAppModule2.java
new file mode 100644
index 000000000..fb46c0c13
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/MultipleAppGlideModuleTest/EmptyAppModule2.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+
+@GlideModule
+public final class EmptyAppModule2 extends AppGlideModule {}
\ No newline at end of file
diff --git a/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/EmptyLibraryModule1.java b/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/EmptyLibraryModule1.java
new file mode 100644
index 000000000..236008a91
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/EmptyLibraryModule1.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.LibraryGlideModule;
+
+@GlideModule
+public final class EmptyLibraryModule1 extends LibraryGlideModule {}
diff --git a/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/EmptyLibraryModule2.java b/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/EmptyLibraryModule2.java
new file mode 100644
index 000000000..8a43eb292
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/EmptyLibraryModule2.java
@@ -0,0 +1,7 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.LibraryGlideModule;
+
+@GlideModule
+public final class EmptyLibraryModule2 extends LibraryGlideModule {}
diff --git a/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule1_com_bumptech_glide_test_EmptyLibraryModule2.java b/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule1_com_bumptech_glide_test_EmptyLibraryModule2.java
new file mode 100644
index 000000000..d4284aa69
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/MultipleEmptyLibraryGlideModuleTest/GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule1_com_bumptech_glide_test_EmptyLibraryModule2.java
@@ -0,0 +1,10 @@
+package com.bumptech.glide.annotation.compiler;
+
+@Index(
+    modules = {
+        "com.bumptech.glide.test.EmptyLibraryModule1",
+        "com.bumptech.glide.test.EmptyLibraryModule2"
+    }
+)
+public class GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule1_com_bumptech_glide_test_EmptyLibraryModule2 {
+}
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
index 70d7b4cbb..7c0db39d6 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
@@ -17,6 +17,54 @@
  *
  * <p>Methods with this annotation will only be found if they belong to classes annotated with
  * {@link GlideExtension}.
+ *
+ * <p>The preferred way of writing extension methods returns the provided
+ * {@code com.bumptech.glide.request.RequestOptions} object with one or more methods called on it.
+ * You must not return a newly instantiated {@code com.bumptech.glide.request.RequestOptions} object
+ * as doing so my cause a {@code ClassCastException} at runtime. Calling either
+ * {@code com.bumptech.glide.request.RequestOptions#autoClone()} or
+ * {@code com.bumptech.glide.request.RequestOptions#lock()} is safe, but unnecessary and should
+ * typically be avoided. The preferred style looks like:
+ *
+ * <pre>
+ * {@code
+ * @GlideExtenion
+ * public class MyExtension {
+ *   private MyExtension() {}
+ *
+ *   @GlideOption
+ *   public static RequestOptions myOption(RequestOptions options) {
+ *     return options
+ *         .optionOne()
+ *         .optionTwo();
+ *   }
+ * }
+ * }
+ * </pre>
+ *
+ * <p>The deprecated way of writing extension methods is simply a static void method. The
+ * {@code com.bumptech.glide.request.RequestOptions} object is cloned before it is passed to this
+ * method to avoid an option method returning a new instance, but using methods like
+ * {@code com.bumptech.glide.request.RequestOptions#clone()} or
+ * {@code com.bumptech.glide.request.RequestOptions#autoClone()} can result in options applied in
+ * the method being silently ignored. Prefer the new style whenever possible.
+ *
+ * <pre>
+ * {@code
+ * @GlideExtenion
+ * public class MyExtension {
+ *   private MyExtension() {}
+ *
+ *   // Deprecated! Use the new style of GlideOption extensions instead.
+ *   @GlideOption
+ *   public static void myOption(RequestOptions options) {
+ *     options
+ *         .optionOne()
+ *         .optionTwo();
+ *   }
+ * }
+ * }
+ * </pre>
  */
 @Target(ElementType.METHOD)
 // Needs to be parsed from class files in JAR.
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java
index 4b51ed1c6..d3538d99b 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideType.java
@@ -22,8 +22,11 @@
  * with {@link GlideExtension}.
  *
  * <p>Methods annotated with GlideType must have a single parameter. The type of the
- * single parameter must be {@code com.bumptech.glide.request.RequestOptions}, with a type
+ * single parameter must be {@code com.bumptech.glide.RequestBuilder}, with a type
  * matching the value of {@link #value()}.
+ *
+ * <p>Compilation will fail if a method annotated with this method is identical to a method in
+ * {@code com.bumptech.glide.RequestManager}
  */
 @Target(ElementType.METHOD)
 // Needs to be parsed from class files in JAR.
@@ -33,7 +36,8 @@
   /**
    * A Resource class name, like GifDrawable.class, Bitmap.class etc.
    *
-   * <p>Must match the type of the {@code com.bumptech.glide.request.RequestOptions} parameter.
+   * <p>Must match the type of the {@code com.bumptech.glide.RequestBuilder} parameter in the
+   * annotated method.
    */
   Class<?> value();
 }
diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index e9fb1ebcb..f40e867cc 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -6,6 +6,7 @@
 
 <suppressions>
     <suppress files=".*[/\\]library[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
+    <suppress files=".*[/\\]annotation[/\\]compiler[/\\]test[/\\]src[/\\]test[/\\]resources[/\\].*" checks=".*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>
diff --git a/glide/build.gradle b/glide/build.gradle
index a5f480f66..3c03c394f 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -25,7 +25,7 @@ static def getAndroidPathsForJavadoc() {
 
 // The paths of Java projects that should be included only in Javadoc, not in the jar.
 static def getJavaPathsForJavadoc() {
-    [':annotation', ':annotation:compiler']
+    [':annotation']
 }
 
 (getAndroidPathsForJavadoc() + getAndroidPathsForJar() +
@@ -82,12 +82,12 @@ static def getAndroidLibraryVariants(projects, variantName) {
 }
 
 def getSourceFilesForVariantJar(variantName) {
-    getAndroidLibraryVariantsForJar(variantName).collect { it.javaCompile.source } +
+    getAndroidLibraryVariantsForJar(variantName).collect { it.getJavaCompiler().source } +
             getInternalJavaProjectsForJar().collect { it.sourceSets.main.allJava }
 }
 
 def getSourceFilesForVariantJavadoc(variantName) {
-    getAndroidLibraryVariantsForJavadoc(variantName).collect { it.javaCompile.source } +
+    getAndroidLibraryVariantsForJavadoc(variantName).collect { it.getJavaCompiler().source } +
             getInternalJavaProjectsForJavadoc().collect { it.sourceSets.main.allJava }
 }
 
@@ -99,7 +99,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
 // Generate javadocs and sources containing batched documentation and sources for all internal
 // projects.
-['release', 'debug'].each { variantName ->
+['release'].each { variantName ->
 
     task("${variantName}SourceJar", type: Jar) {
         from getSourceFilesForVariantJar(variantName)
@@ -112,10 +112,10 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
         classpath = project.files(
                 getAndroidJar(),
                 getAndroidLibraryVariantsForJar(variantName).collect { LibraryVariant lib ->
-                    lib.javaCompile.classpath.files
+                    lib.getJavaCompiler().classpath.files
                 },
                 getAndroidLibraryVariantsForJavadoc(variantName).collect { LibraryVariant lib ->
-                    lib.javaCompile.classpath.files
+                    lib.getJavaCompiler().classpath.files
                 },
                 getInternalJavaProjectsForJavadoc().collect { Project project ->
                     project.sourceSets.main.compileClasspath.files
@@ -158,7 +158,7 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 jar {
     from files(
             getReleaseVariantAndroidProjectsForJar().collect { LibraryVariant variant ->
-                variant.javaCompile.destinationDir
+                variant.getJavaCompiler().destinationDir
             }
     )
     exclude "**/R.class"
@@ -166,15 +166,16 @@ jar {
     from files(getInternalJavaProjectsForJar().collect { it.sourceSets.main.output })
 }
 
-def getAllInternalProjectBuildDeps() {
-    getInternalAndroidProjectsForJar() + getInternalJavaProjectsForJar() +
-            getInternalJavaProjectsForJavadoc() + getInternalAndroidProjectsForJavadoc()
+(getInternalAndroidProjectsForJar() + getInternalAndroidProjectsForJavadoc()).each {
+    project ->
+        releaseJavadoc.dependsOn(project.tasks.compileDebugJavaWithJavac)
+        jar.dependsOn(project.tasks.compileDebugJavaWithJavac)
 }
 
-getAllInternalProjectBuildDeps().each { project ->
-    releaseJavadoc.dependsOn(project.tasks.assemble)
-    debugJavadoc.dependsOn(project.tasks.assemble)
-    jar.dependsOn(project.tasks.build)
+(getInternalJavaProjectsForJar() + getInternalJavaProjectsForJavadoc()).each {
+    project ->
+        releaseJavadoc.dependsOn(project.tasks.compileJava)
+        jar.dependsOn(project.tasks.compileJava)
 }
 
 artifacts {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
index 3fecc0360..7b234184a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
@@ -11,7 +11,7 @@
   /**
    * Returns the current maximum size of the pool in bytes.
    */
-  int getMaxSize();
+  long getMaxSize();
 
   /**
    * Multiplies the initial size of the pool by the given multiplier to dynamically and
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
index af72c1b82..60652581e 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
@@ -10,7 +10,7 @@
  */
 public class BitmapPoolAdapter implements BitmapPool {
   @Override
-  public int getMaxSize() {
+  public long getMaxSize() {
     return 0;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index 88150031d..88287d8a6 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -26,18 +26,18 @@
 
   private final LruPoolStrategy strategy;
   private final Set<Bitmap.Config> allowedConfigs;
-  private final int initialMaxSize;
+  private final long initialMaxSize;
   private final BitmapTracker tracker;
 
-  private int maxSize;
-  private int currentSize;
+  private long maxSize;
+  private long currentSize;
   private int hits;
   private int misses;
   private int puts;
   private int evictions;
 
   // Exposed for testing only.
-  LruBitmapPool(int maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {
+  LruBitmapPool(long maxSize, LruPoolStrategy strategy, Set<Bitmap.Config> allowedConfigs) {
     this.initialMaxSize = maxSize;
     this.maxSize = maxSize;
     this.strategy = strategy;
@@ -50,7 +50,7 @@
    *
    * @param maxSize The initial maximum size of the pool in bytes.
    */
-  public LruBitmapPool(int maxSize) {
+  public LruBitmapPool(long maxSize) {
     this(maxSize, getDefaultStrategy(), getDefaultAllowedConfigs());
   }
 
@@ -62,12 +62,12 @@ public LruBitmapPool(int maxSize) {
    *                       allowed to be put into the pool. Configs not in the allowed put will be
    *                       rejected.
    */
-  public LruBitmapPool(int maxSize, Set<Bitmap.Config> allowedConfigs) {
+  public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {
     this(maxSize, getDefaultStrategy(), allowedConfigs);
   }
 
   @Override
-  public int getMaxSize() {
+  public long getMaxSize() {
     return maxSize;
   }
 
@@ -216,7 +216,7 @@ public void trimMemory(int level) {
     }
   }
 
-  private synchronized void trimToSize(int size) {
+  private synchronized void trimToSize(long size) {
     while (currentSize > size) {
       final Bitmap removed = strategy.removeLast();
       // TODO: This shouldn't ever happen, see #331.
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java
index f24fa6dd2..9cb71e441 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java
@@ -7,10 +7,10 @@
  * disk cache directory.
  *
  * <p>If you need to make I/O access before returning the cache directory use the {@link
- * DiskLruCacheFactory#DiskLruCacheFactory(CacheDirectoryGetter, int)} constructor variant.
+ * DiskLruCacheFactory#DiskLruCacheFactory(CacheDirectoryGetter, long)} constructor variant.
  */
 public class DiskLruCacheFactory implements DiskCache.Factory {
-  private final int diskCacheSize;
+  private final long diskCacheSize;
   private final CacheDirectoryGetter cacheDirectoryGetter;
 
   /**
@@ -20,7 +20,7 @@
     File getCacheDirectory();
   }
 
-  public DiskLruCacheFactory(final String diskCacheFolder, int diskCacheSize) {
+  public DiskLruCacheFactory(final String diskCacheFolder, long diskCacheSize) {
     this(new CacheDirectoryGetter() {
       @Override
       public File getCacheDirectory() {
@@ -30,7 +30,7 @@ public File getCacheDirectory() {
   }
 
   public DiskLruCacheFactory(final String diskCacheFolder, final String diskCacheName,
-      int diskCacheSize) {
+                             long diskCacheSize) {
     this(new CacheDirectoryGetter() {
       @Override
       public File getCacheDirectory() {
@@ -46,7 +46,7 @@ public File getCacheDirectory() {
    * @param cacheDirectoryGetter Interface called out of UI thread to get the cache folder.
    * @param diskCacheSize        Desired max bytes size for the LRU disk cache.
    */
-  public DiskLruCacheFactory(CacheDirectoryGetter cacheDirectoryGetter, int diskCacheSize) {
+  public DiskLruCacheFactory(CacheDirectoryGetter cacheDirectoryGetter, long diskCacheSize) {
     this.diskCacheSize = diskCacheSize;
     this.cacheDirectoryGetter = cacheDirectoryGetter;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
index 8cd104d02..a8f58be31 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
@@ -15,7 +15,7 @@
  * The default DiskCache implementation. There must be no more than one active instance for a given
  * directory at a time.
  *
- * @see #get(java.io.File, int)
+ * @see #get(java.io.File, long)
  */
 public class DiskLruCacheWrapper implements DiskCache {
   private static final String TAG = "DiskLruCacheWrapper";
@@ -26,7 +26,7 @@
 
   private final SafeKeyGenerator safeKeyGenerator;
   private final File directory;
-  private final int maxSize;
+  private final long maxSize;
   private final DiskCacheWriteLocker writeLocker = new DiskCacheWriteLocker();
   private DiskLruCache diskLruCache;
 
@@ -39,7 +39,7 @@
    * @param maxSize   The max size for the disk cache
    * @return The new disk cache with the given arguments, or the current cache if one already exists
    */
-  public static synchronized DiskCache get(File directory, int maxSize) {
+  public static synchronized DiskCache get(File directory, long maxSize) {
     // TODO calling twice with different arguments makes it return the cache for the same
     // directory, it's public!
     if (wrapper == null) {
@@ -48,7 +48,7 @@ public static synchronized DiskCache get(File directory, int maxSize) {
     return wrapper;
   }
 
-  protected DiskLruCacheWrapper(File directory, int maxSize) {
+  protected DiskLruCacheWrapper(File directory, long maxSize) {
     this.directory = directory;
     this.maxSize = maxSize;
     this.safeKeyGenerator = new SafeKeyGenerator();
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
index 1b0e17747..e19c0781a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
@@ -18,12 +18,12 @@ public ExternalPreferredCacheDiskCacheFactory(Context context) {
         DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
   }
 
-  public ExternalPreferredCacheDiskCacheFactory(Context context, int diskCacheSize) {
+  public ExternalPreferredCacheDiskCacheFactory(Context context, long diskCacheSize) {
     this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, diskCacheSize);
   }
 
   public ExternalPreferredCacheDiskCacheFactory(final Context context, final String diskCacheName,
-                                                final int diskCacheSize) {
+                                                final long diskCacheSize) {
     super(new CacheDirectoryGetter() {
       @Nullable
       private File getInternalCacheDirectory() {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
index 225743b89..592ac7126 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
@@ -14,12 +14,12 @@ public InternalCacheDiskCacheFactory(Context context) {
         DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
   }
 
-  public InternalCacheDiskCacheFactory(Context context, int diskCacheSize) {
+  public InternalCacheDiskCacheFactory(Context context, long diskCacheSize) {
     this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, diskCacheSize);
   }
 
   public InternalCacheDiskCacheFactory(final Context context, final String diskCacheName,
-      int diskCacheSize) {
+                                       long diskCacheSize) {
     super(new CacheDirectoryGetter() {
       @Override
       public File getCacheDirectory() {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
index 44071a869..91c705a72 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
@@ -16,7 +16,7 @@
    *
    * @param size The maximum size in bytes the in memory cache can use.
    */
-  public LruResourceCache(int size) {
+  public LruResourceCache(long size) {
     super(size);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
index 3cf56d4c5..d5262d6fa 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
@@ -18,12 +18,12 @@
   /**
    * Returns the sum of the sizes of all the contents of the cache in bytes.
    */
-  int getCurrentSize();
+  long getCurrentSize();
 
   /**
    * Returns the current maximum size in bytes of the cache.
    */
-  int getMaxSize();
+  long getMaxSize();
 
   /**
    * Adjust the maximum size of the cache by multiplying the original size of the cache by the given
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCacheAdapter.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCacheAdapter.java
index e2f92de07..bf1d0ef11 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCacheAdapter.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCacheAdapter.java
@@ -11,12 +11,12 @@
   private ResourceRemovedListener listener;
 
   @Override
-  public int getCurrentSize() {
+  public long getCurrentSize() {
     return 0;
   }
 
   @Override
-  public int getMaxSize() {
+  public long getMaxSize() {
     return 0;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
index a2f92a9db..335a9fdd4 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
@@ -123,7 +123,7 @@ private boolean isGcDetected(long startTimeMs) {
     return clock.now() - startTimeMs >= MAX_DURATION_MS;
   }
 
-  private int getFreeMemoryCacheBytes() {
+  private long getFreeMemoryCacheBytes() {
     return memoryCache.getMaxSize() - memoryCache.getCurrentSize();
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
index c5caa3cc7..802bbb6f8 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
@@ -55,7 +55,7 @@ public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
 
   // Visible for testing.
   PreFillQueue generateAllocationOrder(PreFillType... preFillSizes) {
-    final int maxSize =
+    final long maxSize =
         memoryCache.getMaxSize() - memoryCache.getCurrentSize() + bitmapPool.getMaxSize();
 
     int totalWeight = 0;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java b/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
index a4f10978a..f33b77553 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
@@ -23,7 +23,7 @@ public ModelCache() {
     this(DEFAULT_SIZE);
   }
 
-  public ModelCache(int size) {
+  public ModelCache(long size) {
     cache = new LruCache<ModelKey<A>, B>(size) {
       @Override
       protected void onItemEvicted(ModelKey<A> key, B item) {
diff --git a/library/src/main/java/com/bumptech/glide/util/LruCache.java b/library/src/main/java/com/bumptech/glide/util/LruCache.java
index 1311fa176..37c944422 100644
--- a/library/src/main/java/com/bumptech/glide/util/LruCache.java
+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java
@@ -14,9 +14,9 @@
  */
 public class LruCache<T, Y> {
   private final LinkedHashMap<T, Y> cache = new LinkedHashMap<>(100, 0.75f, true);
-  private final int initialMaxSize;
-  private int maxSize;
-  private int currentSize = 0;
+  private final long initialMaxSize;
+  private long maxSize;
+  private long currentSize = 0;
 
   /**
    * Constructor for LruCache.
@@ -24,7 +24,7 @@
    * @param size The maximum size of the cache, the units must match the units used in {@link
    *             #getSize(Object)}.
    */
-  public LruCache(int size) {
+  public LruCache(long size) {
     this.initialMaxSize = size;
     this.maxSize = size;
   }
@@ -75,14 +75,14 @@ protected void onItemEvicted(T key, Y item) {
   /**
    * Returns the current maximum size of the cache in bytes.
    */
-  public synchronized int getMaxSize() {
+  public synchronized long getMaxSize() {
     return maxSize;
   }
 
   /**
    * Returns the sum of the sizes of all items in the cache.
    */
-  public synchronized int getCurrentSize() {
+  public synchronized long getCurrentSize() {
     return currentSize;
   }
 
@@ -164,7 +164,7 @@ public void clearMemory() {
    *
    * @param size The size the cache should be less than.
    */
-  protected synchronized void trimToSize(int size) {
+  protected synchronized void trimToSize(long size) {
     Map.Entry<T, Y> last;
     while (currentSize > size) {
       last = cache.entrySet().iterator().next();
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
index d00b03193..94d5b8f41 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
@@ -195,7 +195,7 @@ public void testPreFillHandlerDoesNotPostIfHasBitmapsButIsCancelled() {
   @Test
   public void testAddsBitmapsToMemoryCacheIfMemoryCacheHasEnoughSpaceRemaining() {
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    when(cache.getMaxSize()).thenReturn(Util.getBitmapByteSize(bitmap));
+    when(cache.getMaxSize()).thenReturn(Long.valueOf(Util.getBitmapByteSize(bitmap)));
 
     PreFillType size =
         new PreFillType.Builder(bitmap.getWidth(), bitmap.getHeight()).setConfig(bitmap.getConfig())
@@ -214,7 +214,7 @@ public void testAddsBitmapsToMemoryCacheIfMemoryCacheHasEnoughSpaceRemaining() {
   @Test
   public void testAddsBitmapsToBitmapPoolIfMemoryCacheIsFull() {
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    when(cache.getMaxSize()).thenReturn(0);
+    when(cache.getMaxSize()).thenReturn(0L);
 
     PreFillType size =
         new PreFillType.Builder(bitmap.getWidth(), bitmap.getHeight()).setConfig(bitmap.getConfig())
@@ -233,7 +233,7 @@ public void testAddsBitmapsToBitmapPoolIfMemoryCacheIsFull() {
   @Test
   public void testAddsBitmapsToPoolIfMemoryCacheIsNotFullButCannotFitBitmap() {
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    when(cache.getMaxSize()).thenReturn(Util.getBitmapByteSize(bitmap) / 2);
+    when(cache.getMaxSize()).thenReturn((long) Util.getBitmapByteSize(bitmap) / 2);
 
     PreFillType size =
         new PreFillType.Builder(bitmap.getWidth(), bitmap.getHeight()).setConfig(bitmap.getConfig())
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 539cefa65..116e82f3b 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -41,9 +41,9 @@
   private final Bitmap.Config defaultBitmapConfig = PreFillType.DEFAULT_CONFIG;
   private final Bitmap defaultBitmap =
       Bitmap.createBitmap(DEFAULT_BITMAP_WIDTH, DEFAULT_BITMAP_HEIGHT, defaultBitmapConfig);
-  private final int defaultBitmapSize = Util.getBitmapByteSize(defaultBitmap);
-  private final int poolSize = BITMAPS_IN_CACHE * defaultBitmapSize;
-  private final int cacheSize = BITMAPS_IN_POOL * defaultBitmapSize;
+  private final long defaultBitmapSize = Util.getBitmapByteSize(defaultBitmap);
+  private final long poolSize = BITMAPS_IN_CACHE * defaultBitmapSize;
+  private final long cacheSize = BITMAPS_IN_POOL * defaultBitmapSize;
 
   @Mock BitmapPool pool;
   @Mock MemoryCache cache;
@@ -88,7 +88,7 @@ public void testAllocationOrderThatDoesNotFitExactlyIntoGivenSizeRoundsDown() {
     }
 
     int expectedSize = 0;
-    int maxSize = poolSize + cacheSize;
+    long maxSize = poolSize + cacheSize;
     for (PreFillType current : sizes) {
       int currentSize =
           Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());
@@ -108,7 +108,7 @@ public void testAllocationOrderDoesNotOverFillWithMultipleSizes() {
         new PreFillType.Builder(DEFAULT_BITMAP_WIDTH, DEFAULT_BITMAP_HEIGHT / 2)
             .setConfig(defaultBitmapConfig).build() });
 
-    int byteSize = 0;
+    long byteSize = 0;
     while (!allocationOrder.isEmpty()) {
       PreFillType current = allocationOrder.remove();
       byteSize +=
@@ -128,7 +128,7 @@ public void testAllocationOrderDoesNotOverFillWithMultipleSizesAndWeights() {
         new PreFillType.Builder(DEFAULT_BITMAP_WIDTH, DEFAULT_BITMAP_HEIGHT / 3)
             .setConfig(defaultBitmapConfig).setWeight(3).build() });
 
-    int byteSize = 0;
+    long byteSize = 0;
     while (!allocationOrder.isEmpty()) {
       PreFillType current = allocationOrder.remove();
       byteSize +=
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java
new file mode 100644
index 000000000..9a56e52bd
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java
@@ -0,0 +1,34 @@
+package com.bumptech.glide.samples.flickr;
+
+import com.bumptech.glide.annotation.GlideExtension;
+import com.bumptech.glide.annotation.GlideOption;
+import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.samples.flickr.api.Api;
+
+/**
+ * Extension methods for the Flickr sample's generated API.
+ */
+@GlideExtension
+public final class FlickrGlideExtension {
+
+  private FlickrGlideExtension() {
+    // Utility class.
+  }
+
+  @GlideOption
+  public static RequestOptions squareThumb(RequestOptions requestOptions) {
+    return requestOptions
+        .centerCrop();
+  }
+
+  @GlideOption
+  public static RequestOptions squareMiniThumb(RequestOptions requestOptions) {
+    return requestOptions.centerCrop().override(Api.SQUARE_THUMB_SIZE);
+  }
+
+  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
+  public static RequestOptions centerCrop(RequestOptions options) {
+    return options;
+    // Empty.
+  }
+}
diff --git a/settings.gradle b/settings.gradle
index 7ba0b29f7..b6e39d145 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -5,6 +5,7 @@ include ':library'
 include ':instrumentation'
 include ':annotation'
 include ':annotation:compiler'
+include ':annotation:compiler:test'
 include ':glide'
 include ':third_party:gif_decoder'
 include ':third_party:disklrucache'
