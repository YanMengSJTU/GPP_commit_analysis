diff --git a/build.gradle b/build.gradle
index bf2e160a6..49f4c6670 100644
--- a/build.gradle
+++ b/build.gradle
@@ -47,5 +47,5 @@ subprojects { project ->
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.1'
+    gradleVersion = '2.2'
 }
diff --git a/glide-parent.iml b/glide-parent.iml
index 12cf9da6b..22b239290 100644
--- a/glide-parent.iml
+++ b/glide-parent.iml
@@ -7,7 +7,9 @@
       </configuration>
     </facet>
   </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
+  <component name="NewModuleRootManager" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/classes/main" />
+    <output-test url="file://$MODULE_DIR$/build/classes/test" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.gradle" />
diff --git a/glide/glide.iml b/glide/glide.iml
index 456f3ac01..73b9964c4 100644
--- a/glide/glide.iml
+++ b/glide/glide.iml
@@ -17,10 +17,10 @@
     <output-test url="file://$MODULE_DIR$/build/classes/test" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
       <excludeFolder url="file://$MODULE_DIR$/.gradle" />
       <excludeFolder url="file://$MODULE_DIR$/build" />
     </content>
diff --git a/gradle.properties b/gradle.properties
index 0b3b2fe86..2a4037093 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,9 +18,9 @@ SUPPORT_V4_VERSION=19.1.0
 SUPPORT_V7_VERSION=19.1.0
 VOLLEY_VERSION=1.0.7
 OK_HTTP_VERSION=2.0.0
-ANDROID_GRADLE_VERSION=0.13.3
+ANDROID_GRADLE_VERSION=1.0.0
 
-ROBOLECTRIC_GRADLE_VERSION=0.12.0
+ROBOLECTRIC_GRADLE_VERSION=0.14.0
 COVERALLS_GRADLE_VERSION=2.0.1
 JUNIT_VERSION=4.11
 MOCKITO_VERSION=1.9.5
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 53a7b2a77..efa946a2c 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Sep 19 07:33:32 PDT 2014
+#Sat Dec 20 22:55:19 PST 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-bin.zip
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index d516652c4..3de640c50 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -15,7 +15,6 @@ android {
     buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId 'com.bumptech.glide.integration.okhttp'
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
diff --git a/integration/okhttp/okhttp.iml b/integration/okhttp/okhttp.iml
index 5cb0747c3..ade91af4a 100644
--- a/integration/okhttp/okhttp.iml
+++ b/integration/okhttp/okhttp.iml
@@ -32,11 +32,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -83,7 +85,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/reports" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" name="okio-1.0.0" level="project" />
     <orderEntry type="library" exported="" name="okhttp-2.0.0" level="project" />
diff --git a/integration/volley/build.gradle b/integration/volley/build.gradle
index db8779976..ce85c8b53 100644
--- a/integration/volley/build.gradle
+++ b/integration/volley/build.gradle
@@ -23,7 +23,6 @@ android {
     buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId 'com.bumptech.glide.integration.volley'
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
diff --git a/integration/volley/volley.iml b/integration/volley/volley.iml
index c6d8f6e2c..81e370b39 100644
--- a/integration/volley/volley.iml
+++ b/integration/volley/volley.iml
@@ -32,11 +32,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -87,7 +89,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" scope="TEST" name="commons-codec-1.3" level="project" />
     <orderEntry type="library" exported="" scope="TEST" name="robolectric-annotations-2.4" level="project" />
diff --git a/library/build.gradle b/library/build.gradle
index a965b7d8c..6ccf67ddf 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -38,7 +38,6 @@ android {
     buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId 'com.bumptech.glide'
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
diff --git a/library/library.iml b/library/library.iml
index d1471e49c..34e36d22c 100644
--- a/library/library.iml
+++ b/library/library.iml
@@ -32,11 +32,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -86,7 +88,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" scope="TEST" name="asm-5.0.1" level="project" />
     <orderEntry type="library" exported="" scope="TEST" name="objenesis-1.3" level="project" />
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java
index 3f4ccb9f2..b8b3e5b11 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/DecodeJobTest.java
@@ -589,6 +589,7 @@ public void testReturnsNullFromDecodeSourceIfTranscoderReturnsNull() throws Exce
         Transformation<Object> transformation = mock(Transformation.class);
         ResourceTranscoder<Object, Object> transcoder = mock(ResourceTranscoder.class);
         DiskCache diskCache = mock(DiskCache.class);
+        DecodeJob.DiskCacheProvider diskCacheProvider = mock(DecodeJob.DiskCacheProvider.class);
         Priority priority = Priority.IMMEDIATE;
 
         ResourceDecoder<File, Object> cacheDecoder = mock(ResourceDecoder.class);
@@ -614,11 +615,12 @@ public Harness(DiskCacheStrategy diskCacheStrategy) throws FileNotFoundException
             when(loadProvider.getEncoder()).thenReturn(resultEncoder);
             when(loadProvider.getSourceDecoder()).thenReturn(sourceDecoder);
             when(loadProvider.getSourceEncoder()).thenReturn(sourceEncoder);
+            when(diskCacheProvider.getDiskCache()).thenReturn(diskCache);
         }
 
         public DecodeJob<Object, Object, Object> getJob() {
             return new DecodeJob<Object, Object, Object>(key, width, height, dataFetcher, loadProvider, transformation,
-                    transcoder, diskCache, diskCacheStrategy, priority, fileOpener);
+                    transcoder, diskCacheProvider, diskCacheStrategy, priority, fileOpener);
         }
     }
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
index af18d7c82..845c32930 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -487,7 +487,7 @@ public EngineTestHarness() {
 
             job = mock(EngineJob.class);
 
-            engine = new Engine(cache, mock(DiskCache.class), mock(ExecutorService.class),
+            engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),
                     mock(ExecutorService.class), jobs, keyFactory, activeResources, engineJobFactory, resourceRecycler);
 
         }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
index a37a458f1..f6aa74483 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
@@ -3,6 +3,8 @@
 import static com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
 import static org.junit.Assert.assertEquals;
 
+import com.bumptech.glide.testutil.TestResourceUtil;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -65,7 +67,14 @@ public void testReturnsUnknownTypeForUnknownImageHeaders() throws IOException {
         InputStream is = new ByteArrayInputStream(new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 });
         ImageHeaderParser parser = new ImageHeaderParser(is);
         assertEquals(ImageType.UNKNOWN, parser.getType());
+    }
 
+    // Test for #286.
+    @Test
+    public void testHandlesParsingOrientationWithMinimalExifSegment() throws IOException {
+        InputStream is = TestResourceUtil.openResource(getClass(), "short_exif_sample.jpg");
+        ImageHeaderParser parser = new ImageHeaderParser(is);
+        assertEquals(-1, parser.getOrientation());
     }
 
     private static byte[] generatePngHeaderWithIhdr(int bitDepth) {
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
index 123f1fb61..42e761a37 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
@@ -152,6 +152,14 @@ public void testCenterCropReturnsGivenBitmapIfGivenBitmapExactlyMatchesGivenDime
         assertTrue(toCrop == transformed);
     }
 
+    @Test
+    public void testFitCenterHandlesBitmapsWithNullConfigs() {
+      Bitmap toFit = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
+      Robolectric.shadowOf(toFit).setConfig(null);
+      Bitmap transformed = TransformationUtils.fitCenter(toFit, mock(BitmapPool.class), 50, 50);
+      assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());
+    }
+
     @Test
     public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapIsReused() {
         Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
@@ -185,7 +193,6 @@ public void testCenterCropSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlphaA
     @Test
     public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {
         Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-        BitmapPool pool = mock(BitmapPool.class);
 
         toTransform.setHasAlpha(true);
 
@@ -195,6 +202,16 @@ public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {
         assertTrue(result.hasAlpha());
     }
 
+    @Test
+    public void testCenterCropHandlesBitmapsWithNullConfigs() {
+      Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
+      Robolectric.shadowOf(toTransform).setConfig(null);
+
+      Bitmap transformed = TransformationUtils.centerCrop(null /*recycled*/, toTransform, 50, 50);
+
+      assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());
+    }
+
     @Test
     public void testCenterCropSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlpha() {
         Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
@@ -346,6 +363,16 @@ public void testRotateImageExifHandlesEmptyBitmapPool() {
         assertNotNull(TransformationUtils.rotateImageExif(toRotate, bitmapPool, ExifInterface.ORIENTATION_ROTATE_90));
     }
 
+    @Test
+    public void testRotateImageExifHandlesBitmapsWithNullConfigs() {
+      Bitmap toRotate = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
+      Robolectric.shadowOf(toRotate).setConfig(null);
+      BitmapPool bitmapPool = mock(BitmapPool.class);
+      Bitmap rotated = TransformationUtils.rotateImageExif(toRotate, bitmapPool,
+          ExifInterface.ORIENTATION_ROTATE_180);
+      assertEquals(Bitmap.Config.ARGB_8888, rotated.getConfig());
+    }
+
     @Test
     public void testInitializeMatrixSetsScaleIfFlipHorizontal() {
         Matrix matrix = mock(Matrix.class);
@@ -393,6 +420,16 @@ public void testInitializeMatrixSetsRotateOnRotation() {
 
         private boolean hasAlpha;
 
+        @Implementation
+        public static Bitmap createBitmap(int width, int height, Bitmap.Config config) {
+          // Robolectric doesn't match the framework behavior with null configs, so we have to do
+          // so here.
+          if (config == null) {
+            throw new NullPointerException("config must not be null");
+          }
+          return ShadowBitmap.createBitmap(width, height, config);
+        }
+
         @Implementation
         public void setHasAlpha(boolean hasAlpha) {
             this.hasAlpha = hasAlpha;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
index d927aa390..744b0e9b2 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
@@ -1,8 +1,10 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -80,4 +82,41 @@ public void testClosesResource() throws IOException {
     public void testHasValidId() {
         Util.assertClassHasValidId(VideoBitmapDecoder.class, decoder.getId());
     }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testThrowsExceptionIfInitializedWithNegativeFrame() {
+        new VideoBitmapDecoder(-1);
+    }
+
+    @Test
+    public void testSpecifiesThumbnailFrameIfInitializedWithFrameNumber() throws IOException {
+        int frame = 5;
+        decoder = new VideoBitmapDecoder(new VideoBitmapDecoder.MediaMetadataRetrieverFactory()  {
+          @Override
+          public MediaMetadataRetriever build() {
+            return factory.build();
+          }
+        }, frame);
+
+        decoder.decode(resource, bitmapPool, 100, 100, decodeFormat);
+
+        verify(retriever).getFrameAtTime(5);
+        verify(retriever, never()).getFrameAtTime();
+    }
+
+    @Test
+    public void testDoesNotSpecifyThumbnailFrameIfInitializedWithoutFrameNumber()
+        throws IOException {
+      decoder = new VideoBitmapDecoder(new VideoBitmapDecoder.MediaMetadataRetrieverFactory()  {
+        @Override
+        public MediaMetadataRetriever build() {
+          return factory.build();
+        }
+      });
+
+      decoder.decode(resource, bitmapPool, 100, 100, decodeFormat);
+
+      verify(retriever).getFrameAtTime();
+      verify(retriever, never()).getFrameAtTime(anyLong());
+    }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
index 8783db00d..e0e0882fe 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
@@ -154,6 +154,56 @@ public void testSupportCanGetRequestManagerFromFragment() {
         assertEquals(manager, retriever.get(fragment));
     }
 
+    @Test
+    public void testCanGetRequestManagerFromDetachedFragment() {
+      helpTestCanGetRequestManagerFromDetachedFragment();
+    }
+
+    @Test
+    public void testCanGetRequestManagerFromDetachedFragment_PreJellyBeanMr1() {
+      Util.setSdkVersionInt(Build.VERSION_CODES.JELLY_BEAN);
+      helpTestCanGetRequestManagerFromDetachedFragment();
+    }
+
+    private void helpTestCanGetRequestManagerFromDetachedFragment() {
+      Activity activity = Robolectric.buildActivity(Activity.class).create().start().resume().get();
+      android.app.Fragment fragment = new android.app.Fragment();
+      activity.getFragmentManager()
+        .beginTransaction()
+        .add(fragment, PARENT_TAG)
+        .detach(fragment)
+        .commit();
+      activity.getFragmentManager().executePendingTransactions();
+
+      assertTrue(fragment.isDetached());
+      retriever.get(fragment);
+    }
+
+    @Test
+    public void testSupportCanGetRequestManagerFromDetachedFragment() {
+      helpTestSupportCanGetRequestManagerFromDetachedFragment();
+    }
+
+    @Test
+    public void testSupportCanGetRequestManagerFromDetachedFragment_PreJellyBeanMr1() {
+      Util.setSdkVersionInt(Build.VERSION_CODES.JELLY_BEAN);
+      helpTestSupportCanGetRequestManagerFromDetachedFragment();
+    }
+
+    private void helpTestSupportCanGetRequestManagerFromDetachedFragment() {
+      FragmentActivity activity = Robolectric.buildActivity(FragmentActivity.class).create().start().resume().get();
+      Fragment fragment = new Fragment();
+      activity.getSupportFragmentManager()
+              .beginTransaction()
+              .add(fragment, PARENT_TAG)
+              .detach(fragment)
+              .commit();
+      activity.getSupportFragmentManager().executePendingTransactions();
+
+      assertTrue(fragment.isDetached());
+      retriever.get(fragment);
+    }
+
     @Test(expected = IllegalArgumentException.class)
     public void testThrowsIfFragmentNotAttached() {
         android.app.Fragment fragment = new android.app.Fragment();
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
index 9b8d95a72..78880ecd5 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
+++ b/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
@@ -95,13 +95,6 @@ public void testCallsResetOnWrapped() throws IOException {
         verify(wrapped).reset();
     }
 
-
-    @Test
-    public void testFixMarkLimitCallsFixMarkLimitOnWrappedStream() {
-        is.fixMarkLimit();
-        verify(wrapped).fixMarkLimit();
-    }
-
     @Test
     public void testCallsSkipOnWrapped() throws IOException {
         long toSkip = 67;
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java b/library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
new file mode 100644
index 000000000..65f1db2e1
--- /dev/null
+++ b/library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
@@ -0,0 +1,164 @@
+package com.bumptech.glide.util;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class MarkEnforcingInputStreamTest {
+    // An arbitrary number > 0.
+    private static final int MARK_LIMIT = 5;
+    // Another arbitrary number > MARK_LIMIT.
+    private static final int DATA_SIZE = MARK_LIMIT + 1;
+
+    @Test
+    public void testReturnsByte_whenReadsUpToMarkLimit_withMoreBytesAvailable() throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+        is.mark(MARK_LIMIT);
+
+         for (int i = 0; i < MARK_LIMIT; i++) {
+             assertThat(is.read()).isAtLeast(0);
+         }
+    }
+
+    @Test
+    public void testReturnsByte_whenReadsUpToMarkLimit_withNoMoreBytesAvailable() throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[MARK_LIMIT]));
+
+        for (int i = 0; i < MARK_LIMIT; i++) {
+            assertThat(is.read()).isAtLeast(0);
+        }
+    }
+
+    @Test
+    public void testReturnsEndOfStream_whenReadsSingleBytePastMarkLimit() throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+
+        is.mark(MARK_LIMIT);
+        for (int i = 0; i < MARK_LIMIT; i++) {
+            assertThat(is.read()).isAtLeast(0);
+        }
+
+        assertEquals(-1, is.read());
+    }
+
+    @Test
+    public void testOverridesByteCount_whenReadBufferLargerThanMarkLimit_withNonZeroBytesRemainingInMarkLimit()
+            throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+
+        is.mark(MARK_LIMIT);
+        byte[] buffer = new byte[DATA_SIZE];
+        assertEquals(MARK_LIMIT, is.read(buffer));
+    }
+
+    @Test
+    public void testReturnsEndOfStream_whenReadBufferLargerThanMarkLimit_withZeroBytesRemainingInMarkLimit()
+            throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+        is.mark(MARK_LIMIT);
+
+        byte[] buffer = new byte[MARK_LIMIT];
+        assertEquals(MARK_LIMIT, is.read(buffer));
+        assertEquals(-1, is.read(buffer));
+    }
+
+    @Test
+    public void testDoesNotReadIntoBuffer_withZeroBytesRemainingInMarkLimit() throws IOException {
+        byte[] expected = new byte[MARK_LIMIT];
+        for (int i = 0; i < MARK_LIMIT; i++) {
+            expected[i] = (byte) (i + 1);
+        }
+        byte[] buffer = new byte[MARK_LIMIT];
+        System.arraycopy(expected, 0, buffer, 0, MARK_LIMIT);
+
+        // All zeros.
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+        is.mark(MARK_LIMIT);
+        for (int i = 0; i < MARK_LIMIT; i++) {
+            assertThat(is.read()).isAtLeast(0);
+        }
+
+        assertEquals(-1, is.read(buffer));
+
+        assertThat(buffer).isEqualTo(expected);
+    }
+
+    @Test
+    public void testResetUnsetsLimit() throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+        is.mark(MARK_LIMIT);
+
+        for (int i = 0; i < MARK_LIMIT; i++) {
+            assertThat(is.read()).isAtLeast(0);
+        }
+
+        is.reset();
+
+        for (int i = 0; i < DATA_SIZE; i++) {
+            assertThat(is.read()).isAtLeast(0);
+        }
+    }
+
+    @Test
+    public void testOverridesByteCount_whenSkipCountLargerThanMarkLimit_withNonZeroBytesRemainingInMarkLimit()
+            throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+        is.mark(MARK_LIMIT);
+
+        assertEquals(MARK_LIMIT, is.skip(DATA_SIZE));
+    }
+
+    @Test
+    public void testReturnsEndOfStream_whenSkipping_withZeroBytesRemainingInMarkLimit() throws IOException {
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(
+                new ByteArrayInputStream(new byte[DATA_SIZE]));
+        is.mark(MARK_LIMIT);
+
+        assertEquals(MARK_LIMIT, is.skip(DATA_SIZE));
+        assertEquals(-1, is.skip(1));
+    }
+
+    @Test
+    public void testReturnsStreamAvailable_whenMarkIsNotSet() throws IOException {
+        ByteArrayInputStream wrapped = new ByteArrayInputStream(new byte[MARK_LIMIT]);
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(wrapped);
+
+        assertEquals(wrapped.available(), is.available());
+    }
+
+    @Test
+    public void testReturnsStreamAvailable_whenMarkIsSet_withMarkGreaterThanStreamAvailable() throws IOException {
+        ByteArrayInputStream wrapped = new ByteArrayInputStream(new byte[MARK_LIMIT]);
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(wrapped);
+        is.mark(wrapped.available() + 1);
+
+        assertEquals(wrapped.available(), is.available());
+    }
+
+    @Test
+    public void testReturnsMarkLimitAsAvailable_whenMarkIsSet_withMarkLessThanStreamAvailable() throws IOException {
+        ByteArrayInputStream wrapped = new ByteArrayInputStream(new byte[MARK_LIMIT]);
+        MarkEnforcingInputStream is = new MarkEnforcingInputStream(wrapped);
+        int expected = wrapped.available() - 1;
+        is.mark(expected);
+
+        assertEquals(expected, is.available());
+    }
+}
\ No newline at end of file
diff --git a/library/src/androidTest/resources/short_exif_sample.jpg b/library/src/androidTest/resources/short_exif_sample.jpg
new file mode 100644
index 000000000..80f8ebd49
Binary files /dev/null and b/library/src/androidTest/resources/short_exif_sample.jpg differ
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 49e4d2fe0..91d5305f8 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -9,14 +9,12 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
-import com.bumptech.glide.load.engine.cache.DiskCacheAdapter;
-import com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;
+import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;
 import com.bumptech.glide.load.engine.cache.LruResourceCache;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.engine.cache.MemorySizeCalculator;
 import com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;
 
-import java.io.File;
 import java.util.concurrent.ExecutorService;
 
 /**
@@ -28,10 +26,10 @@
     private Engine engine;
     private BitmapPool bitmapPool;
     private MemoryCache memoryCache;
-    private DiskCache diskCache;
     private ExecutorService sourceService;
     private ExecutorService diskCacheService;
     private DecodeFormat decodeFormat;
+    private DiskCache.Factory diskCacheFactory;
 
     public GlideBuilder(Context context) {
         this.context = context.getApplicationContext();
@@ -65,11 +63,32 @@ public GlideBuilder setMemoryCache(MemoryCache memoryCache) {
      * Sets the {@link com.bumptech.glide.load.engine.cache.DiskCache} implementation to use to store
      * {@link com.bumptech.glide.load.engine.Resource} data and thumbnails.
      *
+     * @deprecated Creating a disk cache directory on the main thread causes strict mode violations, use
+     * {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead. Scheduled to be removed
+     * in Glide 4.0.
      * @param diskCache The disk cache to use.
      * @return This builder.
      */
-    public GlideBuilder setDiskCache(DiskCache diskCache) {
-        this.diskCache = diskCache;
+    @Deprecated
+    public GlideBuilder setDiskCache(final DiskCache diskCache) {
+        return setDiskCache(new DiskCache.Factory() {
+            @Override
+            public DiskCache build() {
+                return diskCache;
+            }
+        });
+    }
+
+    /**
+     * Sets the {@link com.bumptech.glide.load.engine.cache.DiskCache.Factory} implementation to use to construct
+     * the {@link com.bumptech.glide.load.engine.cache.DiskCache} to use to store
+     * {@link com.bumptech.glide.load.engine.Resource} data on disk.
+     *
+     * @param diskCacheFactory The disk cche factory to use.
+     * @return This builder.
+     */
+    public GlideBuilder setDiskCache(DiskCache.Factory diskCacheFactory) {
+        this.diskCacheFactory = diskCacheFactory;
         return this;
     }
 
@@ -164,18 +183,12 @@ Glide createGlide() {
             memoryCache = new LruResourceCache(calculator.getMemoryCacheSize());
         }
 
-        if (diskCache == null) {
-            File cacheDir = Glide.getPhotoCacheDir(context);
-            if (cacheDir != null) {
-                diskCache = DiskLruCacheWrapper.get(cacheDir, Glide.DEFAULT_DISK_CACHE_SIZE);
-            }
-            if (diskCache == null) {
-                diskCache = new DiskCacheAdapter();
-            }
+        if (diskCacheFactory == null) {
+            diskCacheFactory = new InternalCacheDiskCacheFactory(context, Glide.DEFAULT_DISK_CACHE_SIZE);
         }
 
         if (engine == null) {
-            engine = new Engine(memoryCache, diskCache, diskCacheService, sourceService);
+            engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);
         }
 
         if (decodeFormat == null) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index f3d9c0085..43542289f 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -38,8 +38,8 @@
     private final DataLoadProvider<A, T> loadProvider;
     private final Transformation<T> transformation;
     private final ResourceTranscoder<T, Z> transcoder;
+    private final DiskCacheProvider diskCacheProvider;
     private final DiskCacheStrategy diskCacheStrategy;
-    private final DiskCache diskCache;
     private final Priority priority;
     private final FileOpener fileOpener;
 
@@ -47,15 +47,16 @@
 
     public DecodeJob(EngineKey resultKey, int width, int height, DataFetcher<A> fetcher,
             DataLoadProvider<A, T> loadProvider, Transformation<T> transformation, ResourceTranscoder<T, Z> transcoder,
-            DiskCache diskCache, DiskCacheStrategy diskCacheStrategy, Priority priority) {
-        this(resultKey, width, height, fetcher, loadProvider, transformation, transcoder, diskCache, diskCacheStrategy,
-                priority, DEFAULT_FILE_OPENER);
+            DiskCacheProvider diskCacheProvider, DiskCacheStrategy diskCacheStrategy, Priority priority) {
+        this(resultKey, width, height, fetcher, loadProvider, transformation, transcoder, diskCacheProvider,
+                diskCacheStrategy, priority, DEFAULT_FILE_OPENER);
     }
 
     // Visible for testing.
     DecodeJob(EngineKey resultKey, int width, int height, DataFetcher<A> fetcher,
             DataLoadProvider<A, T> loadProvider, Transformation<T> transformation, ResourceTranscoder<T, Z> transcoder,
-            DiskCache diskCache, DiskCacheStrategy diskCacheStrategy, Priority priority, FileOpener fileOpener) {
+            DiskCacheProvider diskCacheProvider, DiskCacheStrategy diskCacheStrategy, Priority priority, FileOpener
+            fileOpener) {
         this.resultKey = resultKey;
         this.width = width;
         this.height = height;
@@ -63,8 +64,8 @@ public DecodeJob(EngineKey resultKey, int width, int height, DataFetcher<A> fetc
         this.loadProvider = loadProvider;
         this.transformation = transformation;
         this.transcoder = transcoder;
+        this.diskCacheProvider = diskCacheProvider;
         this.diskCacheStrategy = diskCacheStrategy;
-        this.diskCache = diskCache;
         this.priority = priority;
         this.fileOpener = fileOpener;
     }
@@ -156,7 +157,7 @@ private void writeTransformedToCache(Resource<T> transformed) {
         }
         long startTime = LogTime.getLogTime();
         SourceWriter<Resource<T>> writer = new SourceWriter<Resource<T>>(loadProvider.getEncoder(), transformed);
-        diskCache.put(resultKey, writer);
+        diskCacheProvider.getDiskCache().put(resultKey, writer);
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
             logWithTimeAndKey("Wrote transformed from source to cache", startTime);
         }
@@ -197,7 +198,7 @@ private void writeTransformedToCache(Resource<T> transformed) {
     private Resource<T> cacheAndDecodeSourceData(A data) throws IOException {
         long startTime = LogTime.getLogTime();
         SourceWriter<A> writer = new SourceWriter<A>(loadProvider.getSourceEncoder(), data);
-        diskCache.put(resultKey.getOriginalKey(), writer);
+        diskCacheProvider.getDiskCache().put(resultKey.getOriginalKey(), writer);
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
             logWithTimeAndKey("Wrote source to cache", startTime);
         }
@@ -211,7 +212,7 @@ private void writeTransformedToCache(Resource<T> transformed) {
     }
 
     private Resource<T> loadFromCache(Key key) throws IOException {
-        File cacheFile = diskCache.get(key);
+        File cacheFile = diskCacheProvider.getDiskCache().get(key);
         if (cacheFile == null) {
             return null;
         }
@@ -221,7 +222,7 @@ private void writeTransformedToCache(Resource<T> transformed) {
             result = loadProvider.getCacheDecoder().decode(cacheFile, width, height);
         } finally {
             if (result == null) {
-                diskCache.delete(key);
+                diskCacheProvider.getDiskCache().delete(key);
             }
         }
         return result;
@@ -284,6 +285,10 @@ public boolean write(File file) {
         }
     }
 
+    interface DiskCacheProvider {
+        DiskCache getDiskCache();
+    }
+
     static class FileOpener {
         public OutputStream open(File file) throws FileNotFoundException {
             return new BufferedOutputStream(new FileOutputStream(file));
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index e66031f8f..e4a5b85da 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -25,16 +25,20 @@
 /**
  * Responsible for starting loads and managing active and cached resources.
  */
-public class Engine implements EngineJobListener, MemoryCache.ResourceRemovedListener, EngineResource.ResourceListener {
+public class Engine implements EngineJobListener,
+        MemoryCache.ResourceRemovedListener,
+        EngineResource.ResourceListener {
     private static final String TAG = "Engine";
     private final Map<Key, EngineJob> jobs;
     private final EngineKeyFactory keyFactory;
     private final MemoryCache cache;
-    private final DiskCache diskCache;
     private final EngineJobFactory engineJobFactory;
     private final Map<Key, WeakReference<EngineResource<?>>> activeResources;
-    private final ReferenceQueue<EngineResource<?>> resourceReferenceQueue;
     private final ResourceRecycler resourceRecycler;
+    private final LazyDiskCacheProvider diskCacheProvider;
+
+    // Lazily instantiate to avoid exceptions if Glide is initialized on a background thread. See #295.
+    private ReferenceQueue<EngineResource<?>> resourceReferenceQueue;
 
     /**
      * Allows a request to indicate it no longer is interested in a given load.
@@ -53,18 +57,18 @@ public void cancel() {
         }
     }
 
-    public Engine(MemoryCache memoryCache, DiskCache diskCache, ExecutorService diskCacheService,
+    public Engine(MemoryCache memoryCache, DiskCache.Factory diskCacheFactory, ExecutorService diskCacheService,
             ExecutorService sourceService) {
-        this(memoryCache, diskCache, diskCacheService, sourceService, null, null, null, null, null);
+        this(memoryCache, diskCacheFactory, diskCacheService, sourceService, null, null, null, null, null);
     }
 
     // Visible for testing.
-    Engine(MemoryCache cache, DiskCache diskCache, ExecutorService diskCacheService, ExecutorService sourceService,
-            Map<Key, EngineJob> jobs, EngineKeyFactory keyFactory,
+    Engine(MemoryCache cache, DiskCache.Factory diskCacheFactory, ExecutorService diskCacheService,
+            ExecutorService sourceService, Map<Key, EngineJob> jobs, EngineKeyFactory keyFactory,
             Map<Key, WeakReference<EngineResource<?>>> activeResources, EngineJobFactory engineJobFactory,
             ResourceRecycler resourceRecycler) {
         this.cache = cache;
-        this.diskCache = diskCache;
+        this.diskCacheProvider = new LazyDiskCacheProvider(diskCacheFactory);
 
         if (activeResources == null) {
             activeResources = new HashMap<Key, WeakReference<EngineResource<?>>>();
@@ -91,9 +95,6 @@ public Engine(MemoryCache memoryCache, DiskCache diskCache, ExecutorService disk
         }
         this.resourceRecycler = resourceRecycler;
 
-        resourceReferenceQueue = new ReferenceQueue<EngineResource<?>>();
-        MessageQueue queue = Looper.myQueue();
-        queue.addIdleHandler(new RefQueueIdleHandler(activeResources, resourceReferenceQueue));
         cache.setResourceRemovedListener(this);
     }
 
@@ -177,7 +178,7 @@ public Engine(MemoryCache memoryCache, DiskCache diskCache, ExecutorService disk
 
         EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);
         DecodeJob<T, Z, R> decodeJob = new DecodeJob<T, Z, R>(key, width, height, fetcher, loadProvider, transformation,
-                transcoder, diskCache, diskCacheStrategy, priority);
+                transcoder, diskCacheProvider, diskCacheStrategy, priority);
         EngineRunnable runnable = new EngineRunnable(engineJob, decodeJob, priority);
         jobs.put(key, engineJob);
         engineJob.addCallback(cb);
@@ -220,7 +221,7 @@ private static void logWithTimeAndKey(String log, long startTime, Key key) {
         EngineResource<?> cached = getEngineResourceFromCache(key);
         if (cached != null) {
             cached.acquire();
-            activeResources.put(key, new ResourceWeakReference(key, cached, resourceReferenceQueue));
+            activeResources.put(key, new ResourceWeakReference(key, cached, getReferenceQueue()));
         }
         return cached;
     }
@@ -242,6 +243,7 @@ private static void logWithTimeAndKey(String log, long startTime, Key key) {
     }
 
     public void release(Resource resource) {
+        Util.assertMainThread();
         if (resource instanceof EngineResource) {
             ((EngineResource) resource).release();
         } else {
@@ -252,12 +254,13 @@ public void release(Resource resource) {
     @SuppressWarnings("unchecked")
     @Override
     public void onEngineJobComplete(Key key, EngineResource<?> resource) {
+        Util.assertMainThread();
         // A null resource indicates that the load failed, usually due to an exception.
         if (resource != null) {
             resource.setResourceListener(key, this);
 
             if (resource.isCacheable()) {
-                activeResources.put(key, new ResourceWeakReference(key, resource, resourceReferenceQueue));
+                activeResources.put(key, new ResourceWeakReference(key, resource, getReferenceQueue()));
             }
         }
         // TODO: should this check that the engine job is still current?
@@ -266,6 +269,7 @@ public void onEngineJobComplete(Key key, EngineResource<?> resource) {
 
     @Override
     public void onEngineJobCancelled(EngineJob engineJob, Key key) {
+        Util.assertMainThread();
         EngineJob current = jobs.get(key);
         if (engineJob.equals(current)) {
             jobs.remove(key);
@@ -274,11 +278,13 @@ public void onEngineJobCancelled(EngineJob engineJob, Key key) {
 
     @Override
     public void onResourceRemoved(final Resource<?> resource) {
+        Util.assertMainThread();
         resourceRecycler.recycle(resource);
     }
 
     @Override
     public void onResourceReleased(Key cacheKey, EngineResource resource) {
+        Util.assertMainThread();
         activeResources.remove(cacheKey);
         if (resource.isCacheable()) {
             cache.put(cacheKey, resource);
@@ -287,6 +293,37 @@ public void onResourceReleased(Key cacheKey, EngineResource resource) {
         }
     }
 
+    private ReferenceQueue<EngineResource<?>> getReferenceQueue() {
+        if (resourceReferenceQueue == null) {
+            resourceReferenceQueue = new ReferenceQueue<EngineResource<?>>();
+            MessageQueue queue = Looper.myQueue();
+            queue.addIdleHandler(new RefQueueIdleHandler(activeResources, resourceReferenceQueue));
+        }
+        return resourceReferenceQueue;
+    }
+
+    private static class LazyDiskCacheProvider implements DecodeJob.DiskCacheProvider {
+
+        private final DiskCache.Factory factory;
+        private volatile DiskCache diskCache;
+
+        public LazyDiskCacheProvider(DiskCache.Factory factory) {
+            this.factory = factory;
+        }
+
+        @Override
+        public DiskCache getDiskCache() {
+            if (diskCache == null) {
+                synchronized (this) {
+                    if (diskCache == null) {
+                        diskCache = factory.build();
+                    }
+                }
+            }
+            return diskCache;
+        }
+    }
+
     private static class ResourceWeakReference extends WeakReference<EngineResource<?>> {
         private final Key key;
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 06926317b..eb1d77728 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.os.Handler;
+import android.os.Looper;
 import android.os.Message;
 
 import com.bumptech.glide.load.Key;
@@ -20,7 +21,7 @@
  */
 class EngineJob implements EngineRunnable.EngineRunnableManager {
     private static final EngineResourceFactory DEFAULT_FACTORY = new EngineResourceFactory();
-    private static final Handler MAIN_THREAD_HANDLER = new Handler(new MainThreadCallback());
+    private static final Handler MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper(), new MainThreadCallback());
 
     private static final int MSG_COMPLETE = 1;
     private static final int MSG_EXCEPTION = 2;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
index c30376cf6..06ee47b7e 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceRecycler.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.os.Handler;
+import android.os.Looper;
 import android.os.Message;
 
 import com.bumptech.glide.util.Util;
@@ -10,7 +11,7 @@
  */
 class ResourceRecycler {
     private boolean isRecycling;
-    private final Handler handler = new Handler(new ResourceRecyclerCallback());
+    private final Handler handler = new Handler(Looper.getMainLooper(), new ResourceRecyclerCallback());
 
     public void recycle(Resource<?> resource) {
         Util.assertMainThread();
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
index c456249be..d4228d6fe 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
@@ -8,6 +8,17 @@
  * An interface for writing to and reading from a disk cache.
  */
 public interface DiskCache {
+
+    /**
+     * An interface for lazily creating a disk cache.
+     */
+    interface Factory {
+        /**
+         * Returns a new disk cache, or {@code null} if no disk cache could be created.
+         */
+        DiskCache build();
+    }
+
     /**
      * An interface to actually write data to a key in the disk cache.
      */
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
new file mode 100644
index 000000000..7d58bc7b5
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
@@ -0,0 +1,48 @@
+package com.bumptech.glide.load.engine.cache;
+
+import android.content.Context;
+
+import com.bumptech.glide.Glide;
+
+import java.io.File;
+
+/**
+ * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the internal disk cache
+ * directory.
+ */
+public final class InternalCacheDiskCacheFactory implements DiskCache.Factory {
+    private final Context context;
+    private final String diskCacheName;
+    private final int diskCacheSize;
+
+    public InternalCacheDiskCacheFactory(Context context, int diskCacheSize) {
+        this(context, null /*diskCacheName*/, diskCacheSize);
+    }
+
+    public InternalCacheDiskCacheFactory(Context context, String diskCacheName, int diskCacheSize) {
+        this.context = context;
+        this.diskCacheName = diskCacheName;
+        this.diskCacheSize = diskCacheSize;
+    }
+
+    @Override
+    public DiskCache build() {
+        DiskCache diskCache = null;
+        final File cacheDir;
+
+        if (diskCacheName != null) {
+            cacheDir = Glide.getPhotoCacheDir(context, diskCacheName);
+        } else {
+            cacheDir = Glide.getPhotoCacheDir(context);
+        }
+
+        if (cacheDir != null) {
+            diskCache = DiskLruCacheWrapper.get(cacheDir, diskCacheSize);
+        }
+
+        if (diskCache == null) {
+            diskCache = new DiskCacheAdapter();
+        }
+        return diskCache;
+    }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index ded3cf919..d24f2d177 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -11,6 +11,7 @@
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.util.ByteArrayPool;
 import com.bumptech.glide.util.ExceptionCatchingInputStream;
+import com.bumptech.glide.util.MarkEnforcingInputStream;
 import com.bumptech.glide.util.Util;
 
 import java.io.IOException;
@@ -107,21 +108,30 @@ public Bitmap decode(InputStream is, BitmapPool pool, int outWidth, int outHeigh
         final byte[] bytesForStream = byteArrayPool.getBytes();
         final BitmapFactory.Options options = getDefaultOptions();
 
-        // TODO(#126): when the framework handles exceptions better, consider removing.
-        final ExceptionCatchingInputStream stream =
-                ExceptionCatchingInputStream.obtain(new RecyclableBufferedInputStream(is, bytesForStream));
+        // Use to fix the mark limit to avoid allocating buffers that fit entire images.
+        RecyclableBufferedInputStream bufferedStream = new RecyclableBufferedInputStream(
+                is, bytesForStream);
+        // Use to retrieve exceptions thrown while reading.
+        // TODO(#126): when the framework no longer returns partially decoded Bitmaps or provides a way to determine
+        // if a Bitmap is partially decoded, consider removing.
+        ExceptionCatchingInputStream exceptionStream =
+                ExceptionCatchingInputStream.obtain(bufferedStream);
+        // Use to read data.
+        // Ensures that we can always reset after reading an image header so that we can still attempt to decode the
+        // full image even when the header decode fails and/or overflows our read buffer. See #283.
+        MarkEnforcingInputStream invalidatingStream = new MarkEnforcingInputStream(exceptionStream);
         try {
-            stream.mark(MARK_POSITION);
+            exceptionStream.mark(MARK_POSITION);
             int orientation = 0;
             try {
-                orientation = new ImageHeaderParser(stream).getOrientation();
+                orientation = new ImageHeaderParser(exceptionStream).getOrientation();
             } catch (IOException e) {
                 if (Log.isLoggable(TAG, Log.WARN)) {
                     Log.w(TAG, "Cannot determine the image orientation from header", e);
                 }
             } finally {
                 try {
-                    stream.reset();
+                    exceptionStream.reset();
                 } catch (IOException e) {
                     if (Log.isLoggable(TAG, Log.WARN)) {
                         Log.w(TAG, "Cannot reset the input stream", e);
@@ -131,7 +141,7 @@ public Bitmap decode(InputStream is, BitmapPool pool, int outWidth, int outHeigh
 
             options.inTempStorage = bytesForOptions;
 
-            final int[] inDimens = getDimensions(stream, options);
+            final int[] inDimens = getDimensions(invalidatingStream, bufferedStream, options);
             final int inWidth = inDimens[0];
             final int inHeight = inDimens[1];
 
@@ -139,13 +149,13 @@ public Bitmap decode(InputStream is, BitmapPool pool, int outWidth, int outHeigh
             final int sampleSize = getRoundedSampleSize(degreesToRotate, inWidth, inHeight, outWidth, outHeight);
 
             final Bitmap downsampled =
-                    downsampleWithSize(stream, options, pool, inWidth, inHeight, sampleSize,
+                    downsampleWithSize(invalidatingStream, bufferedStream, options, pool, inWidth, inHeight, sampleSize,
                             decodeFormat);
 
             // BitmapFactory swallows exceptions during decodes and in some cases when inBitmap is non null, may catch
             // and log a stack trace but still return a non null bitmap. To avoid displaying partially decoded bitmaps,
             // we catch exceptions reading from the stream in our ExceptionCatchingInputStream and throw them here.
-            final Exception streamException = stream.getException();
+            final Exception streamException = exceptionStream.getException();
             if (streamException != null) {
                 throw new RuntimeException(streamException);
             }
@@ -163,7 +173,7 @@ public Bitmap decode(InputStream is, BitmapPool pool, int outWidth, int outHeigh
         } finally {
             byteArrayPool.releaseBytes(bytesForOptions);
             byteArrayPool.releaseBytes(bytesForStream);
-            stream.release();
+            exceptionStream.release();
             releaseOptions(options);
         }
     }
@@ -191,8 +201,9 @@ private int getRoundedSampleSize(int degreesToRotate, int inWidth, int inHeight,
         return Math.max(1, powerOfTwoSampleSize);
     }
 
-    private Bitmap downsampleWithSize(ExceptionCatchingInputStream is, BitmapFactory.Options options, BitmapPool pool,
-            int inWidth, int inHeight, int sampleSize, DecodeFormat decodeFormat) {
+    private Bitmap downsampleWithSize(MarkEnforcingInputStream is, RecyclableBufferedInputStream  bufferedStream,
+            BitmapFactory.Options options, BitmapPool pool, int inWidth, int inHeight, int sampleSize,
+            DecodeFormat decodeFormat) {
         // Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding.
         Bitmap.Config config = getConfig(is, decodeFormat);
         options.inSampleSize = sampleSize;
@@ -203,7 +214,7 @@ private Bitmap downsampleWithSize(ExceptionCatchingInputStream is, BitmapFactory
             // BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.
             setInBitmap(options, pool.getDirty(targetWidth, targetHeight, config));
         }
-        return decodeStream(is, options);
+        return decodeStream(is, bufferedStream, options);
     }
 
     private static boolean shouldUsePool(InputStream is) {
@@ -286,14 +297,16 @@ private static boolean shouldUsePool(InputStream is) {
      *              android.graphics.BitmapFactory.Options)}.
      * @return an array containing the dimensions of the image in the form {width, height}.
      */
-    public int[] getDimensions(ExceptionCatchingInputStream is, BitmapFactory.Options options) {
+    public int[] getDimensions(MarkEnforcingInputStream is, RecyclableBufferedInputStream bufferedStream,
+            BitmapFactory.Options options) {
         options.inJustDecodeBounds = true;
-        decodeStream(is, options);
+        decodeStream(is, bufferedStream, options);
         options.inJustDecodeBounds = false;
         return new int[] { options.outWidth, options.outHeight };
     }
 
-    private static Bitmap decodeStream(ExceptionCatchingInputStream is, BitmapFactory.Options options) {
+    private static Bitmap decodeStream(MarkEnforcingInputStream is, RecyclableBufferedInputStream bufferedStream,
+            BitmapFactory.Options options) {
          if (options.inJustDecodeBounds) {
              // This is large, but jpeg headers are not size bounded so we need something large enough to minimize
              // the possibility of not being able to fit enough of the header in the buffer to get the image size so
@@ -305,7 +318,7 @@ private static Bitmap decodeStream(ExceptionCatchingInputStream is, BitmapFactor
              // Once we've read the image header, we no longer need to allow the buffer to expand in size. To avoid
              // unnecessary allocations reading image data, we fix the mark limit so that it is no larger than our
              // current buffer size here. See issue #225.
-             is.fixMarkLimit();
+             bufferedStream.fixMarkLimit();
          }
 
         final Bitmap result = BitmapFactory.decodeStream(is, null, options);
@@ -360,6 +373,9 @@ private static void resetOptions(BitmapFactory.Options decodeBitmapOptions) {
         decodeBitmapOptions.inSampleSize = 1;
         decodeBitmapOptions.inPreferredConfig = null;
         decodeBitmapOptions.inJustDecodeBounds = false;
+        decodeBitmapOptions.outWidth = 0;
+        decodeBitmapOptions.outHeight = 0;
+        decodeBitmapOptions.outMimeType = null;
 
         if (Build.VERSION_CODES.HONEYCOMB <= Build.VERSION.SDK_INT)  {
             decodeBitmapOptions.inBitmap = null;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
index cd787817d..9512a7347 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
@@ -125,7 +125,7 @@ public int getOrientation() throws IOException {
         } else {
             byte[] exifData = getExifSegment();
             boolean hasJpegExifPreamble = exifData != null
-                    && exifData.length >= JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length;
+                    && exifData.length > JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length;
 
             if (hasJpegExifPreamble) {
                 for (int i = 0; i < JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length; i++) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
index 10a341ebe..49d074988 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
@@ -59,8 +59,7 @@ public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int h
         if (recycled != null) {
             result = recycled;
         } else {
-            result = Bitmap.createBitmap(width, height, toCrop.getConfig() == null
-                        ? Bitmap.Config.ARGB_8888 : toCrop.getConfig());
+            result = Bitmap.createBitmap(width, height, getSafeConfig(toCrop));
         }
 
         // We don't add or remove alpha, so keep the alpha setting of the Bitmap we were given.
@@ -107,7 +106,7 @@ public static Bitmap fitCenter(Bitmap toFit, BitmapPool pool, int width, int hei
             return toFit;
         }
 
-        Bitmap.Config config = toFit.getConfig() != null ? toFit.getConfig() : Bitmap.Config.ARGB_8888;
+        Bitmap.Config config = getSafeConfig(toFit);
         Bitmap toReuse = pool.get(targetWidth, targetHeight, config);
         if (toReuse == null) {
             toReuse = Bitmap.createBitmap(targetWidth, targetHeight, config);
@@ -267,9 +266,10 @@ public static Bitmap rotateImageExif(Bitmap toOrient, BitmapPool pool, int exifO
         final int newWidth = Math.round(newRect.width());
         final int newHeight = Math.round(newRect.height());
 
-        Bitmap result = pool.get(newWidth, newHeight, toOrient.getConfig());
+        Bitmap.Config config = getSafeConfig(toOrient);
+        Bitmap result = pool.get(newWidth, newHeight, config);
         if (result == null) {
-            result = Bitmap.createBitmap(newWidth, newHeight, toOrient.getConfig());
+            result = Bitmap.createBitmap(newWidth, newHeight, config);
         }
 
         matrix.postTranslate(-newRect.left, -newRect.top);
@@ -281,6 +281,10 @@ public static Bitmap rotateImageExif(Bitmap toOrient, BitmapPool pool, int exifO
         return result;
     }
 
+    private static Bitmap.Config getSafeConfig(Bitmap bitmap) {
+      return bitmap.getConfig() != null ? bitmap.getConfig() : Bitmap.Config.ARGB_8888;
+    }
+
     // Visible for testing.
     static void initializeMatrixForRotation(int exifOrientation, Matrix matrix) {
         switch (exifOrientation) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
index 537b185ca..712dc2fbc 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
@@ -17,14 +17,25 @@
  */
 public class VideoBitmapDecoder implements BitmapDecoder<ParcelFileDescriptor> {
     private static final MediaMetadataRetrieverFactory DEFAULT_FACTORY =  new MediaMetadataRetrieverFactory();
+    private static final int NO_FRAME = -1;
     private MediaMetadataRetrieverFactory factory;
+    private int frame;
 
     public VideoBitmapDecoder() {
-        this(DEFAULT_FACTORY);
+        this(DEFAULT_FACTORY, NO_FRAME);
+    }
+
+    public VideoBitmapDecoder(int frame) {
+      this(DEFAULT_FACTORY, checkValidFrame(frame));
     }
 
     VideoBitmapDecoder(MediaMetadataRetrieverFactory factory) {
+      this(factory, NO_FRAME);
+    }
+
+    VideoBitmapDecoder(MediaMetadataRetrieverFactory factory, int frame) {
         this.factory = factory;
+        this.frame = frame;
     }
 
     @Override
@@ -33,7 +44,12 @@ public Bitmap decode(ParcelFileDescriptor resource, BitmapPool bitmapPool, int o
             throws IOException {
         MediaMetadataRetriever mediaMetadataRetriever = factory.build();
         mediaMetadataRetriever.setDataSource(resource.getFileDescriptor());
-        Bitmap result = mediaMetadataRetriever.getFrameAtTime();
+        Bitmap result;
+        if (frame >= 0) {
+          result = mediaMetadataRetriever.getFrameAtTime(frame);
+        } else {
+          result = mediaMetadataRetriever.getFrameAtTime();
+        }
         mediaMetadataRetriever.release();
         resource.close();
         return result;
@@ -50,4 +66,11 @@ public MediaMetadataRetriever build() {
             return new MediaMetadataRetriever();
         }
     }
+
+    private static int checkValidFrame(int frame) {
+      if (frame < 0) {
+        throw new IllegalArgumentException("Requested frame must be non-negative");
+      }
+      return frame;
+    }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index b0b80fa56..7f909a8d9 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -111,9 +111,6 @@ public RequestManager get(Fragment fragment) {
         if (Util.isOnBackgroundThread()) {
             return get(fragment.getActivity().getApplicationContext());
         } else {
-            if (fragment.isDetached()) {
-                throw new IllegalArgumentException("You cannot start a load on a detached fragment");
-            }
             FragmentManager fm = fragment.getChildFragmentManager();
             return supportFragmentGet(fragment.getActivity(), fm);
         }
@@ -145,19 +142,11 @@ public RequestManager get(android.app.Fragment fragment) {
         if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
             return get(fragment.getActivity().getApplicationContext());
         } else {
-            assertNotDetached(fragment);
             android.app.FragmentManager fm = fragment.getChildFragmentManager();
             return fragmentGet(fragment.getActivity(), fm);
         }
     }
 
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
-    private static void assertNotDetached(android.app.Fragment fragment) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2 && fragment.isDetached()) {
-            throw new IllegalArgumentException("You cannot start a load on a detached fragment");
-        }
-    }
-
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     RequestManager fragmentGet(Context context, final android.app.FragmentManager fm) {
         RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(TAG);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 9497a7d96..62e664dac 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -23,9 +23,9 @@
  * {@link android.view.ViewTreeObserver.OnDrawListener}.
  *
  * <p>
- *     To detect {@link View} reuse in {@link android.widget.ListView} or any {@link ViewGroup} that reuses views, this
- *     class uses the {@link View#setTag(Object)} method to store some metadata so that if a view is reused, any
- *     previous loads or resources from previous loads can be cancelled or reused.
+ *     To detect {@link View} reuse in {@link android.widget.ListView} or any {@link android.view.ViewGroup} that reuses
+ *     views, this class uses the {@link View#setTag(Object)} method to store some metadata so that if a view is reused,
+ *     any previous loads or resources from previous loads can be cancelled or reused.
  * </p>
  *
  * <p>
diff --git a/library/src/main/java/com/bumptech/glide/util/ExceptionCatchingInputStream.java b/library/src/main/java/com/bumptech/glide/util/ExceptionCatchingInputStream.java
index 344a2894f..12df71c3b 100644
--- a/library/src/main/java/com/bumptech/glide/util/ExceptionCatchingInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/util/ExceptionCatchingInputStream.java
@@ -1,7 +1,5 @@
 package com.bumptech.glide.util;
 
-import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Queue;
@@ -17,10 +15,10 @@
 
     private static final Queue<ExceptionCatchingInputStream> QUEUE = Util.createQueue(0);
 
-    private RecyclableBufferedInputStream wrapped;
+    private InputStream wrapped;
     private IOException exception;
 
-    public static ExceptionCatchingInputStream obtain(RecyclableBufferedInputStream toWrap) {
+    public static ExceptionCatchingInputStream obtain(InputStream toWrap) {
         ExceptionCatchingInputStream result;
         synchronized (QUEUE) {
             result = QUEUE.poll();
@@ -43,7 +41,7 @@ static void clearQueue() {
         // Do nothing.
     }
 
-    void setInputStream(RecyclableBufferedInputStream toWrap) {
+    void setInputStream(InputStream toWrap) {
         wrapped = toWrap;
     }
 
@@ -120,10 +118,6 @@ public int read() throws IOException {
         return result;
     }
 
-    public void fixMarkLimit() {
-        wrapped.fixMarkLimit();
-    }
-
     public IOException getException() {
         return exception;
     }
diff --git a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
new file mode 100644
index 000000000..222ffc389
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
@@ -0,0 +1,87 @@
+package com.bumptech.glide.util;
+
+import java.io.FilterInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * Prevents {@link InputStream InputStreams} from overflowing their buffer by reading data past their read limit.
+ */
+public class MarkEnforcingInputStream extends FilterInputStream {
+    private static final int UNSET = Integer.MIN_VALUE;
+    private static final int END_OF_STREAM = -1;
+
+    private int availableBytes = UNSET;
+
+    public MarkEnforcingInputStream(InputStream in) {
+        super(in);
+    }
+
+    @Override
+    public void mark(int readlimit) {
+        super.mark(readlimit);
+        availableBytes = readlimit;
+    }
+
+    @Override
+    public int read() throws IOException {
+        if (getBytesToRead(1) == END_OF_STREAM) {
+            return END_OF_STREAM;
+        }
+
+        int result = super.read();
+        updateAvailableBytesAfterRead(1 /* bytesRead */);
+        return result;
+    }
+
+    @Override
+    public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException {
+        int toRead = (int) getBytesToRead(byteCount);
+        if (toRead == END_OF_STREAM) {
+            return END_OF_STREAM;
+        }
+
+        int read = super.read(buffer, byteOffset, toRead);
+        updateAvailableBytesAfterRead(read);
+        return read;
+    }
+
+    @Override
+    public void reset() throws IOException {
+        super.reset();
+        availableBytes = UNSET;
+    }
+
+    @Override
+    public long skip(long byteCount) throws IOException {
+        long toSkip = getBytesToRead(byteCount);
+        if (toSkip == END_OF_STREAM) {
+            return END_OF_STREAM;
+        }
+
+        long read = super.skip(toSkip);
+        updateAvailableBytesAfterRead(read);
+        return read;
+    }
+
+    @Override
+    public int available() throws IOException {
+        return availableBytes == UNSET ? super.available() : Math.min(availableBytes, super.available());
+    }
+
+    private long getBytesToRead(long targetByteCount) {
+        if (availableBytes == 0) {
+            return END_OF_STREAM;
+        } else if (availableBytes != UNSET && targetByteCount > availableBytes) {
+            return availableBytes;
+        } else {
+            return targetByteCount;
+        }
+    }
+
+    private void updateAvailableBytesAfterRead(long bytesRead) {
+        if (availableBytes != UNSET && bytesRead != END_OF_STREAM) {
+            availableBytes -= bytesRead;
+        }
+    }
+}
diff --git a/samples/flickr/flickr.iml b/samples/flickr/flickr.iml
index 1a9333d82..97b76da5b 100644
--- a/samples/flickr/flickr.iml
+++ b/samples/flickr/flickr.iml
@@ -31,11 +31,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -80,7 +82,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/reports" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" name="appcompat-v7-19.1.0" level="project" />
     <orderEntry type="library" exported="" name="support-v4-19.1.0" level="project" />
diff --git a/samples/giphy/giphy.iml b/samples/giphy/giphy.iml
index c5aebf930..5755c221c 100644
--- a/samples/giphy/giphy.iml
+++ b/samples/giphy/giphy.iml
@@ -31,11 +31,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -80,7 +82,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/reports" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" name="gson-2.2.4" level="project" />
     <orderEntry type="library" exported="" name="support-v4-19.1.0" level="project" />
diff --git a/samples/svg/svg.iml b/samples/svg/svg.iml
index c81d390f2..154c730d5 100644
--- a/samples/svg/svg.iml
+++ b/samples/svg/svg.iml
@@ -31,11 +31,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -80,7 +82,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/reports" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" name="support-v4-19.1.0" level="project" />
     <orderEntry type="library" exported="" name="androidsvg-1.2.1" level="project" />
diff --git a/testutil/testutil.iml b/testutil/testutil.iml
index df334eef4..920fec434 100644
--- a/testutil/testutil.iml
+++ b/testutil/testutil.iml
@@ -17,10 +17,10 @@
     <output-test url="file://$MODULE_DIR$/build/classes/test" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
       <excludeFolder url="file://$MODULE_DIR$/.gradle" />
       <excludeFolder url="file://$MODULE_DIR$/build" />
     </content>
diff --git a/third_party/gif_decoder/build.gradle b/third_party/gif_decoder/build.gradle
index be4a6b0c1..3000fb515 100644
--- a/third_party/gif_decoder/build.gradle
+++ b/third_party/gif_decoder/build.gradle
@@ -15,7 +15,6 @@ android {
     buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId 'com.bumptech.glide.gifdecoder'
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
     }
diff --git a/third_party/gif_decoder/gif_decoder.iml b/third_party/gif_decoder/gif_decoder.iml
index afed21b75..f7e5441b3 100644
--- a/third_party/gif_decoder/gif_decoder.iml
+++ b/third_party/gif_decoder/gif_decoder.iml
@@ -32,11 +32,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -85,7 +87,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" scope="TEST" name="commons-codec-1.3" level="project" />
     <orderEntry type="library" exported="" scope="TEST" name="robolectric-annotations-2.4" level="project" />
diff --git a/third_party/gif_encoder/build.gradle b/third_party/gif_encoder/build.gradle
index 6d2143286..240246fc0 100644
--- a/third_party/gif_encoder/build.gradle
+++ b/third_party/gif_encoder/build.gradle
@@ -5,7 +5,6 @@ android {
     buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId 'com.bumptech.glide.gifencoder'
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
     }
diff --git a/third_party/gif_encoder/gif_encoder.iml b/third_party/gif_encoder/gif_encoder.iml
index 2a8f3ee75..6aef0b9e2 100644
--- a/third_party/gif_encoder/gif_encoder.iml
+++ b/third_party/gif_encoder/gif_encoder.iml
@@ -32,11 +32,13 @@
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -81,7 +83,7 @@
       <excludeFolder url="file://$MODULE_DIR$/build/reports" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 19 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Maven Android API 19 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
