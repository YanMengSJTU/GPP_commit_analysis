diff --git a/.travis.yml b/.travis.yml
index 4bd84ebda..a16977739 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -14,7 +14,7 @@ jdk:
 
 sudo: false
 
-script: 'travis_retry ./gradlew build'
+script: 'travis_retry ./gradlew build --parallel'
 
 after_success:
 - scripts/travis-sonatype-publish.sh
diff --git a/README.md b/README.md
index 6e9981912..b2e7f345b 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@ Glide
 =====
 
 [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide) [![Build Status](https://travis-ci.org/bumptech/glide.svg?branch=master)](https://travis-ci.org/bumptech/glide)
-| [View Glide's documentation][20] | [Report an issue with Glide][5]
+| [View Glide's documentation][20] | [简体中文文档][22] | [Report an issue with Glide][5]
 
 Glide is a fast and efficient open source media management and image loading framework for Android that wraps media
 decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.
@@ -121,7 +121,9 @@ Comments/bugs/questions/pull requests are always welcome! Please read [CONTRIBUT
 Compatibility
 -------------
 
- * **Android SDK**: Glide requires a minimum API level of 14.  
+ * **Minimum Android SDK**: Glide requires a minimum API level of 14.
+ * **Compile Android SDK**: Glide requires you to compile against API 26.
+
  If you need to support older versions, consider staying on [Glide v3][14], which works on API 10, but not actively maintained.
  * **OkHttp 2.x**: there are optional dependencies available called `okhttp-integration`, see [Integration Libraries][12] wiki page.
  * **OkHttp 3.x**: there are optional dependencies available called `okhttp3-integration`, see [Integration Libraries][12] wiki page.
@@ -217,3 +219,4 @@ This is not an official Google product.
 [19]: https://github.com/wasabeef/glide-transformations
 [20]: http://bumptech.github.io/glide/
 [21]: http://bumptech.github.io/glide/doc/generatedapi.html
+[22]: https://muyangmin.github.io/glide-docs-cn/
\ No newline at end of file
diff --git a/annotation/compiler/build.gradle b/annotation/compiler/build.gradle
index adff4ea2e..656534bf7 100644
--- a/annotation/compiler/build.gradle
+++ b/annotation/compiler/build.gradle
@@ -1,17 +1,80 @@
 import org.gradle.internal.jvm.Jvm
+import proguard.gradle.ProGuardTask
 
 apply plugin: 'java'
 
+configurations {
+    // adapted from https://android.googlesource.com/platform/frameworks/testing/+/976c423/espresso/espresso-lib/build.gradle
+    // compileOnly dependencies will be repackaged, see rules in jarjar ant task below
+    jarjar 
+}
+
 dependencies {
-    compile 'com.squareup:javapoet:1.9.0'
-    compile 'com.google.auto.service:auto-service:1.0-rc3'
-    compile 'com.google.code.findbugs:jsr305:3.0.1'
+    // from https://code.google.com/archive/p/jarjar/downloads
+    jarjar files('libs/jarjar-1.4.jar')
+
+    compileOnly 'com.squareup:javapoet:1.9.0'
+    compileOnly 'com.google.auto.service:auto-service:1.0-rc3'
+    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
+
     compile project(':annotation')
     // This is to support com.sun.tootls.javac.util.List, currently used in RootModuleGenerator.
     compile files(Jvm.current().getToolsJar())
+}
+
+def repackagedJar = file("$buildDir/intermediates/repackaged.jar")
+def proguardedJar = file("$buildDir/intermediates/proguarded.jar")
+
+task compiledJar(type: Jar, dependsOn: classes) {
+    from sourceSets.main.output
+}
+
+// Repackage compileOnly dependencies to avoid namespace collisions.
+task jarjar(dependsOn: [tasks.compiledJar, configurations.compileOnly]) {
+    // Set up inputs and outputs to only rebuild when necessary (code change, dependency change).
+    inputs.file compiledJar
+    inputs.files configurations.compileOnly
+    outputs.file repackagedJar
+
+    doFirst {
+        ant {
+            taskdef name: 'jarjar',
+                    classname: 'com.tonicsystems.jarjar.JarJarTask',
+                    classpath: configurations.jarjar.asPath
+
+            jarjar(jarfile: repackagedJar) {
+                configurations.compileOnly.resolve().each {
+                    zipfileset(src: it.absolutePath, excludes: [
+                        'META-INF/maven/**',
+                        'META-INF/services/javax.annotation.processing.Processor'
+                    ].join(','))
+                }
+                zipfileset(src: tasks.jar.archivePath)
+                def repackageIntoGlide = 'com.bumptech.glide.repackaged.@0'
+                rule result: repackageIntoGlide, pattern: 'com.squareup.javapoet.**'
+                rule result: repackageIntoGlide, pattern: 'com.google.auto.**'
+                rule result: repackageIntoGlide, pattern: 'com.google.common.**'
+                rule result: repackageIntoGlide, pattern: 'com.google.thirdparty.publicsuffix.**'
+            }
+        }
+    }
+}
+
+// Proguard repackaged dependencies to reduce the binary size.
+task proguard(type: ProGuardTask, dependsOn: tasks.jarjar) {
+    configuration 'proguard.pro'
+
+    injars repackagedJar
+    outjars proguardedJar
+
+    libraryjars files(configurations.compile.collect())
+    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
+}
 
-    testCompile "junit:junit:${JUNIT_VERSION}"
-    testCompile 'com.google.testing.compile:compile-testing:0.10'
+// Create the standard jar artifact based on our repackaged and proguarded jar.
+jar {
+    dependsOn proguard
+    from zipTree(proguardedJar)
 }
 
 apply from: "${rootProject.projectDir}/scripts/upload.gradle"
diff --git a/annotation/compiler/libs/jarjar-1.4.jar b/annotation/compiler/libs/jarjar-1.4.jar
new file mode 100644
index 000000000..68b9db9aa
Binary files /dev/null and b/annotation/compiler/libs/jarjar-1.4.jar differ
diff --git a/annotation/compiler/proguard.pro b/annotation/compiler/proguard.pro
new file mode 100644
index 000000000..d40c8f599
--- /dev/null
+++ b/annotation/compiler/proguard.pro
@@ -0,0 +1,22 @@
+-verbose
+# Use ProGuard only to get rid of unused classes
+-dontobfuscate
+-dontoptimize
+-keepattributes *
+-keep class !com.bumptech.glide.repackaged.**,com.bumptech.glide.**
+
+# Keep the entry point to this library, see META-INF\services\javax.annotation.processing.Processor
+-keep class com.bumptech.glide.annotation.compiler.GlideAnnotationProcessor
+
+
+# "duplicate definition of library class"
+-dontnote sun.applet.**
+# "duplicate definition of library class"
+-dontnote sun.tools.jar.**
+# Reflective accesses in com.google.common.util.concurrent.* and some others
+-dontnote com.bumptech.glide.repackaged.com.google.common.**
+# com.google.common.collect.* and some others (….common.*.*)
+-dontwarn com.google.j2objc.annotations.Weak
+# com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator
+-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
+#-dontwarn **
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index aa2618b83..372d5b005 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -24,6 +24,7 @@
 import java.util.List;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
@@ -102,6 +103,8 @@
   /** A set of method names to avoid overriding from RequestOptions. */
   private static final ImmutableSet<String> EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS =
       ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");
+  private static final ClassName CHECK_RESULT_CLASS_NAME =
+      ClassName.get("android.support.annotation", "CheckResult");
 
   private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
@@ -165,6 +168,7 @@ TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedO
         .addModifiers(Modifier.PUBLIC)
         .addTypeVariable(transcodeTypeName)
         .superclass(requestBuilderOfTranscodeType)
+        .addSuperinterface(Cloneable.class)
         .addMethods(generateConstructors())
         .addMethod(generateDownloadOnlyRequestMethod())
         .addMethods(generateGeneratedRequestOptionsEquivalents(generatedOptions))
@@ -203,7 +207,7 @@ private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOver
     ParameterizedTypeName generatedRequestBuilderOfType =
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
-    return MethodSpec.overriding(methodToOverride)
+    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride)
         .returns(generatedRequestBuilderOfType)
         .addCode(CodeBlock.builder()
             .add("return ($T) super.$N(",
@@ -217,8 +221,13 @@ public String apply(VariableElement input) {
                 })
                 .join(Joiner.on(", ")))
             .add(");\n")
-            .build())
-        .build();
+            .build());
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      builder.addAnnotation(AnnotationSpec.get(mirror));
+    }
+
+    return builder.build();
   }
 
   /**
@@ -284,10 +293,27 @@ public String apply(ParameterSpec input) {
         .add(");\n")
         .build();
 
-    return MethodSpec.methodBuilder(requestOptionMethod.name)
+    MethodSpec.Builder result = MethodSpec.methodBuilder(requestOptionMethod.name)
         .addJavadoc(
             processorUtil.generateSeeMethodJavadoc(requestOptionsClassName, requestOptionMethod))
         .addModifiers(Modifier.PUBLIC)
+        .varargs(requestOptionMethod.varargs)
+        .addAnnotations(
+            FluentIterable.from(requestOptionMethod.annotations)
+                .filter(new Predicate<AnnotationSpec>() {
+                  @Override
+                  public boolean apply(AnnotationSpec input) {
+                    return !input.type.equals(TypeName.get(Override.class))
+                        // SafeVarargs can only be applied to final methods. GlideRequest is
+                        // non-final to allow for mocking.
+                        && !input.type.equals(TypeName.get(SafeVarargs.class))
+                        // @CheckResult isn't applicable for RequestBuilder because there is no
+                        // autoClone() in RequestBuilder.
+                        && !input.type.equals(CHECK_RESULT_CLASS_NAME);
+                  }
+                })
+                .toList()
+        )
         .addTypeVariables(requestOptionMethod.typeVariables)
         .addParameters(requestOptionMethod.parameters)
         .returns(generatedRequestBuilderOfTranscodeType)
@@ -301,8 +327,18 @@ public String apply(ParameterSpec input) {
             requestOptionsClassName))
         .addCode(callRequestOptionsMethod)
         .endControlFlow()
-        .addStatement("return this")
-        .build();
+        .addStatement("return this");
+
+    if (requestOptionMethod.annotations.contains(
+        AnnotationSpec.builder(SafeVarargs.class).build())) {
+      result.addAnnotation(
+          AnnotationSpec.builder(SuppressWarnings.class)
+              .addMember("value", "$S", "unchecked")
+              .addMember("value", "$S", "varargs")
+              .build());
+    }
+
+    return result.build();
   }
 
   private List<MethodSpec> generateConstructors() {
@@ -341,6 +377,7 @@ private MethodSpec generateDownloadOnlyRequestMethod() {
         = ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(File.class));
     return MethodSpec.methodBuilder("getDownloadOnlyRequest")
         .addAnnotation(Override.class)
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .returns(generatedRequestBuilderOfFile)
         .addModifiers(Modifier.PROTECTED)
         .addStatement("return new $T<>($T.class, $N).apply($N)",
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 8099489d4..209b7715b 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -28,6 +28,7 @@
 import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
@@ -75,6 +76,8 @@
   private static final String REQUEST_OPTIONS_SIMPLE_NAME = "RequestOptions";
   static final String REQUEST_OPTIONS_QUALIFIED_NAME =
       REQUEST_OPTIONS_PACKAGE_NAME + "." + REQUEST_OPTIONS_SIMPLE_NAME;
+  private static final ClassName CHECK_RESULT_CLASS_NAME =
+      ClassName.get("android.support.annotation", "CheckResult");
 
   private final ProcessingEnvironment processingEnvironment;
   private final ClassName requestOptionsName;
@@ -138,6 +141,7 @@ public MethodSignature apply(MethodAndStaticVar f) {
         .addJavadoc(generateClassJavadoc(glideExtensionClassNames))
         .addModifiers(Modifier.FINAL)
         .addModifiers(Modifier.PUBLIC)
+        .addSuperinterface(Cloneable.class)
         .superclass(requestOptionsName);
 
     for (MethodAndStaticVar methodAndStaticVar : allMethodsAndStaticVars) {
@@ -190,8 +194,9 @@ public MethodSpec apply(ExecutableElement input) {
   }
 
   private MethodSpec generateRequestOptionOverride(ExecutableElement methodToOverride) {
-    return MethodSpec.overriding(methodToOverride)
+    MethodSpec.Builder result = MethodSpec.overriding(methodToOverride)
         .returns(glideOptionsName)
+        .addModifiers(Modifier.FINAL)
         .addCode(CodeBlock.builder()
             .add("return ($T) super.$N(", glideOptionsName, methodToOverride.getSimpleName())
             .add(FluentIterable.from(methodToOverride.getParameters())
@@ -203,8 +208,19 @@ public String apply(VariableElement input) {
                 })
                 .join(Joiner.on(", ")))
             .add(");\n")
-            .build())
-        .build();
+            .build());
+
+    if (methodToOverride.getSimpleName().toString().equals("transforms")) {
+      result.addAnnotation(
+          AnnotationSpec.builder(SafeVarargs.class)
+              .build());
+    }
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      result.addAnnotation(AnnotationSpec.get(mirror));
+    }
+
+    return result.build();
   }
 
   private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtension(
@@ -282,6 +298,8 @@ public String apply(VariableElement input) {
 
     List<MethodAndStaticVar> result = new ArrayList<>();
 
+    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
     result.add(new MethodAndStaticVar(builder.build()));
     result.add(generateStaticMethodEquivalentForExtensionMethod(element));
 
@@ -396,6 +414,8 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
           TypeVariableName.get(typeParameterElement.getSimpleName().toString()));
     }
 
+    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
 
@@ -486,6 +506,8 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
           TypeVariableName.get(typeParameterElement.getSimpleName().toString()));
     }
 
+    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
 
diff --git a/checkstyle.xml b/checkstyle.xml
index 55273de62..ec3f4a74d 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -127,7 +127,9 @@
 
         <!-- Checks for blocks. -->
         <!-- See http://checkstyle.sourceforge.net/config_blocks.html -->
-        <module name="AvoidNestedBlocks" />
+        <module name="AvoidNestedBlocks">
+          <property name="allowInSwitchCase" value="true" />
+        </module>
         <module name="EmptyBlock" >
             <property name="option" value="text"/>
         </module>
diff --git a/glide/build.gradle b/glide/build.gradle
index 4e8216ad8..8a1ac2bff 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -16,7 +16,8 @@ static def getAndroidPathsForJavadoc() {
             ':integration:okhttp',
             ':integration:okhttp3',
             ':integration:volley',
-            ':integration:gifencoder'
+            ':integration:gifencoder',
+            ':integration:recyclerview'
     ]
 }
 
diff --git a/gradle.properties b/gradle.properties
index 63ca735ce..52718a675 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -19,6 +19,7 @@ ANDROID_SUPPORT_VERSION=26.0.2
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.0
 ANDROID_GRADLE_VERSION=2.3.0
+DAGGER_VERSION=2.11
 
 COVERALLS_GRADLE_VERSION=2.4.0
 JUNIT_VERSION=4.12
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
index fa45bb6c9..36a47491f 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
@@ -5,7 +5,6 @@
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.GlideModule;
 import java.io.InputStream;
 
 /**
@@ -20,7 +19,7 @@
  * @deprecated replaced with com.bumptech.glide.integration.okhttp3.OkHttpGlideModule.
  */
 @Deprecated
-public class OkHttpGlideModule implements GlideModule {
+public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
     // Do nothing.
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
index dd4bbfb27..bc81dabc0 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
@@ -15,8 +15,11 @@
  * <p>For Applications that depend on this library and include an
  * {@link AppGlideModule} and Glide's annotation processor, this class
  * will be automatically included.
+ *
+ * @deprecated Prefer the okhttp3 version instead.
  */
 @GlideModule
+@Deprecated
 public class OkHttpLibraryGlideModule extends LibraryGlideModule {
   @Override
   public void registerComponents(Context context, Glide glide, Registry registry) {
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
index dc6b7b545..60517251f 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
@@ -5,7 +5,6 @@
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.GlideModule;
 import java.io.InputStream;
 
 /**
@@ -21,7 +20,7 @@
  * annotations.
  */
 @Deprecated
-public class OkHttpGlideModule implements GlideModule {
+public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
     // Do nothing.
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
index 3a4d273ae..52899e89a 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
@@ -5,7 +5,6 @@
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
-import com.bumptech.glide.module.GlideModule;
 import java.io.InputStream;
 
 /**
@@ -20,7 +19,8 @@
  * @deprecated Replaced with {@link VolleyLibraryGlideModule}.
  */
 @Deprecated
-public class VolleyGlideModule implements GlideModule {
+@SuppressWarnings("deprecation")
+public class VolleyGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
     // Do nothing.
diff --git a/library/build.gradle b/library/build.gradle
index d71386050..52b79d6af 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -69,6 +69,7 @@ afterEvaluate {
     if (tasks.findByName("assembleDebug") == null) {
         return
     }
+
     task findbugs(type: FindBugs, dependsOn: assembleDebug) {
 
         description 'Run findbugs'
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index f8e9cfd80..0227e4131 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -298,39 +298,44 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     ByteBufferGifDecoder byteBufferGifDecoder =
         new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);
 
-    registry.register(ByteBuffer.class, new ByteBufferEncoder())
-        .register(InputStream.class, new StreamEncoder(arrayPool))
+    registry
+        .append(ByteBuffer.class, new ByteBufferEncoder())
+        .append(InputStream.class, new StreamEncoder(arrayPool))
         /* Bitmaps */
-        .append(ByteBuffer.class, Bitmap.class,
+        .append(Registry.BUCKET_BITMAP, ByteBuffer.class, Bitmap.class,
             new ByteBufferBitmapDecoder(downsampler))
-        .append(InputStream.class, Bitmap.class,
+        .append(Registry.BUCKET_BITMAP, InputStream.class, Bitmap.class,
             new StreamBitmapDecoder(downsampler, arrayPool))
-        .append(ParcelFileDescriptor.class, Bitmap.class, new VideoBitmapDecoder(bitmapPool))
-        .register(Bitmap.class, new BitmapEncoder())
+        .append(Registry.BUCKET_BITMAP, ParcelFileDescriptor.class, Bitmap.class,
+            new VideoBitmapDecoder(bitmapPool))
+        .append(Bitmap.class, new BitmapEncoder())
         /* GlideBitmapDrawables */
-        .append(ByteBuffer.class, BitmapDrawable.class,
+        .append(Registry.BUCKET_BITMAP_DRAWABLE, ByteBuffer.class, BitmapDrawable.class,
             new BitmapDrawableDecoder<>(resources, bitmapPool,
                 new ByteBufferBitmapDecoder(downsampler)))
-        .append(InputStream.class, BitmapDrawable.class,
+        .append(Registry.BUCKET_BITMAP_DRAWABLE, InputStream.class, BitmapDrawable.class,
             new BitmapDrawableDecoder<>(resources, bitmapPool,
                 new StreamBitmapDecoder(downsampler, arrayPool)))
-        .append(ParcelFileDescriptor.class, BitmapDrawable.class,
+        .append(Registry.BUCKET_BITMAP_DRAWABLE, ParcelFileDescriptor.class, BitmapDrawable.class,
             new BitmapDrawableDecoder<>(resources, bitmapPool, new VideoBitmapDecoder(bitmapPool)))
-        .register(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder()))
+        .append(BitmapDrawable.class, new BitmapDrawableEncoder(bitmapPool, new BitmapEncoder()))
         /* GIFs */
-        .prepend(InputStream.class, GifDrawable.class,
+        .append(Registry.BUCKET_GIF, InputStream.class, GifDrawable.class,
             new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool))
-        .prepend(ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder)
-        .register(GifDrawable.class, new GifDrawableEncoder())
+        .append(Registry.BUCKET_GIF, ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder)
+        .append(GifDrawable.class, new GifDrawableEncoder())
         /* GIF Frames */
+        // Compilation with Gradle requires the type to be specified for UnitModelLoader here.
         .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>())
-        .append(GifDecoder.class, Bitmap.class, new GifFrameResourceDecoder(bitmapPool))
+        .append(Registry.BUCKET_BITMAP, GifDecoder.class, Bitmap.class,
+            new GifFrameResourceDecoder(bitmapPool))
         /* Files */
         .register(new ByteBufferRewinder.Factory())
         .append(File.class, ByteBuffer.class, new ByteBufferFileLoader.Factory())
         .append(File.class, InputStream.class, new FileLoader.StreamFactory())
         .append(File.class, File.class, new FileDecoder())
         .append(File.class, ParcelFileDescriptor.class, new FileLoader.FileDescriptorFactory())
+        // Compilation with Gradle requires the type to be specified for UnitModelLoader here.
         .append(File.class, File.class, new UnitModelLoader.Factory<File>())
         /* Models */
         .register(new InputStreamRewinder.Factory(arrayPool))
@@ -617,13 +622,18 @@ public static RequestManager with(Fragment fragment) {
    * <p>This method will not work if the View is not attached. Prefer the Activity and Fragment
    * variants unless you're loading in a View subclass.
    *
-   * <p>This method may be inefficient for large hierarchies. Consider memoizing the result after
-   * the View is attached.
+   * <p>This method may be inefficient aways and is definitely inefficient for large hierarchies.
+   * Consider memoizing the result after the View is attached or again, prefer the Activity and
+   * Fragment variants whenever possible.
    *
    * <p>When used in Applications that use the non-support {@link android.app.Fragment} classes,
    * calling this method will produce noisy logs from {@link android.app.FragmentManager}. Consider
    * avoiding entirely or using the {@link Fragment}s from the support library instead.
    *
+   * <p>If the support {@link FragmentActivity} class is used, this method will only attempt to
+   * discover support {@link Fragment}s. Any non-support {@link android.app.Fragment}s attached
+   * to the {@link FragmentActivity} will be ignored.
+   *
    * @param view The view to search for a containing Fragment or Activity from.
    * @return A RequestManager that can be used to start a load.
    */
diff --git a/library/src/main/java/com/bumptech/glide/ListPreloader.java b/library/src/main/java/com/bumptech/glide/ListPreloader.java
index 9844786b3..7aaa9d370 100644
--- a/library/src/main/java/com/bumptech/glide/ListPreloader.java
+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.AbsListView;
 import com.bumptech.glide.request.target.BaseTarget;
@@ -24,7 +25,6 @@
  * @param <T> The type of the model being displayed in the list.
  */
 public class ListPreloader<T> implements AbsListView.OnScrollListener {
-
   private final int maxPreload;
   private final PreloadTargetQueue preloadTargetQueue;
   private final RequestManager requestManager;
@@ -47,24 +47,44 @@
   public interface PreloadModelProvider<U> {
 
     /**
-     * Returns a non null list of all models that need to be loaded for the list to display adapter
-     * items in positions between {@code start} and {@code end}.
+     * Returns a {@link List} of models that need to be loaded for the list to display adapter items
+     * in positions between {@code start} and {@code end}.
+     *
+     * <p>A list of any size can be returned so there can be multiple models per adapter position.
+     *
+     * <p>Every model returned by this method is expected to produce a valid {@link RequestBuilder}
+     * in {@link #getPreloadRequestBuilder(Object)}. If that's not possible for any set of models,
+     * avoid including them in the {@link List} returned by this method.
      *
-     * <p> A list of any size can be returned so there can be multiple models per adapter position.
-     * </p>
+     * <p>Although it's acceptable for the returned {@link List} to contain {@code null} models,
+     * it's best to filter them from the list instead of adding {@code null} to avoid unnecessary
+     * logic and expanding the size of the {@link List}
      *
      * @param position The adapter position.
      */
+    @NonNull
     List<U> getPreloadItems(int position);
 
     /**
-     * Returns a non null {@link RequestBuilder} for a given item. Must exactly match the request
-     * used to load the resource in the list.
+     * Returns a {@link RequestBuilder} for a given item on which
+     * {@link RequestBuilder#load(Object)}} has been called or {@code null} if no valid load can be
+     * started.
+     *
+     * <p>For the preloader to be effective, the {@link RequestBuilder} returned here must use
+     * exactly the same size and set of options as the {@link RequestBuilder} used when the ``View``
+     * is bound. You may need to specify a size in both places to ensure that the width and height
+     * match exactly. If so, you can use
+     * {@link com.bumptech.glide.request.RequestOptions#override(int, int)} to do so.
+     *
+     * <p>The target and context will be provided by the preloader.
      *
-     * <p> The target and context will be provided by the preloader. </p>
+     * <p>If {@link RequestBuilder#load(Object)} is not called by this method, the preloader will
+     * trigger a {@link RuntimeException}. If you don't want to load a particular item or position,
+     * filter it from the list returned by {@link #getPreloadItems(int)}.
      *
      * @param item The model to load.
      */
+    @Nullable
     RequestBuilder getPreloadRequestBuilder(U item);
   }
 
@@ -80,8 +100,9 @@
      * Returns the size of the view in the list where the resources will be displayed in pixels in
      * the format [x, y], or {@code null} if no size is currently available.
      *
-     * <p> Note - The dimensions returned here must precisely match those of the view in the list.
-     * </p>
+     * <p>Note - The dimensions returned here must precisely match those of the view in the list.
+     *
+     * <p>If this method returns {@code null}, then no request will be started for the given item.
      *
      * @param item A model
      */
@@ -175,13 +196,22 @@ private void preloadAdapterPosition(List<T> items, int position, boolean isIncre
   }
 
   @SuppressWarnings("unchecked")
-  private void preloadItem(T item, int position, int i) {
-    final int[] dimensions = this.preloadDimensionProvider.getPreloadSize(item, position, i);
-    if (dimensions != null) {
-      RequestBuilder<Object> preloadRequestBuilder =
-          this.preloadModelProvider.getPreloadRequestBuilder(item);
-      preloadRequestBuilder.into(preloadTargetQueue.next(dimensions[0], dimensions[1]));
+  private void preloadItem(@Nullable T item, int position, int perItemPosition) {
+    if (item == null) {
+      return;
+    }
+    int[] dimensions =
+        preloadDimensionProvider.getPreloadSize(item, position, perItemPosition);
+    if (dimensions == null) {
+      return;
     }
+    RequestBuilder<Object> preloadRequestBuilder =
+        preloadModelProvider.getPreloadRequestBuilder(item);
+    if (preloadRequestBuilder == null) {
+      return;
+    }
+
+    preloadRequestBuilder.into(preloadTargetQueue.next(dimensions[0], dimensions[1]));
   }
 
   private void cancelAll() {
@@ -193,7 +223,7 @@ private void cancelAll() {
   private static final class PreloadTargetQueue {
     private final Queue<PreloadTarget> queue;
 
-    public PreloadTargetQueue(int size) {
+    PreloadTargetQueue(int size) {
       queue = Util.createQueue(size);
 
       for (int i = 0; i < size; i++) {
@@ -210,7 +240,7 @@ public PreloadTarget next(int width, int height) {
     }
   }
 
-  private static class PreloadTarget extends BaseTarget<Object> {
+  private static final class PreloadTarget extends BaseTarget<Object> {
     @Synthetic int photoHeight;
     @Synthetic int photoWidth;
 
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index f5b7c0239..97ef93a87 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.provider.ResourceDecoderRegistry;
 import com.bumptech.glide.provider.ResourceEncoderRegistry;
 import com.bumptech.glide.util.pool.FactoryPools;
-
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -33,6 +33,12 @@
  * encoding logic.
  */
 public class Registry {
+  public static final String BUCKET_GIF = "Gif";
+  public static final String BUCKET_BITMAP = "Bitmap";
+  public static final String BUCKET_BITMAP_DRAWABLE = "BitmapDrawable";
+  private static final String BUCKET_PREPEND_ALL = "legacy_prepend_all";
+  private static final String BUCKET_APPEND_ALL = "legacy_append";
+
   private final ModelLoaderRegistry modelLoaderRegistry;
   private final EncoderRegistry encoderRegistry;
   private final ResourceDecoderRegistry decoderRegistry;
@@ -54,6 +60,8 @@ public Registry() {
     this.dataRewinderRegistry = new DataRewinderRegistry();
     this.transcoderRegistry = new TranscoderRegistry();
     this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();
+    setResourceDecoderBucketPriorityList(
+        Arrays.asList(BUCKET_GIF, BUCKET_BITMAP, BUCKET_BITMAP_DRAWABLE));
   }
 
   /**
@@ -113,9 +121,9 @@ public Registry() {
   }
 
   /**
-   * Appends the given {@link ResourceDecoder} onto the list of available {@link ResourceDecoder}s
-   * allowing it to be used if all earlier and default {@link ResourceDecoder}s for the given types
-   * fail (or if none are present).
+   * Appends the given {@link ResourceDecoder} onto the list of all available
+   * {@link ResourceDecoder}s allowing it to be used if all earlier and default
+   * {@link ResourceDecoder}s for the given types fail (or there are none).
    *
    * <p>If you're attempting to replace an existing {@link ResourceDecoder} or would like to ensure
    * that your {@link ResourceDecoder} gets the chance to run before an existing
@@ -123,6 +131,7 @@ public Registry() {
    * best for new types of resources and data or as a way to add an additional fallback decoder
    * for an existing type of data.
    *
+   * @see #append(String, Class, Class, ResourceDecoder)
    * @see #prepend(Class, Class, ResourceDecoder)
    *
    * @param dataClass The data that will be decoded from
@@ -135,14 +144,44 @@ public Registry() {
       Class<Data> dataClass,
       Class<TResource> resourceClass,
       ResourceDecoder<Data, TResource> decoder) {
-    decoderRegistry.append(decoder, dataClass, resourceClass);
+    append(BUCKET_APPEND_ALL, dataClass, resourceClass, decoder);
     return this;
   }
 
   /**
-   * Prepends the given {@link ResourceDecoder} into the list of available {@link ResourceDecoder}s
-   * so that it is attempted before all later and default {@link ResourceDecoder}s for the given
-   * types.
+   * Appends the given {@link ResourceDecoder} onto the list of available {@link ResourceDecoder}s
+   * in this bucket, allowing it to be used if all earlier and default {@link ResourceDecoder}s for
+   * the given types in this bucket fail (or there are none).
+   *
+   * <p>If you're attempting to replace an existing {@link ResourceDecoder} or would like to ensure
+   * that your {@link ResourceDecoder} gets the chance to run before an existing
+   * {@link ResourceDecoder}, use {@link #prepend(Class, Class, ResourceDecoder)}. This method is
+   * best for new types of resources and data or as a way to add an additional fallback decoder
+   * for an existing type of data.
+   *
+   * @see #prepend(String, Class, Class, ResourceDecoder)
+   * @see #setResourceDecoderBucketPriorityList(List)
+   *
+   * @param bucket The bucket identifier to add this decoder to.
+   * @param dataClass The data that will be decoded from
+   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc).
+   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
+   * @param decoder The {@link ResourceDecoder} to register.
+   */
+  public <Data, TResource> Registry append(
+      String bucket,
+      Class<Data> dataClass,
+      Class<TResource> resourceClass,
+      ResourceDecoder<Data, TResource> decoder) {
+    decoderRegistry.append(bucket, decoder, dataClass, resourceClass);
+    return this;
+  }
+
+  /**
+   * Prepends the given {@link ResourceDecoder} into the list of all available
+   * {@link ResourceDecoder}s so that it is attempted before all later and default
+   * {@link ResourceDecoder}s for the given types.
    *
    * <p>This method allows you to replace the default {@link ResourceDecoder} because it ensures
    * the registered {@link ResourceDecoder} will run first. You can use the
@@ -150,6 +189,7 @@ public Registry() {
    * {@link ResourceDecoder}s if you only want to change the default functionality for certain
    * types of data.
    *
+   * @see #prepend(String, Class, Class, ResourceDecoder)
    * @see #append(Class, Class, ResourceDecoder)
    *
    * @param dataClass The data that will be decoded from
@@ -162,7 +202,61 @@ public Registry() {
       Class<Data> dataClass,
       Class<TResource> resourceClass,
       ResourceDecoder<Data, TResource> decoder) {
-    decoderRegistry.prepend(decoder, dataClass, resourceClass);
+    prepend(BUCKET_PREPEND_ALL, dataClass, resourceClass, decoder);
+    return this;
+  }
+
+  /**
+   * Prepends the given {@link ResourceDecoder} into the list of available {@link ResourceDecoder}s
+   * in the same bucket so that it is attempted before all later and default
+   * {@link ResourceDecoder}s for the given types in that bucket.
+   *
+   * <p>This method allows you to replace the default {@link ResourceDecoder} for this bucket
+   * because it ensures the registered {@link ResourceDecoder} will run first. You can use the
+   * {@link ResourceDecoder#handles(Object, Options)} to fall back to the default
+   * {@link ResourceDecoder}s if you only want to change the default functionality for certain
+   * types of data.
+   *
+   * @see #append(String, Class, Class, ResourceDecoder)
+   * @see #setResourceDecoderBucketPriorityList(List)
+   *
+   * @param bucket The bucket identifier to add this decoder to.
+   * @param dataClass The data that will be decoded from
+   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc).
+   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
+   * @param decoder The {@link ResourceDecoder} to register.
+   */
+  public <Data, TResource> Registry prepend(
+      String bucket,
+      Class<Data> dataClass,
+      Class<TResource> resourceClass,
+      ResourceDecoder<Data, TResource> decoder) {
+    decoderRegistry.prepend(bucket, decoder, dataClass, resourceClass);
+    return this;
+  }
+
+  /**
+   * Overrides the default ordering of resource decoder buckets. You may also add custom buckets
+   * which are identified as a unique string. Glide will attempt to decode using decoders in the
+   * highest priority bucket before moving on to the next one.
+   *
+   * <p>The default order is [{@link #BUCKET_GIF}, {@link #BUCKET_BITMAP},
+   * {@link #BUCKET_BITMAP_DRAWABLE}].
+   *
+   * <p>When registering decoders, you can use these buckets to specify the ordering relative only
+   * to other decoders in that bucket.
+   * @see #append(String, Class, Class, ResourceDecoder)
+   * @see #prepend(String, Class, Class, ResourceDecoder)
+   *
+   * @param buckets The list of bucket identifiers in order from highest priority to least priority.
+   */
+  // Final to avoid a PMD error.
+  public final Registry setResourceDecoderBucketPriorityList(List<String> buckets) {
+    List<String> modifiedBuckets = new ArrayList<>(buckets);
+    modifiedBuckets.add(0, BUCKET_PREPEND_ALL);
+    modifiedBuckets.add(BUCKET_APPEND_ALL);
+    decoderRegistry.setBucketPriorityList(modifiedBuckets);
     return this;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 192db6e43..55b044f0a 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 
 import android.net.Uri;
+import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
@@ -329,6 +330,7 @@ protected RequestOptions getMutableOptions() {
    * builders. </p>
    */
   @SuppressWarnings("unchecked")
+  @CheckResult
   @Override
   public RequestBuilder<TranscodeType> clone() {
     try {
@@ -349,25 +351,25 @@ protected RequestOptions getMutableOptions() {
    * @see RequestManager#clear(Target)
    */
   public <Y extends Target<TranscodeType>> Y into(@NonNull Y target) {
+    return into(target, getMutableOptions());
+  }
+
+  private <Y extends Target<TranscodeType>> Y into(@NonNull Y target, RequestOptions options) {
     Util.assertMainThread();
     Preconditions.checkNotNull(target);
     if (!isModelSet) {
       throw new IllegalArgumentException("You must call #load() before calling #into()");
     }
 
-    requestOptions.lock();
-    Request request = buildRequest(target);
+    options = options.autoClone();
+    Request request = buildRequest(target, options);
 
     Request previous = target.getRequest();
-    // When request was failed or cancelled, be sure to use the updated model as it can contains
-    // unexposed data that could help the request to succeed on restart.
-    // See https://github.com/bumptech/glide/issues/2270
-    if (request.isEquivalentTo(previous)
-      && (Preconditions.checkNotNull(previous).isComplete()
-         || Preconditions.checkNotNull(previous).isRunning())) {
+    if (request.isEquivalentTo(previous)) {
       request.recycle();
       // If the request is completed, beginning again will ensure the result is re-delivered,
-      // triggering RequestListeners and Targets. If the request is already
+      // triggering RequestListeners and Targets. If the request is failed, beginning again will
+      // restart the request, giving it another chance to complete. If the request is already
       // running, we can let it continue running without interruption.
       if (!Preconditions.checkNotNull(previous).isRunning()) {
         previous.begin();
@@ -382,6 +384,7 @@ protected RequestOptions getMutableOptions() {
     return target;
   }
 
+
   /**
    * Sets the {@link ImageView} the resource will be loaded into, cancels any existing loads into
    * the view, and frees any resources Glide may have previously loaded into the view so they may be
@@ -397,26 +400,27 @@ protected RequestOptions getMutableOptions() {
     Util.assertMainThread();
     Preconditions.checkNotNull(view);
 
+    RequestOptions requestOptions = this.requestOptions;
     if (!requestOptions.isTransformationSet()
         && requestOptions.isTransformationAllowed()
         && view.getScaleType() != null) {
-      if (requestOptions.isLocked()) {
-        requestOptions = requestOptions.clone();
-      }
+      // Clone in this method so that if we use this RequestBuilder to load into a View and then
+      // into a different target, we don't retain the transformation applied based on the previous
+      // View's scale type.
       switch (view.getScaleType()) {
         case CENTER_CROP:
-          requestOptions.optionalCenterCrop();
+          requestOptions = requestOptions.clone().optionalCenterCrop();
           break;
         case CENTER_INSIDE:
-          requestOptions.optionalCenterInside();
+          requestOptions = requestOptions.clone().optionalCenterInside();
           break;
         case FIT_CENTER:
         case FIT_START:
         case FIT_END:
-          requestOptions.optionalFitCenter();
+          requestOptions = requestOptions.clone().optionalFitCenter();
           break;
         case FIT_XY:
-          requestOptions.optionalCenterInside();
+          requestOptions = requestOptions.clone().optionalCenterInside();
           break;
         case CENTER:
         case MATRIX:
@@ -425,7 +429,7 @@ protected RequestOptions getMutableOptions() {
       }
     }
 
-    return into(context.buildImageViewTarget(view, transcodeClass));
+    return into(context.buildImageViewTarget(view, transcodeClass), requestOptions);
   }
 
   /**
@@ -543,6 +547,7 @@ public void run() {
    * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}.
    */
   @Deprecated
+  @CheckResult
   public <Y extends Target<File>> Y downloadOnly(Y target) {
     return getDownloadOnlyRequest().into(target);
   }
@@ -560,10 +565,12 @@ public void run() {
    * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}.
    */
   @Deprecated
+  @CheckResult
   public FutureTarget<File> downloadOnly(int width, int height) {
     return getDownloadOnlyRequest().submit(width, height);
   }
 
+  @CheckResult
   protected RequestBuilder<File> getDownloadOnlyRequest() {
     return new RequestBuilder<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }
@@ -582,15 +589,15 @@ private Priority getThumbnailPriority(Priority current) {
     }
   }
 
-  private Request buildRequest(Target<TranscodeType> target) {
+  private Request buildRequest(Target<TranscodeType> target, RequestOptions requestOptions) {
     return buildRequestRecursive(target, null, transitionOptions, requestOptions.getPriority(),
-        requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight());
+        requestOptions.getOverrideWidth(), requestOptions.getOverrideHeight(), requestOptions);
   }
 
   private Request buildRequestRecursive(Target<TranscodeType> target,
       @Nullable ThumbnailRequestCoordinator parentCoordinator,
       TransitionOptions<?, ? super TranscodeType> transitionOptions,
-      Priority priority, int overrideWidth, int overrideHeight) {
+      Priority priority, int overrideWidth, int overrideHeight, RequestOptions requestOptions) {
     if (thumbnailBuilder != null) {
       // Recursive case: contains a potentially recursive thumbnail request builder.
       if (isThumbnailBuilt) {
@@ -623,8 +630,15 @@ private Request buildRequestRecursive(Target<TranscodeType> target,
           transitionOptions, priority, overrideWidth, overrideHeight);
       isThumbnailBuilt = true;
       // Recursively generate thumbnail requests.
-      Request thumbRequest = thumbnailBuilder.buildRequestRecursive(target, coordinator,
-          thumbTransitionOptions, thumbPriority, thumbOverrideWidth, thumbOverrideHeight);
+      Request thumbRequest =
+          thumbnailBuilder.buildRequestRecursive(
+              target,
+              coordinator,
+              thumbTransitionOptions,
+              thumbPriority,
+              thumbOverrideWidth,
+              thumbOverrideHeight,
+              thumbnailBuilder.requestOptions);
       isThumbnailBuilt = false;
       coordinator.setRequests(fullRequest, thumbRequest);
       return coordinator;
@@ -652,8 +666,6 @@ private Request obtainRequest(Target<TranscodeType> target,
       RequestOptions requestOptions, RequestCoordinator requestCoordinator,
       TransitionOptions<?, ? super TranscodeType> transitionOptions, Priority priority,
       int overrideWidth, int overrideHeight) {
-    requestOptions.lock();
-
     return SingleRequest.obtain(
         context,
         model,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
index 6198bc5f0..e74320bf0 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
@@ -42,7 +42,7 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
       Options options, DecodeCallback<ResourceType> callback) throws GlideException {
     Resource<ResourceType> decoded = decodeResource(rewinder, width, height, options);
     Resource<ResourceType> transformed = callback.onResourceDecoded(decoded);
-    return transcoder.transcode(transformed);
+    return transcoder.transcode(transformed, options);
   }
 
   private Resource<ResourceType> decodeResource(DataRewinder<DataType> rewinder, int width,
@@ -66,7 +66,9 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
           data = rewinder.rewindAndGet();
           result = decoder.decode(data, width, height, options);
         }
-      } catch (IOException e) {
+        // Some decoders throw unexpectedly. If they do, we shouldn't fail the entire load path, but
+        // instead log and continue. See #2406 for an example.
+      } catch (IOException | RuntimeException e) {
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
           Log.v(TAG, "Failed to decode data for " + decoder, e);
         }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
index b79e11178..d80ff2059 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
@@ -71,6 +71,24 @@ public static GlideExecutor newDiskCacheExecutor() {
         DEFAULT_DISK_CACHE_EXECUTOR_NAME, UncaughtThrowableStrategy.DEFAULT);
   }
 
+  /**
+   * Returns a new fixed thread pool with the default thread count returned from
+   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_DISK_CACHE_EXECUTOR_NAME} thread name
+   * prefix, and a custom
+   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}
+   * uncaught throwable strategy.
+   *
+   * <p>Disk cache executors do not allow network operations on their threads.
+   * @param uncaughtThrowableStrategy The {@link
+   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to
+   *                                  handle uncaught exceptions.
+   */
+  public static GlideExecutor newDiskCacheExecutor(
+          UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,
+                                DEFAULT_DISK_CACHE_EXECUTOR_NAME, uncaughtThrowableStrategy);
+  }
+
   /**
    * Returns a new fixed thread pool with the given thread count, thread name prefix,
    * and {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}.
@@ -103,6 +121,25 @@ public static GlideExecutor newSourceExecutor() {
         UncaughtThrowableStrategy.DEFAULT);
   }
 
+  /**
+   * Returns a new fixed thread pool with the default thread count returned from
+   * {@link #calculateBestThreadCount()}, the {@link #DEFAULT_SOURCE_EXECUTOR_NAME} thread name
+   * prefix, and a custom
+   * {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}
+   * uncaught throwable strategy.
+   *
+   * <p>Source executors allow network operations on their threads.
+   *
+   * @param uncaughtThrowableStrategy The {@link
+   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to
+   *                                  handle uncaught exceptions.
+   */
+  public static GlideExecutor newSourceExecutor(
+          UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+    return newDiskCacheExecutor(DEFAULT_DISK_CACHE_EXECUTOR_THREADS,
+                                DEFAULT_DISK_CACHE_EXECUTOR_NAME, uncaughtThrowableStrategy);
+  }
+
   /**
    * Returns a new fixed thread pool with the given thread count, thread name prefix,
    * and {@link com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy}.
@@ -274,29 +311,33 @@ public boolean accept(File file, String s) {
    * A strategy for handling unexpected and uncaught {@link Throwable}s thrown by futures run on the
    * pool.
    */
-  public enum UncaughtThrowableStrategy {
+  public interface UncaughtThrowableStrategy {
     /**
      * Silently catches and ignores the uncaught {@link Throwable}s.
      */
-    IGNORE,
+    UncaughtThrowableStrategy IGNORE = new UncaughtThrowableStrategy() {
+      @Override
+      public void handle(Throwable t) {
+        //ignore
+      }
+    };
     /**
      * Logs the uncaught {@link Throwable}s using {@link #TAG} and {@link Log}.
      */
-    LOG {
+    UncaughtThrowableStrategy LOG = new UncaughtThrowableStrategy() {
       @Override
-      protected void handle(Throwable t) {
+      public void handle(Throwable t) {
         if (t != null && Log.isLoggable(TAG, Log.ERROR)) {
           Log.e(TAG, "Request threw uncaught throwable", t);
         }
       }
-    },
+    };
     /**
      * Rethrows the uncaught {@link Throwable}s to crash the app.
      */
-    THROW {
+    UncaughtThrowableStrategy THROW = new UncaughtThrowableStrategy() {
       @Override
-      protected void handle(Throwable t) {
-        super.handle(t);
+      public void handle(Throwable t) {
         if (t != null) {
           throw new RuntimeException("Request threw uncaught throwable", t);
         }
@@ -304,11 +345,9 @@ protected void handle(Throwable t) {
     };
 
     /** The default strategy, currently {@link #LOG}. */
-    public static final UncaughtThrowableStrategy DEFAULT = LOG;
+    UncaughtThrowableStrategy DEFAULT = LOG;
 
-    protected void handle(Throwable t) {
-      // Ignore.
-    }
+    void handle(Throwable t);
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
index 5ca0d0fb0..c5caa3cc7 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
@@ -30,6 +30,7 @@ public BitmapPreFiller(MemoryCache memoryCache, BitmapPool bitmapPool,
     this.defaultFormat = defaultFormat;
   }
 
+  @SuppressWarnings("deprecation")
   public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
     if (current != null) {
       current.cancel();
diff --git a/library/src/main/java/com/bumptech/glide/load/model/Model.java b/library/src/main/java/com/bumptech/glide/load/model/Model.java
new file mode 100644
index 000000000..616b9f390
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/model/Model.java
@@ -0,0 +1,28 @@
+package com.bumptech.glide.load.model;
+
+/**
+ * An optional interface that models can implement to enhance control over Glide behaviors.
+ */
+public interface Model {
+
+    /**
+     * Returns {@code true} if this model produces the same image using the same mechanism
+     * (server, authentication, source etc) as the given model.
+     * <p>
+     * Models must also implement {@link #equals(Object other)} and {@link #hashCode()}
+     * to ensure that caching functions correctly.
+     * If this object returns {@code true} from this method for a given Model,
+     * it must also be equal to and have the same hash code as the given model.
+     * <p>
+     * However, this model may be equal to and have the same hash code as a given model
+     * but still return {@code false} from this method.
+     * This method optionally allows you to differentiate between Models that load the same image
+     * via multiple different means.
+     * For example one Model might load the image from server A and another model might load
+     * the same image from server B.
+     * The models must be equal to each other with the same hash code because they load
+     * the same image. However two requests made with the different models are not exactly the
+     * same because the way the image is loaded will differ.
+     */
+    boolean isEquivalentTo(Object other);
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 243b76752..963348f9d 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -10,6 +10,7 @@
 import android.util.Log;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.ImageHeaderParser;
+import com.bumptech.glide.load.ImageHeaderParser.ImageType;
 import com.bumptech.glide.load.ImageHeaderParserUtils;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
@@ -19,6 +20,7 @@
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.SampleSizeRounding;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.util.LogTime;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
 import java.io.IOException;
@@ -117,9 +119,12 @@ public void onDecodeComplete(BitmapPool bitmapPool, Bitmap downsampled) throws I
           )
       );
   private static final Queue<BitmapFactory.Options> OPTIONS_QUEUE = Util.createQueue(0);
-  // 5MB. This is the max image header size we can handle, we preallocate a much smaller buffer
+  // 10MB. This is the max image header size we can handle, we preallocate a much smaller buffer
   // but will resize up to this amount if necessary.
-  private static final int MARK_POSITION = 5 * 1024 * 1024;
+  private static final int MARK_POSITION = 10 * 1024 * 1024;
+  // Defines the level of precision we get when using inDensity/inTargetDensity to calculate an
+  // arbitrary float scale factor.
+  private static final int DENSITY_PRECISION_MULTIPLIER = 1000000000;
 
   private final BitmapPool bitmapPool;
   private final DisplayMetrics displayMetrics;
@@ -181,7 +186,7 @@ public boolean handles(ByteBuffer byteBuffer) {
    * @return A new bitmap containing the image from the given InputStream, or recycle if recycle is
    * not null.
    */
-  @SuppressWarnings("resource")
+  @SuppressWarnings({"resource", "deprecation"})
   public Resource<Bitmap> decode(InputStream is, int requestedWidth, int requestedHeight,
       Options options, DecodeCallbacks callbacks) throws IOException {
     Preconditions.checkArgument(is.markSupported(), "You must provide an InputStream that supports"
@@ -216,12 +221,21 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
       DecodeFormat decodeFormat, boolean isHardwareConfigAllowed, int requestedWidth,
       int requestedHeight, boolean fixBitmapToRequestedDimensions,
       DecodeCallbacks callbacks) throws IOException {
+    long startTime = LogTime.getLogTime();
 
     int[] sourceDimensions = getDimensions(is, options, callbacks, bitmapPool);
     int sourceWidth = sourceDimensions[0];
     int sourceHeight = sourceDimensions[1];
     String sourceMimeType = options.outMimeType;
 
+    // If we failed to obtain the image dimensions, we may end up with an incorrectly sized Bitmap,
+    // so we want to use a mutable Bitmap type. One way this can happen is if the image header is so
+    // large (10mb+) that our attempt to use inJustDecodeBounds fails and we're forced to decode the
+    // full size image.
+    if (sourceWidth == -1 || sourceHeight == -1) {
+      isHardwareConfigAllowed = false;
+    }
+
     int orientation = ImageHeaderParserUtils.getOrientation(parsers, is, byteArrayPool);
     int degreesToRotate = TransformationUtils.getExifOrientationDegrees(orientation);
     boolean isExifOrientationRequired = TransformationUtils.isExifOrientationRequired(orientation);
@@ -229,8 +243,20 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
     int targetWidth = requestedWidth == Target.SIZE_ORIGINAL ? sourceWidth : requestedWidth;
     int targetHeight = requestedHeight == Target.SIZE_ORIGINAL ? sourceHeight : requestedHeight;
 
-    calculateScaling(downsampleStrategy, degreesToRotate, sourceWidth, sourceHeight, targetWidth,
-        targetHeight, options);
+    ImageType imageType = ImageHeaderParserUtils.getType(parsers, is, byteArrayPool);
+
+    calculateScaling(
+        imageType,
+        is,
+        callbacks,
+        bitmapPool,
+        downsampleStrategy,
+        degreesToRotate,
+        sourceWidth,
+        sourceHeight,
+        targetWidth,
+        targetHeight,
+        options);
     calculateConfig(
         is,
         decodeFormat,
@@ -242,8 +268,7 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
 
     boolean isKitKatOrGreater = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
     // Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding.
-    if ((options.inSampleSize == 1 || isKitKatOrGreater)
-        && shouldUsePool(is)) {
+    if ((options.inSampleSize == 1 || isKitKatOrGreater) && shouldUsePool(imageType)) {
       int expectedWidth;
       int expectedHeight;
       if (fixBitmapToRequestedDimensions && isKitKatOrGreater) {
@@ -278,7 +303,7 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
 
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       logDecode(sourceWidth, sourceHeight, sourceMimeType, options, downsampled,
-          requestedWidth, requestedHeight);
+          requestedWidth, requestedHeight, startTime);
     }
 
     Bitmap rotated = null;
@@ -297,10 +322,18 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
   }
 
   // Visible for testing.
-  static void calculateScaling(DownsampleStrategy downsampleStrategy,
+  static void calculateScaling(
+      ImageType imageType,
+      InputStream is,
+      DecodeCallbacks decodeCallbacks,
+      BitmapPool bitmapPool,
+      DownsampleStrategy downsampleStrategy,
       int degreesToRotate,
-      int sourceWidth, int sourceHeight, int targetWidth, int targetHeight,
-      BitmapFactory.Options options) {
+      int sourceWidth,
+      int sourceHeight,
+      int targetWidth,
+      int targetHeight,
+      BitmapFactory.Options options) throws IOException {
     // We can't downsample source content if we can't determine its dimensions.
     if (sourceWidth <= 0 || sourceHeight <= 0) {
       return;
@@ -321,7 +354,9 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy,
 
     if (exactScaleFactor <= 0f) {
       throw new IllegalArgumentException("Cannot scale with factor: " + exactScaleFactor
-          + " from: " + downsampleStrategy);
+          + " from: " + downsampleStrategy
+          + ", source: [" + sourceWidth + "x" + sourceHeight + "]"
+          + ", target: [" + targetWidth + "x" + targetHeight + "]");
     }
     SampleSizeRounding rounding = downsampleStrategy.getSampleSizeRounding(sourceWidth,
         sourceHeight, targetWidth, targetHeight);
@@ -329,8 +364,8 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy,
       throw new IllegalArgumentException("Cannot round with null rounding");
     }
 
-    int outWidth = (int) (exactScaleFactor * sourceWidth + 0.5f);
-    int outHeight = (int) (exactScaleFactor * sourceHeight + 0.5f);
+    int outWidth = round(exactScaleFactor * sourceWidth);
+    int outHeight = round(exactScaleFactor * sourceHeight);
 
     int widthScaleFactor = sourceWidth / outWidth;
     int heightScaleFactor = sourceHeight / outHeight;
@@ -352,14 +387,61 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy,
       }
     }
 
-    float adjustedScaleFactor = powerOfTwoSampleSize * exactScaleFactor;
-
+    // Here we mimic framework logic for determining how inSampleSize division is rounded on various
+    // versions of Android. The logic here has been tested on emulators for Android versions 15-26.
+    // PNG - Always uses floor
+    // JPEG - Always uses ceiling
+    // Webp - Prior to N, always uses floor. At and after N, always uses round.
     options.inSampleSize = powerOfTwoSampleSize;
+    int powerOfTwoWidth;
+    int powerOfTwoHeight;
+    if (imageType == ImageType.JPEG) {
+      // libjpegturbo can downsample up to a sample size of 8. libjpegturbo uses ceiling to round.
+      // After libjpegturbo's native rounding, skia does a secondary scale using floor
+      // (integer division). Here we replicate that logic.
+      int nativeScaling = Math.min(powerOfTwoSampleSize, 8);
+      powerOfTwoWidth = (int) Math.ceil(sourceWidth / (float) nativeScaling);
+      powerOfTwoHeight = (int) Math.ceil(sourceHeight / (float) nativeScaling);
+      int secondaryScaling = powerOfTwoSampleSize / 8;
+      if (secondaryScaling > 0) {
+        powerOfTwoWidth = powerOfTwoWidth / secondaryScaling;
+        powerOfTwoHeight = powerOfTwoHeight / secondaryScaling;
+      }
+    } else if (imageType == ImageType.PNG || imageType == ImageType.PNG_A) {
+      powerOfTwoWidth = (int) Math.floor(sourceWidth / (float) powerOfTwoSampleSize);
+      powerOfTwoHeight = (int) Math.floor(sourceHeight / (float) powerOfTwoSampleSize);
+    } else if (imageType == ImageType.WEBP || imageType == ImageType.WEBP_A) {
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+        powerOfTwoWidth = Math.round(sourceWidth / (float) powerOfTwoSampleSize);
+        powerOfTwoHeight = Math.round(sourceHeight / (float) powerOfTwoSampleSize);
+      } else {
+        powerOfTwoWidth = (int) Math.floor(sourceWidth / (float) powerOfTwoSampleSize);
+        powerOfTwoHeight = (int) Math.floor(sourceHeight / (float) powerOfTwoSampleSize);
+      }
+    } else if (
+        sourceWidth % powerOfTwoSampleSize != 0 || sourceHeight % powerOfTwoSampleSize != 0) {
+      // If we're not confident the image is in one of our types, fall back to checking the
+      // dimensions again. inJustDecodeBounds decodes do obey inSampleSize.
+      int[] dimensions = getDimensions(is, options, decodeCallbacks, bitmapPool);
+      // Power of two downsampling in BitmapFactory uses a variety of random factors to determine
+      // rounding that we can't reliably replicate for all image formats. Use ceiling here to make
+      // sure that we at least provide a Bitmap that's large enough to fit the content we're going
+      // to load.
+      powerOfTwoWidth = dimensions[0];
+      powerOfTwoHeight = dimensions[1];
+    } else {
+      powerOfTwoWidth = sourceWidth / powerOfTwoSampleSize;
+      powerOfTwoHeight = sourceHeight / powerOfTwoSampleSize;
+    }
+
+    double adjustedScaleFactor = downsampleStrategy.getScaleFactor(
+        powerOfTwoWidth, powerOfTwoHeight, targetWidth, targetHeight);
+
     // Density scaling is only supported if inBitmap is null prior to KitKat. Avoid setting
     // densities here so we calculate the final Bitmap size correctly.
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
-      options.inTargetDensity = (int) (1000 * adjustedScaleFactor + 0.5f);
-      options.inDensity = 1000;
+      options.inTargetDensity = adjustTargetDensityForError(adjustedScaleFactor);
+      options.inDensity = DENSITY_PRECISION_MULTIPLIER;
     }
     if (isScaling(options)) {
       options.inScaled = true;
@@ -371,6 +453,7 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy,
       Log.v(TAG, "Calculate scaling"
           + ", source: [" + sourceWidth + "x" + sourceHeight + "]"
           + ", target: [" + targetWidth + "x" + targetHeight + "]"
+          + ", power of two scaled: [" + powerOfTwoWidth + "x" + powerOfTwoHeight + "]"
           + ", exact scale factor: " + exactScaleFactor
           + ", power of 2 sample size: " + powerOfTwoSampleSize
           + ", adjusted scale factor: " + adjustedScaleFactor
@@ -379,26 +462,37 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy,
     }
   }
 
-  private boolean shouldUsePool(InputStream is) throws IOException {
+  /**
+   * BitmapFactory calculates the density scale factor as a float. This introduces some non-trivial
+   * error. This method attempts to account for that error by adjusting the inTargetDensity so that
+   * the final scale factor is as close to our target as possible.
+   */
+  private static int adjustTargetDensityForError(double adjustedScaleFactor) {
+    int targetDensity = round(DENSITY_PRECISION_MULTIPLIER * adjustedScaleFactor);
+    float scaleFactorWithError = targetDensity / (float) DENSITY_PRECISION_MULTIPLIER;
+    double difference = adjustedScaleFactor / scaleFactorWithError;
+    return round(difference * targetDensity);
+  }
+
+  // This is weird, but it matches the logic in a bunch of Android views/framework classes for
+  // rounding.
+  private static int round(double value) {
+    return (int) (value + 0.5d);
+  }
+
+  private boolean shouldUsePool(ImageType imageType) throws IOException {
     // On KitKat+, any bitmap (of a given config) can be used to decode any other bitmap
     // (with the same config).
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
       return true;
     }
 
-    try {
-      ImageHeaderParser.ImageType type = ImageHeaderParserUtils.getType(parsers, is, byteArrayPool);
-      // We cannot reuse bitmaps when decoding images that are not PNG or JPG prior to KitKat.
-      // See: https://groups.google.com/forum/#!msg/android-developers/Mp0MFVFi1Fo/e8ZQ9FGdWdEJ
-      return TYPES_THAT_USE_POOL_PRE_KITKAT.contains(type);
-    } catch (IOException e) {
-      if (Log.isLoggable(TAG, Log.DEBUG)) {
-        Log.d(TAG, "Cannot determine the image type from header", e);
-      }
-    }
-    return false;
+    // We cannot reuse bitmaps when decoding images that are not PNG or JPG prior to KitKat.
+    // See: https://groups.google.com/forum/#!msg/android-developers/Mp0MFVFi1Fo/e8ZQ9FGdWdEJ
+    return TYPES_THAT_USE_POOL_PRE_KITKAT.contains(imageType);
   }
 
+  @SuppressWarnings("deprecation")
   private void calculateConfig(
       InputStream is,
       DecodeFormat format,
@@ -518,7 +612,8 @@ private static boolean isScaling(BitmapFactory.Options options) {
   }
 
   private static void logDecode(int sourceWidth, int sourceHeight, String outMimeType,
-      BitmapFactory.Options options, Bitmap result, int requestedWidth, int requestedHeight) {
+      BitmapFactory.Options options, Bitmap result, int requestedWidth, int requestedHeight,
+      long startTime) {
     Log.v(TAG, "Decoded " + getBitmapString(result)
         + " from [" + sourceWidth + "x" + sourceHeight + "] " + outMimeType
         + " with inBitmap " + getInBitmapString(options)
@@ -526,7 +621,8 @@ private static void logDecode(int sourceWidth, int sourceHeight, String outMimeT
         + ", sample size: " + options.inSampleSize
         + ", density: " + options.inDensity
         + ", target density: " + options.inTargetDensity
-        + ", thread: " + Thread.currentThread().getName());
+        + ", thread: " + Thread.currentThread().getName()
+        + ", duration: " + LogTime.getElapsedMillis(startTime));
   }
 
   private static String getInBitmapString(BitmapFactory.Options options) {
@@ -593,6 +689,7 @@ private static void releaseOptions(BitmapFactory.Options decodeBitmapOptions) {
     }
   }
 
+  @SuppressWarnings("deprecation")
   private static void resetOptions(BitmapFactory.Options decodeBitmapOptions) {
     decodeBitmapOptions.inTempStorage = null;
     decodeBitmapOptions.inDither = false;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
index d873c51e8..fe7c0357d 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
@@ -72,6 +72,7 @@ private HardwareConfigState() {
   }
 
   @TargetApi(Build.VERSION_CODES.O)
+  @SuppressWarnings("deprecation")
   boolean setHardwareConfigIfAllowed(
       int targetWidth,
       int targetHeight,
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
index e17e7500c..c81ad3554 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
@@ -127,11 +127,10 @@ public static Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull Bitmap inBitma
     final float heightPercentage = height / (float) inBitmap.getHeight();
     final float minPercentage = Math.min(widthPercentage, heightPercentage);
 
-    // take the floor of the target width/height, not round. If the matrix
-    // passed into drawBitmap rounds differently, we want to slightly
-    // overdraw, not underdraw, to avoid artifacts from bitmap reuse.
-    final int targetWidth = (int) (minPercentage * inBitmap.getWidth());
-    final int targetHeight = (int) (minPercentage * inBitmap.getHeight());
+    // Round here in case we've decoded exactly the image we want, but take the floor below to
+    // avoid a line of garbage or blank pixels in images.
+    int targetWidth = Math.round(minPercentage * inBitmap.getWidth());
+    int targetHeight = Math.round(minPercentage * inBitmap.getHeight());
 
     if (inBitmap.getWidth() == targetWidth && inBitmap.getHeight() == targetHeight) {
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
@@ -140,6 +139,12 @@ public static Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull Bitmap inBitma
       return inBitmap;
     }
 
+    // Take the floor of the target width/height, not round. If the matrix
+    // passed into drawBitmap rounds differently, we want to slightly
+    // overdraw, not underdraw, to avoid artifacts from bitmap reuse.
+    targetWidth = (int) (minPercentage * inBitmap.getWidth());
+    targetHeight = (int) (minPercentage * inBitmap.getHeight());
+
     Bitmap.Config config = getSafeConfig(inBitmap);
     Bitmap toReuse = pool.get(targetWidth, targetHeight, config);
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
index 98d9a0e59..7be917bf2 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
@@ -101,16 +101,10 @@ public VideoBitmapDecoder(BitmapPool bitmapPool) {
 
   @Override
   public boolean handles(ParcelFileDescriptor data, Options options) {
-    MediaMetadataRetriever retriever = factory.build();
-    try {
-      retriever.setDataSource(data.getFileDescriptor());
-      return true;
-    } catch (RuntimeException e) {
-      // Throws a generic runtime exception when given invalid data.
-      return false;
-    } finally {
-      retriever.release();
-    }
+    // Calling setDataSource is expensive so avoid doing so unless we're actually called.
+    // For non-videos this isn't any cheaper, but for videos it safes the redundant call and
+    // 50-100ms.
+    return true;
   }
 
   @Override
@@ -134,6 +128,9 @@ public boolean handles(ParcelFileDescriptor data, Options options) {
       } else {
         result = mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);
       }
+    } catch (RuntimeException e) {
+      // MediaMetadataRetriever APIs throw generic runtime exceptions when given invalid data.
+      throw new IOException(e);
     } finally {
       mediaMetadataRetriever.release();
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
index 9ad656df5..9c51ba3ed 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
@@ -19,14 +19,13 @@
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.SimpleTarget;
 import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.signature.ObjectKey;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.nio.ByteBuffer;
-import java.security.MessageDigest;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.UUID;
 
 class GifFrameLoader {
   private final GifDecoder gifDecoder;
@@ -206,7 +205,7 @@ private void loadNextFrame() {
 
     gifDecoder.advance();
     next = new DelayTarget(handler, gifDecoder.getCurrentFrameIndex(), targetTime);
-    requestBuilder.clone().apply(signatureOf(new FrameSignature())).load(gifDecoder).into(next);
+    requestBuilder.clone().apply(signatureOf(getFrameSignature())).load(gifDecoder).into(next);
   }
 
   private void recycleFirstFrame() {
@@ -303,36 +302,9 @@ public void onResourceReady(Bitmap resource, Transition<? super Bitmap> transiti
                 .override(width, height));
   }
 
-  // Visible for testing.
-  static class FrameSignature implements Key {
-    private final UUID uuid;
-
-    public FrameSignature() {
-      this(UUID.randomUUID());
-    }
-
-    // VisibleForTesting.
-    FrameSignature(UUID uuid) {
-      this.uuid = uuid;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-      if (o instanceof FrameSignature) {
-        FrameSignature other = (FrameSignature) o;
-        return other.uuid.equals(uuid);
-      }
-      return false;
-    }
-
-    @Override
-    public int hashCode() {
-      return uuid.hashCode();
-    }
-
-    @Override
-    public void updateDiskCacheKey(MessageDigest messageDigest) {
-      throw new UnsupportedOperationException("Not implemented");
-    }
+  static Key getFrameSignature() {
+    // Some devices seem to have crypto bugs that throw exceptions when you create a new UUID.
+    // See #1510.
+    return new ObjectKey(Math.random());
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
index 5e8419a7c..2b09adb40 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoder.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.resource.transcode;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bytes.BytesResource;
 import java.io.ByteArrayOutputStream;
@@ -25,7 +26,7 @@ public BitmapBytesTranscoder(Bitmap.CompressFormat compressFormat, int quality)
   }
 
   @Override
-  public Resource<byte[]> transcode(Resource<Bitmap> toTranscode) {
+  public Resource<byte[]> transcode(Resource<Bitmap> toTranscode, Options options) {
     ByteArrayOutputStream os = new ByteArrayOutputStream();
     toTranscode.get().compress(compressFormat, quality, os);
     toTranscode.recycle();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
index 9fbbd4c05..03642bbe4 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoder.java
@@ -5,6 +5,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.bitmap.LazyBitmapDrawableResource;
@@ -28,7 +29,7 @@ public BitmapDrawableTranscoder(Resources resources, BitmapPool bitmapPool) {
   }
 
   @Override
-  public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode) {
+  public Resource<BitmapDrawable> transcode(Resource<Bitmap> toTranscode, Options options) {
     return LazyBitmapDrawableResource.obtain(resources, bitmapPool, toTranscode.get());
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
index 94ff7864d..0bc3c12b3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.bytes.BytesResource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -13,7 +14,7 @@
  */
 public class GifDrawableBytesTranscoder implements ResourceTranscoder<GifDrawable, byte[]> {
   @Override
-  public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode) {
+  public Resource<byte[]> transcode(Resource<GifDrawable> toTranscode, Options options) {
     GifDrawable gifData = toTranscode.get();
     ByteBuffer byteBuffer = gifData.getBuffer();
     return new BytesResource(ByteBufferUtil.toBytes(byteBuffer));
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
index ad1c55c6e..e84bd6b00 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -15,5 +16,5 @@
    *
    * @param toTranscode The resource to transcode.
    */
-  Resource<R> transcode(Resource<Z> toTranscode);
+  Resource<R> transcode(Resource<Z> toTranscode, Options options);
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
index 966e11ecf..0fd6d0964 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/UnitTranscoder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -16,7 +17,7 @@
   }
 
   @Override
-  public Resource<Z> transcode(Resource<Z> toTranscode) {
+  public Resource<Z> transcode(Resource<Z> toTranscode, Options options) {
     return toTranscode;
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index c799bac07..44dfb5979 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -159,6 +159,7 @@ private void unregisterFragmentWithRoot() {
     }
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void onAttach(Activity activity) {
     super.onAttach(activity);
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index 09cc608fe..81c3749fb 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -42,7 +42,6 @@
   // Hacks based on the implementation of FragmentManagerImpl in the non-support libraries that
   // allow us to iterate over and retrieve all active Fragments in a FragmentManager.
   private static final String FRAGMENT_INDEX_KEY = "key";
-  private static final String FRAGMENT_MANAGER_GET_FRAGMENT_KEY = "i";
 
   /**
    * The top application level RequestManager.
@@ -163,12 +162,12 @@ public RequestManager get(View view) {
     }
 
     // Support Fragments.
+    // Although the user might have non-support Fragments attached to FragmentActivity, searching
+    // for non-support Fragments is so expensive pre O and that should be rare enough that we
+    // prefer to just fall back to the Activity directly.
     if (activity instanceof FragmentActivity) {
       Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);
-      if (fragment == null) {
-        return get(activity);
-      }
-      return get(fragment);
+      return fragment != null ? get(fragment) : get(activity);
     }
 
     // Standard Fragments.
@@ -245,14 +244,29 @@ private Fragment findSupportFragment(View target, FragmentActivity activity) {
 
   // TODO: Consider using an accessor class in the support library package to more directly retrieve
   // non-support Fragments.
+  @TargetApi(Build.VERSION_CODES.O)
   private void findAllFragmentsWithViews(
       android.app.FragmentManager fragmentManager, ArrayMap<View, android.app.Fragment> result) {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+      for (android.app.Fragment fragment : fragmentManager.getFragments()) {
+        if (fragment.getView() != null) {
+          result.put(fragment.getView(), fragment);
+          findAllFragmentsWithViews(fragment.getChildFragmentManager(), result);
+        }
+      }
+    } else {
+      findAllFragmentsWithViewsPreO(fragmentManager, result);
+    }
+  }
+
+  private void findAllFragmentsWithViewsPreO(
+      android.app.FragmentManager fragmentManager, ArrayMap<View, android.app.Fragment> result) {
     int index = 0;
     while (true) {
       tempBundle.putInt(FRAGMENT_INDEX_KEY, index++);
       android.app.Fragment fragment = null;
       try {
-        fragment = fragmentManager.getFragment(tempBundle, FRAGMENT_MANAGER_GET_FRAGMENT_KEY);
+        fragment = fragmentManager.getFragment(tempBundle, FRAGMENT_INDEX_KEY);
       } catch (Exception e) {
         // This generates log spam from FragmentManager anyway.
       }
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
index 877114e90..b7e95fd40 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
@@ -3,7 +3,9 @@
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Contains an ordered list of {@link ResourceDecoder}s capable of decoding arbitrary data types
@@ -11,15 +13,35 @@
  */
 @SuppressWarnings("rawtypes")
 public class ResourceDecoderRegistry {
-  private final List<Entry<?, ?>> decoders = new ArrayList<>();
+  private final List<String> bucketPriorityList = new ArrayList<>();
+  private final Map<String, List<Entry<?, ?>>> decoders = new HashMap<>();
+
+  public synchronized void setBucketPriorityList(List<String> buckets) {
+    List<String> previousBuckets = new ArrayList<>(bucketPriorityList);
+    bucketPriorityList.clear();
+    bucketPriorityList.addAll(buckets);
+    for (String previousBucket : previousBuckets) {
+      if (!buckets.contains(previousBucket)) {
+        // Keep any buckets from the previous list that aren't included here, but but them at the
+        // end.
+        bucketPriorityList.add(previousBucket);
+      }
+    }
+  }
 
   @SuppressWarnings("unchecked")
   public synchronized <T, R> List<ResourceDecoder<T, R>> getDecoders(Class<T> dataClass,
       Class<R> resourceClass) {
     List<ResourceDecoder<T, R>> result = new ArrayList<>();
-    for (Entry<?, ?> entry : decoders) {
-      if (entry.handles(dataClass, resourceClass)) {
-        result.add((ResourceDecoder<T, R>) entry.decoder);
+    for (String bucket : bucketPriorityList) {
+      List<Entry<?, ?>> entries = decoders.get(bucket);
+      if (entries == null) {
+        continue;
+      }
+      for (Entry<?, ?> entry : entries) {
+        if (entry.handles(dataClass, resourceClass)) {
+          result.add((ResourceDecoder<T, R>) entry.decoder);
+        }
       }
     }
     // TODO: cache result list.
@@ -31,22 +53,41 @@
   public synchronized <T, R> List<Class<R>> getResourceClasses(Class<T> dataClass,
       Class<R> resourceClass) {
     List<Class<R>> result = new ArrayList<>();
-    for (Entry<?, ?> entry : decoders) {
-      if (entry.handles(dataClass, resourceClass)) {
-        result.add((Class<R>) entry.resourceClass);
+    for (String bucket : bucketPriorityList) {
+      List<Entry<?, ?>> entries = decoders.get(bucket);
+      if (entries == null) {
+        continue;
+      }
+      for (Entry<?, ?> entry : entries) {
+        if (entry.handles(dataClass, resourceClass)) {
+          result.add((Class<R>) entry.resourceClass);
+        }
       }
     }
     return result;
   }
 
-  public synchronized <T, R> void append(ResourceDecoder<T, R> decoder, Class<T> dataClass,
-      Class<R> resourceClass) {
-    decoders.add(new Entry<>(dataClass, resourceClass, decoder));
+  public synchronized <T, R> void append(
+      String bucket, ResourceDecoder<T, R> decoder, Class<T> dataClass, Class<R> resourceClass) {
+    getOrAddEntryList(bucket).add(new Entry<>(dataClass, resourceClass, decoder));
   }
 
-  public synchronized <T, R> void prepend(ResourceDecoder<T, R> decoder, Class<T> dataClass,
-      Class<R> resourceClass) {
-    decoders.add(0, new Entry<>(dataClass, resourceClass, decoder));
+  public synchronized <T, R> void prepend(
+      String bucket, ResourceDecoder<T, R> decoder, Class<T> dataClass, Class<R> resourceClass) {
+    getOrAddEntryList(bucket).add(0, new Entry<>(dataClass, resourceClass, decoder));
+  }
+
+  private synchronized List<Entry<?, ?>> getOrAddEntryList(String bucket) {
+    if (!bucketPriorityList.contains(bucket)) {
+      // Add this unspecified bucket as a low priority bucket.
+      bucketPriorityList.add(bucket);
+    }
+    List<Entry<?, ?>> entries = decoders.get(bucket);
+    if (entries == null) {
+      entries = new ArrayList<>();
+      decoders.put(bucket, entries);
+    }
+    return entries;
   }
 
   private static class Entry<T, R> {
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
index fa58e81e8..a0e9e32d2 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
@@ -1,10 +1,8 @@
 package com.bumptech.glide.provider;
 
 import android.support.annotation.Nullable;
-
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.util.Synthetic;
-
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index a0cc26314..a5cbcc053 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.Priority;
@@ -117,13 +118,15 @@
    * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions sizeMultiplierOf(float sizeMultiplier) {
     return new RequestOptions().sizeMultiplier(sizeMultiplier);
   }
 
   /**
-   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
+   * Returns a {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.
    */
+  @CheckResult
   public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {
     return new RequestOptions().diskCacheStrategy(diskCacheStrategy);
   }
@@ -132,6 +135,7 @@ public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy disk
    * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions priorityOf(@NonNull Priority priority) {
     return new RequestOptions().priority(priority);
   }
@@ -139,6 +143,7 @@ public static RequestOptions priorityOf(@NonNull Priority priority) {
   /**
    * Returns a {@link RequestOptions} object with {@link #placeholder(Drawable)} set.
    */
+  @CheckResult
   public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
     return new RequestOptions().placeholder(placeholder);
   }
@@ -146,6 +151,7 @@ public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
   /**
    * Returns a {@link RequestOptions} object with {@link #placeholder(int)} set.
    */
+  @CheckResult
   public static RequestOptions placeholderOf(int placeholderId) {
     return new RequestOptions().placeholder(placeholderId);
   }
@@ -153,6 +159,7 @@ public static RequestOptions placeholderOf(int placeholderId) {
   /**
    * Returns a {@link RequestOptions} object with {@link #error(Drawable)} set.
    */
+  @CheckResult
   public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
     return new RequestOptions().error(errorDrawable);
   }
@@ -160,6 +167,7 @@ public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
   /**
    * Returns a {@link RequestOptions} object with {@link #error(int)}} set.
    */
+  @CheckResult
   public static RequestOptions errorOf(int errorId) {
     return new RequestOptions().error(errorId);
   }
@@ -167,6 +175,7 @@ public static RequestOptions errorOf(int errorId) {
   /**
    * Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set.
    */
+  @CheckResult
   public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     if (skipMemoryCache) {
       if (skipMemoryCacheTrueOptions == null) {
@@ -185,6 +194,7 @@ public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * Returns a {@link RequestOptions} object with {@link #override(int, int)}} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions overrideOf(int width, int height) {
     return new RequestOptions().override(width, height);
   }
@@ -194,6 +204,7 @@ public static RequestOptions overrideOf(int width, int height) {
    * height are the given size.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions overrideOf(int size) {
     return overrideOf(size, size);
   }
@@ -201,6 +212,7 @@ public static RequestOptions overrideOf(int size) {
   /**
    * Returns a {@link RequestOptions} object with {@link #signature} set.
    */
+  @CheckResult
   public static RequestOptions signatureOf(@NonNull Key signature) {
     return new RequestOptions().signature(signature);
   }
@@ -208,6 +220,7 @@ public static RequestOptions signatureOf(@NonNull Key signature) {
   /**
    * Returns a {@link RequestOptions} object with {@link #fitCenter()} set.
    */
+  @CheckResult
   public static RequestOptions fitCenterTransform() {
     if (fitCenterOptions == null) {
       fitCenterOptions = new RequestOptions()
@@ -221,6 +234,7 @@ public static RequestOptions fitCenterTransform() {
    * Returns a {@link RequestOptions} object with {@link #centerInside()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions centerInsideTransform() {
     if (centerInsideOptions == null) {
       centerInsideOptions = new RequestOptions()
@@ -234,6 +248,7 @@ public static RequestOptions centerInsideTransform() {
    * Returns a {@link RequestOptions} object with {@link #centerCrop()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions centerCropTransform() {
     if (centerCropOptions == null) {
       centerCropOptions = new RequestOptions()
@@ -247,6 +262,7 @@ public static RequestOptions centerCropTransform() {
    * Returns a {@link RequestOptions} object with {@link RequestOptions#circleCrop()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions circleCropTransform() {
     if (circleCropOptions == null) {
       circleCropOptions = new RequestOptions()
@@ -260,6 +276,7 @@ public static RequestOptions circleCropTransform() {
    * Returns a {@link RequestOptions} object with {@link #transform(Transformation)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
     return new RequestOptions().transform(transformation);
   }
@@ -268,6 +285,7 @@ public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> tra
    * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
    */
   @SuppressWarnings("WeakerAccess")
+  @CheckResult
   public static RequestOptions noTransformation() {
     if (noTransformOptions == null) {
       noTransformOptions = new RequestOptions()
@@ -281,6 +299,7 @@ public static RequestOptions noTransformation() {
    * Returns a {@link RequestOptions} object with the given {@link Option} set via
    * {@link #set(Option, Object)}.
    */
+  @CheckResult
   public static <T> RequestOptions option(@NonNull Option<T> option, @NonNull T value) {
     return new RequestOptions().set(option, value);
   }
@@ -288,6 +307,7 @@ public static RequestOptions noTransformation() {
   /**
    * Returns a {@link RequestOptions} object with {@link #decode(Class)} set.
    */
+  @CheckResult
   public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
     return new RequestOptions().decode(resourceClass);
   }
@@ -296,6 +316,7 @@ public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
    * Returns a {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions formatOf(@NonNull DecodeFormat format) {
     return new RequestOptions().format(format);
   }
@@ -304,6 +325,7 @@ public static RequestOptions formatOf(@NonNull DecodeFormat format) {
    * Returns a {@link RequestOptions} object with {@link #frame(long)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions frameOf(long frameTimeMicros) {
     return new RequestOptions().frame(frameTimeMicros);
   }
@@ -312,6 +334,7 @@ public static RequestOptions frameOf(long frameTimeMicros) {
    * Returns a {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
     return new RequestOptions().downsample(strategy);
   }
@@ -319,6 +342,7 @@ public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy)
   /**
    * Returns a {@link RequestOptions} object with {@link #timeout(int)} set.
    */
+  @CheckResult
   public static RequestOptions timeoutOf(int timeout) {
     return new RequestOptions().timeout(timeout);
   }
@@ -328,6 +352,7 @@ public static RequestOptions timeoutOf(int timeout) {
    * #encodeQuality(int)} called with the given quality.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions encodeQualityOf(int quality) {
     return new RequestOptions().encodeQuality(quality);
   }
@@ -337,6 +362,7 @@ public static RequestOptions encodeQualityOf(int quality) {
    * #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
     return new RequestOptions().encodeFormat(format);
   }
@@ -346,6 +372,7 @@ public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat forma
    * called.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions noAnimation() {
     if (noAnimationOptions == null) {
       noAnimationOptions = new RequestOptions()
@@ -369,6 +396,7 @@ private static boolean isSet(int fields, int flag) {
    *                       loading the resource.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions sizeMultiplier(float sizeMultiplier) {
     if (isAutoCloneEnabled) {
       return clone().sizeMultiplier(sizeMultiplier);
@@ -383,6 +411,7 @@ public RequestOptions sizeMultiplier(float sizeMultiplier) {
     return selfOrThrowIfLocked();
   }
 
+  @CheckResult
   public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (isAutoCloneEnabled) {
       return clone().useUnlimitedSourceGeneratorsPool(flag);
@@ -397,6 +426,7 @@ public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
   /**
    * If set to true, will only load an item if found in the cache, and will not fetch from source.
    */
+  @CheckResult
   public RequestOptions onlyRetrieveFromCache(boolean flag) {
     if (isAutoCloneEnabled) {
       return clone().onlyRetrieveFromCache(flag);
@@ -422,6 +452,7 @@ public RequestOptions onlyRetrieveFromCache(boolean flag) {
    * @param strategy The strategy to use.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (isAutoCloneEnabled) {
       return clone().diskCacheStrategy(strategy);
@@ -438,6 +469,7 @@ public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
    * @param priority A priority.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions priority(@NonNull Priority priority) {
     if (isAutoCloneEnabled) {
       return clone().priority(priority);
@@ -455,6 +487,7 @@ public RequestOptions priority(@NonNull Priority priority) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions placeholder(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
       return clone().placeholder(drawable);
@@ -473,6 +506,7 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a placeholder
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions placeholder(int resourceId) {
     if (isAutoCloneEnabled) {
       return clone().placeholder(resourceId);
@@ -497,6 +531,7 @@ public RequestOptions placeholder(int resourceId) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions fallback(Drawable drawable) {
     if (isAutoCloneEnabled) {
       return clone().fallback(drawable);
@@ -521,6 +556,7 @@ public RequestOptions fallback(Drawable drawable) {
    * @param resourceId The id of the resource to use as a fallback.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions fallback(int resourceId) {
     if (isAutoCloneEnabled) {
       return clone().fallback(resourceId);
@@ -538,6 +574,7 @@ public RequestOptions fallback(int resourceId) {
    * @param drawable The drawable to display.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions error(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
       return clone().error(drawable);
@@ -555,6 +592,7 @@ public RequestOptions error(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a placeholder.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions error(int resourceId) {
     if (isAutoCloneEnabled) {
       return clone().error(resourceId);
@@ -573,6 +611,7 @@ public RequestOptions error(int resourceId) {
    * @param theme The theme to use when loading Drawables.
    * @return this request builder.
    */
+  @CheckResult
   public RequestOptions theme(Resources.Theme theme) {
     if (isAutoCloneEnabled) {
       return clone().theme(theme);
@@ -593,6 +632,7 @@ public RequestOptions theme(Resources.Theme theme) {
    * @param skip True to allow the resource to skip the memory cache.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions skipMemoryCache(boolean skip) {
     if (isAutoCloneEnabled) {
       return clone().skipMemoryCache(true);
@@ -613,6 +653,7 @@ public RequestOptions skipMemoryCache(boolean skip) {
    * @param height The height in pixels to use to load the resource.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions override(int width, int height) {
     if (isAutoCloneEnabled) {
       return clone().override(width, height);
@@ -633,6 +674,7 @@ public RequestOptions override(int width, int height) {
    * @param size The width and height to use.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions override(int size) {
     return override(size, size);
   }
@@ -648,6 +690,7 @@ public RequestOptions override(int size) {
    * @return This request builder.
    * @see com.bumptech.glide.signature.ObjectKey
    */
+  @CheckResult
   public RequestOptions signature(@NonNull Key signature) {
     if (isAutoCloneEnabled) {
       return clone().signature(signature);
@@ -670,6 +713,7 @@ public RequestOptions signature(@NonNull Key signature) {
    * locked. </p>
    */
   @SuppressWarnings("unchecked")
+  @CheckResult
   @Override
   public RequestOptions clone() {
     try {
@@ -686,6 +730,7 @@ public RequestOptions clone() {
     }
   }
 
+  @CheckResult
   public <T> RequestOptions set(@NonNull Option<T> option, @NonNull T value) {
     if (isAutoCloneEnabled) {
       return clone().set(option, value);
@@ -697,6 +742,7 @@ public RequestOptions clone() {
     return selfOrThrowIfLocked();
   }
 
+  @CheckResult
   public RequestOptions decode(@NonNull Class<?> resourceClass) {
     if (isAutoCloneEnabled) {
       return clone().decode(resourceClass);
@@ -723,6 +769,7 @@ public final boolean isLocked() {
    * Sets the value for key
    * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
    */
+  @CheckResult
   public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
   }
@@ -731,6 +778,7 @@ public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
    * Sets the value for key
    * {@link BitmapEncoder#COMPRESSION_QUALITY}.
    */
+  @CheckResult
   public RequestOptions encodeQuality(int quality) {
     return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
   }
@@ -745,6 +793,7 @@ public RequestOptions encodeQuality(int quality) {
    * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
    *                        Android framework implementation return a representative frame.
    */
+  @CheckResult
   public RequestOptions frame(long frameTimeMicros) {
     return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);
   }
@@ -764,6 +813,7 @@ public RequestOptions frame(long frameTimeMicros) {
    *
    * @see Downsampler#DECODE_FORMAT
    */
+  @CheckResult
   public RequestOptions format(@NonNull DecodeFormat format) {
     return set(Downsampler.DECODE_FORMAT, Preconditions.checkNotNull(format));
   }
@@ -785,6 +835,7 @@ public RequestOptions format(@NonNull DecodeFormat format) {
    * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
    * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
    */
+  @CheckResult
   public RequestOptions disallowHardwareConfig() {
     return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
   }
@@ -796,6 +847,7 @@ public RequestOptions disallowHardwareConfig() {
    * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
    * is replaced or skipped because of your configuration, this option may be ignored.
    */
+  @CheckResult
   public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
     return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));
   }
@@ -811,6 +863,7 @@ public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
    * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
    * @param timeoutMs The read and write timeout in milliseconds.
    */
+  @CheckResult
   public RequestOptions timeout(int timeoutMs) {
     return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
   }
@@ -824,6 +877,7 @@ public RequestOptions timeout(int timeoutMs) {
    * @see #optionalTransform(Class, Transformation)
    * @see #centerCrop()
    */
+  @CheckResult
   public RequestOptions optionalCenterCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
   }
@@ -837,6 +891,7 @@ public RequestOptions optionalCenterCrop() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterCrop()
    */
+  @CheckResult
   public RequestOptions centerCrop() {
     return transform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
   }
@@ -852,6 +907,7 @@ public RequestOptions centerCrop() {
    * @see #optionalTransform(Class, Transformation)
    * @see #fitCenter()
    */
+  @CheckResult
   public RequestOptions optionalFitCenter() {
     return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
   }
@@ -867,6 +923,7 @@ public RequestOptions optionalFitCenter() {
    * @see #transform(Class, Transformation)
    * @see #optionalFitCenter()
    */
+  @CheckResult
   public RequestOptions fitCenter() {
     return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
   }
@@ -881,6 +938,7 @@ public RequestOptions fitCenter() {
    * @see #optionalTransform(Class, Transformation)
    * @see #centerInside()
    */
+  @CheckResult
   public RequestOptions optionalCenterInside() {
     return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
   }
@@ -895,6 +953,7 @@ public RequestOptions optionalCenterInside() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterInside()
    */
+  @CheckResult
   public RequestOptions centerInside() {
     return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
   }
@@ -907,6 +966,7 @@ public RequestOptions centerInside() {
    * @see #optionalTransform(Transformation)
    * @see #circleCrop()
    */
+  @CheckResult
   public RequestOptions optionalCircleCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
   }
@@ -920,12 +980,14 @@ public RequestOptions optionalCircleCrop() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterCrop()
    */
+  @CheckResult
   public RequestOptions circleCrop() {
     return transform(DownsampleStrategy.CENTER_INSIDE, new CircleCrop());
   }
 
   // calling optionalTransform() on the result of clone() requires greater access.
-  @SuppressWarnings("WeakerAccess")
+  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"WeakerAccess", "CheckResult"})
   final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
       Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
@@ -937,7 +999,9 @@ final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
   }
 
   // calling transform() on the result of clone() requires greater access.
-  @SuppressWarnings("WeakerAccess")
+  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"WeakerAccess", "CheckResult"})
+  @CheckResult
   final RequestOptions transform(DownsampleStrategy downsampleStrategy,
       Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
@@ -981,6 +1045,9 @@ private RequestOptions scaleOnlyTransform(
    * @see #optionalTransform(Transformation)
    * @see #optionalTransform(Class, Transformation)
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public RequestOptions transform(@NonNull Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
       return clone().transform(transformation);
@@ -1005,7 +1072,9 @@ public RequestOptions transform(@NonNull Transformation<Bitmap> transformation)
    * @see #optionalTransform(Transformation)
    * @see #optionalTransform(Class, Transformation)
    */
-  @SuppressWarnings("unchecked")
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"unchecked", "varargs", "CheckResult"})
+  @CheckResult
   public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (isAutoCloneEnabled) {
       return clone().transforms(transformations);
@@ -1029,6 +1098,9 @@ public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformati
    * @see #transform(Transformation)
    * @see #transform(Class, Transformation)
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
       return clone().optionalTransform(transformation);
@@ -1036,8 +1108,7 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
 
     optionalTransform(Bitmap.class, transformation);
     // TODO: remove BitmapDrawable decoder and this transformation.
-    optionalTransform(BitmapDrawable.class,
-        new BitmapDrawableTransformation(transformation));
+    optionalTransform(BitmapDrawable.class, new BitmapDrawableTransformation(transformation));
     optionalTransform(GifDrawable.class, new GifDrawableTransformation(transformation));
     return selfOrThrowIfLocked();
   }
@@ -1059,6 +1130,7 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
    * @param resourceClass  The type of resource to transform.
    * @param transformation The {@link Transformation} to apply.
    */
+  @CheckResult
   public <T> RequestOptions optionalTransform(Class<T> resourceClass,
       Transformation<T> transformation) {
     if (isAutoCloneEnabled) {
@@ -1087,6 +1159,9 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
    * @param transformation The {@link Transformation} to apply.
    * @see #optionalTransform(Class, Transformation)
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public <T> RequestOptions transform(
       Class<T> resourceClass, Transformation<T> transformation) {
     if (isAutoCloneEnabled) {
@@ -1104,6 +1179,7 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
    * resource classes and allows unknown resource types to be transformed without throwing an
    * exception.
    */
+  @CheckResult
   public RequestOptions dontTransform() {
     if (isAutoCloneEnabled) {
       return clone().dontTransform();
@@ -1126,6 +1202,9 @@ public RequestOptions dontTransform() {
    * <p> To disable transitions (fades etc) use
    * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public RequestOptions dontAnimate() {
     if (isAutoCloneEnabled) {
       return clone().dontAnimate();
@@ -1136,6 +1215,7 @@ public RequestOptions dontAnimate() {
     return selfOrThrowIfLocked();
   }
 
+  @CheckResult
   public RequestOptions apply(RequestOptions other) {
     if (isAutoCloneEnabled) {
       return clone().apply(other);
@@ -1338,8 +1418,8 @@ public final DiskCacheStrategy getDiskCacheStrategy() {
     return diskCacheStrategy;
   }
 
-  @Nullable
   @SuppressWarnings("WeakerAccess")
+  @Nullable
   public final Drawable getErrorPlaceholder() {
     return errorPlaceholder;
   }
@@ -1354,8 +1434,8 @@ public final int getPlaceholderId() {
     return placeholderId;
   }
 
-  @Nullable
   @SuppressWarnings("WeakerAccess")
+  @Nullable
   public final Drawable getPlaceholderDrawable() {
     return placeholderDrawable;
   }
@@ -1365,8 +1445,8 @@ public final int getFallbackId() {
     return fallbackId;
   }
 
-  @Nullable
   @SuppressWarnings("WeakerAccess")
+  @Nullable
   public final Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 6828e062d..6951e10d6 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -45,6 +45,7 @@
           return new SingleRequest<Object>();
         }
       });
+  private boolean isCallingCallbacks;
 
   private enum Status {
     /**
@@ -182,6 +183,7 @@ public StateVerifier getVerifier() {
 
   @Override
   public void recycle() {
+    assertNotCallingCallbacks();
     glideContext = null;
     model = null;
     transcodeClass = null;
@@ -203,6 +205,7 @@ public void recycle() {
 
   @Override
   public void begin() {
+    assertNotCallingCallbacks();
     stateVerifier.throwIfRecycled();
     startTime = LogTime.getLogTime();
     if (model == null) {
@@ -260,6 +263,7 @@ public void begin() {
    * @see #clear()
    */
   void cancel() {
+    assertNotCallingCallbacks();
     stateVerifier.throwIfRecycled();
     target.removeCallback(this);
     status = Status.CANCELLED;
@@ -269,6 +273,15 @@ void cancel() {
     }
   }
 
+  // Avoids difficult to understand errors like #2413.
+  private void assertNotCallingCallbacks() {
+    if (isCallingCallbacks) {
+      throw new IllegalStateException("You can't start or clear loads in RequestListener or"
+          + " Target callbacks. If you must do so, consider posting your into() or clear() calls"
+          + " to the main thread using a Handler instead.");
+    }
+  }
+
   /**
    * Cancels the current load if it is in progress, clears any resources held onto by the request
    * and replaces the loaded resource if the load completed with the placeholder.
@@ -280,6 +293,7 @@ void cancel() {
   @Override
   public void clear() {
     Util.assertMainThread();
+    assertNotCallingCallbacks();
     if (status == Status.CLEARED) {
       return;
     }
@@ -535,11 +549,16 @@ private void onResourceReady(Resource<R> resource, R result, DataSource dataSour
           + LogTime.getElapsedMillis(startTime) + " ms");
     }
 
-    if (requestListener == null
-        || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {
-      Transition<? super R> animation =
-          animationFactory.build(dataSource, isFirstResource);
-      target.onResourceReady(result, animation);
+    isCallingCallbacks = true;
+    try {
+      if (requestListener == null
+          || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {
+        Transition<? super R> animation =
+            animationFactory.build(dataSource, isFirstResource);
+        target.onResourceReady(result, animation);
+      }
+    } finally {
+      isCallingCallbacks = false;
     }
 
     notifyLoadSuccess();
@@ -565,10 +584,16 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
 
     loadStatus = null;
     status = Status.FAILED;
-    //TODO: what if this is a thumbnail request?
-    if (requestListener == null
-        || !requestListener.onLoadFailed(e, model, target, isFirstReadyResource())) {
-      setErrorPlaceholder();
+
+    isCallingCallbacks = true;
+    try {
+      //TODO: what if this is a thumbnail request?
+      if (requestListener == null
+          || !requestListener.onLoadFailed(e, model, target, isFirstReadyResource())) {
+        setErrorPlaceholder();
+      }
+    } finally {
+      isCallingCallbacks = false;
     }
   }
 
@@ -578,7 +603,7 @@ public boolean isEquivalentTo(Request o) {
       SingleRequest that = (SingleRequest) o;
       return overrideWidth == that.overrideWidth
           && overrideHeight == that.overrideHeight
-          && Util.bothNullOrEqual(model, that.model)
+          && Util.bothModelsNullEquivalentOrEquals(model, that.model)
           && transcodeClass.equals(that.transcodeClass)
           && requestOptions.equals(that.requestOptions)
           && priority == that.priority;
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
index e71d23779..42c701091 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
@@ -12,6 +12,10 @@ public BitmapImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   /**
    * Sets the {@link android.graphics.Bitmap} on the view using {@link
    * android.widget.ImageView#setImageBitmap(android.graphics.Bitmap)}.
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
index c4b247964..46b909ffa 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
@@ -13,6 +13,10 @@ public BitmapThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public BitmapThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected Drawable getDrawable(Bitmap resource) {
     return new BitmapDrawable(view.getResources(), resource);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
index e9ab75e01..58119e4df 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
@@ -13,6 +13,10 @@ public DrawableImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public DrawableImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected void setResource(@Nullable Drawable resource) {
     view.setImageDrawable(resource);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
index 416633f7c..34a99302f 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
@@ -11,6 +11,10 @@ public DrawableThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public DrawableThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected Drawable getDrawable(Drawable resource) {
     return resource;
diff --git a/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java b/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
index f5d978a22..a1f56e1af 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/FixedSizeDrawable.java
@@ -71,6 +71,7 @@ public int getChangingConfigurations() {
     return wrapped.getChangingConfigurations();
   }
 
+  @Deprecated
   @Override
   public void setDither(boolean dither) {
     wrapped.setDither(dither);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
index eb4fa50ab..68a37e401 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
@@ -23,6 +23,10 @@ public ImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public ImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   /**
    * Returns the current {@link android.graphics.drawable.Drawable} being displayed in the view
    * using {@link android.widget.ImageView#getDrawable()}.
diff --git a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
index 7b9f884a9..caab4ac19 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
@@ -1,5 +1,9 @@
 package com.bumptech.glide.request.target;
 
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Looper;
+import android.os.Message;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.transition.Transition;
 
@@ -10,6 +14,17 @@
  * @param <Z> The type of resource that will be loaded into memory.
  */
 public final class PreloadTarget<Z> extends SimpleTarget<Z> {
+  private static final int MESSAGE_CLEAR = 1;
+  private static final Handler HANDLER = new Handler(Looper.getMainLooper(), new Callback() {
+    @Override
+    public boolean handleMessage(Message message) {
+      if (message.what == MESSAGE_CLEAR) {
+        ((PreloadTarget<?>) message.obj).clear();
+        return true;
+      }
+      return false;
+    }
+  });
 
   private final RequestManager requestManager;
 
@@ -31,6 +46,10 @@ private PreloadTarget(RequestManager requestManager, int width, int height) {
 
   @Override
   public void onResourceReady(Z resource, Transition<? super Z> transition) {
+    HANDLER.obtainMessage(MESSAGE_CLEAR, this).sendToTarget();
+  }
+
+  private void clear() {
     requestManager.clear(this);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
index c3d658f9b..0bce1750d 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
@@ -26,6 +26,10 @@ public ThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public ThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected void setResource(@Nullable T resource) {
     ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 335c00000..d2f97dca2 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -1,11 +1,16 @@
 package com.bumptech.glide.request.target;
 
+import android.content.Context;
+import android.graphics.Point;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
+import android.view.Display;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
 import android.view.ViewTreeObserver;
+import android.view.WindowManager;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Synthetic;
@@ -41,9 +46,26 @@
   protected final T view;
   private final SizeDeterminer sizeDeterminer;
 
+  /**
+   * Constructor that defaults {@code waitForLayout} to {@code false}.
+   */
   public ViewTarget(T view) {
+    this(view, false /*waitForLayout*/);
+  }
+
+  /**
+   * @param waitForLayout If set to {@code true}, Glide will always wait for any pending layout pass
+   * before checking for the size a View. If set to {@code false} Glide will only wait for a pending
+   * layout pass if it's unable to resolve the size from layout parameters or an existing View size.
+   * Because setting this parameter to {@code true} forces Glide to wait for the layout pass to
+   * occur before starting the load, setting this parameter to {@code true} can cause flashing in
+   * some cases and should be used sparingly. If layout parameters are set to fixed sizes, they will
+   * still be used instead of the View's dimensions even if this parameter is set to {@code true}.
+   * This parameter is a fallback only.
+   */
+  public ViewTarget(T view, boolean waitForLayout) {
     this.view = Preconditions.checkNotNull(view);
-    sizeDeterminer = new SizeDeterminer(view);
+    sizeDeterminer = new SizeDeterminer(view, waitForLayout);
   }
 
   /**
@@ -164,16 +186,35 @@ public static void setTagId(int tagId) {
       ViewTarget.tagId = tagId;
   }
 
-  private static class SizeDeterminer {
+  @VisibleForTesting
+  static final class SizeDeterminer {
     // Some negative sizes (Target.SIZE_ORIGINAL) are valid, 0 is never valid.
     private static final int PENDING_SIZE = 0;
+    @VisibleForTesting
+    @Nullable
+    static Integer maxDisplayLength;
     private final View view;
+    private final boolean waitForLayout;
     private final List<SizeReadyCallback> cbs = new ArrayList<>();
 
     @Nullable private SizeDeterminerLayoutListener layoutListener;
 
-    SizeDeterminer(View view) {
+    SizeDeterminer(View view, boolean waitForLayout) {
       this.view = view;
+      this.waitForLayout = waitForLayout;
+    }
+
+    // Use the maximum to avoid depending on the device's current orientation.
+    private static int getMaxDisplayLength(Context context) {
+      if (maxDisplayLength == null) {
+        WindowManager windowManager =
+            (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        Display display = windowManager.getDefaultDisplay();
+        Point displayDimensions = new Point();
+        display.getSize(displayDimensions);
+        maxDisplayLength = Math.max(displayDimensions.x, displayDimensions.y);
+      }
+      return maxDisplayLength;
     }
 
     private void notifyCbs(int width, int height) {
@@ -247,44 +288,8 @@ void clearCallbacksAndListener() {
       cbs.clear();
     }
 
-    private boolean isViewStateAndSizeValid(int currentWidth, int currentHeight) {
-      LayoutParams params = view.getLayoutParams();
-
-      int paramWidth;
-      int paramHeight;
-      if (params == null) {
-        paramWidth = 0;
-        paramHeight = 0;
-      } else {
-        paramWidth = params.width;
-        paramHeight = params.height;
-      }
-      return isDimensionValid(paramWidth, currentWidth)
-          && isDimensionValid(paramHeight, currentHeight);
-    }
-
-    private boolean isDimensionValid(int layoutParam, int dimen) {
-      // If the layout parameter is a fixed size and the padding adjusted parameter (dimen in this
-      // case) is valid, we can trust that the size won't change due to a layout pass.
-      if (layoutParam > 0 && dimen > 0) {
-        return true;
-      }
-
-      // SIZE_ORIGINAL is not dependent on a layout pass.
-      if (dimen == Target.SIZE_ORIGINAL) {
-        return true;
-      }
-
-      // TODO: Is this correct? The view's parent could change size after a layout.
-      // We're making an assumption that MATCH_PARENT won't change after it has been set once, so
-      // future layout passes typically won't change it. This probably will break in some cases.
-      if (layoutParam == LayoutParams.MATCH_PARENT && dimen > 0) {
-        return true;
-      }
-
-      // We can trust a non-zero dimension if no layout pass is pending, otherwise we're going to
-      // have to wait for a layout pass.
-      return dimen > 0 && !view.isLayoutRequested();
+    private boolean isViewStateAndSizeValid(int width, int height) {
+      return isDimensionValid(width) && isDimensionValid(height);
     }
 
     private int getTargetHeight() {
@@ -302,20 +307,68 @@ private int getTargetWidth() {
     }
 
     private int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
+      // We consider the View state as valid if the View has non-null layout params and a non-zero
+      // layout params width and height. This is imperfect. We're making an assumption that View
+      // parents will obey their child's layout parameters, which isn't always the case.
+      int adjustedParamSize = paramSize - paddingSize;
+      if (adjustedParamSize > 0) {
+        return adjustedParamSize;
+      }
+
+      // Since we always prefer layout parameters with fixed sizes, even if waitForLayout is true,
+      // we might as well ignore it and just return the layout parameters above if we have them.
+      // Otherwise we should wait for a layout pass before checking the View's dimensions.
+      if (waitForLayout && view.isLayoutRequested()) {
+        return PENDING_SIZE;
+      }
+
+      // We also consider the View state valid if the View has a non-zero width and height. This
+      // means that the View has gone through at least one layout pass. It does not mean the Views
+      // width and height are from the current layout pass. For example, if a View is re-used in
+      // RecyclerView or ListView, this width/height may be from an old position. In some cases
+      // the dimensions of the View at the old position may be different than the dimensions of the
+      // View in the new position because the LayoutManager/ViewParent can arbitrarily decide to
+      // change them. Nevertheless, in most cases this should be a reasonable choice.
       int adjustedViewSize = viewSize - paddingSize;
-      if (paramSize == LayoutParams.WRAP_CONTENT) {
-        return SIZE_ORIGINAL;
-      } else if (paramSize > 0) {
-        return paramSize - paddingSize;
-      } else if (adjustedViewSize > 0) {
+      if (adjustedViewSize > 0) {
         return adjustedViewSize;
-      } else {
-        return PENDING_SIZE;
       }
+
+      // Finally we consider the view valid if the layout parameter size is set to wrap_content.
+      // It's difficult for Glide to figure out what to do here. Although Target.SIZE_ORIGINAL is a
+      // coherent choice, it's extremely dangerous because original images may be much too large to
+      // fit in memory or so large that only a couple can fit in memory, causing OOMs. If users want
+      // the original image, they can always use .override(Target.SIZE_ORIGINAL). Since wrap_content
+      // may never resolve to a real size unless we load something, we aim for a square whose length
+      // is the largest screen size. That way we're loading something and that something has some
+      // hope of being downsampled to a size that the device can support. We also log a warning that
+      // tries to explain what Glide is doing and why some alternatives are preferable.
+      // Since WRAP_CONTENT is sometimes used as a default layout parameter, we always wait for
+      // layout to complete before using this fallback parameter (ConstraintLayout among others).
+      if (!view.isLayoutRequested() && paramSize == LayoutParams.WRAP_CONTENT) {
+        if (Log.isLoggable(TAG, Log.INFO)) {
+          Log.i(TAG, "Glide treats LayoutParams.WRAP_CONTENT as a request for an image the size of"
+              + " this device's screen dimensions. If you want to load the original image and are"
+              + " ok with the corresponding memory cost and OOMs (depending on the input size), use"
+              + " .override(Target.SIZE_ORIGINAL). Otherwise, use LayoutParams.MATCH_PARENT, set"
+              + " layout_width and layout_height to fixed dimension, or use .override() with fixed"
+              + " dimensions.");
+        }
+        return getMaxDisplayLength(view.getContext());
+      }
+
+      // If the layout parameters are < padding, the view size is < padding, or the layout
+      // parameters are set to match_parent or wrap_content and no layout has occurred, we should
+      // wait for layout and repeat.
+      return PENDING_SIZE;
+    }
+
+    private boolean isDimensionValid(int size) {
+      return size > 0 || size == SIZE_ORIGINAL;
     }
 
-    private static class SizeDeterminerLayoutListener implements ViewTreeObserver
-        .OnPreDrawListener {
+    private static final class SizeDeterminerLayoutListener
+        implements ViewTreeObserver.OnPreDrawListener {
       private final WeakReference<SizeDeterminer> sizeDeterminerRef;
 
       SizeDeterminerLayoutListener(SizeDeterminer sizeDeterminer) {
diff --git a/library/src/main/java/com/bumptech/glide/util/LogTime.java b/library/src/main/java/com/bumptech/glide/util/LogTime.java
index 834fc161d..344dbaa12 100644
--- a/library/src/main/java/com/bumptech/glide/util/LogTime.java
+++ b/library/src/main/java/com/bumptech/glide/util/LogTime.java
@@ -24,7 +24,7 @@ public static long getLogTime() {
     if (Build.VERSION_CODES.JELLY_BEAN_MR1 <= Build.VERSION.SDK_INT) {
       return SystemClock.elapsedRealtimeNanos();
     } else {
-      return System.currentTimeMillis();
+      return SystemClock.uptimeMillis();
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/util/Util.java b/library/src/main/java/com/bumptech/glide/util/Util.java
index 00cedcece..ed5224809 100644
--- a/library/src/main/java/com/bumptech/glide/util/Util.java
+++ b/library/src/main/java/com/bumptech/glide/util/Util.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.os.Looper;
+import com.bumptech.glide.load.model.Model;
 import com.bumptech.glide.request.target.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -190,6 +191,16 @@ public static boolean bothNullOrEqual(Object a, Object b) {
     return a == null ? b == null : a.equals(b);
   }
 
+  public static boolean bothModelsNullEquivalentOrEquals(Object a, Object b) {
+    if (a == null) {
+      return b == null;
+    }
+    if (a instanceof Model) {
+      return ((Model) a).isEquivalentTo(b);
+    }
+    return a.equals(b);
+  }
+
   public static int hashCode(int value) {
     return hashCode(value, HASH_ACCUMULATOR);
   }
diff --git a/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
index f1b8b51e8..08517533e 100644
--- a/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
@@ -8,6 +8,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
 import java.util.ArrayList;
@@ -45,6 +46,7 @@ public void testGetItemsIsCalledIncreasing() {
     final AtomicInteger calledCount = new AtomicInteger();
 
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         called.set(true);
@@ -75,11 +77,13 @@ public void testGetItemsIsCalledInOrderIncreasing() {
         return new int[] { 10, 10 };
       }
 
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         return objects.subList(position - 11, position + 1 - 11);
       }
 
+      @NonNull
       @Override
       @SuppressWarnings("unchecked")
       public RequestBuilder<Object> getPreloadRequestBuilder(Object item) {
@@ -98,6 +102,7 @@ public void testGetItemsIsCalledDecreasing() {
     final AtomicBoolean called = new AtomicBoolean(false);
     final AtomicInteger calledCount = new AtomicInteger();
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         // Ignore the preload caused from us starting at the end
@@ -133,6 +138,7 @@ public void testGetItemsIsCalledInOrderDecreasing() {
         return new int[] { 10, 10 };
       }
 
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         if (position == 40) {
@@ -141,6 +147,7 @@ public void testGetItemsIsCalledInOrderDecreasing() {
         return objects.subList(position, position + 1);
       }
 
+      @NonNull
       @Override
       @SuppressWarnings("unchecked")
       public RequestBuilder<Object> getPreloadRequestBuilder(Object item) {
@@ -160,6 +167,7 @@ public void testGetItemsIsNeverCalledWithEndGreaterThanTotalItems() {
     final AtomicBoolean called = new AtomicBoolean(false);
     final AtomicInteger calledCount = new AtomicInteger();
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         called.set(true);
@@ -179,6 +187,7 @@ public void testGetItemsIsNeverCalledWithStartLessThanZero() {
     final AtomicBoolean called = new AtomicBoolean(false);
     final AtomicInteger calledCount = new AtomicInteger();
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         if (position >= 17) {
@@ -202,6 +211,7 @@ public void testGetItemsIsNeverCalledWithStartLessThanZero() {
   public void testDontPreloadItemsRepeatedlyWhileIncreasing() {
     final AtomicInteger called = new AtomicInteger();
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         final int current = called.getAndIncrement();
@@ -222,6 +232,7 @@ public void testDontPreloadItemsRepeatedlyWhileIncreasing() {
   public void testDontPreloadItemsRepeatedlyWhileDecreasing() {
     final AtomicInteger called = new AtomicInteger();
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         if (position >= 20) {
@@ -249,6 +260,7 @@ public void testMultipleItemsForPositionIncreasing() throws NoSuchFieldException
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
       private int expectedPosition = (1 + 10) * 2;
 
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         return objects;
@@ -262,6 +274,7 @@ public void testMultipleItemsForPositionIncreasing() throws NoSuchFieldException
         return itemPosition == 0 ? new int[] { 10, 11 } : new int[] { 20, 21 };
       }
 
+      @NonNull
       @Override
       public RequestBuilder<Object> getPreloadRequestBuilder(Object item) {
         return request;
@@ -285,6 +298,7 @@ public void testMultipleItemsForPositionDecreasing() throws NoSuchFieldException
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
       private int expectedPosition = objects.size() * 2 - 1;
 
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         return objects;
@@ -298,6 +312,7 @@ public void testMultipleItemsForPositionDecreasing() throws NoSuchFieldException
         return itemPosition == 0 ? new int[] { 10, 11 } : new int[] { 20, 21 };
       }
 
+      @NonNull
       @Override
       public RequestBuilder<Object> getPreloadRequestBuilder(Object item) {
         return request;
@@ -334,11 +349,13 @@ public void testItemsArePreloadedWithGlide() {
     objects.add(new Object());
     final HashSet<Object> loadedObjects = new HashSet<>();
     ListPreloaderAdapter preloaderAdapter = new ListPreloaderAdapter() {
+      @NonNull
       @Override
       public List<Object> getPreloadItems(int position) {
         return objects.subList(position - 11, position - 10);
       }
 
+      @NonNull
       @Override
       public RequestBuilder<Object> getPreloadRequestBuilder(Object item) {
         loadedObjects.add(item);
@@ -358,6 +375,7 @@ public void testItemsArePreloadedWithGlide() {
     public ListPreloaderAdapter() {
     }
 
+    @NonNull
     @Override
     public List<Object> getPreloadItems(int position) {
       ArrayList<Object> result = new ArrayList<>(1);
@@ -365,6 +383,7 @@ public ListPreloaderAdapter() {
       return result;
     }
 
+    @NonNull
     @Override
     @SuppressWarnings("unchecked")
     public RequestBuilder<Object> getPreloadRequestBuilder(Object item) {
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 8df5cd4dc..539cefa65 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -258,6 +258,7 @@ public void testAllocationOrderRoundRobinsDifferentSizes() {
   }
 
   @Test
+  @SuppressWarnings("deprecation")
   public void testSetsConfigOnBuildersToDefaultIfNotSet() {
     PreFillType.Builder builder = mock(PreFillType.Builder.class);
     when(builder.build())
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
deleted file mode 100644
index 4cbfc7e49..000000000
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
+++ /dev/null
@@ -1,235 +0,0 @@
-package com.bumptech.glide.load.resource.bitmap;
-
-import static com.google.common.collect.Range.closed;
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.when;
-
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.os.Build;
-import android.util.DisplayMetrics;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.ImageHeaderParser;
-import com.bumptech.glide.load.Options;
-import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.resource.bitmap.DownsamplerTest.AllocationSizeBitmap;
-import com.bumptech.glide.tests.Util;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.List;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Matchers;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowBitmap;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 19, shadows = AllocationSizeBitmap.class)
-public class DownsamplerTest {
-  @Mock private BitmapPool bitmapPool;
-  @Mock private ArrayPool byteArrayPool;
-  private Downsampler downsampler;
-  private Options options;
-  private int initialSdkVersion;
-
-  @Before
-  public void setUp() throws Exception {
-    MockitoAnnotations.initMocks(this);
-    options = new Options();
-    DisplayMetrics displayMetrics =
-        RuntimeEnvironment.application.getResources().getDisplayMetrics();
-    when(byteArrayPool.get(anyInt(), Matchers.eq(byte[].class)))
-        .thenReturn(new byte[ArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
-
-    List<ImageHeaderParser> parsers = new ArrayList<ImageHeaderParser>();
-    parsers.add(new DefaultImageHeaderParser());
-
-    downsampler = new Downsampler(parsers, displayMetrics, bitmapPool, byteArrayPool);
-
-    initialSdkVersion = Build.VERSION.SDK_INT;
-  }
-
-  @After
-  public void tearDown() {
-    Util.setSdkVersionInt(initialSdkVersion);
-  }
-
-  @Test
-  public void testAlwaysArgb8888() throws IOException {
-    Bitmap rgb565 = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
-    InputStream stream = compressBitmap(rgb565, Bitmap.CompressFormat.JPEG);
-
-    options.set(Downsampler.DECODE_FORMAT, DecodeFormat.PREFER_ARGB_8888);
-    Resource<Bitmap> result = downsampler.decode(stream, 100, 100, options);
-    assertEquals(Bitmap.Config.ARGB_8888, result.get().getConfig());
-  }
-
-  @Test
-  public void testPreferRgb565() throws IOException {
-    Bitmap rgb565 = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    InputStream stream = compressBitmap(rgb565, Bitmap.CompressFormat.JPEG);
-
-    options.set(Downsampler.DECODE_FORMAT, DecodeFormat.PREFER_RGB_565);
-    Resource<Bitmap> result = downsampler.decode(stream, 100, 100, options);
-    assertEquals(Bitmap.Config.RGB_565, result.get().getConfig());
-  }
-
-  @Test
-  public void testCalculateScaling_withInvalidSourceSizes_doesNotCrash() {
-    runScaleTest(0, 0, 100, 100, DownsampleStrategy.AT_MOST, 0, 0);
-    runScaleTest(-1, -1, 100, 100, DownsampleStrategy.AT_MOST, -1, -1);
-    runScaleTest(0, 0, 100, 100, DownsampleStrategy.AT_LEAST, 0, 0);
-    runScaleTest(-1, -1, 100, 100, DownsampleStrategy.CENTER_OUTSIDE, -1, -1);
-  }
-
-  @Test
-  public void testCalculateScaling_withAtMost() {
-    DownsampleStrategy strategy = DownsampleStrategy.AT_MOST;
-    runScaleTest(100, 100, 100, 100, strategy, 100, 100);
-    runScaleTest(200, 200, 100, 100, strategy, 100, 100);
-    runScaleTest(400, 400, 100, 100, strategy, 100, 100);
-    runScaleTest(300, 300, 100, 100, strategy, 75, 75);
-    runScaleTest(799, 100, 100, 100, strategy, 100, 13);
-    runScaleTest(800, 100, 100, 100, strategy, 100, 13);
-    runScaleTest(801, 100, 100, 100, strategy, 50, 6);
-    runScaleTest(100, 800, 100, 100, strategy, 13, 100);
-    runScaleTest(87, 78, 100, 100, strategy, 87, 78);
-  }
-
-  @Test
-  public void testCalculateScaling_withAtLeast() {
-    DownsampleStrategy strategy = DownsampleStrategy.AT_LEAST;
-    runScaleTest(100, 100, 100, 100, strategy, 100, 100);
-    runScaleTest(200, 200, 100, 100, strategy, 100, 100);
-    runScaleTest(400, 400, 100, 100, strategy, 100, 100);
-    runScaleTest(300, 300, 100, 100, strategy, 150, 150);
-    runScaleTest(799, 100, 100, 100, strategy, 799, 100);
-    runScaleTest(800, 100, 100, 100, strategy, 800, 100);
-    runScaleTest(801, 100, 100, 100, strategy, 801, 100);
-    runScaleTest(100, 800, 100, 100, strategy, 100, 800);
-    runScaleTest(87, 78, 100, 100, strategy, 87, 78);
-  }
-
-  @Test
-  public void testCalculateScaling_withCenterInside() {
-    DownsampleStrategy strategy = DownsampleStrategy.FIT_CENTER;
-    runScaleTest(100, 100, 100, 100, strategy, 100, 100);
-    runScaleTest(200, 200, 100, 100, strategy, 100, 100);
-    runScaleTest(400, 400, 100, 100, strategy, 100, 100);
-    runScaleTest(300, 300, 100, 100, strategy, 100, 100);
-    runScaleTest(799, 100, 100, 100, strategy, 100, 13);
-    runScaleTest(800, 100, 100, 100, strategy, 100, 13);
-    runScaleTest(801, 100, 100, 100, strategy, 100, 13);
-    runScaleTest(100, 800, 100, 100, strategy, 13, 100);
-    runScaleTest(87, 78, 100, 100, strategy, 100, 90);
-  }
-
-  @Test
-  public void testCalculateScaling_withCenterOutside() {
-    DownsampleStrategy strategy = DownsampleStrategy.CENTER_OUTSIDE;
-    runScaleTest(100, 100, 100, 100, strategy, 100, 100);
-    runScaleTest(200, 200, 100, 100, strategy, 100, 100);
-    runScaleTest(400, 400, 100, 100, strategy, 100, 100);
-    runScaleTest(300, 300, 100, 100, strategy, 100, 100);
-    runScaleTest(799, 100, 100, 100, strategy, 799, 100);
-    runScaleTest(800, 100, 100, 100, strategy, 800, 100);
-    runScaleTest(801, 100, 100, 100, strategy, 801, 100);
-    runScaleTest(100, 800, 100, 100, strategy, 100, 800);
-    runScaleTest(87, 78, 100, 100, strategy, 112, 100);
-  }
-
-  @Test
-  public void testCalculateScaling_withNone() {
-    DownsampleStrategy strategy = DownsampleStrategy.NONE;
-    runScaleTest(100, 100, 100, 100, strategy, 100, 100);
-    runScaleTest(200, 200, 100, 100, strategy, 200, 200);
-    runScaleTest(400, 400, 100, 100, strategy, 400, 400);
-    runScaleTest(300, 300, 100, 100, strategy, 300, 300);
-    runScaleTest(799, 100, 100, 100, strategy, 799, 100);
-    runScaleTest(800, 100, 100, 100, strategy, 800, 100);
-    runScaleTest(801, 100, 100, 100, strategy, 801, 100);
-    runScaleTest(100, 800, 100, 100, strategy, 100, 800);
-    runScaleTest(87, 78, 100, 100, strategy, 87, 78);
-  }
-
-  // BitmapFactory does not support downsampling wbmp files on platforms <=M. See b/27305903.
-  @Test
-  public void testCalculateScaling_withWbmp() {
-    Util.setSdkVersionInt(23);
-    DownsampleStrategy strategy = DownsampleStrategy.FIT_CENTER;
-    BitmapFactory.Options options = new BitmapFactory.Options();
-
-    options.outMimeType = "image/vnd.wap.wbmp";
-    runScaleTest(100, 100, 100, 100, strategy, 100, 100, options);
-    runScaleTest(200, 200, 100, 100, strategy, 100, 100, options);
-    runScaleTest(400, 400, 100, 100, strategy, 100, 100, options);
-    runScaleTest(300, 300, 100, 100, strategy, 100, 100, options);
-    runScaleTest(799, 100, 100, 100, strategy, 100, 13, options);
-    runScaleTest(800, 100, 100, 100, strategy, 100, 13, options);
-    runScaleTest(801, 100, 100, 100, strategy, 100, 13, options);
-    runScaleTest(100, 800, 100, 100, strategy, 13, 100, options);
-    runScaleTest(87, 78, 100, 100, strategy, 100, 90, options);
-  }
-
-  private static void runScaleTest(int sourceWidth, int sourceHeight, int targetWidth,
-      int targetHeight, DownsampleStrategy strategy, int expectedWidth, int expectedHeight) {
-    runScaleTest(sourceWidth, sourceHeight, targetWidth, targetHeight, strategy, expectedWidth,
-        expectedHeight, new BitmapFactory.Options());
-  }
-
-  private static void runScaleTest(int sourceWidth, int sourceHeight, int targetWidth,
-      int targetHeight, DownsampleStrategy strategy, int expectedWidth, int expectedHeight,
-      BitmapFactory.Options options) {
-    Downsampler.calculateScaling(strategy, 0, sourceWidth, sourceHeight, targetWidth, targetHeight,
-        options);
-    assertSize(sourceWidth, sourceHeight, expectedWidth, expectedHeight, options);
-  }
-
-  private static void assertSize(int sourceWidth, int sourceHeight, int expectedWidth,
-      int expectedHeight, BitmapFactory.Options options) {
-    float sampleSize = Math.max(1, options.inSampleSize);
-    int downsampledWidth = (int) ((sourceWidth / sampleSize) + 0.5f);
-    int downsampledHeight = (int) ((sourceHeight / sampleSize) + 0.5f);
-
-    float scaleFactor = options.inScaled && options.inTargetDensity > 0 && options.inDensity > 0
-        ? options.inTargetDensity / (float) options.inDensity : 1f;
-    int scaledWidth = (int) Math.ceil(downsampledWidth * scaleFactor);
-    int scaledHeight = (int) Math.ceil(downsampledHeight * scaleFactor);
-
-    assertThat(scaledWidth).isIn(closed(expectedWidth, expectedWidth + 1));
-    assertThat(scaledHeight).isIn(closed(expectedHeight, expectedHeight + 1));
-  }
-
-  private InputStream compressBitmap(Bitmap bitmap, Bitmap.CompressFormat compressFormat)
-      throws FileNotFoundException {
-    ByteArrayOutputStream os = new ByteArrayOutputStream();
-    bitmap.compress(compressFormat, 100, os);
-    return new ByteArrayInputStream(os.toByteArray());
-  }
-
-  // Robolectric doesn't implement getAllocationByteCount correctly.
-  @Implements(Bitmap.class)
-  public static class AllocationSizeBitmap extends ShadowBitmap {
-
-    @Implementation
-    public int getAllocationByteCount() {
-      return getWidth() * getHeight() * (getConfig() == Bitmap.Config.ARGB_8888 ? 4 : 2);
-    }
-  }
-}
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 3d764e22d..f947b4cc0 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -16,9 +16,12 @@
 
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
 import android.graphics.PixelFormat;
+import android.graphics.PorterDuff.Mode;
+import android.graphics.PorterDuffColorFilter;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
@@ -544,7 +547,7 @@ public void testSetAlphaSetsAlphaOnPaint() {
 
   @Test
   public void testSetColorFilterSetsColorFilterOnPaint() {
-    ColorFilter colorFilter = new ColorFilter();
+    ColorFilter colorFilter = new PorterDuffColorFilter(Color.RED, Mode.ADD);
     drawable.setColorFilter(colorFilter);
     verify(paint).setColorFilter(eq(colorFilter));
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
index 0ad477634..d6db3458b 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
@@ -29,9 +29,7 @@
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.tests.Util.ReturnsSelfAnswer;
 import com.bumptech.glide.util.Util;
-import com.google.common.testing.EqualsTester;
 import java.nio.ByteBuffer;
-import java.util.UUID;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -271,14 +269,6 @@ public void testClearsCompletedLoadOnFrameReadyIfCleared() {
     assertNull(loader.getCurrentFrame());
   }
 
-  @Test
-  public void testFrameSignatureEquality() {
-    UUID first = UUID.randomUUID();
-    new EqualsTester().addEqualityGroup(new GifFrameLoader.FrameSignature(first),
-        new GifFrameLoader.FrameSignature(first))
-        .addEqualityGroup(new GifFrameLoader.FrameSignature()).testEquals();
-  }
-
   @SuppressWarnings("unchecked")
   private static Target<Bitmap> aTarget() {
     return isA(Target.class);
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
index 9d8e2b1b1..b4379c750 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
@@ -6,6 +6,7 @@
 import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Before;
 import org.junit.Test;
@@ -59,6 +60,7 @@ public void testBitmapResourceIsRecycled() {
     final String description = "TestDescription";
     Bitmap bitmap = Bitmap.createBitmap(100, 100, Bitmap.Config.ALPHA_8);
     Resource<Bitmap> bitmapResource = mockResource();
+    Options options = new Options();
 
     public BitmapBytesTranscoderHarness() {
       when(bitmapResource.get()).thenReturn(bitmap);
@@ -67,7 +69,7 @@ public BitmapBytesTranscoderHarness() {
 
     public String getTranscodedDescription() {
       BitmapBytesTranscoder transcoder = new BitmapBytesTranscoder(compressFormat, quality);
-      Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource);
+      Resource<byte[]> bytesResource = transcoder.transcode(bitmapResource, options);
 
       return new String(bytesResource.get());
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
index 62689518a..0707a342a 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
@@ -7,6 +7,7 @@
 
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import org.junit.Before;
@@ -33,7 +34,7 @@ public void testReturnsBitmapDrawableResourceContainingGivenBitmap() {
     Resource<Bitmap> resource = mockResource();
     when(resource.get()).thenReturn(expected);
 
-    Resource<BitmapDrawable> transcoded = transcoder.transcode(resource);
+    Resource<BitmapDrawable> transcoded = transcoder.transcode(resource, new Options());
 
     assertEquals(expected, transcoded.get().getBitmap());
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
index 1f6d4fd8f..d1cd38b01 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
@@ -5,6 +5,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import java.nio.ByteBuffer;
@@ -33,7 +34,7 @@ public void testReturnsBytesOfGivenGifDrawable() {
       ByteBuffer expected = ByteBuffer.wrap(fakeData.getBytes());
       when(gifDrawable.getBuffer()).thenReturn(expected);
 
-      Resource<byte[]> transcoded = transcoder.transcode(resource);
+      Resource<byte[]> transcoded = transcoder.transcode(resource, new Options());
 
       assertArrayEquals(expected.array(), transcoded.get());
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
index a1d8eb507..0c8713cf2 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.tests.Util.mockResource;
 import static org.junit.Assert.assertEquals;
 
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -16,6 +17,6 @@ public void testReturnsTheGivenResource() {
     Resource<Object> resource = mockResource();
     ResourceTranscoder<Object, Object> unitTranscoder = UnitTranscoder.get();
 
-    assertEquals(resource, unitTranscoder.transcode(resource));
+    assertEquals(resource, unitTranscoder.transcode(resource, new Options()));
   }
 }
diff --git a/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
index fe12efec7..b8940197b 100644
--- a/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
@@ -253,6 +253,7 @@ public void testApplyingDefaultOptions_withTransform_retrainsTransform() {
   }
 
   @Test
+  @SuppressWarnings({"unchecked", "varargs"})
   public void testApplyMultiTransform() {
     options.transforms(new CircleCrop(), new CenterCrop());
     assertThat(options.isTransformationRequired()).isTrue();
diff --git a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
index 7d0756022..e8a603d36 100644
--- a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
@@ -13,10 +13,12 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
+import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.view.View;
 import android.view.ViewTreeObserver;
+import android.view.WindowManager;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.tests.Util;
@@ -31,10 +33,12 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadow.api.Shadow;
+import org.robolectric.shadows.ShadowDisplay;
 import org.robolectric.shadows.ShadowView;
 
 @RunWith(RobolectricTestRunner.class)
@@ -63,6 +67,7 @@ public void setUp() {
   @After
   public void tearDown() {
     Util.setSdkVersionInt(sdkVersion);
+    ViewTarget.SizeDeterminer.maxDisplayLength = null;
   }
 
   @Test
@@ -98,11 +103,12 @@ public void testRetrievesRequestFromPreviousTargetForView() {
   }
 
   @Test
-  public void getSize_withValidDimens_noLayoutRequested_callsSizeReady() {
+  public void testSizeCallbackIsCalledSynchronouslyIfViewSizeSet() {
     int dimens = 333;
     shadowView
         .setWidth(dimens)
-        .setHeight(dimens);
+        .setHeight(dimens)
+        .setIsLaidOut(true);
 
     target.getSize(cb);
 
@@ -110,24 +116,11 @@ public void getSize_withValidDimens_noLayoutRequested_callsSizeReady() {
   }
 
   @Test
-  public void getSize_withValidDimens_layoutRequested_doesNotCallSizeReady() {
-    int dimens = 333;
-    shadowView
-        .setWidth(dimens)
-        .setHeight(dimens);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
-  }
-
-  @Test
-  public void getSize_withFixedLayoutParams_callsSizeReady() {
+  public void testSizeCallbackIsCalledSynchronouslyIfLayoutParamsConcreteSizeSet() {
     int dimens = 444;
     LayoutParams layoutParams = new LayoutParams(dimens, dimens);
     view.setLayoutParams(layoutParams);
-    view.requestLayout();
+    shadowView.setIsLaidOut(true);
 
     target.getSize(cb);
 
@@ -135,215 +128,91 @@ public void getSize_withFixedLayoutParams_callsSizeReady() {
   }
 
   @Test
-  public void getSize_withFixedWidthSetHeight_noLayoutRequested_callsSizeReady() {
-    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);
-    shadowView.setHeight(200);
-    view.setLayoutParams(layoutParams);
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(eq(400), eq(200));
-  }
-
-  @Test
-  public void getSize_withFixedWidthSetHeight_layoutRequested_callsSizeReady() {
-    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);
-    shadowView.setHeight(200);
-    view.setLayoutParams(layoutParams);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
-  }
-
-
-  @Test
-  public void getSize_withFixedHeightSetWidth_noLayoutRequested_callsSizeReady() {
-    LayoutParams layoutParams = new LayoutParams(0 /*width*/, 400 /*height*/);
-    shadowView.setWidth(200);
-    view.setLayoutParams(layoutParams);
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(eq(200), eq(400));
-  }
-
-  @Test
-  public void getSize_withFixedHeightSetWidth_layoutRequested_callsSizeReady() {
-    LayoutParams layoutParams = new LayoutParams(0 /*width*/, 400 /*height*/);
-    shadowView.setWidth(200);
-    view.setLayoutParams(layoutParams);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
-  }
-
-  @Test
-  public void getSize_withBothWrapContent_isValid_andReturnsSizeOriginal() {
+  public void getSize_withBothWrapContent_usesDisplayDimens() {
     LayoutParams layoutParams =
         new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(layoutParams);
-    view.requestLayout();
+    shadowView.setIsLaidOut(true);
+
+    setDisplayDimens(200, 300);
 
     target.getSize(cb);
 
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+    verify(cb).onSizeReady(300, 300);
   }
 
   @Test
-  public void getSize_withWrapContentWidthAndValidHeight_isValid_andUsesSizeOriginalWidth() {
+  public void getSize_withWrapContentWidthAndValidHeight_usesDisplayDimenAndValidHeight() {
     int height = 100;
     LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, height);
     view.setLayoutParams(params);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, height);
-  }
-
-  @Test
-  public void getSize_withWrapContentHeightAndValidWidth_isValid_andUsesSizeOriginalHeight() {
-    int width = 100;
-    LayoutParams params = new LayoutParams(width, LayoutParams.WRAP_CONTENT);
-    view.setLayoutParams(params);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
-  }
+    shadowView.setIsLaidOut(true);
 
-  @Test
-  public void getSize_withWrapContentHeightSetWidth_noLayoutRequested_callsSizeReady() {
-    int width = 100;
-    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
-    view.setLayoutParams(params);
-    shadowView.setWidth(width);
+    setDisplayDimens(100, 200);
 
     target.getSize(cb);
 
-    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
+    verify(cb).onSizeReady(200, height);
   }
 
   @Test
-  public void getSize_withWrapContentHeightSetWidth_previousHeight_usesSizeOriginal() {
+  public void getSize_withWrapContentHeightAndValidWidth_returnsWidthAndDisplayDimen() {
     int width = 100;
-    int oldHeight = 500;
-    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    LayoutParams params = new LayoutParams(width, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(params);
-    shadowView
-        .setWidth(width)
-        .setHeight(oldHeight);
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
+    shadowView.setIsLaidOut(true);
 
-  }
-
-  @Test
-  public void getSize_withWrapContentHeightViewWidth_layoutRequested_doesNotCallSizeReady() {
-    int width = 100;
-    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
-    view.setLayoutParams(params);
-    shadowView.setWidth(width);
-    view.requestLayout();
+    setDisplayDimens(200, 100);
 
     target.getSize(cb);
 
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+    verify(cb).onSizeReady(width, 200);
   }
 
   @Test
-  public void getSize_withWrapContentWidthAndMatchParentHeight_callsSizeReadyOnPreDraw() {
+  public void getSize_withWrapContentWidthAndMatchParentHeight_usesDisplayDimenWidthAndHeight() {
     LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
     view.setLayoutParams(params);
 
+    setDisplayDimens(500, 600);
+
     target.getSize(cb);
 
     verify(cb, never()).onSizeReady(anyInt(), anyInt());
 
     int height = 32;
     shadowView
-        .setHeight(height);
-    view.requestLayout();
+        .setHeight(height)
+        .setIsLaidOut(true);
 
     shadowObserver.fireOnPreDrawListeners();
 
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, height);
-  }
-
-  @Test
-  public void getSize_withWrapContentWidthMatchParentHeightAndSetHeight_noLayoutRequested_calls() {
-    LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
-    view.setLayoutParams(params);
-    shadowView.setHeight(200);
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, 200);
+    verify(cb).onSizeReady(600, height);
   }
 
   @Test
-  public void getSize_withWrapContentWidthMatchParentHeightAndSetHeight_layoutRequested_calls() {
-    LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
-    view.setLayoutParams(params);
-    shadowView.setHeight(200);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, 200);
-  }
-
-  @Test
-  public void getSize_withMatchParentWidthAndWrapContentHeight_callsSizeReadyOnPreDraw() {
+  public void getSize_withMatchParentWidthAndWrapContentHeight_usesWidthAndDisplayDimenHeight() {
     LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(params);
 
+    setDisplayDimens(300, 400);
+
     target.getSize(cb);
 
     verify(cb, never()).onSizeReady(anyInt(), anyInt());
 
+
     int width = 32;
     shadowView
-        .setWidth(width);
-    view.requestLayout();
+        .setWidth(width)
+        .setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
-    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
-  }
-
-
-  @Test
-  public void getSize_withMatchParentWidthWrapContentHeightAndSetHeight_noLayoutRequested_calls() {
-    LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-    view.setLayoutParams(params);
-    shadowView.setWidth(200);
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(200, Target.SIZE_ORIGINAL);
+    verify(cb).onSizeReady(width, 400);
   }
 
   @Test
-  public void getSize_withMatchParentWidthWrapContentHeightAndSetHeight_layoutRequested_calls() {
-    LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-    view.setLayoutParams(params);
-    shadowView.setWidth(200);
-    view.requestLayout();
-
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(200, Target.SIZE_ORIGINAL);
-  }
-
-  @Test
-  public void getSize_withMatchParentWidthAndHeight_validDimens_layoutRequested_callsSizeReady() {
+  public void testMatchParentWidthAndHeight() {
     LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
     view.setLayoutParams(params);
 
@@ -356,82 +225,27 @@ public void getSize_withMatchParentWidthAndHeight_validDimens_layoutRequested_ca
     shadowView
         .setWidth(width)
         .setHeight(height)
-        .requestLayout();
+        .setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
   }
 
   @Test
-  public void getSize_onPreDraw_withValidWidthAndHeight_noLayoutRequested_callsSizeReady() {
+  public void testSizeCallbackIsCalledPreDrawIfNoDimensAndNoLayoutParams() {
     target.getSize(cb);
 
     int width = 12;
     int height = 32;
     shadowView
         .setWidth(width)
-        .setHeight(height);
+        .setHeight(height)
+        .setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
   }
 
-  @Test
-  public void getSize_onPreDraw_withValidWidthAndHeight_layoutRequested_doesNotCallSizeReady() {
-    target.getSize(cb);
-
-    int width = 12;
-    int height = 32;
-    shadowView
-        .setWidth(width)
-        .setHeight(height);
-    view.requestLayout();
-    shadowObserver.fireOnPreDrawListeners();
-
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
-  }
-
-  @Test
-  public void getSize_withWrapContentSize_callsSizeReadyWithSizeOriginal() {
-    view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
-  }
-
-  @Test
-  public void getSize_withValidViewDimensions_andWrapContent_callsSizeReadyWithSizeOriginal() {
-    view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
-    shadowView
-        .setWidth(100)
-        .setHeight(100);
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
-  }
-
-  @Test
-  public void getSize_withValidViewDimensions_andFixedParams_callsSizeReadyWithParams() {
-    view.setLayoutParams(new LayoutParams(100, 100));
-    shadowView
-        .setWidth(50)
-        .setHeight(50);
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(100, 100);
-  }
-
-  @Test
-  public void getSize_withValidViewDimensions_invalidParams_callsSizeReadyWithViewDimensions() {
-    view.setLayoutParams(new LayoutParams(0, 0));
-    shadowView
-        .setWidth(100)
-        .setHeight(100);
-    target.getSize(cb);
-
-    verify(cb).onSizeReady(100, 100);
-  }
-
   @Test
   public void testSizeCallbacksAreCalledInOrderPreDraw() {
     SizeReadyCallback[] cbs = new SizeReadyCallback[25];
@@ -443,7 +257,8 @@ public void testSizeCallbacksAreCalledInOrderPreDraw() {
     int width = 100, height = 111;
     shadowView
         .setWidth(width)
-        .setHeight(height);
+        .setHeight(height)
+        .setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     InOrder order = inOrder((Object[]) cbs);
@@ -458,6 +273,7 @@ public void testDoesNotNotifyCallbackTwiceIfAddedTwice() {
     target.getSize(cb);
 
     view.setLayoutParams(new LayoutParams(100, 100));
+    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb, times(1)).onSizeReady(anyInt(), anyInt());
@@ -478,6 +294,7 @@ public void testDoesAddSecondListenerIfFirstListenerIsRemovedBeforeSecondRequest
     target.getSize(cb1);
 
     view.setLayoutParams(new LayoutParams(100, 100));
+    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     assertThat(shadowObserver.getPreDrawListeners()).hasSize(0);
@@ -509,6 +326,7 @@ public void testSizeCallbackIsCalledPreDrawIfNoDimensAndNoLayoutParamsButLayoutP
     int height = 354;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
+    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
@@ -520,6 +338,7 @@ public void testCallbackIsNotCalledTwiceIfPreDrawFiresTwice() {
 
     LayoutParams layoutParams = new LayoutParams(1234, 4123);
     view.setLayoutParams(layoutParams);
+    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
     shadowObserver.fireOnPreDrawListeners();
 
@@ -537,6 +356,7 @@ public void testCallbacksFromMultipleRequestsAreNotifiedOnPreDraw() {
     int height = 875;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
+    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
     shadowObserver.fireOnPreDrawListeners();
 
@@ -552,6 +372,7 @@ public void testDoesNotThrowOnPreDrawIfViewTreeObserverIsDead() {
     int height = 2;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
+    shadowView.setIsLaidOut(true);
     shadowObserver.setIsAlive(false);
     shadowObserver.fireOnPreDrawListeners();
 
@@ -567,7 +388,7 @@ public void testThrowsIfGivenNullView() {
   public void testDecreasesDimensionsByViewPadding() {
     view.setLayoutParams(new LayoutParams(100, 100));
     view.setPadding(25, 25, 25, 25);
-    view.layout(0, 0, 100, 100);
+    shadowView.setIsLaidOut(true);
 
     target.getSize(cb);
 
@@ -576,18 +397,22 @@ public void testDecreasesDimensionsByViewPadding() {
 
   @Test
   public void getSize_withValidWidthAndHeight_notLaidOut_notLayoutRequested_callsSizeReady() {
-    view.setLayoutParams(new LayoutParams(0, 0));
     shadowView
         .setWidth(100)
-        .setHeight(100);
+        .setHeight(100)
+        .setIsLaidOut(false);
     target.getSize(cb);
 
     verify(cb).onSizeReady(100, 100);
   }
 
   @Test
-  public void getSize_withLayoutParams_notLaidOut_notLayoutRequested_callsSizeReady() {
-    view.setLayoutParams(new LayoutParams(10, 10));
+  public void getSize_withLayoutParams_notLaidOut_doesCallSizeReady() {
+    shadowView
+        .setLayoutParams(new LayoutParams(10, 10))
+        .setWidth(100)
+        .setHeight(100)
+        .setIsLaidOut(false);
     target.getSize(cb);
 
     verify(cb, times(1)).onSizeReady(anyInt(), anyInt());
@@ -595,18 +420,18 @@ public void getSize_withLayoutParams_notLaidOut_notLayoutRequested_callsSizeRead
 
   @Test
   public void getSize_withLayoutParams_emptyParams_notLaidOutOrLayoutRequested_callsSizeReady() {
-   view
-        .setLayoutParams(new LayoutParams(0, 0));
     shadowView
+        .setLayoutParams(new LayoutParams(0, 0))
         .setWidth(100)
-        .setHeight(100);
+        .setHeight(100)
+        .setIsLaidOut(false);
     target.getSize(cb);
 
     verify(cb).onSizeReady(100, 100);
   }
 
   @Test
-  public void getSize_withValidWidthAndHeight_preV19_layoutRequested_doesNotCallSizeReady() {
+  public void getSize_withValidWidthAndHeight_preV19_layoutRequested_callsSizeReady() {
     Util.setSdkVersionInt(18);
     shadowView
         .setWidth(100)
@@ -615,14 +440,15 @@ public void getSize_withValidWidthAndHeight_preV19_layoutRequested_doesNotCallSi
 
     target.getSize(cb);
 
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+    verify(cb).onSizeReady(100, 100);
   }
 
   @Test
   public void getSize_withWidthAndHeightEqualToPadding_doesNotCallSizeReady() {
     shadowView
         .setWidth(100)
-        .setHeight(100);
+        .setHeight(100)
+        .setIsLaidOut(true);
 
     view.setPadding(50, 50, 50, 50);
 
@@ -631,6 +457,19 @@ public void getSize_withWidthAndHeightEqualToPadding_doesNotCallSizeReady() {
     verify(cb, never()).onSizeReady(anyInt(), anyInt());
   }
 
+  private void setDisplayDimens(Integer width, Integer height) {
+    WindowManager windowManager =
+        (WindowManager) RuntimeEnvironment.application.getSystemService(Context.WINDOW_SERVICE);
+    ShadowDisplay shadowDisplay = Shadows.shadowOf(windowManager.getDefaultDisplay());
+    if (width != null) {
+      shadowDisplay.setWidth(width);
+    }
+
+    if (height != null) {
+      shadowDisplay.setHeight(height);
+    }
+  }
+
   @Implements(ViewTreeObserver.class)
   public static class PreDrawShadowViewTreeObserver {
     private CopyOnWriteArrayList<OnPreDrawListener> preDrawListeners = new CopyOnWriteArrayList<>();
@@ -650,7 +489,6 @@ public void removeOnPreDrawListener(OnPreDrawListener listener) {
       preDrawListeners.remove(listener);
     }
 
-    @SuppressWarnings("WeakerAccess")
     @Implementation
     public boolean isAlive() {
       return isAlive;
@@ -662,27 +500,28 @@ private void checkIsAlive() {
       }
     }
 
-    void setIsAlive(boolean isAlive) {
+    public void setIsAlive(boolean isAlive) {
       this.isAlive = isAlive;
     }
 
-    void fireOnPreDrawListeners() {
+    public void fireOnPreDrawListeners() {
       for (OnPreDrawListener listener : preDrawListeners) {
         listener.onPreDraw();
       }
     }
 
-    List<OnPreDrawListener> getPreDrawListeners() {
+    public List<OnPreDrawListener> getPreDrawListeners() {
       return preDrawListeners;
     }
   }
 
   @Implements(View.class)
   public static class SizedShadowView extends ShadowView {
-
     private int width;
     private int height;
-    private LayoutParams params;
+    private LayoutParams layoutParams;
+    private boolean isLaidOut;
+    private boolean isLayoutRequested;
 
     public SizedShadowView setWidth(int width) {
       this.width = width;
@@ -694,18 +533,19 @@ public SizedShadowView setHeight(int height) {
       return this;
     }
 
-    // Implemented because get/setLayoutParams is not implemented by ShadowView.
-    @Implementation
-    @SuppressWarnings("unused")
-    public void setLayoutParams(LayoutParams params) {
-      this.params = params;
+    public SizedShadowView setLayoutParams(LayoutParams layoutParams) {
+      this.layoutParams = layoutParams;
+      return this;
+    }
+
+    public SizedShadowView setIsLaidOut(boolean isLaidOut) {
+      this.isLaidOut = isLaidOut;
+      return this;
     }
 
-    // Implemented because get/setLayoutParams is not implemented by ShadowView.
     @Implementation
-    @SuppressWarnings("unused")
-    public LayoutParams getLayoutParams() {
-      return params;
+    public void requestLayout() {
+      isLayoutRequested = true;
     }
 
     @Implementation
@@ -717,12 +557,26 @@ public int getWidth() {
     public int getHeight() {
       return height;
     }
-  }
 
+    @Implementation
+    public boolean isLaidOut() {
+      return isLaidOut;
+    }
+
+    @Implementation
+    public boolean isLayoutRequested() {
+      return isLayoutRequested;
+    }
+
+    @Implementation
+    public LayoutParams getLayoutParams() {
+      return layoutParams;
+    }
+  }
 
   private static class TestViewTarget extends ViewTarget<View, Object> {
 
-    TestViewTarget(View view) {
+    public TestViewTarget(View view) {
       super(view);
     }
 
diff --git a/samples/flickr/build.gradle b/samples/flickr/build.gradle
index 0405ef67d..73b2b4e01 100644
--- a/samples/flickr/build.gradle
+++ b/samples/flickr/build.gradle
@@ -8,7 +8,7 @@ dependencies {
     annotationProcessor project(':annotation:compiler')
 
     compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
+    compile "com.android.volley:volley:${VOLLEY_VERSION}"
     compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
 }
 
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
index 534caa298..9539d0006 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
@@ -4,6 +4,7 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.widget.GridLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -16,7 +17,6 @@
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.samples.flickr.api.Api;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.util.FixedPreloadSizeProvider;
@@ -67,7 +67,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
     thumbnailRequest = GlideApp.with(this)
         .asDrawable()
-        .diskCacheStrategy(DiskCacheStrategy.DATA)
         .centerCrop()
         .override(Api.SQUARE_THUMB_SIZE);
 
@@ -193,11 +192,13 @@ public int getItemCount() {
       return photos.size();
     }
 
+    @NonNull
     @Override
     public List<Photo> getPreloadItems(int position) {
       return photos.subList(position, position + 1);
     }
 
+    @NonNull
     @Override
     public RequestBuilder<Drawable> getPreloadRequestBuilder(Photo item) {
       return preloadRequest.load(item);
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
index 701710e04..e54856c2a 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
@@ -7,6 +7,7 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -165,11 +166,13 @@ public int getItemCount() {
       return photos.size();
     }
 
+    @NonNull
     @Override
     public List<Photo> getPreloadItems(int position) {
       return photos.subList(position, position + 1);
     }
 
+    @NonNull
     @Override
     public RequestBuilder<Drawable> getPreloadRequestBuilder(Photo item) {
       return fullRequest.thumbnail(thumbRequest.load(item)).load(item);
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
index 08c5f5257..cedac252f 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
@@ -10,7 +10,6 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentPagerAdapter;
-import android.support.v4.view.MenuItemCompat;
 import android.support.v4.view.ViewPager;
 import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
@@ -90,8 +89,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
     MenuInflater menuInflater = getMenuInflater();
     menuInflater.inflate(R.menu.search_activity, menu);
 
-    searchView =
-        (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.search));
+    searchView = (SearchView) menu.findItem(R.id.search).getActionView();
     searchView.setSubmitButtonEnabled(true);
     searchView.setIconified(false);
     searchView.setOnQueryTextListener(this);
diff --git a/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml b/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml
index 5a53ad9fd..d21744355 100644
--- a/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml
+++ b/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml
@@ -2,6 +2,6 @@
 <com.bumptech.glide.samples.flickr.SquareImageView
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:scaleType="centerCrop"
-       android:layout_width="fill_parent"
-       android:layout_height="fill_parent"
+       android:layout_width="match_parent"
+       android:layout_height="match_parent"
        android:contentDescription="@string/image_description"/>
diff --git a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java
index f600840b1..cf315b106 100644
--- a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java
+++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java
@@ -1,7 +1,16 @@
 package com.bumptech.glide.samples.gallery;
 
+import android.Manifest.permission;
+import android.annotation.TargetApi;
+import android.content.pm.PackageManager;
+import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
+import android.support.v4.content.ContextCompat;
+import android.widget.Toast;
 import com.bumptech.glide.MemoryCategory;
 
 /**
@@ -9,10 +18,53 @@
  */
 public class MainActivity extends FragmentActivity {
 
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main_activity);
-        GlideApp.get(this).setMemoryCategory(MemoryCategory.HIGH);
+  private static final int REQUEST_READ_STORAGE = 0;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.main_activity);
+    GlideApp.get(this).setMemoryCategory(MemoryCategory.HIGH);
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
+        && ContextCompat.checkSelfPermission(this, permission.READ_EXTERNAL_STORAGE)
+        != PackageManager.PERMISSION_GRANTED) {
+      requestStoragePermission();
+    } else {
+      replaceFragment();
+    }
+  }
+
+  @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+  private void requestStoragePermission() {
+     ActivityCompat.requestPermissions(this,
+        new String[]{permission.READ_EXTERNAL_STORAGE},
+        REQUEST_READ_STORAGE);
+  }
+
+  private void replaceFragment() {
+    Fragment fragment = new HorizontalGalleryFragment();
+    getSupportFragmentManager()
+        .beginTransaction()
+        .replace(R.id.fragment_container, fragment)
+        .commit();
+  }
+
+  @Override
+  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+      @NonNull int[] grantResults) {
+    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+    switch (requestCode) {
+      case REQUEST_READ_STORAGE: {
+        // If request is cancelled, the result arrays are empty.
+        if (grantResults.length > 0
+            && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+          replaceFragment();
+        } else {
+          Toast.makeText(this, "Storage permission is required", Toast.LENGTH_LONG)
+              .show();
+          requestStoragePermission();
+        }
+      }
     }
+  }
 }
diff --git a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java
index 2486badfd..96897779d 100644
--- a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java
+++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.graphics.Point;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
 import android.support.v7.widget.RecyclerView;
 import android.view.Display;
 import android.view.LayoutInflater;
@@ -91,11 +92,13 @@ public int getItemViewType(int position) {
     return 0;
   }
 
+  @NonNull
   @Override
   public List<MediaStoreData> getPreloadItems(int position) {
     return Collections.singletonList(data.get(position));
   }
 
+  @NonNull
   @Override
   public RequestBuilder<Drawable> getPreloadRequestBuilder(MediaStoreData item) {
     MediaStoreSignature signature =
diff --git a/samples/gallery/src/main/res/layout/main_activity.xml b/samples/gallery/src/main/res/layout/main_activity.xml
index 18c1a634f..8a31cf241 100644
--- a/samples/gallery/src/main/res/layout/main_activity.xml
+++ b/samples/gallery/src/main/res/layout/main_activity.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
-<merge xmlns:android="http://schemas.android.com/apk/res/android">
-    <fragment
-            android:name="com.bumptech.glide.samples.gallery.HorizontalGalleryFragment"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:id="@+id/horizontal_gallery_fragment"/>
-</merge>
+<FrameLayout
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  android:id="@+id/fragment_container"
+  android:layout_width="match_parent"
+  android:layout_height="match_parent">
+</FrameLayout>
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
index 5501c236c..5ae74d704 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
@@ -7,6 +7,7 @@
 import android.content.Intent;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.View;
@@ -137,11 +138,13 @@ public int getItemCount() {
       return results.length;
     }
 
+    @NonNull
     @Override
     public List<Api.GifResult> getPreloadItems(int position) {
       return Collections.singletonList(results[position]);
     }
 
+    @NonNull
     @Override
     public RequestBuilder<Drawable> getPreloadRequestBuilder(Api.GifResult item) {
       return requestBuilder.load(item);
diff --git a/samples/imgur/.gitignore b/samples/imgur/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/samples/imgur/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/samples/imgur/build.gradle b/samples/imgur/build.gradle
new file mode 100644
index 000000000..df3acd658
--- /dev/null
+++ b/samples/imgur/build.gradle
@@ -0,0 +1,55 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion COMPILE_SDK_VERSION as int
+    buildToolsVersion BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.bumptech.glide.samples.imgur"
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile project(':library')
+    annotationProcessor project(':annotation:compiler')
+
+    compile "com.google.dagger:dagger:${DAGGER_VERSION}"
+    annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
+    compile "com.google.dagger:dagger-android:${DAGGER_VERSION}"
+    compile "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
+    annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
+
+    compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
+    compile 'com.squareup.retrofit2:retrofit:2.2.0'
+    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
+    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
+
+    compile 'io.reactivex:rxandroid:1.2.1'
+    compile 'io.reactivex:rxjava:1.2.9'
+
+    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+}
+
+task run(type: Exec, dependsOn: 'installDebug') {
+    description 'Installs the APK and runs the main activity: "gradlew :samples:???:run"'
+    commandLine "${android.sdkDirectory}/platform-tools/adb", 'shell', 'am', 'start', '-n', 'com.bumptech.glide.samples.card/.MainActivity'
+}
diff --git a/samples/imgur/lint.xml b/samples/imgur/lint.xml
new file mode 100644
index 000000000..ac292ab1a
--- /dev/null
+++ b/samples/imgur/lint.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Not supported by all build systems -->
+    <issue id="GradleOverrides" severity="ignore" />
+    <issue id="IconMissingDensityFolder" severity="ignore"/>
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+</lint>
diff --git a/samples/imgur/proguard-rules.pro b/samples/imgur/proguard-rules.pro
new file mode 100644
index 000000000..896f865d9
--- /dev/null
+++ b/samples/imgur/proguard-rules.pro
@@ -0,0 +1,25 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/judds/Library/Android/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/samples/imgur/src/main/AndroidManifest.xml b/samples/imgur/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..23f5ec718
--- /dev/null
+++ b/samples/imgur/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  package="com.bumptech.glide.samples.imgur">
+  <uses-permission android:name="android.permission.INTERNET" />
+  <application
+    android:allowBackup="false"
+    android:icon="@mipmap/ic_launcher"
+    android:label="@string/app_name"
+    android:roundIcon="@mipmap/ic_launcher_round"
+    android:supportsRtl="true"
+    android:theme="@style/AppTheme"
+    android:name="com.bumptech.glide.samples.imgur.ImgurApplication">
+    <activity android:name="com.bumptech.glide.samples.imgur.MainActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.LAUNCHER"/>
+      </intent-filter>
+    </activity>
+  </application>
+
+</manifest>
\ No newline at end of file
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java
new file mode 100644
index 000000000..d40c24c8c
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ApplicationModule.java
@@ -0,0 +1,16 @@
+package com.bumptech.glide.samples.imgur;
+
+import dagger.Module;
+import dagger.Provides;
+import okhttp3.OkHttpClient;
+
+/**
+ * The Application Dagger module for the Imgur sample.
+ */
+@Module
+public class ApplicationModule {
+  @Provides
+  OkHttpClient okHttpClient() {
+    return new OkHttpClient();
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java
new file mode 100644
index 000000000..c2b788e2b
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplication.java
@@ -0,0 +1,14 @@
+package com.bumptech.glide.samples.imgur;
+
+import dagger.android.AndroidInjector;
+import dagger.android.support.DaggerApplication;
+
+/**
+ * Runs Dagger injection in the Imgur sample.
+ */
+public final class ImgurApplication extends DaggerApplication {
+  @Override
+  protected AndroidInjector<? extends DaggerApplication> applicationInjector() {
+    return DaggerImgurApplicationComponent.create();
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java
new file mode 100644
index 000000000..cdfc96e91
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurApplicationComponent.java
@@ -0,0 +1,21 @@
+package com.bumptech.glide.samples.imgur;
+
+import com.bumptech.glide.samples.imgur.api.ApiModule;
+import dagger.Component;
+import dagger.android.AndroidInjector;
+import dagger.android.support.AndroidSupportInjectionModule;
+
+import javax.inject.Singleton;
+
+/**
+ * Specifies Dagger modules for {@link ImgurApplication}.
+ */
+@Singleton
+@Component(modules = {
+    AndroidSupportInjectionModule.class,
+    MainActivityModule.class,
+    ApplicationModule.class,
+    ApiModule.class
+})
+public interface ImgurApplicationComponent extends AndroidInjector<ImgurApplication> {
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurGlideModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurGlideModule.java
new file mode 100644
index 000000000..c673ad244
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/ImgurGlideModule.java
@@ -0,0 +1,12 @@
+package com.bumptech.glide.samples.imgur;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+
+/**
+ * Generates a Glide API for the Imgur sample.
+ */
+@GlideModule(glideName = "ImgurGlide")
+public class ImgurGlideModule extends AppGlideModule {
+  // Intentionally Empty.
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivity.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivity.java
new file mode 100644
index 000000000..384543997
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivity.java
@@ -0,0 +1,114 @@
+package com.bumptech.glide.samples.imgur;
+
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.RecyclerView.ViewHolder;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import com.bumptech.glide.samples.imgur.api.Image;
+import dagger.android.AndroidInjection;
+import java.util.Collections;
+import java.util.List;
+import javax.inject.Inject;
+import javax.inject.Named;
+import rx.Observable;
+import rx.Observer;
+import rx.android.schedulers.AndroidSchedulers;
+import rx.schedulers.Schedulers;
+
+/**
+ * Displays images and GIFs from Imgur in a scrollable list of cards.
+ */
+public final class MainActivity extends AppCompatActivity {
+
+  @Inject @Named("hotViralImages") Observable<List<Image>> fetchImagesObservable;
+  private ImgurImageAdapter adapter;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    AndroidInjection.inject(this);
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.activity_main);
+    RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);
+
+    recyclerView.setHasFixedSize(true);
+    LinearLayoutManager layoutManager = new LinearLayoutManager(this);
+    recyclerView.setLayoutManager(layoutManager);
+    adapter = new ImgurImageAdapter();
+    recyclerView.setAdapter(adapter);
+
+    fetchImagesObservable
+        .subscribeOn(Schedulers.newThread())
+        .observeOn(AndroidSchedulers.mainThread())
+        .subscribe(new Observer<List<Image>>() {
+          @Override
+          public void onCompleted() { }
+
+          @Override
+          public void onError(Throwable e) { }
+
+          @Override
+          public void onNext(List<Image> images) {
+            adapter.setData(images);
+          }
+        });
+  }
+
+  @Override
+  protected void onDestroy() {
+    super.onDestroy();
+    fetchImagesObservable.unsubscribeOn(AndroidSchedulers.mainThread());
+  }
+
+  private final class ImgurImageAdapter extends RecyclerView.Adapter<ViewHolder> {
+
+    private List<Image> images = Collections.emptyList();
+
+    public void setData(@NonNull List<Image> images) {
+      this.images = images;
+      notifyDataSetChanged();
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+      return new ViewHolder(LayoutInflater.from(parent.getContext())
+          .inflate(R.layout.image_card, parent, false));
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+      ViewHolder vh = (ViewHolder) holder;
+      Image image = images.get(position);
+      vh.title.setText(
+          TextUtils.isEmpty(image.title) ? image.description : image.title);
+
+      ImgurGlide.with(vh.imageView)
+          .load(image.link)
+          .into(vh.imageView);
+    }
+
+    @Override
+    public int getItemCount() {
+      return images.size();
+    }
+
+    private final class ViewHolder extends RecyclerView.ViewHolder {
+
+      private final ImageView imageView;
+      private final TextView title;
+
+      ViewHolder(View itemView) {
+        super(itemView);
+        imageView = (ImageView) itemView.findViewById(R.id.image);
+        title = (TextView) itemView.findViewById(R.id.title);
+      }
+    }
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivityModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivityModule.java
new file mode 100644
index 000000000..cef304fb2
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/MainActivityModule.java
@@ -0,0 +1,10 @@
+package com.bumptech.glide.samples.imgur;
+
+import dagger.Module;
+import dagger.android.ContributesAndroidInjector;
+
+@Module
+abstract class MainActivityModule {
+  @ContributesAndroidInjector
+  abstract MainActivity contributeMainActivityInjector();
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java
new file mode 100644
index 000000000..85b056916
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ApiModule.java
@@ -0,0 +1,59 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import dagger.Module;
+import dagger.Provides;
+import java.io.IOException;
+import java.util.List;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import okhttp3.Interceptor;
+import okhttp3.OkHttpClient;
+import okhttp3.Response;
+import retrofit2.Retrofit;
+import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
+import retrofit2.converter.gson.GsonConverterFactory;
+import rx.Observable;
+
+/**
+ * Provides classes related to the Imgur API via Dagger.
+ */
+@Singleton
+@Module
+public final class ApiModule {
+
+  @Singleton
+  @Named("hotViralImages")
+  @Provides
+  Observable<List<Image>> provideHotViralImages(ImgurObservables imgurObservables) {
+    return imgurObservables.getHotViralImages(5 /*maxPages*/);
+  }
+
+  @Provides ImgurObservables imgurObservables(ImgurService imgurService) {
+    return new ImgurObservables(imgurService);
+  }
+
+  @Provides ImgurService getImgurService(Retrofit retrofit) {
+    return retrofit.create(ImgurService.class);
+  }
+
+  @Provides Retrofit retrofit() {
+    OkHttpClient client = new OkHttpClient.Builder()
+        .addInterceptor(new Interceptor() {
+          @Override
+          public Response intercept(Chain chain) throws IOException {
+            return chain.proceed(
+                chain.request()
+                    .newBuilder()
+                    .addHeader("Authorization", "Client-ID " + ImgurService.CLIENT_ID)
+                    .build());
+          }
+        })
+        .build();
+    return new Retrofit.Builder()
+        .client(client)
+        .addConverterFactory(GsonConverterFactory.create())
+        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
+        .baseUrl("https://api.imgur.com/3/")
+        .build();
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java
new file mode 100644
index 000000000..6466b1527
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Gallery.java
@@ -0,0 +1,19 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import java.util.List;
+
+/**
+ * Represents Imgur's Gallery resource.
+ *
+ * <p>Populated automatically by GSON.
+ */
+public final class Gallery {
+  public List<Image> data;
+
+  @Override
+  public String toString() {
+    return "Gallery{"
+        + "data=" + data
+        + '}';
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java
new file mode 100644
index 000000000..3f0008234
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/Image.java
@@ -0,0 +1,25 @@
+package com.bumptech.glide.samples.imgur.api;
+
+/**
+ * Represents Imgur's Image resource.
+ *
+ * <p>Populated automatically by GSON
+ */
+public final class Image {
+  public String id;
+  public String title;
+  public String description;
+  public String link;
+  public boolean is_album;
+
+  @Override
+  public String toString() {
+    return "Image{"
+        + "id='" + id + '\''
+        + ", title='" + title + '\''
+        + ", description='" + description + '\''
+        + ", link='" + link + '\''
+        + ", is_album='" + is_album + '\''
+        + '}';
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java
new file mode 100644
index 000000000..26d5f034a
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurObservables.java
@@ -0,0 +1,64 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import rx.Observable;
+import rx.functions.Func1;
+import rx.functions.Func2;
+
+/**
+ * Observables for retrieving metadata from Imgur's API.
+ */
+public final class ImgurObservables {
+
+  private final ImgurService imgurService;
+
+  ImgurObservables(ImgurService imgurService) {
+    this.imgurService = imgurService;
+  }
+
+  public Observable<List<Image>> getHotViralImages(int maxPages) {
+    return Observable.range(0, maxPages)
+        .flatMap(new Func1<Integer, Observable<List<Image>>>() {
+          @Override
+          public Observable<List<Image>> call(Integer integer) {
+            return imgurService.getHotViral(integer).map(new GetData()).flatMap(
+                new Func1<List<Image>, Observable<List<Image>>>() {
+                  @Override
+                  public Observable<List<Image>> call(List<Image> images) {
+                    for (Iterator<Image> iterator = images.iterator(); iterator.hasNext();) {
+                      if (iterator.next().is_album) {
+                        iterator.remove();
+                      }
+                    }
+                    return Observable.just(images);
+                  }
+                });
+          }
+        })
+        .takeWhile(new Func1<List<Image>, Boolean>() {
+          @Override
+          public Boolean call(List<Image> images) {
+            return !images.isEmpty();
+          }
+        })
+        .scan(new Func2<List<Image>, List<Image>, List<Image>>() {
+          @Override
+          public List<Image> call(List<Image> images, List<Image> images2) {
+            List<Image> result = new ArrayList<>(images.size() + images2.size());
+            result.addAll(images);
+            result.addAll(images2);
+            return result;
+          }
+        })
+        .cache();
+  }
+
+  private static class GetData implements Func1<Gallery, List<Image>> {
+    @Override
+    public List<Image> call(Gallery gallery) {
+      return gallery.data;
+    }
+  }
+}
diff --git a/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurService.java b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurService.java
new file mode 100644
index 000000000..ddab15062
--- /dev/null
+++ b/samples/imgur/src/main/java/com/bumptech/glide/samples/imgur/api/ImgurService.java
@@ -0,0 +1,41 @@
+package com.bumptech.glide.samples.imgur.api;
+
+import retrofit2.http.GET;
+import retrofit2.http.Path;
+import rx.Observable;
+
+/**
+ * Define's Imgur's API for Retrofit.
+ */
+public interface ImgurService {
+  String CLIENT_ID = "36d1f6bef16370c";
+
+  @GET("gallery/hot/viral/{page}")
+  Observable<Gallery> getHotViral(@Path("page") int page);
+
+  @GET("gallery/hot/{sort}/{page}.json")
+  Observable<Gallery> getHot(@Path("sort") Sort sort, @Path("page") int page);
+
+  @GET("gallery/{section}/{sort}/{page}.json")
+  Observable<Gallery> getGallery(@Path("section") Section section,
+      @Path("sort") Sort sort, @Path("page") int page);
+
+  /**
+   * Sections that Imgur's API allows us to query from.
+   */
+  enum Section {
+    hot,
+    top,
+    user
+  }
+
+  /**
+   * The sort order for content within a particular section.
+   */
+  enum Sort {
+    viral,
+    top,
+    time,
+    rising
+  }
+}
diff --git a/samples/imgur/src/main/res/layout/activity_main.xml b/samples/imgur/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..4e7309f0a
--- /dev/null
+++ b/samples/imgur/src/main/res/layout/activity_main.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:tools="http://schemas.android.com/tools"
+  tools:context="com.bumptech.glide.samples.imgur.MainActivity">
+
+  <android.support.v7.widget.RecyclerView
+    android:id="@+id/recycler_view"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:scrollbars="vertical"
+    />
+</merge>
diff --git a/samples/imgur/src/main/res/layout/image_card.xml b/samples/imgur/src/main/res/layout/image_card.xml
new file mode 100644
index 000000000..92f2cbb76
--- /dev/null
+++ b/samples/imgur/src/main/res/layout/image_card.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+  xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:card_view="http://schemas.android.com/apk/res-auto"
+  android:layout_width="match_parent"
+  android:layout_height="wrap_content"
+  android:padding="16dp">
+
+  <android.support.v7.widget.CardView
+    android:id="@+id/card_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    card_view:cardCornerRadius="4dp">
+    <LinearLayout
+      android:orientation="vertical"
+      android:padding="16dp"
+      android:gravity="center"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content">
+      <ImageView
+        android:id="@+id/image"
+        android:scaleType="fitCenter"
+        android:layout_width="match_parent"
+        android:layout_height="150dp"
+        android:contentDescription="@null"/>
+      <TextView
+        android:id="@+id/title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:gravity="center"
+        android:paddingTop="16dp"
+        />
+    </LinearLayout>
+  </android.support.v7.widget.CardView>
+</FrameLayout>
diff --git a/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 000000000..9a078e3e1
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 000000000..efc028a63
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..3af2608a4
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..9bec2e623
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 000000000..34947cd6b
Binary files /dev/null and b/samples/imgur/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/samples/imgur/src/main/res/values/colors.xml b/samples/imgur/src/main/res/values/colors.xml
new file mode 100644
index 000000000..5a077b3a7
--- /dev/null
+++ b/samples/imgur/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+  <color name="colorPrimary">#3F51B5</color>
+  <color name="colorPrimaryDark">#303F9F</color>
+  <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/samples/imgur/src/main/res/values/strings.xml b/samples/imgur/src/main/res/values/strings.xml
new file mode 100644
index 000000000..73f9f0e5a
--- /dev/null
+++ b/samples/imgur/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+  <string name="app_name">Imgur</string>
+</resources>
diff --git a/samples/imgur/src/main/res/values/styles.xml b/samples/imgur/src/main/res/values/styles.xml
new file mode 100644
index 000000000..ccfe4e02e
--- /dev/null
+++ b/samples/imgur/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+  <!-- Base application theme. -->
+  <style name="AppTheme" parent="Theme.AppCompat">
+    <!-- Customize your theme here. -->
+    <item name="colorPrimary">@color/colorPrimary</item>
+    <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+    <item name="colorAccent">@color/colorAccent</item>
+  </style>
+
+</resources>
diff --git a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
index 43352acd8..4f600fdc1 100644
--- a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgDrawableTranscoder.java
@@ -2,7 +2,7 @@
 
 import android.graphics.Picture;
 import android.graphics.drawable.PictureDrawable;
-
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.resource.SimpleResource;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
@@ -14,7 +14,7 @@
  */
 public class SvgDrawableTranscoder implements ResourceTranscoder<SVG, PictureDrawable> {
   @Override
-  public Resource<PictureDrawable> transcode(Resource<SVG> toTranscode) {
+  public Resource<PictureDrawable> transcode(Resource<SVG> toTranscode, Options options) {
     SVG svg = toTranscode.get();
     Picture picture = svg.renderToPicture();
     PictureDrawable drawable = new PictureDrawable(picture);
diff --git a/samples/svg/src/main/res/drawable/image_loading.xml b/samples/svg/src/main/res/drawable/image_loading.xml
index ad1bddfad..762e38664 100644
--- a/samples/svg/src/main/res/drawable/image_loading.xml
+++ b/samples/svg/src/main/res/drawable/image_loading.xml
@@ -2,7 +2,7 @@
 <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
     <item>
         <bitmap
-            android:src="@android:drawable/sym_def_app_icon"
+            android:src="@mipmap/ic_launcher"
             android:gravity="center" />
     </item>
     <item
diff --git a/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/settings.gradle b/settings.gradle
index 650b0e229..20c2b4430 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -12,6 +12,7 @@ include ':samples:giphy'
 include ':samples:svg'
 include ':samples:gallery'
 include ':samples:contacturi'
+include ':samples:imgur'
 include ':integration'
 include ':integration:volley'
 include ':integration:okhttp'
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
index 80825fb09..f0d374ff6 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
@@ -198,6 +198,7 @@ public void resetFrameIndex() {
     framePointer = INITIAL_FRAME_POINTER;
   }
 
+  @Deprecated
   @Override
   public int getLoopCount() {
     if (header.loopCount == GifHeader.NETSCAPE_LOOP_COUNT_DOES_NOT_EXIST) {
