diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
index 2eb478ee3..e24f041e8 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
@@ -68,6 +68,7 @@ public boolean startNext() {
               helper.getOptions());
       if (loadData != null && helper.hasLoadPath(loadData.fetcher.getDataClass())) {
         started = true;
+        // 根据给定的数据类型的DataFetcher尝试获取数据，然后尝试通过一个或多个decodePath进行decode。
         loadData.fetcher.loadData(helper.getPriority(), this);
       }
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
index ae7cddb8d..264215119 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
@@ -48,6 +48,7 @@ void onDataFetcherFailed(Key attemptedKey, Exception e, DataFetcher<?> fetcher,
   /**
    * Attempts to a single new {@link com.bumptech.glide.load.data.DataFetcher} and returns true if
    * a {@link com.bumptech.glide.load.data.DataFetcher} was started, and false otherwise.
+   * 从当前策略对应的Generator获取数据，数据获取成功则回调DecodeJob的onDataFetcherReady对资源进行处理。否则尝试从下一个策略的Generator获取数据
    */
   boolean startNext();
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
index 02e80e41f..7afd511d2 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
@@ -129,6 +129,7 @@ ArrayPool getArrayPool() {
         .getRegisteredResourceClasses(model.getClass(), resourceClass, transcodeClass);
   }
 
+  // 判断注册的组件是否可以处理给定的dataClass
   boolean hasLoadPath(Class<?> dataClass) {
     return getLoadPath(dataClass) != null;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 5695be82c..66463e2fb 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -267,6 +267,7 @@ public void run() {
    */
   private void runWrapped() {
      switch (runReason) {
+       // 首次请求时
       case INITIALIZE:
         stage = getNextStage(Stage.INITIALIZE);
         currentGenerator = getNextGenerator();
@@ -301,16 +302,23 @@ private DataFetcherGenerator getNextGenerator() {
     }
   }
 
+  /**
+   * 执行Generators
+   */
   private void runGenerators() {
+    // 获取当前线程
     currentThread = Thread.currentThread();
     startFetchTime = LogTime.getLogTime();
     boolean isStarted = false;
+    // currentGenerator.startNext() : 从当前策略对应的Generator获取数据，数据获取成功则回调DecodeJob的onDataFetcherReady对资源进行处理。否则尝试从下一个策略的Generator获取数据
     while (!isCancelled && currentGenerator != null
         && !(isStarted = currentGenerator.startNext())) {
       stage = getNextStage(stage);
+      // 根据Stage获取到相应的Generator后会执行currentGenerator.startNext()，如果中途startNext返回true，则直接回调，否则最终会得到SOURCE的stage，重新调度任务
       currentGenerator = getNextGenerator();
 
       if (stage == Stage.SOURCE) {
+        // 重新调度当前任务
         reschedule();
         return;
       }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
index 30fde57fd..a59ee146c 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
@@ -27,7 +27,8 @@
  *
  * The smaller the resource you fetch, the less bandwidth and battery life you use, and the lower
  * your memory footprint per resource. </p>
- *
+ * ModelLoader是一个工厂接口。将任意复杂的model转换为准确具体的可以被DataFetcher获取的数据类型。
+ * 每一个model内部实现了一个ModelLoaderFactory，内部实现就是将model转换为Data
  * @param <Model> The type of the model.
  * @param <Data>  The type of the data that can be used by a
  * {@link com.bumptech.glide.load.ResourceDecoder} to decode a resource.
