diff --git a/gradle.properties b/gradle.properties
index f6849fb88..63ca735ce 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,7 +17,7 @@ POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
 ANDROID_SUPPORT_VERSION=26.0.2
 VOLLEY_VERSION=1.0.0
-OK_HTTP_VERSION=3.0.1
+OK_HTTP_VERSION=3.9.0
 ANDROID_GRADLE_VERSION=2.3.0
 
 COVERALLS_GRADLE_VERSION=2.4.0
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 192db6e43..e35699f36 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -359,15 +359,11 @@ protected RequestOptions getMutableOptions() {
     Request request = buildRequest(target);
 
     Request previous = target.getRequest();
-    // When request was failed or cancelled, be sure to use the updated model as it can contains
-    // unexposed data that could help the request to succeed on restart.
-    // See https://github.com/bumptech/glide/issues/2270
-    if (request.isEquivalentTo(previous)
-      && (Preconditions.checkNotNull(previous).isComplete()
-         || Preconditions.checkNotNull(previous).isRunning())) {
+    if (request.isEquivalentTo(previous)) {
       request.recycle();
       // If the request is completed, beginning again will ensure the result is re-delivered,
-      // triggering RequestListeners and Targets. If the request is already
+      // triggering RequestListeners and Targets. If the request is failed, beginning again will
+      // restart the request, giving it another chance to complete. If the request is already
       // running, we can let it continue running without interruption.
       if (!Preconditions.checkNotNull(previous).isRunning()) {
         previous.begin();
diff --git a/library/src/main/java/com/bumptech/glide/load/model/Model.java b/library/src/main/java/com/bumptech/glide/load/model/Model.java
new file mode 100644
index 000000000..616b9f390
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/model/Model.java
@@ -0,0 +1,28 @@
+package com.bumptech.glide.load.model;
+
+/**
+ * An optional interface that models can implement to enhance control over Glide behaviors.
+ */
+public interface Model {
+
+    /**
+     * Returns {@code true} if this model produces the same image using the same mechanism
+     * (server, authentication, source etc) as the given model.
+     * <p>
+     * Models must also implement {@link #equals(Object other)} and {@link #hashCode()}
+     * to ensure that caching functions correctly.
+     * If this object returns {@code true} from this method for a given Model,
+     * it must also be equal to and have the same hash code as the given model.
+     * <p>
+     * However, this model may be equal to and have the same hash code as a given model
+     * but still return {@code false} from this method.
+     * This method optionally allows you to differentiate between Models that load the same image
+     * via multiple different means.
+     * For example one Model might load the image from server A and another model might load
+     * the same image from server B.
+     * The models must be equal to each other with the same hash code because they load
+     * the same image. However two requests made with the different models are not exactly the
+     * same because the way the image is loaded will differ.
+     */
+    boolean isEquivalentTo(Object other);
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index 4ba29827f..e5a1ec152 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -99,7 +99,7 @@ public synchronized boolean isCancelled() {
 
   @Override
   public synchronized boolean isDone() {
-    return isCancelled || resultReceived;
+    return isCancelled || resultReceived || loadFailed;
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 6828e062d..146075dd2 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -578,7 +578,7 @@ public boolean isEquivalentTo(Request o) {
       SingleRequest that = (SingleRequest) o;
       return overrideWidth == that.overrideWidth
           && overrideHeight == that.overrideHeight
-          && Util.bothNullOrEqual(model, that.model)
+          && Util.bothModelsNullEquivalentOrEquals(model, that.model)
           && transcodeClass.equals(that.transcodeClass)
           && requestOptions.equals(that.requestOptions)
           && priority == that.priority;
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 06ecefd40..335c00000 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -247,22 +247,44 @@ void clearCallbacksAndListener() {
       cbs.clear();
     }
 
-    private boolean isViewStateAndSizeValid(int width, int height) {
-      return isViewStateValid() && isSizeValid(width) && isSizeValid(height);
+    private boolean isViewStateAndSizeValid(int currentWidth, int currentHeight) {
+      LayoutParams params = view.getLayoutParams();
+
+      int paramWidth;
+      int paramHeight;
+      if (params == null) {
+        paramWidth = 0;
+        paramHeight = 0;
+      } else {
+        paramWidth = params.width;
+        paramHeight = params.height;
+      }
+      return isDimensionValid(paramWidth, currentWidth)
+          && isDimensionValid(paramHeight, currentHeight);
     }
 
-    private boolean isViewStateValid() {
-      // We consider the view state as valid if the view has
-      // non-null layout params and a non-zero layout width and height.
-      if (view.getLayoutParams() != null
-          && view.getLayoutParams().width > 0
-          && view.getLayoutParams().height > 0) {
+    private boolean isDimensionValid(int layoutParam, int dimen) {
+      // If the layout parameter is a fixed size and the padding adjusted parameter (dimen in this
+      // case) is valid, we can trust that the size won't change due to a layout pass.
+      if (layoutParam > 0 && dimen > 0) {
+        return true;
+      }
+
+      // SIZE_ORIGINAL is not dependent on a layout pass.
+      if (dimen == Target.SIZE_ORIGINAL) {
         return true;
       }
 
-      // Avoid using isLaidOut because it appears to be false after a View is re-attached to a
-      // RecyclerView if the View's size before and after the attach are the same. See #1981.
-      return !view.isLayoutRequested();
+      // TODO: Is this correct? The view's parent could change size after a layout.
+      // We're making an assumption that MATCH_PARENT won't change after it has been set once, so
+      // future layout passes typically won't change it. This probably will break in some cases.
+      if (layoutParam == LayoutParams.MATCH_PARENT && dimen > 0) {
+        return true;
+      }
+
+      // We can trust a non-zero dimension if no layout pass is pending, otherwise we're going to
+      // have to wait for a layout pass.
+      return dimen > 0 && !view.isLayoutRequested();
     }
 
     private int getTargetHeight() {
@@ -281,27 +303,17 @@ private int getTargetWidth() {
 
     private int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
       int adjustedViewSize = viewSize - paddingSize;
-      if (isSizeValid(adjustedViewSize)) {
-        return adjustedViewSize;
-      }
-
-      if (paramSize == PENDING_SIZE) {
-        return PENDING_SIZE;
-      }
-
       if (paramSize == LayoutParams.WRAP_CONTENT) {
         return SIZE_ORIGINAL;
       } else if (paramSize > 0) {
         return paramSize - paddingSize;
+      } else if (adjustedViewSize > 0) {
+        return adjustedViewSize;
       } else {
         return PENDING_SIZE;
       }
     }
 
-    private boolean isSizeValid(int size) {
-      return size > 0 || size == SIZE_ORIGINAL;
-    }
-
     private static class SizeDeterminerLayoutListener implements ViewTreeObserver
         .OnPreDrawListener {
       private final WeakReference<SizeDeterminer> sizeDeterminerRef;
diff --git a/library/src/main/java/com/bumptech/glide/util/Util.java b/library/src/main/java/com/bumptech/glide/util/Util.java
index 00cedcece..1f4d568e3 100644
--- a/library/src/main/java/com/bumptech/glide/util/Util.java
+++ b/library/src/main/java/com/bumptech/glide/util/Util.java
@@ -4,6 +4,8 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.os.Looper;
+
+import com.bumptech.glide.load.model.Model;
 import com.bumptech.glide.request.target.Target;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -190,6 +192,16 @@ public static boolean bothNullOrEqual(Object a, Object b) {
     return a == null ? b == null : a.equals(b);
   }
 
+  public static boolean bothModelsNullEquivalentOrEquals(Object a, Object b) {
+    if (a == null) {
+      return b == null;
+    }
+    if (a instanceof Model) {
+      return ((Model) a).isEquivalentTo(b);
+    }
+    return a.equals(b);
+  }
+
   public static int hashCode(int value) {
     return hashCode(value, HASH_ACCUMULATOR);
   }
diff --git a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
index 1d0dd6e81..7d0756022 100644
--- a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
@@ -98,12 +98,11 @@ public void testRetrievesRequestFromPreviousTargetForView() {
   }
 
   @Test
-  public void testSizeCallbackIsCalledSynchronouslyIfViewSizeSet() {
+  public void getSize_withValidDimens_noLayoutRequested_callsSizeReady() {
     int dimens = 333;
     shadowView
         .setWidth(dimens)
-        .setHeight(dimens)
-        .setIsLaidOut(true);
+        .setHeight(dimens);
 
     target.getSize(cb);
 
@@ -111,11 +110,24 @@ public void testSizeCallbackIsCalledSynchronouslyIfViewSizeSet() {
   }
 
   @Test
-  public void testSizeCallbackIsCalledSynchronouslyIfLayoutParamsConcreteSizeSet() {
+  public void getSize_withValidDimens_layoutRequested_doesNotCallSizeReady() {
+    int dimens = 333;
+    shadowView
+        .setWidth(dimens)
+        .setHeight(dimens);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withFixedLayoutParams_callsSizeReady() {
     int dimens = 444;
     LayoutParams layoutParams = new LayoutParams(dimens, dimens);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -123,11 +135,58 @@ public void testSizeCallbackIsCalledSynchronouslyIfLayoutParamsConcreteSizeSet()
   }
 
   @Test
-  public void getSize_withBothWrapContent_returnsSizeOriginal() {
+  public void getSize_withFixedWidthSetHeight_noLayoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);
+    shadowView.setHeight(200);
+    view.setLayoutParams(layoutParams);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(eq(400), eq(200));
+  }
+
+  @Test
+  public void getSize_withFixedWidthSetHeight_layoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);
+    shadowView.setHeight(200);
+    view.setLayoutParams(layoutParams);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+
+  @Test
+  public void getSize_withFixedHeightSetWidth_noLayoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(0 /*width*/, 400 /*height*/);
+    shadowView.setWidth(200);
+    view.setLayoutParams(layoutParams);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(eq(200), eq(400));
+  }
+
+  @Test
+  public void getSize_withFixedHeightSetWidth_layoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(0 /*width*/, 400 /*height*/);
+    shadowView.setWidth(200);
+    view.setLayoutParams(layoutParams);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withBothWrapContent_isValid_andReturnsSizeOriginal() {
     LayoutParams layoutParams =
         new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -135,11 +194,11 @@ public void getSize_withBothWrapContent_returnsSizeOriginal() {
   }
 
   @Test
-  public void getSize_withWrapContentWidthAndValidHeight_usesSizeOriginalWidthValidHeight() {
+  public void getSize_withWrapContentWidthAndValidHeight_isValid_andUsesSizeOriginalWidth() {
     int height = 100;
     LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, height);
     view.setLayoutParams(params);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -147,11 +206,11 @@ public void getSize_withWrapContentWidthAndValidHeight_usesSizeOriginalWidthVali
   }
 
   @Test
-  public void getSize_withWrapContentHeightAndValidWidth_returnsWidthAndSizeOriginalHeight() {
+  public void getSize_withWrapContentHeightAndValidWidth_isValid_andUsesSizeOriginalHeight() {
     int width = 100;
     LayoutParams params = new LayoutParams(width, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(params);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -159,7 +218,48 @@ public void getSize_withWrapContentHeightAndValidWidth_returnsWidthAndSizeOrigin
   }
 
   @Test
-  public void getSize_withWrapContentWidthAndMatchParentHeight_usesSizeOriginalWidthAndHeight() {
+  public void getSize_withWrapContentHeightSetWidth_noLayoutRequested_callsSizeReady() {
+    int width = 100;
+    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(width);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withWrapContentHeightSetWidth_previousHeight_usesSizeOriginal() {
+    int width = 100;
+    int oldHeight = 500;
+    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView
+        .setWidth(width)
+        .setHeight(oldHeight);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
+
+  }
+
+  @Test
+  public void getSize_withWrapContentHeightViewWidth_layoutRequested_doesNotCallSizeReady() {
+    int width = 100;
+    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(width);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withWrapContentWidthAndMatchParentHeight_callsSizeReadyOnPreDraw() {
     LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
     view.setLayoutParams(params);
 
@@ -169,8 +269,8 @@ public void getSize_withWrapContentWidthAndMatchParentHeight_usesSizeOriginalWid
 
     int height = 32;
     shadowView
-        .setHeight(height)
-        .setIsLaidOut(true);
+        .setHeight(height);
+    view.requestLayout();
 
     shadowObserver.fireOnPreDrawListeners();
 
@@ -178,7 +278,30 @@ public void getSize_withWrapContentWidthAndMatchParentHeight_usesSizeOriginalWid
   }
 
   @Test
-  public void getSize_withMatchParentWidthAndWrapContentHeight_usesWidthAndSizeOriginalHeight() {
+  public void getSize_withWrapContentWidthMatchParentHeightAndSetHeight_noLayoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+    view.setLayoutParams(params);
+    shadowView.setHeight(200);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, 200);
+  }
+
+  @Test
+  public void getSize_withWrapContentWidthMatchParentHeightAndSetHeight_layoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+    view.setLayoutParams(params);
+    shadowView.setHeight(200);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, 200);
+  }
+
+  @Test
+  public void getSize_withMatchParentWidthAndWrapContentHeight_callsSizeReadyOnPreDraw() {
     LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(params);
 
@@ -188,15 +311,39 @@ public void getSize_withMatchParentWidthAndWrapContentHeight_usesWidthAndSizeOri
 
     int width = 32;
     shadowView
-        .setWidth(width)
-        .setIsLaidOut(true);
+        .setWidth(width);
+    view.requestLayout();
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
   }
 
+
+  @Test
+  public void getSize_withMatchParentWidthWrapContentHeightAndSetHeight_noLayoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(200);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(200, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withMatchParentWidthWrapContentHeightAndSetHeight_layoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(200);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(200, Target.SIZE_ORIGINAL);
+  }
+
   @Test
-  public void testMatchParentWidthAndHeight() {
+  public void getSize_withMatchParentWidthAndHeight_validDimens_layoutRequested_callsSizeReady() {
     LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
     view.setLayoutParams(params);
 
@@ -209,27 +356,82 @@ public void testMatchParentWidthAndHeight() {
     shadowView
         .setWidth(width)
         .setHeight(height)
-        .setIsLaidOut(true);
+        .requestLayout();
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
   }
 
   @Test
-  public void testSizeCallbackIsCalledPreDrawIfNoDimensAndNoLayoutParams() {
+  public void getSize_onPreDraw_withValidWidthAndHeight_noLayoutRequested_callsSizeReady() {
     target.getSize(cb);
 
     int width = 12;
     int height = 32;
     shadowView
         .setWidth(width)
-        .setHeight(height)
-        .setIsLaidOut(true);
+        .setHeight(height);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
   }
 
+  @Test
+  public void getSize_onPreDraw_withValidWidthAndHeight_layoutRequested_doesNotCallSizeReady() {
+    target.getSize(cb);
+
+    int width = 12;
+    int height = 32;
+    shadowView
+        .setWidth(width)
+        .setHeight(height);
+    view.requestLayout();
+    shadowObserver.fireOnPreDrawListeners();
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withWrapContentSize_callsSizeReadyWithSizeOriginal() {
+    view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withValidViewDimensions_andWrapContent_callsSizeReadyWithSizeOriginal() {
+    view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+    shadowView
+        .setWidth(100)
+        .setHeight(100);
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withValidViewDimensions_andFixedParams_callsSizeReadyWithParams() {
+    view.setLayoutParams(new LayoutParams(100, 100));
+    shadowView
+        .setWidth(50)
+        .setHeight(50);
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(100, 100);
+  }
+
+  @Test
+  public void getSize_withValidViewDimensions_invalidParams_callsSizeReadyWithViewDimensions() {
+    view.setLayoutParams(new LayoutParams(0, 0));
+    shadowView
+        .setWidth(100)
+        .setHeight(100);
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(100, 100);
+  }
+
   @Test
   public void testSizeCallbacksAreCalledInOrderPreDraw() {
     SizeReadyCallback[] cbs = new SizeReadyCallback[25];
@@ -241,8 +443,7 @@ public void testSizeCallbacksAreCalledInOrderPreDraw() {
     int width = 100, height = 111;
     shadowView
         .setWidth(width)
-        .setHeight(height)
-        .setIsLaidOut(true);
+        .setHeight(height);
     shadowObserver.fireOnPreDrawListeners();
 
     InOrder order = inOrder((Object[]) cbs);
@@ -257,7 +458,6 @@ public void testDoesNotNotifyCallbackTwiceIfAddedTwice() {
     target.getSize(cb);
 
     view.setLayoutParams(new LayoutParams(100, 100));
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb, times(1)).onSizeReady(anyInt(), anyInt());
@@ -278,7 +478,6 @@ public void testDoesAddSecondListenerIfFirstListenerIsRemovedBeforeSecondRequest
     target.getSize(cb1);
 
     view.setLayoutParams(new LayoutParams(100, 100));
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     assertThat(shadowObserver.getPreDrawListeners()).hasSize(0);
@@ -310,7 +509,6 @@ public void testSizeCallbackIsCalledPreDrawIfNoDimensAndNoLayoutParamsButLayoutP
     int height = 354;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
@@ -322,7 +520,6 @@ public void testCallbackIsNotCalledTwiceIfPreDrawFiresTwice() {
 
     LayoutParams layoutParams = new LayoutParams(1234, 4123);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
     shadowObserver.fireOnPreDrawListeners();
 
@@ -340,7 +537,6 @@ public void testCallbacksFromMultipleRequestsAreNotifiedOnPreDraw() {
     int height = 875;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
     shadowObserver.fireOnPreDrawListeners();
 
@@ -356,7 +552,6 @@ public void testDoesNotThrowOnPreDrawIfViewTreeObserverIsDead() {
     int height = 2;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.setIsAlive(false);
     shadowObserver.fireOnPreDrawListeners();
 
@@ -372,7 +567,7 @@ public void testThrowsIfGivenNullView() {
   public void testDecreasesDimensionsByViewPadding() {
     view.setLayoutParams(new LayoutParams(100, 100));
     view.setPadding(25, 25, 25, 25);
-    shadowView.setIsLaidOut(true);
+    view.layout(0, 0, 100, 100);
 
     target.getSize(cb);
 
@@ -381,22 +576,18 @@ public void testDecreasesDimensionsByViewPadding() {
 
   @Test
   public void getSize_withValidWidthAndHeight_notLaidOut_notLayoutRequested_callsSizeReady() {
+    view.setLayoutParams(new LayoutParams(0, 0));
     shadowView
         .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(false);
+        .setHeight(100);
     target.getSize(cb);
 
     verify(cb).onSizeReady(100, 100);
   }
 
   @Test
-  public void getSize_withLayoutParams_notLaidOut_doesCallSizeReady() {
-    shadowView
-        .setLayoutParams(new LayoutParams(10, 10))
-        .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(false);
+  public void getSize_withLayoutParams_notLaidOut_notLayoutRequested_callsSizeReady() {
+    view.setLayoutParams(new LayoutParams(10, 10));
     target.getSize(cb);
 
     verify(cb, times(1)).onSizeReady(anyInt(), anyInt());
@@ -404,11 +595,11 @@ public void getSize_withLayoutParams_notLaidOut_doesCallSizeReady() {
 
   @Test
   public void getSize_withLayoutParams_emptyParams_notLaidOutOrLayoutRequested_callsSizeReady() {
+   view
+        .setLayoutParams(new LayoutParams(0, 0));
     shadowView
-        .setLayoutParams(new LayoutParams(0, 0))
         .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(false);
+        .setHeight(100);
     target.getSize(cb);
 
     verify(cb).onSizeReady(100, 100);
@@ -431,8 +622,7 @@ public void getSize_withValidWidthAndHeight_preV19_layoutRequested_doesNotCallSi
   public void getSize_withWidthAndHeightEqualToPadding_doesNotCallSizeReady() {
     shadowView
         .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(true);
+        .setHeight(100);
 
     view.setPadding(50, 50, 50, 50);
 
@@ -460,6 +650,7 @@ public void removeOnPreDrawListener(OnPreDrawListener listener) {
       preDrawListeners.remove(listener);
     }
 
+    @SuppressWarnings("WeakerAccess")
     @Implementation
     public boolean isAlive() {
       return isAlive;
@@ -471,28 +662,27 @@ private void checkIsAlive() {
       }
     }
 
-    public void setIsAlive(boolean isAlive) {
+    void setIsAlive(boolean isAlive) {
       this.isAlive = isAlive;
     }
 
-    public void fireOnPreDrawListeners() {
+    void fireOnPreDrawListeners() {
       for (OnPreDrawListener listener : preDrawListeners) {
         listener.onPreDraw();
       }
     }
 
-    public List<OnPreDrawListener> getPreDrawListeners() {
+    List<OnPreDrawListener> getPreDrawListeners() {
       return preDrawListeners;
     }
   }
 
   @Implements(View.class)
   public static class SizedShadowView extends ShadowView {
+
     private int width;
     private int height;
-    private LayoutParams layoutParams;
-    private boolean isLaidOut;
-    private boolean isLayoutRequested;
+    private LayoutParams params;
 
     public SizedShadowView setWidth(int width) {
       this.width = width;
@@ -504,19 +694,18 @@ public SizedShadowView setHeight(int height) {
       return this;
     }
 
-    public SizedShadowView setLayoutParams(LayoutParams layoutParams) {
-      this.layoutParams = layoutParams;
-      return this;
-    }
-
-    public SizedShadowView setIsLaidOut(boolean isLaidOut) {
-      this.isLaidOut = isLaidOut;
-      return this;
+    // Implemented because get/setLayoutParams is not implemented by ShadowView.
+    @Implementation
+    @SuppressWarnings("unused")
+    public void setLayoutParams(LayoutParams params) {
+      this.params = params;
     }
 
+    // Implemented because get/setLayoutParams is not implemented by ShadowView.
     @Implementation
-    public void requestLayout() {
-      isLayoutRequested = true;
+    @SuppressWarnings("unused")
+    public LayoutParams getLayoutParams() {
+      return params;
     }
 
     @Implementation
@@ -528,26 +717,12 @@ public int getWidth() {
     public int getHeight() {
       return height;
     }
-
-    @Implementation
-    public boolean isLaidOut() {
-      return isLaidOut;
-    }
-
-    @Implementation
-    public boolean isLayoutRequested() {
-      return isLayoutRequested;
-    }
-
-    @Implementation
-    public LayoutParams getLayoutParams() {
-      return layoutParams;
-    }
   }
 
+
   private static class TestViewTarget extends ViewTarget<View, Object> {
 
-    public TestViewTarget(View view) {
+    TestViewTarget(View view) {
       super(view);
     }
 
