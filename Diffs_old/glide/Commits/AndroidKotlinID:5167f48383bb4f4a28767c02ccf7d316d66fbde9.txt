diff --git a/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
index 9f5d79e62..85df91b5f 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
@@ -123,7 +123,7 @@ public int read(@NonNull byte[] buffer, int byteOffset, int byteCount) throws IO
   public long skip(long byteCount) throws IOException {
     long skipped = super.skip(byteCount);
     if (skipped > 0) {
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       position = (int) (position + skipped);
     }
     return skipped;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
index c8139383f..88ecc15a3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
@@ -385,7 +385,7 @@ public synchronized long skip(long byteCount) throws IOException {
       pos = (int) (pos + byteCount);
       return byteCount;
     }
-    // See http://errorprone.info/bugpattern/IntLongMath.
+    // See https://errorprone.info/bugpattern/IntLongMath.
     long read = (long) count - pos;
     pos = count;
 
@@ -394,7 +394,7 @@ public synchronized long skip(long byteCount) throws IOException {
         return read;
       }
       if (count - pos >= byteCount - read) {
-        // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+        // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
         pos = (int) (pos + byteCount - read);
         return byteCount;
       }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index e46188c9e..75d3a2325 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -561,6 +561,8 @@ public RequestOptions priority(@NonNull Priority priority) {
   /**
    * Sets an {@link Drawable} to display while a resource is loading.
    *
+   * <p>Replaces any previous calls to this method or {@link #placeholder(int)}.
+   *
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
@@ -574,6 +576,9 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
     this.placeholderDrawable = drawable;
     fields |= PLACEHOLDER;
 
+    placeholderId = 0;
+    fields &= ~PLACEHOLDER_ID;
+
     return selfOrThrowIfLocked();
   }
 
@@ -581,6 +586,8 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
    * Sets an Android resource id for a {@link Drawable} resource to
    * display while a resource is loading.
    *
+   * <p>Replaces any previous calls to this method or {@link #placeholder(Drawable)}
+   *
    * @param resourceId The id of the resource to use as a placeholder
    * @return This request builder.
    */
@@ -594,6 +601,9 @@ public RequestOptions placeholder(@DrawableRes int resourceId) {
     this.placeholderId = resourceId;
     fields |= PLACEHOLDER_ID;
 
+    placeholderDrawable = null;
+    fields &= ~PLACEHOLDER;
+
     return selfOrThrowIfLocked();
   }
 
@@ -604,6 +614,8 @@ public RequestOptions placeholder(@DrawableRes int resourceId) {
    * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the
    * error drawable is not set, the placeholder will be displayed.
    *
+   * <p>Replaces any previous calls to this method or {@link #fallback(int)}.
+   *
    * @see #placeholder(Drawable)
    * @see #placeholder(int)
    *
@@ -620,6 +632,9 @@ public RequestOptions fallback(@Nullable Drawable drawable) {
     this.fallbackDrawable = drawable;
     fields |= FALLBACK;
 
+    fallbackId = 0;
+    fields &= ~FALLBACK_ID;
+
     return selfOrThrowIfLocked();
   }
 
@@ -630,6 +645,8 @@ public RequestOptions fallback(@Nullable Drawable drawable) {
    * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If
    * the error drawable is not set, the placeholder will be displayed.
    *
+   * <p>Replaces any previous calls to this method or {@link #fallback(Drawable)}.
+   *
    * @see #placeholder(Drawable)
    * @see #placeholder(int)
    *
@@ -646,12 +663,17 @@ public RequestOptions fallback(@DrawableRes int resourceId) {
     this.fallbackId = resourceId;
     fields |= FALLBACK_ID;
 
+    fallbackDrawable = null;
+    fields &= ~FALLBACK;
+
     return selfOrThrowIfLocked();
   }
 
   /**
    * Sets a {@link Drawable} to display if a load fails.
    *
+   * <p>Replaces any previous calls to this method or {@link #error(int)}
+   *
    * @param drawable The drawable to display.
    * @return This request builder.
    */
@@ -665,12 +687,17 @@ public RequestOptions error(@Nullable Drawable drawable) {
     this.errorPlaceholder = drawable;
     fields |= ERROR_PLACEHOLDER;
 
+    this.errorId = 0;
+    fields &= ~ERROR_ID;
+
     return selfOrThrowIfLocked();
   }
 
   /**
    * Sets a resource to display if a load fails.
    *
+   * <p>Replaces any previous calls to this method or {@link #error(Drawable)}
+   *
    * @param resourceId The id of the resource to use as a placeholder.
    * @return This request builder.
    */
@@ -683,6 +710,9 @@ public RequestOptions error(@DrawableRes int resourceId) {
     this.errorId = resourceId;
     fields |= ERROR_ID;
 
+    this.errorPlaceholder = null;
+    fields &= ~ERROR_PLACEHOLDER;
+
     return selfOrThrowIfLocked();
   }
 
@@ -1391,15 +1421,23 @@ public RequestOptions apply(@NonNull RequestOptions other) {
     }
     if (isSet(other.fields, ERROR_PLACEHOLDER)) {
       errorPlaceholder = other.errorPlaceholder;
+      errorId = 0;
+      fields &= ~ERROR_ID;
     }
     if (isSet(other.fields, ERROR_ID)) {
       errorId = other.errorId;
+      errorPlaceholder = null;
+      fields &= ~ERROR_PLACEHOLDER;
     }
     if (isSet(other.fields, PLACEHOLDER)) {
       placeholderDrawable = other.placeholderDrawable;
+      placeholderId = 0;
+      fields &= ~PLACEHOLDER_ID;
     }
     if (isSet(other.fields, PLACEHOLDER_ID)) {
       placeholderId = other.placeholderId;
+      placeholderDrawable = null;
+      fields &= ~PLACEHOLDER;
     }
     if (isSet(other.fields, IS_CACHEABLE)) {
       isCacheable = other.isCacheable;
@@ -1416,9 +1454,13 @@ public RequestOptions apply(@NonNull RequestOptions other) {
     }
     if (isSet(other.fields, FALLBACK)) {
       fallbackDrawable = other.fallbackDrawable;
+      fallbackId = 0;
+      fields &= ~FALLBACK_ID;
     }
     if (isSet(other.fields, FALLBACK_ID)) {
       fallbackId = other.fallbackId;
+      fallbackDrawable = null;
+      fields &= ~FALLBACK;
     }
     if (isSet(other.fields, THEME)) {
       theme = other.theme;
diff --git a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
index bf8cee9a1..d2ce2841d 100644
--- a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
@@ -84,7 +84,7 @@ private long getBytesToRead(long targetByteCount) {
 
   private void updateAvailableBytesAfterRead(long bytesRead) {
     if (availableBytes != UNSET && bytesRead != END_OF_STREAM) {
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       availableBytes = (int) (availableBytes - bytesRead);
     }
   }
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 87d0395d3..15bf84671 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -94,7 +94,7 @@ public void testAllocationOrderThatDoesNotFitExactlyIntoGivenSizeRoundsDown() {
     for (PreFillType current : sizes) {
       int currentSize =
           Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       expectedSize = (int) (expectedSize + (currentSize * (maxSize / (3 * currentSize))));
     }
 
diff --git a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
index aa61bc883..c894ded76 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
@@ -294,6 +294,321 @@ public void isDiskCacheStrategySet_withDiskCacheStrategyNonDefault_isTrue() {
         .isTrue();
   }
 
+  @Test
+  public void getPlaceholder_afterSettingPlaceholderId_returnsNul() {
+    assertThat(
+        options
+            .placeholder(new ColorDrawable(Color.RED))
+            .placeholder(android.R.drawable.star_on)
+            .getPlaceholderDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getPlaceholder_afterApplyingOptionsWithPlaceholderId_returnsNull() {
+    RequestOptions toApply = new RequestOptions().placeholder(android.R.drawable.star_on);
+
+    assertThat(
+        options
+            .placeholder(new ColorDrawable(Color.RED))
+            .apply(toApply)
+            .getPlaceholderDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getPlaceholder_afterApplyingOptionsWithPlaceholderDrawable_returnsNewDrawable() {
+    Drawable expected = new ColorDrawable(Color.GREEN);
+    RequestOptions toApply = new RequestOptions().placeholder(expected);
+
+    assertThat(
+        options
+          .placeholder(new ColorDrawable(Color.RED))
+          .apply(toApply)
+          .getPlaceholderDrawable())
+        .isEqualTo(expected);
+  }
+
+  /**
+   * Verifies that we set the flags for placeholder id correctly when applying a placeholder id via
+   * another RequestOptions.
+   */
+  @Test
+  public void placeholderIdFlag_afterApplyingIdViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .placeholder(new ColorDrawable(Color.RED))
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .placeholder(android.R.drawable.star_on)))
+            .getPlaceholderDrawable())
+        .isNull();
+  }
+
+
+  @Test
+  public void getPlaceholderId_afterSettingPlaceholderDrawable_returnsZero() {
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .placeholder(new ColorDrawable(Color.RED))
+            .getPlaceholderId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getPlaceholderId_afterApplyingOptionsWithPlaceholderDrawable_returnsZero() {
+    RequestOptions toApply = new RequestOptions().placeholder(new ColorDrawable(Color.RED));
+
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .apply(toApply)
+            .getPlaceholderId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getPlaceholderId_afterApplyingOptionsWithId_returnsNewId() {
+    int expectedId = android.R.drawable.star_off;
+    RequestOptions toApply = new RequestOptions().placeholder(expectedId);
+
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .apply(toApply)
+            .getPlaceholderId())
+        .isEqualTo(expectedId);
+  }
+
+  /**
+   * Verifies that we set the flags for placeholder correctly when applying a placeholder via
+   * another RequestOptions.
+   */
+  @Test
+  public void placeholderFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .placeholder(new ColorDrawable(Color.RED))))
+            .getPlaceholderId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallback_afterSettingFallbackId_returnsNull() {
+    assertThat(
+        options
+            .fallback(new ColorDrawable(Color.RED))
+            .fallback(android.R.drawable.star_on)
+            .getFallbackDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getFallback_afterApplyingOptionsWithFallbackId_returnsNull() {
+    RequestOptions toApply = new RequestOptions().fallback(android.R.drawable.star_on);
+
+    assertThat(
+        options
+            .fallback(new ColorDrawable(Color.RED))
+            .apply(toApply)
+            .getFallbackDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getFallback_afterApplyingOptionsWithFallbackDrawable_returnsNewDrawable() {
+    Drawable expected = new ColorDrawable(Color.GREEN);
+    RequestOptions toApply = new RequestOptions();
+
+    assertThat(
+        options
+          .fallback(new ColorDrawable(Color.RED))
+          .apply(toApply)
+          .getFallbackDrawable())
+        .isEqualTo(expected);
+  }
+
+  /**
+   * Verifies that we set the flags for fallback correctly when applying a fallback via
+   * another RequestOptions.
+   */
+  @Test
+  public void fallbackFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .fallback(android.R.drawable.star_on)
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .fallback(new ColorDrawable(Color.RED))))
+            .getFallbackId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallbackId_afterSettingFallbackDrawable_returnsZero() {
+    assertThat(
+        options
+            .fallback(android.R.drawable.star_on)
+            .fallback(new ColorDrawable(Color.RED))
+            .getFallbackId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallbackId_afterApplyingOptionsWithFallbackDrawable_returnsZero() {
+    RequestOptions toApply = new RequestOptions().fallback(new ColorDrawable(Color.RED));
+
+    assertThat(
+        options
+            .fallback(android.R.drawable.star_on)
+            .apply(toApply)
+            .getFallbackId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallbackId_afterApplyingOptionsWithFallbackId_returnsNewFallbackId() {
+    RequestOptions toApply = new RequestOptions().fallback(android.R.drawable.star_off);
+
+    assertThat(
+        options
+          .fallback(android.R.drawable.star_on)
+          .apply(toApply)
+          .getFallbackId())
+        .isEqualTo(android.R.drawable.star_off);
+  }
+
+  /**
+   * Verifies that we set the flags for fallback id correctly when applying a fallback id via
+   * another RequestOptions.
+   */
+  @Test
+  public void fallbackIdFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .fallback(new ColorDrawable(Color.RED))
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .fallback(android.R.drawable.star_on)))
+            .getFallbackDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getError_afterSettingErrorId_returnsNull() {
+    assertThat(
+        options
+            .error(new ColorDrawable(Color.RED))
+            .error(android.R.drawable.star_on)
+            .getErrorPlaceholder())
+        .isNull();
+  }
+
+  @Test
+  public void getError_afterApplyingOptionsWithErrorId_returnsNull() {
+    RequestOptions toApply = new RequestOptions().error(android.R.drawable.star_on);
+
+    assertThat(
+        options
+            .error(new ColorDrawable(Color.RED))
+            .apply(toApply)
+            .getErrorPlaceholder())
+        .isNull();
+  }
+
+  @Test
+  public void getError_afterApplyingOptionsWithErrorDrawable_returnsNewErrorDrawable() {
+    Drawable expected = new ColorDrawable(Color.GREEN);
+    RequestOptions toApply = new RequestOptions().error(expected);
+
+    assertThat(
+        options
+          .error(new ColorDrawable(Color.RED))
+          .apply(toApply)
+          .getErrorPlaceholder())
+        .isEqualTo(expected);
+  }
+
+  /**
+   * Verifies that we set the flags for error correctly when applying an error via
+   * another RequestOptions.
+   */
+  @Test
+  public void errorFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .error(android.R.drawable.star_on)
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .error(new ColorDrawable(Color.RED))))
+            .getErrorId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getErrorId_afterSettingErrorDrawable_returnsZero() {
+    assertThat(
+        options
+            .error(android.R.drawable.star_on)
+            .error(new ColorDrawable(Color.RED))
+            .getErrorId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getErrorId_afterApplyingOptionsWithErrorDrawable_returnsZero() {
+    RequestOptions toApply = new RequestOptions().error(new ColorDrawable(Color.RED));
+
+    assertThat(
+        options.error(android.R.drawable.star_on)
+            .apply(toApply)
+            .getErrorId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getErrorId_afterApplyingOptionsWithErrorId_returnsNewErrorId() {
+    RequestOptions toApply = new RequestOptions().error(android.R.drawable.star_off);
+
+    assertThat(
+        options.error(android.R.drawable.star_on)
+            .apply(toApply)
+            .getErrorId())
+        .isEqualTo(android.R.drawable.star_off);
+  }
+
+  /**
+   * Verifies that we set the flags for error id correctly when applying a fallback id via
+   * another RequestOptions.
+   */
+  @Test
+  public void errorIdFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .error(new ColorDrawable(Color.RED))
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .error(android.R.drawable.star_on)))
+            .getErrorPlaceholder())
+        .isNull();
+  }
+
   @Test
   public void testEqualsHashCode() {
     Drawable first = new ColorDrawable(Color.RED);
