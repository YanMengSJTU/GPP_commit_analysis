diff --git a/library/src/com/bumptech/glide/resize/ImageManager.java b/library/src/com/bumptech/glide/resize/ImageManager.java
index a7f2391df..e2467c2e8 100644
--- a/library/src/com/bumptech/glide/resize/ImageManager.java
+++ b/library/src/com/bumptech/glide/resize/ImageManager.java
@@ -430,6 +430,16 @@ public void releaseBitmap(final Bitmap b) {
         bitmapReferenceCounter.releaseBitmap(b);
     }
 
+    public void clearMemory() {
+        memoryCache.clearMemory();
+        bitmapPool.clearMemory();
+    }
+
+    public void trimMemory(int level) {
+        memoryCache.trimMemory(level);
+        bitmapPool.trimMemory(level);
+    }
+
     /**
      * Shuts down all of the background threads used by the ImageManager including the executor service
      */
diff --git a/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java
index 3aff6c698..72c825d66 100644
--- a/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java
+++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPool.java
@@ -5,4 +5,6 @@
 public interface BitmapPool {
     public boolean put(Bitmap bitmap);
     public Bitmap get(int width, int height, Bitmap.Config config);
+    public void clearMemory();
+    public void trimMemory(int level);
 }
diff --git a/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java
index 172571555..eea22d91d 100644
--- a/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java
+++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/BitmapPoolAdapter.java
@@ -14,4 +14,9 @@ public Bitmap get(int width, int height, Bitmap.Config config) {
         return null;
     }
 
+    @Override
+    public void clearMemory() { }
+
+    @Override
+    public void trimMemory(int level) { }
 }
diff --git a/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java
index 77b1d9fb5..7301a5845 100644
--- a/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/com/bumptech/glide/resize/bitmap_recycle/LruBitmapPool.java
@@ -1,5 +1,8 @@
 package com.bumptech.glide.resize.bitmap_recycle;
 
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;
+
 import android.graphics.Bitmap;
 import com.bumptech.glide.util.Log;
 
@@ -37,11 +40,7 @@ public synchronized boolean put(Bitmap bitmap) {
     }
 
     private void evict() {
-        while (currentSize > maxSize) {
-            final Bitmap removed = pool.removeLast();
-            currentSize -= getSize(removed);
-            removed.recycle();
-        }
+        trimToSize(maxSize);
     }
 
     @Override
@@ -56,6 +55,28 @@ public synchronized Bitmap get(int width, int height, Bitmap.Config config) {
         return result;
     }
 
+    @Override
+    public void clearMemory() {
+        trimToSize(0);
+    }
+
+    @Override
+    public void trimMemory(int level) {
+        if (level >= TRIM_MEMORY_MODERATE) {
+            clearMemory();
+        } else if (level >= TRIM_MEMORY_BACKGROUND) {
+            trimToSize(currentSize / 2);
+        }
+    }
+
+    private void trimToSize(int size) {
+        while (currentSize > size) {
+            final Bitmap removed = pool.removeLast();
+            currentSize -= getSize(removed);
+            removed.recycle();
+        }
+    }
+
     private static int getSize(Bitmap bitmap) {
         return bitmap.getHeight() * bitmap.getRowBytes();
     }
diff --git a/library/tests/src/com/bumptech/glide/ImageManagerTest.java b/library/tests/src/com/bumptech/glide/ImageManagerTest.java
new file mode 100644
index 000000000..fd91e6253
--- /dev/null
+++ b/library/tests/src/com/bumptech/glide/ImageManagerTest.java
@@ -0,0 +1,71 @@
+package com.bumptech.glide;
+
+import android.content.ComponentCallbacks2;
+import android.test.AndroidTestCase;
+import com.bumptech.glide.resize.ImageManager;
+import com.bumptech.glide.resize.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.resize.bitmap_recycle.BitmapPoolAdapter;
+import com.bumptech.glide.resize.cache.MemoryCache;
+import com.bumptech.glide.resize.cache.MemoryCacheAdapter;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ImageManagerTest extends AndroidTestCase {
+
+    public void testClearMemory() {
+        final AtomicInteger clearsCalled = new AtomicInteger();
+        // The pool's clear method must be called after the cache's so that the bitmaps from the cache do not just
+        // refill the pool
+        BitmapPool bitmapPool = new BitmapPoolAdapter() {
+            @Override
+            public void clearMemory() {
+                assertEquals(2, clearsCalled.incrementAndGet());
+            }
+        };
+        MemoryCache memoryCache = new MemoryCacheAdapter() {
+            @Override
+            public void clearMemory() {
+                super.clearMemory();
+                assertEquals(1, clearsCalled.incrementAndGet());
+            }
+        };
+
+        ImageManager im = new ImageManager.Builder(getContext())
+                .setBitmapPool(bitmapPool)
+                .setMemoryCache(memoryCache)
+                .build();
+
+        im.clearMemory();
+
+        assertEquals(2, clearsCalled.get());
+    }
+
+    public void testTrimMemory() {
+        final AtomicInteger trimsCalled = new AtomicInteger();
+        BitmapPool pool = new BitmapPoolAdapter() {
+            @Override
+            public void trimMemory(int level) {
+                super.trimMemory(level);
+                assertEquals(2, trimsCalled.incrementAndGet());
+            }
+        };
+
+        MemoryCache cache = new MemoryCacheAdapter() {
+            @Override
+            public void trimMemory(int level) {
+                super.trimMemory(level);
+                assertEquals(1, trimsCalled.incrementAndGet());
+            }
+        };
+
+        ImageManager im = new ImageManager.Builder(getContext())
+                .setBitmapPool(pool)
+                .setMemoryCache(cache)
+                .build();
+
+
+        im.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);
+        assertEquals(2, trimsCalled.get());
+    }
+}
+
diff --git a/library/tests/src/com/bumptech/glide/LruBitmapPoolTest.java b/library/tests/src/com/bumptech/glide/LruBitmapPoolTest.java
new file mode 100644
index 000000000..767403ef4
--- /dev/null
+++ b/library/tests/src/com/bumptech/glide/LruBitmapPoolTest.java
@@ -0,0 +1,162 @@
+package com.bumptech.glide;
+
+import android.content.ComponentCallbacks2;
+import android.graphics.Bitmap;
+import android.test.AndroidTestCase;
+import com.bumptech.glide.resize.bitmap_recycle.LruBitmapPool;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class LruBitmapPoolTest extends AndroidTestCase {
+    private static final int SIZE = 1024 * 1024;
+    private LruBitmapPool pool;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        pool = new LruBitmapPool(SIZE);
+    }
+
+    public void testCanAddAndRemoveBitmap() {
+        Bitmap bitmap = getBitmap();
+        pool.put(bitmap);
+        assertEquals(bitmap, getEquivalentFromPool(bitmap));
+    }
+
+    public void testCanAddAndRemoveBitmapsOfDifferentSizes() {
+        Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+        Bitmap second = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_8888);
+        pool.put(first);
+        pool.put(second);
+        assertEquals(first, getEquivalentFromPool(first));
+        assertEquals(second, getEquivalentFromPool(second));
+    }
+
+    public void testCanAddAndRemoveBitmapsOfDifferentConfigs() {
+        Bitmap first = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+        Bitmap second = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
+        pool.put(first);
+        pool.put(second);
+        assertEquals(first, getEquivalentFromPool(first));
+        assertEquals(second, getEquivalentFromPool(second));
+    }
+
+    public void testPoolIsSizeLimited() {
+        List<Bitmap> bitmaps = fillPool();
+        Bitmap first = bitmaps.get(0);
+        pool.put(Bitmap.createBitmap(first));
+
+        int totalInPool = 0;
+        for (int i = 0; i < bitmaps.size(); i++) {
+            if (getEquivalentFromPool(first) == null) {
+                break;
+            }
+            totalInPool++;
+        }
+
+        assertEquals(bitmaps.size(), totalInPool);
+    }
+
+    public void testLeastRecentlyAcquiredBitmapRemovedFirst() {
+        Bitmap special = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
+        pool.put(Bitmap.createBitmap(special));
+        pool.put(Bitmap.createBitmap(special));
+        getEquivalentFromPool(special);
+        List<Bitmap> bitmaps = fillPool();
+
+        assertNotNull(getEquivalentFromPool(special));
+
+        Bitmap first = bitmaps.get(0);
+        int totalAcquired = 0;
+        for (int i = 0; i < bitmaps.size(); i++) {
+            if (getEquivalentFromPool(first) == null) {
+                break;
+            }
+            totalAcquired++;
+        }
+
+        assertEquals(totalAcquired, bitmaps.size() - 1);
+    }
+
+    public void testTrimMemoryCompleteClearsPool() {
+        doTestTrimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE, false);
+    }
+
+    public void testTrimMemoryModerateClearsPool() {
+        doTestTrimMemory(ComponentCallbacks2.TRIM_MEMORY_MODERATE, false);
+    }
+
+    public void testTrimMemoryBackgroundRemovesHalf() {
+        doTestTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND, true);
+    }
+
+    private void doTestTrimMemory(int level, boolean half) {
+        List<Bitmap> bitmaps = fillPool();
+        Bitmap first = bitmaps.get(0);
+        assertTrue(bitmaps.size() >= 2);
+
+        Bitmap fromPool = getEquivalentFromPool(first);
+        assertNotNull(fromPool);
+        pool.put(fromPool);
+        pool.trimMemory(level);
+        if (half) {
+            for (int i = 0; i < bitmaps.size() / 2; i++) {
+                assertNotNull(getEquivalentFromPool(first));
+            }
+        }
+        assertNull(getEquivalentFromPool(first));
+    }
+
+    public void testClearMemoryRemovesAllBitmaps() {
+        List<Bitmap> bitmaps = fillPool();
+        assertTrue(bitmaps.size() >= 2);
+
+        Bitmap first = bitmaps.get(0);
+        assertNotNull(getEquivalentFromPool(first));
+        pool.clearMemory();
+        assertNull(getEquivalentFromPool(first));
+    }
+
+    public void testTrimMemoryCallsRecycleOnRemovedBitmaps() {
+        List<Bitmap> bitmaps = fillPool();
+        pool.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);
+        for (Bitmap bitmap : bitmaps) {
+            assertTrue(bitmap.isRecycled());
+        }
+    }
+
+    public void testClearMemoryCallsRecycleOnRemovedBitmaps() {
+        List<Bitmap> bitmaps = fillPool();
+        pool.clearMemory();
+        for (Bitmap bitmap : bitmaps) {
+            assertTrue(bitmap.isRecycled());
+        }
+    }
+
+    public List<Bitmap> fillPool() {
+        List<Bitmap> bitmaps = new ArrayList<Bitmap>();
+        Bitmap toPut = getBitmap();
+        int bitmapSize = getSize(toPut);
+        for (int i = 0; i < (SIZE / bitmapSize); i++) {
+            bitmaps.add(Bitmap.createBitmap(toPut));
+        }
+        for (Bitmap bitmap : bitmaps) {
+            pool.put(bitmap);
+        }
+        assertTrue(bitmaps.size() > 0);
+        return bitmaps;
+    }
+
+    private Bitmap getEquivalentFromPool(Bitmap bitmap) {
+        return pool.get(bitmap.getWidth(), bitmap.getHeight(), bitmap.getConfig());
+    }
+
+    private static int getSize(Bitmap bitmap) {
+        return bitmap.getRowBytes() * bitmap.getHeight();
+    }
+
+    private static Bitmap getBitmap() {
+        return Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    }
+}
diff --git a/library/tests/src/com/bumptech/glide/LruCacheTest.java b/library/tests/src/com/bumptech/glide/LruCacheTest.java
index b577aa197..f5000b79a 100644
--- a/library/tests/src/com/bumptech/glide/LruCacheTest.java
+++ b/library/tests/src/com/bumptech/glide/LruCacheTest.java
@@ -78,7 +78,7 @@ public void onImageRemoved(Bitmap removed) {
         assertEquals(1, totalRemoved.get());
     }
 
-    public void testBitmapLargerThanPoolIsImmediatelyEvicted() {
+    public void testBitmapLargerThanCacheIsImmediatelyEvicted() {
         final Bitmap tooLarge = Bitmap.createBitmap(1000, 1000, Bitmap.Config.ARGB_8888);
         assertTrue(getSize(tooLarge) > SIZE);
         final AtomicInteger totalRemoved = new AtomicInteger();
@@ -118,6 +118,34 @@ public void onImageRemoved(Bitmap removed) {
         assertEquals(1, totalRemoved.get());
     }
 
+    public void testClearMemoryDoesNotRecycleBitmaps() {
+        fillCache();
+        final AtomicInteger cleared = new AtomicInteger();
+        cache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {
+            @Override
+            public void onImageRemoved(Bitmap removed) {
+                assertFalse(removed.isRecycled());
+                cleared.getAndIncrement();
+            }
+        });
+        cache.clearMemory();
+        assertTrue(cleared.get() > 0);
+    }
+
+    public void testTrimMemoryDoesNotRecycleBitmaps() {
+        fillCache();
+        final AtomicInteger cleared = new AtomicInteger();
+        cache.setImageRemovedListener(new MemoryCache.ImageRemovedListener() {
+            @Override
+            public void onImageRemoved(Bitmap removed) {
+                assertFalse(removed.isRecycled());
+                cleared.getAndIncrement();
+            }
+        });
+        cache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);
+        assertTrue(cleared.get() > 0);
+    }
+
     public void testClearMemoryCallsListener() {
         List<String> keys = fillCache();
         final AtomicInteger totalRemoved = new AtomicInteger();
diff --git a/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
index 098ffd277..522d2440e 100644
--- a/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
+++ b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
@@ -152,6 +152,18 @@ public void onPageScrollStateChanged(int i) { }
         pager.setAdapter(new FlickrPagerAdapter(getSupportFragmentManager()));
     }
 
+    @Override
+    public void onTrimMemory(int level) {
+        super.onTrimMemory(level);
+        Glide.get().getImageManager(this).trimMemory(level);
+    }
+
+    @Override
+    public void onLowMemory() {
+        super.onLowMemory();
+        Glide.get().getImageManager(this).clearMemory();
+    }
+
     private void executeSearch() {
         final String searchString = searchText.getText().toString();
         searchText.getText().clear();
