diff --git a/.gitignore b/.gitignore
index e90dca6f0..0fdd65869 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,3 +27,6 @@ docs/**/*
 *.iws
 .idea/**
 !.idea/codeStyleSettings.xml
+!.idea/inspectionProfiles
+!.idea/inspectionProfiles/Project_Default.xml
+
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 000000000..1c2b4c84f
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,9 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="SerializableHasSerialVersionUIDField" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoreAnonymousInnerClasses" value="false" />
+      <option name="superClassString" value="" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
diff --git a/annotation/compiler/test/build.gradle b/annotation/compiler/test/build.gradle
index 5ebde6222..63c8404e3 100644
--- a/annotation/compiler/test/build.gradle
+++ b/annotation/compiler/test/build.gradle
@@ -31,3 +31,18 @@ dependencies {
     testImplementation 'com.google.android:support-v4:r6'
     testImplementation "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
+
+task regenerateTestResources {
+    group 'Verification'
+    description 'Regenerates all test resource files under annotation/compiler/test/src/test/resources that are compared against the current output to detect regressions'
+    tasks.withType(Test) {
+        systemProperties.put("com.bumptech.glide.annotation.compiler.test.regenerate.path", projectDir)
+    }
+    doFirst {
+        println("Regenerating test resources....")
+    }
+    doLast {
+        println("Finished regenerating test resources")
+    }
+}
+regenerateTestResources.finalizedBy(test)
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
index 42033b8a7..323a4b151 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
@@ -8,11 +8,14 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -22,6 +25,8 @@
  */
 @RunWith(JUnit4.class)
 public class AppGlideModuleWithExcludesTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -36,6 +41,7 @@ public void setUp() {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
@@ -44,6 +50,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
@@ -52,6 +59,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
@@ -60,6 +68,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -77,6 +86,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
index 13a77cca1..86fb5b02b 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
@@ -7,11 +7,14 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -21,6 +24,8 @@
  */
 @RunWith(JUnit4.class)
 public class AppGlideModuleWithMultipleExcludesTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -36,6 +41,7 @@ public void setUp() {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
@@ -44,6 +50,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
@@ -52,6 +59,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
@@ -60,6 +68,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -77,6 +86,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
index 804686071..d9c18209d 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
@@ -11,12 +11,15 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -27,6 +30,8 @@
  */
 @RunWith(JUnit4.class)
 public class EmptyAppAndLibraryGlideModulesTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -46,6 +51,7 @@ public void compilation_generatesAllExpectedFiles() {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
@@ -54,6 +60,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
@@ -62,6 +69,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
@@ -70,6 +78,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -87,6 +96,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
@@ -96,6 +106,7 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedIndexer() throws IOException {
     String expectedClassName =
         "GlideIndexer_GlideModule_com_bumptech_glide_test_EmptyLibraryModule";
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
index 0d70d94e4..8af5e23d9 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
@@ -6,12 +6,14 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -22,6 +24,8 @@
 @RunWith(JUnit4.class)
 public class EmptyAppGlideModuleTest {
   private static final String MODULE_NAME = "EmptyAppModule.java";
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
index 8f330f9dd..f4776d227 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
@@ -5,12 +5,14 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -20,6 +22,8 @@
  */
 @RunWith(JUnit4.class)
 public class EmptyLibraryGlideModuleTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private static final String MODULE_NAME = "EmptyLibraryModule.java";
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
index 76ce82b98..8c2588db1 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
@@ -6,10 +6,14 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
+import com.bumptech.glide.annotation.compiler.test.SubDirectory;
+import com.bumptech.glide.annotation.compiler.test.TestDescription;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -21,68 +25,83 @@
  */
 @RunWith(JUnit4.class)
 public class GlideExtensionOptionsTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
+  @Rule public final TestDescription testDescription = new TestDescription();
   private static final String EXTENSION_NAME = "Extension.java";
 
   @Test
+  @SubDirectory("OverrideExtend")
   public void compilation_withOverrideExtend_validOptions() throws IOException {
-    runTest("OverrideExtend", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("OverrideExtend")
   public void compilation_withOverrideExtend_validRequest() throws IOException {
-    runTest("OverrideExtend", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("OverrideExtendMultipleArguments")
   public void compilation_withOverrideReplace_andMultipleArguments_validOptions()
       throws IOException {
-    runTest("OverrideExtendMultipleArguments", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("OverrideExtendMultipleArguments")
   public void compilation_withOverrideReplace_andMultipleArguments_validRequest()
       throws IOException {
-    runTest("OverrideExtendMultipleArguments", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("OverrideReplace")
   public void compilation_withOverrideReplace_validOptions() throws IOException {
-    runTest("OverrideReplace", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("OverrideReplace")
   public void compilation_withOverrideReplace_validRequest() throws IOException {
-    runTest("OverrideReplace", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("StaticMethodName")
   public void compilation_withStaticMethodName_validOptions() throws IOException {
-    runTest("StaticMethodName", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("StaticMethodName")
   public void compilation_withStaticMethodName_validRequest() throws IOException {
-    runTest("StaticMethodName", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("MemoizeStaticMethod")
   public void compilation_withMemoizeStaticMethod_validOptions() throws IOException {
-    runTest("MemoizeStaticMethod", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("MemoizeStaticMethod")
   public void compilation_withMemoizeStaticMethod_validRequest() throws IOException {
-    runTest("MemoizeStaticMethod", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("SkipStaticMethod")
   public void compilation_withSkipStaticMethod_validOptions() throws IOException {
-    runTest("SkipStaticMethod", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("SkipStaticMethod")
   public void compilation_withSkipStaticMethod_validRequest() throws IOException {
-    runTest("SkipStaticMethod", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   private enum Subject {
@@ -94,7 +113,8 @@ String file() {
     }
   }
 
-  private void runTest(String subDir, Subject subject) throws IOException {
+  private void runTest(Subject subject) throws IOException {
+    String subDir = getSubDirectoryName();
     Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
@@ -109,6 +129,13 @@ private void runTest(String subDir, Subject subject) throws IOException {
         .isEqualTo(asUnixChars(forResource(subDir, subject.file()).getCharContent(true)));
   }
 
+  private String getSubDirectoryName() {
+    return testDescription
+        .getDescription()
+        .getAnnotation(SubDirectory.class)
+        .value();
+  }
+
   private JavaFileObject extension(String subdir) {
     return forResource(subdir, EXTENSION_NAME);
   }
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
index 1c5528f19..a67555ea8 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
@@ -8,12 +8,15 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -24,6 +27,8 @@
  */
 @RunWith(JUnit4.class)
 public class GlideExtensionWithOptionTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -59,6 +64,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
@@ -67,6 +73,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -75,6 +82,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
@@ -84,6 +92,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
index c7f63e175..af4a4b747 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
@@ -8,12 +8,15 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -23,6 +26,8 @@
  */
 @RunWith(JUnit4.class)
 public class GlideExtensionWithTypeTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -50,6 +55,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
@@ -66,6 +72,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -74,6 +81,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
@@ -83,6 +91,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
index a222d5026..5087f3be9 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
@@ -6,10 +6,14 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
+import com.bumptech.glide.annotation.compiler.test.SubDirectory;
+import com.bumptech.glide.annotation.compiler.test.TestDescription;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -22,56 +26,70 @@
  */
 @RunWith(JUnit4.class)
 public class LegacyGlideExtensionOptionsTest {
+  @Rule public final TestDescription testDescription = new TestDescription();
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
+
   private static final String EXTENSION_NAME = "Extension.java";
 
   @Test
+  @SubDirectory("OverrideExtend")
   public void compilation_withOverrideExtend_validOptions() throws IOException {
-    runTest("OverrideExtend", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("OverrideExtend")
   public void compilation_withOverrideExtend_validRequest() throws IOException {
-    runTest("OverrideExtend", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("OverrideReplace")
   public void compilation_withOverrideReplace_validOptions() throws IOException {
-    runTest("OverrideReplace", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("OverrideReplace")
   public void compilation_withOverrideReplace_validRequest() throws IOException {
-    runTest("OverrideReplace", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("StaticMethodName")
   public void compilation_withStaticMethodName_validOptions() throws IOException {
-    runTest("StaticMethodName", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("StaticMethodName")
   public void compilation_withStaticMethodName_validRequest() throws IOException {
-    runTest("StaticMethodName", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("MemoizeStaticMethod")
   public void compilation_withMemoizeStaticMethod_validOptions() throws IOException {
-    runTest("MemoizeStaticMethod", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("MemoizeStaticMethod")
   public void compilation_withMemoizeStaticMethod_validRequest() throws IOException {
-    runTest("MemoizeStaticMethod", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   @Test
+  @SubDirectory("SkipStaticMethod")
   public void compilation_withSkipStaticMethod_validOptions() throws IOException {
-    runTest("SkipStaticMethod", Subject.GlideOptions);
+    runTest(Subject.GlideOptions);
   }
 
   @Test
+  @SubDirectory("SkipStaticMethod")
   public void compilation_withSkipStaticMethod_validRequest() throws IOException {
-    runTest("SkipStaticMethod", Subject.GlideRequest);
+    runTest(Subject.GlideRequest);
   }
 
   private enum Subject {
@@ -83,19 +101,27 @@ String file() {
     }
   }
 
-  private void runTest(String subDir, Subject subject) throws IOException {
+  private void runTest(Subject subject) throws IOException {
+    String subDirectoryName = getSubDirectoryName();
     Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
             .compile(
                 emptyAppModule(),
-                extension(subDir));
+                extension(subDirectoryName));
     assertThat(compilation).succeeded();
 
     assertThat(compilation)
         .generatedSourceFile(subpackage(subject.name()))
         .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(forResource(subDir, subject.file()).getCharContent(true)));
+        .isEqualTo(asUnixChars(forResource(subDirectoryName, subject.file()).getCharContent(true)));
+  }
+
+  private String getSubDirectoryName() {
+    return testDescription
+        .getDescription()
+        .getAnnotation(SubDirectory.class)
+        .value();
   }
 
   private JavaFileObject extension(String subdir) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
index b59df722c..933402ff3 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
@@ -8,12 +8,15 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -24,6 +27,8 @@
  */
 @RunWith(JUnit4.class)
 public class LegacyGlideExtensionWithOptionTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -65,6 +70,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
@@ -73,6 +79,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -81,6 +88,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
@@ -90,6 +98,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
index aae339426..52b19d890 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
@@ -8,12 +8,15 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -23,6 +26,8 @@
  */
 @RunWith(JUnit4.class)
 public class LegacyGlideExtensionWithTypeTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
   private Compilation compilation;
 
   @Before
@@ -50,6 +55,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGlideRequestClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
@@ -66,6 +72,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
   }
 
   @Test
+  @ReferencedResource
   public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
@@ -74,6 +81,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
@@ -83,6 +91,7 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
   }
 
   @Test
+  @ReferencedResource
   public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
index c9c0452f3..cecf9f748 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
@@ -3,6 +3,7 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.testing.compile.Compilation;
 import javax.tools.JavaFileObject;
@@ -18,9 +19,11 @@
  */
 @RunWith(JUnit4.class)
 public class MultipleAppGlideModuleTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
   private static final String FIRST_MODULE = "EmptyAppModule1.java";
   private static final String SECOND_MODULE = "EmptyAppModule2.java";
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   // Throws.
   @SuppressWarnings("ResultOfMethodCallIgnored")
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
index 02baba8e6..94e1c27b7 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
@@ -5,13 +5,16 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
@@ -20,6 +23,9 @@
  */
 @RunWith(JUnit4.class)
 public class MultipleEmptyLibraryGlideModuleTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
+  @Rule public final ExpectedException expectedException = ExpectedException.none();
   private Compilation compilation;
 
   @Before
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/ReferencedResource.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/ReferencedResource.java
new file mode 100644
index 000000000..b7194411d
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/ReferencedResource.java
@@ -0,0 +1,24 @@
+package com.bumptech.glide.annotation.compiler.test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Indicates that the method in question is referencing a test resource that it doesn't "own" and
+ * should not attempt to regenerate.
+ *
+ * <p>Used by {@link RegenerateResourcesRule} to ensure that if we are regenerating resources,
+ * we're only regenerating them for a single class and only for the single class that has the
+ * correct name and directory sequence so that we update the correct file.
+ *
+ * <p>Ideally this wouldn't be necessary. It would be great if we could find a way to go from the
+ * test failure more directly to the actual path of the resource used. Right now we're basically
+ * guessing based on this annotation, the class name of the test class, and any values from
+ * {@link SubDirectory}. Without this annotation, we'd end up writing files that were never used.
+ */
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ReferencedResource {
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/RegenerateResourcesRule.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/RegenerateResourcesRule.java
new file mode 100644
index 000000000..66f48c767
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/RegenerateResourcesRule.java
@@ -0,0 +1,101 @@
+package com.bumptech.glide.annotation.compiler.test;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
+
+import android.support.annotation.NonNull;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.Writer;
+import org.junit.ComparisonFailure;
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+/**
+ * Regenerates test resources for annotation compiler tests when the
+ * {@link Util#REGENERATE_TEST_RESOURCES_PROPERTY_NAME} property is set to the directory containing
+ * the project.
+ *
+ * <p>This can easily be used via gradle by running:
+ * {@code
+ *  ./gradlew :annotation:compiler:test:regenerateTestResources
+ * }
+ *
+ * <p>Our regenerate task will set the appropriate environment variables that will allow the logic
+ * here to succeed. When running the tests normally, this class will do nothing.
+ */
+public final class RegenerateResourcesRule implements TestRule {
+
+  private final Class<?> testClass;
+
+  public RegenerateResourcesRule(Class<?> testClass) {
+    this.testClass = testClass;
+  }
+
+  @Override
+  public Statement apply(final Statement base, final Description description) {
+    return new Statement() {
+      @Override
+      public void evaluate() throws Throwable {
+        try {
+          base.evaluate();
+        } catch (ComparisonFailure e) {
+          String projectRoot = Util.getProjectRootIfRegeneratingTestResources();
+          if (projectRoot == null || description.getAnnotation(ReferencedResource.class) != null) {
+            throw e;
+          }
+          updateResourceFile(e, projectRoot, description);
+        }
+      }
+    };
+  }
+
+  private void updateResourceFile(
+      ComparisonFailure e, @NonNull String projectDirectory, Description description) {
+    String testClassName = testClass.getSimpleName();
+    String testFileName = parseFileNameFromMessage(e);
+    String testDirectory = projectDirectory + "/src/test/resources/" + testClassName;
+    String subDirectorySegment =
+        description.getAnnotation(SubDirectory.class) != null
+            ? description.getAnnotation(SubDirectory.class).value() + "/"
+            : "";
+
+    File expectedDirectory = new File(testDirectory + "/" + subDirectorySegment);
+    if (!expectedDirectory.exists() && !expectedDirectory.mkdirs()) {
+      throw new IllegalStateException(
+          "Failed to generate expected directory: " + expectedDirectory);
+    }
+    if (!expectedDirectory.isDirectory()) {
+      throw new IllegalStateException(
+          "Expected a directory, but found a file: " + expectedDirectory);
+    }
+
+    File expectedFile = new File(expectedDirectory, testFileName);
+    Writer writer = null;
+    try {
+      writer = new FileWriter(expectedFile);
+      writer.write(asUnixChars(e.getActual()).toString());
+      writer.close();
+    } catch (IOException e1) {
+      throw new RuntimeException("Failed to regenerate test file", e1);
+    } finally {
+      if (writer != null) {
+        try {
+          writer.close();
+        } catch (IOException exception) {
+          // Ignore.
+        }
+      }
+    }
+  }
+
+  // Parses </SOURCE_OUTPUT/com/bumptech/glide/test/GlideOptions.java> to GlideOptions.java.
+  private static String parseFileNameFromMessage(ComparisonFailure e) {
+    String message = e.getMessage();
+    int firstGreaterThanIndex = message.indexOf('>');
+    String substring = message.substring(0, firstGreaterThanIndex);
+    int lastForwardSlashIndex = substring.lastIndexOf('/');
+    return substring.substring(lastForwardSlashIndex + 1, substring.length());
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/SubDirectory.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/SubDirectory.java
new file mode 100644
index 000000000..c0023498a
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/SubDirectory.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.annotation.compiler.test;
+
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Indicates the subdirectory for a particular test that contains the test resource(s) used for the
+ * method.
+ *
+ * <p>Used both by tests to extract the correct subdirectory and by the
+ * {@link RegenerateResourcesRule} for the same purpose.
+ */
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface SubDirectory {
+  String value();
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/TestDescription.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/TestDescription.java
new file mode 100644
index 000000000..2b4c7c72c
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/TestDescription.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.annotation.compiler.test;
+
+import org.junit.rules.TestWatcher;
+import org.junit.runner.Description;
+
+/**
+ * Exposes the {@link Description} for the current test, similar to
+ * {@link org.junit.rules.TestName}.
+ */
+public final class TestDescription extends TestWatcher {
+  private Description description;
+  @Override
+  protected void starting(Description description) {
+    this.description = description;
+  }
+
+  public Description getDescription() {
+    return description;
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
index 19a1111a1..64c4f9f08 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
@@ -5,6 +5,8 @@
 
 /** Test utilities. */
 public final class Util {
+  private static final String REGENERATE_TEST_RESOURCES_PROPERTY_NAME =
+      "com.bumptech.glide.annotation.compiler.test.regenerate.path";
   private static final String GLIDE_PACKAGE_NAME = "com.bumptech.glide";
   private static final String SUB_PACKAGE_NAME = qualified(GLIDE_PACKAGE_NAME, "test");
   private static final String ANNOTATION_PACKAGE_NAME = "com.bumptech.glide.annotation.compiler";
@@ -21,6 +23,15 @@ private Util() {
     // Utility class.
   }
 
+  /**
+   * Returns the {@code String} from a system property that is expected to contain the project
+   * directory for the module containing these tests or {@code null} if we're not currently
+   * attempting to regenerate test resources.
+   */
+  static String getProjectRootIfRegeneratingTestResources() {
+    return System.getProperty(REGENERATE_TEST_RESOURCES_PROPERTY_NAME);
+  }
+
   public static JavaFileObject emptyAppModule() {
     return appResource("EmptyAppModule.java");
   }
@@ -38,7 +49,20 @@ public static JavaFileObject libraryResource(String className) {
   }
 
   public static JavaFileObject forResource(String directoryName, String name) {
-    return JavaFileObjects.forResource(directoryName + FILE_SEPARATOR + name);
+    try {
+      return JavaFileObjects.forResource(directoryName + FILE_SEPARATOR + name);
+    } catch (IllegalArgumentException e) {
+      // IllegalArgumentException will be thrown if the resource is missing. If we're trying to
+      // generate test resources for a new test, we want to avoid this exception because it does not
+      // contain any expected output that we can write to a file. By returning an empty file, we
+      // avoid the exception and get the output from our comparison tests that we can then write
+      // out.
+      // If we're not regenerating test resources, we should throw the normal exception.
+      if (getProjectRootIfRegeneratingTestResources() != null) {
+        return JavaFileObjects.forSourceString("com.bumptech.test.empty", "");
+      }
+      throw e;
+    }
   }
 
   public static String annotation(String className) {
diff --git a/gradle.properties b/gradle.properties
index dd0b3a3ae..54f32e840 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,7 +17,7 @@ POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
 ANDROID_SUPPORT_VERSION=27.0.2
 VOLLEY_VERSION=1.0.0
-OK_HTTP_VERSION=3.9.0
+OK_HTTP_VERSION=3.9.1
 ANDROID_GRADLE_VERSION=3.0.1
 DAGGER_VERSION=2.11
 
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
index 785592905..2b6a69b38 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
@@ -1,6 +1,5 @@
 package com.bumptech.glide.integration.okhttp3;
 
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
@@ -10,7 +9,6 @@
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
 import com.bumptech.glide.util.Preconditions;
-import com.bumptech.glide.util.Synthetic;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Map;
@@ -26,10 +24,12 @@
   private static final String TAG = "OkHttpFetcher";
   private final Call.Factory client;
   private final GlideUrl url;
-  @SuppressWarnings("WeakerAccess") @Synthetic InputStream stream;
-  @SuppressWarnings("WeakerAccess") @Synthetic ResponseBody responseBody;
-  private volatile Call call;
+  private InputStream stream;
+  private ResponseBody responseBody;
   private DataCallback<? super InputStream> callback;
+  // call may be accessed on the main thread while the object is in use on other threads. All other
+  // accesses to variables may occur on different threads, but only one at a time.
+  private volatile Call call;
 
   // Public API.
   @SuppressWarnings("WeakerAccess")
@@ -50,21 +50,7 @@ public void loadData(@NonNull Priority priority,
     this.callback = callback;
 
     call = client.newCall(request);
-    if (Build.VERSION.SDK_INT != Build.VERSION_CODES.O) {
-      call.enqueue(this);
-    } else {
-      try {
-        // Calling execute instead of enqueue is a workaround for #2355, where okhttp throws a
-        // ClassCastException on O.
-        onResponse(call, call.execute());
-      } catch (IOException e) {
-        onFailure(call, e);
-      } catch (ClassCastException e) {
-        // It's not clear that this catch is necessary, the error may only occur even on O if
-        // enqueue is used.
-        onFailure(call, new IOException("Workaround for framework bug on O", e));
-      }
-    }
+    call.enqueue(this);
   }
 
   @Override
