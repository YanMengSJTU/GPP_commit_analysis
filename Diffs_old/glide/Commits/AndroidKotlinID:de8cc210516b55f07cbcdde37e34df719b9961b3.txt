diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index 40b6cde67..888932104 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -582,11 +582,7 @@ public boolean isResourceEncoderAvailable(@NonNull Resource<?> resource) {
 
   @NonNull
   public <Model> List<ModelLoader<Model, ?>> getModelLoaders(@NonNull Model model) {
-    List<ModelLoader<Model, ?>> result = modelLoaderRegistry.getModelLoaders(model);
-    if (result.isEmpty()) {
-      throw new NoModelLoaderAvailableException(model);
-    }
-    return result;
+    return modelLoaderRegistry.getModelLoaders(model);
   }
 
   @NonNull
@@ -605,8 +601,18 @@ public boolean isResourceEncoderAvailable(@NonNull Resource<?> resource) {
   // Never serialized by Glide.
   @SuppressWarnings("serial")
   public static class NoModelLoaderAvailableException extends MissingComponentException {
+
     public NoModelLoaderAvailableException(@NonNull Object model) {
-      super("Failed to find any ModelLoaders for model: " + model);
+      super("Failed to find any ModelLoaders registered for model class: " + model.getClass());
+    }
+
+    public <M> NoModelLoaderAvailableException(
+        @NonNull M model, @NonNull List<ModelLoader<M, ?>> matchingButNotHandlingModelLoaders) {
+      super(
+          "Found ModelLoaders for model class: "
+              + matchingButNotHandlingModelLoaders
+              + ", but none that handle this specific model instance: "
+              + model);
     }
 
     public NoModelLoaderAvailableException(
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
index be288cab7..e3b613866 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
@@ -3,6 +3,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.core.util.Pools.Pool;
+import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
 import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -72,6 +73,9 @@ private ModelLoaderRegistry(@NonNull MultiModelLoaderFactory multiModelLoaderFac
   @NonNull
   public <A> List<ModelLoader<A, ?>> getModelLoaders(@NonNull A model) {
     List<ModelLoader<A, ?>> modelLoaders = getModelLoadersForClass(getClass(model));
+    if (modelLoaders.isEmpty()) {
+      throw new NoModelLoaderAvailableException(model);
+    }
     int size = modelLoaders.size();
     boolean isEmpty = true;
     List<ModelLoader<A, ?>> filteredLoaders = Collections.emptyList();
@@ -86,6 +90,9 @@ private ModelLoaderRegistry(@NonNull MultiModelLoaderFactory multiModelLoaderFac
         filteredLoaders.add(loader);
       }
     }
+    if (filteredLoaders.isEmpty()) {
+      throw new NoModelLoaderAvailableException(model, modelLoaders);
+    }
     return filteredLoaders;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
index 063ec3050..4c112357f 100644
--- a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
@@ -144,15 +144,10 @@ private boolean isValidRequest(Request request) {
   @Override
   public boolean isAnyResourceSet() {
     synchronized (requestLock) {
-      return parentIsAnyResourceSet() || isComplete();
+      return primary.isAnyResourceSet() || error.isAnyResourceSet();
     }
   }
 
-  @GuardedBy("requestLock")
-  private boolean parentIsAnyResourceSet() {
-    return parent != null && parent.isAnyResourceSet();
-  }
-
   @Override
   public void onRequestSuccess(Request request) {
     synchronized (requestLock) {
@@ -186,4 +181,11 @@ public void onRequestFailed(Request request) {
       }
     }
   }
+
+  @Override
+  public RequestCoordinator getRoot() {
+    synchronized (requestLock) {
+      return parent != null ? parent.getRoot() : this;
+    }
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/Request.java b/library/src/main/java/com/bumptech/glide/request/Request.java
index 044e198f1..622ad6c38 100644
--- a/library/src/main/java/com/bumptech/glide/request/Request.java
+++ b/library/src/main/java/com/bumptech/glide/request/Request.java
@@ -32,6 +32,12 @@
   /** Returns true if the request has been cleared. */
   boolean isCleared();
 
+  /**
+   * Returns true if a resource is set, even if the request is not yet complete or the primary
+   * request has failed.
+   */
+  boolean isAnyResourceSet();
+
   /**
    * Returns {@code true} if this {@link Request} is equivalent to the given {@link Request} (has
    * all of the same options and sizes).
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
index c71ee5639..551faf697 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
@@ -44,6 +44,9 @@
   /** Must be called when a {@link Request} coordinated by this object fails. */
   void onRequestFailed(Request request);
 
+  /** Returns the top most parent {@code RequestCoordinator}. */
+  RequestCoordinator getRoot();
+
   /** A simple state enum to keep track of the states of individual subrequests. */
   enum RequestState {
     RUNNING(false),
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index fbbebfac5..92757793d 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -357,6 +357,13 @@ public boolean isCleared() {
     }
   }
 
+  @Override
+  public boolean isAnyResourceSet() {
+    synchronized (requestLock) {
+      return status == Status.COMPLETE;
+    }
+  }
+
   @GuardedBy("requestLock")
   private Drawable getErrorDrawable() {
     if (errorDrawable == null) {
@@ -493,7 +500,7 @@ private boolean canNotifyStatusChanged() {
 
   @GuardedBy("requestLock")
   private boolean isFirstReadyResource() {
-    return requestCoordinator == null || !requestCoordinator.isAnyResourceSet();
+    return requestCoordinator == null || !requestCoordinator.getRoot().isAnyResourceSet();
   }
 
   @GuardedBy("requestLock")
diff --git a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
index 78cc3e750..51f05bc4c 100644
--- a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
@@ -60,7 +60,7 @@ private boolean parentCanSetImage() {
   @Override
   public boolean canNotifyStatusChanged(Request request) {
     synchronized (requestLock) {
-      return parentCanNotifyStatusChanged() && request.equals(full) && !isResourceSet();
+      return parentCanNotifyStatusChanged() && request.equals(full) && !isAnyResourceSet();
     }
   }
 
@@ -84,7 +84,7 @@ private boolean parentCanNotifyStatusChanged() {
   @Override
   public boolean isAnyResourceSet() {
     synchronized (requestLock) {
-      return parentIsAnyResourceSet() || isResourceSet();
+      return thumb.isAnyResourceSet() || full.isAnyResourceSet();
     }
   }
 
@@ -123,9 +123,11 @@ public void onRequestFailed(Request request) {
     }
   }
 
-  @GuardedBy("requestLock")
-  private boolean parentIsAnyResourceSet() {
-    return parent != null && parent.isAnyResourceSet();
+  @Override
+  public RequestCoordinator getRoot() {
+    synchronized (requestLock) {
+      return parent != null ? parent.getRoot() : this;
+    }
   }
 
   /** Starts first the thumb request and then the full request. */
@@ -189,12 +191,6 @@ public boolean isComplete() {
     }
   }
 
-  private boolean isResourceSet() {
-    synchronized (requestLock) {
-      return fullState == RequestState.SUCCESS || thumbState == RequestState.SUCCESS;
-    }
-  }
-
   @Override
   public boolean isCleared() {
     synchronized (requestLock) {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/model/ModelLoaderRegistryTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/ModelLoaderRegistryTest.java
new file mode 100644
index 000000000..d3daf763c
--- /dev/null
+++ b/library/test/src/test/java/com/bumptech/glide/load/model/ModelLoaderRegistryTest.java
@@ -0,0 +1,117 @@
+package com.bumptech.glide.load.model;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import androidx.annotation.NonNull;
+import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
+import com.bumptech.glide.util.pool.FactoryPools;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.function.ThrowingRunnable;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+@RunWith(RobolectricTestRunner.class)
+public class ModelLoaderRegistryTest {
+  private static final String MOCK_MODEL_LOADER_NAME = "MockModelLoader";
+
+  private ModelLoaderRegistry registry;
+
+  @Before
+  public void setUp() {
+    registry = new ModelLoaderRegistry(FactoryPools.<Throwable>threadSafeList());
+  }
+
+  @Test
+  public void getModelLoaders_withNoRegisteredModelLoader_throws() {
+    final Object model = new Object();
+    NoModelLoaderAvailableException thrown =
+        assertThrows(
+            NoModelLoaderAvailableException.class,
+            new ThrowingRunnable() {
+              @Override
+              public void run() {
+                registry.getModelLoaders(model);
+              }
+            });
+
+    assertThat(thrown)
+        .hasMessageThat()
+        .contains(
+            "Failed to find any ModelLoaders registered for model class: " + model.getClass());
+  }
+
+  @Test
+  public void getModelLoaders_withRegisteredModelLoader_thatDoesNotHandleModelInstance_throws() {
+    final Object model = new Object();
+    final ModelLoader<Object, Object> modelLoader = mockModelLoader();
+    when(modelLoader.handles(model)).thenReturn(false);
+    appendModelLoader(modelLoader);
+
+    NoModelLoaderAvailableException thrown =
+        assertThrows(
+            NoModelLoaderAvailableException.class,
+            new ThrowingRunnable() {
+              @Override
+              public void run() {
+                registry.getModelLoaders(model);
+              }
+            });
+
+    assertThat(thrown)
+        .hasMessageThat()
+        .contains(
+            "Found ModelLoaders for model class: [MockModelLoader], but none that handle this"
+                + " specific model instance: java.lang.Object");
+  }
+
+  @Test
+  public void getModelLoaders_withRegisteredModelLoader_handlesModel_returnsModelLoader() {
+    final Object model = new Object();
+    final ModelLoader<Object, Object> modelLoader = mockModelLoader();
+    when(modelLoader.handles(model)).thenReturn(true);
+    appendModelLoader(modelLoader);
+
+    assertThat(registry.getModelLoaders(model)).containsExactly(modelLoader);
+  }
+
+  @Test
+  public void
+      getModelLoaders_withRegisteredModelLoaders_onlyOneHandlesModel_returnsHandlingModelLoader() {
+    final Object model = new Object();
+
+    ModelLoader<Object, Object> handlingModelLoader = mockModelLoader();
+    when(handlingModelLoader.handles(model)).thenReturn(true);
+    appendModelLoader(handlingModelLoader);
+
+    ModelLoader<Object, Object> notHandlingModelLoader = mockModelLoader();
+    when(notHandlingModelLoader.handles(model)).thenReturn(false);
+    appendModelLoader(notHandlingModelLoader);
+
+    assertThat(registry.getModelLoaders(model)).containsExactly(handlingModelLoader);
+  }
+
+  private void appendModelLoader(final ModelLoader<Object, Object> modelLoader) {
+    registry.append(
+        Object.class,
+        Object.class,
+        new ModelLoaderFactory<Object, Object>() {
+          @NonNull
+          @Override
+          public ModelLoader<Object, Object> build(@NonNull MultiModelLoaderFactory multiFactory) {
+            return modelLoader;
+          }
+
+          @Override
+          public void teardown() {}
+        });
+  }
+
+  @SuppressWarnings("unchecked")
+  private static ModelLoader<Object, Object> mockModelLoader() {
+    return mock(ModelLoader.class, MOCK_MODEL_LOADER_NAME);
+  }
+}
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
index b301563cf..bdadcaa6e 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
@@ -416,6 +416,11 @@ public boolean isCleared() {
       return isCleared;
     }
 
+    @Override
+    public boolean isAnyResourceSet() {
+      return isComplete;
+    }
+
     @Override
     public boolean isEquivalentTo(Request other) {
       throw new UnsupportedOperationException();
diff --git a/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java b/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
index 9be4c0e74..fc0643b6a 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
@@ -341,6 +341,7 @@ public void isAnyResourceSet_primaryNotSet_nullParent_returnsFalse() {
 
   @Test
   public void isAnyResourceSet_primarySet_nullParent_returnsTrue() {
+    when(primary.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(primary);
     assertThat(coordinator.isAnyResourceSet()).isTrue();
   }
@@ -349,6 +350,7 @@ public void isAnyResourceSet_primarySet_nullParent_returnsTrue() {
   public void isAnyResourceSet_primarySet_parentResourceNotSet_returnsTrue() {
     coordinator = newCoordinator(parent);
     coordinator.setRequests(primary, error);
+    when(primary.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(primary);
 
     assertThat(coordinator.isAnyResourceSet()).isTrue();
@@ -358,6 +360,7 @@ public void isAnyResourceSet_primarySet_parentResourceNotSet_returnsTrue() {
   public void isAnyResourceSet_primarySet_parentSet_returnsTrue() {
     coordinator = newCoordinator(parent);
     coordinator.setRequests(primary, error);
+    when(primary.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(primary);
     when(parent.isAnyResourceSet()).thenReturn(true);
 
@@ -365,17 +368,18 @@ public void isAnyResourceSet_primarySet_parentSet_returnsTrue() {
   }
 
   @Test
-  public void isAnyResourceSet_parentSet_returnsTrue() {
+  public void isAnyResourceSet_parentSet_returnsFalse() {
     coordinator = newCoordinator(parent);
     coordinator.setRequests(primary, error);
     when(parent.isAnyResourceSet()).thenReturn(true);
 
-    assertThat(coordinator.isAnyResourceSet()).isTrue();
+    assertThat(coordinator.isAnyResourceSet()).isFalse();
   }
 
   @Test
   public void isAnyResourceSet_errorSet_failedPrimary_nullParent_returnsTrue() {
     coordinator.onRequestFailed(primary);
+    when(error.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(error);
     assertThat(coordinator.isAnyResourceSet()).isTrue();
   }
@@ -385,6 +389,7 @@ public void isAnyResourceSet_errorSet_failedPrimary_nonNullParentNotSet_returnsT
     coordinator = newCoordinator(parent);
     coordinator.setRequests(primary, error);
     coordinator.onRequestFailed(primary);
+    when(error.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(error);
 
     assertThat(coordinator.isAnyResourceSet()).isTrue();
@@ -395,6 +400,7 @@ public void isAnyResourceSet_errorSet_nonNullParentSet_returnsTrue() {
     coordinator = newCoordinator(parent);
     coordinator.setRequests(primary, error);
     when(parent.isAnyResourceSet()).thenReturn(true);
+    when(error.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(error);
 
     assertThat(coordinator.isAnyResourceSet()).isTrue();
@@ -409,13 +415,13 @@ public void isAnyResourceSet_primaryNotSet_errorNotSet_nonNullParentNotSet_retur
   }
 
   @Test
-  public void isAnyResourceSet_primaryNotSet_errorNotSet_nonNullParentSet_returnsTrue() {
+  public void isAnyResourceSet_primaryNotSet_errorNotSet_nonNullParentSet_returnsFalse() {
     coordinator = newCoordinator(parent);
     coordinator.setRequests(primary, error);
 
     when(parent.isAnyResourceSet()).thenReturn(true);
 
-    assertThat(coordinator.isAnyResourceSet()).isTrue();
+    assertThat(coordinator.isAnyResourceSet()).isFalse();
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index 9bfdbfd2c..3537a81bd 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -167,6 +167,7 @@ public void clear_doesNotNotifyTarget_ifRequestCoordinatorReturnsFalseForCanClea
   @Test
   public void testResourceIsNotCompleteWhenAskingCoordinatorIfCanSetImage() {
     RequestCoordinator requestCoordinator = mock(RequestCoordinator.class);
+    when(requestCoordinator.getRoot()).thenReturn(requestCoordinator);
     doAnswer(
             new Answer() {
               @Override
@@ -625,6 +626,21 @@ public void testRequestListenerIsCalledWithFirstImageIfRequestCoordinatorReturns
             eq(builder.result), any(Number.class), isAListTarget(), isADataSource(), eq(false));
   }
 
+  @Test
+  public void
+      testRequestListenerIsCalledWithNotIsFirstRequestIfRequestCoordinatorParentReturnsResourceSet() {
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
+    RequestCoordinator rootRequestCoordinator = mock(RequestCoordinator.class);
+    when(rootRequestCoordinator.isAnyResourceSet()).thenReturn(true);
+    when(builder.requestCoordinator.isAnyResourceSet()).thenReturn(false);
+    when(builder.requestCoordinator.getRoot()).thenReturn(rootRequestCoordinator);
+    request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
+
+    verify(listener1)
+        .onResourceReady(
+            eq(builder.result), any(Number.class), isAListTarget(), isADataSource(), eq(false));
+  }
+
   @Test
   public void testTargetIsCalledWithAnimationFromFactory() {
     SingleRequest<List> request = builder.build();
@@ -903,6 +919,7 @@ protected int doHash(@NonNull SingleRequestBuilder listSingleRequest) {
     private final Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
 
     SingleRequestBuilder() {
+      when(requestCoordinator.getRoot()).thenReturn(requestCoordinator);
       when(requestCoordinator.canSetImage(any(Request.class))).thenReturn(true);
       when(requestCoordinator.canNotifyCleared(any(Request.class))).thenReturn(true);
       when(requestCoordinator.canNotifyStatusChanged(any(Request.class))).thenReturn(true);
diff --git a/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java b/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
index 3e434165c..437df5c52 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
@@ -208,12 +208,14 @@ public void testCanNotNotifyStatusChangedIfThumb() {
 
   @Test
   public void canNotNotifyStatusChanged_forFull_whenFullComplete_isFalse() {
+    when(full.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(full);
     assertFalse(coordinator.canNotifyStatusChanged(full));
   }
 
   @Test
   public void canNotNotifyStatusChanged_forFull_whenIfThumbComplete_isFalse() {
+    when(thumb.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(thumb);
     assertFalse(coordinator.canNotifyStatusChanged(full));
   }
@@ -249,24 +251,26 @@ public void isAnyResourceSet_withIncompleteThumbAndFull_isFalse() {
 
   @Test
   public void isAnyResourceSet_withCompleteFull_isTrue() {
+    when(full.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(full);
     assertTrue(coordinator.isAnyResourceSet());
   }
 
   @Test
   public void isAnyResourceSet_withCompleteThumb_isTrue() {
+    when(thumb.isAnyResourceSet()).thenReturn(true);
     coordinator.onRequestSuccess(thumb);
     assertTrue(coordinator.isAnyResourceSet());
   }
 
   @Test
-  public void isAnyResourceSet_withParentResourceSet_isTrue() {
+  public void isAnyResourceSet_withParentResourceSet_isFalse() {
     coordinator = newCoordinator(parent);
     coordinator.setRequests(full, thumb);
 
     when(parent.isAnyResourceSet()).thenReturn(true);
 
-    assertTrue(coordinator.isAnyResourceSet());
+    assertThat(coordinator.isAnyResourceSet()).isFalse();
   }
 
   @Test
