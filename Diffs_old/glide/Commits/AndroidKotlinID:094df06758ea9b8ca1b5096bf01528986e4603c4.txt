diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 096c5643a..0227e4131 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -622,13 +622,18 @@ public static RequestManager with(Fragment fragment) {
    * <p>This method will not work if the View is not attached. Prefer the Activity and Fragment
    * variants unless you're loading in a View subclass.
    *
-   * <p>This method may be inefficient for large hierarchies. Consider memoizing the result after
-   * the View is attached.
+   * <p>This method may be inefficient aways and is definitely inefficient for large hierarchies.
+   * Consider memoizing the result after the View is attached or again, prefer the Activity and
+   * Fragment variants whenever possible.
    *
    * <p>When used in Applications that use the non-support {@link android.app.Fragment} classes,
    * calling this method will produce noisy logs from {@link android.app.FragmentManager}. Consider
    * avoiding entirely or using the {@link Fragment}s from the support library instead.
    *
+   * <p>If the support {@link FragmentActivity} class is used, this method will only attempt to
+   * discover support {@link Fragment}s. Any non-support {@link android.app.Fragment}s attached
+   * to the {@link FragmentActivity} will be ignored.
+   *
    * @param view The view to search for a containing Fragment or Activity from.
    * @return A RequestManager that can be used to start a load.
    */
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index 8fc6bab29..81c3749fb 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -162,11 +162,12 @@ public RequestManager get(View view) {
     }
 
     // Support Fragments.
+    // Although the user might have non-support Fragments attached to FragmentActivity, searching
+    // for non-support Fragments is so expensive pre O and that should be rare enough that we
+    // prefer to just fall back to the Activity directly.
     if (activity instanceof FragmentActivity) {
       Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);
-      if (fragment != null) {
-        return get(fragment);
-      }
+      return fragment != null ? get(fragment) : get(activity);
     }
 
     // Standard Fragments.
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
index e71d23779..42c701091 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapImageViewTarget.java
@@ -12,6 +12,10 @@ public BitmapImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public BitmapImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   /**
    * Sets the {@link android.graphics.Bitmap} on the view using {@link
    * android.widget.ImageView#setImageBitmap(android.graphics.Bitmap)}.
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
index c4b247964..46b909ffa 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
@@ -13,6 +13,10 @@ public BitmapThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public BitmapThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected Drawable getDrawable(Bitmap resource) {
     return new BitmapDrawable(view.getResources(), resource);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
index e9ab75e01..58119e4df 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
@@ -13,6 +13,10 @@ public DrawableImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public DrawableImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected void setResource(@Nullable Drawable resource) {
     view.setImageDrawable(resource);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
index 416633f7c..34a99302f 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
@@ -11,6 +11,10 @@ public DrawableThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public DrawableThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected Drawable getDrawable(Drawable resource) {
     return resource;
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
index eb4fa50ab..68a37e401 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
@@ -23,6 +23,10 @@ public ImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public ImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   /**
    * Returns the current {@link android.graphics.drawable.Drawable} being displayed in the view
    * using {@link android.widget.ImageView#getDrawable()}.
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
index c3d658f9b..0bce1750d 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
@@ -26,6 +26,10 @@ public ThumbnailImageViewTarget(ImageView view) {
     super(view);
   }
 
+  public ThumbnailImageViewTarget(ImageView view, boolean waitForLayout) {
+    super(view, waitForLayout);
+  }
+
   @Override
   protected void setResource(@Nullable T resource) {
     ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 555fc3fcb..d2f97dca2 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -46,10 +46,23 @@
   protected final T view;
   private final SizeDeterminer sizeDeterminer;
 
+  /**
+   * Constructor that defaults {@code waitForLayout} to {@code false}.
+   */
   public ViewTarget(T view) {
     this(view, false /*waitForLayout*/);
   }
 
+  /**
+   * @param waitForLayout If set to {@code true}, Glide will always wait for any pending layout pass
+   * before checking for the size a View. If set to {@code false} Glide will only wait for a pending
+   * layout pass if it's unable to resolve the size from layout parameters or an existing View size.
+   * Because setting this parameter to {@code true} forces Glide to wait for the layout pass to
+   * occur before starting the load, setting this parameter to {@code true} can cause flashing in
+   * some cases and should be used sparingly. If layout parameters are set to fixed sizes, they will
+   * still be used instead of the View's dimensions even if this parameter is set to {@code true}.
+   * This parameter is a fallback only.
+   */
   public ViewTarget(T view, boolean waitForLayout) {
     this.view = Preconditions.checkNotNull(view);
     sizeDeterminer = new SizeDeterminer(view, waitForLayout);
@@ -294,10 +307,6 @@ private int getTargetWidth() {
     }
 
     private int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
-      if (waitForLayout && view.isLayoutRequested()) {
-        return PENDING_SIZE;
-      }
-
       // We consider the View state as valid if the View has non-null layout params and a non-zero
       // layout params width and height. This is imperfect. We're making an assumption that View
       // parents will obey their child's layout parameters, which isn't always the case.
@@ -306,6 +315,13 @@ private int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
         return adjustedParamSize;
       }
 
+      // Since we always prefer layout parameters with fixed sizes, even if waitForLayout is true,
+      // we might as well ignore it and just return the layout parameters above if we have them.
+      // Otherwise we should wait for a layout pass before checking the View's dimensions.
+      if (waitForLayout && view.isLayoutRequested()) {
+        return PENDING_SIZE;
+      }
+
       // We also consider the View state valid if the View has a non-zero width and height. This
       // means that the View has gone through at least one layout pass. It does not mean the Views
       // width and height are from the current layout pass. For example, if a View is re-used in
@@ -320,13 +336,16 @@ private int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
 
       // Finally we consider the view valid if the layout parameter size is set to wrap_content.
       // It's difficult for Glide to figure out what to do here. Although Target.SIZE_ORIGINAL is a
-      // coherent choice, it's extremely dangerous and therefore a bad default. If users want the
-      // original image, they can always use .override(Target.SIZE_ORIGINAL). Since wrap_content
+      // coherent choice, it's extremely dangerous because original images may be much too large to
+      // fit in memory or so large that only a couple can fit in memory, causing OOMs. If users want
+      // the original image, they can always use .override(Target.SIZE_ORIGINAL). Since wrap_content
       // may never resolve to a real size unless we load something, we aim for a square whose length
       // is the largest screen size. That way we're loading something and that something has some
       // hope of being downsampled to a size that the device can support. We also log a warning that
       // tries to explain what Glide is doing and why some alternatives are preferable.
-      if (paramSize == LayoutParams.WRAP_CONTENT) {
+      // Since WRAP_CONTENT is sometimes used as a default layout parameter, we always wait for
+      // layout to complete before using this fallback parameter (ConstraintLayout among others).
+      if (!view.isLayoutRequested() && paramSize == LayoutParams.WRAP_CONTENT) {
         if (Log.isLoggable(TAG, Log.INFO)) {
           Log.i(TAG, "Glide treats LayoutParams.WRAP_CONTENT as a request for an image the size of"
               + " this device's screen dimensions. If you want to load the original image and are"
diff --git a/samples/svg/src/main/res/drawable/image_loading.xml b/samples/svg/src/main/res/drawable/image_loading.xml
index ad1bddfad..762e38664 100644
--- a/samples/svg/src/main/res/drawable/image_loading.xml
+++ b/samples/svg/src/main/res/drawable/image_loading.xml
@@ -2,7 +2,7 @@
 <layer-list xmlns:android="http://schemas.android.com/apk/res/android">
     <item>
         <bitmap
-            android:src="@android:drawable/sym_def_app_icon"
+            android:src="@mipmap/ic_launcher"
             android:gravity="center" />
     </item>
     <item
diff --git a/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/samples/svg/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
