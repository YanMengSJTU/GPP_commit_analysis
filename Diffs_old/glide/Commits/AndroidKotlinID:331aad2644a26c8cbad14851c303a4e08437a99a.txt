diff --git a/.travis.yml b/.travis.yml
index 8940a3620..1d9564895 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -20,9 +20,10 @@ env:
   matrix:
     - COMPONENT=unit
     - COMPONENT=firebase
-    - COMPONENT=instrumentation ANDROID_TARGET=16
-    - COMPONENT=instrumentation ANDROID_TARGET=17
-    - COMPONENT=instrumentation ANDROID_TARGET=18
+      # TODO(#2738): Re-enable these when we find a fix.
+      #    - COMPONENT=instrumentation ANDROID_TARGET=16
+      #    - COMPONENT=instrumentation ANDROID_TARGET=17
+      #    - COMPONENT=instrumentation ANDROID_TARGET=18
     - COMPONENT=instrumentation ANDROID_TARGET=19
     - COMPONENT=instrumentation ANDROID_TARGET=21
     - COMPONENT=instrumentation ANDROID_TARGET=22
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
index f1319c13e..42033b8a7 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithExcludesTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyLibraryModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
@@ -39,7 +40,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -47,7 +48,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -55,7 +56,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -63,7 +64,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -71,7 +72,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -79,7 +81,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
index 29263481a..13a77cca1 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithMultipleExcludesTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
@@ -39,7 +40,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -47,7 +48,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -55,7 +56,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -63,7 +64,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -71,7 +72,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -79,7 +81,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
index af7ffe469..804686071 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
@@ -2,6 +2,7 @@
 
 import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyLibraryModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
@@ -49,7 +50,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -57,7 +58,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -65,7 +66,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -73,7 +74,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -81,7 +82,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -89,7 +91,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   @Test
@@ -99,7 +102,7 @@ public void compilation_generatesExpectedIndexer() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(annotation(expectedClassName))
         .contentsAsUtf8String()
-        .isEqualTo(libraryResource(expectedClassName + ".java").getCharContent(true));
+        .isEqualTo(asUnixChars(libraryResource(expectedClassName + ".java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
index f852f4dbc..0d70d94e4 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
@@ -42,7 +43,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -50,7 +51,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -58,7 +59,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -66,7 +67,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -74,7 +75,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -82,7 +84,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(forResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
index db6d337d1..8f330f9dd 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
@@ -43,7 +44,7 @@ public void compilation_generatesExpectedIndexer() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(annotation(expectedClassName))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(expectedClassName + ".java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(expectedClassName + ".java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
index 8ee72aacf..76ce82b98 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
@@ -94,7 +95,7 @@ String file() {
   }
 
   private void runTest(String subDir, Subject subject) throws IOException {
-     Compilation compilation =
+    Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
             .compile(
@@ -105,7 +106,7 @@ private void runTest(String subDir, Subject subject) throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage(subject.name()))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(subDir, subject.file()).getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(subDir, subject.file()).getCharContent(true)));
   }
 
   private JavaFileObject extension(String subdir) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
index ac56e2fa0..1c5528f19 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
@@ -46,7 +47,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -54,7 +55,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -62,7 +63,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -70,7 +71,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -78,7 +79,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -86,7 +88,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
index 832fad600..c7f63e175 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
@@ -45,7 +46,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -53,7 +54,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -61,7 +62,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -69,7 +70,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -77,7 +78,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -85,7 +87,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
index 2cc9e38b7..a222d5026 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
@@ -83,7 +84,7 @@ String file() {
   }
 
   private void runTest(String subDir, Subject subject) throws IOException {
-     Compilation compilation =
+    Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
             .compile(
@@ -94,7 +95,7 @@ private void runTest(String subDir, Subject subject) throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage(subject.name()))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(subDir, subject.file()).getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(subDir, subject.file()).getCharContent(true)));
   }
 
   private JavaFileObject extension(String subdir) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
index 5f09e8f0b..b59df722c 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
@@ -52,7 +53,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -60,7 +61,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -68,7 +69,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -76,7 +77,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -84,7 +85,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -92,7 +94,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
index 9688e8d34..aae339426 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.bumptech.glide.annotation.compiler.test.Util.glide;
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
@@ -45,7 +46,7 @@ public void compilation_generatesExpectedGlideOptionsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideOptions"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideOptions.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
   }
 
   @Test
@@ -53,7 +54,7 @@ public void compilation_generatesExpectedGlideRequestClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequest"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideRequest.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
   }
 
   @Test
@@ -61,7 +62,7 @@ public void compilation_generatesExpectedGlideRequestsClass() throws IOException
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideRequests"))
         .contentsAsUtf8String()
-        .isEqualTo(forResource("GlideRequests.java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource("GlideRequests.java").getCharContent(true)));
   }
 
   @Test
@@ -69,7 +70,7 @@ public void compilationGeneratesExpectedGlideAppClass() throws IOException {
     assertThat(compilation)
         .generatedSourceFile(subpackage("GlideApp"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GlideApp.java").getCharContent(true));
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
   }
 
   @Test
@@ -77,7 +78,8 @@ public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IO
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
   }
 
   @Test
@@ -85,7 +87,8 @@ public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws
     assertThat(compilation)
         .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
         .contentsAsUtf8String()
-        .isEqualTo(appResource("GeneratedRequestManagerFactory.java").getCharContent(true));
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
index 65b21812a..02baba8e6 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.test.Util.annotation;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 
@@ -45,7 +46,7 @@ public void compilation_generatesExpectedIndexerForModules() throws IOException
     assertThat(compilation)
         .generatedSourceFile(annotation(expectedClassName))
         .contentsAsUtf8String()
-        .isEqualTo(forResource(expectedClassName + ".java").getCharContent(true));
+        .isEqualTo(asUnixChars(forResource(expectedClassName + ".java").getCharContent(true)));
   }
 
   private JavaFileObject forResource(String name) {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
index f52a7574a..19a1111a1 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/test/Util.java
@@ -1,7 +1,6 @@
 package com.bumptech.glide.annotation.compiler.test;
 
 import com.google.testing.compile.JavaFileObjects;
-import java.io.File;
 import javax.tools.JavaFileObject;
 
 /** Test utilities. */
@@ -11,6 +10,12 @@
   private static final String ANNOTATION_PACKAGE_NAME = "com.bumptech.glide.annotation.compiler";
   private static final String DEFAULT_APP_DIR_NAME = "EmptyAppGlideModuleTest";
   private static final String DEFAULT_LIBRARY_DIR_NAME = "EmptyLibraryGlideModuleTest";
+  /**
+   * Hardcoded file separator to workaround {@code JavaFileObjects.forResource(...)} defaulting to
+   * the unix one.
+   */
+  private static final String FILE_SEPARATOR = "/";
+  private static final String LINE_SEPARATOR = "\n";
 
   private Util() {
     // Utility class.
@@ -33,7 +38,7 @@ public static JavaFileObject libraryResource(String className) {
   }
 
   public static JavaFileObject forResource(String directoryName, String name) {
-    return JavaFileObjects.forResource(directoryName + File.separator + name);
+    return JavaFileObjects.forResource(directoryName + FILE_SEPARATOR + name);
   }
 
   public static String annotation(String className) {
@@ -48,6 +53,10 @@ public static String glide(String className) {
     return qualified(GLIDE_PACKAGE_NAME, className);
   }
 
+  public static CharSequence asUnixChars(CharSequence chars) {
+    return chars.toString().replace(System.lineSeparator(), LINE_SEPARATOR);
+  }
+
   private static String qualified(String packageName, String className) {
     return packageName + '.' + className;
   }
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
index 3002243ca..194d5afbf 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
@@ -359,7 +359,6 @@ public void run() throws Throwable {
     });
   }
 
-
   @Test
   public void loadIntoView_withoutSkipMemoryCache_loadsFromMemoryCacheIfPresent() {
     final ImageView imageView = new ImageView(context);
@@ -373,6 +372,49 @@ public void loadIntoView_withoutSkipMemoryCache_loadsFromMemoryCacheIfPresent()
         imageView);
 
     // Casting avoids a varags array warning.
+    //noinspection rawtypes
+    reset((RequestListener) requestListener);
+
+    // Run on the main thread, since this is already cached, we shouldn't need to try to wait. If we
+    // do end up re-using the old Target, our wait will always timeout anyway if we use
+    // loadOnMainThread. If the load doesn't complete in time, it will be caught by the listener
+    // below, which expects to be called synchronously.
+    concurrency.runOnMainThread(
+        new Runnable() {
+          @Override
+          public void run() {
+            GlideApp.with(context)
+                .load(ResourceIds.raw.canonical)
+                .listener(requestListener)
+                .dontTransform()
+                .into(imageView);
+          }
+        });
+
+    verify(requestListener)
+        .onResourceReady(
+            anyDrawable(),
+            any(),
+            anyDrawableTarget(),
+            eq(DataSource.MEMORY_CACHE),
+            anyBoolean());
+  }
+
+  @Test
+  public void loadIntoView_withSkipMemoryCacheFalse_loadsFromMemoryCacheIfPresent() {
+    final ImageView imageView = new ImageView(context);
+    imageView.setLayoutParams(new LayoutParams(100, 100));
+
+    concurrency.loadOnMainThread(
+        GlideApp.with(context)
+            .load(ResourceIds.raw.canonical)
+            .listener(requestListener)
+            .skipMemoryCache(false)
+            .dontTransform(),
+        imageView);
+
+    // Casting avoids a varags array warning.
+    //noinspection rawtypes
     reset((RequestListener) requestListener);
 
     // Run on the main thread, since this is already cached, we shouldn't need to try to wait. If we
@@ -386,6 +428,7 @@ public void run() {
             GlideApp.with(context)
                 .load(ResourceIds.raw.canonical)
                 .listener(requestListener)
+                .skipMemoryCache(false)
                 .dontTransform()
                 .into(imageView);
           }
@@ -414,6 +457,7 @@ public void loadIntoView_withSkipMemoryCache_doesNotLoadFromMemoryCacheIfPresent
         imageView);
 
     // Casting avoids a varags array warning.
+    //noinspection rawtypes
     reset((RequestListener) requestListener);
 
     // If this test fails due to a timeout, it's because we re-used the Target from the previous
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index ce908233b..2a336aa82 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.graphics.Bitmap;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
@@ -23,6 +24,7 @@
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory;
 import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.target.Target;
 import java.util.Map;
 
 /**
@@ -46,7 +48,7 @@
   @Nullable
   private RequestManagerFactory requestManagerFactory;
   private GlideExecutor animationExecutor;
-  private boolean isActiveResourceRetentionAllowed = true;
+  private boolean isActiveResourceRetentionAllowed;
 
   /**
    * Sets the {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool} implementation to use
@@ -345,6 +347,8 @@ public GlideBuilder setLogLevel(int logLevel) {
    * {@link com.bumptech.glide.request.target.Target}s which are subsequently de-referenced and
    * garbage collected without being cleared.
    *
+   * <p>Defaults to {@code false}.
+   *
    * <p>Glide's resource re-use system is permissive, which means that's acceptable for callers to
    * load resources into {@link com.bumptech.glide.request.target.Target}s and then never clear the
    * {@link com.bumptech.glide.request.target.Target}. To do so, Glide uses
@@ -359,17 +363,25 @@ public GlideBuilder setLogLevel(int logLevel) {
    * setting this method to {@code true} may transiently increase the memory usage of an
    * application.
    *
-   * <p>Setting this method to {@code false} will allow the platform to garbage collect resources
-   * more quickly, but will lead to unexpected memory cache misses if callers load resources into
-   * {@link com.bumptech.glide.request.target.Target}s but never clear them.
+   * <p>Leaving this method at the default {@code false} value will allow the platform to garbage
+   * collect resources more quickly, but will lead to unexpected memory cache misses if callers load
+   * resources into {@link com.bumptech.glide.request.target.Target}s but never clear them.
+   *
+   * <p>If you set this method to {@code true} you <em>must not</em> call
+   * {@link Bitmap#recycle()} or mutate any Bitmaps returned by Glide. If this method is set to
+   * {@code false}, recycling or mutating Bitmaps is inefficient but safe as long as you do not
+   * clear the corresponding {@link com.bumptech.glide.request.target.Target} used to load the
+   * {@link Bitmap}. However, if you set this method to {@code true} and recycle or mutate any
+   * returned {@link Bitmap}s or other mutable resources, Glide may recover those resources and
+   * attempt to use them later on, resulting in crashes, graphical corruption or undefined behavior.
    *
    * <p>Regardless of what value this method is set to, it's always good practice to clear
    * {@link com.bumptech.glide.request.target.Target}s when you're done with the corresponding
    * resource. Clearing {@link com.bumptech.glide.request.target.Target}s allows Glide to maximize
    * resource re-use, minimize memory overhead and minimize unexpected behavior resulting from
-   * edge cases.
-   *
-   * <p>Defaults to {@code true}.
+   * edge cases. If you use {@link RequestManager#clear(Target)}, calling {@link Bitmap#recycle()}
+   * or mutating {@link Bitmap}s is not only unsafe, it's also totally unnecessary and should be
+   * avoided. In all cases, prefer {@link RequestManager#clear(Target)} to {@link Bitmap#recycle()}.
    *
    * @return This builder.
    */
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index d531f0971..41e4c8432 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.Pools.Pool;
 import com.bumptech.glide.load.Encoder;
@@ -82,8 +83,9 @@ public Registry() {
    * @deprecated Use the equivalent {@link #append(Class, Class, ModelLoaderFactory)} method
    * instead.
    */
+  @NonNull
   @Deprecated
-  public <Data> Registry register(Class<Data> dataClass, Encoder<Data> encoder) {
+  public <Data> Registry register(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder) {
     return append(dataClass, encoder);
   }
 
@@ -102,7 +104,8 @@ public Registry() {
    *
    * @see #prepend(Class, Encoder)
    */
-  public <Data> Registry append(Class<Data> dataClass, Encoder<Data> encoder) {
+  @NonNull
+  public <Data> Registry append(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder) {
     encoderRegistry.append(dataClass, encoder);
     return this;
   }
@@ -118,7 +121,8 @@ public Registry() {
    *
    * @see #append(Class, Encoder)
    */
-  public <Data> Registry prepend(Class<Data> dataClass, Encoder<Data> encoder) {
+  @NonNull
+  public <Data> Registry prepend(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder) {
     encoderRegistry.prepend(dataClass, encoder);
     return this;
   }
@@ -143,10 +147,11 @@ public Registry() {
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
    * @param decoder The {@link ResourceDecoder} to register.
    */
+  @NonNull
   public <Data, TResource> Registry append(
-      Class<Data> dataClass,
-      Class<TResource> resourceClass,
-      ResourceDecoder<Data, TResource> decoder) {
+      @NonNull Class<Data> dataClass,
+      @NonNull Class<TResource> resourceClass,
+      @NonNull ResourceDecoder<Data, TResource> decoder) {
     append(BUCKET_APPEND_ALL, dataClass, resourceClass, decoder);
     return this;
   }
@@ -172,11 +177,12 @@ public Registry() {
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
    * @param decoder The {@link ResourceDecoder} to register.
    */
+  @NonNull
   public <Data, TResource> Registry append(
-      String bucket,
-      Class<Data> dataClass,
-      Class<TResource> resourceClass,
-      ResourceDecoder<Data, TResource> decoder) {
+      @NonNull String bucket,
+      @NonNull Class<Data> dataClass,
+      @NonNull Class<TResource> resourceClass,
+      @NonNull ResourceDecoder<Data, TResource> decoder) {
     decoderRegistry.append(bucket, decoder, dataClass, resourceClass);
     return this;
   }
@@ -201,10 +207,11 @@ public Registry() {
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
    * @param decoder The {@link ResourceDecoder} to register.
    */
+  @NonNull
   public <Data, TResource> Registry prepend(
-      Class<Data> dataClass,
-      Class<TResource> resourceClass,
-      ResourceDecoder<Data, TResource> decoder) {
+      @NonNull Class<Data> dataClass,
+      @NonNull Class<TResource> resourceClass,
+      @NonNull ResourceDecoder<Data, TResource> decoder) {
     prepend(BUCKET_PREPEND_ALL, dataClass, resourceClass, decoder);
     return this;
   }
@@ -230,11 +237,12 @@ public Registry() {
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
    * @param decoder The {@link ResourceDecoder} to register.
    */
+  @NonNull
   public <Data, TResource> Registry prepend(
-      String bucket,
-      Class<Data> dataClass,
-      Class<TResource> resourceClass,
-      ResourceDecoder<Data, TResource> decoder) {
+      @NonNull String bucket,
+      @NonNull Class<Data> dataClass,
+      @NonNull Class<TResource> resourceClass,
+      @NonNull ResourceDecoder<Data, TResource> decoder) {
     decoderRegistry.prepend(bucket, decoder, dataClass, resourceClass);
     return this;
   }
@@ -255,7 +263,8 @@ public Registry() {
    * @param buckets The list of bucket identifiers in order from highest priority to least priority.
    */
   // Final to avoid a PMD error.
-  public final Registry setResourceDecoderBucketPriorityList(List<String> buckets) {
+  @NonNull
+  public final Registry setResourceDecoderBucketPriorityList(@NonNull List<String> buckets) {
     List<String> modifiedBuckets = new ArrayList<>(buckets);
     modifiedBuckets.add(0, BUCKET_PREPEND_ALL);
     modifiedBuckets.add(BUCKET_APPEND_ALL);
@@ -279,9 +288,10 @@ public final Registry setResourceDecoderBucketPriorityList(List<String> buckets)
    *
    * @deprecated Use the equivalent {@link #append(Class, ResourceEncoder)} method instead.
    */
+  @NonNull
   @Deprecated
   public <TResource> Registry register(
-      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {
+      @NonNull Class<TResource> resourceClass, @NonNull ResourceEncoder<TResource> encoder) {
     return append(resourceClass, encoder);
   }
 
@@ -301,8 +311,9 @@ public final Registry setResourceDecoderBucketPriorityList(List<String> buckets)
    *
    * @see #prepend(Class, ResourceEncoder)
    */
+  @NonNull
   public <TResource> Registry append(
-      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {
+      @NonNull Class<TResource> resourceClass, @NonNull ResourceEncoder<TResource> encoder) {
     resourceEncoderRegistry.append(resourceClass, encoder);
     return this;
   }
@@ -319,8 +330,9 @@ public final Registry setResourceDecoderBucketPriorityList(List<String> buckets)
    *
    * @see #append(Class, ResourceEncoder)
    */
+  @NonNull
   public <TResource> Registry prepend(
-      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {
+      @NonNull Class<TResource> resourceClass, @NonNull ResourceEncoder<TResource> encoder) {
     resourceEncoderRegistry.prepend(resourceClass, encoder);
     return this;
   }
@@ -329,7 +341,8 @@ public final Registry setResourceDecoderBucketPriorityList(List<String> buckets)
    * Registers a new {@link com.bumptech.glide.load.data.DataRewinder.Factory} to handle a
    * non-default data type that can be rewind to allow for efficient reads of file headers.
    */
-  public Registry register(DataRewinder.Factory<?> factory) {
+  @NonNull
+  public Registry register(@NonNull DataRewinder.Factory<?> factory) {
     dataRewinderRegistry.register(factory);
     return this;
   }
@@ -344,8 +357,10 @@ public Registry register(DataRewinder.Factory<?> factory) {
    * {@link android.graphics.drawable.BitmapDrawable}).
    * @param transcoder The {@link ResourceTranscoder} to register.
    */
-  public <TResource, Transcode> Registry register(Class<TResource> resourceClass,
-      Class<Transcode> transcodeClass, ResourceTranscoder<TResource, Transcode> transcoder) {
+  @NonNull
+  public <TResource, Transcode> Registry register(
+      @NonNull Class<TResource> resourceClass, @NonNull Class<Transcode> transcodeClass,
+      @NonNull ResourceTranscoder<TResource, Transcode> transcoder) {
     transcoderRegistry.register(resourceClass, transcodeClass, transcoder);
     return this;
   }
@@ -354,7 +369,8 @@ public Registry register(DataRewinder.Factory<?> factory) {
    * Registers a new {@link ImageHeaderParser} that can obtain some basic metadata from an image
    * header (orientation, type etc).
    */
-  public Registry register(ImageHeaderParser parser) {
+  @NonNull
+  public Registry register(@NonNull ImageHeaderParser parser) {
     imageHeaderParserRegistry.add(parser);
     return this;
   }
@@ -381,6 +397,7 @@ public Registry register(ImageHeaderParser parser) {
    * @param dataClass  the data class (e.g. {@link java.io.InputStream},
    * {@link java.io.FileDescriptor}).
    */
+  @NonNull
   public <Model, Data> Registry append(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
     modelLoaderRegistry.append(modelClass, dataClass, factory);
@@ -410,6 +427,7 @@ public Registry register(ImageHeaderParser parser) {
    * @param dataClass  the data class (e.g. {@link java.io.InputStream},
    * {@link java.io.FileDescriptor}).
    */
+  @NonNull
   public <Model, Data> Registry prepend(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
     modelLoaderRegistry.prepend(modelClass, dataClass, factory);
@@ -439,6 +457,7 @@ public Registry register(ImageHeaderParser parser) {
    * @param dataClass  the data class (e.g. {@link java.io.InputStream},
    * {@link java.io.FileDescriptor}).
    */
+  @NonNull
   public <Model, Data> Registry replace(
       Class<Model> modelClass,
       Class<Data> dataClass,
@@ -449,7 +468,8 @@ public Registry register(ImageHeaderParser parser) {
 
   @Nullable
   public <Data, TResource, Transcode> LoadPath<Data, TResource, Transcode> getLoadPath(
-      Class<Data> dataClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {
+      @NonNull Class<Data> dataClass, @NonNull Class<TResource> resourceClass,
+      @NonNull Class<Transcode> transcodeClass) {
     LoadPath<Data, TResource, Transcode> result =
         loadPathCache.get(dataClass, resourceClass, transcodeClass);
     if (loadPathCache.isEmptyLoadPath(result)) {
@@ -471,9 +491,10 @@ public Registry register(ImageHeaderParser parser) {
     return result;
   }
 
+  @NonNull
   private <Data, TResource, Transcode> List<DecodePath<Data, TResource, Transcode>> getDecodePaths(
-      Class<Data> dataClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {
-
+      @NonNull Class<Data> dataClass, @NonNull Class<TResource> resourceClass,
+      @NonNull Class<Transcode> transcodeClass) {
     List<DecodePath<Data, TResource, Transcode>> decodePaths = new ArrayList<>();
     List<Class<TResource>> registeredResourceClasses =
         decoderRegistry.getResourceClasses(dataClass, resourceClass);
@@ -495,8 +516,10 @@ public Registry register(ImageHeaderParser parser) {
     return decodePaths;
   }
 
+  @Nullable
   public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(
-      Class<Model> modelClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {
+      Class<Model> modelClass, @NonNull Class<TResource> resourceClass,
+      @NonNull Class<Transcode> transcodeClass) {
     List<Class<?>> result = modelToResourceClassCache.get(modelClass, resourceClass);
 
     if (result == null) {
@@ -509,7 +532,7 @@ public Registry register(ImageHeaderParser parser) {
           List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry
               .getTranscodeClasses(registeredResourceClass, transcodeClass);
           if (!registeredTranscodeClasses.isEmpty() && !result.contains(registeredResourceClass)) {
-              result.add(registeredResourceClass);
+            result.add(registeredResourceClass);
           }
         }
       }
@@ -520,11 +543,12 @@ public Registry register(ImageHeaderParser parser) {
     return result;
   }
 
-  public boolean isResourceEncoderAvailable(Resource<?> resource) {
+  public boolean isResourceEncoderAvailable(@NonNull Resource<?> resource) {
     return resourceEncoderRegistry.get(resource.getResourceClass()) != null;
   }
 
-  public <X> ResourceEncoder<X> getResultEncoder(Resource<X> resource)
+  @Nullable
+  public <X> ResourceEncoder<X> getResultEncoder(@NonNull Resource<X> resource)
       throws NoResultEncoderAvailableException {
     ResourceEncoder<X> resourceEncoder = resourceEncoderRegistry.get(resource.getResourceClass());
     if (resourceEncoder != null) {
@@ -533,8 +557,9 @@ public boolean isResourceEncoderAvailable(Resource<?> resource) {
     throw new NoResultEncoderAvailableException(resource.getResourceClass());
   }
 
+  @Nullable
   @SuppressWarnings("unchecked")
-  public <X> Encoder<X> getSourceEncoder(X data) throws NoSourceEncoderAvailableException {
+  public <X> Encoder<X> getSourceEncoder(@NonNull X data) throws NoSourceEncoderAvailableException {
     Encoder<X> encoder = encoderRegistry.getEncoder((Class<X>) data.getClass());
     if (encoder != null) {
       return encoder;
@@ -542,11 +567,13 @@ public boolean isResourceEncoderAvailable(Resource<?> resource) {
     throw new NoSourceEncoderAvailableException(data.getClass());
   }
 
-  public <X> DataRewinder<X> getRewinder(X data) {
+  @NonNull
+  public <X> DataRewinder<X> getRewinder(@NonNull X data) {
     return dataRewinderRegistry.build(data);
   }
 
-  public <Model> List<ModelLoader<Model, ?>> getModelLoaders(Model model) {
+  @NonNull
+  public <Model> List<ModelLoader<Model, ?>> getModelLoaders(@NonNull Model model) {
     List<ModelLoader<Model, ?>> result = modelLoaderRegistry.getModelLoaders(model);
     if (result.isEmpty()) {
       throw new NoModelLoaderAvailableException(model);
@@ -554,6 +581,7 @@ public boolean isResourceEncoderAvailable(Resource<?> resource) {
     return result;
   }
 
+  @NonNull
   public List<ImageHeaderParser> getImageHeaderParsers() {
     List<ImageHeaderParser> result = imageHeaderParserRegistry.getParsers();
     if (result.isEmpty()) {
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 7012ec3a7..8092ebe10 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -619,7 +619,7 @@ protected RequestOptions getMutableOptions() {
   // equivalent. See #2663 for additional context.
   private boolean isSkipMemoryCacheWithCompletePreviousRequest(
       RequestOptions options, Request previous) {
-    return options.isSkipMemoryCacheSet() && previous.isComplete();
+    return !options.isMemoryCacheable() && previous.isComplete();
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java b/library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java
index 65d64706f..805198ca6 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/DataRewinder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import android.support.annotation.NonNull;
 import java.io.IOException;
 
 /**
@@ -20,12 +21,14 @@
     /**
      * Returns a new {@link com.bumptech.glide.load.data.DataRewinder} wrapping the given data.
      */
-    DataRewinder<T> build(T data);
+    @NonNull
+    DataRewinder<T> build(@NonNull T data);
 
     /**
      * Returns the class of data this factory can produce
      * {@link com.bumptech.glide.load.data.DataRewinder}s for.
      */
+    @NonNull
     Class<T> getDataClass();
   }
 
@@ -35,6 +38,7 @@
    *
    * @return An object pointing to the wrapped data.
    */
+  @NonNull
   T rewindAndGet() throws IOException;
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java b/library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java
index 6949c486b..9aa20bc8f 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/DataRewinderRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.util.Preconditions;
 import java.util.HashMap;
 import java.util.Map;
@@ -12,23 +13,26 @@
   private final Map<Class<?>, DataRewinder.Factory<?>> rewinders = new HashMap<>();
   private static final DataRewinder.Factory<?> DEFAULT_FACTORY =
       new DataRewinder.Factory<Object>() {
+        @NonNull
         @Override
-        public DataRewinder<Object> build(Object data) {
+        public DataRewinder<Object> build(@NonNull Object data) {
           return new DefaultRewinder(data);
         }
 
+        @NonNull
         @Override
         public Class<Object> getDataClass() {
           throw new UnsupportedOperationException("Not implemented");
         }
       };
 
-  public synchronized void register(DataRewinder.Factory<?> factory) {
+  public synchronized void register(@NonNull DataRewinder.Factory<?> factory) {
     rewinders.put(factory.getDataClass(), factory);
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
-  public synchronized <T> DataRewinder<T> build(T data) {
+  public synchronized <T> DataRewinder<T> build(@NonNull T data) {
     Preconditions.checkNotNull(data);
     DataRewinder.Factory<T> result = (DataRewinder.Factory<T>) rewinders.get(data.getClass());
     if (result == null) {
@@ -49,10 +53,11 @@ public synchronized void register(DataRewinder.Factory<?> factory) {
   private static final class DefaultRewinder implements DataRewinder<Object> {
     private final Object data;
 
-    DefaultRewinder(Object data) {
+    DefaultRewinder(@NonNull Object data) {
       this.data = data;
     }
 
+    @NonNull
     @Override
     public Object rewindAndGet() {
       return data;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java b/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
index dc7ee528f..9a0766ce7 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/InputStreamRewinder.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;
 import com.bumptech.glide.util.Synthetic;
@@ -22,6 +23,7 @@
     bufferedStream.mark(MARK_LIMIT);
   }
 
+  @NonNull
   @Override
   public InputStream rewindAndGet() throws IOException {
     bufferedStream.reset();
@@ -44,11 +46,13 @@ public Factory(ArrayPool byteArrayPool) {
       this.byteArrayPool = byteArrayPool;
     }
 
+    @NonNull
     @Override
     public DataRewinder<InputStream> build(InputStream data) {
       return new InputStreamRewinder(data, byteArrayPool);
     }
 
+    @NonNull
     @Override
     public Class<InputStream> getDataClass() {
       return InputStream.class;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
index ff2ad2ff8..f34c11adc 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
@@ -49,7 +49,7 @@ public void trimMemory(int level) {
     } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
       // Entering list of cached background apps
       // Evict oldest half of our bitmap cache
-      trimToSize(getCurrentSize() / 2);
+      trimToSize(getMaxSize() / 2);
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
index 83d82d164..8dd0827ba 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
@@ -81,15 +81,6 @@ public BitmapTransformation(@SuppressWarnings("unused") Context context) {
     this();
   }
 
-  /**
-   * @deprecated Use {@link #BitmapTransformation()}.
-   * @param bitmapPool Ignored.
-   */
-  @Deprecated
-  public BitmapTransformation(@SuppressWarnings("unused") BitmapPool bitmapPool) {
-    this();
-  }
-
   @NonNull
   @Override
   public final Resource<Bitmap> transform(
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
index ac6a3a0c6..e9e699125 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
@@ -1,6 +1,5 @@
 package com.bumptech.glide.load.resource.bitmap;
 
-import android.content.Context;
 import android.graphics.Bitmap;
 import android.support.annotation.NonNull;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
@@ -27,17 +26,6 @@ public RoundedCorners(int roundingRadius) {
     this.roundingRadius = roundingRadius;
   }
 
-  /**
-   * @param roundingRadius the corner radius (in device-specific pixels).
-   * @throws IllegalArgumentException if rounding radius is 0 or less.
-   *
-   * @deprecated Use {@link #RoundedCorners(int)}
-   */
-  @Deprecated
-  public RoundedCorners(@SuppressWarnings("unused") Context context, int roundingRadius) {
-    this(roundingRadius);
-  }
-
   @Override
   protected Bitmap transform(
       @NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth, int outHeight) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
index 7bf3faa21..a154faafb 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.resource.bytes;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.data.DataRewinder;
-import java.io.IOException;
 import java.nio.ByteBuffer;
 
 /**
@@ -16,8 +16,9 @@ public ByteBufferRewinder(ByteBuffer buffer) {
     this.buffer = buffer;
   }
 
+  @NonNull
   @Override
-  public ByteBuffer rewindAndGet() throws IOException {
+  public ByteBuffer rewindAndGet() {
     buffer.position(0);
     return buffer;
   }
@@ -32,11 +33,13 @@ public void cleanup() {
    */
   public static class Factory implements DataRewinder.Factory<ByteBuffer> {
 
+    @NonNull
     @Override
     public DataRewinder<ByteBuffer> build(ByteBuffer data) {
       return new ByteBufferRewinder(data);
     }
 
+    @NonNull
     @Override
     public Class<ByteBuffer> getDataClass() {
       return ByteBuffer.class;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
index b632c35ad..9c907b65f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.resource.transcode;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
 import java.util.List;
@@ -21,8 +22,9 @@
    * @param <Z>             The type of the resource that the transcoder transcodes from.
    * @param <R>             The type of the resource that the transcoder transcodes to.
    */
-  public synchronized <Z, R> void register(Class<Z> decodedClass, Class<R> transcodedClass,
-      ResourceTranscoder<Z, R> transcoder) {
+  public synchronized <Z, R> void register(
+      @NonNull Class<Z> decodedClass, @NonNull Class<R> transcodedClass,
+      @NonNull ResourceTranscoder<Z, R> transcoder) {
     transcoders.add(new Entry<>(decodedClass, transcodedClass, transcoder));
   }
 
@@ -35,9 +37,10 @@
    * @param <Z>             The type of the resource that the transcoder transcodes from.
    * @param <R>             The type of the resource that the transcoder transcodes to.
    */
+  @NonNull
   @SuppressWarnings("unchecked")
-  public synchronized <Z, R> ResourceTranscoder<Z, R> get(Class<Z> resourceClass,
-      Class<R> transcodedClass) {
+  public synchronized <Z, R> ResourceTranscoder<Z, R> get(
+      @NonNull Class<Z> resourceClass, @NonNull Class<R> transcodedClass) {
     // For example, there may be a transcoder that can convert a GifDrawable to a Drawable, which
     // will be caught above. However, if there is no registered transcoder, we can still just use
     // the UnitTranscoder to return the Drawable because the transcode class (Drawable) is
@@ -55,8 +58,9 @@
         "No transcoder registered to transcode from " + resourceClass + " to " + transcodedClass);
   }
 
-  public synchronized <Z, R> List<Class<R>> getTranscodeClasses(Class<Z> resourceClass,
-      Class<R> transcodeClass) {
+  @NonNull
+  public synchronized <Z, R> List<Class<R>> getTranscodeClasses(
+      @NonNull Class<Z> resourceClass, @NonNull Class<R> transcodeClass) {
     List<Class<R>> transcodeClasses = new ArrayList<>();
     // GifDrawable -> Drawable is just the UnitTranscoder, as is GifDrawable -> GifDrawable.
     if (transcodeClass.isAssignableFrom(resourceClass)) {
@@ -78,7 +82,8 @@
     private final Class<R> toClass;
     @Synthetic final ResourceTranscoder<Z, R> transcoder;
 
-    Entry(Class<Z> fromClass, Class<R> toClass, ResourceTranscoder<Z, R> transcoder) {
+    Entry(@NonNull Class<Z> fromClass, @NonNull Class<R> toClass,
+        @NonNull ResourceTranscoder<Z, R> transcoder) {
       this.fromClass = fromClass;
       this.toClass = toClass;
       this.transcoder = transcoder;
@@ -90,7 +95,7 @@
      * we can fulfill requests for a more generic parent class (like Drawable). As a result, we
      * check fromClass and toClass in different orders.
      */
-    public boolean handles(Class<?> fromClass, Class<?> toClass) {
+    public boolean handles(@NonNull Class<?> fromClass, @NonNull Class<?> toClass) {
       return this.fromClass.isAssignableFrom(fromClass) && toClass.isAssignableFrom(this.toClass);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
index f04a0ad71..d49c8503e 100644
--- a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
@@ -26,16 +26,7 @@
     @Override
     public void onReceive(Context context, Intent intent) {
       boolean wasConnected = isConnected;
-      try {
-        isConnected = isConnected(context);
-      } catch (SecurityException e) {
-        // See #1405.
-        if (Log.isLoggable(TAG, Log.WARN)) {
-          Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);
-        }
-        // Default to true;
-        isConnected = true;
-      }
+      isConnected = isConnected(context);
       if (wasConnected != isConnected) {
         if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "connectivity changed, isConnected: " + isConnected);
@@ -56,14 +47,15 @@ private void register() {
       return;
     }
 
+    // Initialize isConnected.
+    isConnected = isConnected(context);
     try {
       // See #1405
-      isConnected = isConnected(context);
       context.registerReceiver(connectivityReceiver,
           new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
       isRegistered = true;
     } catch (SecurityException e) {
-      // See #1417.
+      // See #1417, registering the receiver can throw SecurityException.
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(TAG, "Failed to register", e);
       }
@@ -85,9 +77,21 @@ private void unregister() {
   @SuppressLint("MissingPermission")
   boolean isConnected(Context context) {
     ConnectivityManager connectivityManager =
-        (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-    NetworkInfo networkInfo =
-        Preconditions.checkNotNull(connectivityManager).getActiveNetworkInfo();
+        Preconditions.checkNotNull(
+            (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE));
+    NetworkInfo networkInfo;
+    try {
+      networkInfo = connectivityManager.getActiveNetworkInfo();
+    } catch (RuntimeException e) {
+      // #1405 shows that this throws a SecurityException.
+      // b/70869360 shows that this throws NullPointerException on APIs 22, 23, and 24.
+      // b/70869360 also shows that this throws RuntimeException on API 24 and 25.
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Failed to determine connectivity status when connectivity changed", e);
+      }
+      // Default to true;
+      return true;
+    }
     return networkInfo != null && networkInfo.isConnected();
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
index 97a506180..ca5148a0f 100644
--- a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.util.Synthetic;
@@ -15,7 +16,7 @@
 
   @SuppressWarnings("unchecked")
   @Nullable
-  public synchronized <T> Encoder<T> getEncoder(Class<T> dataClass) {
+  public synchronized <T> Encoder<T> getEncoder(@NonNull Class<T> dataClass) {
     for (Entry<?> entry : encoders) {
       if (entry.handles(dataClass)) {
         return (Encoder<T>) entry.encoder;
@@ -24,11 +25,11 @@
     return null;
   }
 
-  public synchronized <T> void append(Class<T> dataClass, Encoder<T> encoder) {
+  public synchronized <T> void append(@NonNull Class<T> dataClass, @NonNull Encoder<T> encoder) {
     encoders.add(new Entry<>(dataClass, encoder));
   }
 
-  public synchronized <T> void prepend(Class<T> dataClass, Encoder<T> encoder) {
+  public synchronized <T> void prepend(@NonNull Class<T> dataClass, @NonNull Encoder<T> encoder) {
     encoders.add(0, new Entry<>(dataClass, encoder));
   }
 
@@ -36,12 +37,12 @@
     private final Class<T> dataClass;
     @Synthetic @SuppressWarnings("WeakerAccess") final Encoder<T> encoder;
 
-    Entry(Class<T> dataClass, Encoder<T> encoder) {
+    Entry(@NonNull Class<T> dataClass, @NonNull Encoder<T> encoder) {
       this.dataClass = dataClass;
       this.encoder = encoder;
     }
 
-    boolean handles(Class<?> dataClass) {
+    boolean handles(@NonNull Class<?> dataClass) {
       return this.dataClass.isAssignableFrom(dataClass);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/provider/ImageHeaderParserRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ImageHeaderParserRegistry.java
index af329320e..902fc1bd4 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ImageHeaderParserRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ImageHeaderParserRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.ImageHeaderParser;
 import java.util.ArrayList;
 import java.util.List;
@@ -10,11 +11,12 @@
 public final class ImageHeaderParserRegistry {
   private final List<ImageHeaderParser> parsers = new ArrayList<>();
 
+  @NonNull
   public synchronized List<ImageHeaderParser> getParsers() {
     return parsers;
   }
 
-  public synchronized void add(ImageHeaderParser parser) {
+  public synchronized void add(@NonNull ImageHeaderParser parser) {
     parsers.add(parser);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
index b7e95fd40..831453779 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceDecoderRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
@@ -16,7 +17,7 @@
   private final List<String> bucketPriorityList = new ArrayList<>();
   private final Map<String, List<Entry<?, ?>>> decoders = new HashMap<>();
 
-  public synchronized void setBucketPriorityList(List<String> buckets) {
+  public synchronized void setBucketPriorityList(@NonNull List<String> buckets) {
     List<String> previousBuckets = new ArrayList<>(bucketPriorityList);
     bucketPriorityList.clear();
     bucketPriorityList.addAll(buckets);
@@ -29,9 +30,10 @@ public synchronized void setBucketPriorityList(List<String> buckets) {
     }
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
-  public synchronized <T, R> List<ResourceDecoder<T, R>> getDecoders(Class<T> dataClass,
-      Class<R> resourceClass) {
+  public synchronized <T, R> List<ResourceDecoder<T, R>> getDecoders(@NonNull Class<T> dataClass,
+      @NonNull Class<R> resourceClass) {
     List<ResourceDecoder<T, R>> result = new ArrayList<>();
     for (String bucket : bucketPriorityList) {
       List<Entry<?, ?>> entries = decoders.get(bucket);
@@ -49,9 +51,10 @@ public synchronized void setBucketPriorityList(List<String> buckets) {
     return result;
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
-  public synchronized <T, R> List<Class<R>> getResourceClasses(Class<T> dataClass,
-      Class<R> resourceClass) {
+  public synchronized <T, R> List<Class<R>> getResourceClasses(@NonNull Class<T> dataClass,
+      @NonNull Class<R> resourceClass) {
     List<Class<R>> result = new ArrayList<>();
     for (String bucket : bucketPriorityList) {
       List<Entry<?, ?>> entries = decoders.get(bucket);
@@ -67,17 +70,20 @@ public synchronized void setBucketPriorityList(List<String> buckets) {
     return result;
   }
 
-  public synchronized <T, R> void append(
-      String bucket, ResourceDecoder<T, R> decoder, Class<T> dataClass, Class<R> resourceClass) {
+  public synchronized <T, R> void append(@NonNull String bucket,
+      @NonNull ResourceDecoder<T, R> decoder,
+      @NonNull Class<T> dataClass, @NonNull Class<R> resourceClass) {
     getOrAddEntryList(bucket).add(new Entry<>(dataClass, resourceClass, decoder));
   }
 
-  public synchronized <T, R> void prepend(
-      String bucket, ResourceDecoder<T, R> decoder, Class<T> dataClass, Class<R> resourceClass) {
+  public synchronized <T, R> void prepend(@NonNull String bucket,
+      @NonNull ResourceDecoder<T, R> decoder,
+      @NonNull Class<T> dataClass, @NonNull Class<R> resourceClass) {
     getOrAddEntryList(bucket).add(0, new Entry<>(dataClass, resourceClass, decoder));
   }
 
-  private synchronized List<Entry<?, ?>> getOrAddEntryList(String bucket) {
+  @NonNull
+  private synchronized List<Entry<?, ?>> getOrAddEntryList(@NonNull String bucket) {
     if (!bucketPriorityList.contains(bucket)) {
       // Add this unspecified bucket as a low priority bucket.
       bucketPriorityList.add(bucket);
@@ -95,13 +101,14 @@ public synchronized void setBucketPriorityList(List<String> buckets) {
     @Synthetic final Class<R> resourceClass;
     @Synthetic final ResourceDecoder<T, R> decoder;
 
-    public Entry(Class<T> dataClass, Class<R> resourceClass, ResourceDecoder<T, R> decoder) {
+    public Entry(@NonNull Class<T> dataClass, @NonNull Class<R> resourceClass,
+        ResourceDecoder<T, R> decoder) {
       this.dataClass = dataClass;
       this.resourceClass = resourceClass;
       this.decoder = decoder;
     }
 
-    public boolean handles(Class<?> dataClass, Class<?> resourceClass) {
+    public boolean handles(@NonNull Class<?> dataClass, @NonNull Class<?> resourceClass) {
       return this.dataClass.isAssignableFrom(dataClass) && resourceClass
           .isAssignableFrom(this.resourceClass);
     }
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
index 54430423f..b1bd2977a 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.util.Synthetic;
@@ -14,17 +15,19 @@
   // TODO: this should probably be a put.
   private final List<Entry<?>> encoders = new ArrayList<>();
 
-  public synchronized <Z> void append(Class<Z> resourceClass, ResourceEncoder<Z> encoder) {
+  public synchronized <Z> void append(@NonNull Class<Z> resourceClass,
+      @NonNull ResourceEncoder<Z> encoder) {
     encoders.add(new Entry<>(resourceClass, encoder));
   }
 
-  public synchronized <Z> void prepend(Class<Z> resourceClass, ResourceEncoder<Z> encoder) {
+  public synchronized <Z> void prepend(@NonNull Class<Z> resourceClass,
+      @NonNull ResourceEncoder<Z> encoder) {
     encoders.add(0, new Entry<>(resourceClass, encoder));
   }
 
   @SuppressWarnings("unchecked")
   @Nullable
-  public synchronized <Z> ResourceEncoder<Z> get(Class<Z> resourceClass) {
+  public synchronized <Z> ResourceEncoder<Z> get(@NonNull Class<Z> resourceClass) {
     //noinspection ForLoopReplaceableByForEach to improve perf
     for (int i = 0, size = encoders.size(); i < size; i++) {
       Entry<?> entry = encoders.get(i);
@@ -40,13 +43,13 @@
     private final Class<T> resourceClass;
     @Synthetic final ResourceEncoder<T> encoder;
 
-    Entry(Class<T> resourceClass, ResourceEncoder<T> encoder) {
+    Entry(@NonNull Class<T> resourceClass, @NonNull ResourceEncoder<T> encoder) {
       this.resourceClass = resourceClass;
       this.encoder = encoder;
     }
 
     @Synthetic
-    boolean handles(Class<?> resourceClass) {
+    boolean handles(@NonNull Class<?> resourceClass) {
       return this.resourceClass.isAssignableFrom(resourceClass);
     }
   }
diff --git a/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java b/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
index 4504f9df3..79ebb79ce 100644
--- a/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
@@ -125,15 +125,6 @@ public void register_withMissingPermission_doesNotThrow() {
     monitor.onStart();
   }
 
-  @Test
-  public void register_withMissingPermission_doesNotRegisterReceiver() {
-    harness.shadowConnectivityManager.isNetworkPermissionGranted = false;
-
-    monitor.onStart();
-
-    assertThat(getConnectivityReceivers()).isEmpty();
-  }
-
   @Test
   public void onReceive_withMissingPermission_doesNotThrow() {
     monitor.onStart();
