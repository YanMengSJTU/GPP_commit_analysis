diff --git a/.gitignore b/.gitignore
index d8563abe9..6a64b1779 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,37 +1,42 @@
-.gradle
-build
-*.iws
-doc/**
-bin/**
-library/bin/*
-library/gen/*
-library/.gradle
-library/.settings
-library/target
-library/install_dependencies/maven-android-sdk-deployer
-.idea/libraries
-.idea/workspace.xml
-.idea/tasks.xml
-.idea/gradle.xml
-.idea/dictionaries
-.idea/dataSources.ids
-.idea/datasources.xml
-library/.idea
-samples/**/.idea
+# Android
+local.properties
+*.keystore
 *.DS_Store
-*.swp
-*.swo
 proguard-project.txt
-samples/flickr/gen
-samples/flickr/out
-samples/flickr/bin
-samples/flickr/target
-integration/volley/target/**
-**local.properties
-*.keystore
-.settings
-/library/.classpath
-/library/.project
+
+# Gradle
+**/.gradle
+**/.settings
+**/build
+
+# gh-pages
+doc/**
+_site/*
+_pages/*
 docs/**/*
-**/out/**
-**/gen-external-apklibs/**
+
+# Vim
+*.swp
+*.swo
+
+# Intellij 
+*.ipr
+*.iml
+*.iws
+**/.idea/.name
+**/.idea/compiler.xml
+**/.idea/copyright/profiles_settings.xml
+**/.idea/encodings.xml
+**/.idea/misc.xml
+**/.idea/modules.xml
+**/.idea/scopes/scope_settings.xml
+**/.idea/vcs.xml
+**/.idea/libraries
+**/.idea/workspace.xml
+**/.idea/tasks.xml
+**/.idea/gradle.xml
+**/.idea/dictionaries
+**/.idea/dataSources.ids
+**/.idea/datasources.xml
+**/.idea/uiDesigner.xml
+**/.idea/runConfigurations.xml
diff --git a/.gitmodules b/.gitmodules
index 2a0e578c9..525eef67a 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -7,3 +7,6 @@
 [submodule "library/src/androidTest/resources/exif-orientation-examples"]
 	path = library/src/androidTest/resources/exif-orientation-examples
 	url = https://github.com/recurser/exif-orientation-examples.git
+[submodule "library/src/test/resources/exif-orientation-examples"]
+	path = library/src/test/resources/exif-orientation-examples
+	url = https://github.com/recurser/exif-orientation-examples
diff --git a/.idea/.name b/.idea/.name
deleted file mode 100644
index 325497f4e..000000000
--- a/.idea/.name
+++ /dev/null
@@ -1 +0,0 @@
-glide-parent
\ No newline at end of file
diff --git a/.idea/androidDexCompiler.xml b/.idea/androidDexCompiler.xml
deleted file mode 100644
index d87fc2258..000000000
--- a/.idea/androidDexCompiler.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AndroidDexCompilerConfiguration">
-    <option name="MAX_HEAP_SIZE" value="1024" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/checkstyle-idea.xml b/.idea/checkstyle-idea.xml
deleted file mode 100644
index f103cb3c7..000000000
--- a/.idea/checkstyle-idea.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CheckStyle-IDEA">
-    <option name="configuration">
-      <map>
-        <entry key="active-configuration" value="LOCAL_FILE:$PRJ_DIR$/checkstyle.xml:Glide checkstyle" />
-        <entry key="check-nonjava-files" value="false" />
-        <entry key="check-test-classes" value="false" />
-        <entry key="location-0" value="CLASSPATH:/sun_checks.xml:The default CheckStyle rules" />
-        <entry key="location-1" value="LOCAL_FILE:$PRJ_DIR$/checkstyle.xml:Glide checkstyle" />
-        <entry key="property-1.checkStyleConfigDir" value="$PROJECT_DIR$" />
-        <entry key="suppress-errors" value="false" />
-        <entry key="thirdparty-classpath" value="" />
-      </map>
-    </option>
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/codeStyleSettings.xml b/.idea/codeStyleSettings.xml
index f06d53f33..536c52938 100644
--- a/.idea/codeStyleSettings.xml
+++ b/.idea/codeStyleSettings.xml
@@ -3,15 +3,22 @@
   <component name="ProjectCodeStyleSettingsManager">
     <option name="PER_PROJECT_SETTINGS">
       <value>
-        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />
+        <option name="OTHER_INDENT_OPTIONS">
+          <value>
+            <option name="INDENT_SIZE" value="2" />
+            <option name="CONTINUATION_INDENT_SIZE" value="4" />
+            <option name="TAB_SIZE" value="2" />
+            <option name="USE_TAB_CHARACTER" value="false" />
+            <option name="SMART_TABS" value="false" />
+            <option name="LABEL_INDENT_SIZE" value="0" />
+            <option name="LABEL_INDENT_ABSOLUTE" value="false" />
+            <option name="USE_RELATIVE_INDENTS" value="false" />
+          </value>
+        </option>
         <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="99" />
         <option name="NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND" value="99" />
-        <option name="PACKAGES_TO_USE_IMPORT_ON_DEMAND">
-          <value />
-        </option>
         <option name="IMPORT_LAYOUT_TABLE">
           <value>
-            <package name="com.google" withSubpackages="true" static="true" />
             <package name="" withSubpackages="true" static="true" />
             <emptyLine />
             <package name="com.google" withSubpackages="true" static="false" />
@@ -184,8 +191,6 @@
             <emptyLine />
             <package name="org" withSubpackages="true" static="false" />
             <emptyLine />
-            <package name="oz" withSubpackages="true" static="false" />
-            <emptyLine />
             <package name="penn2dg" withSubpackages="true" static="false" />
             <emptyLine />
             <package name="pennconverter" withSubpackages="true" static="false" />
@@ -206,8 +211,6 @@
             <emptyLine />
             <package name="simple" withSubpackages="true" static="false" />
             <emptyLine />
-            <package name="social" withSubpackages="true" static="false" />
-            <emptyLine />
             <package name="soot" withSubpackages="true" static="false" />
             <emptyLine />
             <package name="sqlj" withSubpackages="true" static="false" />
@@ -249,32 +252,72 @@
             <package name="javax" withSubpackages="true" static="false" />
             <emptyLine />
             <package name="" withSubpackages="true" static="false" />
+            <emptyLine />
+            <emptyLine />
           </value>
         </option>
-        <option name="WRAP_WHEN_TYPING_REACHES_RIGHT_MARGIN" value="true" />
-        <AndroidXmlCodeStyleSettings>
-          <option name="USE_CUSTOM_SETTINGS" value="true" />
-        </AndroidXmlCodeStyleSettings>
+        <option name="RIGHT_MARGIN" value="100" />
+        <option name="JD_P_AT_EMPTY_LINES" value="false" />
+        <option name="JD_KEEP_EMPTY_PARAMETER" value="false" />
+        <option name="JD_KEEP_EMPTY_EXCEPTION" value="false" />
+        <option name="JD_KEEP_EMPTY_RETURN" value="false" />
+        <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
+        <option name="KEEP_BLANK_LINES_IN_CODE" value="1" />
+        <option name="BLANK_LINES_AFTER_CLASS_HEADER" value="1" />
+        <option name="ALIGN_MULTILINE_PARAMETERS_IN_CALLS" value="true" />
+        <option name="ALIGN_MULTILINE_BINARY_OPERATION" value="true" />
+        <option name="ALIGN_MULTILINE_ASSIGNMENT" value="true" />
+        <option name="ALIGN_MULTILINE_TERNARY_OPERATION" value="true" />
+        <option name="ALIGN_MULTILINE_THROWS_LIST" value="true" />
+        <option name="ALIGN_MULTILINE_EXTENDS_LIST" value="true" />
+        <option name="ALIGN_MULTILINE_PARENTHESIZED_EXPRESSION" value="true" />
+        <option name="ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION" value="true" />
+        <option name="CALL_PARAMETERS_WRAP" value="1" />
+        <option name="METHOD_PARAMETERS_WRAP" value="1" />
+        <option name="EXTENDS_LIST_WRAP" value="1" />
+        <option name="THROWS_LIST_WRAP" value="1" />
+        <option name="EXTENDS_KEYWORD_WRAP" value="1" />
+        <option name="THROWS_KEYWORD_WRAP" value="1" />
+        <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
+        <option name="BINARY_OPERATION_WRAP" value="1" />
+        <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
+        <option name="TERNARY_OPERATION_WRAP" value="1" />
+        <option name="TERNARY_OPERATION_SIGNS_ON_NEXT_LINE" value="true" />
+        <option name="FOR_STATEMENT_WRAP" value="1" />
+        <option name="ARRAY_INITIALIZER_WRAP" value="1" />
+        <option name="ASSIGNMENT_WRAP" value="5" />
+        <option name="WRAP_COMMENTS" value="true" />
+        <option name="IF_BRACE_FORCE" value="3" />
+        <option name="DOWHILE_BRACE_FORCE" value="3" />
+        <option name="WHILE_BRACE_FORCE" value="3" />
+        <option name="FOR_BRACE_FORCE" value="3" />
         <XML>
           <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />
         </XML>
+        <ADDITIONAL_INDENT_OPTIONS fileType="haml">
+          <option name="INDENT_SIZE" value="2" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="java">
+          <option name="INDENT_SIZE" value="2" />
+          <option name="CONTINUATION_INDENT_SIZE" value="4" />
+          <option name="TAB_SIZE" value="8" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="js">
+          <option name="CONTINUATION_INDENT_SIZE" value="4" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="sass">
+          <option name="INDENT_SIZE" value="2" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="yml">
+          <option name="INDENT_SIZE" value="2" />
+        </ADDITIONAL_INDENT_OPTIONS>
         <codeStyleSettings language="JAVA">
-          <option name="KEEP_LINE_BREAKS" value="false" />
           <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
-          <option name="ALIGN_MULTILINE_FOR" value="false" />
-          <option name="METHOD_PARAMETERS_WRAP" value="1" />
-          <option name="METHOD_CALL_CHAIN_WRAP" value="2" />
-          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-          <option name="WRAP_LONG_LINES" value="true" />
-        </codeStyleSettings>
-        <codeStyleSettings language="XML">
-          <option name="FORCE_REARRANGE_MODE" value="1" />
           <indentOptions>
+            <option name="INDENT_SIZE" value="2" />
             <option name="CONTINUATION_INDENT_SIZE" value="4" />
+            <option name="TAB_SIZE" value="2" />
           </indentOptions>
-          <arrangement>
-            <rules />
-          </arrangement>
         </codeStyleSettings>
       </value>
     </option>
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
deleted file mode 100644
index 9a8b7e5c4..000000000
--- a/.idea/compiler.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CompilerConfiguration">
-    <option name="DEFAULT_COMPILER" value="Javac" />
-    <resourceExtensions />
-    <wildcardResourcePatterns>
-      <entry name="!?*.java" />
-      <entry name="!?*.form" />
-      <entry name="!?*.class" />
-      <entry name="!?*.groovy" />
-      <entry name="!?*.scala" />
-      <entry name="!?*.flex" />
-      <entry name="!?*.kt" />
-      <entry name="!?*.clj" />
-    </wildcardResourcePatterns>
-    <annotationProcessing>
-      <profile default="true" name="Default" enabled="false">
-        <processorPath useClasspath="true" />
-      </profile>
-    </annotationProcessing>
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/copyright/profiles_settings.xml b/.idea/copyright/profiles_settings.xml
deleted file mode 100644
index e7bedf337..000000000
--- a/.idea/copyright/profiles_settings.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<component name="CopyrightManager">
-  <settings default="" />
-</component>
\ No newline at end of file
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
index e206d70d8..000000000
--- a/.idea/encodings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding" useUTFGuessing="true" native2AsciiForPropertiesFiles="false" />
-</project>
-
diff --git a/.idea/groovyc.xml b/.idea/groovyc.xml
deleted file mode 100644
index 7d42f3ab1..000000000
--- a/.idea/groovyc.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="GroovyCompilerProjectConfiguration">
-    <option name="heapSize" value="2048" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
index 79365f371..000000000
--- a/.idea/inspectionProfiles/Project_Default.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0" is_locked="false">
-    <option name="myName" value="Project Default" />
-    <option name="myLocal" value="false" />
-    <inspection_tool class="AndroidLintGradleDependency" enabled="false" level="WARNING" enabled_by_default="false" />
-    <inspection_tool class="CheckStyle-IDEA" enabled="true" level="ERROR" enabled_by_default="true" />
-    <inspection_tool class="LoggerInitializedWithForeignClass" enabled="false" level="WARNING" enabled_by_default="false">
-      <option name="loggerClassName" value="org.apache.log4j.Logger,org.slf4j.LoggerFactory,org.apache.commons.logging.LogFactory,java.util.logging.Logger" />
-      <option name="loggerFactoryMethodName" value="getLogger,getLogger,getLog,getLogger" />
-    </inspection_tool>
-    <inspection_tool class="OnDemandImport" enabled="true" level="WARNING" enabled_by_default="true" />
-    <inspection_tool class="SamePackageImport" enabled="true" level="WARNING" enabled_by_default="true" />
-  </profile>
-</component>
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
index 3b312839b..000000000
--- a/.idea/inspectionProfiles/profiles_settings.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="PROJECT_PROFILE" value="Project Default" />
-    <option name="USE_PROJECT_PROFILE" value="true" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
index 19736e2de..000000000
--- a/.idea/misc.xml
+++ /dev/null
@@ -1,162 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CompilerConfiguration">
-    <option name="DEFAULT_COMPILER" />
-    <resourceExtensions />
-    <wildcardResourcePatterns>
-      <entry name="!?*.java" />
-      <entry name="!?*.form" />
-      <entry name="!?*.class" />
-      <entry name="!?*.groovy" />
-      <entry name="!?*.scala" />
-      <entry name="!?*.flex" />
-      <entry name="!?*.kt" />
-      <entry name="!?*.clj" />
-    </wildcardResourcePatterns>
-    <annotationProcessing>
-      <profile default="true" name="Default" enabled="false">
-        <processorPath useClasspath="true" />
-      </profile>
-    </annotationProcessing>
-  </component>
-  <component name="CopyrightManager" default="" />
-  <component name="DaemonCodeAnalyzer">
-    <disable_hints />
-  </component>
-  <component name="DependencyValidationManager">
-    <option name="SKIP_IMPORT_STATEMENTS" value="false" />
-  </component>
-  <component name="Encoding" useUTFGuessing="true" native2AsciiForPropertiesFiles="false" />
-  <component name="EntryPointsManager">
-    <entry_points version="2.0" />
-  </component>
-  <component name="FrameworkDetectionExcludesConfiguration">
-    <file type="web" url="file://$PROJECT_DIR$" />
-  </component>
-  <component name="GradleLocalSettings">
-    <option name="modificationStamps">
-      <map>
-        <entry key="$PROJECT_DIR$" value="19825412166063" />
-      </map>
-    </option>
-  </component>
-  <component name="IdProvider" IDEtalkID="E5D7B560A0002A20C790AA32CD25F711" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
-    <OptionsSetting value="true" id="Add" />
-    <OptionsSetting value="true" id="Remove" />
-    <OptionsSetting value="true" id="Checkout" />
-    <OptionsSetting value="true" id="Update" />
-    <OptionsSetting value="true" id="Status" />
-    <OptionsSetting value="true" id="Edit" />
-    <ConfirmationsSetting value="0" id="Add" />
-    <ConfirmationsSetting value="0" id="Remove" />
-  </component>
-  <component name="ProjectModuleManager">
-    <modules />
-  </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.6" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/build/classes" />
-  </component>
-  <component name="PropertiesComponent">
-    <property name="GoToClass.includeLibraries" value="false" />
-    <property name="GoToClass.toSaveIncludeLibraries" value="false" />
-    <property name="GoToFile.includeJavaFiles" value="false" />
-    <property name="MemberChooser.sorted" value="false" />
-    <property name="MemberChooser.showClasses" value="true" />
-    <property name="MemberChooser.copyJavadoc" value="false" />
-  </component>
-  <component name="RunManager">
-    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
-      <module name="" />
-      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
-      <option name="PROGRAM_PARAMETERS" />
-      <method />
-    </configuration>
-    <configuration default="true" type="Remote" factoryName="Remote">
-      <option name="USE_SOCKET_TRANSPORT" value="true" />
-      <option name="SERVER_MODE" value="false" />
-      <option name="SHMEM_ADDRESS" value="javadebug" />
-      <option name="HOST" value="localhost" />
-      <option name="PORT" value="5005" />
-      <method />
-    </configuration>
-    <configuration default="true" type="Applet" factoryName="Applet">
-      <module name="" />
-      <option name="MAIN_CLASS_NAME" />
-      <option name="HTML_FILE_NAME" />
-      <option name="HTML_USED" value="false" />
-      <option name="WIDTH" value="400" />
-      <option name="HEIGHT" value="300" />
-      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
-      <option name="VM_PARAMETERS" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-      <option name="ALTERNATIVE_JRE_PATH" />
-      <method />
-    </configuration>
-    <configuration default="true" type="TestNG" factoryName="TestNG">
-      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
-      <module name="" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-      <option name="ALTERNATIVE_JRE_PATH" />
-      <option name="SUITE_NAME" />
-      <option name="PACKAGE_NAME" />
-      <option name="MAIN_CLASS_NAME" />
-      <option name="METHOD_NAME" />
-      <option name="GROUP_NAME" />
-      <option name="TEST_OBJECT" value="CLASS" />
-      <option name="VM_PARAMETERS" value="-ea" />
-      <option name="PARAMETERS" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="OUTPUT_DIRECTORY" />
-      <option name="ANNOTATION_TYPE" />
-      <option name="ENV_VARIABLES" />
-      <option name="PASS_PARENT_ENVS" value="true" />
-      <option name="TEST_SEARCH_SCOPE">
-        <value defaultName="singleModule" />
-      </option>
-      <option name="USE_DEFAULT_REPORTERS" value="false" />
-      <option name="PROPERTIES_FILE" />
-      <envs />
-      <properties />
-      <listeners />
-      <method />
-    </configuration>
-    <configuration default="true" type="Application" factoryName="Application">
-      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
-      <option name="MAIN_CLASS_NAME" />
-      <option name="VM_PARAMETERS" />
-      <option name="PROGRAM_PARAMETERS" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-      <option name="ALTERNATIVE_JRE_PATH" />
-      <option name="ENABLE_SWING_INSPECTOR" value="false" />
-      <option name="ENV_VARIABLES" />
-      <option name="PASS_PARENT_ENVS" value="true" />
-      <module name="" />
-      <envs />
-      <method />
-    </configuration>
-    <configuration default="true" type="JUnit" factoryName="JUnit">
-      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
-      <module name="" />
-      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
-      <option name="ALTERNATIVE_JRE_PATH" />
-      <option name="PACKAGE_NAME" />
-      <option name="MAIN_CLASS_NAME" />
-      <option name="METHOD_NAME" />
-      <option name="TEST_OBJECT" value="class" />
-      <option name="VM_PARAMETERS" value="-ea" />
-      <option name="PARAMETERS" />
-      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
-      <option name="ENV_VARIABLES" />
-      <option name="PASS_PARENT_ENVS" value="true" />
-      <option name="TEST_SEARCH_SCOPE">
-        <value defaultName="singleModule" />
-      </option>
-      <envs />
-      <patterns />
-      <method />
-    </configuration>
-    <list size="0" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
index adda73dd2..000000000
--- a/.idea/modules.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/third_party/disklrucache/disklrucache.iml" filepath="$PROJECT_DIR$/third_party/disklrucache/disklrucache.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/flickr/flickr.iml" filepath="$PROJECT_DIR$/samples/flickr/flickr.iml" />
-      <module fileurl="file://$PROJECT_DIR$/third_party/gif_decoder/gif_decoder.iml" filepath="$PROJECT_DIR$/third_party/gif_decoder/gif_decoder.iml" />
-      <module fileurl="file://$PROJECT_DIR$/third_party/gif_encoder/gif_encoder.iml" filepath="$PROJECT_DIR$/third_party/gif_encoder/gif_encoder.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/giphy/giphy.iml" filepath="$PROJECT_DIR$/samples/giphy/giphy.iml" />
-      <module fileurl="file://$PROJECT_DIR$/glide/glide.iml" filepath="$PROJECT_DIR$/glide/glide.iml" />
-      <module fileurl="file://$PROJECT_DIR$/glide-parent.iml" filepath="$PROJECT_DIR$/glide-parent.iml" />
-      <module fileurl="file://$PROJECT_DIR$/integration/integration.iml" filepath="$PROJECT_DIR$/integration/integration.iml" />
-      <module fileurl="file://$PROJECT_DIR$/library/library.iml" filepath="$PROJECT_DIR$/library/library.iml" />
-      <module fileurl="file://$PROJECT_DIR$/integration/okhttp/okhttp.iml" filepath="$PROJECT_DIR$/integration/okhttp/okhttp.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/samples.iml" filepath="$PROJECT_DIR$/samples/samples.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/svg/svg.iml" filepath="$PROJECT_DIR$/samples/svg/svg.iml" />
-      <module fileurl="file://$PROJECT_DIR$/testutil/testutil.iml" filepath="$PROJECT_DIR$/testutil/testutil.iml" />
-      <module fileurl="file://$PROJECT_DIR$/third_party/third_party.iml" filepath="$PROJECT_DIR$/third_party/third_party.iml" />
-      <module fileurl="file://$PROJECT_DIR$/integration/volley/volley.iml" filepath="$PROJECT_DIR$/integration/volley/volley.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
diff --git a/.idea/scopes/scope_settings.xml b/.idea/scopes/scope_settings.xml
deleted file mode 100644
index 922003b84..000000000
--- a/.idea/scopes/scope_settings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<component name="DependencyValidationManager">
-  <state>
-    <option name="SKIP_IMPORT_STATEMENTS" value="false" />
-  </state>
-</component>
\ No newline at end of file
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
index 3b0002030..000000000
--- a/.idea/uiDesigner.xml
+++ /dev/null
@@ -1,125 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
-
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
index 8bb10b539..000000000
--- a/.idea/vcs.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-    <mapping directory="$PROJECT_DIR$/third_party/disklrucache" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
diff --git a/.travis.yml b/.travis.yml
index f2b04ef96..d7e468055 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,8 +3,8 @@ android:
   components:
   - tools
   - platform-tools
-  - build-tools-21.1.2
-  - android-21
+  - build-tools-22.0.1
+  - android-22
   - extra-android-m2repository
   - extra-android-support
 
@@ -14,7 +14,6 @@ android:
 jdk:
   - openjdk7
   - oraclejdk7
-  - oraclejdk8
 
 sudo: false
 
@@ -23,3 +22,8 @@ script: 'travis_retry ./gradlew build --parallel'
 after_success:
 - scripts/travis-sonatype-publish.sh
 - ./gradlew jacocoTestReport coveralls
+
+cache:
+  directories:
+    - $HOME/.gradle/caches
+
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 5fc10cb16..950f16a66 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,26 +1,54 @@
 # Contributing
-Contributions of all types are welcome. We use GitHub as our bug and feature tracker both for code and for other
-aspects of the library (documentation, the wiki etc.)
+Contributions of all types are welcome.
+We use GitHub as our bug and feature tracker both for code and for other aspects of the library (documentation, the wiki, etc.).
+
 
 ## Asking Questions
-The best way to ask general questions is to send an email to our [mailing list][2], or join [#glide-library on
-freenode.org.][3]
+The best way to ask general questions is to send an email to our [mailing list][2], or join [#glide-library on freenode.org][3].
+
 
 ## Filing issues
-To file an issue, please use our [issue template link][1] and fill out the template as much as possible. The more
-information you can provide, the more likely we are to be able help.
+When in doubt, file an issue. We'd rather close a few duplicate issues than let a problem go unnoticed.
+Similarly if you support a particular feature request, feel free to let us know by commenting on the issue.
+
+To file a new issue, please use our issue template and fill out the template as much as possible (remove irrelevant parts).
+
+<pre>**Glide Version/Integration library (if any)**:
+**Device/Android Version**:
+**Issue details/Repro steps/Use case background**:
+
+**Glide load line**:
+```java
+Glide.with(...).....load(...).....into(...);
+```
+
+**Layout XML**:
+```xml
+&lt;...Layout&gt;
+    &lt;ImageView android:scaleType="..." ... /&gt;
+&lt;/..Layout&gt;
+```
+
+**Stack trace / LogCat**:
+```ruby
+paste stack trace here
+```
+</pre>
+
+You can save [this as a bookmark or just click it][1] to create a new issue.
+The more information you can provide, the more likely we are to be able help.
 
-When in doubt, file an issue. We'd rather close a few duplicate issues than let a problem go unnoticed. Similarly if
-you support a particular feature request, feel free to let us know by commenting on the issue.
 
 ## Contributing code
-Pull requests are welcome for all parts of the codebase, especially the integration libraries. You can find
-instructions on building the project in our README. Our code style is defined in Intellij project files in the repo
-and also by our Checkstyle config. If you'd like to submit code, but can't get the style checks to pass, feel
-free to put up your pull request anyway and we can help you fix the style issues. If you'd like to
-contribute code, you will need to sign [Google's individual contributor license agreement][4].
+Pull requests are welcome for all parts of the codebase, especially the integration libraries.
+You can find instructions on building the project in [README.md][5].
+Our code style is defined in Intellij project files in the repo and also by our Checkstyle config.
+If you'd like to submit code, but can't get the style checks to pass, feel free to put up your pull request anyway and we can help you fix the style issues.
+If you'd like to contribute code, you will need to sign [Google's individual contributor license agreement][4] which will be asked when you create the PR by [googlebot](https://github.com/googlebot) should you forget it.
+
 
-[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20(if%20any)**:%0A**Device/Android%20Version**:%0A**Issue%20details/Repro%20steps**:%0A%0A**Glide%20load%20line**:%0A```%0AGlide.with(context)...%3B%0A```%0A%0A**Stack%20trace**:%0A```%0Apaste%20stack%20trace%20here%0A```
+[1]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60
 [2]: https://groups.google.com/forum/#!forum/glidelibrary
 [3]: http://webchat.freenode.net/?channels=glide-library
-[4]: https://developers.google.com/open-source/cla/individual.
+[4]: https://developers.google.com/open-source/cla/individual
+[5]: /bumptech/glide
\ No newline at end of file
diff --git a/README.md b/README.md
index 34bbbf0b3..8c95a4634 100644
--- a/README.md
+++ b/README.md
@@ -8,8 +8,8 @@ decoding, memory and disk caching, and resource pooling into a simple and easy t
 
 ![](static/glide_logo.png)
 
-Glide supports fetching, decoding, and displaying video stills, images, and animated GIFs. Glide includes a flexible api
-that allows developers to plug in to almost any network stack. By default Glide uses a custom HttpUrlConnection based
+Glide supports fetching, decoding, and displaying video stills, images, and animated GIFs. Glide includes a flexible API
+that allows developers to plug in to almost any network stack. By default Glide uses a custom `HttpUrlConnection` based
 stack, but also includes utility libraries plug in to Google's Volley project or Square's OkHttp library instead.
 
 Glide's primary focus is on making scrolling any kind of a list of images as smooth and fast as possible, but Glide is
@@ -21,13 +21,13 @@ You can download a jar from GitHub's [releases page][1].
 
 Or use Gradle:
 
-```groovy
+```gradle
 repositories {
-  mavenCentral()
+    mavenCentral()
 }
 
 dependencies {
-    compile 'com.github.bumptech.glide:glide:3.6.0'
+    compile 'com.github.bumptech.glide:glide:3.6.1'
     compile 'com.android.support:support-v4:19.1.0'
 }
 ```
@@ -36,22 +36,23 @@ Or Maven:
 
 ```xml
 <dependency>
-  <groupId>com.github.bumptech.glide</groupId>
-  <artifactId>glide</artifactId>
-  <version>3.6.0</version>
-  <type>aar</type>
+    <groupId>com.github.bumptech.glide</groupId>
+    <artifactId>glide</artifactId>
+    <version>3.6.1</version>
+    <type>aar</type>
 </dependency>
 <dependency>
-  <groupId>com.google.android</groupId>
-  <artifactId>support-v4</artifactId>
-  <version>r7</version>
+    <groupId>com.google.android</groupId>
+    <artifactId>support-v4</artifactId>
+    <version>r7</version>
 </dependency>
 ```
 
 Proguard
 --------
 Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:
-```
+
+```pro
 -keep public class * implements com.bumptech.glide.module.GlideModule
 -keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
     **[] $VALUES;
@@ -65,25 +66,22 @@ Checkout the [GitHub wiki][2] for pages on a variety of topics, and see the [jav
 
 Simple use cases will look something like this:
 
-```Java
-
+```java
 // For a simple view:
 @Override
 public void onCreate(Bundle savedInstanceState) {
     ...
-
     ImageView imageView = (ImageView) findViewById(R.id.my_image_view);
 
     Glide.with(this).load("http://goo.gl/gEgYUd").into(imageView);
 }
 
-// For a list:
+// For a simple image list:
 @Override
 public View getView(int position, View recycled, ViewGroup container) {
     final ImageView myImageView;
     if (recycled == null) {
-        myImageView = (ImageView) inflater.inflate(R.layout.my_image_view,
-                container, false);
+        myImageView = (ImageView) inflater.inflate(R.layout.my_image_view, container, false);
     } else {
         myImageView = (ImageView) recycled;
     }
@@ -104,65 +102,66 @@ public View getView(int position, View recycled, ViewGroup container) {
 
 OkHttp and Volley
 -----------------
-Support for OkHttp and Volley is provided by integration libraries you can optionally include as dependencies. The
-integration libraries are available via Maven or the [releases page][1].
+Support for OkHttp and Volley is provided by integration libraries you can optionally include as dependencies.
+The integration libraries are available via Maven or the [releases page][1].
 
-For instructions on including either the OkHttp or the Volley integration libraries, see the
-[Integration Libraries][12] wiki page.
+For instructions on including either the OkHttp or the Volley integration libraries, see the [Integration Libraries][12] wiki page.
 
 Android SDK Version
 -------------------
-Glide requires a minimum sdk version of 10.
+Glide requires a minimum SDK version of 10.
 
 License
 -------
-BSD, part MIT and Apache 2.0. See LICENSE file for details.
+BSD, part MIT and Apache 2.0. See the [LICENSE][16] file for details.
 
 Status
 ------
-Version 3 is a stable public release used in multiple open source projects at Google including in the Android Camera
-app and in the 2014 Google IO app. Comments/bugs/questions/pull requests welcome!
+[*Version 3*][14] is a stable public release used in multiple open source projects at Google including in the Android Camera
+app and in the 2014 Google IO app. *Version 4* is currently under development on the `master` branch.
+Comments/bugs/questions/pull requests welcome!
 
 Build
 ------
 Building Glide with gradle is fairly straight forward:
 
-```
-git clone git@github.com:bumptech/glide.git
+```shell
+git clone git@github.com:bumptech/glide.git # use https://github.com/bumptech/glide.git if "Permission Denied"
 cd glide
 git submodule init && git submodule update
 ./gradlew jar
 ```
 
-Note: Make sure your Android SDK has the Android Support Repository installed, and that your `$ANDROID_HOME` environment
+**Note**: Make sure your *Android SDK* has the *Android Support Repository* installed, and that your `$ANDROID_HOME` environment
 variable is pointing at the SDK or add a `local.properties` file in the root project with a `sdk.dir=...` line.
 
 Samples
 -------
-Follow the steps in the 'Build' section to setup the project and then:
+Follow the steps in the [Build](#build) section to setup the project and then:
 
-```
+```shell
 ./gradlew :samples:flickr:run
 ./gradlew :samples:giphy:run
 ./gradlew :samples:svg:run
 ```
+You may also find precompiled APKs on the [releases page][1].
 
 Development
 -----------
-Follow the steps in the 'Build' section to setup the project and then edit the files however you wish.
+Follow the steps in the [Build](#build) section to setup the project and then edit the files however you wish.
 [Intellij IDEA 14][4] cleanly imports both Glide's source and tests and is the recommended way to work with Glide.
 
 To open the project in Intellij 14:
 
-1. Go to File.
-2. Click on 'Open...'
+1. Go to *File* menu or the *Welcome Screen*
+2. Click on *Open...*
 3. Navigate to Glide's root directory.
-4. Select glide-parent.iml
+4. Select `build.gradle`
 
 Getting Help
 ------------
 To report a specific problem or feature request, [open a new issue on Github][5]. For questions, suggestions, or
-anything else, join or email [Glide's discussion group][6], or join our irc channel: [irc.freenode.net#glide-library][13].
+anything else, join or email [Glide's discussion group][6], or join our IRC channel: [irc.freenode.net#glide-library][13].
 
 Contributing
 ------------
@@ -170,10 +169,10 @@ Before submitting pull requests, contributors must sign Google's [individual con
 
 Thanks
 ------
-* The Android team and Jake Wharton for the [disk cache implementation][8] Glide's disk cache is based on.
-* Dave Smith for the [gif decoder gist][9] Glide's gif decoder is based on.
-* Chris Banes for his [gradle-mvn-push][10] script.
-* Corey Hall for Glide's [amazing logo][11].
+* The **Android team** and **Jake Wharton** for the [disk cache implementation][8] Glide's disk cache is based on.
+* **Dave Smith** for the [gif decoder gist][9] Glide's gif decoder is based on.
+* **Chris Banes** for his [gradle-mvn-push][10] script.
+* **Corey Hall** for Glide's [amazing logo][11].
 * Everyone who has contributed code and reported issues!
 
 Author
@@ -188,7 +187,7 @@ This is not an official Google product.
 [2]: https://github.com/bumptech/glide/wiki
 [3]: http://bumptech.github.io/glide/javadocs/latest/index.html
 [4]: https://www.jetbrains.com/idea/download/
-[5]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20(if%20any)**:%0A**Device/Android%20Version**:%0A**Issue%20details/Repro%20steps**:%0A%0A**Glide%20load%20line**:%0A```%0AGlide.with(context)...%3B%0A```%0A%0A**Stack%20trace**:%0A```%0Apaste%20stack%20trace%20here%0A```
+[5]: https://github.com/bumptech/glide/issues/new?body=**Glide%20Version/Integration%20library%20%28if%20any%29**%3A%0A**Device/Android%20Version**%3A%0A**Issue%20details/Repro%20steps/Use%20case%20background**%3A%0A%0A**Glide%20load%20line**%3A%0A%60%60%60java%0AGlide.with%28...%29.....load%28...%29.....into%28...%29%3B%0A%60%60%60%0A%0A**Layout%20XML**%3A%0A%60%60%60xml%0A%3C...Layout%3E%0A%20%20%20%20%3CImageView%20android%3AscaleType%3D%22...%22%20...%20/%3E%0A%3C/..Layout%3E%0A%60%60%60%0A%0A**Stack%20trace%20/%20LogCat**%3A%0A%60%60%60ruby%0Apaste%20stack%20trace%20here%0A%60%60%60
 [6]: https://groups.google.com/forum/#!forum/glidelibrary
 [7]: https://developers.google.com/open-source/cla/individual
 [8]: https://github.com/JakeWharton/DiskLruCache
@@ -197,3 +196,6 @@ This is not an official Google product.
 [11]: static/glide_logo.png
 [12]: https://github.com/bumptech/glide/wiki/Integration-Libraries
 [13]: http://webchat.freenode.net/?channels=glide-library
+[14]: https://github.com/bumptech/glide/tree/3.0
+[15]: https://github.com/bumptech/glide/tree/master
+[16]: https://github.com/bumptech/glide/blob/master/LICENSE
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 014fe0228..ab3a44b96 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,9 +7,9 @@ buildscript {
     }
 
     dependencies {
-        classpath "org.robolectric:robolectric-gradle-plugin:${ROBOLECTRIC_GRADLE_VERSION}"
         classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_VERSION}"
         classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${COVERALLS_GRADLE_VERSION}"
+        classpath "org.robolectric:robolectric-gradle-plugin:${ROBOLECTRIC_GRADLE_VERSION}"
     }
 }
 
@@ -39,6 +39,10 @@ subprojects { project ->
 
     apply plugin: 'checkstyle'
 
+    checkstyle {
+        toolVersion = "6.6"
+    }
+
     checkstyle {
         configFile = new File(rootDir, 'checkstyle.xml')
         configProperties.checkStyleConfigDir = rootProject.rootDir
@@ -69,5 +73,5 @@ subprojects { project ->
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.2'
+    gradleVersion = '2.2.1'
 }
diff --git a/checkstyle.xml b/checkstyle.xml
index 456d5e34a..a3c9878b7 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -14,6 +14,9 @@
         <property name="message" value="Line has trailing spaces."/>
     </module>
 
+    <!-- Ensure trailling newline for compatibility -->
+    <module name="NewlineAtEndOfFile" />
+
     <!-- Space after 'for' and 'if' -->
     <module name="RegexpSingleline">
         <property name="format" value="^\s*(for|if)\b[^ ]"/>
@@ -91,6 +94,7 @@
         <module name="ImportOrder">
           <!-- Checks for out of order import statements. -->
 
+          <property name="sortStaticImportsAlphabetically" value="true"/>
            <property name="severity" value="error"/>
            <property name="groups" value="com.google,*,java,javax"/>
            <!-- This ensures that static imports go first. -->
@@ -141,9 +145,6 @@
         <module name="NoClone" />
         <module name="NoFinalizer" />
         <module name="OneStatementPerLine" />
-        <module name="RedundantThrows" >
-            <property name="suppressLoadErrors" value="true" />
-        </module>
         <module name="IllegalInstantiation"/>
         <module name="SimplifyBooleanExpression" />
         <module name="SimplifyBooleanReturn" />
diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index 9cd7c3b23..9faf18dc8 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -5,7 +5,7 @@
     "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
 
 <suppressions>
-    <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>
+    <suppress files=".*[/\\]library[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>
     <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|TransitionOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />
 </suppressions>
diff --git a/glide-parent.iml b/glide-parent.iml
deleted file mode 100644
index 901bfcb99..000000000
--- a/glide-parent.iml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" value="$MODULE_DIR$/build" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/glide-parent/glide-parent-glide-parent.iml b/glide-parent/glide-parent-glide-parent.iml
deleted file mode 100644
index 9f3c1ba2d..000000000
--- a/glide-parent/glide-parent-glide-parent.iml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":glide-parent" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="glide-parent" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
-
diff --git a/glide/glide-glide.iml b/glide/glide-glide.iml
deleted file mode 100644
index 28bde5c8d..000000000
--- a/glide/glide-glide.iml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="3.3.0a-SNAPSHOT" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
-
diff --git a/glide/glide.iml b/glide/glide.iml
deleted file mode 100644
index cf50b206a..000000000
--- a/glide/glide.iml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":glide" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="4.0.0-SNAPSHOT" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":glide" />
-      </configuration>
-    </facet>
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 12c4ffa82..135e9ea28 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,7 @@
+org.gradle.daemon=true
+org.gradle.configureondemand=true
+org.gradle.parallel=true
+
 VERSION_NAME=4.0.0-SNAPSHOT
 VERSION_MAJOR=4
 VERSION_MINOR=0
@@ -14,24 +18,25 @@ POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
 
-SUPPORT_V4_VERSION=21.0.3
-SUPPORT_V7_VERSION=21.0.3
-VOLLEY_VERSION=1.0.10
-OK_HTTP_VERSION=2.2.0
-ANDROID_GRADLE_VERSION=1.0.1
+SUPPORT_V4_VERSION=22.2.0
+SUPPORT_V7_VERSION=22.2.0
+VOLLEY_VERSION=1.0.16
+OK_HTTP_VERSION=2.3.0
+# TODO: use this in library/build.gradle.
+ANDROID_GRADLE_VERSION=1.2.3
 
-ROBOLECTRIC_GRADLE_VERSION=0.14.1
-COVERALLS_GRADLE_VERSION=2.0.1
-JUNIT_VERSION=4.11
-MOCKITO_VERSION=1.9.5
-ROBOLECTRIC_VERSION=3.0-rc2
-MOCKWEBSERVER_VERSION=2.2.0
-TRUTH_VERSION=0.24
+ROBOLECTRIC_GRADLE_VERSION=1.1.0
+COVERALLS_GRADLE_VERSION=2.4.0
+JUNIT_VERSION=4.12
+MOCKITO_VERSION=1.10.19
+ROBOLECTRIC_VERSION=3.0-rc3
+MOCKWEBSERVER_VERSION=2.3.0
+TRUTH_VERSION=0.26
 
 FINDBUGS_VERSION=3.0.0
 JACOCO_VERSION=0.7.1.201405082137
 
-COMPILE_SDK_VERSION=21
-BUILD_TOOLS_VERSION=21.1.2
-TARGET_SDK_VERSION=21
+COMPILE_SDK_VERSION=22
+BUILD_TOOLS_VERSION=22.0.1
+TARGET_SDK_VERSION=22
 MIN_SDK_VERSION=10
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 3d0dee6e8..c97a8bdb9 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index efa946a2c..25f7d42d7 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Dec 20 22:55:19 PST 2014
+#Wed May 20 08:28:58 PDT 2015
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/integration/gifencoder/build.gradle b/integration/gifencoder/build.gradle
index a6f97e313..603500c46 100644
--- a/integration/gifencoder/build.gradle
+++ b/integration/gifencoder/build.gradle
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.library'
-apply plugin: 'robolectric'
+apply plugin: 'org.robolectric'
 
 repositories {
     mavenCentral()
@@ -8,17 +8,17 @@ repositories {
 dependencies {
     compile project(':glide')
 
-    androidTestCompile project(":testutil")
-    androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    androidTestCompile "junit:junit:${JUNIT_VERSION}"
-    androidTestCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
-    androidTestCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    testCompile project(":testutil")
+    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
+    testCompile "junit:junit:${JUNIT_VERSION}"
+    testCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
+    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
 }
 
 android {
     compileSdkVersion COMPILE_SDK_VERSION as int
-    buildToolsVersion BUILD_TOOLS_VERSION
+    buildToolsVersion BUILD_TOOLS_VERSION as String
 
     sourceSets {
         main {
@@ -30,8 +30,8 @@ android {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
 
-        versionCode = VERSION_CODE
-        versionName = VERSION_NAME
+        versionCode = VERSION_CODE as int
+        versionName = VERSION_NAME as String
     }
 
     compileOptions {
diff --git a/integration/gifencoder/gifencoder.iml b/integration/gifencoder/gifencoder.iml
deleted file mode 100644
index 5d3d86d06..000000000
--- a/integration/gifencoder/gifencoder.iml
+++ /dev/null
@@ -1,130 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration:gifencoder" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="2.0.0-SNAPSHOT" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":integration:gifencoder" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-        <option name="LIBRARY_PROJECT" value="true" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/docs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-report" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <content url="file://$MODULE_DIR$/../../third_party/gif_encoder/src/main/java">
-      <sourceFolder url="file://$MODULE_DIR$/../../third_party/gif_encoder/src/main/java" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-resources-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="support-v4-21.0.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="truth-0.24" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="accessibility-test-framework-1.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="bcprov-jdk16-1.46" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="sqlite4java-0.282" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="maven-ant-tasks-2.1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="commons-codec-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-annotations-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="vtd-xml-2.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-commons-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="hamcrest-core-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="junit-4.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-tree-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-analysis-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-utils-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="shadows-core-3.0-rc2-21" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="icu4j-53.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="mockito-all-1.9.5" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="guava-17.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-launcher-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-util-5.0.1" level="project" />
-    <orderEntry type="module" module-name="testutil" exported="" />
-    <orderEntry type="module" module-name="glide" exported="" />
-    <orderEntry type="module" module-name="gif_decoder" scope="TEST" />
-    <orderEntry type="module" module-name="library" scope="TEST" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java
index 4ee8af211..f3ca40290 100644
--- a/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java
+++ b/integration/gifencoder/src/main/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoder.java
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.gifdecoder.GifHeader;
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
@@ -157,8 +156,8 @@ private boolean writeDataDirect(ByteBuffer data, File file) {
     try {
       ByteBufferUtil.toFile(data, file);
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.WARN)) {
-        Logs.log(Log.WARN, "Failed to write gif data", e);
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Failed to write gif data", e);
       }
       return false;
     }
diff --git a/integration/gifencoder/src/androidTest/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
similarity index 95%
rename from integration/gifencoder/src/androidTest/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
rename to integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
index ab4e23484..0f9ade749 100644
--- a/integration/gifencoder/src/androidTest/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
+++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
@@ -3,6 +3,7 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assume.assumeTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
@@ -47,15 +48,16 @@
  * Tests for {@link com.bumptech.glide.integration.gifencoder.ReEncodingGifResourceEncoder}.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ReEncodingGifResourceEncoderTest {
   @Mock Resource<GifDrawable> resource;
   @Mock GifDecoder decoder;
   @Mock GifHeaderParser parser;
   @Mock AnimatedGifEncoder gifEncoder;
   @Mock Resource<Bitmap> frameResource;
-  @Mock Transformation<Bitmap> frameTransformation;
   @Mock GifDrawable gifDrawable;
+  @Mock Transformation<Bitmap> frameTransformation;
+  @Mock Resource<Bitmap> transformedResource;
 
   private ReEncodingGifResourceEncoder encoder;
   private Options options;
@@ -115,6 +117,8 @@ public void testEncodeStrategy_withEncodeTransformationFalse_returnsSource() {
   @Test
   public void testEncode_withEncodeTransformationFalse_writesSourceDataToStream()
       throws IOException {
+    // Most likely an instance of http://stackoverflow.com/q/991489/253468
+    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));
     options.set(ReEncodingGifResourceEncoder.ENCODE_TRANSFORMATION, false);
     String expected = "testString";
     byte[] data = expected.getBytes("UTF-8");
@@ -242,12 +246,10 @@ public void testWritesTransformedBitmaps() {
     when(gifDrawable.getIntrinsicHeight()).thenReturn(expectedHeight);
 
     Bitmap transformedFrame = Bitmap.createBitmap(200, 200, Bitmap.Config.RGB_565);
-    final Resource<Bitmap> transformedResource = mock(Resource.class);
     when(transformedResource.get()).thenReturn(transformedFrame);
-    Transformation<Bitmap> transformation = mock(Transformation.class);
-    when(transformation.transform(eq(frameResource), eq(expectedWidth), eq(expectedHeight)))
+    when(frameTransformation.transform(eq(frameResource), eq(expectedWidth), eq(expectedHeight)))
         .thenReturn(transformedResource);
-    when(gifDrawable.getFrameTransformation()).thenReturn(transformation);
+    when(gifDrawable.getFrameTransformation()).thenReturn(frameTransformation);
 
     encoder.encode(resource, file, options);
 
@@ -257,7 +259,6 @@ public void testWritesTransformedBitmaps() {
   @Test
   public void testRecyclesFrameResourceBeforeWritingIfTransformedResourceIsDifferent() {
     when(decoder.getFrameCount()).thenReturn(1);
-    Resource<Bitmap> transformedResource = mock(Resource.class);
     when(frameTransformation.transform(eq(frameResource), anyInt(), anyInt()))
         .thenReturn(transformedResource);
     Bitmap expected = Bitmap.createBitmap(200, 200, Bitmap.Config.ARGB_8888);
@@ -276,7 +277,6 @@ public void testRecyclesFrameResourceBeforeWritingIfTransformedResourceIsDiffere
   public void testRecyclesTransformedResourceAfterWritingIfTransformedResourceIsDifferent() {
     when(decoder.getFrameCount()).thenReturn(1);
     Bitmap expected = Bitmap.createBitmap(100, 200, Bitmap.Config.RGB_565);
-    Resource<Bitmap> transformedResource = mock(Resource.class);
     when(transformedResource.get()).thenReturn(expected);
     when(frameTransformation.transform(eq(frameResource), anyInt(), anyInt()))
         .thenReturn(transformedResource);
@@ -310,6 +310,8 @@ public void testRecyclesFrameResourceAfterWritingIfFrameResourceIsNotTransformed
   @Test
   public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation()
       throws IOException {
+    // Most likely an instance of http://stackoverflow.com/q/991489/253468
+    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));
     when(gifDrawable.getFrameTransformation()).thenReturn(UnitTransformation.<Bitmap>get());
     String expected = "expected";
     when(gifDrawable.getBuffer()).thenReturn(ByteBuffer.wrap(expected.getBytes()));
diff --git a/integration/integration.iml b/integration/integration.iml
deleted file mode 100644
index b79bc63ad..000000000
--- a/integration/integration.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="glide-parent" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":integration" />
-      </configuration>
-    </facet>
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/integration/okhttp/okhttp.iml b/integration/okhttp/okhttp.iml
deleted file mode 100644
index 613e50692..000000000
--- a/integration/okhttp/okhttp.iml
+++ /dev/null
@@ -1,96 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration:okhttp" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="2.0.0-SNAPSHOT" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":integration:okhttp" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-        <option name="LIBRARY_PROJECT" value="true" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/docs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="okio-1.2.0" level="project" />
-    <orderEntry type="library" exported="" name="okhttp-2.2.0" level="project" />
-    <orderEntry type="module" module-name="glide" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
index fb7311bc3..1985ca24a 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
@@ -2,7 +2,6 @@
 
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -21,8 +20,7 @@
  * Fetches an {@link InputStream} using the okhttp library.
  */
 public class OkHttpStreamFetcher implements DataFetcher<InputStream> {
-  private static final String USER_AGENT_HEADER = "User-Agent";
-  private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
+  private static final String TAG = "OkHttpFetcher";
   private final OkHttpClient client;
   private final GlideUrl url;
   private InputStream stream;
@@ -40,20 +38,16 @@ public void loadData(Priority priority, final DataCallback<? super InputStream>
     for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {
       String key = headerEntry.getKey();
       requestBuilder.addHeader(key, headerEntry.getValue());
-      isUserAgentSet |= USER_AGENT_HEADER.equalsIgnoreCase(key);
-    }
-    if (!isUserAgentSet) {
-      requestBuilder.addHeader(USER_AGENT_HEADER, DEFAULT_USER_AGENT);
     }
     Request request = requestBuilder.build();
 
     client.newCall(request).enqueue(new com.squareup.okhttp.Callback() {
       @Override
       public void onFailure(Request request, IOException e) {
-        if (Logs.isEnabled(Log.DEBUG)) {
-          Logs.log(Log.DEBUG, "OkHttp failed to obtain result", e);
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "OkHttp failed to obtain result", e);
         }
-        callback.onDataReady(null);
+        callback.onLoadFailed(e);
       }
 
       @Override
@@ -62,9 +56,8 @@ public void onResponse(Response response) throws IOException {
           long contentLength = response.body().contentLength();
           responseBody = response.body();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
-        } else if (Logs.isEnabled(Log.DEBUG)) {
-          Logs.log(Log.DEBUG, "OkHttp got error response: " + response.code() + ", "
-              + response.message());
+        } else if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());
         }
         callback.onDataReady(stream);
       }
diff --git a/integration/recyclerview/build.gradle b/integration/recyclerview/build.gradle
new file mode 100644
index 000000000..854dcefdd
--- /dev/null
+++ b/integration/recyclerview/build.gradle
@@ -0,0 +1,31 @@
+apply plugin: 'com.android.library'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile project(':glide')
+    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
+    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+}
+
+android {
+    compileSdkVersion COMPILE_SDK_VERSION as int
+    buildToolsVersion BUILD_TOOLS_VERSION as String
+
+    defaultConfig {
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
+
+        versionCode VERSION_CODE as int
+        versionName VERSION_NAME as String
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+}
+
+apply from: "$rootProject.projectDir/scripts/upload.gradle"
diff --git a/integration/recyclerview/gradle.properties b/integration/recyclerview/gradle.properties
new file mode 100644
index 000000000..06c3c48dc
--- /dev/null
+++ b/integration/recyclerview/gradle.properties
@@ -0,0 +1,15 @@
+POM_NAME=Glide RecyclerView Integration
+POM_ARTIFACT_ID=recyclerview-integration
+POM_PACKAGING=aar
+
+VERSION_NAME=2.0.0-SNAPSHOT
+VERSION_MAJOR=2
+VERSION_MINOR=0
+VERSION_PATCH=0
+VERSION_CODE=8
+
+POM_DESCRIPTION=An integration library to display images in RecyclerView.
+
+# Prefix and postfix for source and javadoc jars.
+JAR_PREFIX=glide-
+JAR_POSTFIX=-integration
diff --git a/integration/recyclerview/lint.xml b/integration/recyclerview/lint.xml
new file mode 100644
index 000000000..ff7e5955c
--- /dev/null
+++ b/integration/recyclerview/lint.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <issue id="AllowBackup" severity="ignore"/>
+</lint>
diff --git a/integration/recyclerview/src/main/AndroidManifest.xml b/integration/recyclerview/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..0d880314c
--- /dev/null
+++ b/integration/recyclerview/src/main/AndroidManifest.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.bumptech.glide.integration.recyclerview">
+    <application />
+</manifest>
diff --git a/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java
new file mode 100644
index 000000000..a3fd25880
--- /dev/null
+++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerToListViewScrollListener.java
@@ -0,0 +1,61 @@
+package com.bumptech.glide.integration.recyclerview;
+
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.widget.AbsListView;
+import android.widget.ListView;
+
+/**
+ * Converts {@link android.support.v7.widget.RecyclerView.OnScrollListener} events to
+ * {@link AbsListView} scroll events.
+ *
+ * <p>Requires that the the recycler view be using a {@link LinearLayoutManager} subclass.
+ */
+public final class RecyclerToListViewScrollListener extends RecyclerView.OnScrollListener {
+  public static final int UNKNOWN_SCROLL_STATE = Integer.MIN_VALUE;
+  private final AbsListView.OnScrollListener scrollListener;
+  private int lastFirstVisible = -1;
+  private int lastVisibleCount = -1;
+  private int lastItemCount = -1;
+
+  public RecyclerToListViewScrollListener(AbsListView.OnScrollListener scrollListener) {
+    this.scrollListener = scrollListener;
+  }
+
+  @Override
+  public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
+    int listViewState;
+    switch (newState) {
+      case RecyclerView.SCROLL_STATE_DRAGGING:
+        listViewState = ListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL;
+        break;
+      case RecyclerView.SCROLL_STATE_IDLE:
+        listViewState = ListView.OnScrollListener.SCROLL_STATE_IDLE;
+        break;
+      case RecyclerView.SCROLL_STATE_SETTLING:
+        listViewState = ListView.OnScrollListener.SCROLL_STATE_FLING;
+        break;
+      default:
+        listViewState = UNKNOWN_SCROLL_STATE;
+    }
+
+    scrollListener.onScrollStateChanged(null /*view*/, listViewState);
+  }
+
+  @Override
+  public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+    LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
+
+    int firstVisible = layoutManager.findFirstVisibleItemPosition();
+    int visibleCount = Math.abs(firstVisible - layoutManager.findLastVisibleItemPosition());
+    int itemCount = recyclerView.getAdapter().getItemCount();
+
+    if (firstVisible != lastFirstVisible || visibleCount != lastVisibleCount
+        || itemCount != lastItemCount) {
+      scrollListener.onScroll(null, firstVisible, visibleCount, itemCount);
+      lastFirstVisible = firstVisible;
+      lastVisibleCount = visibleCount;
+      lastItemCount = itemCount;
+    }
+  }
+}
diff --git a/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java
new file mode 100644
index 000000000..6e062e393
--- /dev/null
+++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java
@@ -0,0 +1,91 @@
+package com.bumptech.glide.integration.recyclerview;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v7.widget.RecyclerView;
+
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.ListPreloader;
+import com.bumptech.glide.ListPreloader.PreloadModelProvider;
+import com.bumptech.glide.ListPreloader.PreloadSizeProvider;
+import com.bumptech.glide.RequestManager;
+
+/**
+ * Loads a few resources ahead in the direction of scrolling in any {@link RecyclerView} so that
+ * images are in the memory cache just before the corresponding view in created in the list. Gives
+ * the appearance of an infinitely large image cache, depending on scrolling speed, cpu speed, and
+ * cache size.
+ *
+ * <p> Must be added as a listener to the {@link RecyclerView} using
+ * {@link RecyclerView#addOnScrollListener(RecyclerView.OnScrollListener)}, or have its
+ * corresponding methods called from another
+ * {@link android.support.v7.widget.RecyclerView.OnScrollListener} to function. </p>
+ *
+ * <p> This class only works with {@link android.support.v7.widget.LinearLayoutManager} and
+ * subclasses of {@link android.support.v7.widget.LinearLayoutManager}. </p>
+ *
+ * @param <T> The type of the model being displayed in the {@link RecyclerView}.
+ */
+@SuppressWarnings("unused")
+public final class RecyclerViewPreloader<T> extends RecyclerView.OnScrollListener {
+
+  private final RecyclerToListViewScrollListener recyclerScrollListener;
+
+  /**
+   * Helper constructor that accepts an {@link Activity}.
+   */
+  public RecyclerViewPreloader(Activity activity,
+      PreloadModelProvider<T> preloadModelProvider,
+      PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload) {
+    this(Glide.with(activity), preloadModelProvider, preloadDimensionProvider, maxPreload);
+  }
+
+  /**
+   * Helper constructor that accepts an {@link FragmentActivity}.
+   */
+  public RecyclerViewPreloader(FragmentActivity fragmentActivity,
+      PreloadModelProvider<T> preloadModelProvider, PreloadSizeProvider<T> preloadDimensionProvider,
+      int maxPreload) {
+    this(Glide.with(fragmentActivity), preloadModelProvider, preloadDimensionProvider, maxPreload);
+  }
+
+  /**
+   * Helper constructor that accepts an {@link Fragment}.
+   */
+  public RecyclerViewPreloader(Fragment fragment,
+      PreloadModelProvider<T> preloadModelProvider, PreloadSizeProvider<T> preloadDimensionProvider,
+      int maxPreload) {
+    this(Glide.with(fragment), preloadModelProvider, preloadDimensionProvider, maxPreload);
+  }
+
+  /**
+   * Helper constructor that accepts an {@link android.support.v4.app.Fragment}.
+   */
+  public RecyclerViewPreloader(android.support.v4.app.Fragment fragment,
+      PreloadModelProvider<T> preloadModelProvider, PreloadSizeProvider<T> preloadDimensionProvider,
+      int maxPreload) {
+    this(Glide.with(fragment), preloadModelProvider, preloadDimensionProvider, maxPreload);
+  }
+  /**
+   * Constructor that accepts interfaces for providing the dimensions of images to preload, the list
+   * of models to preload for a given position, and the request to use to load images.
+   *
+   * @param preloadModelProvider     Provides models to load and requests capable of loading them.
+   * @param preloadDimensionProvider Provides the dimensions of images to load.
+   * @param maxPreload               Maximum number of items to preload.
+   */
+  public RecyclerViewPreloader(RequestManager requestManager,
+      PreloadModelProvider<T> preloadModelProvider,
+      PreloadSizeProvider<T> preloadDimensionProvider, int maxPreload) {
+
+    ListPreloader<T> listPreloader = new ListPreloader<>(requestManager, preloadModelProvider,
+        preloadDimensionProvider, maxPreload);
+    recyclerScrollListener = new RecyclerToListViewScrollListener(listPreloader);
+  }
+
+  @Override
+  public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+    recyclerScrollListener.onScrolled(recyclerView, dx, dy);
+  }
+}
diff --git a/integration/volley/build.gradle b/integration/volley/build.gradle
index 6f5df150a..9656d8389 100644
--- a/integration/volley/build.gradle
+++ b/integration/volley/build.gradle
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.library'
-apply plugin: 'robolectric'
+apply plugin: 'org.robolectric'
 
 repositories {
     mavenCentral()
@@ -9,12 +9,12 @@ dependencies {
     compile project(':glide')
     compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
 
-    androidTestCompile project(":testutil")
-    androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    androidTestCompile "junit:junit:${JUNIT_VERSION}"
-    androidTestCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
-    androidTestCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    androidTestCompile "com.squareup.okhttp:mockwebserver:${MOCKWEBSERVER_VERSION}"
+    testCompile project(":testutil")
+    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
+    testCompile "junit:junit:${JUNIT_VERSION}"
+    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testCompile "com.squareup.okhttp:mockwebserver:${MOCKWEBSERVER_VERSION}"
 }
 
 android {
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
index fbb761093..02e517cc0 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
@@ -9,7 +9,6 @@
 import com.android.volley.Response;
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.HttpHeaderParser;
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -24,6 +23,7 @@
  * A DataFetcher backed by volley for fetching images via http.
  */
 public class VolleyStreamFetcher implements DataFetcher<InputStream> {
+  private static final String TAG = "VolleyStreamFetcher";
   public static final VolleyRequestFactory DEFAULT_REQUEST_FACTORY = new VolleyRequestFactory() {
     @Override
     public Request<byte[]> create(String url, DataCallback<? super InputStream> callback,
@@ -125,10 +125,10 @@ public Priority getPriority() {
 
     @Override
     protected VolleyError parseNetworkError(VolleyError volleyError) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Volley failed to retrieve response", volleyError);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Volley failed to retrieve response", volleyError);
       }
-      callback.onDataReady(null);
+      callback.onLoadFailed(volleyError);
       return super.parseNetworkError(volleyError);
     }
 
diff --git a/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
similarity index 84%
rename from integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
rename to integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
index 40face73b..0f72af7b5 100644
--- a/integration/volley/src/androidTest/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
+++ b/integration/volley/src/test/java/com/bumptech/glide/integration/volley/VolleyStreamFetcherServerTest.java
@@ -1,9 +1,9 @@
 package com.bumptech.glide.integration.volley;
 
-import static com.google.common.truth.Truth.assertThat;
 import static com.bumptech.glide.testutil.TestUtil.assertStreamOf;
+import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.isNull;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -12,6 +12,7 @@
 import android.os.SystemClock;
 
 import com.android.volley.RequestQueue;
+import com.android.volley.VolleyError;
 import com.android.volley.toolbox.Volley;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -48,7 +49,7 @@
  * responses.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18,
+@Config(manifest = Config.NONE, sdk = 18,
     shadows = VolleyStreamFetcherServerTest.FakeSystemClock.class)
 public class VolleyStreamFetcherServerTest {
   private static final String DEFAULT_PATH = "/fakepath";
@@ -66,16 +67,11 @@ public void setUp() throws IOException {
     MockitoAnnotations.initMocks(this);
 
     waitForResponseLatch = new CountDownLatch(1);
-    doAnswer(new Answer<Void>() {
-      @Override
-      public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
-        waitForResponseLatch.countDown();
-        return null;
-      }
-    }).when(callback).onDataReady(any(InputStream.class));
+    doAnswer(new CountDown()).when(callback).onDataReady(any(InputStream.class));
+    doAnswer(new CountDown()).when(callback).onLoadFailed(any(Exception.class));
     requestQueue = Volley.newRequestQueue(RuntimeEnvironment.application);
     mockWebServer = new MockWebServer();
-    mockWebServer.play();
+    mockWebServer.start();
 
     streamCaptor = ArgumentCaptor.forClass(InputStream.class);
   }
@@ -144,49 +140,49 @@ public void testHandlesUpToFiveRedirects() throws Exception {
   }
 
   @Test
-  public void testReturnsNullIfRedirectLocationIsEmpty() throws Exception {
+  public void testCallsLoadFailedIfRedirectLocationIsEmpty() throws Exception {
     for (int i = 0; i < 2; i++) {
       mockWebServer.enqueue(new MockResponse().setResponseCode(301));
     }
 
     getFetcher().loadData(Priority.NORMAL, callback);
     waitForResponseLatch.await();
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(VolleyError.class));
   }
 
   @Test
-  public void testReturnsNullIfStatusCodeIsNegativeOne() throws Exception {
+  public void testCallsLoadFailedIfStatusCodeIsNegativeOne() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(-1));
     getFetcher().loadData(Priority.LOW, callback);
     waitForResponseLatch.await();
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(VolleyError.class));
   }
 
   @Test
-  public void testReturnsNullAfterTooManyRedirects() throws Exception {
+  public void testCallsLoadFailedAfterTooManyRedirects() throws Exception {
     for (int i = 0; i < 20; i++) {
       mockWebServer.enqueue(new MockResponse().setResponseCode(301)
           .setHeader("Location", mockWebServer.getUrl("/redirect" + i)));
     }
     getFetcher().loadData(Priority.NORMAL, callback);
     waitForResponseLatch.await();
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(VolleyError.class));
   }
 
   @Test
-  public void testReturnsNullIfStatusCodeIs500() throws Exception {
+  public void testCallsLoadFailedIfStatusCodeIs500() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(500).setBody("error"));
     getFetcher().loadData(Priority.NORMAL, callback);
     waitForResponseLatch.await();
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(VolleyError.class));
   }
 
   @Test
-  public void testReturnsNullIfStatusCodeIs400() throws Exception {
+  public void testCallsLoadFailedIfStatusCodeIs400() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(400).setBody("error"));
     getFetcher().loadData(Priority.LOW, callback);
     waitForResponseLatch.await();
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(VolleyError.class));
   }
 
   @Test
@@ -194,7 +190,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(200));
     String headerField = "field";
     String headerValue = "value";
-    Map<String, String> headersMap = new HashMap<String, String>();
+    Map<String, String> headersMap = new HashMap<>();
     headersMap.put(headerField, headerValue);
     Headers headers = mock(Headers.class);
     when(headers.getHeaders()).thenReturn(headersMap);
@@ -206,7 +202,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
   }
 
   private DataFetcher<InputStream> getFetcher() {
-    return getFetcher(Headers.NONE);
+    return getFetcher(Headers.DEFAULT);
   }
 
   private DataFetcher<InputStream> getFetcher(Headers headers) {
@@ -214,12 +210,23 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
     return new VolleyStreamFetcher(requestQueue, new GlideUrl(url.toString(), headers));
   }
 
+  private class CountDown implements Answer<Void> {
+
+    @Override
+    public Void answer(InvocationOnMock invocation) throws Throwable {
+      waitForResponseLatch.countDown();
+      return null;
+    }
+  }
+
   /**
    * A shadow clock that doesn't rely on running on an Android thread with a Looper.
    */
   @Implements(SystemClock.class)
   public static class FakeSystemClock extends ShadowSystemClock {
 
+    // Used by Shadow.
+    @SuppressWarnings("unused")
     @Implementation
     public static long elapsedRealtime() {
       // The default is to return something using the main looper, which doesn't exist on
diff --git a/integration/volley/volley.iml b/integration/volley/volley.iml
deleted file mode 100644
index f3ca3d753..000000000
--- a/integration/volley/volley.iml
+++ /dev/null
@@ -1,128 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":integration:volley" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="com.github.bumptech.glide" external.system.module.version="2.0.0-SNAPSHOT" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":integration:volley" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-        <option name="LIBRARY_PROJECT" value="true" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/docs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-report" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-resources-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="okio-1.2.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-5.0.1" level="project" />
-    <orderEntry type="library" exported="" name="library-1.0.10" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="truth-0.24" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="bcprov-jdk15on-1.50" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="accessibility-test-framework-1.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="bcprov-jdk16-1.46" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="mockwebserver-2.2.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="sqlite4java-0.282" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="maven-ant-tasks-2.1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="commons-codec-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="okhttp-2.2.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-annotations-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="vtd-xml-2.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-commons-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="hamcrest-core-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="junit-4.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-tree-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-analysis-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-utils-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="shadows-core-3.0-rc2-21" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="icu4j-53.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="mockito-all-1.9.5" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="guava-17.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-launcher-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-util-5.0.1" level="project" />
-    <orderEntry type="module" module-name="testutil" exported="" />
-    <orderEntry type="module" module-name="glide" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/library/build.gradle b/library/build.gradle
index c245a6b47..d456240ad 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,5 +1,5 @@
 apply plugin: 'com.android.library'
-apply plugin: 'robolectric'
+apply plugin: 'org.robolectric'
 apply plugin: 'maven'
 apply plugin: 'findbugs'
 apply plugin: 'pmd'
@@ -21,18 +21,17 @@ dependencies {
     compile project(':third_party:disklrucache')
     compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
 
-    androidTestCompile project(':testutil')
-    androidTestCompile 'com.google.guava:guava-testlib:18.0'
-    androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    androidTestCompile "junit:junit:${JUNIT_VERSION}"
-    androidTestCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
-    androidTestCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    androidTestCompile "com.squareup.okhttp:mockwebserver:${MOCKWEBSERVER_VERSION}"
-    androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    testCompile project(':testutil')
+    testCompile 'com.google.guava:guava-testlib:18.0'
+    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
+    testCompile "junit:junit:${JUNIT_VERSION}"
+    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testCompile "com.squareup.okhttp:mockwebserver:${MOCKWEBSERVER_VERSION}"
+    testCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
 }
 
-robolectric {
+android.testOptions.unitTests.all {
     // configure max heap size of the test JVM
     maxHeapSize = '2048m'
 }
@@ -81,10 +80,6 @@ afterEvaluate {
         }
     }
 
-    findbugsTestDebug {
-        enabled = false
-    }
-
     check.dependsOn('findbugs')
 
     task pmd(type: Pmd) {
@@ -105,10 +100,6 @@ afterEvaluate {
         }
     }
 
-    pmdTestDebug {
-        enabled = false
-    }
-
     check.dependsOn('pmd')
 
     task jacocoTestReport(type: JacocoReport, dependsOn: testDebug) {
diff --git a/library/findbugs-exclude.xml b/library/findbugs-exclude.xml
index fe34a737f..f929a391d 100644
--- a/library/findbugs-exclude.xml
+++ b/library/findbugs-exclude.xml
@@ -26,4 +26,14 @@
         <Bug pattern="EI_EXPOSE_REP2"/>
     </Match>
 
+    <!-- DecodeJob tasks are ordered, but equivalent ordering does not imply equality -->
+    <Match>
+        <Class name="com.bumptech.glide.load.engine.DecodeJob" />
+        <Bug pattern="EQ_COMPARETO_USE_OBJECT_EQUALS" />
+    </Match>
+    <Match>
+       <Class name="com.bumptech.glide.load.engine.GlideException$IndentedPrintStream" />
+       <Bug pattern="DM_DEFAULT_ENCODING" />
+    </Match>
+
 </FindBugsFilter>
diff --git a/library/library.iml b/library/library.iml
deleted file mode 100644
index 6bc2f47af..000000000
--- a/library/library.iml
+++ /dev/null
@@ -1,131 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":library" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="glide-parent" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":library" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-        <option name="LIBRARY_PROJECT" value="true" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-report" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-resources-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="okio-1.2.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-5.0.1" level="project" />
-    <orderEntry type="library" exported="" name="support-v4-21.0.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="guava-18.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="truth-0.24" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="bcprov-jdk15on-1.50" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="accessibility-test-framework-1.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="bcprov-jdk16-1.46" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="mockwebserver-2.2.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="sqlite4java-0.282" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="maven-ant-tasks-2.1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="jsr305-1.3.9" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="commons-codec-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="okhttp-2.2.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-annotations-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="vtd-xml-2.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="guava-testlib-18.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-commons-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="hamcrest-core-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="junit-4.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-tree-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-analysis-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-utils-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="shadows-core-3.0-rc2-21" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="mockito-all-1.9.5" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="icu4j-53.1" level="project" />
-    <orderEntry type="library" exported="" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-launcher-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-util-5.0.1" level="project" />
-    <orderEntry type="module" module-name="gif_decoder" exported="" />
-    <orderEntry type="module" module-name="testutil" exported="" />
-    <orderEntry type="module" module-name="disklrucache" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java b/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java
deleted file mode 100644
index 5660def84..000000000
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutorTest.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.bumptech.glide.load.engine.executor;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-
-import com.google.common.testing.EqualsTester;
-
-import com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.LoadTask;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
-public class FifoPriorityThreadPoolExecutorTest {
-
-  @Test
-  public void testLoadsAreExecutedInOrder() throws InterruptedException {
-    final List<Integer> resultPriorities = Collections.synchronizedList(new ArrayList<Integer>());
-    FifoPriorityThreadPoolExecutor executor = new FifoPriorityThreadPoolExecutor(1);
-    for (int i = 5; i > 0; i--) {
-      executor.submit(new MockRunnable(i, new MockRunnable.OnRun() {
-        @Override
-        public void onRun(int priority) {
-          resultPriorities.add(priority);
-        }
-      }));
-    }
-
-    executor.shutdown();
-    executor.awaitTermination(500, TimeUnit.MILLISECONDS);
-
-    // Since no jobs are queued, the first item added will be run immediately, regardless of
-    // priority.
-    assertThat(resultPriorities).containsExactly(5, 1, 2, 3, 4);
-  }
-
-  @Test
-  public void testLoadsWithSamePriorityAreExecutedInSubmitOrder() throws InterruptedException {
-    final int numItemsToTest = 10;
-    final List<Integer> executionOrder = new ArrayList<>();
-    final List<Integer> executedOrder = Collections.synchronizedList(new ArrayList<Integer>());
-    FifoPriorityThreadPoolExecutor executor = new FifoPriorityThreadPoolExecutor(1);
-    for (int i = 0; i < numItemsToTest; i++) {
-      executionOrder.add(i);
-    }
-    for (int i = 0; i < numItemsToTest; i++) {
-      final int finalI = i;
-      executor.submit(new MockRunnable(0, new MockRunnable.OnRun() {
-        final int position = finalI;
-
-        @Override
-        public void onRun(int priority) {
-          executedOrder.add(position);
-        }
-      }));
-    }
-    executor.awaitTermination(200, TimeUnit.MILLISECONDS);
-
-    assertThat(executedOrder).containsAllIn(executionOrder).inOrder();
-  }
-
-  @Test
-  public void testLoadTaskEquality() {
-    new EqualsTester().addEqualityGroup(new LoadTask<>(new MockRunnable(10), new Object(), 1),
-        new LoadTask<>(new MockRunnable(10), new Object(), 1))
-        .addEqualityGroup(new LoadTask<>(new MockRunnable(5), new Object(), 1))
-        .addEqualityGroup(new LoadTask<>(new MockRunnable(10), new Object(), 3)).testEquals();
-  }
-
-  @Test
-  public void testLoadTaskCompareToPrefersHigherPriority() {
-    LoadTask<Object> first = new LoadTask<>(new MockRunnable(10), new Object(), 10);
-    LoadTask<Object> second = new LoadTask<>(new MockRunnable(0), new Object(), 10);
-
-    assertTrue(first.compareTo(second) > 0);
-    assertTrue(second.compareTo(first) < 0);
-  }
-
-  @Test
-  public void testLoadTaskCompareToFallsBackToOrderIfPriorityIsEqual() {
-    LoadTask<Object> first = new LoadTask<>(new MockRunnable(0), new Object(), 2);
-    LoadTask<Object> second = new LoadTask<>(new MockRunnable(0), new Object(), 1);
-
-    assertTrue(first.compareTo(second) > 0);
-    assertTrue(second.compareTo(first) < 0);
-  }
-
-  @Test
-  public void testLoadTaskCompareToReturnsZeroIfPriorityAndOrderAreEqual() {
-    LoadTask<Object> first = new LoadTask<>(new MockRunnable(0), new Object(), 1);
-    LoadTask<Object> second = new LoadTask<>(new MockRunnable(0), new Object(), 1);
-
-    assertEquals(0, first.compareTo(second));
-    assertEquals(0, second.compareTo(first));
-  }
-
-  private static class MockRunnable implements Runnable,
-      Prioritized {
-    private final int priority;
-    private final OnRun onRun;
-
-    public interface OnRun {
-      public void onRun(int priority);
-    }
-
-    public MockRunnable(int priority) {
-      this(priority, mock(OnRun.class));
-    }
-
-    public MockRunnable(int priority, OnRun onRun) {
-      this.priority = priority;
-      this.onRun = onRun;
-    }
-
-    @Override
-    public int getPriority() {
-      return priority;
-    }
-
-    @Override
-    public void run() {
-      onRun.onRun(priority);
-    }
-  }
-}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/LazyHeadersTest.java b/library/src/androidTest/java/com/bumptech/glide/load/model/LazyHeadersTest.java
deleted file mode 100644
index a4f15ecb4..000000000
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/LazyHeadersTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.bumptech.glide.load.model;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import com.google.common.testing.EqualsTester;
-
-import com.bumptech.glide.load.model.LazyHeaders.Builder;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.Map;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
-public class LazyHeadersTest {
-
-    @Test
-    public void testIncludesEagerHeaders() {
-        Map<String, String> headers = new Builder()
-            .addHeader("key", "value")
-            .build()
-            .getHeaders();
-        assertThat(headers).containsEntry("key", "value");
-        assertThat(headers).hasSize(1);
-    }
-
-    @Test
-    public void testIncludesLazyHeaders() {
-        LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
-        when(factory.buildHeader()).thenReturn("value");
-        Map<String, String> headers = new Builder()
-            .addHeader("key", factory)
-            .build()
-            .getHeaders();
-
-        assertThat(headers).hasSize(1);
-        assertThat(headers).containsEntry("key", "value");
-    }
-
-    @Test
-    public void testMultipleEagerValuesAreSeparatedByCommas() {
-        Map<String, String> headers = new Builder()
-            .addHeader("key", "first")
-            .addHeader("key", "second")
-            .build()
-            .getHeaders();
-
-        assertThat(headers).hasSize(1);
-        assertThat(headers).containsEntry("key", "first,second");
-    }
-
-    @Test
-    public void testMultipleLazyValuesAreSeparatedByCommas() {
-        LazyHeaderFactory first = mock(LazyHeaderFactory.class);
-        when(first.buildHeader()).thenReturn("first");
-        LazyHeaderFactory second = mock(LazyHeaderFactory.class);
-        when(second.buildHeader()).thenReturn("second");
-
-        Map<String, String> headers = new Builder()
-            .addHeader("key", first)
-            .addHeader("key", second)
-            .build()
-            .getHeaders();
-        assertThat(headers).hasSize(1);
-        assertThat(headers).containsEntry("key", "first,second");
-    }
-
-    @Test
-    public void testMixedEagerAndLazyValuesAreIncluded() {
-        LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
-        when(factory.buildHeader()).thenReturn("first");
-        Map<String, String> headers = new Builder()
-            .addHeader("key", factory)
-            .addHeader("key", "second")
-            .build()
-            .getHeaders();
-
-        assertThat(headers).hasSize(1);
-        assertThat(headers).containsEntry("key", "first,second");
-
-        headers = new Builder()
-            .addHeader("key", "second")
-            .addHeader("key", factory)
-            .build()
-            .getHeaders();
-
-        assertThat(headers).hasSize(1);
-        assertThat(headers).containsEntry("key", "second,first");
-    }
-
-    @Test
-    public void testCanAddMultipleKeys() {
-        LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
-        when(factory.buildHeader()).thenReturn("lazy");
-        Map<String, String> headers = new Builder()
-            .addHeader("first", factory)
-            .addHeader("second", "eager")
-            .build()
-            .getHeaders();
-
-        assertThat(headers).hasSize(2);
-        assertThat(headers).containsEntry("first", "lazy");
-        assertThat(headers).containsEntry("second", "eager");
-    }
-
-    @Test
-    public void testUpdatingBuilderAfterBuildingDoesNotModifyOriginalHeaders() {
-        Builder builder = new Builder();
-        builder.addHeader("key", "firstValue");
-        LazyHeaders first = builder.build();
-
-        LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
-        when(factory.buildHeader()).thenReturn("otherValue");
-        builder.addHeader("key", "secondValue");
-        builder.addHeader("otherKey", factory);
-        LazyHeaders second = builder.build();
-
-        assertThat(first.getHeaders()).isNotEqualTo(second.getHeaders());
-
-        assertThat(first.getHeaders()).hasSize(1);
-        assertThat(first.getHeaders()).containsEntry("key", "firstValue");
-
-        assertThat(second.getHeaders()).hasSize(2);
-        assertThat(second.getHeaders()).containsEntry("key", "firstValue,secondValue");
-        assertThat(second.getHeaders()).containsEntry("otherKey", "otherValue");
-    }
-
-    @Test
-    public void testEquals() {
-        LazyHeaderFactory firstLazyFactory = mock(LazyHeaderFactory.class);
-        LazyHeaderFactory secondLazyFactory = mock(LazyHeaderFactory.class);
-        new EqualsTester()
-            .addEqualityGroup(
-                new Builder().build(),
-                new Builder().build()
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("key", "value").build(),
-                new Builder().addHeader("key", "value").build()
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("key", "value").addHeader("key", "value").build()
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("key", firstLazyFactory).build(),
-                new Builder().addHeader("key", firstLazyFactory).build()
-            )
-            .addEqualityGroup(
-                new Builder()
-                    .addHeader("key", firstLazyFactory)
-                    .addHeader("key", firstLazyFactory)
-                    .build()
-            )
-            .addEqualityGroup(
-                new Builder()
-                    .addHeader("firstKey", "value")
-                    .addHeader("secondKey", firstLazyFactory)
-                    .build(),
-                new Builder()
-                    .addHeader("secondKey", firstLazyFactory)
-                    .addHeader("firstKey", "value")
-                    .build()
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("key", "secondValue")
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("secondKey", "value")
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("key", secondLazyFactory)
-            )
-            .addEqualityGroup(
-                new Builder().addHeader("secondKey", firstLazyFactory)
-            )
-            .addEqualityGroup(
-                new Builder()
-                    .addHeader("firstKey", "firstValue")
-                    .addHeader("secondKey", "secondValue")
-                    .build(),
-                new Builder()
-                    .addHeader("firstKey", "firstValue")
-                    .addHeader("secondKey", "secondValue")
-                    .build(),
-                new Builder()
-                    .addHeader("secondKey", "secondValue")
-                    .addHeader("firstKey", "firstValue")
-                    .build()
-            )
-            .addEqualityGroup(
-                new Builder()
-                    .addHeader("firstKey", firstLazyFactory)
-                    .addHeader("secondKey", secondLazyFactory)
-                    .build(),
-                new Builder()
-                    .addHeader("firstKey", firstLazyFactory)
-                    .addHeader("secondKey", secondLazyFactory)
-                    .build(),
-                new Builder()
-                    .addHeader("secondKey", secondLazyFactory)
-                    .addHeader("firstKey", firstLazyFactory)
-                    .build()
-            )
-            .testEquals();
-    }
-}
\ No newline at end of file
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/BaseRequestOptionsTest.java b/library/src/androidTest/java/com/bumptech/glide/request/BaseRequestOptionsTest.java
deleted file mode 100644
index 4ece015f0..000000000
--- a/library/src/androidTest/java/com/bumptech/glide/request/BaseRequestOptionsTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.bumptech.glide.request;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.mock;
-
-import com.bumptech.glide.load.Transformation;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
-public class BaseRequestOptionsTest {
-
-  private TestOptions options;
-
-  @Before
-  public void setUp() {
-    options = new TestOptions();
-  }
-
-  @Test
-  public void testTransformationIsSetAfterApplyingOtherOptionsWithTransformation() {
-    TestOptions other = new TestOptions();
-    other.transform(Object.class, mock(Transformation.class));
-    options.apply(other);
-    assertThat(options.isTransformationSet()).isTrue();
-  }
-
-  private static class TestOptions extends BaseRequestOptions<TestOptions> {
-    // Empty.
-  }
-}
\ No newline at end of file
diff --git a/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java
index 606761aa1..47657e942 100644
--- a/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java
+++ b/library/src/main/java/com/bumptech/glide/GenericTransitionOptions.java
@@ -6,6 +6,11 @@
  *
  * @param <TranscodeType> The type of the resource that will be displayed.
  */
+@SuppressWarnings("PMD.UseUtilityClass")
 public final class GenericTransitionOptions<TranscodeType> extends
-    TransitionOptions<GenericTransitionOptions<TranscodeType>, TranscodeType> {
+  TransitionOptions<GenericTransitionOptions<TranscodeType>, TranscodeType> {
+
+  public static <TranscodeType> GenericTransitionOptions<TranscodeType> withNoTransition() {
+    return new GenericTransitionOptions<TranscodeType>().dontTransition();
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index e61a6aa44..9366de2a0 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -11,6 +11,7 @@
 import android.net.Uri;
 import android.os.Build;
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.util.Log;
@@ -19,8 +20,10 @@
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.data.InputStreamRewinder;
 import com.bumptech.glide.load.engine.Engine;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.engine.prefill.BitmapPreFiller;
 import com.bumptech.glide.load.engine.prefill.PreFillType;
@@ -30,6 +33,7 @@
 import com.bumptech.glide.load.model.ByteBufferFileLoader;
 import com.bumptech.glide.load.model.FileLoader;
 import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.load.model.MediaStoreFileLoader;
 import com.bumptech.glide.load.model.ResourceLoader;
 import com.bumptech.glide.load.model.StreamEncoder;
 import com.bumptech.glide.load.model.StringLoader;
@@ -61,7 +65,6 @@
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.module.GlideModule;
 import com.bumptech.glide.module.ManifestParser;
-import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.Target;
@@ -81,11 +84,6 @@
  */
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
 public class Glide implements ComponentCallbacks2 {
-  /**
-   * 250 MB of cache.
-   */
-  static final int DEFAULT_DISK_CACHE_SIZE = 250 * 1024 * 1024;
-
   private static final String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";
   private static final String TAG = "Glide";
   private static volatile Glide glide;
@@ -96,6 +94,7 @@
   private final BitmapPreFiller bitmapPreFiller;
   private final GlideContext glideContext;
   private final Registry registry;
+  private final ArrayPool arrayPool;
   private final ByteArrayPool byteArrayPool;
   private final List<RequestManager> managers = new ArrayList<>();
 
@@ -106,6 +105,7 @@
    * @param context A context.
    * @see #getPhotoCacheDir(android.content.Context, String)
    */
+  @Nullable
   public static File getPhotoCacheDir(Context context) {
     return getPhotoCacheDir(context, DEFAULT_DISK_CACHE_DIR);
   }
@@ -118,6 +118,7 @@ public static File getPhotoCacheDir(Context context) {
    * @param cacheName The name of the subdirectory in which to store the cache.
    * @see #getPhotoCacheDir(android.content.Context)
    */
+  @Nullable
   public static File getPhotoCacheDir(Context context, String cacheName) {
     File cacheDir = context.getCacheDir();
     if (cacheDir != null) {
@@ -167,20 +168,29 @@ static void tearDown() {
   }
 
   @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  Glide(Engine engine, MemoryCache memoryCache, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,
-      Context context, DecodeFormat decodeFormat) {
+  Glide(
+      Engine engine,
+      MemoryCache memoryCache,
+      BitmapPool bitmapPool,
+      ArrayPool arrayPool,
+      Context context,
+      int logLevel,
+      RequestOptions defaultRequestOptions) {
     this.engine = engine;
     this.bitmapPool = bitmapPool;
-    this.byteArrayPool = byteArrayPool;
+    this.arrayPool = arrayPool;
     this.memoryCache = memoryCache;
+    this.byteArrayPool = new LruByteArrayPool();
+
+    DecodeFormat decodeFormat = defaultRequestOptions.getOptions().get(Downsampler.DECODE_FORMAT);
     bitmapPreFiller = new BitmapPreFiller(memoryCache, bitmapPool, decodeFormat);
 
     Resources resources = context.getResources();
 
     Downsampler downsampler =
         new Downsampler(resources.getDisplayMetrics(), bitmapPool, byteArrayPool);
-    ByteBufferGifDecoder byteBufferGifDecoder = new ByteBufferGifDecoder(context, bitmapPool,
-        byteArrayPool);
+    ByteBufferGifDecoder byteBufferGifDecoder =
+        new ByteBufferGifDecoder(context, bitmapPool, arrayPool);
     registry = new Registry(context)
         .register(ByteBuffer.class, new ByteBufferEncoder())
         .register(InputStream.class, new StreamEncoder(byteArrayPool))
@@ -234,6 +244,7 @@ static void tearDown() {
         .append(Uri.class, ParcelFileDescriptor.class, new UriLoader.FileDescriptorFactory())
         .append(Uri.class, InputStream.class, new UrlUriLoader.StreamFactory())
         .append(URL.class, InputStream.class, new UrlLoader.StreamFactory())
+        .append(Uri.class, File.class, new MediaStoreFileLoader.Factory())
         .append(GlideUrl.class, InputStream.class, new HttpGlideUrlLoader.Factory())
         .append(byte[].class, ByteBuffer.class, new ByteArrayLoader.ByteBufferFactory())
         .append(byte[].class, InputStream.class, new ByteArrayLoader.StreamFactory())
@@ -244,9 +255,8 @@ static void tearDown() {
         .register(GifDrawable.class, byte[].class, new GifDrawableBytesTranscoder());
 
     ImageViewTargetFactory imageViewTargetFactory = new ImageViewTargetFactory();
-    RequestOptions options = new RequestOptions().format(decodeFormat);
-    glideContext =
-        new GlideContext(context, registry, imageViewTargetFactory, options, engine, this);
+    glideContext = new GlideContext(context, registry, imageViewTargetFactory,
+        defaultRequestOptions, engine, this, logLevel);
   }
 
   /**
@@ -276,6 +286,10 @@ public ByteArrayPool getByteArrayPool() {
     return byteArrayPool;
   }
 
+  public ArrayPool getArrayPool() {
+    return arrayPool;
+  }
+
   GlideContext getGlideContext() {
     return glideContext;
   }
@@ -318,7 +332,7 @@ public void preFillBitmapPool(PreFillType.Builder... bitmapAttributeBuilders) {
   public void clearMemory() {
     bitmapPool.clearMemory();
     memoryCache.clearMemory();
-    byteArrayPool.clearMemory();
+    arrayPool.clearMemory();
   }
 
   /**
@@ -329,7 +343,7 @@ public void clearMemory() {
   public void trimMemory(int level) {
     bitmapPool.trimMemory(level);
     memoryCache.trimMemory(level);
-    byteArrayPool.trimMemory(level);
+    arrayPool.trimMemory(level);
   }
 
   /**
@@ -441,15 +455,15 @@ public Registry getRegistry() {
     return registry;
   }
 
-  void removeFromManagers(Target<?> target, Request request) {
-    for (RequestManager requestManager : managers) {
-      if (requestManager.untrack(target, request)) {
-        return;
+  void removeFromManagers(Target<?> target) {
+    synchronized (managers) {
+      for (RequestManager requestManager : managers) {
+        if (requestManager.untrack(target)) {
+          return;
+        }
       }
     }
-    if (request != null) {
-      throw new IllegalStateException("Failed to remove request from managers");
-    }
+    throw new IllegalStateException("Failed to remove target from managers");
   }
 
   void registerRequestManager(RequestManager requestManager) {
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 82cade531..8551252e9 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -2,40 +2,41 @@
 
 import android.content.Context;
 import android.os.Build;
+import android.util.Log;
 
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.engine.Engine;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
-import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;
 import com.bumptech.glide.load.engine.cache.LruResourceCache;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.engine.cache.MemorySizeCalculator;
-import com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;
-
-import java.util.concurrent.ExecutorService;
+import com.bumptech.glide.load.engine.executor.GlideExecutor;
+import com.bumptech.glide.request.RequestOptions;
 
 /**
  * A builder class for setting default structural classes for Glide to use.
  */
-public class GlideBuilder {
+public final class GlideBuilder {
   private final Context context;
 
   private Engine engine;
   private BitmapPool bitmapPool;
-  private ByteArrayPool byteArrayPool;
+  private ArrayPool arrayPool;
   private MemoryCache memoryCache;
-  private ExecutorService sourceService;
-  private ExecutorService diskCacheService;
-  private DecodeFormat decodeFormat;
+  private GlideExecutor sourceExecutor;
+  private GlideExecutor diskCacheExecutor;
   private DiskCache.Factory diskCacheFactory;
   private MemorySizeCalculator memorySizeCalculator;
+  private int logLevel = Log.INFO;
+  private RequestOptions defaultRequestOptions = new RequestOptions();
 
-  public GlideBuilder(Context context) {
+  GlideBuilder(Context context) {
     this.context = context.getApplicationContext();
   }
 
@@ -52,14 +53,14 @@ public GlideBuilder setBitmapPool(BitmapPool bitmapPool) {
   }
 
   /**
-   * Sets the {@link ByteArrayPool} implementation to allow variable sized byte arrays to be stored
+   * Sets the {@link ArrayPool} implementation to allow variable sized arrays to be stored
    * and retrieved as needed.
    *
-   * @param byteArrayPool The pool to use.
+   * @param arrayPool The pool to use.
    * @return This builder.
    */
-  public GlideBuilder setByteArrayPool(ByteArrayPool byteArrayPool) {
-    this.byteArrayPool = byteArrayPool;
+  public GlideBuilder setArrayPool(ArrayPool arrayPool) {
+    this.arrayPool = arrayPool;
     return this;
   }
 
@@ -100,7 +101,7 @@ public DiskCache build() {
    * to construct the {@link com.bumptech.glide.load.engine.cache.DiskCache} to use to store {@link
    * com.bumptech.glide.load.engine.Resource} data on disk.
    *
-   * @param diskCacheFactory The disk cche factory to use.
+   * @param diskCacheFactory The disk cache factory to use.
    * @return This builder.
    */
   public GlideBuilder setDiskCache(DiskCache.Factory diskCacheFactory) {
@@ -113,15 +114,15 @@ public GlideBuilder setDiskCache(DiskCache.Factory diskCacheFactory) {
    * {@link com.bumptech.glide.load.engine.Resource}s that are not already in the cache.
    *
    * <p> Any implementation must order requests based on their {@link com.bumptech.glide.Priority}
-   * for thumbnail requests to work properly. </p>
+   * for thumbnail requests to work properly.
    *
    * @param service The ExecutorService to use.
    * @return This builder.
-   * @see #setDiskCacheService(java.util.concurrent.ExecutorService)
-   * @see com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor
+   * @see #setDiskCacheExecutor(GlideExecutor)
+   * @see GlideExecutor
    */
-  public GlideBuilder setResizeService(ExecutorService service) {
-    this.sourceService = service;
+  public GlideBuilder setResizeExecutor(GlideExecutor service) {
+    this.sourceExecutor = service;
     return this;
   }
 
@@ -130,15 +131,30 @@ public GlideBuilder setResizeService(ExecutorService service) {
    * {@link com.bumptech.glide.load.engine.Resource}s that are currently in cache.
    *
    * <p> Any implementation must order requests based on their {@link com.bumptech.glide.Priority}
-   * for thumbnail requests to work properly. </p>
+   * for thumbnail requests to work properly.
    *
    * @param service The ExecutorService to use.
    * @return This builder.
-   * @see #setResizeService(java.util.concurrent.ExecutorService)
-   * @see com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor
+   * @see #setResizeExecutor(GlideExecutor)
+   * @see GlideExecutor
+   */
+  public GlideBuilder setDiskCacheExecutor(GlideExecutor service) {
+    this.diskCacheExecutor = service;
+    return this;
+  }
+
+  /**
+   * Sets the default {@link RequestOptions} to use for all loads across the app.
+   *
+   * <p>Applying additional options with {@link
+   * RequestBuilder#apply(com.bumptech.glide.request.BaseRequestOptions)} will override defaults
+   * set here.
+   *
+   * @param requestOptions The options to use by default.
+   * @return This builder.
    */
-  public GlideBuilder setDiskCacheService(ExecutorService service) {
-    this.diskCacheService = service;
+  public GlideBuilder setDefaultRequestOptions(RequestOptions requestOptions) {
+    this.defaultRequestOptions = requestOptions;
     return this;
   }
 
@@ -150,16 +166,14 @@ public GlideBuilder setDiskCacheService(ExecutorService service) {
    * <p> Decode format is always a suggestion, not a requirement. See {@link
    * com.bumptech.glide.load.DecodeFormat} for more details. </p>
    *
-   * <p> If you instantiate and use a custom decoder, it will use {@link
-   * com.bumptech.glide.load.DecodeFormat#DEFAULT} as its default. </p>
-   *
-   * <p> Calls to this method are ignored on KitKat and Lollipop. See #301. </p>
-   *
    * @param decodeFormat The format to use.
    * @return This builder.
+   *
+   * @deprecated Use {@link #setDefaultRequestOptions(RequestOptions)} instead.
    */
+  @Deprecated
   public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
-    this.decodeFormat = decodeFormat;
+    defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
     return this;
   }
 
@@ -191,6 +205,40 @@ public GlideBuilder setMemorySizeCalculator(MemorySizeCalculator calculator) {
     return this;
   }
 
+  /**
+   * Sets a log level constant from those in {@link Log} to indicate the desired log verbosity.
+   *
+   * <p>The level must be one of {@link Log#VERBOSE}, {@link Log#DEBUG}, {@link Log#INFO},
+   * {@link Log#WARN}, or {@link Log#ERROR}.
+   *
+   * <p>{@link Log#VERBOSE} means one or more lines will be logged per request, including
+   * timing logs and failures. {@link Log#DEBUG} means at most one line will be logged
+   * per successful request, including timing logs, although many lines may be logged for
+   * failures including multiple complete stack traces. {@link Log#INFO} means
+   * failed loads will be logged including multiple complete stack traces, but successful loads
+   * will not be logged at all. {@link Log#WARN} means only summaries of failed loads will be
+   * logged. {@link Log#ERROR} means only exceptional cases will be logged.
+   *
+   * <p>All logs will be logged using the 'Glide' tag.
+   *
+   * <p>Many other debugging logs are available in individual classes. The log level supplied here
+   * only controls a small set of informative and well formatted logs. Users wishing to debug
+   * certain aspects of the library can look for individual <code>TAG</code> variables at the tops
+   * of classes and use <code>adb shell setprop log.tag.TAG</code> to enable or disable any relevant
+   * tags.
+   *
+   * @param logLevel The log level to use from {@link Log}.
+   * @return This builder.
+   */
+  public GlideBuilder setLogLevel(int logLevel) {
+    if (logLevel < Log.VERBOSE || logLevel > Log.ERROR) {
+      throw new IllegalArgumentException("Log level must be one of Log.VERBOSE, Log.DEBUG,"
+          + " Log.INFO, Log.WARN, or Log.ERROR");
+    }
+    this.logLevel = logLevel;
+    return this;
+  }
+
   // For testing.
   GlideBuilder setEngine(Engine engine) {
     this.engine = engine;
@@ -198,12 +246,12 @@ GlideBuilder setEngine(Engine engine) {
   }
 
   Glide createGlide() {
-    if (sourceService == null) {
+    if (sourceExecutor == null) {
       final int cores = Math.max(1, Runtime.getRuntime().availableProcessors());
-      sourceService = new FifoPriorityThreadPoolExecutor("source", cores);
+      sourceExecutor = new GlideExecutor("source", cores);
     }
-    if (diskCacheService == null) {
-      diskCacheService = new FifoPriorityThreadPoolExecutor("disk-cache", 1);
+    if (diskCacheExecutor == null) {
+      diskCacheExecutor = new GlideExecutor("disk-cache", 1);
     }
 
     if (memorySizeCalculator == null) {
@@ -219,8 +267,8 @@ Glide createGlide() {
       }
     }
 
-    if (byteArrayPool == null) {
-      byteArrayPool = new LruByteArrayPool();
+    if (arrayPool == null) {
+      arrayPool = new LruArrayPool(memorySizeCalculator.getArrayPoolSizeInBytes());
     }
 
     if (memoryCache == null) {
@@ -232,13 +280,16 @@ Glide createGlide() {
     }
 
     if (engine == null) {
-      engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);
-    }
-
-    if (decodeFormat == null) {
-      decodeFormat = DecodeFormat.DEFAULT;
+      engine = new Engine(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor);
     }
 
-    return new Glide(engine, memoryCache, bitmapPool, byteArrayPool, context, decodeFormat);
+    return new Glide(
+        engine,
+        memoryCache,
+        bitmapPool,
+        arrayPool,
+        context,
+        logLevel,
+        defaultRequestOptions.lock());
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/main/java/com/bumptech/glide/GlideContext.java b/library/src/main/java/com/bumptech/glide/GlideContext.java
index 35da4e73c..2753b6503 100644
--- a/library/src/main/java/com/bumptech/glide/GlideContext.java
+++ b/library/src/main/java/com/bumptech/glide/GlideContext.java
@@ -24,25 +24,27 @@
   private final Handler mainHandler;
   private final Registry registry;
   private final ImageViewTargetFactory imageViewTargetFactory;
-  private final RequestOptions options;
+  private final RequestOptions defaultRequestOptions;
   private final Engine engine;
   private final ComponentCallbacks2 componentCallbacks;
+  private final int logLevel;
 
   public GlideContext(Context context, Registry registry,
-      ImageViewTargetFactory imageViewTargetFactory, RequestOptions options, Engine engine,
-      ComponentCallbacks2 componentCallbacks) {
+      ImageViewTargetFactory imageViewTargetFactory, RequestOptions defaultRequestOptions,
+      Engine engine, ComponentCallbacks2 componentCallbacks, int logLevel) {
     super(context.getApplicationContext());
     this.registry = registry;
     this.imageViewTargetFactory = imageViewTargetFactory;
-    this.options = options;
+    this.defaultRequestOptions = defaultRequestOptions;
     this.engine = engine;
     this.componentCallbacks = componentCallbacks;
+    this.logLevel = logLevel;
 
     mainHandler = new Handler(Looper.getMainLooper());
   }
 
-  public RequestOptions getOptions() {
-    return options;
+  public RequestOptions getDefaultRequestOptions() {
+    return defaultRequestOptions;
   }
 
   public <X> Target<X> buildImageViewTarget(ImageView imageView, Class<X> transcodeClass) {
@@ -61,6 +63,10 @@ public Registry getRegistry() {
     return registry;
   }
 
+  public int getLogLevel() {
+    return logLevel;
+  }
+
   @Override
   public void onTrimMemory(int level) {
     componentCallbacks.onTrimMemory(level);
diff --git a/library/src/main/java/com/bumptech/glide/ListPreloader.java b/library/src/main/java/com/bumptech/glide/ListPreloader.java
index 53b3e54f8..fba351ea0 100644
--- a/library/src/main/java/com/bumptech/glide/ListPreloader.java
+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.app.Fragment;
+import android.support.annotation.Nullable;
 import android.support.v4.app.FragmentActivity;
 import android.widget.AbsListView;
 
@@ -30,7 +31,7 @@
 
   private final int maxPreload;
   private final PreloadTargetQueue preloadTargetQueue;
-  private RequestManager requestManager;
+  private final RequestManager requestManager;
   private final PreloadModelProvider<T> preloadModelProvider;
   private final PreloadSizeProvider<T> preloadDimensionProvider;
 
@@ -88,6 +89,7 @@
      *
      * @param item A model
      */
+    @Nullable
     int[] getPreloadSize(T item, int adapterPosition, int perItemPosition);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/Logs.java b/library/src/main/java/com/bumptech/glide/Logs.java
deleted file mode 100644
index 2c44bcc55..000000000
--- a/library/src/main/java/com/bumptech/glide/Logs.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.bumptech.glide;
-
-import android.util.Log;
-
-/**
- * Uniform logs across Glide.
- */
-public final class Logs {
-  private static final String TAG = "Glide";
-
-  private Logs() {
-    // Utility class.
-  }
-
-  public static boolean isEnabled(int logLevel) {
-    return Log.isLoggable(TAG, logLevel);
-  }
-
-  public static void log(int logLevel, String message) {
-    log(logLevel, message, null);
-  }
-
-  public static void log(int logLevel, String message, Exception e) {
-    switch (logLevel) {
-      case Log.ERROR:
-        Log.e(TAG, message, e);
-        break;
-      case Log.WARN:
-        Log.w(TAG, message, e);
-        break;
-      case Log.INFO:
-        Log.i(TAG, message, e);
-        break;
-      case Log.DEBUG:
-        Log.d(TAG, message, e);
-        break;
-      case Log.VERBOSE:
-        Log.v(TAG, message, e);
-        break;
-      default:
-        throw new IllegalArgumentException("Unknown level: " + logLevel);
-    }
-  }
-}
diff --git a/library/src/main/java/com/bumptech/glide/Priority.java b/library/src/main/java/com/bumptech/glide/Priority.java
index cdad7f2b9..03c7777f9 100644
--- a/library/src/main/java/com/bumptech/glide/Priority.java
+++ b/library/src/main/java/com/bumptech/glide/Priority.java
@@ -9,5 +9,5 @@
   IMMEDIATE,
   HIGH,
   NORMAL,
-  LOW, priority,
+  LOW,
 }
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index e88cf25a3..dea54a6b9 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.v4.util.Pools.Pool;
 
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -20,6 +21,7 @@
 import com.bumptech.glide.provider.ModelToResourceClassCache;
 import com.bumptech.glide.provider.ResourceDecoderRegistry;
 import com.bumptech.glide.provider.ResourceEncoderRegistry;
+import com.bumptech.glide.util.pool.FactoryPools;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -39,9 +41,11 @@
   private final ModelToResourceClassCache modelToResourceClassCache =
       new ModelToResourceClassCache();
   private final LoadPathCache loadPathCache = new LoadPathCache();
+  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();
 
   public Registry(Context context) {
-    this.modelLoaderRegistry = new ModelLoaderRegistry(context.getApplicationContext());
+    this.modelLoaderRegistry =
+        new ModelLoaderRegistry(context.getApplicationContext(), exceptionListPool);
     this.encoderRegistry = new EncoderRegistry();
     this.decoderRegistry = new ResourceDecoderRegistry();
     this.resourceEncoderRegistry = new ResourceEncoderRegistry();
@@ -129,7 +133,8 @@ public Registry register(DataRewinder.Factory factory) {
       if (decodePaths.isEmpty()) {
         result = null;
       } else {
-        result = new LoadPath<>(dataClass, decodePaths);
+        result = new LoadPath<>(dataClass, resourceClass, transcodeClass, decodePaths,
+            exceptionListPool);
       }
       loadPathCache.put(dataClass, resourceClass, transcodeClass, result);
     }
@@ -153,14 +158,15 @@ public Registry register(DataRewinder.Factory factory) {
             decoderRegistry.getDecoders(dataClass, registeredResourceClass);
         ResourceTranscoder<TResource, Transcode> transcoder =
             transcoderRegistry.get(registeredResourceClass, registeredTranscodeClass);
-        decodePaths.add(new DecodePath<>(dataClass, decoders, transcoder));
+        decodePaths.add(new DecodePath<>(dataClass, registeredResourceClass,
+            registeredTranscodeClass, decoders, transcoder, exceptionListPool));
       }
     }
     return decodePaths;
   }
 
-  public List<Class<?>> getRegisteredResourceClasses(Class<?> modelClass,
-      Class<?> resourceClass) {
+  public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(
+      Class<Model> modelClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {
     List<Class<?>> result = modelToResourceClassCache.get(modelClass, resourceClass);
 
     if (result == null) {
@@ -170,8 +176,10 @@ public Registry register(DataRewinder.Factory factory) {
         List<? extends Class<?>> registeredResourceClasses =
             decoderRegistry.getResourceClasses(dataClass, resourceClass);
         for (Class<?> registeredResourceClass : registeredResourceClasses) {
-          if (!result.contains(registeredResourceClass)) {
-            result.add(registeredResourceClass);
+          List<Class<Transcode>> registeredTranscodeClasses = transcoderRegistry
+              .getTranscodeClasses(registeredResourceClass, transcodeClass);
+          if (!registeredTranscodeClasses.isEmpty() && !result.contains(registeredResourceClass)) {
+              result.add(registeredResourceClass);
           }
         }
       }
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 635676300..ba584647f 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -3,10 +3,11 @@
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 
 import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.widget.ImageView;
 
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.engine.RequestContext;
 import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.Request;
@@ -34,7 +35,6 @@
  * {@link com.bumptech.glide.request.target.Target}.
  */
 public class RequestBuilder<TranscodeType> implements Cloneable {
-  private static final BaseRequestOptions DEFAULT_REQUEST_OPTIONS = new RequestOptions();
   private static final TransitionOptions<?, ?> DEFAULT_ANIMATION_OPTIONS =
       new GenericTransitionOptions<Object>();
   private static final BaseRequestOptions DOWNLOAD_ONLY_OPTIONS =
@@ -44,19 +44,20 @@
   private final GlideContext context;
   private final RequestManager requestManager;
   private final Class<TranscodeType> transcodeClass;
+  private final BaseRequestOptions<?> defaultRequestOptions;
 
-  private BaseRequestOptions<?> requestOptions = DEFAULT_REQUEST_OPTIONS;
+  @NonNull private BaseRequestOptions<?> requestOptions;
   @SuppressWarnings("unchecked")
   private TransitionOptions<?, ? super TranscodeType> transitionOptions =
       (TransitionOptions<?, ? super TranscodeType>) DEFAULT_ANIMATION_OPTIONS;
 
-  private Object model;
+  @Nullable private Object model;
   // model may occasionally be null, so to enforce that load() was called, put a boolean rather
   // than relying on model not to be null.
+  @Nullable private RequestListener<TranscodeType> requestListener;
+  @Nullable private RequestBuilder<TranscodeType> thumbnailBuilder;
+  @Nullable private Float thumbSizeMultiplier;
   private boolean isModelSet;
-  private RequestListener<TranscodeType> requestListener;
-  private RequestBuilder<TranscodeType> thumbnailBuilder;
-  private Float thumbSizeMultiplier;
   private boolean isThumbnailBuilt;
 
   RequestBuilder(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
@@ -71,13 +72,16 @@
     this.requestManager = requestManager;
     this.context = Preconditions.checkNotNull(context);
     this.transcodeClass = transcodeClass;
-    requestOptions = context.getOptions().clone();
+
+    this.defaultRequestOptions = requestManager.getDefaultRequestOptions();
+    this.requestOptions = defaultRequestOptions;
   }
 
   public RequestBuilder<TranscodeType> apply(BaseRequestOptions requestOptions) {
     Preconditions.checkNotNull(requestOptions);
-    this.requestOptions = DEFAULT_REQUEST_OPTIONS.equals(this.requestOptions) ? requestOptions
-        : this.requestOptions.apply(requestOptions);
+    BaseRequestOptions<?> toMutate = defaultRequestOptions == this.requestOptions
+        ? this.requestOptions.clone() : this.requestOptions;
+    this.requestOptions = toMutate.apply(requestOptions);
     return this;
   }
 
@@ -96,7 +100,8 @@
    * @return This request builder.
    */
   @SuppressWarnings("unchecked")
-  public RequestBuilder<TranscodeType> listener(RequestListener<TranscodeType> requestListener) {
+  public RequestBuilder<TranscodeType> listener(
+      @Nullable RequestListener<TranscodeType> requestListener) {
     this.requestListener = requestListener;
 
     return this;
@@ -116,7 +121,8 @@
    * <p> Recursive calls to thumbnail are supported. </p>
    */
   @SuppressWarnings("unchecked")
-  public RequestBuilder<TranscodeType> thumbnail(RequestBuilder<TranscodeType> thumbnailRequest) {
+  public RequestBuilder<TranscodeType> thumbnail(
+      @Nullable RequestBuilder<TranscodeType> thumbnailRequest) {
     this.thumbnailBuilder = thumbnailRequest;
 
     return this;
@@ -156,7 +162,6 @@
     return this;
   }
 
-
   /**
    * Sets the specific model to load data for.
    *
@@ -167,11 +172,11 @@
    * @return This request builder.
    */
   @SuppressWarnings("unchecked")
-  public RequestBuilder<TranscodeType> load(Object model) {
+  public RequestBuilder<TranscodeType> load(@Nullable Object model) {
     return loadGeneric(model);
   }
 
-  private RequestBuilder<TranscodeType> loadGeneric(Object model) {
+  private RequestBuilder<TranscodeType> loadGeneric(@Nullable Object model) {
     this.model = model;
     isModelSet = true;
     return this;
@@ -196,7 +201,7 @@
    * @param string A file path, or a uri or url handled by
    * {@link com.bumptech.glide.load.model.UriLoader}.
    */
-  public RequestBuilder<TranscodeType> load(String string) {
+  public RequestBuilder<TranscodeType> load(@Nullable String string) {
     return loadGeneric(string);
   }
 
@@ -218,7 +223,7 @@
    * @param uri The Uri representing the image. Must be of a type handled by
    * {@link com.bumptech.glide.load.model.UriLoader}.
    */
-  public RequestBuilder<TranscodeType> load(Uri uri) {
+  public RequestBuilder<TranscodeType> load(@Nullable Uri uri) {
     return loadGeneric(uri);
   }
 
@@ -240,7 +245,7 @@
    *
    * @param file The File containing the image
    */
-  public RequestBuilder<TranscodeType> load(File file) {
+  public RequestBuilder<TranscodeType> load(@Nullable File file) {
     return loadGeneric(file);
   }
 
@@ -263,7 +268,7 @@
    * @see #load(Integer)
    * @see com.bumptech.glide.signature.ApplicationVersionSignature
    */
-  public RequestBuilder<TranscodeType> load(Integer resourceId) {
+  public RequestBuilder<TranscodeType> load(@Nullable Integer resourceId) {
     return loadGeneric(resourceId).apply(signatureOf(ApplicationVersionSignature.obtain(context)));
   }
 
@@ -277,7 +282,7 @@
    * {@link #load(android.net.Uri)} or {@link #load(String)}.
    */
   @Deprecated
-  public RequestBuilder<TranscodeType> load(URL url) {
+  public RequestBuilder<TranscodeType> load(@Nullable URL url) {
     return loadGeneric(url);
   }
 
@@ -290,7 +295,7 @@
    * @param model the data to load.
    * @see #load(Object)
    */
-  public RequestBuilder<TranscodeType> load(byte[] model) {
+  public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
     return loadGeneric(model).apply(signatureOf(new StringSignature(UUID.randomUUID().toString()))
         .diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true /*skipMemoryCache*/));
   }
@@ -329,7 +334,7 @@
       throw new IllegalArgumentException("You must pass in a non null Target");
     }
     if (!isModelSet) {
-      throw new IllegalArgumentException("You must first put a model (try #load())");
+      throw new IllegalArgumentException("You must call #load() before calling #into()");
     }
 
     Request previous = target.getRequest();
@@ -363,7 +368,9 @@
       throw new IllegalArgumentException("You must pass in a non null View");
     }
 
-    if (!requestOptions.isTransformationSet() && view.getScaleType() != null) {
+    if (!requestOptions.isTransformationSet()
+        && requestOptions.isTransformationAllowed()
+        && view.getScaleType() != null) {
       if (requestOptions.isLocked()) {
         requestOptions = requestOptions.clone();
       }
@@ -396,23 +403,59 @@
    *               overridden by
    *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)}} if
    *               previously called).
-   * @return An {@link com.bumptech.glide.request.FutureTarget} that can be used to obtain the
-   * resource in a blocking manner.
    * @see RequestManager#clear(Target)
+   *
+   * @deprecated Use {@link #submit(int, int)} instead.
    */
+  @Deprecated
   public FutureTarget<TranscodeType> into(int width, int height) {
+    return submit(width, height);
+  }
+
+  /**
+   * Returns a future that can be used to do a blocking get on a background thread.
+   *
+   * <p>This method defaults to {@link Target#SIZE_ORIGINAL} for the width and the height. However,
+   * since the width and height will be overriden by values passed to {@link
+   * RequestOptions#override(int, int)}, this method can be used whenever {@link RequestOptions}
+   * with override values are applied, or whenever you want to retrieve the image in its original
+   * size.
+   *
+   * @see #submit(int, int)
+   * @see #into(Target)
+   */
+  public FutureTarget<TranscodeType> submit() {
+    return submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+  }
+
+  /**
+   * Returns a future that can be used to do a blocking get on a background thread.
+   *
+   * @param width  The desired width in pixels, or {@link Target#SIZE_ORIGINAL}. This will be
+   *               overridden by
+   *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)} if
+   *               previously called.
+   * @param height The desired height in pixels, or {@link Target#SIZE_ORIGINAL}. This will be
+   *               overridden by
+   *               {@link com.bumptech.glide.request.BaseRequestOptions#override(int, int)}} if
+   *               previously called).
+   */
+  public FutureTarget<TranscodeType> submit(int width, int height) {
     final RequestFutureTarget<TranscodeType> target =
         new RequestFutureTarget<>(context.getMainHandler(), width, height);
 
-    // TODO: Currently all loads must be started on the main thread...
-    context.getMainHandler().post(new Runnable() {
-      @Override
-      public void run() {
-        if (!target.isCancelled()) {
-          into(target);
+    if (Util.isOnBackgroundThread()) {
+      context.getMainHandler().post(new Runnable() {
+        @Override
+        public void run() {
+          if (!target.isCancelled()) {
+            into(target);
+          }
         }
-      }
-    });
+      });
+    } else {
+      into(target);
+    }
 
     return target;
   }
@@ -460,7 +503,10 @@ public void run() {
    * @param target The Target that will receive the cache File when the load completes
    * @param <Y>    The type of Target.
    * @return The given Target.
+   *
+   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}.
    */
+  @Deprecated
   public <Y extends Target<File>> Y downloadOnly(Y target) {
     return getDownloadOnlyRequest().into(target);
   }
@@ -474,7 +520,10 @@ public void run() {
    * @param height The height in pixels to use to fetch the data.
    * @return A {@link java.util.concurrent.Future} that can be used to retrieve the cache File
    * containing the data.
+   *
+   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}.
    */
+  @Deprecated
   public FutureTarget<File> downloadOnly(int width, int height) {
     return getDownloadOnlyRequest().into(width, height);
   }
@@ -503,7 +552,7 @@ private Request buildRequest(Target<TranscodeType> target) {
   }
 
   private Request buildRequestRecursive(Target<TranscodeType> target,
-      ThumbnailRequestCoordinator parentCoordinator,
+      @Nullable ThumbnailRequestCoordinator parentCoordinator,
       TransitionOptions<?, ? super TranscodeType> transitionOptions,
       Priority priority, int overrideWidth, int overrideHeight) {
     if (thumbnailBuilder != null) {
@@ -566,11 +615,18 @@ private Request obtainRequest(Target<TranscodeType> target,
       int overrideWidth, int overrideHeight) {
     requestOptions.lock();
 
-    RequestContext<?, TranscodeType> requestContext =
-        new RequestContext<>(context, model, transcodeClass, requestOptions, priority,
-            overrideWidth, overrideHeight);
-
-    return SingleRequest.obtain(requestContext, target, requestListener, requestCoordinator,
-        context.getEngine(), transitionOptions.getTransitionFactory());
+    return SingleRequest.obtain(
+        context,
+        model,
+        transcodeClass,
+        requestOptions,
+        overrideWidth,
+        overrideHeight,
+        priority,
+        target,
+        requestListener,
+        requestCoordinator,
+        context.getEngine(),
+        transitionOptions.getTransitionFactory());
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 0c917eb4b..40078f8b7 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -1,14 +1,19 @@
 package com.bumptech.glide;
 
 import static com.bumptech.glide.request.RequestOptions.decodeTypeOf;
+import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;
+import static com.bumptech.glide.request.RequestOptions.skipMemoryCacheOf;
 
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.os.Handler;
 import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.BitmapTransitionOptions;
 import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -18,6 +23,8 @@
 import com.bumptech.glide.manager.LifecycleListener;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
 import com.bumptech.glide.manager.RequestTracker;
+import com.bumptech.glide.manager.TargetTracker;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
@@ -25,6 +32,8 @@
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.util.Util;
 
+import java.io.File;
+
 /**
  * A class for managing and starting requests for Glide. Can use activity, fragment and connectivity
  * lifecycle events to intelligently stop, start, and restart requests. Retrieve either by
@@ -40,10 +49,28 @@
 public class RequestManager implements LifecycleListener {
   private static final RequestOptions DECODE_TYPE_BITMAP = decodeTypeOf(Bitmap.class).lock();
   private static final RequestOptions DECODE_TYPE_GIF = decodeTypeOf(GifDrawable.class).lock();
+  private static final RequestOptions DOWNLOAD_ONLY_OPTIONS =
+      diskCacheStrategyOf(DiskCacheStrategy.DATA).priority(Priority.LOW)
+          .skipMemoryCache(true);
+
   private final GlideContext context;
   private final Lifecycle lifecycle;
   private final RequestTracker requestTracker;
   private final RequestManagerTreeNode treeNode;
+  private final TargetTracker targetTracker = new TargetTracker();
+  private final Runnable addSelfToLifecycle = new Runnable() {
+    @Override
+    public void run() {
+      lifecycle.addListener(RequestManager.this);
+    }
+  };
+  private final Handler mainHandler = new Handler(Looper.getMainLooper());
+  private final ConnectivityMonitor connectivityMonitor;
+
+  @NonNull
+  private BaseRequestOptions<?> defaultRequestOptions;
+  @NonNull
+  private BaseRequestOptions<?> requestOptions;
 
   public RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode) {
     this(context, lifecycle, treeNode, new RequestTracker(), new ConnectivityMonitorFactory());
@@ -56,7 +83,7 @@ public RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNo
     this.treeNode = treeNode;
     this.requestTracker = requestTracker;
 
-    ConnectivityMonitor connectivityMonitor =
+    connectivityMonitor =
         factory.build(context, new RequestManagerConnectivityListener(requestTracker));
 
     // If we're the application level request manager, we may be created on a background thread.
@@ -64,20 +91,66 @@ public RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNo
     // issue by delaying adding ourselves as a lifecycle listener by posting to the main thread.
     // This should be entirely safe.
     if (Util.isOnBackgroundThread()) {
-      new Handler(Looper.getMainLooper()).post(new Runnable() {
-        @Override
-        public void run() {
-          lifecycle.addListener(RequestManager.this);
-        }
-      });
+      mainHandler.post(addSelfToLifecycle);
     } else {
       lifecycle.addListener(this);
     }
     lifecycle.addListener(connectivityMonitor);
 
+    defaultRequestOptions = this.context.getDefaultRequestOptions();
+    requestOptions = defaultRequestOptions;
+
     Glide.get(context).registerRequestManager(this);
   }
 
+  /**
+   * Updates the default {@link RequestOptions} for all loads started with this request manager
+   * with the given {@link RequestOptions}.
+   *
+   * <p>The {@link RequestOptions} provided here are applied on top of those provided via {@link
+   * GlideBuilder#setDefaultRequestOptions(RequestOptions)}. If there are conflicts, the options
+   * applied here will win. Note that this method does not mutate options provided to
+   * {@link GlideBuilder#setDefaultRequestOptions(RequestOptions)}.
+   *
+   * <p>Multiple sets of options can be applied. If there are conflicts the last {@link
+   * RequestOptions} applied will win.
+   *
+   * <p>The modified options will only be applied to loads started after this method is called.
+   *
+   * @see RequestBuilder#apply(BaseRequestOptions)
+   *
+   * @return This request manager.
+   */
+  public RequestManager applyDefaultRequestOptions(RequestOptions requestOptions) {
+    BaseRequestOptions<?> toMutate = this.requestOptions == defaultRequestOptions
+        ? this.requestOptions.clone() : this.defaultRequestOptions;
+    this.requestOptions = toMutate.apply(requestOptions);
+    return this;
+  }
+
+  /**
+   * Replaces the default {@link RequestOptions} for all loads started with this request manager
+   * with the given {@link RequestOptions}.
+   *
+   * <p>The {@link RequestOptions} provided here replace those that have been previously provided
+   * via {@link GlideBuilder#setDefaultRequestOptions(RequestOptions)}, {@link
+   * #setDefaultRequestOptions(RequestOptions)} and {@link
+   * #applyDefaultRequestOptions(RequestOptions)}.
+   *
+   * <p>Subsequent calls to {@link #applyDefaultRequestOptions(RequestOptions)} will not mutate
+   * the {@link RequestOptions} provided here. Instead the manager will create a clone of these
+   * options and mutate the clone.
+   *
+   * @see #applyDefaultRequestOptions(RequestOptions)
+   *
+   * @return This request manager.
+   */
+  public RequestManager setDefaultRequestOptions(RequestOptions requestOptions) {
+    this.defaultRequestOptions = requestOptions;
+    this.requestOptions = requestOptions;
+    return this;
+  }
+
   /**
    * @see android.content.ComponentCallbacks2#onTrimMemory(int)
    */
@@ -168,6 +241,7 @@ public void resumeRequestsRecursive() {
   @Override
   public void onStart() {
     resumeRequests();
+    targetTracker.onStart();
   }
 
   /**
@@ -177,6 +251,7 @@ public void onStart() {
   @Override
   public void onStop() {
     pauseRequests();
+    targetTracker.onStop();
   }
 
   /**
@@ -185,8 +260,16 @@ public void onStop() {
    */
   @Override
   public void onDestroy() {
-    Glide.get(context).unregisterRequestManager(this);
+    targetTracker.onDestroy();
+    for (Target<?> target : targetTracker.getAll()) {
+      clear(target);
+    }
+    targetTracker.clear();
     requestTracker.clearRequests();
+    lifecycle.removeListener(this);
+    lifecycle.removeListener(connectivityMonitor);
+    mainHandler.removeCallbacks(addSelfToLifecycle);
+    Glide.get(context).unregisterRequestManager(this);
   }
 
   /**
@@ -230,6 +313,54 @@ public void onDestroy() {
     return as(Drawable.class).transition(new DrawableTransitionOptions());
   }
 
+  /**
+   * A helper method equivalent to calling {@link #asDrawable()} and then {@link
+   * RequestBuilder#load(Object)} with the given model.
+   *
+   * @return A new request builder for loading a {@link Drawable} using the given model.
+   */
+  public RequestBuilder<Drawable> load(@Nullable Object model) {
+    return asDrawable().load(model);
+  }
+
+  /**
+   * Attempts always load the resource into the cache and return the {@link File} containing the
+   * cached source data.
+   *
+   * <p>This method is designed to work for remote data that is or will be cached using {@link
+   * com.bumptech.glide.load.engine.DiskCacheStrategy#DATA}. As a result, specifying a
+   * {@link com.bumptech.glide.load.engine.DiskCacheStrategy} on this request is generally not
+   * recommended.
+   *
+   * @return A new request builder for downloading content to cache and returning the cache File.
+   */
+  public RequestBuilder<File> downloadOnly() {
+    return as(File.class).apply(DOWNLOAD_ONLY_OPTIONS);
+  }
+
+  /**
+   * A helper method equivalent to calling {@link #downloadOnly()} ()} and then {@link
+   * RequestBuilder#load(Object)} with the given model.
+   *
+   * @return A new request builder for loading a {@link Drawable} using the given model.
+   */
+  public RequestBuilder<File> download(@Nullable Object model) {
+    return downloadOnly().load(model);
+  }
+
+  /**
+   * Attempts to always load a {@link File} containing the resource, either using a file path
+   * obtained from the media store (for local images/videos), or using Glide's disk cache
+   * (for remote images/videos).
+   *
+   * <p>For remote content, prefer {@link #downloadOnly()}.
+   *
+   * @return A new request builder for obtaining File paths to content.
+   */
+  public RequestBuilder<File> asFile() {
+    return as(File.class).apply(skipMemoryCacheOf(true));
+  }
+
   /**
    * Attempts to load the resource using any registered
    * {@link com.bumptech.glide.load.ResourceDecoder}s
@@ -264,35 +395,60 @@ public void clear(View view) {
    *
    * @param target The Target to cancel loads for.
    */
-  public void clear(Target<?> target) {
-    Util.assertMainThread();
+  public void clear(@Nullable final Target<?> target) {
     if (target == null) {
       return;
     }
 
-    Request request = target.getRequest();
-    target.setRequest(null);
-    untrackOrDelegate(target, request);
+    if (Util.isOnMainThread()) {
+      untrackOrDelegate(target);
+    } else {
+      mainHandler.post(new Runnable() {
+        @Override
+        public void run() {
+          clear(target);
+        }
+      });
+    }
   }
 
-  private void untrackOrDelegate(Target<?> target, Request request) {
-    boolean isOwnedByUs = untrack(target, request);
+  private void untrackOrDelegate(Target<?> target) {
+    boolean isOwnedByUs = untrack(target);
     if (!isOwnedByUs) {
-      Glide.get(context).removeFromManagers(target, request);
+      Glide.get(context).removeFromManagers(target);
     }
   }
 
-  boolean untrack(Target<?> target, Request request) {
-    // Optimization only.
-    lifecycle.removeListener(target);
-    return requestTracker.clearRemoveAndRecycle(request);
+  boolean untrack(Target<?> target) {
+    Request request = target.getRequest();
+    // If the Target doesn't have a request, it's already been cleared.
+    if (request == null) {
+      return true;
+    }
+
+    if (requestTracker.clearRemoveAndRecycle(request)) {
+      targetTracker.untrack(target);
+      target.setRequest(null);
+      return true;
+    } else {
+      return false;
+    }
   }
 
   void track(Target<?> target, Request request) {
-    lifecycle.addListener(target);
+    targetTracker.track(target);
     requestTracker.runRequest(request);
   }
 
+  BaseRequestOptions<?> getDefaultRequestOptions() {
+    return requestOptions;
+  }
+
+  @Override
+  public String toString() {
+    return super.toString() + "{tracker=" + requestTracker + ", treeNode=" + treeNode + "}";
+  }
+
   private static class RequestManagerConnectivityListener implements ConnectivityMonitor
       .ConnectivityListener {
     private final RequestTracker requestTracker;
diff --git a/library/src/main/java/com/bumptech/glide/load/DataSource.java b/library/src/main/java/com/bumptech/glide/load/DataSource.java
index e1f8d2039..699a13bfe 100644
--- a/library/src/main/java/com/bumptech/glide/load/DataSource.java
+++ b/library/src/main/java/com/bumptech/glide/load/DataSource.java
@@ -21,7 +21,6 @@
    * Indicates data was retrieved from modified content in the on device cache.
    */
   RESOURCE_DISK_CACHE,
-
   /**
    * Indicates data was retrieved from the in memory cache.
    */
diff --git a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
index c44ed4aa8..118d407dd 100644
--- a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
@@ -1,7 +1,5 @@
 package com.bumptech.glide.load;
 
-import android.os.Build;
-
 /**
  * Options for setting the value of {@link android.graphics.Bitmap#getConfig()} for
  * {@link android.graphics.Bitmap}s returned by {@link com.bumptech.glide.load.ResourceDecoder}s.
@@ -36,6 +34,5 @@
   /**
    * The default value for DecodeFormat.
    */
-  public static final DecodeFormat DEFAULT = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT
-      ? PREFER_ARGB_8888 : PREFER_RGB_565;
+  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/HttpException.java b/library/src/main/java/com/bumptech/glide/load/HttpException.java
new file mode 100644
index 000000000..ad53292c1
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/HttpException.java
@@ -0,0 +1,42 @@
+package com.bumptech.glide.load;
+
+import android.support.annotation.Nullable;
+
+import java.io.IOException;
+
+/**
+ * Thrown when an http request fails.
+ *
+ * <p>Exposes the specific status code or {@link #UNKNOWN} via {@link #getStatusCode()} so
+ * users may attempt to retry or otherwise uniformly handle certain types of errors regardless of
+ * the underlying http library.
+ */
+public final class HttpException extends IOException {
+  public static final int UNKNOWN = -1;
+  private final int statusCode;
+
+  public HttpException(int statusCode) {
+    this("Http request failed with status code: " + statusCode, statusCode);
+  }
+
+  public HttpException(String message) {
+    this(message, UNKNOWN);
+  }
+
+  public HttpException(String message, int statusCode) {
+    this(message, statusCode, null /*cause*/);
+  }
+
+  public HttpException(String message, int statusCode, @Nullable Throwable cause) {
+    super(message, cause);
+    this.statusCode = statusCode;
+  }
+
+  /**
+   * Returns the http status code, or {@link #UNKNOWN} if the request failed without providing
+   * a status code.
+   */
+  public int getStatusCode() {
+    return statusCode;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/Option.java b/library/src/main/java/com/bumptech/glide/load/Option.java
index 6896150af..04a03e5b6 100644
--- a/library/src/main/java/com/bumptech/glide/load/Option.java
+++ b/library/src/main/java/com/bumptech/glide/load/Option.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.util.Preconditions;
 
 import java.security.MessageDigest;
@@ -90,6 +92,7 @@ public void update(byte[] keyBytes, Object value, MessageDigest messageDigest) {
   /**
    * Returns a reasonable default to use if no other value is set, or {@code null}.
    */
+  @Nullable
   public T getDefaultValue() {
     return defaultValue;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
index 16139d879..ebac41d1e 100644
--- a/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.engine.Resource;
 
 import java.io.IOException;
@@ -54,5 +56,6 @@
    *                expected type.
    * @throws IOException
    */
+  @Nullable
   Resource<Z> decode(T source, int width, int height, Options options) throws IOException;
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/Transformation.java b/library/src/main/java/com/bumptech/glide/load/Transformation.java
index 315403a66..b11a635bd 100644
--- a/library/src/main/java/com/bumptech/glide/load/Transformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java
@@ -8,9 +8,9 @@
  * cache and {@link #updateDiskCacheKey(java.security.MessageDigest)}} to identify the
  * transformation in disk caches.
  *
- * <p> Using the fully qualified class name (not {@link Class#getName()} to avoid proguard
+ * <p>Using the fully qualified class name (not {@link Class#getName()} to avoid proguard
  * obfuscation) is an easy way to implement
- * {@link #updateDiskCacheKey(java.security.MessageDigest)}} correctly. </p>
+ * {@link #updateDiskCacheKey(java.security.MessageDigest)}} correctly.
  *
  * @param <T> The type of the resource being transformed.
  */
@@ -19,12 +19,26 @@
   /**
    * Transforms the given resource and returns the transformed resource.
    *
-   * <p> Note - If the original resource object is not returned, the original resource will be
+   * <p>If the original resource object is not returned, the original resource will be
    * recycled and it's internal resources may be reused. This means it is not safe to rely on the
    * original resource or any internal state of the original resource in any new resource that is
    * created. Usually this shouldn't occur, but if absolutely necessary either the original resource
    * object can be returned with modified internal state, or the data in the original resource can
-   * be copied into the transformed resource. </p>
+   * be copied into the transformed resource.
+   *
+   * <p>If a Transformation is updated, {@link #equals(Object)}, {@link #hashCode()}, and
+   * {@link #updateDiskCacheKey(java.security.MessageDigest)} should all change. If you're using a
+   * simple String key an easy way to do this is to append a version number to your key. Failing to
+   * do so will mean users may see images loaded from cache that had the old version of the
+   * Transformation applied. Changing the return values of those methods will ensure that the cache
+   * key has changed and therefore that any cached resources will be re-generated using the updated
+   * Transformation.
+   *
+   * <p>During development you may need to either using {@link
+   * com.bumptech.glide.load.engine.DiskCacheStrategy#NONE} or make sure {@link
+   * #updateDiskCacheKey(java.security.MessageDigest)} changes each time you make a change to the
+   * Transformation. Otherwise the resource you request may be loaded from disk cache and your
+   * Transformation may not be called.
    *
    * @param resource  The resource to transform.
    * @param outWidth  The width of the view or target the resource will be displayed in, or {@link
diff --git a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
index f8604a2eb..823ed42bf 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
@@ -3,7 +3,6 @@
 import android.content.res.AssetManager;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 
@@ -16,6 +15,7 @@
  * @param <T> The type of data obtained from the asset path (InputStream, FileDescriptor etc).
  */
 public abstract class AssetPathFetcher<T> implements DataFetcher<T> {
+  private static final String TAG = "AssetPathFetcher";
   private final String assetPath;
   private final AssetManager assetManager;
   private T data;
@@ -30,9 +30,11 @@ public void loadData(Priority priority, DataCallback<? super T> callback) {
     try {
       data = loadResource(assetManager, assetPath);
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Failed to load data from asset manager", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to load data from asset manager", e);
       }
+      callback.onLoadFailed(e);
+      return;
     }
     callback.onDataReady(data);
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
index dad9c8531..1bd464284 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.data;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 
@@ -29,7 +31,13 @@
     /**
      * Called with the loaded data if the load succeeded, or with {@code null} if the load failed.
      */
-    void onDataReady(T data);
+    void onDataReady(@Nullable T data);
+
+    /**
+     * Called when the load fails.
+     * @param e a non-null {@link Exception} indicating why the load failed.
+     */
+    void onLoadFailed(Exception e);
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
index 0d2da7549..d9062bb12 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
@@ -3,9 +3,9 @@
 import android.text.TextUtils;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.HttpException;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
 import com.bumptech.glide.util.LogTime;
@@ -22,8 +22,6 @@
  */
 public class HttpUrlFetcher implements DataFetcher<InputStream> {
   private static final String TAG = "HttpUrlFetcher";
-  private static final String ENCODING_HEADER = "Accept-Encoding";
-  private static final String DEFAULT_ENCODING = "identity";
   private static final int MAXIMUM_REDIRECTS = 5;
   private static final int DEFAULT_TIMEOUT_MS = 2500;
   // Visible for testing.
@@ -52,18 +50,21 @@ public HttpUrlFetcher(GlideUrl glideUrl) {
   @Override
   public void loadData(Priority priority, DataCallback<? super InputStream> callback) {
     long startTime = LogTime.getLogTime();
-    InputStream result = null;
+    final InputStream result;
     try {
       result = loadDataWithRedirects(glideUrl.toURL(), 0 /*redirects*/, null /*lastUrl*/,
           glideUrl.getHeaders());
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Failed to load data for url", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to load data for url", e);
       }
+      callback.onLoadFailed(e);
+      return;
     }
-    if (Logs.isEnabled(Log.VERBOSE)) {
-      Logs.log(Log.VERBOSE, "Finished http url fetcher fetch in "
-          + LogTime.getElapsedMillis(startTime) + " ms and loaded "  + result);
+
+    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+      Log.v(TAG, "Finished http url fetcher fetch in " + LogTime.getElapsedMillis(startTime)
+          + " ms and loaded " + result);
     }
     callback.onDataReady(result);
   }
@@ -71,13 +72,14 @@ public void loadData(Priority priority, DataCallback<? super InputStream> callba
   private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,
       Map<String, String> headers) throws IOException {
     if (redirects >= MAXIMUM_REDIRECTS) {
-      throw new IOException("Too many (> " + MAXIMUM_REDIRECTS + ") redirects!");
+      throw new HttpException("Too many (> " + MAXIMUM_REDIRECTS + ") redirects!");
     } else {
       // Comparing the URLs using .equals performs additional network I/O and is generally broken.
       // See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html.
       try {
         if (lastUrl != null && url.toURI().equals(lastUrl.toURI())) {
-            throw new IOException("In re-direct loop");
+          throw new HttpException("In re-direct loop");
+
         }
       } catch (URISyntaxException e) {
         // Do nothing, this is best effort.
@@ -88,11 +90,6 @@ private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,
     for (Map.Entry<String, String> headerEntry : headers.entrySet()) {
       urlConnection.addRequestProperty(headerEntry.getKey(), headerEntry.getValue());
     }
-    // Do our best to avoid gzip since it's both inefficient for images and also makes it more
-    // difficult for us to detect and prevent partial content rendering. See #440.
-    if (TextUtils.isEmpty(urlConnection.getRequestProperty(ENCODING_HEADER))) {
-        urlConnection.setRequestProperty(ENCODING_HEADER, DEFAULT_ENCODING);
-    }
     urlConnection.setConnectTimeout(timeout);
     urlConnection.setReadTimeout(timeout);
     urlConnection.setUseCaches(false);
@@ -101,7 +98,7 @@ private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,
     // Connect explicitly to avoid errors in decoders if connection fails.
     urlConnection.connect();
     if (isCancelled) {
-        return null;
+      return null;
     }
     final int statusCode = urlConnection.getResponseCode();
     if (statusCode / 100 == 2) {
@@ -109,16 +106,14 @@ private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,
     } else if (statusCode / 100 == 3) {
       String redirectUrlString = urlConnection.getHeaderField("Location");
       if (TextUtils.isEmpty(redirectUrlString)) {
-          throw new IOException("Received empty or null redirect url");
+        throw new HttpException("Received empty or null redirect url");
       }
       URL redirectUrl = new URL(url, redirectUrlString);
       return loadDataWithRedirects(redirectUrl, redirects + 1, url, headers);
+    } else if (statusCode == -1) {
+      throw new HttpException(statusCode);
     } else {
-      if (statusCode == -1) {
-          throw new IOException("Unable to retrieve response code from HttpUrlConnection.");
-      }
-      throw new IOException("Request failed " + statusCode + ": "
-          + urlConnection.getResponseMessage());
+      throw new HttpException(urlConnection.getResponseMessage(), statusCode);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
index d6fd76388..add61c095 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
@@ -5,7 +5,6 @@
 import android.net.Uri;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 
@@ -20,6 +19,7 @@
  *            java.io.InputStream} or {@link android.os.ParcelFileDescriptor}.
  */
 public abstract class LocalUriFetcher<T> implements DataFetcher<T> {
+  private static final String TAG = "LocalUriFetcher";
   private final Uri uri;
   private final Context context;
   private T data;
@@ -43,9 +43,11 @@ public final void loadData(Priority priority, DataCallback<? super T> callback)
     try {
       data = loadResource(uri, contentResolver);
     } catch (FileNotFoundException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Failed to open Uri", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to open Uri", e);
       }
+      callback.onLoadFailed(e);
+      return;
     }
     callback.onDataReady(data);
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java
index 6e23b854b..dc6cbef6e 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/MediaStoreUtil.java
@@ -15,7 +15,7 @@ private MediaStoreUtil() {
     // Utility class.
   }
 
-  private static boolean isMediaStoreUri(Uri uri) {
+  public static boolean isMediaStoreUri(Uri uri) {
     return uri != null && ContentResolver.SCHEME_CONTENT.equals(uri.getScheme())
         && MediaStore.AUTHORITY.equals(uri.getAuthority());
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
index aeb3eb0be..307f2385e 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
@@ -7,7 +7,6 @@
 import android.util.Log;
 
 import com.bumptech.glide.Glide;
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -23,6 +22,7 @@
  * files obtained from the {@link MediaStore}.
  */
 public class ThumbFetcher implements DataFetcher<InputStream> {
+  private static final String TAG = "MediaStoreThumbFetcher";
   private final Context context;
   private final Uri mediaStoreImageUri;
   private final ThumbnailStreamOpener opener;
@@ -50,20 +50,22 @@ private static ThumbFetcher build(Context context, Uri uri, ThumbnailQuery query
 
   @Override
   public void loadData(Priority priority, DataCallback<? super InputStream> callback) {
-    inputStream = openThumbInputStream();
-    callback.onDataReady(inputStream);
-  }
-
-  private InputStream openThumbInputStream() {
-    InputStream result = null;
     try {
-      result = opener.open(context, mediaStoreImageUri);
+      inputStream = openThumbInputStream();
     } catch (FileNotFoundException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Failed to find thumbnail file", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to find thumbnail file", e);
       }
+      callback.onLoadFailed(e);
+      return;
     }
 
+    callback.onDataReady(inputStream);
+  }
+
+  private InputStream openThumbInputStream() throws FileNotFoundException {
+    InputStream result = opener.open(context, mediaStoreImageUri);
+
     int orientation = -1;
     if (result != null) {
       orientation = opener.getOrientation(context, mediaStoreImageUri);
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
index 8a12a75a8..9b9f899f8 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
@@ -33,7 +33,7 @@ public ThumbnailStreamOpener(FileService service, ThumbnailQuery query,
   }
 
   public int getOrientation(Context context, Uri uri) {
-    int orientation = -1;
+    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;
     InputStream is = null;
     try {
       is = context.getContentResolver().openInputStream(uri);
@@ -51,7 +51,7 @@ public int getOrientation(Context context, Uri uri) {
           }
       }
     }
-      return orientation;
+    return orientation;
   }
 
   public InputStream open(Context context, Uri uri) throws FileNotFoundException {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
index 118ea25a0..bb8284dec 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
@@ -3,8 +3,8 @@
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.data.DataFetcher;
-import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.model.ModelLoader;
+import com.bumptech.glide.load.model.ModelLoader.LoadData;
 
 import java.io.File;
 import java.util.List;
@@ -16,30 +16,29 @@
 class DataCacheGenerator implements DataFetcherGenerator,
     DataFetcher.DataCallback<Object> {
 
-  private final List<Key> sourceIds;
-  private final int width;
-  private final int height;
-  private final DiskCache diskCache;
-  private final RequestContext<?, ?> requestContext;
+  private List<Key> cacheKeys;
+  private final DecodeHelper<?> helper;
   private final FetcherReadyCallback cb;
 
   private int sourceIdIndex = -1;
   private Key sourceKey;
   private List<ModelLoader<File, ?>> modelLoaders;
   private int modelLoaderIndex;
-  private volatile DataFetcher<?> fetcher;
+  private volatile LoadData<?> loadData;
   // PMD is wrong here, this File must be an instance variable because it may be used across
   // multiple calls to startNext.
   @SuppressWarnings("PMD.SingularField")
   private File cacheFile;
 
-  public DataCacheGenerator(List<Key> sourceIds, int width, int height, DiskCache diskCache,
-      RequestContext<?, ?> requestContext, FetcherReadyCallback cb) {
-    this.sourceIds = sourceIds;
-    this.width = width;
-    this.height = height;
-    this.diskCache = diskCache;
-    this.requestContext = requestContext;
+  DataCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
+    this(helper.getCacheKeys(), helper, cb);
+  }
+
+  // In some cases we may want to load a specific cache key (when loading from source written to
+  // cache), so we accept a list of keys rather than just obtain the list from the helper.
+  DataCacheGenerator(List<Key> cacheKeys, DecodeHelper<?> helper, FetcherReadyCallback cb) {
+    this.cacheKeys = cacheKeys;
+    this.helper = helper;
     this.cb = cb;
   }
 
@@ -47,30 +46,33 @@ public DataCacheGenerator(List<Key> sourceIds, int width, int height, DiskCache
   public boolean startNext() {
     while (modelLoaders == null || !hasNextModelLoader()) {
       sourceIdIndex++;
-      if (sourceIdIndex >= sourceIds.size()) {
+      if (sourceIdIndex >= cacheKeys.size()) {
         return false;
       }
 
-      Key sourceId = sourceIds.get(sourceIdIndex);
-      Key originalKey = new DataCacheKey(sourceId, requestContext.getSignature());
-      cacheFile = diskCache.get(originalKey);
+      Key sourceId = cacheKeys.get(sourceIdIndex);
+      Key originalKey = new DataCacheKey(sourceId, helper.getSignature());
+      cacheFile = helper.getDiskCache().get(originalKey);
       if (cacheFile != null) {
         this.sourceKey = sourceId;
-        modelLoaders = requestContext.getModelLoaders(cacheFile);
+        modelLoaders = helper.getModelLoaders(cacheFile);
         modelLoaderIndex = 0;
       }
     }
 
-    fetcher = null;
-    while (fetcher == null && hasNextModelLoader()) {
+    loadData = null;
+    boolean started = false;
+    while (!started && hasNextModelLoader()) {
       ModelLoader<File, ?> modelLoader = modelLoaders.get(modelLoaderIndex++);
-      fetcher =
-          modelLoader.buildLoadData(cacheFile, width, height, requestContext.getOptions()).fetcher;
-      if (fetcher != null) {
-        fetcher.loadData(requestContext.getPriority(), this);
+      loadData =
+          modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),
+              helper.getOptions());
+      if (loadData != null && helper.hasLoadPath(loadData.fetcher.getDataClass())) {
+        started = true;
+        loadData.fetcher.loadData(helper.getPriority(), this);
       }
     }
-    return fetcher != null;
+    return started;
   }
 
   private boolean hasNextModelLoader() {
@@ -79,14 +81,19 @@ private boolean hasNextModelLoader() {
 
   @Override
   public void cancel() {
-    DataFetcher<?> local = fetcher;
+    LoadData<?> local = loadData;
     if (local != null) {
-      local.cancel();
+      local.fetcher.cancel();
     }
   }
 
   @Override
   public void onDataReady(Object data) {
-    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.DATA_DISK_CACHE);
+    cb.onDataFetcherReady(sourceKey, data, loadData.fetcher, DataSource.DATA_DISK_CACHE, sourceKey);
+  }
+
+  @Override
+  public void onLoadFailed(Exception e) {
+    cb.onDataFetcherFailed(sourceKey, e, loadData.fetcher, DataSource.DATA_DISK_CACHE);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheWriter.java b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheWriter.java
index 8f69c4d1b..85e274eca 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheWriter.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheWriter.java
@@ -1,8 +1,5 @@
 package com.bumptech.glide.load.engine;
 
-import android.util.Log;
-
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.cache.DiskCache;
@@ -19,7 +16,6 @@
  *                  Resource<Bitmap> etc).
  */
 class DataCacheWriter<DataType> implements DiskCache.Writer {
-
   private final Encoder<DataType> encoder;
   private final DataType data;
   private final Options options;
@@ -32,10 +28,6 @@
 
   @Override
   public boolean write(File file) {
-    boolean success = encoder.encode(data, file, options);
-    if (!success && Logs.isEnabled(Log.DEBUG)) {
-      Logs.log(Log.DEBUG, "Failed to write to cache");
-    }
-    return success;
+    return encoder.encode(data, file, options);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
index da048e5fb..bd1899d7a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataFetcherGenerator.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -26,8 +28,21 @@
      * @param sourceKey The id of the loaded data.
      * @param data The loaded data, or null if the load failed.
      * @param fetcher The data fetcher we attempted to load from.
+     * @param dataSource The data souce we were loading from.
+     * @param attemptedKey The key we were loading data from (may be an alternate).
+     */
+    void onDataFetcherReady(Key sourceKey, @Nullable Object data, DataFetcher<?> fetcher,
+        DataSource dataSource, Key attemptedKey);
+
+    /**
+     * Notifies the callback when the load fails.
+     *
+     * @param attemptedKey The key we were using to load (may be an alternate).
+     * @param e The exception that caused the load to fail.
+     * @param fetcher The fetcher we were loading from.
+     * @param dataSource The data source we were loading from.
      */
-    void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,
+    void onDataFetcherFailed(Key attemptedKey, Exception e, DataFetcher<?> fetcher,
         DataSource dataSource);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
new file mode 100644
index 000000000..3a010fed0
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
@@ -0,0 +1,212 @@
+package com.bumptech.glide.load.engine;
+
+import com.bumptech.glide.GlideContext;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.Registry;
+import com.bumptech.glide.load.Encoder;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.ResourceEncoder;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.cache.DiskCache;
+import com.bumptech.glide.load.model.ModelLoader;
+import com.bumptech.glide.load.model.ModelLoader.LoadData;
+import com.bumptech.glide.load.resource.UnitTransformation;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+final class DecodeHelper<Transcode> {
+
+  private final List<LoadData<?>> loadData = new ArrayList<>();
+  private final List<Key> cacheKeys = new ArrayList<>();
+
+  private GlideContext glideContext;
+  private Object model;
+  private int width;
+  private int height;
+  private Class<?> resourceClass;
+  private DecodeJob.DiskCacheProvider diskCacheProvider;
+  private Options options;
+  private Map<Class<?>, Transformation<?>> transformations;
+  private Class<Transcode> transcodeClass;
+  private boolean isLoadDataSet;
+  private boolean isCacheKeysSet;
+  private Key signature;
+  private Priority priority;
+  private DiskCacheStrategy diskCacheStrategy;
+  private boolean isTransformationRequired;
+
+  @SuppressWarnings("unchecked")
+  <R> DecodeHelper<R> init(
+      GlideContext glideContext,
+      Object model,
+      Key signature,
+      int width,
+      int height,
+      DiskCacheStrategy diskCacheStrategy,
+      Class<?> resourceClass,
+      Class<R> transcodeClass,
+      Priority priority,
+      Options options,
+      Map<Class<?>, Transformation<?>> transformations,
+      boolean isTransformationRequired,
+      DecodeJob.DiskCacheProvider diskCacheProvider) {
+    this.glideContext = glideContext;
+    this.model = model;
+    this.signature = signature;
+    this.width = width;
+    this.height = height;
+    this.diskCacheStrategy = diskCacheStrategy;
+    this.resourceClass = resourceClass;
+    this.diskCacheProvider = diskCacheProvider;
+    this.transcodeClass = (Class<Transcode>) transcodeClass;
+    this.priority = priority;
+    this.options = options;
+    this.transformations = transformations;
+    this.isTransformationRequired = isTransformationRequired;
+
+    return (DecodeHelper<R>) this;
+  }
+
+  Object getModel() {
+    return model;
+  }
+
+  void clear() {
+    glideContext = null;
+    model = null;
+    signature = null;
+    resourceClass = null;
+    transcodeClass = null;
+    options = null;
+    priority = null;
+    transformations = null;
+    diskCacheStrategy = null;
+
+    loadData.clear();
+    isLoadDataSet = false;
+    cacheKeys.clear();
+    isCacheKeysSet = false;
+  }
+
+  DiskCache getDiskCache() {
+    return diskCacheProvider.getDiskCache();
+  }
+
+  DiskCacheStrategy getDiskCacheStrategy() {
+    return diskCacheStrategy;
+  }
+
+  Priority getPriority() {
+    return priority;
+  }
+
+  Options getOptions() {
+    return options;
+  }
+
+  Key getSignature() {
+    return signature;
+  }
+
+  int getWidth() {
+    return width;
+  }
+
+  int getHeight() {
+    return height;
+  }
+
+  List<Class<?>> getRegisteredResourceClasses() {
+    return glideContext.getRegistry()
+        .getRegisteredResourceClasses(model.getClass(), resourceClass, transcodeClass);
+  }
+
+  boolean hasLoadPath(Class<?> dataClass) {
+    return getLoadPath(dataClass) != null;
+  }
+
+  <Data> LoadPath<Data, ?, Transcode> getLoadPath(Class<Data> dataClass) {
+    return glideContext.getRegistry().getLoadPath(dataClass, resourceClass, transcodeClass);
+  }
+
+  @SuppressWarnings("unchecked")
+  <Z> Transformation<Z> getTransformation(Class<Z> resourceClass) {
+    Transformation<Z> result = (Transformation<Z>) transformations.get(resourceClass);
+     if (result == null) {
+      if (transformations.isEmpty() && isTransformationRequired) {
+        throw new IllegalArgumentException(
+            "Missing transformation for " + resourceClass + ". If you wish to"
+                + " ignore unknown resource types, use the optional transformation methods.");
+      } else {
+        return UnitTransformation.get();
+      }
+    }
+    return result;
+  }
+
+  boolean isResourceEncoderAvailable(Resource<?> resource) {
+    return glideContext.getRegistry().isResourceEncoderAvailable(resource);
+  }
+
+  <Z> ResourceEncoder<Z> getResultEncoder(Resource<Z> resource) {
+    return glideContext.getRegistry().getResultEncoder(resource);
+  }
+
+  List<ModelLoader<File, ?>> getModelLoaders(File file)
+      throws Registry.NoModelLoaderAvailableException {
+    return glideContext.getRegistry().getModelLoaders(file);
+  }
+
+  boolean isSourceKey(Key key) {
+    List<LoadData<?>> loadData = getLoadData();
+    int size = loadData.size();
+    for (int i = 0; i < size; i++) {
+      LoadData<?> current = loadData.get(i);
+      if (current.sourceKey.equals(key)) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  List<LoadData<?>> getLoadData() {
+    if (!isLoadDataSet) {
+      isLoadDataSet = true;
+      loadData.clear();
+      List<ModelLoader<Object, ?>> modelLoaders = glideContext.getRegistry().getModelLoaders(model);
+      int size = modelLoaders.size();
+      for (int i = 0; i < size; i++) {
+        ModelLoader<Object, ?> modelLoader = modelLoaders.get(i);
+        LoadData<?> current =
+            modelLoader.buildLoadData(model, width, height, options);
+        if (current != null) {
+          loadData.add(current);
+        }
+      }
+    }
+    return loadData;
+  }
+
+  List<Key> getCacheKeys() {
+    if (!isCacheKeysSet) {
+      isCacheKeysSet = true;
+      cacheKeys.clear();
+      List<LoadData<?>> loadData = getLoadData();
+      int size = loadData.size();
+      for (int i = 0; i < size; i++) {
+        LoadData<?> data = loadData.get(i);
+        cacheKeys.add(data.sourceKey);
+        cacheKeys.addAll(data.alternateKeys);
+      }
+    }
+    return cacheKeys;
+  }
+
+  <X> Encoder<X> getSourceEncoder(X data) throws Registry.NoSourceEncoderAvailableException {
+    return glideContext.getRegistry().getSourceEncoder(data);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 8cf2595ec..222d32249 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -1,118 +1,234 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.v4.util.Pools;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
+import com.bumptech.glide.GlideContext;
+import com.bumptech.glide.Priority;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.EncodeStrategy;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.data.DataFetcher;
+import com.bumptech.glide.load.data.DataRewinder;
 import com.bumptech.glide.load.engine.cache.DiskCache;
-import com.bumptech.glide.load.engine.executor.Prioritized;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.pool.FactoryPools.Poolable;
+import com.bumptech.glide.util.pool.StateVerifier;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
 
 /**
  * A class responsible for decoding resources either from cached data or from the original source
  * and applying transformations and transcodes.
  *
+ * <p>Note: this class has a natural ordering that is inconsistent with equals.
+ *
  * @param <R> The type of resource that will be transcoded from the decoded and transformed
  *            resource.
  */
 class DecodeJob<R> implements DataFetcherGenerator.FetcherReadyCallback,
     Runnable,
-    Prioritized {
+    Comparable<DecodeJob<?>>,
+    Poolable {
   private static final String TAG = "DecodeJob";
 
-  private final RequestContext<?, R> requestContext;
-  private final EngineKey loadKey;
-  private final int width;
-  private final int height;
+  private final DecodeHelper<R> decodeHelper = new DecodeHelper<>();
+  private final List<Exception> exceptions = new ArrayList<>();
+  private final StateVerifier stateVerifier = StateVerifier.newInstance();
   private final DiskCacheProvider diskCacheProvider;
-  private final Callback<R> callback;
-
+  private final Pools.Pool<DecodeJob<?>> pool;
+  private final DeferredEncodeManager<?> deferredEncodeManager = new DeferredEncodeManager<>();
+  private final ReleaseManager releaseManager = new ReleaseManager();
+
+  private GlideContext glideContext;
+  private Key signature;
+  private Priority priority;
+  private EngineKey loadKey;
+  private int width;
+  private int height;
+  private DiskCacheStrategy diskCacheStrategy;
+  private Options options;
+  private Callback<R> callback;
+  private int order;
   private Stage stage;
-  private RunReason runReason = RunReason.INITIALIZE;
-  private volatile DataFetcherGenerator generator;
+  private RunReason runReason;
+  private long startFetchTime;
 
   private Thread currentThread;
   private Key currentSourceKey;
+  private Key currentAttemptingKey;
   private Object currentData;
   private DataSource currentDataSource;
   private DataFetcher<?> currentFetcher;
-  private long startFetchTime;
 
+  private volatile DataFetcherGenerator currentGenerator;
+  private volatile boolean isCallbackNotified;
   private volatile boolean isCancelled;
 
-  public DecodeJob(RequestContext<?, R> requestContext, EngineKey loadKey, int width, int height,
-      DiskCacheProvider diskCacheProvider, Callback<R> callback) {
-    this.requestContext = requestContext;
+  DecodeJob(DiskCacheProvider diskCacheProvider, Pools.Pool<DecodeJob<?>> pool) {
+    this.diskCacheProvider = diskCacheProvider;
+    this.pool = pool;
+  }
+
+  DecodeJob<R> init(
+      GlideContext glideContext,
+      Object model,
+      EngineKey loadKey,
+      Key signature,
+      int width,
+      int height,
+      Class<?> resourceClass,
+      Class<R> transcodeClass,
+      Priority priority,
+      DiskCacheStrategy diskCacheStrategy,
+      Map<Class<?>, Transformation<?>> transformations,
+      boolean isTransformationRequired,
+      Options options,
+      Callback<R> callback,
+      int order) {
+    decodeHelper.init(
+        glideContext,
+        model,
+        signature,
+        width,
+        height,
+        diskCacheStrategy,
+        resourceClass,
+        transcodeClass,
+        priority,
+        options,
+        transformations,
+        isTransformationRequired,
+        diskCacheProvider);
+    this.glideContext = glideContext;
+    this.signature = signature;
+    this.priority = priority;
     this.loadKey = loadKey;
     this.width = width;
     this.height = height;
-    this.diskCacheProvider = diskCacheProvider;
+    this.diskCacheStrategy = diskCacheStrategy;
+    this.options = options;
     this.callback = callback;
+    this.order = order;
+    this.runReason = RunReason.INITIALIZE;
+    return this;
   }
 
   /**
-   * Why we're being executed again.
+   * Returns true if this job will attempt to decode a resource from the disk cache, and false if it
+   * will always decode from source.
    */
-  private enum RunReason {
-    /** The first time we've been submitted. */
-    INITIALIZE,
-    /**
-     * We want to switch from the disk cache service to the source executor.
-     */
-    SWITCH_TO_SOURCE_SERVICE,
-    /**
-     * We retrieved some data on a thread we don't own and want to switch back to our thread to
-     * process the data.
-     */
-    DECODE_DATA,
+  boolean willDecodeFromCache() {
+    Stage firstStage = getNextStage(Stage.INITIALIZE);
+    return firstStage == Stage.RESOURCE_CACHE || firstStage == Stage.DATA_CACHE;
   }
 
   /**
-   * Where we're trying to decode data from.
+   * Called when this object is no longer in use externally.
+   *
+   * @param isRemovedFromQueue {@code true} if we've been removed from the queue and {@link #run}
+   *                           is neither in progress nor will ever be called again.
    */
-  private enum Stage {
-    /** The initial stage. */
-    INITIALIZE,
-    /** Decode from a cached resource. */
-    RESOURCE_CACHE,
-    /** Decode from cached source data. */
-    DATA_CACHE,
-    /** Decode from retrieved source. */
-    SOURCE,
+  void release(boolean isRemovedFromQueue) {
+    if (releaseManager.release(isRemovedFromQueue)) {
+      releaseInternal();
+    }
+  }
+
+  /**
+   * Called when we've finished encoding (either becasue the encode process is complete, or because
+   * we don't have anything to encode).
+   */
+  private void onEncodeComplete() {
+    if (releaseManager.onEncodeComplete()) {
+      releaseInternal();
+    }
+  }
+
+  /**
+   * Called when the load has failed due to a an error or a series of errors.
+   */
+  private void onLoadFailed() {
+    if (releaseManager.onFailed()) {
+      releaseInternal();
+    }
+  }
+
+  private void releaseInternal() {
+    releaseManager.reset();
+    deferredEncodeManager.clear();
+    decodeHelper.clear();
+    isCallbackNotified = false;
+    glideContext = null;
+    signature = null;
+    options = null;
+    priority = null;
+    loadKey = null;
+    callback = null;
+    stage = null;
+    currentGenerator = null;
+    currentThread = null;
+    currentSourceKey = null;
+    currentData = null;
+    currentDataSource = null;
+    currentFetcher = null;
+    startFetchTime = 0L;
+    isCancelled = false;
+    exceptions.clear();
+    pool.release(this);
+  }
+
+  @Override
+  public int compareTo(DecodeJob<?> other) {
+    int result = getPriority() - other.getPriority();
+    if (result == 0) {
+      result = order - other.order;
+    }
+    return result;
+  }
+
+  private int getPriority() {
+    return priority.ordinal();
   }
 
   public void cancel() {
     isCancelled = true;
-    DataFetcherGenerator local = generator;
+    DataFetcherGenerator local = currentGenerator;
     if (local != null) {
       local.cancel();
     }
   }
 
-  @Override
-  public int getPriority() {
-    return requestContext.getPriority().ordinal();
-  }
-
   @Override
   public void run() {
     // This should be much more fine grained, but since Java's thread pool implementation silently
     // swallows all otherwise fatal exceptions, this will at least make it obvious to developers
     // that something is failing.
     try {
+      if (isCancelled) {
+        notifyFailed();
+        return;
+      }
       runWrapped();
     } catch (RuntimeException e) {
-      if (!isCancelled && Log.isLoggable(TAG, Log.ERROR)) {
-        Log.e(TAG, "DecodeJob threw unexpectedly", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "DecodeJob threw unexpectedly"
+            + ", isCancelled: " + isCancelled
+            + ", stage: " + stage, e);
+      }
+      // When we're encoding we've already notified our callback and it isn't safe to do so again.
+      if (stage != Stage.ENCODE) {
+        notifyFailed();
+      }
+      if (!isCancelled) {
+        throw e;
       }
-      callback.onLoadFailed();
-      throw e;
     }
   }
 
@@ -120,7 +236,7 @@ private void runWrapped() {
      switch (runReason) {
       case INITIALIZE:
         stage = getNextStage(Stage.INITIALIZE);
-        generator = getNextGenerator();
+        currentGenerator = getNextGenerator();
         runGenerators();
         break;
       case SWITCH_TO_SOURCE_SERVICE:
@@ -135,19 +251,15 @@ private void runWrapped() {
   }
 
   private DataFetcherGenerator getNextGenerator() {
-    if (stage == null) {
-      return null;
-    }
     switch (stage) {
       case RESOURCE_CACHE:
-        return new ResourceCacheGenerator(width, height, diskCacheProvider.getDiskCache(),
-            requestContext, this);
+        return new ResourceCacheGenerator(decodeHelper, this);
       case DATA_CACHE:
-        return new DataCacheGenerator(requestContext.getCacheKeys(), width, height,
-            diskCacheProvider.getDiskCache(), requestContext, this);
+        return new DataCacheGenerator(decodeHelper, this);
       case SOURCE:
-        return new SourceGenerator<>(width, height, requestContext,
-            diskCacheProvider.getDiskCache(), this);
+        return new SourceGenerator(decodeHelper, this);
+      case FINISHED:
+        return null;
       default:
         throw new IllegalStateException("Unrecognized stage: " + stage);
     }
@@ -156,40 +268,61 @@ private DataFetcherGenerator getNextGenerator() {
   private void runGenerators() {
     currentThread = Thread.currentThread();
     startFetchTime = LogTime.getLogTime();
-    while (!isCancelled && generator != null && !generator.startNext()) {
+    boolean isStarted = false;
+    while (!isCancelled && currentGenerator != null
+        && !(isStarted = currentGenerator.startNext())) {
       stage = getNextStage(stage);
-      generator = getNextGenerator();
+      currentGenerator = getNextGenerator();
 
       if (stage == Stage.SOURCE) {
-        runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;
-        callback.reschedule(this);
+        reschedule();
         return;
       }
     }
     // We've run out of stages and generators, give up.
-    if (stage == null) {
-      callback.onLoadFailed();
+    if ((stage == Stage.FINISHED || isCancelled) && !isStarted) {
+      notifyFailed();
     }
+
     // Otherwise a generator started a new load and we expect to be called back in
     // onDataFetcherReady.
   }
 
-  private Stage getNextStage(Stage current) {
-    if (current == null) {
-      return null;
+  private void notifyFailed() {
+    setNotifiedOrThrow();
+    GlideException e = new GlideException("Failed to load resource", new ArrayList<>(exceptions));
+    callback.onLoadFailed(e);
+    onLoadFailed();
+  }
+
+  private void notifyComplete(Resource<R> resource, DataSource dataSource) {
+    setNotifiedOrThrow();
+    callback.onResourceReady(resource, dataSource);
+  }
+
+  private void setNotifiedOrThrow() {
+    stateVerifier.throwIfRecycled();
+    if (isCallbackNotified) {
+      throw new IllegalStateException("Already notified");
     }
-    DiskCacheStrategy strategy = requestContext.getDiskCacheStrategy();
+    isCallbackNotified = true;
+  }
+
+  private Stage getNextStage(Stage current) {
     switch (current) {
       case INITIALIZE:
-        return strategy.decodeCachedResource()
+        return diskCacheStrategy.decodeCachedResource()
             ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);
       case RESOURCE_CACHE:
-        return strategy.decodeCachedData()
+        return diskCacheStrategy.decodeCachedData()
             ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);
       case DATA_CACHE:
         return Stage.SOURCE;
+      case SOURCE:
+      case FINISHED:
+        return Stage.FINISHED;
       default:
-        return null;
+        throw new IllegalArgumentException("Unrecognized stage: " + current);
     }
   }
 
@@ -201,11 +334,12 @@ public void reschedule() {
 
   @Override
   public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,
-      DataSource dataSource) {
+      DataSource dataSource, Key attemptedKey) {
     this.currentSourceKey = sourceKey;
     this.currentData = data;
     this.currentFetcher = fetcher;
     this.currentDataSource = dataSource;
+    this.currentAttemptingKey = attemptedKey;
     if (Thread.currentThread() != currentThread) {
       runReason = RunReason.DECODE_DATA;
       callback.reschedule(this);
@@ -214,39 +348,73 @@ public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetche
     }
   }
 
+  @Override
+  public void onDataFetcherFailed(Key attemptedKey, Exception e, DataFetcher<?> fetcher,
+      DataSource dataSource) {
+    GlideException exception = new GlideException("Fetching data failed", e);
+    exception.setLoggingDetails(attemptedKey, dataSource, fetcher.getDataClass());
+    exceptions.add(exception);
+    if (Thread.currentThread() != currentThread) {
+      runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;
+      callback.reschedule(this);
+    } else {
+      runGenerators();
+    }
+  }
+
   private void decodeFromRetrievedData() {
-    if (Logs.isEnabled(Log.VERBOSE)) {
+    if (Log.isLoggable(TAG, Log.VERBOSE)) {
       logWithTimeAndKey("Retrieved data", startFetchTime,
           "data: " + currentData
           + ", cache key: " + currentSourceKey
           + ", fetcher: " + currentFetcher);
     }
-    Resource<R> resource = decodeFromData(currentFetcher, currentData, currentDataSource);
+    Resource<R> resource = null;
+    try {
+      resource = decodeFromData(currentFetcher, currentData, currentDataSource);
+    } catch (GlideException e) {
+      e.setLoggingDetails(currentAttemptingKey, currentDataSource);
+      exceptions.add(e);
+    }
     if (resource != null) {
-      callback.onResourceReady(resource);
-      cleanup();
+      notifyEncodeAndRelease(resource, currentDataSource);
     } else {
       runGenerators();
     }
   }
 
-  private void cleanup() {
-    currentData = null;
-    currentDataSource = null;
-    currentFetcher = null;
-    currentSourceKey = null;
-    currentThread = null;
+  private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource) {
+    Resource<R> result = resource;
+    LockedResource<R> lockedResource = null;
+    if (deferredEncodeManager.hasResourceToEncode()) {
+      lockedResource = LockedResource.obtain(resource);
+      result = lockedResource;
+    }
+
+    notifyComplete(result, dataSource);
+
+    stage = Stage.ENCODE;
+    try {
+      if (deferredEncodeManager.hasResourceToEncode()) {
+        deferredEncodeManager.encode(diskCacheProvider, options);
+      }
+    } finally {
+      if (lockedResource != null) {
+        lockedResource.unlock();
+      }
+      onEncodeComplete();
+    }
   }
 
   private <Data> Resource<R> decodeFromData(DataFetcher<?> fetcher, Data data,
-      DataSource dataSource) {
+      DataSource dataSource) throws GlideException {
     try {
       if (data == null) {
         return null;
       }
       long startTime = LogTime.getLogTime();
       Resource<R> result = decodeFromFetcher(data, dataSource);
-      if (Logs.isEnabled(Log.VERBOSE)) {
+      if (Log.isLoggable(TAG, Log.VERBOSE)) {
         logWithTimeAndKey("Decoded result " + result, startTime);
       }
       return result;
@@ -256,19 +424,21 @@ private void cleanup() {
   }
 
   @SuppressWarnings("unchecked")
-  private <Data> Resource<R> decodeFromFetcher(Data data, DataSource dataSource) {
-    LoadPath<Data, ?, R> path = requestContext.getLoadPath((Class<Data>) data.getClass());
-    if (path != null) {
-      return runLoadPath(data, dataSource, path);
-    } else {
-      return null;
-    }
+  private <Data> Resource<R> decodeFromFetcher(Data data, DataSource dataSource)
+      throws GlideException {
+    LoadPath<Data, ?, R> path = decodeHelper.getLoadPath((Class<Data>) data.getClass());
+    return runLoadPath(data, dataSource, path);
   }
 
   private <Data, ResourceType> Resource<R> runLoadPath(Data data, DataSource dataSource,
-      LoadPath<Data, ResourceType, R> path) {
-    return path.load(data, requestContext, width, height,
-        new DecodeCallback<ResourceType>(dataSource));
+      LoadPath<Data, ResourceType, R> path) throws GlideException {
+    DataRewinder<Data> rewinder = glideContext.getRegistry().getRewinder(data);
+    try {
+      return path.load(rewinder, options, width, height,
+          new DecodeCallback<ResourceType>(dataSource));
+    } finally {
+      rewinder.cleanup();
+    }
   }
 
   private void logWithTimeAndKey(String message, long startTime) {
@@ -276,10 +446,14 @@ private void logWithTimeAndKey(String message, long startTime) {
   }
 
   private void logWithTimeAndKey(String message, long startTime, String extraArgs) {
-    Logs.log(Log.VERBOSE, message + " in " + LogTime.getElapsedMillis(startTime)
-        + ", load key: " + loadKey
-        + (extraArgs != null ? ", " + extraArgs : "")
-        + ", thread: " + Thread.currentThread().getName());
+    Log.v(TAG, message + " in " + LogTime.getElapsedMillis(startTime) + ", load key: " + loadKey
+        + (extraArgs != null ? ", " + extraArgs : "") + ", thread: "
+        + Thread.currentThread().getName());
+  }
+
+  @Override
+  public StateVerifier getVerifier() {
+    return stateVerifier;
   }
 
   class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {
@@ -296,7 +470,7 @@ public DecodeCallback(DataSource dataSource) {
       Transformation<Z> appliedTransformation = null;
       Resource<Z> transformed = decoded;
       if (dataSource != DataSource.RESOURCE_DISK_CACHE) {
-        appliedTransformation = requestContext.getTransformation(resourceSubClass);
+        appliedTransformation = decodeHelper.getTransformation(resourceSubClass);
         transformed = appliedTransformation.transform(decoded, width, height);
       }
       // TODO: Make this the responsibility of the Transformation.
@@ -306,17 +480,16 @@ public DecodeCallback(DataSource dataSource) {
 
       final EncodeStrategy encodeStrategy;
       final ResourceEncoder<Z> encoder;
-      if (requestContext.isResourceEncoderAvailable(transformed)) {
-        encoder = requestContext.getResultEncoder(transformed);
-        encodeStrategy = encoder.getEncodeStrategy(requestContext.getOptions());
+      if (decodeHelper.isResourceEncoderAvailable(transformed)) {
+        encoder = decodeHelper.getResultEncoder(transformed);
+        encodeStrategy = encoder.getEncodeStrategy(options);
       } else {
         encoder = null;
         encodeStrategy = EncodeStrategy.NONE;
       }
 
-      long startEncodeTime = LogTime.getLogTime();
-      DiskCacheStrategy diskCacheStrategy = requestContext.getDiskCacheStrategy();
-      boolean isFromAlternateCacheKey = !requestContext.isSourceKey(currentSourceKey);
+      Resource<Z> result = transformed;
+      boolean isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);
       if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,
           encodeStrategy)) {
         if (encoder == null) {
@@ -324,23 +497,19 @@ public DecodeCallback(DataSource dataSource) {
         }
         final Key key;
         if (encodeStrategy == EncodeStrategy.SOURCE) {
-          key = new DataCacheKey(currentSourceKey, requestContext.getSignature());
+          key = new DataCacheKey(currentSourceKey, signature);
         } else if (encodeStrategy == EncodeStrategy.TRANSFORMED) {
-          key = new ResourceCacheKey(currentSourceKey, requestContext.getSignature(), width, height,
-              appliedTransformation, resourceSubClass, requestContext.getOptions());
+          key = new ResourceCacheKey(currentSourceKey, signature, width, height,
+              appliedTransformation, resourceSubClass, options);
         } else {
           throw new IllegalArgumentException("Unknown strategy: " + encodeStrategy);
         }
 
-        diskCacheProvider.getDiskCache().put(key, new DataCacheWriter<>(encoder, transformed,
-            requestContext.getOptions()));
-        if (Logs.isEnabled(Log.VERBOSE)) {
-          logWithTimeAndKey("Encoded resource to cache", startEncodeTime,
-              "cache key: " + key
-              + ", encode strategy: " + encodeStrategy);
-        }
+        LockedResource<Z> lockedResult = LockedResource.obtain(transformed);
+        deferredEncodeManager.init(key, encoder, lockedResult);
+        result = lockedResult;
       }
-      return transformed;
+      return result;
     }
 
     @SuppressWarnings("unchecked")
@@ -349,11 +518,82 @@ public DecodeCallback(DataSource dataSource) {
     }
   }
 
+  /**
+   * Responsible for indicating when it is safe for the job to be cleared and returned to the pool.
+   */
+  private static class ReleaseManager {
+    private boolean isReleased;
+    private boolean isEncodeComplete;
+    private boolean isFailed;
+
+    synchronized boolean release(boolean isRemovedFromQueue) {
+      isReleased = true;
+      return isComplete(isRemovedFromQueue);
+    }
+
+    synchronized boolean onEncodeComplete() {
+      isEncodeComplete = true;
+      return isComplete(false /*isRemovedFromQueue*/);
+    }
+
+    synchronized boolean onFailed() {
+      isFailed = true;
+      return isComplete(false /*isRemovedFromQueue*/);
+    }
+
+    synchronized void reset() {
+      isEncodeComplete = false;
+      isReleased = false;
+      isFailed = false;
+    }
+
+    private boolean isComplete(boolean isRemovedFromQueue) {
+      return (isFailed || isRemovedFromQueue || isEncodeComplete) && isReleased;
+    }
+  }
+
+  /**
+   * Allows transformed resources to be encoded after the transcoded result is already delivered
+   * to requestors.
+   */
+  private static class DeferredEncodeManager<Z> {
+    private Key key;
+    private ResourceEncoder<Z> encoder;
+    private LockedResource<Z> toEncode;
+
+    // We just need the encoder and resouce type to match, which this will enforce.
+    @SuppressWarnings("unchecked")
+    <X> void init(Key key, ResourceEncoder<X> encoder, LockedResource<X> toEncode) {
+      this.key = key;
+      this.encoder = (ResourceEncoder<Z>) encoder;
+      this.toEncode = (LockedResource<Z>) toEncode;
+    }
+
+    void encode(DiskCacheProvider diskCacheProvider, Options options) {
+      try {
+        diskCacheProvider.getDiskCache().put(key,
+            new DataCacheWriter<>(encoder, toEncode, options));
+      } finally {
+        toEncode.unlock();
+      }
+    }
+
+    boolean hasResourceToEncode() {
+      return toEncode != null;
+    }
+
+    void clear() {
+      key = null;
+      encoder = null;
+      toEncode = null;
+    }
+  }
+
   interface Callback<R> {
 
-    void onResourceReady(Resource<R> resource);
+    void onResourceReady(Resource<R> resource, DataSource dataSource);
 
-    void onLoadFailed();
+    void onLoadFailed(GlideException e);
 
     void reschedule(DecodeJob<?> job);
   }
@@ -361,4 +601,39 @@ public DecodeCallback(DataSource dataSource) {
   interface DiskCacheProvider {
     DiskCache getDiskCache();
   }
+
+  /**
+   * Why we're being executed again.
+   */
+  private enum RunReason {
+    /** The first time we've been submitted. */
+    INITIALIZE,
+    /**
+     * We want to switch from the disk cache service to the source executor.
+     */
+    SWITCH_TO_SOURCE_SERVICE,
+    /**
+     * We retrieved some data on a thread we don't own and want to switch back to our thread to
+     * process the data.
+     */
+    DECODE_DATA,
+  }
+
+  /**
+   * Where we're trying to decode data from.
+   */
+  private enum Stage {
+    /** The initial stage. */
+    INITIALIZE,
+    /** Decode from a cached resource. */
+    RESOURCE_CACHE,
+    /** Decode from cached source data. */
+    DATA_CACHE,
+    /** Decode from retrieved source. */
+    SOURCE,
+    /** Encoding transformed resources after a successful load. */
+    ENCODE,
+    /** No more viable stages. */
+    FINISHED,
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
index a2d2a423d..929515277 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
@@ -1,14 +1,15 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.v4.util.Pools.Pool;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.data.DataRewinder;
 import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -20,32 +21,47 @@
  *                       returned to the caller.
  */
 public class DecodePath<DataType, ResourceType, Transcode> {
+  private static final String TAG = "DecodePath";
   private final Class<DataType> dataClass;
   private final List<? extends ResourceDecoder<DataType, ResourceType>> decoders;
   private final ResourceTranscoder<ResourceType, Transcode> transcoder;
+  private final Pool<List<Exception>> listPool;
+  private final String failureMessage;
 
-  public DecodePath(Class<DataType> dataClass,
+  public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
+      Class<Transcode> transcodeClass,
       List<? extends ResourceDecoder<DataType, ResourceType>> decoders,
-      ResourceTranscoder<ResourceType, Transcode> transcoder) {
+      ResourceTranscoder<ResourceType, Transcode> transcoder, Pool<List<Exception>> listPool) {
     this.dataClass = dataClass;
     this.decoders = decoders;
     this.transcoder = transcoder;
+    this.listPool = listPool;
+    failureMessage = "Failed DecodePath{" + dataClass.getSimpleName() + "->"
+        + resourceClass.getSimpleName() + "->" + transcodeClass.getSimpleName() + "}";
   }
 
   public Resource<Transcode> decode(DataRewinder<DataType> rewinder, int width, int height,
-      Options options, DecodeCallback<ResourceType> callback) {
+      Options options, DecodeCallback<ResourceType> callback) throws GlideException {
     Resource<ResourceType> decoded = decodeResource(rewinder, width, height, options);
-    if (decoded == null) {
-      return null;
-    }
     Resource<ResourceType> transformed = callback.onResourceDecoded(decoded);
     return transcoder.transcode(transformed);
   }
 
   private Resource<ResourceType> decodeResource(DataRewinder<DataType> rewinder, int width,
-      int height, Options options) {
+      int height, Options options) throws GlideException {
+    List<Exception> exceptions = listPool.acquire();
+    try {
+      return decodeResourceWithList(rewinder, width, height, options, exceptions);
+    } finally {
+      listPool.release(exceptions);
+    }
+  }
+
+  private Resource<ResourceType> decodeResourceWithList(DataRewinder<DataType> rewinder, int width,
+      int height, Options options, List<Exception> exceptions) throws GlideException {
     Resource<ResourceType> result = null;
-    for (ResourceDecoder<DataType, ResourceType> decoder : decoders) {
+    for (int i = 0, size = decoders.size(); i < size; i++) {
+      ResourceDecoder<DataType, ResourceType> decoder = decoders.get(i);
       try {
         DataType data = rewinder.rewindAndGet();
         if (decoder.handles(data, options)) {
@@ -53,15 +69,20 @@ public DecodePath(Class<DataType> dataClass,
           result = decoder.decode(data, width, height, options);
         }
       } catch (IOException e) {
-        if (Logs.isEnabled(Log.VERBOSE)) {
-          Logs.log(Log.VERBOSE, "Failed to decode data for " + decoder, e);
+        if (Log.isLoggable(TAG, Log.VERBOSE)) {
+          Log.v(TAG, "Failed to decode data for " + decoder, e);
         }
+        exceptions.add(e);
       }
 
       if (result != null) {
         break;
       }
     }
+
+    if (result == null) {
+      throw new GlideException(failureMessage, new ArrayList<>(exceptions));
+    }
     return result;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java
index 6f40a91a3..0633c1c16 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DiskCacheStrategy.java
@@ -6,13 +6,13 @@
 /**
  * Set of available caching strategies for media.
  */
-public enum DiskCacheStrategy {
+public abstract class DiskCacheStrategy {
 
   /**
    * Caches remote data with both {@link #DATA} and {@link #RESOURCE}, and local data with
    * {@link #RESOURCE} only.
    */
-  ALL(true /*decodeCachedData*/, true /*decodeCachedResource*/) {
+  public static final DiskCacheStrategy ALL = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
       return dataSource == DataSource.REMOTE;
@@ -23,11 +23,22 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
         EncodeStrategy encodeStrategy) {
       return dataSource != DataSource.RESOURCE_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;
     }
-  },
+
+    @Override
+    public boolean decodeCachedResource() {
+      return true;
+    }
+
+    @Override
+    public boolean decodeCachedData() {
+      return true;
+    }
+  };
+
   /**
    * Saves no data to cache.
    */
-  NONE(false /*decodeCachedData*/, false /*decodeCachedResource*/) {
+  public static final DiskCacheStrategy NONE = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
       return false;
@@ -38,11 +49,22 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
         EncodeStrategy encodeStrategy) {
       return false;
     }
-  },
+
+    @Override
+    public boolean decodeCachedResource() {
+      return false;
+    }
+
+    @Override
+    public boolean decodeCachedData() {
+      return false;
+    }
+  };
+
   /**
    * Writes retrieved data directly to the disk cache before it's decoded.
    */
-  DATA(true /*decodeCachedData*/, false /*decodeCachedResource*/) {
+  public static final DiskCacheStrategy DATA = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
       return dataSource != DataSource.DATA_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;
@@ -53,14 +75,25 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
         EncodeStrategy encodeStrategy) {
       return false;
     }
-  },
+
+    @Override
+    public boolean decodeCachedResource() {
+      return false;
+    }
+
+    @Override
+    public boolean decodeCachedData() {
+      return true;
+    }
+  };
+
   /**
    * Writes resources to disk after they've been decoded.
    */
-  RESOURCE(false /*decodeCachedData*/, true /*decodeCachedResource*/) {
+  public static final DiskCacheStrategy RESOURCE = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
-      return false;
+      return true;
     }
 
     @Override
@@ -68,7 +101,18 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
         EncodeStrategy encodeStrategy) {
       return dataSource != DataSource.RESOURCE_DISK_CACHE && dataSource != DataSource.MEMORY_CACHE;
     }
-  },
+
+    @Override
+    public boolean decodeCachedResource() {
+      return true;
+    }
+
+    @Override
+    public boolean decodeCachedData() {
+      return false;
+    }
+  };
+
   /**
    * Tries to intelligently choose a strategy based on the data source of the
    * {@link com.bumptech.glide.load.data.DataFetcher} and the
@@ -76,7 +120,7 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
    * {@link com.bumptech.glide.load.ResourceEncoder} (if an
    * {@link com.bumptech.glide.load.ResourceEncoder} is available).
    */
-  AUTOMATIC(true /*decodeCachedData*/, true /*decodeCachedResource*/) {
+  public static final DiskCacheStrategy AUTOMATIC = new DiskCacheStrategy() {
     @Override
     public boolean isDataCacheable(DataSource dataSource) {
       return dataSource == DataSource.REMOTE;
@@ -89,24 +133,34 @@ public boolean isResourceCacheable(boolean isFromAlternateCacheKey, DataSource d
           || dataSource == DataSource.LOCAL)
           && encodeStrategy == EncodeStrategy.TRANSFORMED;
     }
-  };
 
-  private final boolean decodeCachedData;
-  private final boolean decodeCachedResource;
+    @Override
+    public boolean decodeCachedResource() {
+      return true;
+    }
 
-  DiskCacheStrategy(boolean decodeCachedData,
-      boolean decodeCachedResource) {
-    this.decodeCachedData = decodeCachedData;
-    this.decodeCachedResource = decodeCachedResource;
-  }
+    @Override
+    public boolean decodeCachedData() {
+      return true;
+    }
+  };
 
   /**
    * Returns true if this request should cache the original unmodified data.
+   *
+   * @param dataSource Indicates where the data was originally retrieved.
    */
   public abstract boolean isDataCacheable(DataSource dataSource);
 
   /**
    * Returns true if this request should cache the final transformed resource.
+   *
+   * @param isFromAlternateCacheKey {@code true} if the resource we've decoded was loaded using an
+   *                                alternative, rather than the primary, cache key.
+   * @param dataSource Indicates where the data used to decode the resource was originally
+   *                   retrieved.
+   * @param encodeStrategy The {@link EncodeStrategy} the {@link
+   * com.bumptech.glide.load.ResourceEncoder} will use to encode the resource.
    */
   public abstract boolean isResourceCacheable(boolean isFromAlternateCacheKey,
       DataSource dataSource, EncodeStrategy encodeStrategy);
@@ -114,14 +168,10 @@ public abstract boolean isResourceCacheable(boolean isFromAlternateCacheKey,
   /**
    * Returns true if this request should attempt to decode cached resource data.
    */
-  public boolean decodeCachedResource() {
-    return decodeCachedResource;
-  }
+  public abstract boolean decodeCachedResource();
 
   /**
    * Returns true if this request should attempt to decode cached source data.
    */
-  public boolean decodeCachedData() {
-    return decodeCachedData;
-  }
+  public abstract boolean decodeCachedData();
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index 240a0a7e3..3d1e3133e 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -2,21 +2,28 @@
 
 import android.os.Looper;
 import android.os.MessageQueue;
+import android.support.v4.util.Pools;
 import android.util.Log;
 
+import com.bumptech.glide.GlideContext;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.DiskCacheAdapter;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
+import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.util.LogTime;
 import com.bumptech.glide.util.Util;
+import com.bumptech.glide.util.pool.FactoryPools;
 
 import java.lang.ref.ReferenceQueue;
 import java.lang.ref.WeakReference;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.ExecutorService;
 
 /**
  * Responsible for starting loads and managing active and cached resources.
@@ -25,6 +32,7 @@
     MemoryCache.ResourceRemovedListener,
     EngineResource.ResourceListener {
   private static final String TAG = "Engine";
+  private static final int JOB_POOL_SIZE = 150;
   private final Map<Key, EngineJob> jobs;
   private final EngineKeyFactory keyFactory;
   private final MemoryCache cache;
@@ -32,6 +40,7 @@
   private final Map<Key, WeakReference<EngineResource<?>>> activeResources;
   private final ResourceRecycler resourceRecycler;
   private final LazyDiskCacheProvider diskCacheProvider;
+  private final DecodeJobFactory decodeJobFactory;
 
   // Lazily instantiate to avoid exceptions if Glide is initialized on a background thread. See
   // #295.
@@ -55,16 +64,16 @@ public void cancel() {
   }
 
   public Engine(MemoryCache memoryCache, DiskCache.Factory diskCacheFactory,
-      ExecutorService diskCacheService, ExecutorService sourceService) {
-    this(memoryCache, diskCacheFactory, diskCacheService, sourceService, null, null, null, null,
-        null);
+      GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor) {
+    this(memoryCache, diskCacheFactory, diskCacheExecutor, sourceExecutor, null, null, null, null,
+        null, null);
   }
 
   // Visible for testing.
-  Engine(MemoryCache cache, DiskCache.Factory diskCacheFactory, ExecutorService diskCacheService,
-      ExecutorService sourceService, Map<Key, EngineJob> jobs, EngineKeyFactory keyFactory,
+  Engine(MemoryCache cache, DiskCache.Factory diskCacheFactory, GlideExecutor diskCacheExecutor,
+      GlideExecutor sourceExecutor, Map<Key, EngineJob> jobs, EngineKeyFactory keyFactory,
       Map<Key, WeakReference<EngineResource<?>>> activeResources, EngineJobFactory engineJobFactory,
-      ResourceRecycler resourceRecycler) {
+      DecodeJobFactory decodeJobFactory, ResourceRecycler resourceRecycler) {
     this.cache = cache;
     this.diskCacheProvider = new LazyDiskCacheProvider(diskCacheFactory);
 
@@ -84,10 +93,15 @@ public Engine(MemoryCache memoryCache, DiskCache.Factory diskCacheFactory,
     this.jobs = jobs;
 
     if (engineJobFactory == null) {
-      engineJobFactory = new EngineJobFactory(diskCacheService, sourceService, this);
+      engineJobFactory = new EngineJobFactory(diskCacheExecutor, sourceExecutor, this);
     }
     this.engineJobFactory = engineJobFactory;
 
+    if (decodeJobFactory == null) {
+      decodeJobFactory = new DecodeJobFactory(diskCacheProvider);
+    }
+    this.decodeJobFactory = decodeJobFactory;
+
     if (resourceRecycler == null) {
       resourceRecycler = new ResourceRecycler();
     }
@@ -115,27 +129,39 @@ public Engine(MemoryCache memoryCache, DiskCache.Factory diskCacheFactory,
    * @param height The target height in pixels of the desired resource.
    * @param cb     The callback that will be called when the load completes.
    */
-  public <Z, R> LoadStatus load(RequestContext<?, R> requestContext, int width, int height,
+  public <R> LoadStatus load(
+      GlideContext glideContext,
+      Object model,
+      Key signature,
+      int width,
+      int height,
+      Class<?> resourceClass,
+      Class<R> transcodeClass,
+      Priority priority,
+      DiskCacheStrategy diskCacheStrategy,
+      Map<Class<?>, Transformation<?>> transformations,
+      boolean isTransformationRequired,
+      Options options,
+      boolean isMemoryCacheable,
       ResourceCallback cb) {
     Util.assertMainThread();
     long startTime = LogTime.getLogTime();
 
-    requestContext.setDimens(width, height);
-
-    EngineKey key = keyFactory.buildKey(requestContext, width, height);
+    EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,
+        resourceClass, transcodeClass, options);
 
-    EngineResource<?> cached = loadFromCache(key, requestContext.isMemoryCacheable());
+    EngineResource<?> cached = loadFromCache(key, isMemoryCacheable);
     if (cached != null) {
-      cb.onResourceReady(cached);
+      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         logWithTimeAndKey("Loaded resource from cache", startTime, key);
       }
       return null;
     }
 
-    EngineResource<?> active = loadFromActiveResources(key, requestContext.isMemoryCacheable());
+    EngineResource<?> active = loadFromActiveResources(key, isMemoryCacheable);
     if (active != null) {
-      cb.onResourceReady(active);
+      cb.onResourceReady(active, DataSource.MEMORY_CACHE);
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         logWithTimeAndKey("Loaded resource from active resources", startTime, key);
       }
@@ -151,8 +177,21 @@ public Engine(MemoryCache memoryCache, DiskCache.Factory diskCacheFactory,
       return new LoadStatus(cb, current);
     }
 
-    EngineJob<R> engineJob = engineJobFactory.build(key, requestContext.isMemoryCacheable());
-    DecodeJob<R> decodeJob = new DecodeJob<>(requestContext, key, width, height, diskCacheProvider,
+    EngineJob<R> engineJob = engineJobFactory.build(key, isMemoryCacheable);
+    DecodeJob<R> decodeJob = decodeJobFactory.build(
+        glideContext,
+        model,
+        key,
+        signature,
+        width,
+        height,
+        resourceClass,
+        transcodeClass,
+        priority,
+        diskCacheStrategy,
+        transformations,
+        isTransformationRequired,
+        options,
         engineJob);
     jobs.put(key, engineJob);
     engineJob.addCallback(cb);
@@ -338,21 +377,81 @@ public boolean queueIdle() {
     }
   }
 
+  // Visible for testing.
+  static class DecodeJobFactory {
+    private final DecodeJob.DiskCacheProvider diskCacheProvider;
+    private final Pools.Pool<DecodeJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,
+        new FactoryPools.Factory<DecodeJob<?>>() {
+          @Override
+          public DecodeJob<?> create() {
+            return new DecodeJob<Object>(diskCacheProvider, pool);
+          }
+        });
+    private int creationOrder;
+
+    DecodeJobFactory(DecodeJob.DiskCacheProvider diskCacheProvider) {
+      this.diskCacheProvider = diskCacheProvider;
+    }
+
+    @SuppressWarnings("unchecked")
+    <R> DecodeJob<R> build(GlideContext glideContext,
+        Object model,
+        EngineKey loadKey,
+        Key signature,
+        int width,
+        int height,
+        Class<?> resourceClass,
+        Class<R> transcodeClass,
+        Priority priority,
+        DiskCacheStrategy diskCacheStrategy,
+        Map<Class<?>, Transformation<?>> transformations,
+        boolean isTransformationRequired,
+        Options options,
+        DecodeJob.Callback<R> callback) {
+      DecodeJob<R> result = (DecodeJob<R>) pool.acquire();
+      return result.init(
+          glideContext,
+          model,
+          loadKey,
+          signature,
+          width,
+          height,
+          resourceClass,
+          transcodeClass,
+          priority,
+          diskCacheStrategy,
+          transformations,
+          isTransformationRequired,
+          options,
+          callback,
+          creationOrder++);
+    }
+  }
+
   // Visible for testing.
   static class EngineJobFactory {
-    private final ExecutorService diskCacheService;
-    private final ExecutorService sourceService;
+    private final GlideExecutor diskCacheExecutor;
+    private final GlideExecutor sourceExecutor;
     private final EngineJobListener listener;
+    private final Pools.Pool<EngineJob<?>> pool = FactoryPools.simple(JOB_POOL_SIZE,
+        new FactoryPools.Factory<EngineJob<?>>() {
+          @Override
+          public EngineJob<?> create() {
+            return new EngineJob<Object>(diskCacheExecutor, sourceExecutor, listener, pool);
+          }
+        });
 
-    public EngineJobFactory(ExecutorService diskCacheService, ExecutorService sourceService,
+    EngineJobFactory(GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,
         EngineJobListener listener) {
-      this.diskCacheService = diskCacheService;
-      this.sourceService = sourceService;
+      this.diskCacheExecutor = diskCacheExecutor;
+      this.sourceExecutor = sourceExecutor;
       this.listener = listener;
     }
 
-    public <R> EngineJob<R> build(Key key, boolean isMemoryCacheable) {
-      return new EngineJob<>(key, diskCacheService, sourceService, isMemoryCacheable, listener);
+    @SuppressWarnings("unchecked")
+    <R> EngineJob<R> build(Key key, boolean isMemoryCacheable) {
+      EngineJob<R> result = (EngineJob<R>) pool.acquire();
+      return result.init(key, isMemoryCacheable);
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 8bfb51477..c58965ca1 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -3,78 +3,95 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import android.support.v4.util.Pools;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.util.Util;
+import com.bumptech.glide.util.pool.FactoryPools.Poolable;
+import com.bumptech.glide.util.pool.StateVerifier;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
 
 /**
  * A class that manages a load by adding and removing callbacks for for the load and notifying
  * callbacks when the load completes.
  */
-class EngineJob<R> implements DecodeJob.Callback<R> {
+class EngineJob<R> implements DecodeJob.Callback<R>,
+    Poolable {
   private static final EngineResourceFactory DEFAULT_FACTORY = new EngineResourceFactory();
   private static final Handler MAIN_THREAD_HANDLER =
       new Handler(Looper.getMainLooper(), new MainThreadCallback());
 
   private static final int MSG_COMPLETE = 1;
   private static final int MSG_EXCEPTION = 2;
+  // Used when we realize we're cancelled on a background thread in reschedule and can recycle
+  // immediately rather than waiting for a result or an error.
+  private static final int MSG_CANCELLED = 3;
 
   private final List<ResourceCallback> cbs = new ArrayList<>(2);
+  private final StateVerifier stateVerifier = StateVerifier.newInstance();
+  private final Pools.Pool<EngineJob<?>> pool;
   private final EngineResourceFactory engineResourceFactory;
   private final EngineJobListener listener;
-  private final Key key;
-  private final ExecutorService diskCacheService;
-  private final ExecutorService sourceService;
-  private final boolean isCacheable;
-
-  private boolean isCancelled;
-  // Either resource or exception (particularly exception) may be returned to us null, so use
-  // booleans to track if
-  // we've received them instead of relying on them to be non-null. See issue #180.
+  private final GlideExecutor diskCacheExecutor;
+  private final GlideExecutor sourceExecutor;
+
+  private Key key;
+  private boolean isCacheable;
   private Resource<?> resource;
+  private DataSource dataSource;
   private boolean hasResource;
+  private GlideException exception;
   private boolean hasLoadFailed;
   // A put of callbacks that are removed while we're notifying other callbacks of a change in
   // status.
   private List<ResourceCallback> ignoredCallbacks;
   private EngineResource<?> engineResource;
-
-  private volatile Future<?> future;
   private DecodeJob<R> decodeJob;
 
-  public EngineJob(Key key, ExecutorService diskCacheService, ExecutorService sourceService,
-      boolean isCacheable, EngineJobListener listener) {
-    this(key, diskCacheService, sourceService, isCacheable, listener, DEFAULT_FACTORY);
+  // Checked primarily on the main thread, but also on other threads in reschedule.
+  private volatile boolean isCancelled;
+
+  EngineJob(GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,
+      EngineJobListener listener, Pools.Pool<EngineJob<?>> pool) {
+    this(diskCacheExecutor, sourceExecutor, listener, pool, DEFAULT_FACTORY);
   }
 
-  public EngineJob(Key key, ExecutorService diskCacheService, ExecutorService sourceService,
-      boolean isCacheable, EngineJobListener listener,
+  // Visible for testing.
+  EngineJob(GlideExecutor diskCacheExecutor, GlideExecutor sourceExecutor,
+      EngineJobListener listener, Pools.Pool<EngineJob<?>> pool,
       EngineResourceFactory engineResourceFactory) {
-    this.key = key;
-    this.diskCacheService = diskCacheService;
-    this.sourceService = sourceService;
-    this.isCacheable = isCacheable;
+    this.diskCacheExecutor = diskCacheExecutor;
+    this.sourceExecutor = sourceExecutor;
     this.listener = listener;
+    this.pool = pool;
     this.engineResourceFactory = engineResourceFactory;
   }
 
+  // Visible for testing.
+  EngineJob<R> init(Key key, boolean isCacheable) {
+    this.key = key;
+    this.isCacheable = isCacheable;
+    return this;
+  }
+
   public void start(DecodeJob<R> decodeJob) {
     this.decodeJob = decodeJob;
-    future = diskCacheService.submit(decodeJob);
+    GlideExecutor executor = decodeJob.willDecodeFromCache() ? diskCacheExecutor : sourceExecutor;
+    executor.execute(decodeJob);
   }
 
   public void addCallback(ResourceCallback cb) {
     Util.assertMainThread();
+    stateVerifier.throwIfRecycled();
     if (hasResource) {
-      cb.onResourceReady(engineResource);
+      cb.onResourceReady(engineResource, dataSource);
     } else if (hasLoadFailed) {
-      cb.onLoadFailed();
+      cb.onLoadFailed(exception);
     } else {
       cbs.add(cb);
     }
@@ -82,6 +99,7 @@ public void addCallback(ResourceCallback cb) {
 
   public void removeCallback(ResourceCallback cb) {
     Util.assertMainThread();
+    stateVerifier.throwIfRecycled();
     if (hasResource || hasLoadFailed) {
       addIgnoredCallback(cb);
     } else {
@@ -116,13 +134,15 @@ void cancel() {
       return;
     }
 
-    decodeJob.cancel();
-    Future currentFuture = future;
-    if (currentFuture != null) {
-      currentFuture.cancel(true);
-    }
     isCancelled = true;
+    decodeJob.cancel();
+    boolean isPendingJobRemoved =
+        diskCacheExecutor.remove(decodeJob) || sourceExecutor.remove(decodeJob);
     listener.onEngineJobCancelled(this, key);
+
+    if (isPendingJobRemoved) {
+      release(true /*isRemovedFromQueue*/);
+    }
   }
 
   // Exposed for testing.
@@ -131,11 +151,15 @@ boolean isCancelled() {
   }
 
   private void handleResultOnMainThread() {
+    stateVerifier.throwIfRecycled();
     if (isCancelled) {
       resource.recycle();
+      release(false /*isRemovedFromQueue*/);
       return;
     } else if (cbs.isEmpty()) {
       throw new IllegalStateException("Received a resource without any callbacks to notify");
+    } else if (hasResource) {
+      throw new IllegalStateException("Already have resource");
     }
     engineResource = engineResourceFactory.build(resource, isCacheable);
     hasResource = true;
@@ -148,34 +172,74 @@ private void handleResultOnMainThread() {
     for (ResourceCallback cb : cbs) {
       if (!isInIgnoredCallbacks(cb)) {
         engineResource.acquire();
-        cb.onResourceReady(engineResource);
+        cb.onResourceReady(engineResource, dataSource);
       }
     }
     // Our request is complete, so we can release the resource.
     engineResource.release();
+
+    release(false /*isRemovedFromQueue*/);
+  }
+
+  private void handleCancelledOnMainThread() {
+    stateVerifier.throwIfRecycled();
+    if (!isCancelled) {
+      throw new IllegalStateException("Not cancelled");
+    }
+    listener.onEngineJobCancelled(this, key);
+    release(false /*isRemovedFromQueue*/);
+  }
+
+  private void release(boolean isRemovedFromQueue) {
+    Util.assertMainThread();
+    cbs.clear();
+    key = null;
+    engineResource = null;
+    resource = null;
+    if (ignoredCallbacks != null) {
+      ignoredCallbacks.clear();
+    }
+    hasLoadFailed = false;
+    isCancelled = false;
+    hasResource = false;
+    decodeJob.release(isRemovedFromQueue);
+    decodeJob = null;
+    exception = null;
+    dataSource = null;
+    pool.release(this);
   }
 
   @Override
-  public void onResourceReady(Resource<R> resource) {
+  public void onResourceReady(Resource<R> resource, DataSource dataSource) {
     this.resource = resource;
+    this.dataSource = dataSource;
     MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, this).sendToTarget();
   }
 
   @Override
-  public void onLoadFailed() {
+  public void onLoadFailed(GlideException e) {
+    this.exception = e;
     MAIN_THREAD_HANDLER.obtainMessage(MSG_EXCEPTION, this).sendToTarget();
   }
 
   @Override
   public void reschedule(DecodeJob<?> job) {
-    future = sourceService.submit(job);
+    if (isCancelled) {
+      MAIN_THREAD_HANDLER.obtainMessage(MSG_CANCELLED, this).sendToTarget();
+    } else {
+      sourceExecutor.execute(job);
+    }
   }
 
   private void handleExceptionOnMainThread() {
+    stateVerifier.throwIfRecycled();
     if (isCancelled) {
+      release(false /*isRemovedFromQueue*/);
       return;
     } else if (cbs.isEmpty()) {
       throw new IllegalStateException("Received an exception without any callbacks to notify");
+    } else if (hasLoadFailed) {
+      throw new IllegalStateException("Already failed once");
     }
     hasLoadFailed = true;
 
@@ -183,9 +247,16 @@ private void handleExceptionOnMainThread() {
 
     for (ResourceCallback cb : cbs) {
       if (!isInIgnoredCallbacks(cb)) {
-        cb.onLoadFailed();
+        cb.onLoadFailed(exception);
       }
     }
+
+    release(false /*isRemovedFromQueue*/);
+  }
+
+  @Override
+  public StateVerifier getVerifier() {
+    return stateVerifier;
   }
 
   // Visible for testing.
@@ -199,17 +270,21 @@ private void handleExceptionOnMainThread() {
 
     @Override
     public boolean handleMessage(Message message) {
-      if (MSG_COMPLETE == message.what || MSG_EXCEPTION == message.what) {
-        EngineJob job = (EngineJob) message.obj;
-        if (MSG_COMPLETE == message.what) {
+      EngineJob job = (EngineJob) message.obj;
+      switch (message.what) {
+        case MSG_COMPLETE:
           job.handleResultOnMainThread();
-        } else {
+          break;
+        case MSG_EXCEPTION:
           job.handleExceptionOnMainThread();
-        }
-        return true;
+          break;
+        case MSG_CANCELLED:
+          job.handleCancelledOnMainThread();
+          break;
+        default:
+          throw new IllegalStateException("Unrecognized message: " + message.what);
       }
-
-      return false;
+      return true;
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java
index 4b5c2ba58..b458d3132 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKeyFactory.java
@@ -1,11 +1,18 @@
 package com.bumptech.glide.load.engine;
 
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.Transformation;
+
+import java.util.Map;
+
 class EngineKeyFactory {
 
   @SuppressWarnings("rawtypes")
-  public EngineKey buildKey(RequestContext<?, ?> requestContext, int width, int height) {
-    return new EngineKey(requestContext.getModel(), requestContext.getSignature(), width, height,
-        requestContext.getTransformations(), requestContext.getResourceClass(),
-        requestContext.getTranscodeClass(), requestContext.getOptions());
+  public EngineKey buildKey(Object model, Key signature, int width, int height,
+      Map<Class<?>, Transformation<?>> transformations, Class<?> resourceClass,
+      Class<?> transcodeClass, Options options) {
+    return new EngineKey(model, signature, width, height, transformations, resourceClass,
+        transcodeClass, options);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
index a52289176..5ae6da255 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
@@ -1,31 +1,231 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.Key;
+
+import java.io.IOException;
+import java.io.PrintStream;
+import java.io.PrintWriter;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 /**
- * Parent class thrown whenever a Glide load fails due to a recoverable error.
+ * An exception with zero or more causes indicating why a load in Glide failed.
  */
-public class GlideException extends Exception {
+public final class GlideException extends Exception {
+  private static final StackTraceElement[] EMPTY_ELEMENTS = new StackTraceElement[0];
 
-  private final GlideException previous;
+  private final List<Exception> causes;
+  private Key key;
+  private DataSource dataSource;
+  private Class<?> dataClass;
+
+  public GlideException(String message) {
+    this(message, Collections.<Exception>emptyList());
+  }
 
-  public GlideException(String detailMessage) {
-    this(detailMessage, null);
+  public GlideException(String detailMessage, Exception cause) {
+    this(detailMessage, Collections.singletonList(cause));
   }
 
-  public GlideException(String detailMessage, GlideException previous) {
+  public GlideException(String detailMessage, List<Exception> causes) {
     super(detailMessage);
-    this.previous = previous;
+    setStackTrace(EMPTY_ELEMENTS);
+    this.causes = causes;
+  }
+
+  void setLoggingDetails(Key key, DataSource dataSource) {
+    setLoggingDetails(key, dataSource, null);
+  }
+
+  void setLoggingDetails(Key key, DataSource dataSource, Class<?> dataClass) {
+    this.key = key;
+    this.dataSource = dataSource;
+    this.dataClass = dataClass;
+  }
+
+  @Override
+  public Throwable fillInStackTrace() {
+    // Avoid an expensive allocation by doing nothing here. Causes should contain all relevant
+    // stack traces.
+    return this;
+  }
+
+  /**
+   * Returns a list of causes that are immediate children of this exception.
+   *
+   * @see #getRootCauses().
+   *
+   * <p>Causes may or may not be {@link GlideException GlideExceptions}. Causes may also not be root
+   * causes, and in turn my have been caused by other failures.
+   */
+  public List<Exception> getCauses() {
+    return causes;
+  }
+
+  /**
+   * Returns the list of root causes that are the leaf nodes of all children of this exception.
+   *
+   * <p>Use this method to do things like look for http exceptions that indicate the load may have
+   * failed due to an error that can be retried. Keep in mind that because Glide may attempt to load
+   * a given model using multiple different pathways, there may be multiple related or unrelated
+   * reasons for a load to fail.
+   */
+  public List<Exception> getRootCauses() {
+    List<Exception> rootCauses = new ArrayList<>();
+    addRootCauses(this, rootCauses);
+    return rootCauses;
+  }
+
+  /**
+   * Logs all root causes using the given tag.
+   *
+   * <p>Each root cause is logged separately to avoid throttling. {@link #printStackTrace()} will
+   * provide a more succinct overview of why the exception occurred, although it does not include
+   * complete stack traces.
+   */
+  public void logRootCauses(String tag) {
+    Log.e(tag, getClass() + ": " + getMessage());
+    List<Exception> causes = getRootCauses();
+    for (int i = 0, size = causes.size(); i < size; i++) {
+      Log.i(tag, "Root cause (" + (i + 1) + " of " + size + ")", causes.get(i));
+    }
+  }
+
+  private void addRootCauses(Exception exception, List<Exception> rootCauses) {
+    if (exception instanceof GlideException) {
+      GlideException glideException = (GlideException) exception;
+      for (Exception e : glideException.getCauses()) {
+        addRootCauses(e, rootCauses);
+      }
+    } else {
+      rootCauses.add(exception);
+    }
   }
 
-  public GlideException(String detailMessage, Throwable cause) {
-    this(detailMessage, cause, null);
+  @Override
+  public void printStackTrace() {
+    printStackTrace(System.err);
   }
 
-  public GlideException(String detailMessage, Throwable cause, GlideException previous) {
-    super(detailMessage, cause);
-    this.previous = previous;
+  @Override
+  public void printStackTrace(PrintStream err) {
+    printStackTrace((Appendable) err);
   }
 
-  public GlideException getPrevious() {
-    return previous;
+  @Override
+  public void printStackTrace(PrintWriter err) {
+    printStackTrace((Appendable) err);
+  }
+
+  private void printStackTrace(Appendable appendable) {
+    appendExceptionMessage(this, appendable);
+    appendCauses(getCauses(), new IndentedAppendable(appendable));
+  }
+
+  @Override
+  public String getMessage() {
+    return super.getMessage()
+        + (dataClass != null ? ", " + dataClass : "")
+        + (dataSource != null ? ", " + dataSource : "")
+        + (key != null ? ", " + key : "");
+  }
+
+  // Appendable throws, PrintWriter, PrintStream, and IndentedAppendable do not, so this should
+  // never happen.
+  @SuppressWarnings("PMD.PreserveStackTrace")
+  private static void appendExceptionMessage(Exception e, Appendable appendable) {
+    try {
+      appendable.append(e.getClass().toString()).append(": ").append(e.getMessage()).append('\n');
+    } catch (IOException e1) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  // Appendable throws, PrintWriter, PrintStream, and IndentedAppendable do not, so this should
+  // never happen.
+  @SuppressWarnings("PMD.PreserveStackTrace")
+  private static void appendCauses(List<Exception> causes, Appendable appendable) {
+    try {
+      appendCausesWrapped(causes, appendable);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  @SuppressWarnings("ThrowableResultOfMethodCallIgnored")
+  private static void appendCausesWrapped(List<Exception> causes, Appendable appendable)
+      throws IOException {
+    int size = causes.size();
+    for (int i = 0; i < size; i++) {
+      appendable.append("Cause (")
+          .append(String.valueOf(i + 1))
+          .append(" of ")
+          .append(String.valueOf(size))
+          .append("): ");
+
+      Exception cause = causes.get(i);
+      if (cause instanceof GlideException) {
+        GlideException glideCause = (GlideException) cause;
+        glideCause.printStackTrace(appendable);
+      } else {
+        appendExceptionMessage(cause, appendable);
+      }
+    }
+  }
+
+  private static final class IndentedAppendable implements Appendable {
+    private static final String EMPTY_SEQUENCE = "";
+    private static final String INDENT = "  ";
+    private final Appendable appendable;
+    private boolean printedNewLine = true;
+
+    IndentedAppendable(Appendable appendable) {
+      this.appendable = appendable;
+    }
+
+    @Override
+    public Appendable append(char c) throws IOException {
+      if (printedNewLine) {
+        printedNewLine = false;
+        appendable.append(INDENT);
+      }
+      printedNewLine = c == '\n';
+      appendable.append(c);
+      return this;
+    }
+
+    @Override
+    public Appendable append(@Nullable CharSequence charSequence) throws IOException {
+      charSequence = safeSequence(charSequence);
+      return append(charSequence, 0, charSequence.length());
+    }
+
+    @Override
+    public Appendable append(@Nullable CharSequence charSequence, int start, int end)
+        throws IOException {
+      charSequence = safeSequence(charSequence);
+      if (printedNewLine) {
+        printedNewLine = false;
+        appendable.append(INDENT);
+      }
+      printedNewLine = charSequence.length() > 0 && charSequence.charAt(end - 1) == '\n';
+      appendable.append(charSequence, start, end);
+      return this;
+    }
+
+    @NonNull
+    private CharSequence safeSequence(@Nullable CharSequence sequence) {
+      if (sequence == null) {
+        return EMPTY_SEQUENCE;
+      } else {
+        return sequence;
+      }
+    }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java b/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
index 3131ad5cc..4df0cc8ed 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
@@ -1,9 +1,12 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.v4.util.Pools.Pool;
+
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataRewinder;
 import com.bumptech.glide.util.Preconditions;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -20,33 +23,51 @@
  */
 public class LoadPath<Data, ResourceType, Transcode> {
   private final Class<Data> dataClass;
+  private final Pool<List<Exception>> listPool;
   private final List<? extends DecodePath<Data, ResourceType, Transcode>> decodePaths;
+  private final String failureMessage;
 
-  public LoadPath(Class<Data> dataClass,
-      List<DecodePath<Data, ResourceType, Transcode>> decodePaths) {
+  public LoadPath(Class<Data> dataClass, Class<ResourceType> resourceClass,
+      Class<Transcode> transcodeClass,
+      List<DecodePath<Data, ResourceType, Transcode>> decodePaths, Pool<List<Exception>> listPool) {
     this.dataClass = dataClass;
+    this.listPool = listPool;
     this.decodePaths = Preconditions.checkNotEmpty(decodePaths);
+    failureMessage = "Failed LoadPath{" + dataClass.getSimpleName() + "->"
+        + resourceClass.getSimpleName() + "->" + transcodeClass.getSimpleName() + "}";
   }
 
-  public Resource<Transcode> load(Data data, RequestContext<?, Transcode> context,
-      int width, int height, DecodePath.DecodeCallback<ResourceType> decodeCallback) {
-    Preconditions.checkNotNull(data);
+  public Resource<Transcode> load(DataRewinder<Data> rewinder, Options options, int width,
+      int height, DecodePath.DecodeCallback<ResourceType> decodeCallback) throws GlideException {
+    List<Exception> exceptions = listPool.acquire();
+    try {
+      return loadWithExceptionList(rewinder, options, width, height, decodeCallback, exceptions);
+    } finally {
+      listPool.release(exceptions);
+    }
+  }
 
+  private Resource<Transcode> loadWithExceptionList(DataRewinder<Data> rewinder, Options options,
+      int width, int height, DecodePath.DecodeCallback<ResourceType> decodeCallback,
+      List<Exception> exceptions) throws GlideException {
+    int size = decodePaths.size();
     Resource<Transcode> result = null;
-    Options options = context.getOptions();
-    DataRewinder<Data> rewinder = context.getRewinder(data);
-    try {
-      int size = decodePaths.size();
-      for (int i = 0; i < size; i++) {
-        DecodePath<Data, ResourceType, Transcode> path = decodePaths.get(i);
+    for (int i = 0; i < size; i++) {
+      DecodePath<Data, ResourceType, Transcode> path = decodePaths.get(i);
+      try {
         result = path.decode(rewinder, width, height, options, decodeCallback);
-        if (result != null) {
-          break;
-        }
+      } catch (GlideException e) {
+        exceptions.add(e);
+      }
+      if (result != null) {
+        break;
       }
-    } finally {
-      rewinder.cleanup();
     }
+
+    if (result == null) {
+      throw new GlideException(failureMessage, new ArrayList<>(exceptions));
+    }
+
     return result;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
new file mode 100644
index 000000000..3e21cc186
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
@@ -0,0 +1,91 @@
+package com.bumptech.glide.load.engine;
+
+import android.support.v4.util.Pools;
+
+import com.bumptech.glide.util.pool.FactoryPools;
+import com.bumptech.glide.util.pool.StateVerifier;
+
+/**
+ * A resource that defers any calls to {@link Resource#recycle()} until after {@link #unlock()} is
+ * called.
+ *
+ * <p>If the resource was recycled prior to {@link #unlock()}, then {@link #unlock()} will also
+ * recycle the resource.
+ */
+final class LockedResource<Z> implements Resource<Z>,
+    FactoryPools.Poolable {
+  private static final Pools.Pool<LockedResource<?>> POOL = FactoryPools.threadSafe(20,
+      new FactoryPools.Factory<LockedResource<?>>() {
+        @Override
+        public LockedResource<?> create() {
+          return new LockedResource<Object>();
+        }
+      });
+  private final StateVerifier stateVerifier = StateVerifier.newInstance();
+  private Resource<Z> toWrap;
+  private boolean isLocked;
+  private boolean isRecycled;
+
+  @SuppressWarnings("unchecked")
+  static <Z> LockedResource<Z> obtain(Resource<Z> resource) {
+    LockedResource<Z> result = (LockedResource<Z>) POOL.acquire();
+    result.init(resource);
+    return result;
+  }
+
+  private LockedResource() { }
+
+  private void init(Resource<Z> toWrap) {
+    isRecycled = false;
+    isLocked = true;
+    this.toWrap = toWrap;
+  }
+
+  private void release() {
+    toWrap = null;
+    POOL.release(this);
+  }
+
+  public synchronized void unlock() {
+    stateVerifier.throwIfRecycled();
+
+    if (!isLocked) {
+      throw new IllegalStateException("Already unlocked");
+    }
+    this.isLocked = false;
+    if (isRecycled) {
+      recycle();
+    }
+  }
+
+  @Override
+  public Class<Z> getResourceClass() {
+    return toWrap.getResourceClass();
+  }
+
+  @Override
+  public Z get() {
+    return toWrap.get();
+  }
+
+  @Override
+  public int getSize() {
+    return toWrap.getSize();
+  }
+
+  @Override
+  public synchronized void recycle() {
+    stateVerifier.throwIfRecycled();
+
+    this.isRecycled = true;
+    if (!isLocked) {
+      toWrap.recycle();
+      release();
+    }
+  }
+
+  @Override
+  public StateVerifier getVerifier() {
+    return stateVerifier;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java b/library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java
deleted file mode 100644
index e36b2a41b..000000000
--- a/library/src/main/java/com/bumptech/glide/load/engine/RequestContext.java
+++ /dev/null
@@ -1,231 +0,0 @@
-package com.bumptech.glide.load.engine;
-
-import android.content.ContextWrapper;
-import android.graphics.drawable.Drawable;
-
-import com.bumptech.glide.GlideContext;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.Registry;
-import com.bumptech.glide.load.Encoder;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Options;
-import com.bumptech.glide.load.ResourceEncoder;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.data.DataRewinder;
-import com.bumptech.glide.load.model.ModelLoader;
-import com.bumptech.glide.load.model.ModelLoader.LoadData;
-import com.bumptech.glide.request.BaseRequestOptions;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Context for individual requests and decodes that contains and exposes classes necessary to
- * obtain, decode, and encode resources.
- *
- * @param <Model> the type of model used to load resources by this object.
- * @param <TranscodeClass> The type of resources returned using classes from this object.
- */
-public class RequestContext<Model, TranscodeClass> extends ContextWrapper {
-  private static final int UNSET = -1;
-  private final GlideContext glideContext;
-  private final Model model;
-  private final Class<TranscodeClass> transcodeClass;
-  private final BaseRequestOptions<?> requestOptions;
-  private final Priority priority;
-  private final int overrideWidth;
-  private final int overrideHeight;
-  private Drawable errorDrawable;
-  private Drawable placeholderDrawable;
-  private Drawable fallbackDrawable;
-  private int width = UNSET;
-  private int height = UNSET;
-  private List<Key> cacheKeys;
-  private List<LoadData<?>> loadData;
-
-  public RequestContext(GlideContext glideContext, Model model,
-      Class<TranscodeClass> transcodeClass, BaseRequestOptions<?> requestOptions, Priority priority,
-      int overrideWidth, int overrideHeight) {
-    super(glideContext);
-    this.glideContext = glideContext;
-    this.model = model;
-    this.transcodeClass = transcodeClass;
-    this.requestOptions = requestOptions;
-    this.priority = priority;
-    this.overrideWidth = overrideWidth;
-    this.overrideHeight = overrideHeight;
-  }
-
-  <Data> LoadPath<Data, ?, TranscodeClass> getLoadPath(Class<Data> dataClass) {
-    return glideContext.getRegistry().getLoadPath(dataClass, getResourceClass(), transcodeClass);
-  }
-
-  synchronized void setDimens(int width, int height) {
-    this.width = width;
-    this.height = height;
-  }
-
-  synchronized List<Key> getCacheKeys() {
-    collectKeys();
-    return cacheKeys;
-  }
-
-  synchronized boolean isSourceKey(Key key) {
-    List<LoadData<?>> loadData = getLoadData();
-    int size = loadData.size();
-    for (int i = 0; i < size; i++) {
-      LoadData<?> current = loadData.get(i);
-      if (current.sourceKey.equals(key)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
-  private synchronized void collectKeys() {
-    if (cacheKeys == null) {
-      List<LoadData<?>> loadData = getLoadData();
-      List<Key> cacheKeys = new ArrayList<>(loadData.size());
-
-      int size = loadData.size();
-      for (int i = 0; i < size; i++) {
-        ModelLoader.LoadData<?> data = loadData.get(i);
-        cacheKeys.add(data.sourceKey);
-        cacheKeys.addAll(data.alternateKeys);
-      }
-      this.cacheKeys = cacheKeys;
-    }
-  }
-
-  synchronized List<LoadData<?>> getLoadData() {
-    if (width == UNSET || height == UNSET) {
-      throw new IllegalStateException("Width and/or height are unset.");
-    }
-    if (loadData == null) {
-      List<ModelLoader<Model, ?>> modelLoaders = glideContext.getRegistry().getModelLoaders(model);
-      loadData = new ArrayList<>(modelLoaders.size());
-      int size = modelLoaders.size();
-      for (int i = 0; i < size; i++) {
-        ModelLoader<Model, ?> modelLoader = modelLoaders.get(i);
-        LoadData<?> current =
-            modelLoader.buildLoadData(model, width, height, requestOptions.getOptions());
-        if (current != null) {
-          loadData.add(current);
-        }
-      }
-    }
-    return loadData;
-  }
-
-  Key getSignature() {
-    return requestOptions.getSignature();
-  }
-
-  List<Class<?>> getRegisteredResourceClasses() {
-    return glideContext.getRegistry()
-        .getRegisteredResourceClasses(model.getClass(), requestOptions.getResourceClass());
-  }
-
-  Class<?> getResourceClass() {
-    return requestOptions.getResourceClass();
-  }
-
-  <DecodedResource> Transformation<DecodedResource> getTransformation(
-      Class<DecodedResource> decodedResourceClass) {
-    return requestOptions.getTransformation(decodedResourceClass);
-  }
-
-  Map<Class<?>, Transformation<?>> getTransformations() {
-    return requestOptions.getTransformations();
-  }
-
-  Options getOptions() {
-    return requestOptions.getOptions();
-  }
-
-  boolean isMemoryCacheable() {
-    return requestOptions.isMemoryCacheable();
-  }
-
-  DiskCacheStrategy getDiskCacheStrategy() {
-    return requestOptions.getDiskCacheStrategy();
-  }
-
-  Priority getPriority() {
-    return priority;
-  }
-
-  <X> DataRewinder<X> getRewinder(X data) {
-    return glideContext.getRegistry().getRewinder(data);
-  }
-
-  boolean isResourceEncoderAvailable(Resource<?> resource) {
-    return glideContext.getRegistry().isResourceEncoderAvailable(resource);
-  }
-
-  <ResourceClass> ResourceEncoder<ResourceClass> getResultEncoder(Resource<ResourceClass> resource)
-      throws Registry.NoResultEncoderAvailableException {
-    return glideContext.getRegistry().getResultEncoder(resource);
-  }
-
-  <X> Encoder<X> getSourceEncoder(X data) throws Registry.NoSourceEncoderAvailableException {
-    return glideContext.getRegistry().getSourceEncoder(data);
-  }
-
-  List<ModelLoader<File, ?>> getModelLoaders(File file)
-      throws Registry.NoModelLoaderAvailableException {
-    return glideContext.getRegistry().getModelLoaders(file);
-  }
-
-  public int getOverrideWidth() {
-    return overrideWidth;
-  }
-
-  public int getOverrideHeight() {
-    return overrideHeight;
-  }
-
-  public Model getModel() {
-    return model;
-  }
-
-  public Class<TranscodeClass> getTranscodeClass() {
-    return transcodeClass;
-  }
-
-  public float getSizeMultiplier() {
-    return requestOptions.getSizeMultiplier();
-  }
-
-  public Drawable getErrorDrawable() {
-    if (errorDrawable == null) {
-      errorDrawable = requestOptions.getErrorPlaceholder();
-      if (errorDrawable == null && requestOptions.getErrorId() > 0) {
-        errorDrawable = getResources().getDrawable(requestOptions.getErrorId());
-      }
-    }
-    return errorDrawable;
-  }
-
-  public Drawable getPlaceholderDrawable() {
-     if (placeholderDrawable == null) {
-      placeholderDrawable = requestOptions.getPlaceholderDrawable();
-      if (placeholderDrawable == null && requestOptions.getPlaceholderId() > 0) {
-        placeholderDrawable = getResources().getDrawable(requestOptions.getPlaceholderId());
-      }
-    }
-    return placeholderDrawable;
-  }
-
-  public Drawable getFallbackDrawable() {
-    if (fallbackDrawable == null) {
-      fallbackDrawable = requestOptions.getFallbackDrawable();
-      if (fallbackDrawable == null && requestOptions.getFallbackId() > 0) {
-        fallbackDrawable = getResources().getDrawable(requestOptions.getFallbackId());
-      }
-    }
-    return fallbackDrawable;
-  }
-}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 5123228a8..65c0decd0 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -4,8 +4,8 @@
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.data.DataFetcher;
-import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.model.ModelLoader;
+import com.bumptech.glide.load.model.ModelLoader.LoadData;
 
 import java.io.File;
 import java.util.List;
@@ -17,36 +17,30 @@
 class ResourceCacheGenerator implements DataFetcherGenerator,
     DataFetcher.DataCallback<Object> {
 
-  private final int width;
-  private final int height;
-  private final DiskCache diskCache;
-  private final RequestContext<?, ?> requestContext;
   private final FetcherReadyCallback cb;
+  private final DecodeHelper<?> helper;
 
   private int sourceIdIndex = 0;
   private int resourceClassIndex = -1;
   private Key sourceKey;
   private List<ModelLoader<File, ?>> modelLoaders;
   private int modelLoaderIndex;
-  private volatile DataFetcher<?> fetcher;
+  private volatile LoadData<?> loadData;
   // PMD is wrong here, this File must be an instance variable because it may be used across
   // multiple calls to startNext.
   @SuppressWarnings("PMD.SingularField")
   private File cacheFile;
+  private ResourceCacheKey currentKey;
 
-  public ResourceCacheGenerator(int width, int height, DiskCache diskCache,
-      RequestContext<?, ?> requestContext, FetcherReadyCallback cb) {
-    this.width = width;
-    this.height = height;
-    this.diskCache = diskCache;
-    this.requestContext = requestContext;
+  public ResourceCacheGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
+    this.helper = helper;
     this.cb = cb;
   }
 
   @Override
   public boolean startNext() {
-    List<Key> sourceIds = requestContext.getCacheKeys();
-    List<Class<?>> resourceClasses = requestContext.getRegisteredResourceClasses();
+    List<Key> sourceIds = helper.getCacheKeys();
+    List<Class<?>> resourceClasses = helper.getRegisteredResourceClasses();
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;
       if (resourceClassIndex >= resourceClasses.size()) {
@@ -59,29 +53,32 @@ public boolean startNext() {
 
       Key sourceId = sourceIds.get(sourceIdIndex);
       Class<?> resourceClass = resourceClasses.get(resourceClassIndex);
-      Transformation<?> transformation = requestContext.getTransformation(resourceClass);
+      Transformation<?> transformation = helper.getTransformation(resourceClass);
 
-      Key key = new ResourceCacheKey(sourceId, requestContext.getSignature(), width, height,
-          transformation, resourceClass, requestContext.getOptions());
-      cacheFile = diskCache.get(key);
+      currentKey = new ResourceCacheKey(sourceId, helper.getSignature(), helper.getWidth(),
+          helper.getHeight(), transformation, resourceClass, helper.getOptions());
+      cacheFile = helper.getDiskCache().get(currentKey);
       if (cacheFile != null) {
         this.sourceKey = sourceId;
-        modelLoaders = requestContext.getModelLoaders(cacheFile);
+        modelLoaders = helper.getModelLoaders(cacheFile);
         modelLoaderIndex = 0;
       }
     }
 
-    fetcher = null;
-    while (fetcher == null && hasNextModelLoader()) {
+    loadData = null;
+    boolean started = false;
+    while (!started && hasNextModelLoader()) {
       ModelLoader<File, ?> modelLoader = modelLoaders.get(modelLoaderIndex++);
-      fetcher =
-          modelLoader.buildLoadData(cacheFile, width, height, requestContext.getOptions()).fetcher;
-      if (fetcher != null) {
-        fetcher.loadData(requestContext.getPriority(), this);
+      loadData =
+          modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),
+              helper.getOptions());
+      if (loadData != null && helper.hasLoadPath(loadData.fetcher.getDataClass())) {
+        started = true;
+        loadData.fetcher.loadData(helper.getPriority(), this);
       }
     }
 
-    return fetcher != null;
+    return started;
   }
 
   private boolean hasNextModelLoader() {
@@ -90,14 +87,20 @@ private boolean hasNextModelLoader() {
 
   @Override
   public void cancel() {
-    DataFetcher<?> local = fetcher;
+    LoadData<?> local = loadData;
     if (local != null) {
-      local.cancel();
+      local.fetcher.cancel();
     }
   }
 
   @Override
   public void onDataReady(Object data) {
-    cb.onDataFetcherReady(sourceKey, data, fetcher, DataSource.RESOURCE_DISK_CACHE);
+    cb.onDataFetcherReady(sourceKey, data, loadData.fetcher, DataSource.RESOURCE_DISK_CACHE,
+        currentKey);
+  }
+
+  @Override
+  public void onLoadFailed(Exception e) {
+    cb.onDataFetcherFailed(currentKey, e, loadData.fetcher, DataSource.RESOURCE_DISK_CACHE);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
index 40455de23..275ea1b06 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
@@ -2,18 +2,15 @@
 
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.data.DataFetcher;
-import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoader.LoadData;
 import com.bumptech.glide.util.LogTime;
 
 import java.util.Collections;
-import java.util.List;
 
 /**
  * Generates {@link com.bumptech.glide.load.data.DataFetcher DataFetchers} from original source data
@@ -23,68 +20,66 @@
  * <p> Depending on the disk cache strategy, source data may first be written to disk and then
  * loaded from the cache file rather than returned directly. </p>
  */
-class SourceGenerator<Model> implements DataFetcherGenerator,
+class SourceGenerator implements DataFetcherGenerator,
     DataFetcher.DataCallback<Object>,
     DataFetcherGenerator.FetcherReadyCallback {
+  private static final String TAG = "SourceGenerator";
 
-  private final int width;
-  private final int height;
-  private final RequestContext<Model, ?> requestContext;
-  private final DiskCache diskCache;
+  private final DecodeHelper<?> helper;
   private final FetcherReadyCallback cb;
-  private final List<LoadData<?>> loadDataList;
 
   private int loadDataListIndex;
   private DataCacheGenerator sourceCacheGenerator;
   private Object dataToCache;
   private volatile ModelLoader.LoadData<?> loadData;
+  private DataCacheKey originalKey;
 
-  public SourceGenerator(int width, int height, RequestContext<Model, ?> requestContext,
-      DiskCache diskCache, FetcherReadyCallback cb) {
-    this.width = width;
-    this.height = height;
-    this.requestContext = requestContext;
-    this.diskCache = diskCache;
+  public SourceGenerator(DecodeHelper<?> helper, FetcherReadyCallback cb) {
+    this.helper = helper;
     this.cb = cb;
-
-    loadDataList = requestContext.getLoadData();
   }
 
   @Override
   public boolean startNext() {
     if (dataToCache != null) {
-      cacheData();
+      Object data = dataToCache;
       dataToCache = null;
+      cacheData(data);
     }
+
     if (sourceCacheGenerator != null && sourceCacheGenerator.startNext()) {
       return true;
     }
     sourceCacheGenerator = null;
 
     loadData = null;
-    while (loadData == null && hasNextModelLoader()) {
-      loadData = loadDataList.get(loadDataListIndex++);
-      if (loadData != null) {
-        loadData.fetcher.loadData(requestContext.getPriority(), this);
+    boolean started = false;
+    while (!started && hasNextModelLoader()) {
+      loadData = helper.getLoadData().get(loadDataListIndex++);
+      if (loadData != null
+          && (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())
+          || helper.hasLoadPath(loadData.fetcher.getDataClass()))) {
+        started = true;
+        loadData.fetcher.loadData(helper.getPriority(), this);
       }
     }
-    return loadData != null;
+    return started;
   }
 
   private boolean hasNextModelLoader() {
-    return loadDataListIndex < loadDataList.size();
+    return loadDataListIndex < helper.getLoadData().size();
   }
 
-  private void cacheData() {
+  private void cacheData(Object dataToCache) {
     long startTime = LogTime.getLogTime();
     try {
-      Encoder<Object> encoder = requestContext.getSourceEncoder(dataToCache);
+      Encoder<Object> encoder = helper.getSourceEncoder(dataToCache);
       DataCacheWriter<Object> writer =
-          new DataCacheWriter<>(encoder, dataToCache, requestContext.getOptions());
-      Key originalKey = new DataCacheKey(loadData.sourceKey, requestContext.getSignature());
-      diskCache.put(originalKey, writer);
-      if (Logs.isEnabled(Log.VERBOSE)) {
-        Logs.log(Log.VERBOSE, "Finished encoding source to cache"
+          new DataCacheWriter<>(encoder, dataToCache, helper.getOptions());
+      originalKey = new DataCacheKey(loadData.sourceKey, helper.getSignature());
+      helper.getDiskCache().put(originalKey, writer);
+      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        Log.v(TAG, "Finished encoding source to cache"
             + ", key: " + originalKey
             + ", data: " + dataToCache
             + ", encoder: " + encoder
@@ -95,8 +90,7 @@ private void cacheData() {
     }
 
     sourceCacheGenerator =
-        new DataCacheGenerator(Collections.singletonList(loadData.sourceKey), width, height,
-            diskCache, requestContext, this);
+        new DataCacheGenerator(Collections.singletonList(loadData.sourceKey), helper, this);
   }
 
   @Override
@@ -109,7 +103,7 @@ public void cancel() {
 
   @Override
   public void onDataReady(Object data) {
-    DiskCacheStrategy diskCacheStrategy = requestContext.getDiskCacheStrategy();
+    DiskCacheStrategy diskCacheStrategy = helper.getDiskCacheStrategy();
     if (data != null && diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) {
       dataToCache = data;
       // We might be being called back on someone else's thread. Before doing anything, we should
@@ -117,10 +111,15 @@ public void onDataReady(Object data) {
       cb.reschedule();
     } else {
       cb.onDataFetcherReady(loadData.sourceKey, data, loadData.fetcher,
-          loadData.fetcher.getDataSource());
+          loadData.fetcher.getDataSource(), originalKey);
     }
   }
 
+  @Override
+  public void onLoadFailed(Exception e) {
+    cb.onDataFetcherFailed(originalKey, e, loadData.fetcher, loadData.fetcher.getDataSource());
+  }
+
   @Override
   public void reschedule() {
     // We don't expect this to happen, although if we ever need it to we can delegate to our
@@ -131,9 +130,15 @@ public void reschedule() {
   // Called from source cache generator.
   @Override
   public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,
-      DataSource dataSource) {
+      DataSource dataSource, Key attemptedKey) {
     // This data fetcher will be loading from a File and provide the wrong data source, so override
     // with the data source of the original fetcher
-    cb.onDataFetcherReady(sourceKey, data, fetcher, loadData.fetcher.getDataSource());
+    cb.onDataFetcherReady(sourceKey, data, fetcher, loadData.fetcher.getDataSource(), sourceKey);
+  }
+
+  @Override
+  public void onDataFetcherFailed(Key sourceKey, Exception e, DataFetcher<?> fetcher,
+      DataSource dataSource) {
+    cb.onDataFetcherFailed(sourceKey, e, fetcher, loadData.fetcher.getDataSource());
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java
new file mode 100644
index 000000000..048a43247
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayAdapterInterface.java
@@ -0,0 +1,32 @@
+package com.bumptech.glide.load.engine.bitmap_recycle;
+/**
+ * Interface for handling operations on a primitive array type.
+ * @param <T> Array type (eg byte[], int[])
+ */
+public interface ArrayAdapterInterface<T> {
+
+  /**
+   * TAG for logging.
+   */
+  String getTag();
+
+  /**
+   * Return the length of the given array.
+   */
+  int getArrayLength(T array);
+
+  /**
+   * Reset the array for re-use (e.g. set all values to 0).
+   */
+  void resetArray(T array);
+
+  /**
+   * Allocate and return an array of the specified size.
+   */
+  T newArray(int length);
+
+  /**
+   * Return the size of an element in the array in bytes (e.g. for int return 4).
+   */
+  int getElementSizeInBytes();
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
new file mode 100644
index 000000000..a945ca874
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ArrayPool.java
@@ -0,0 +1,33 @@
+package com.bumptech.glide.load.engine.bitmap_recycle;
+
+/**
+ * Interface for an array pool that pools arrays of different types.
+ */
+public interface ArrayPool {
+  /**
+   * Optionally adds the given array of the given type to the pool.
+   *
+   * <p>Arrays may be ignored, for example if the array is larger than the maximum size of the
+   * pool.
+   */
+  <T> void put(T array, Class<T> arrayClass);
+
+  /**
+   * Returns a non-null array of the given type with a length >= to the given size.
+   *
+   * <p>If an array of the given size isn't in the pool, a new one will be allocated.
+   */
+  <T> T get(int size, Class<T> arrayClass);
+  /**
+   * Clears all arrays from the pool.
+   */
+  void clearMemory();
+
+  /**
+   * Trims the size to the appropriate level.
+   *
+   * @param level A trim specified in {@link android.content.ComponentCallbacks2}.
+   */
+  void trimMemory(int level);
+
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
index 4671340d5..3fecc0360 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPool.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 /**
  * An interface for a pool that allows users to reuse {@link android.graphics.Bitmap} objects.
@@ -13,8 +14,8 @@
   int getMaxSize();
 
   /**
-   * Multiplies the initial size of the pool by the given multipler to dynamically and synchronously
-   * allow users to adjust the size of the pool.
+   * Multiplies the initial size of the pool by the given multiplier to dynamically and
+   * synchronously allow users to adjust the size of the pool.
    *
    * <p> If the current total size of the pool is larger than the max size after the given
    * multiplier is applied, {@link Bitmap}s should be evicted until the pool is smaller than the new
@@ -25,27 +26,23 @@
   void setSizeMultiplier(float sizeMultiplier);
 
   /**
-   * Adds the given {@link android.graphics.Bitmap} and returns {@code true} if the {@link
-   * android.graphics.Bitmap} was eligible to be added and {@code false} otherwise.
+   * Adds the given {@link android.graphics.Bitmap} if it is eligible to be re-used and the pool
+   * can fit it, or calls {@link Bitmap#recycle()} on the Bitmap and discards it.
    *
-   * <p> Note - If the {@link android.graphics.Bitmap} is rejected (this method returns false) then
-   * it is the caller's responsibility to call {@link android.graphics.Bitmap#recycle()}. </p>
-   *
-   * <p> Note - This method will return {@code true} if the given {@link android.graphics.Bitmap} is
-   * synchronously evicted after being accepted. The only time this method will return {@code false}
-   * is if the {@link android.graphics.Bitmap} is not eligible to be added to the pool (either it is
-   * not mutable or it is larger than the max pool size). </p>
+   * <p> Callers must <em>not</em> continue to use the Bitmap after calling this method. </p>
    *
    * @param bitmap The {@link android.graphics.Bitmap} to attempt to add.
    * @see android.graphics.Bitmap#isMutable()
    * @see android.graphics.Bitmap#recycle()
    */
-  boolean put(Bitmap bitmap);
+  void put(Bitmap bitmap);
 
   /**
    * Returns a {@link android.graphics.Bitmap} of exactly the given width, height, and
-   * configuration, and containing only transparent pixels or null if no such {@link
-   * android.graphics.Bitmap} could be obtained from the pool.
+   * configuration, and containing only transparent pixels.
+   *
+   * <p> If no Bitmap with the requested attributes is present in the pool, a new one will be
+   * allocated. </p>
    *
    * <p> Because this method erases all pixels in the {@link Bitmap}, this method is slightly slower
    * than {@link #getDirty(int, int, android.graphics.Bitmap.Config)}. If the {@link
@@ -68,12 +65,15 @@
    *               android.graphics.Bitmap}.
    * @see #getDirty(int, int, android.graphics.Bitmap.Config)
    */
+  @NonNull
   Bitmap get(int width, int height, Bitmap.Config config);
 
   /**
    * Identical to {@link #get(int, int, android.graphics.Bitmap.Config)} except that any returned
-   * non-null {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain
-   * random data.
+   * {@link android.graphics.Bitmap} may <em>not</em> have been erased and may contain random data.
+   *
+   * <p>If no Bitmap with the requested attributes is present in the pool, a new one will be
+   * allocated. </p>
    *
    * <p> Although this method is slightly more efficient than {@link #get(int, int,
    * android.graphics.Bitmap.Config)} it should be used with caution and only when the caller is
@@ -89,6 +89,7 @@
    * could be obtained from the pool.
    * @see #get(int, int, android.graphics.Bitmap.Config)
    */
+  @NonNull
   Bitmap getDirty(int width, int height, Bitmap.Config config);
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
index e441edc7b..af72c1b82 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/BitmapPoolAdapter.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 /**
  * An {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool BitmapPool} implementation
@@ -19,18 +20,20 @@ public void setSizeMultiplier(float sizeMultiplier) {
   }
 
   @Override
-  public boolean put(Bitmap bitmap) {
-    return false;
+  public void put(Bitmap bitmap) {
+    bitmap.recycle();
   }
 
+  @NonNull
   @Override
   public Bitmap get(int width, int height, Bitmap.Config config) {
-    return null;
+    return Bitmap.createBitmap(width, height, config);
   }
 
+  @NonNull
   @Override
   public Bitmap getDirty(int width, int height, Bitmap.Config config) {
-    return null;
+    return get(width, height, config);
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java
new file mode 100644
index 000000000..910dee2f0
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayAdapter.java
@@ -0,0 +1,35 @@
+package com.bumptech.glide.load.engine.bitmap_recycle;
+
+import java.util.Arrays;
+
+/**
+ * Adapter for handling primitive byte arrays.
+ */
+public final class ByteArrayAdapter implements ArrayAdapterInterface<byte[]> {
+  private static final String TAG = "ByteArrayPool";
+
+  @Override
+  public String getTag() {
+    return TAG;
+  }
+
+  @Override
+  public int getArrayLength(byte[] array) {
+    return array.length;
+  }
+
+  @Override
+  public void resetArray(byte[] array) {
+    Arrays.fill(array, (byte) 0);
+  }
+
+  @Override
+  public byte[] newArray(int length) {
+    return new byte[length];
+  }
+
+  @Override
+  public int getElementSizeInBytes() {
+    return 1;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java
index 0213653b8..df88773ff 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/ByteArrayPool.java
@@ -2,6 +2,7 @@
 
 /**
  * Pool containing byte[] arrays of various sizes.
+ * TODO: this should be replaced with an ArrayPool
  */
 public interface ByteArrayPool {
   /**
@@ -24,16 +25,4 @@
    * <p>If an array of the given size isn't in the pool, a new one will be allocated.
    */
   byte[] get(int size);
-
-  /**
-   * Clears all byte arrays from the pool.
-   */
-  void clearMemory();
-
-  /**
-   * Trims the size to the appropriate level.
-   *
-   * @param level A trim specified in {@link android.content.ComponentCallbacks2}.
-   */
-  void trimMemory(int level);
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
index ae74906ca..ea29e42ad 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMap.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
+import android.support.annotation.Nullable;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -33,6 +35,7 @@ public void put(K key, V value) {
     entry.add(value);
   }
 
+  @Nullable
   public V get(K key) {
     LinkedEntry<K, V> entry = keyToEntry.get(key);
     if (entry == null) {
@@ -47,6 +50,7 @@ public V get(K key) {
     return entry.removeLast();
   }
 
+  @Nullable
   public V removeLast() {
     LinkedEntry<K, V> last = head.prev;
 
@@ -132,6 +136,7 @@ public LinkedEntry(K key) {
       this.key = key;
     }
 
+    @Nullable
     public V removeLast() {
       final int valueSize = size();
       return valueSize > 0 ? values.remove(valueSize - 1) : null;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java
new file mode 100644
index 000000000..b0a563c21
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/IntegerArrayAdapter.java
@@ -0,0 +1,35 @@
+package com.bumptech.glide.load.engine.bitmap_recycle;
+
+import java.util.Arrays;
+
+/**
+ * Adapter for handling primitive int arrays.
+ */
+public final class IntegerArrayAdapter implements ArrayAdapterInterface<int[]> {
+  private static final String TAG = "IntegerArrayPool";
+
+  @Override
+  public String getTag() {
+    return TAG;
+  }
+
+  @Override
+  public int getArrayLength(int[] array) {
+    return array.length;
+  }
+
+  @Override
+  public void resetArray(int[] array) {
+    Arrays.fill(array, 0);
+  }
+
+  @Override
+  public int[] newArray(int length) {
+    return new int[length];
+  }
+
+  @Override
+  public int getElementSizeInBytes() {
+    return 4;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
new file mode 100644
index 000000000..10f17c25f
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
@@ -0,0 +1,252 @@
+package com.bumptech.glide.load.engine.bitmap_recycle;
+
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.bumptech.glide.util.Preconditions;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.NavigableMap;
+import java.util.TreeMap;
+
+/**
+ * A fixed size Array Pool that evicts arrays using an LRU strategy to keep the pool under
+ * the maximum byte size.
+ */
+public final class LruArrayPool implements ArrayPool {
+
+  /**
+   * The maximum number of times larger an int array may be to be than a requested size to eligble
+   * to be returned from the pool.
+   */
+  private static final int MAX_OVER_SIZE_MULTIPLE = 8;
+  /** Used to calculate the maximum % of the total pool size a single byte array may consume. */
+  private static final int SINGLE_ARRAY_MAX_SIZE_DIVISOR = 2;
+
+  private final GroupedLinkedMap<Key, Object> groupedMap = new GroupedLinkedMap<>();
+  private final KeyPool keyPool = new KeyPool();
+  private final Map<Class, NavigableMap<Integer, Integer>> sortedSizes = new HashMap<>();
+  private final Map<Class, ArrayAdapterInterface> adapters = new HashMap<>();
+  private final int maxSize;
+  private int currentSize;
+
+  /**
+   * Constructor for a new pool.
+   *
+   * @param maxSize The maximum size in integers of the pool.
+   */
+  public LruArrayPool(int maxSize) {
+    this.maxSize = maxSize;
+  }
+
+  @Override
+  public synchronized <T> void put(T array, Class<T> arrayClass) {
+    ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);
+    int size = arrayAdapter.getArrayLength(array);
+    if (!isSmallEnoughForReuse(size)) {
+      return;
+    }
+    Key key = keyPool.get(size, arrayClass);
+
+    groupedMap.put(key, array);
+    NavigableMap<Integer, Integer> sizes = getSizesForAdapter(arrayClass);
+    Integer current = sizes.get(key.size);
+    sizes.put(key.size, current == null ? 1 : current + 1);
+    currentSize += size * arrayAdapter.getElementSizeInBytes();
+    evict();
+  }
+
+  @Override
+  public <T> T get(int size, Class<T> arrayClass) {
+    ArrayAdapterInterface<T> arrayAdapter = getAdapterFromType(arrayClass);
+    T result;
+    synchronized (this) {
+      Integer possibleSize = getSizesForAdapter(arrayClass).ceilingKey(size);
+      final Key key;
+      if (mayFillRequest(size, possibleSize)) {
+        key = keyPool.get(possibleSize, arrayClass);
+      } else {
+        key = keyPool.get(size, arrayClass);
+      }
+
+      result = getArrayForKey(key);
+      if (result != null) {
+        currentSize -= arrayAdapter.getArrayLength(result) * arrayAdapter.getElementSizeInBytes();
+        decrementArrayOfSize(arrayAdapter.getArrayLength(result), arrayClass);
+      }
+    }
+
+    if (result != null) {
+      arrayAdapter.resetArray(result);
+    } else {
+      if (Log.isLoggable(arrayAdapter.getTag(), Log.VERBOSE)) {
+        Log.v(arrayAdapter.getTag(), "Allocated " + size + " bytes");
+      }
+      result = arrayAdapter.newArray(size);
+    }
+    return result;
+  }
+
+  @SuppressWarnings("unchecked")
+  @Nullable
+  private <T> T getArrayForKey(Key key) {
+    return (T) groupedMap.get(key);
+  }
+
+  private boolean isSmallEnoughForReuse(int intSize) {
+    return intSize <= maxSize / SINGLE_ARRAY_MAX_SIZE_DIVISOR;
+  }
+
+  private boolean mayFillRequest(int requestedSize, Integer actualSize) {
+    return actualSize != null
+        && (isNoMoreThanHalfFull() || actualSize <= (MAX_OVER_SIZE_MULTIPLE * requestedSize));
+  }
+
+  private boolean isNoMoreThanHalfFull() {
+    return currentSize == 0 || (maxSize / currentSize >= 2);
+  }
+
+  @Override
+  public synchronized void clearMemory() {
+    evictToSize(0);
+  }
+
+  @Override
+  public synchronized void trimMemory(int level) {
+    if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
+      clearMemory();
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
+      evictToSize(maxSize / 2);
+    }
+  }
+
+  private void evict() {
+    evictToSize(maxSize);
+  }
+
+  private void evictToSize(int size) {
+    while (currentSize > size) {
+      Object evicted = groupedMap.removeLast();
+      Preconditions.checkNotNull(evicted);
+      ArrayAdapterInterface<Object> arrayAdapter = getAdapterFromObject(evicted);
+      currentSize -= arrayAdapter.getArrayLength(evicted) * arrayAdapter.getElementSizeInBytes();
+      decrementArrayOfSize(arrayAdapter.getArrayLength(evicted), evicted.getClass());
+      if (Log.isLoggable(arrayAdapter.getTag(), Log.VERBOSE)) {
+        Log.v(arrayAdapter.getTag(), "evicted: " + arrayAdapter.getArrayLength(evicted));
+      }
+    }
+  }
+
+  private void decrementArrayOfSize(int size, Class<?> arrayClass) {
+    NavigableMap<Integer, Integer> sizes = getSizesForAdapter(arrayClass);
+    Integer current = sizes.get(size);
+    if (current == null) {
+      throw new NullPointerException(
+          "Tried to decrement empty size" + ", size: " + size + ", this: " + this);
+    }
+    if (current == 1) {
+      sizes.remove(size);
+    } else {
+      sizes.put(size, current - 1);
+    }
+  }
+
+  private NavigableMap<Integer, Integer> getSizesForAdapter(Class<?> arrayClass) {
+    NavigableMap<Integer, Integer> sizes = sortedSizes.get(arrayClass);
+    if (sizes == null) {
+      sizes = new TreeMap<>();
+      sortedSizes.put(arrayClass, sizes);
+    }
+    return sizes;
+  }
+
+  @SuppressWarnings("unchecked")
+  private <T> ArrayAdapterInterface<T> getAdapterFromObject(T object) {
+    return (ArrayAdapterInterface<T>) getAdapterFromType(object.getClass());
+  }
+
+  @SuppressWarnings("unchecked")
+  private <T> ArrayAdapterInterface<T> getAdapterFromType(Class<T> arrayPoolClass) {
+    ArrayAdapterInterface adapter = adapters.get(arrayPoolClass);
+    if (adapter == null) {
+      if (arrayPoolClass.equals(int[].class)) {
+        adapter = new IntegerArrayAdapter();
+      } else if (arrayPoolClass.equals(byte[].class)) {
+        adapter = new ByteArrayAdapter();
+      } else {
+          throw new IllegalArgumentException("No array pool found for: "
+              + arrayPoolClass.getSimpleName());
+      }
+      adapters.put(arrayPoolClass, adapter);
+    }
+    return adapter;
+  }
+
+  // VisibleForTesting
+  int getCurrentSize() {
+    int currentSize = 0;
+    for (Class<?> type : sortedSizes.keySet()) {
+      for (Integer size : sortedSizes.get(type).keySet()) {
+        ArrayAdapterInterface<?> adapter = getAdapterFromType(type);
+        currentSize += size * sortedSizes.get(type).get(size) * adapter.getElementSizeInBytes();
+      }
+    }
+    return currentSize;
+  }
+
+  private static final class KeyPool extends BaseKeyPool<Key> {
+
+    Key get(int size, Class arrayClass) {
+      Key result = get();
+      result.init(size, arrayClass);
+      return result;
+    }
+
+    @Override
+    protected Key create() {
+      return new Key(this);
+    }
+  }
+
+  private static final class Key implements Poolable {
+    private final KeyPool pool;
+    private int size;
+    private Class arrayClass;
+
+    Key(KeyPool pool) {
+      this.pool = pool;
+    }
+
+    void init(int length, Class arrayClass) {
+      this.size = length;
+      this.arrayClass = arrayClass;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+      if (o instanceof Key) {
+        Key other = (Key) o;
+        return size == other.size && arrayClass == other.arrayClass;
+      }
+      return false;
+    }
+
+    @Override
+    public String toString() {
+      return "Key{" + "size=" + size + "array=" + arrayClass + '}';
+    }
+
+    @Override
+    public void offer() {
+      pool.offer(this);
+    }
+
+    @Override
+    public int hashCode() {
+      int result = size;
+      result = 31 * result + (arrayClass != null ? arrayClass.hashCode() : 0);
+      return result;
+    }
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index 7c1ff54ac..8edb0f23c 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -5,6 +5,8 @@
 import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
 import java.util.Arrays;
@@ -76,7 +78,7 @@ public synchronized void setSizeMultiplier(float sizeMultiplier) {
   }
 
   @Override
-  public synchronized boolean put(Bitmap bitmap) {
+  public synchronized void put(Bitmap bitmap) {
     if (bitmap == null) {
       throw new NullPointerException("Bitmap must not be null");
     }
@@ -91,7 +93,8 @@ public synchronized boolean put(Bitmap bitmap) {
                 + ", is mutable: " + bitmap.isMutable()
                 + ", is allowed config: " + allowedConfigs.contains(bitmap.getConfig()));
       }
-      return false;
+      bitmap.recycle();
+      return;
     }
 
     final int size = strategy.getSize(bitmap);
@@ -107,7 +110,6 @@ public synchronized boolean put(Bitmap bitmap) {
     dump();
 
     evict();
-    return true;
   }
 
   private void evict() {
@@ -115,21 +117,33 @@ private void evict() {
   }
 
   @Override
-  public synchronized Bitmap get(int width, int height, Bitmap.Config config) {
-    Bitmap result = getDirty(width, height, config);
+  @NonNull
+  public Bitmap get(int width, int height, Bitmap.Config config) {
+    Bitmap result = getDirtyOrNull(width, height, config);
     if (result != null) {
       // Bitmaps in the pool contain random data that in some cases must be cleared for an image
       // to be rendered correctly. we shouldn't force all consumers to independently erase the
       // contents individually, so we do so here. See issue #131.
       result.eraseColor(Color.TRANSPARENT);
+    } else {
+      result = Bitmap.createBitmap(width, height, config);
     }
 
     return result;
   }
 
-  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+  @NonNull
   @Override
-  public synchronized Bitmap getDirty(int width, int height, Bitmap.Config config) {
+  public Bitmap getDirty(int width, int height, Bitmap.Config config) {
+    Bitmap result = getDirtyOrNull(width, height, config);
+    if (result == null) {
+      result = Bitmap.createBitmap(width, height, config);
+    }
+    return result;
+  }
+
+  @Nullable
+  private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {
     // Config will be null for non public config types, which can lead to transformations naively
     // passing in null as the requested config here. See issue #194.
     final Bitmap result = strategy.get(width, height, config != null ? config : DEFAULT_CONFIG);
@@ -142,9 +156,7 @@ public synchronized Bitmap getDirty(int width, int height, Bitmap.Config config)
       hits++;
       currentSize -= strategy.getSize(result);
       tracker.remove(result);
-      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
-        result.setHasAlpha(true);
-      }
+      normalize(result);
     }
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       Log.v(TAG, "Get bitmap=" + strategy.logBitmap(width, height, config));
@@ -154,6 +166,27 @@ public synchronized Bitmap getDirty(int width, int height, Bitmap.Config config)
     return result;
   }
 
+  // Setting these two values provides Bitmaps that are essentially equivalent to those returned
+  // from Bitmap.createBitmap.
+  private static void normalize(Bitmap bitmap) {
+    maybeSetAlpha(bitmap);
+    maybeSetPreMultiplied(bitmap);
+  }
+
+  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
+  private static void maybeSetAlpha(Bitmap bitmap) {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
+      bitmap.setHasAlpha(true);
+    }
+  }
+
+  @TargetApi(Build.VERSION_CODES.KITKAT)
+  private static void maybeSetPreMultiplied(Bitmap bitmap) {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+      bitmap.setPremultiplied(true);
+    }
+  }
+
   @Override
   public void clearMemory() {
     if (Log.isLoggable(TAG, Log.DEBUG)) {
@@ -168,9 +201,9 @@ public void trimMemory(int level) {
     if (Log.isLoggable(TAG, Log.DEBUG)) {
       Log.d(TAG, "trimMemory, level=" + level);
     }
-    if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {
+    if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
       trimToSize(maxSize / 2);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java
index c27cbf89e..957a550df 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruByteArrayPool.java
@@ -1,173 +1,32 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
-import android.util.Log;
-
-import java.util.Arrays;
-import java.util.TreeMap;
-
 /**
  * A fixed size LruByteArrayPool that evicts arrays using an LRU strategy to keep the pool under
  * the maximum byte size.
+ *
+ * TODO: update Glide to use ArrayPool<byte[]> instead.
  */
 public final class LruByteArrayPool implements ByteArrayPool {
-  private static final String TAG = "LruBytesPool";
   // 4MB.
-  private static final int DEFAULT_SIZE = 4 * 1024 * 1024;
-  private static final int MAX_SIZE_MULTIPLE = 8;
-  private final GroupedLinkedMap<Key, byte[]> groupedMap = new GroupedLinkedMap<>();
-  private final KeyPool keyPool = new KeyPool();
-  private final TreeMap<Integer, Integer> sortedSizes = new TreeMap<>();
-  private final int maxSizeBytes;
+  static final int DEFAULT_SIZE = 4 * 1024 * 1024;
 
-  private int currentSizeBytes;
+  private final ArrayPool arrayPool;
 
-  /**
-   * Constructor for a new pool with a standard size.
-   */
   public LruByteArrayPool() {
     this(DEFAULT_SIZE);
   }
 
-  /**
-   * Constructor for a new pool.
-   *
-   * @param maxSizeBytes The maximum size in bytes of the pool.
-   */
-  public LruByteArrayPool(int maxSizeBytes) {
-    this.maxSizeBytes = maxSizeBytes;
+  public LruByteArrayPool(int maxSize) {
+    this.arrayPool = new LruArrayPool(maxSize);
   }
 
   @Override
   public synchronized void put(byte[] bytes) {
-    int size = bytes.length;
-    Key key = keyPool.get(size);
-
-    groupedMap.put(key, bytes);
-    Integer current = sortedSizes.get(size);
-    sortedSizes.put(size, current == null ? 1 : current + 1);
-    currentSizeBytes += size;
-    evict();
+    arrayPool.put(bytes, byte[].class);
   }
 
   @Override
   public byte[] get(int size) {
-    byte[] result;
-    synchronized (this) {
-      Integer possibleSize = sortedSizes.ceilingKey(size);
-      final Key key;
-      if (possibleSize != null && possibleSize <= (MAX_SIZE_MULTIPLE * size)) {
-        key = keyPool.get(possibleSize);
-      } else {
-        key = keyPool.get(size);
-      }
-
-      result = groupedMap.get(key);
-      if (result != null) {
-        currentSizeBytes -= result.length;
-        decrementByteArrayOfSize(result.length);
-      }
-    }
-
-    if (result != null) {
-      Arrays.fill(result, (byte) 0);
-    } else {
-      if (Log.isLoggable(TAG, Log.VERBOSE)) {
-        Log.v(TAG, "Allocated " + size + " bytes");
-      }
-      result = new byte[size];
-    }
-
-    return result;
-  }
-
-  @Override
-  public synchronized void clearMemory() {
-    evictToSize(0);
-  }
-
-  @Override
-  public synchronized void trimMemory(int level) {
-     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {
-      clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
-      evictToSize(maxSizeBytes / 2);
-    }
-  }
-
-  private void evict() {
-    evictToSize(maxSizeBytes);
-  }
-
-  private void evictToSize(int size) {
-    while (currentSizeBytes > size) {
-      byte[] evicted = groupedMap.removeLast();
-      currentSizeBytes -= evicted.length;
-      decrementByteArrayOfSize(evicted.length);
-      if (Log.isLoggable(TAG, Log.VERBOSE)) {
-        Log.v(TAG, "evicted: " + evicted.length);
-      }
-    }
-  }
-
-  private void decrementByteArrayOfSize(int size) {
-    Integer current = sortedSizes.get(size);
-    if (current == 1) {
-      sortedSizes.remove(current);
-    } else {
-      sortedSizes.put(size, current - 1);
-    }
-  }
-
-  private static final class KeyPool extends BaseKeyPool<Key> {
-
-    Key get(int size) {
-      Key result = get();
-      result.init(size);
-      return result;
-    }
-
-    @Override
-    protected Key create() {
-      return new Key(this);
-    }
-  }
-
-  private static final class Key implements Poolable {
-    private final KeyPool pool;
-    private int size;
-
-    Key(KeyPool pool) {
-      this.pool = pool;
-    }
-
-    void init(int length) {
-      this.size = length;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-      if (o instanceof Key) {
-        Key other = (Key) o;
-        return size == other.size;
-      }
-      return false;
-    }
-
-    @Override
-    public int hashCode() {
-      return size;
-    }
-
-    @Override
-    public String toString() {
-      return "Key{"
-          + "size=" + size
-          + '}';
-    }
-
-    @Override
-    public void offer() {
-      pool.offer(this);
-    }
+    return arrayPool.get(size, byte[].class);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy.java
index 7a248607a..376dd9665 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy.java
@@ -1,12 +1,15 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
 import android.graphics.Bitmap;
+import android.support.annotation.Nullable;
 
 interface LruPoolStrategy {
   void put(Bitmap bitmap);
 
+  @Nullable
   Bitmap get(int width, int height, Bitmap.Config config);
 
+  @Nullable
   Bitmap removeLast();
 
   String logBitmap(Bitmap bitmap);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
index b023b16e6..0a011dbc3 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategy.java
@@ -3,6 +3,7 @@
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.os.Build;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.util.Util;
 
@@ -57,6 +58,7 @@ public void put(Bitmap bitmap) {
   }
 
   @Override
+  @Nullable
   public Bitmap get(int width, int height, Bitmap.Config config) {
     int size = Util.getBitmapByteSize(width, height, config);
     Key bestKey = findBestKey(size, config);
@@ -89,6 +91,7 @@ private Key findBestKey(int size, Bitmap.Config config) {
   }
 
   @Override
+  @Nullable
   public Bitmap removeLast() {
     Bitmap removed = groupedMap.removeLast();
     if (removed != null) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
index a9a996b5a..007ae8151 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
@@ -3,6 +3,7 @@
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.os.Build;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.util.Util;
 
@@ -33,6 +34,7 @@ public void put(Bitmap bitmap) {
   }
 
   @Override
+  @Nullable
   public Bitmap get(int width, int height, Bitmap.Config config) {
     final int size = Util.getBitmapByteSize(width, height, config);
     Key key = keyPool.get(size);
@@ -55,6 +57,7 @@ public Bitmap get(int width, int height, Bitmap.Config config) {
   }
 
   @Override
+  @Nullable
   public Bitmap removeLast() {
     Bitmap removed = groupedMap.removeLast();
     if (removed != null) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
index 90c1e7c24..01736759f 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine.cache;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.Key;
 
 import java.io.File;
@@ -21,6 +23,7 @@
       /**
        * Returns a new disk cache, or {@code null} if no disk cache could be created.
        */
+      @Nullable
       DiskCache build();
   }
 
@@ -46,6 +49,7 @@
    * @param key The key in the cache.
    * @return An InputStream representing the data at key at the time get is called.
    */
+  @Nullable
   File get(Key key);
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
index 3f246f13d..35586d8ae 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
@@ -40,10 +40,11 @@ void release(Key key) {
     WriteLock writeLock;
     synchronized (this) {
       writeLock = Preconditions.checkNotNull(locks.get(key));
-      Preconditions.checkArgument(writeLock.interestedThreads >= 1,
-          "Cannot release a lock that is not held"
-              + ", key: " + key
-              + ", interestedThreads: " + writeLock.interestedThreads);
+      if (writeLock.interestedThreads < 1) {
+        throw new IllegalStateException("Cannot release a lock that is not held"
+            + ", key: " + key
+            + ", interestedThreads: " + writeLock.interestedThreads);
+      }
 
       writeLock.interestedThreads--;
       if (writeLock.interestedThreads == 0) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
index 82391d42a..455204dca 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
@@ -41,11 +41,11 @@ protected int getSize(Resource<?> item) {
   @SuppressLint("InlinedApi")
   @Override
   public void trimMemory(int level) {
-    if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE) {
+    if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
       // Nearing middle of list of cached background apps
       // Evict our entire bitmap cache
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
       // Entering list of cached background apps
       // Evict oldest half of our bitmap cache
       trimToSize(getCurrentSize() / 2);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
index 0c807ed93..b432c2825 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemoryCache.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine.cache;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.engine.Resource;
 
@@ -40,6 +42,7 @@
    *
    * @param key The key.
    */
+  @Nullable
   Resource<?> remove(Key key);
 
   /**
@@ -49,6 +52,7 @@
    * @param resource The {@link com.bumptech.glide.load.engine.EngineResource} to store.
    * @return The old value of key (null if key is not in map).
    */
+  @Nullable
   Resource<?> put(Key key, Resource<?> resource);
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
index b24e2e311..e2c56dd00 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
@@ -18,10 +18,12 @@
   private static final String TAG = "MemorySizeCalculator";
   // Visible for testing.
   static final int BYTES_PER_ARGB_8888_PIXEL = 4;
+  static final int LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR = 2;
 
   private final int bitmapPoolSize;
   private final int memoryCacheSize;
   private final Context context;
+  private final int arrayPoolSize;
 
   interface ScreenDimensions {
     int getWidthPixels();
@@ -30,8 +32,12 @@
 
   MemorySizeCalculator(Context context, ActivityManager activityManager,
       ScreenDimensions screenDimensions, float memoryCacheScreens, float bitmapPoolScreens,
-      float maxSizeMultiplier, float lowMemoryMaxSizeMultiplier) {
+      int targetArrayPoolSize, float maxSizeMultiplier, float lowMemoryMaxSizeMultiplier) {
     this.context = context;
+    arrayPoolSize =
+        isLowMemoryDevice(activityManager)
+            ? targetArrayPoolSize / LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR
+            : targetArrayPoolSize;
     final int maxSize = getMaxSize(activityManager, maxSizeMultiplier, lowMemoryMaxSizeMultiplier);
 
     final int screenSize = screenDimensions.getWidthPixels() * screenDimensions.getHeightPixels()
@@ -39,24 +45,35 @@
 
     int targetPoolSize = Math.round(screenSize * bitmapPoolScreens);
     int targetMemoryCacheSize = Math.round(screenSize * memoryCacheScreens);
+    int availableSize = maxSize - arrayPoolSize;
 
-    if (targetMemoryCacheSize + targetPoolSize <= maxSize) {
+    if (targetMemoryCacheSize + targetPoolSize <= availableSize) {
       memoryCacheSize = targetMemoryCacheSize;
       bitmapPoolSize = targetPoolSize;
     } else {
-      float part = maxSize / (bitmapPoolScreens + memoryCacheScreens);
+      float part = availableSize / (bitmapPoolScreens + memoryCacheScreens);
       memoryCacheSize = Math.round(part * memoryCacheScreens);
       bitmapPoolSize = Math.round(part * bitmapPoolScreens);
     }
 
     if (Log.isLoggable(TAG, Log.DEBUG)) {
-      Log.d(TAG, "Calculation complete"
-          + ", Calculated memory cache size: " + toMb(memoryCacheSize)
-          + ", pool size: " + toMb(bitmapPoolSize)
-          + ", memory class limited? " + (targetMemoryCacheSize + targetPoolSize > maxSize)
-          + ", max size: " + toMb(maxSize)
-          + ", memoryClass: " + activityManager.getMemoryClass()
-          + ", isLowMemoryDevice: " + isLowMemoryDevice(activityManager));
+      Log.d(
+          TAG,
+          "Calculation complete"
+              + ", Calculated memory cache size: "
+              + toMb(memoryCacheSize)
+              + ", pool size: "
+              + toMb(bitmapPoolSize)
+              + ", byte array size: "
+              + toMb(arrayPoolSize)
+              + ", memory class limited? "
+              + (targetMemoryCacheSize + targetPoolSize > maxSize)
+              + ", max size: "
+              + toMb(maxSize)
+              + ", memoryClass: "
+              + activityManager.getMemoryClass()
+              + ", isLowMemoryDevice: "
+              + isLowMemoryDevice(activityManager));
     }
   }
 
@@ -74,6 +91,13 @@ public int getBitmapPoolSize() {
     return bitmapPoolSize;
   }
 
+  /**
+   * Returns the recommended array pool size for the device it is run on in bytes.
+   */
+  public int getArrayPoolSizeInBytes() {
+    return arrayPoolSize;
+  }
+
   private static int getMaxSize(ActivityManager activityManager, float maxSizeMultiplier,
       float lowMemoryMaxSizeMultiplier) {
     final int memoryClassBytes = activityManager.getMemoryClass() * 1024 * 1024;
@@ -89,8 +113,8 @@ private String toMb(int bytes) {
   @TargetApi(Build.VERSION_CODES.KITKAT)
   private static boolean isLowMemoryDevice(ActivityManager activityManager) {
     final int sdkInt = Build.VERSION.SDK_INT;
-    return sdkInt < Build.VERSION_CODES.HONEYCOMB || (sdkInt >= Build.VERSION_CODES.KITKAT
-        && activityManager.isLowRamDevice());
+    return sdkInt < Build.VERSION_CODES.HONEYCOMB
+        || (sdkInt >= Build.VERSION_CODES.KITKAT && activityManager.isLowRamDevice());
   }
 
   /**
@@ -103,6 +127,8 @@ private static boolean isLowMemoryDevice(ActivityManager activityManager) {
     static final int BITMAP_POOL_TARGET_SCREENS = 4;
     static final float MAX_SIZE_MULTIPLIER = 0.4f;
     static final float LOW_MEMORY_MAX_SIZE_MULTIPLIER = 0.33f;
+    // 4MB.
+    static final int ARRAY_POOL_SIZE_BYTES = 4 * 1024 * 1024;
 
     private final Context context;
 
@@ -114,6 +140,7 @@ private static boolean isLowMemoryDevice(ActivityManager activityManager) {
     private float bitmapPoolScreens = BITMAP_POOL_TARGET_SCREENS;
     private float maxSizeMultiplier = MAX_SIZE_MULTIPLIER;
     private float lowMemoryMaxSizeMultiplier = LOW_MEMORY_MAX_SIZE_MULTIPLIER;
+    private int arrayPoolSizeBytes = ARRAY_POOL_SIZE_BYTES;
 
     public Builder(Context context) {
       this.context = context;
@@ -176,6 +203,19 @@ public Builder setLowMemoryMaxSizeMultiplier(float lowMemoryMaxSizeMultiplier) {
       return this;
     }
 
+    /**
+     * Sets the size in bytes of the {@link
+     * com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool} to use to store temporary
+     * arrays while decoding data and returns this builder.
+     *
+     * <p>This number will be halved on low memory devices that return {@code true} from
+     * {@link ActivityManager#isLowRamDevice()}.
+     */
+    public Builder setArrayPoolSize(int arrayPoolSizeBytes) {
+      this.arrayPoolSizeBytes = arrayPoolSizeBytes;
+      return this;
+    }
+
     // Visible for testing.
     Builder setActivityManager(ActivityManager activityManager) {
       this.activityManager = activityManager;
@@ -190,7 +230,8 @@ Builder setScreenDimensions(ScreenDimensions screenDimensions) {
 
     public MemorySizeCalculator build() {
       return new MemorySizeCalculator(context, activityManager, screenDimensions,
-          memoryCacheScreens, bitmapPoolScreens, maxSizeMultiplier, lowMemoryMaxSizeMultiplier);
+          memoryCacheScreens, bitmapPoolScreens, arrayPoolSizeBytes, maxSizeMultiplier,
+          lowMemoryMaxSizeMultiplier);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java
deleted file mode 100644
index b93e02538..000000000
--- a/library/src/main/java/com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.bumptech.glide.load.engine.executor;
-
-import android.util.Log;
-
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.PriorityBlockingQueue;
-import java.util.concurrent.RunnableFuture;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicInteger;
-
-/**
- * A FIFO priority {@link ThreadPoolExecutor} that prioritizes submitted {@link Runnable}s by
- * assuming they implement {@link Prioritized}. {@link Prioritized} runnables that return lower
- * values for {@link Prioritized#getPriority()} will be executed before those that return higher
- * values. Priorities only apply when multiple items are queued at the same time. Runnables with the
- * same priority will be executed in FIFO order.
- */
-public class FifoPriorityThreadPoolExecutor extends ThreadPoolExecutor {
-  private static final String TAG = "GlidePool";
-  private static final String DEFAULT_NAME = "fifo-pool";
-  private final AtomicInteger ordering = new AtomicInteger();
-  private final UncaughtThrowableStrategy uncaughtThrowableStrategy;
-
-  /**
-   * Constructor to build a fixed thread pool with the given pool size using
-   * {@link
-   * com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.DefaultThreadFactory}.
-   *
-   * @param poolSize The number of threads.
-   */
-  public FifoPriorityThreadPoolExecutor(int poolSize) {
-      this(poolSize, UncaughtThrowableStrategy.LOG);
-  }
-
-  /**
-   * Constructor to build a fixed thread pool with the given pool size using
-   * {@link
-   * com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.DefaultThreadFactory}.
-   *
-   * @param poolSize The number of threads.
-   * @param uncaughtThrowableStrategy Dictates how the pool should handle uncaught and unexpected
-   *                                  throwables thrown by Futures run by the pool.
-   */
-  public FifoPriorityThreadPoolExecutor(int poolSize,
-      UncaughtThrowableStrategy uncaughtThrowableStrategy) {
-      this(poolSize, poolSize, 0, TimeUnit.MILLISECONDS, new DefaultThreadFactory(),
-          uncaughtThrowableStrategy);
-  }
-
-  /**
-   * Constructor to build a fixed thread pool with the given pool size using {@link
-   * com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.DefaultThreadFactory}.
-   *
-   * @param name The prefix for threads created by this pool.
-   * @param poolSize The number of threads.
-   */
-  public FifoPriorityThreadPoolExecutor(String name, int poolSize) {
-    this(poolSize, poolSize, 0, TimeUnit.MILLISECONDS, new DefaultThreadFactory(name),
-        UncaughtThrowableStrategy.LOG);
-  }
-
-  /**
-   * Constructor to build a fixed thread pool with the given pool size using {@link
-   * com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor.DefaultThreadFactory}.
-   *
-   * @param name The prefix for threads created by this pool.
-   * @param poolSize The number of threads.
-   * @param uncaughtThrowableStrategy Dictates how the pool should handle uncaught and unexpected
-   *                                  throwables thrown by Futures run by the pool.
-   */
-  public FifoPriorityThreadPoolExecutor(String name, int poolSize,
-      UncaughtThrowableStrategy uncaughtThrowableStrategy) {
-    this(poolSize, poolSize, 0, TimeUnit.MILLISECONDS, new DefaultThreadFactory(name),
-        uncaughtThrowableStrategy);
-  }
-
-  public FifoPriorityThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAlive,
-      TimeUnit timeUnit, ThreadFactory threadFactory,
-      UncaughtThrowableStrategy uncaughtThrowableStrategy) {
-    super(corePoolSize, maximumPoolSize, keepAlive, timeUnit, new PriorityBlockingQueue<Runnable>(),
-        threadFactory);
-    this.uncaughtThrowableStrategy = uncaughtThrowableStrategy;
-  }
-
-  @Override
-  protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {
-    return new LoadTask<>(runnable, value, ordering.getAndIncrement());
-  }
-
-  @Override
-  protected void afterExecute(Runnable r, Throwable t) {
-    super.afterExecute(r, t);
-    if (t == null && r instanceof Future<?>) {
-      Future<?> future = (Future<?>) r;
-      if (future.isDone() && !future.isCancelled()) {
-        try {
-          future.get();
-        } catch (InterruptedException | ExecutionException e) {
-          uncaughtThrowableStrategy.handle(e);
-        }
-      }
-    }
-  }
-
-  /**
-   * A strategy for handling unexpected and uncaught throwables thrown by futures run on the pool.
-   */
-  public enum UncaughtThrowableStrategy {
-    /**
-     * Silently catches and ignores the uncaught throwables.
-     */
-    IGNORE,
-    /**
-     * Logs the uncaught throwables using {@link #TAG} and {@link Log}.
-     */
-    LOG {
-      @Override
-      protected void handle(Throwable t) {
-        if (Log.isLoggable(TAG, Log.ERROR)) {
-          Log.e(TAG, "Request threw uncaught throwable", t);
-        }
-      }
-    },
-    /**
-     * Rethrows the uncaught throwables to crash the app.
-     */
-    THROW {
-      @Override
-      protected void handle(Throwable t) {
-        super.handle(t);
-        throw new RuntimeException(t);
-      }
-    };
-
-    protected void handle(Throwable t) {
-      // Ignore.
-    }
-  }
-
-  /**
-   * A {@link java.util.concurrent.ThreadFactory} that builds threads with priority {@link
-   * android.os.Process#THREAD_PRIORITY_BACKGROUND}.
-   */
-  public static class DefaultThreadFactory implements ThreadFactory {
-    private final String name;
-    private int threadNum = 0;
-
-    public DefaultThreadFactory() {
-      this(DEFAULT_NAME);
-    }
-
-    public DefaultThreadFactory(String name) {
-      this.name = name;
-    }
-
-    @Override
-    public Thread newThread(Runnable runnable) {
-      final Thread result = new Thread(runnable, name + "-thread-" + threadNum) {
-        @Override
-        public void run() {
-          android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
-          super.run();
-        }
-      };
-      threadNum++;
-      return result;
-    }
-  }
-
-  // Visible for testing.
-  static class LoadTask<T> extends FutureTask<T> implements Comparable<LoadTask<?>> {
-    private final int priority;
-    private final int order;
-
-    public LoadTask(Runnable runnable, T result, int order) {
-      super(runnable, result);
-      if (!(runnable instanceof Prioritized)) {
-        throw new IllegalArgumentException(
-            "FifoPriorityThreadPoolExecutor must be given Runnables that "
-                + "implement Prioritized");
-      }
-      priority = ((Prioritized) runnable).getPriority();
-      this.order = order;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public boolean equals(Object o) {
-      if (o instanceof LoadTask) {
-        LoadTask<Object> other = (LoadTask<Object>) o;
-        return order == other.order && priority == other.priority;
-      }
-      return false;
-    }
-
-    @Override
-    public int hashCode() {
-      int result = priority;
-      result = 31 * result + order;
-      return result;
-    }
-
-    @Override
-    public int compareTo(LoadTask<?> loadTask) {
-      int result = priority - loadTask.priority;
-      if (result == 0) {
-        result = order - loadTask.order;
-      }
-      return result;
-    }
-  }
-}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
new file mode 100644
index 000000000..aca64853a
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
@@ -0,0 +1,147 @@
+package com.bumptech.glide.load.engine.executor;
+
+import android.util.Log;
+
+import java.util.concurrent.PriorityBlockingQueue;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * A prioritized {@link ThreadPoolExecutor} for running jobs in Glide.
+ */
+public class GlideExecutor extends ThreadPoolExecutor {
+  private static final String TAG = "GlideExecutor";
+  private static final String DEFAULT_NAME = "fifo-pool";
+
+  /**
+   * Constructor to build a fixed thread pool with the given pool size.
+   *
+   * @param poolSize The number of threads.
+   */
+  public GlideExecutor(int poolSize) {
+    this(poolSize, new DefaultThreadFactory());
+  }
+
+  /**
+   * Constructor to build a fixed thread pool with the given pool size.
+   *
+   * @param poolSize The number of threads.
+   * @param uncaughtThrowableStrategy Dictates how the pool should handle uncaught and unexpected
+   *                                  throwables thrown by Futures run by the pool.
+   */
+  public GlideExecutor(int poolSize,
+      UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+    this(poolSize, new DefaultThreadFactory(uncaughtThrowableStrategy));
+  }
+
+  /**
+   * Constructor to build a fixed thread pool with the given pool size.
+   *
+   * @param name The prefix for threads created by this pool.
+   * @param poolSize The number of threads.
+   */
+  public GlideExecutor(String name, int poolSize) {
+    this(poolSize, new DefaultThreadFactory(name));
+  }
+
+  /**
+   * Constructor to build a fixed thread pool with the given pool size.
+   *
+   * @param name The prefix for each thread name.
+   * @param poolSize The number of threads.
+   * @param uncaughtThrowableStrategy The {@link
+   * com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy} to use to
+   *                                  handle uncaught exceptions.
+   */
+  public GlideExecutor(String name, int poolSize,
+      UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+    this(poolSize, new DefaultThreadFactory(name, uncaughtThrowableStrategy));
+  }
+
+  private GlideExecutor(int corePoolSize, ThreadFactory threadFactory) {
+    super(corePoolSize, corePoolSize, 0, TimeUnit.MILLISECONDS,
+        new PriorityBlockingQueue<Runnable>(), threadFactory);
+  }
+
+  /**
+   * A strategy for handling unexpected and uncaught throwables thrown by futures run on the pool.
+   */
+  public enum UncaughtThrowableStrategy {
+    /**
+     * Silently catches and ignores the uncaught throwables.
+     */
+    IGNORE,
+    /**
+     * Logs the uncaught throwables using {@link #TAG} and {@link Log}.
+     */
+    LOG {
+      @Override
+      protected void handle(Throwable t) {
+        if (t != null && Log.isLoggable(TAG, Log.ERROR)) {
+          Log.e(TAG, "Request threw uncaught throwable", t);
+        }
+      }
+    },
+    /**
+     * Rethrows the uncaught throwables to crash the app.
+     */
+    THROW {
+      @Override
+      protected void handle(Throwable t) {
+        super.handle(t);
+        if (t != null) {
+          throw new RuntimeException("Request threw uncaught throwable", t);
+        }
+      }
+    };
+
+    protected void handle(Throwable t) {
+      // Ignore.
+    }
+  }
+
+  /**
+   * A {@link java.util.concurrent.ThreadFactory} that builds threads with priority {@link
+   * android.os.Process#THREAD_PRIORITY_BACKGROUND}.
+   */
+  private static final class DefaultThreadFactory implements ThreadFactory {
+    private final String name;
+    private final UncaughtThrowableStrategy uncaughtThrowableStrategy;
+    private int threadNum = 0;
+
+    DefaultThreadFactory() {
+      this(DEFAULT_NAME);
+    }
+
+    DefaultThreadFactory(String name) {
+      this(name, UncaughtThrowableStrategy.LOG);
+    }
+
+    DefaultThreadFactory(UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+      this(DEFAULT_NAME, uncaughtThrowableStrategy);
+    }
+
+    DefaultThreadFactory(String name, UncaughtThrowableStrategy uncaughtThrowableStrategy) {
+      this.name = name;
+      this.uncaughtThrowableStrategy = uncaughtThrowableStrategy;
+    }
+
+    @Override
+    public Thread newThread(Runnable runnable) {
+      final Thread result = new Thread(runnable, name + "-thread-" + threadNum) {
+        @Override
+        public void run() {
+          android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
+          try {
+            super.run();
+          } catch (Throwable t) {
+            uncaughtThrowableStrategy.handle(t);
+          }
+        }
+      };
+      threadNum++;
+      return result;
+    }
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/Prioritized.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/Prioritized.java
deleted file mode 100644
index 23553d6a6..000000000
--- a/library/src/main/java/com/bumptech/glide/load/engine/executor/Prioritized.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.bumptech.glide.load.engine.executor;
-
-/**
- * A simple interface for exposing the priority of a task. Lower integer values are treated as
- * having higher priority with 0 being the highest priority possible.
- */
-public interface Prioritized {
-  /**
-   * Returns the priority of this task.
-   */
-  int getPriority();
-}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
index 64f38a2fb..04243f947 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunner.java
@@ -91,8 +91,15 @@ private boolean allocate() {
     long start = clock.now();
     while (!toPrefill.isEmpty() && !isGcDetected(start)) {
       PreFillType toAllocate = toPrefill.remove();
-      Bitmap bitmap = Bitmap
-          .createBitmap(toAllocate.getWidth(), toAllocate.getHeight(), toAllocate.getConfig());
+      final Bitmap bitmap;
+      if (!seenTypes.contains(toAllocate)) {
+        seenTypes.add(toAllocate);
+        bitmap = bitmapPool.getDirty(toAllocate.getWidth(), toAllocate.getHeight(),
+            toAllocate.getConfig());
+      } else {
+        bitmap = Bitmap.createBitmap(toAllocate.getWidth(), toAllocate.getHeight(),
+            toAllocate.getConfig());
+      }
 
       // Don't over fill the memory cache to avoid evicting useful resources, but make sure it's
       // not empty so
@@ -100,7 +107,7 @@ private boolean allocate() {
       if (getFreeMemoryCacheBytes() >= Util.getBitmapByteSize(bitmap)) {
         memoryCache.put(new UniqueKey(), BitmapResource.obtain(bitmap, bitmapPool));
       } else {
-        addToBitmapPool(toAllocate, bitmap);
+        bitmapPool.put(bitmap);
       }
 
       if (Log.isLoggable(TAG, Log.DEBUG)) {
@@ -121,21 +128,6 @@ private int getFreeMemoryCacheBytes() {
     return memoryCache.getMaxSize() - memoryCache.getCurrentSize();
   }
 
-  private void addToBitmapPool(PreFillType toAllocate, Bitmap bitmap) {
-    // The pool may not move sizes to the front of the LRU on put. Do a get here to make sure the
-    // size we're adding
-    // is at the front of the queue so that the Bitmap we're adding won't be evicted immediately.
-    if (seenTypes.add(toAllocate)) {
-      Bitmap fromPool =
-          bitmapPool.get(toAllocate.getWidth(), toAllocate.getHeight(), toAllocate.getConfig());
-      if (fromPool != null) {
-        bitmapPool.put(fromPool);
-      }
-    }
-
-    bitmapPool.put(bitmap);
-  }
-
   @Override
   public void run() {
     if (allocate()) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/PreFillType.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/PreFillType.java
index daa78a4e8..b423df158 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/PreFillType.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/PreFillType.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine.prefill;
 
 import android.graphics.Bitmap;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.util.Preconditions;
 
@@ -133,7 +134,7 @@ public Builder(int width, int height) {
      * @param config The config to use, or null to use Glide's default.
      * @return This builder.
      */
-    public Builder setConfig(Bitmap.Config config) {
+    public Builder setConfig(@Nullable Bitmap.Config config) {
       this.config = config;
       return this;
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
index 453d08ef9..febd8bc1b 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Options;
@@ -19,6 +18,7 @@
  * Loads {@link java.nio.ByteBuffer}s using NIO for {@link java.io.File}.
  */
 public class ByteBufferFileLoader implements ModelLoader<File, ByteBuffer> {
+  private static final String TAG = "ByteBufferFileLoader";
 
   @Override
   public LoadData<ByteBuffer> buildLoadData(File file, int width, int height,
@@ -62,10 +62,13 @@ public void loadData(Priority priority, DataCallback<? super ByteBuffer> callbac
       try {
         result = ByteBufferUtil.fromFile(file);
       } catch (IOException e) {
-        if (Logs.isEnabled(Log.DEBUG)) {
-          Logs.log(Log.DEBUG, "Failed to obtain ByteBuffer for file", e);
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "Failed to obtain ByteBuffer for file", e);
         }
+        callback.onLoadFailed(e);
+        return;
       }
+
       callback.onDataReady(result);
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
index f2696cf2f..e917a8f8b 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
@@ -4,7 +4,6 @@
 import android.os.ParcelFileDescriptor;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Options;
@@ -24,6 +23,7 @@
  *               java.io.InputStream} or {@link java.io.FileDescriptor} etc).
  */
 public class FileLoader<Data> implements ModelLoader<File, Data> {
+  private static final String TAG = "FileLoader";
 
   private final FileOpener<Data> fileOpener;
 
@@ -67,9 +67,11 @@ public void loadData(Priority priority, DataCallback<? super Data> callback) {
       try {
         data = opener.open(file);
       } catch (FileNotFoundException e) {
-        if (Logs.isEnabled(Log.DEBUG)) {
-          Logs.log(Log.DEBUG, "Failed to open file", e);
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "Failed to open file", e);
         }
+        callback.onLoadFailed(e);
+        return;
       }
       callback.onDataReady(data);
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
index a51e53707..91cd2ebb1 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.net.Uri;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.bumptech.glide.load.Key;
@@ -28,20 +29,20 @@
  */
 public class GlideUrl implements Key {
   private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
-  private final URL url;
   private final Headers headers;
-  private final String stringUrl;
+  @Nullable private final URL url;
+  @Nullable private final String stringUrl;
 
-  private String safeStringUrl;
-  private URL safeUrl;
-  private volatile byte[] cacheKeyBytes;
+  @Nullable private String safeStringUrl;
+  @Nullable private URL safeUrl;
+  @Nullable private volatile byte[] cacheKeyBytes;
 
   public GlideUrl(URL url) {
-    this(url, Headers.NONE);
+    this(url, Headers.DEFAULT);
   }
 
   public GlideUrl(String url) {
-    this(url, Headers.NONE);
+    this(url, Headers.DEFAULT);
   }
 
   public GlideUrl(URL url, Headers headers) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/Headers.java b/library/src/main/java/com/bumptech/glide/load/model/Headers.java
index b60a3da88..f55d16f4e 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/Headers.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/Headers.java
@@ -10,7 +10,12 @@
  */
 public interface Headers {
 
-  /** An empty Headers object that can be used if users don't want to provide headers. */
+  /**
+   * An empty Headers object that can be used if users don't want to provide headers.
+   *
+   * @deprecated Use {@link #DEFAULT} instead.
+   */
+  @Deprecated
   Headers NONE = new Headers() {
       @Override
       public Map<String, String> getHeaders() {
@@ -18,6 +23,12 @@
       }
   };
 
+  /**
+   * A Headers object containing reasonable defaults that should be used when users don't want
+   * to provide their own headers.
+   */
+  Headers DEFAULT = new LazyHeaders.Builder().build();
+
   /**
    * Returns a non-null map containing a set of headers to apply to an http request.
    */
diff --git a/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
index ca2f5c658..915185fbd 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.model;
 
+import android.text.TextUtils;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -78,21 +80,55 @@ public int hashCode() {
   }
 
   /**
-   * Builder class for {@link LazyHeaders}.
+   * Adds an {@link LazyHeaderFactory} that will be used to construct a value for the given
+   * key* lazily on a background thread.
    *
    * <p> This class is not thread safe. </p>
+   *
+   * <p> This class may include default values for User-Agent and Accept-Encoding headers. These
+   * will be replaced by calls to either {@link #setHeader(String, LazyHeaderFactory)} or
+   * {@link #addHeader(String, String)}, even though {@link #addHeader(String, LazyHeaderFactory)}
+   * would usually append an additional value. </p>
    */
+   // PMD doesn't like the necessary static block to initialize DEFAULT_HEADERS.
+  @SuppressWarnings("PMD.FieldDeclarationsShouldBeAtStartOfClass")
   public static final class Builder {
-    private boolean copyOnModify;
-    private Map<String, List<LazyHeaderFactory>> headers = new HashMap<>();
+    private static final String USER_AGENT_HEADER = "User-Agent";
+    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
+    private static final String ENCODING_HEADER = "Accept-Encoding";
+    private static final String DEFAULT_ENCODING = "identity";
+    private static final Map<String, List<LazyHeaderFactory>> DEFAULT_HEADERS;
+
+    // Set Accept-Encoding header to do our best to avoid gzip since it's both inefficient for
+    // images and also makes it more difficult for us to detect and prevent partial content
+    // rendering. See #440.
+    static {
+      Map<String, List<LazyHeaderFactory>> temp
+          = new HashMap<>(2);
+      if (!TextUtils.isEmpty(DEFAULT_USER_AGENT)) {
+        temp.put(USER_AGENT_HEADER,
+            Collections.<LazyHeaderFactory>singletonList(
+                new StringHeaderFactory(DEFAULT_USER_AGENT)));
+      }
+      temp.put(ENCODING_HEADER,
+          Collections.<LazyHeaderFactory>singletonList(
+              new StringHeaderFactory(DEFAULT_ENCODING)));
+      DEFAULT_HEADERS = Collections.unmodifiableMap(temp);
+    }
+
+    private boolean copyOnModify = true;
+    private boolean isEncodingDefault = true;
+    private Map<String, List<LazyHeaderFactory>> headers = DEFAULT_HEADERS;
+    private boolean isUserAgentDefault = headers.containsKey(DEFAULT_USER_AGENT);
 
     /**
      * Adds a value for the given header and returns this builder.
      *
-     * <p> Use {@link #addHeader(String, LazyHeaderFactory)} if obtaining the value requires
-     * I/O (ie an oauth token). </p>
+     * <p> Use {@link #addHeader(String, LazyHeaderFactory)} if obtaining the value requires I/O
+     * (ie an oauth token). </p>
      *
      * @see #addHeader(String, LazyHeaderFactory)
+
      */
     public Builder addHeader(String key, String value) {
       return addHeader(key, new StringHeaderFactory(value));
@@ -100,27 +136,78 @@ public Builder addHeader(String key, String value) {
 
     /**
      * Adds an {@link LazyHeaderFactory} that will be used to construct a value for the given
-     * key* lazily on a background thread.
+     * key lazily on a background thread.
      *
-     * <p> Headers may have multiple values whose order is defined by the order in which this
-     * method is called. </p>
+     * <p> Headers may have multiple values whose order is defined by the order in which
+     * this method is called. </p>
      *
-     * <p> This class does not prevent you from adding the same value to a given key multiple times
-     * </p>
+     * <p> This class does not prevent you from adding the same value to a given key multiple
+     * times </p>
      */
     public Builder addHeader(String key, LazyHeaderFactory factory) {
-      if (copyOnModify) {
-        copyOnModify = false;
-        headers = copyHeaders();
+      if ((isEncodingDefault && ENCODING_HEADER.equalsIgnoreCase(key))
+          || (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key))) {
+        return setHeader(key, factory);
       }
 
+      copyIfNecessary();
+      getFactories(key).add(factory);
+      return this;
+    }
+
+    /**
+     * Replaces all existing {@link LazyHeaderFactory LazyHeaderFactorys} for the given key
+     * with the given {@link LazyHeaderFactory}.
+     *
+     * <p> If the given value is {@code null}, the header at the given key will be removed. </p>
+     *
+     * <p> Use {@link #setHeader(String, LazyHeaderFactory)} if obtaining the value requires I/O
+     * (ie an oauth token). </p>
+     */
+    public Builder setHeader(String key, String value) {
+      return setHeader(key, value == null ? null : new StringHeaderFactory(value));
+    }
+
+    /**
+     * Replaces all existing {@link LazyHeaderFactory LazyHeaderFactorys} for the given key
+     * with the given {@link LazyHeaderFactory}.
+     *
+     * <p> If the given value is {@code null}, the header at the given key will be removed. </p>
+     */
+    public Builder setHeader(String key, LazyHeaderFactory factory) {
+      copyIfNecessary();
+      if (factory == null) {
+        headers.remove(key);
+      } else {
+        List<LazyHeaderFactory> factories = getFactories(key);
+        factories.clear();
+        factories.add(factory);
+      }
+
+      if (isEncodingDefault && ENCODING_HEADER.equalsIgnoreCase(key)) {
+        isEncodingDefault = false;
+      }
+      if (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key)) {
+        isUserAgentDefault = false;
+      }
+
+      return this;
+    }
+
+    private List<LazyHeaderFactory> getFactories(String key) {
       List<LazyHeaderFactory> factories = headers.get(key);
       if (factories == null) {
         factories = new ArrayList<>();
         headers.put(key, factories);
       }
-      factories.add(factory);
-      return this;
+      return factories;
+    }
+
+    private void copyIfNecessary() {
+      if (copyOnModify) {
+        copyOnModify = false;
+        headers = copyHeaders();
+      }
     }
 
     /**
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
new file mode 100644
index 000000000..ac81aa270
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
@@ -0,0 +1,112 @@
+package com.bumptech.glide.load.model;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.MediaStore;
+import android.text.TextUtils;
+
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.data.DataFetcher;
+import com.bumptech.glide.load.data.mediastore.MediaStoreUtil;
+import com.bumptech.glide.signature.ObjectKey;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+
+/**
+ * Loads the file path for {@link MediaStore} owned {@link Uri uris}.
+ */
+public final class MediaStoreFileLoader implements ModelLoader<Uri, File>  {
+
+  private final Context context;
+
+  MediaStoreFileLoader(Context context) {
+    this.context = context;
+  }
+
+  @Override
+  public LoadData<File> buildLoadData(Uri uri, int width, int height, Options options) {
+    return new LoadData<>(new ObjectKey(uri), new FilePathFetcher(context, uri));
+  }
+
+  @Override
+  public boolean handles(Uri uri) {
+    return MediaStoreUtil.isMediaStoreUri(uri);
+  }
+
+  private static class FilePathFetcher implements DataFetcher<File> {
+    private static final String[] PROJECTION = new String[] {
+        MediaStore.MediaColumns.DATA,
+    };
+
+    private final Context context;
+    private final Uri uri;
+
+    FilePathFetcher(Context context, Uri uri) {
+      this.context = context;
+      this.uri = uri;
+    }
+
+    @Override
+    public void loadData(Priority priority, DataCallback<? super File> callback) {
+      Cursor cursor = context.getContentResolver().query(uri, PROJECTION, null /*selection*/,
+          null /*selectionArgs*/, null /*sortOrder*/);
+
+      String filePath = null;
+      if (cursor != null) {
+        try {
+          if (cursor.moveToFirst()) {
+            filePath = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns.DATA));
+          }
+        } finally {
+          cursor.close();
+        }
+      }
+
+      if (TextUtils.isEmpty(filePath)) {
+        callback.onLoadFailed(new FileNotFoundException("Failed to find file path for: " + uri));
+      } else {
+        callback.onDataReady(new File(filePath));
+      }
+    }
+
+    @Override
+    public void cleanup() {
+      // Do nothing.
+    }
+
+    @Override
+    public void cancel() {
+      // Do nothing.
+    }
+
+    @Override
+    public Class<File> getDataClass() {
+      return File.class;
+    }
+
+    @Override
+    public DataSource getDataSource() {
+      return DataSource.LOCAL;
+    }
+  }
+
+  /**
+   * {@link ModelLoaderFactory} for {@link MediaStoreFileLoader}s.
+   */
+  public static final class Factory implements ModelLoaderFactory<Uri, File> {
+
+    @Override
+    public ModelLoader<Uri, File> build(Context context, MultiModelLoaderFactory multiFactory) {
+      return new MediaStoreFileLoader(context);
+    }
+
+    @Override
+    public void teardown() {
+      // Do nothing.
+    }
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java b/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
index b0ceda589..0a4ce4c06 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelCache.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.util.LruCache;
 import com.bumptech.glide.util.Util;
 
@@ -40,6 +42,7 @@ protected void onItemEvicted(ModelKey<A> key, B item) {
    * @param height The height in pixels of the view the image is being loaded into.
    * @return The cached result, or null.
    */
+  @Nullable
   public B get(A model, int width, int height) {
     ModelKey<A> key = ModelKey.get(model, width, height);
     B result = cache.get(key);
@@ -60,6 +63,13 @@ public void put(A model, int width, int height, B value) {
     cache.put(key, value);
   }
 
+  /**
+   * Removes all entries from the cache.
+   */
+  public void clear() {
+    cache.clearMemory();
+  }
+
   // Visible for testing.
   static final class ModelKey<A> {
     private static final Queue<ModelKey<?>> KEY_QUEUE = Util.createQueue(0);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
index f192de038..c64c6d2bd 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -66,8 +68,7 @@ public LoadData(Key sourceKey, List<Key> alternateKeys, DataFetcher<Data> fetche
    * {@link DataFetcher} will not be used if the resource is already cached.
    *
    * <p> Note - If no valid data fetcher can be returned (for example if a model has a null URL),
-   * then it is acceptable to return a null data fetcher from this method. Doing so will be treated
-   * any other failure or exception during the load process. </p>
+   * then it is acceptable to return a null data fetcher from this method. </p>
    *
    * @param model  The model representing the resource.
    * @param width  The width in pixels of the view or target the resource will be loaded into, or
@@ -77,6 +78,7 @@ public LoadData(Key sourceKey, List<Key> alternateKeys, DataFetcher<Data> fetche
    *               {@link com.bumptech.glide.request.target.Target#SIZE_ORIGINAL} to indicate that
    *               the resource should be loaded at its original height.
    */
+  @Nullable
   LoadData<Data> buildLoadData(Model model, int width, int height, Options options);
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
index c1131ab35..bf3ffbab4 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.content.Context;
+import android.support.v4.util.Pools.Pool;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -17,8 +18,8 @@
   private final MultiModelLoaderFactory multiModelLoaderFactory;
   private final ModelLoaderCache cache = new ModelLoaderCache();
 
-  public ModelLoaderRegistry(Context context) {
-    this(new MultiModelLoaderFactory(context));
+  public ModelLoaderRegistry(Context context, Pool<List<Exception>> exceptionListPool) {
+    this(new MultiModelLoaderFactory(context, exceptionListPool));
   }
 
   // Visible for testing.
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index de63fcd7f..4466666b7 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -1,11 +1,14 @@
 package com.bumptech.glide.load.model;
 
+import android.support.v4.util.Pools.Pool;
+
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.data.DataFetcher.DataCallback;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.util.Preconditions;
 
 import java.util.ArrayList;
@@ -24,9 +27,12 @@
 class MultiModelLoader<Model, Data> implements ModelLoader<Model, Data> {
 
   private final List<ModelLoader<Model, Data>> modelLoaders;
+  private final Pool<List<Exception>> exceptionListPool;
 
-  MultiModelLoader(List<ModelLoader<Model, Data>> modelLoaders) {
+  MultiModelLoader(List<ModelLoader<Model, Data>> modelLoaders,
+      Pool<List<Exception>> exceptionListPool) {
     this.modelLoaders = modelLoaders;
+    this.exceptionListPool = exceptionListPool;
   }
 
   @Override
@@ -45,7 +51,8 @@
         }
       }
     }
-    return !fetchers.isEmpty() ? new LoadData<>(sourceKey, new MultiFetcher<>(fetchers)) : null;
+    return !fetchers.isEmpty()
+        ? new LoadData<>(sourceKey, new MultiFetcher<>(fetchers, exceptionListPool)) : null;
   }
 
   @Override
@@ -67,11 +74,14 @@ public String toString() {
   static class MultiFetcher<Data> implements DataFetcher<Data>, DataCallback<Data> {
 
     private final List<DataFetcher<Data>> fetchers;
+    private final Pool<List<Exception>> exceptionListPool;
     private int currentIndex;
     private Priority priority;
     private DataCallback<? super Data> callback;
+    private List<Exception> exceptions;
 
-    MultiFetcher(List<DataFetcher<Data>> fetchers) {
+    MultiFetcher(List<DataFetcher<Data>> fetchers, Pool<List<Exception>> exceptionListPool) {
+      this.exceptionListPool = exceptionListPool;
       Preconditions.checkNotEmpty(fetchers);
       this.fetchers = fetchers;
       currentIndex = 0;
@@ -81,11 +91,14 @@ public String toString() {
     public void loadData(Priority priority, DataCallback<? super Data> callback) {
       this.priority = priority;
       this.callback = callback;
+      exceptions = exceptionListPool.acquire();
       fetchers.get(currentIndex).loadData(priority, this);
     }
 
     @Override
     public void cleanup() {
+      exceptionListPool.release(exceptions);
+      exceptions = null;
       for (DataFetcher<Data> fetcher : fetchers) {
         fetcher.cleanup();
       }
@@ -112,11 +125,23 @@ public DataSource getDataSource() {
     public void onDataReady(Data data) {
       if (data != null) {
         callback.onDataReady(data);
-      } else if (currentIndex < fetchers.size() - 1) {
+      } else {
+        startNextOrFail();
+      }
+    }
+
+    @Override
+    public void onLoadFailed(Exception e) {
+      exceptions.add(e);
+      startNextOrFail();
+    }
+
+    private void startNextOrFail() {
+      if (currentIndex < fetchers.size() - 1) {
         currentIndex++;
         loadData(priority, callback);
       } else {
-        callback.onDataReady(null /*data*/);
+        callback.onLoadFailed(new GlideException("Fetch failed", new ArrayList<>(exceptions)));
       }
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
index f0710bfac..e6c82d9c2 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
@@ -1,13 +1,17 @@
 package com.bumptech.glide.load.model;
 
 import android.content.Context;
+import android.support.v4.util.Pools.Pool;
 
 import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.util.Preconditions;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 /**
  * Capable of building an {@link ModelLoader} that wraps one or more other {@link ModelLoader}s for
@@ -15,25 +19,31 @@
  */
 public class MultiModelLoaderFactory {
   private static final Factory DEFAULT_FACTORY = new Factory();
+  private static final ModelLoader<Object, Object> EMPTY_MODEL_LOADER = new EmptyModelLoader();
   private final List<Entry<?, ?>> entries = new ArrayList<>();
   private final Context context;
   private final Factory factory;
+  private final Set<Entry<?, ?>> alreadyUsedEntries = new HashSet<>();
+  private final Pool<List<Exception>> exceptionListPool;
 
-  public MultiModelLoaderFactory(Context context) {
-    this(context, DEFAULT_FACTORY);
+  public MultiModelLoaderFactory(Context context, Pool<List<Exception>> exceptionListPool) {
+    this(context, exceptionListPool, DEFAULT_FACTORY);
   }
 
-  MultiModelLoaderFactory(Context context, Factory factory) {
+  // Visible for testing.
+  MultiModelLoaderFactory(Context context, Pool<List<Exception>> exceptionListPool,
+      Factory factory) {
+    this.exceptionListPool = exceptionListPool;
     this.context = context.getApplicationContext();
     this.factory = factory;
   }
 
-  <Model, Data> void append(Class<Model> modelClass, Class<Data> dataClass,
+  synchronized <Model, Data> void append(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
     add(modelClass, dataClass, factory, true /*append*/);
   }
 
-  <Model, Data> void prepend(Class<Model> modelClass, Class<Data> dataClass,
+  synchronized <Model, Data> void prepend(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
     add(modelClass, dataClass, factory, false /*append*/);
   }
@@ -44,14 +54,14 @@ public MultiModelLoaderFactory(Context context) {
     entries.add(append ? entries.size() : 0, entry);
   }
 
-  <Model, Data> List<ModelLoaderFactory<Model, Data>> replace(Class<Model> modelClass,
+  synchronized <Model, Data> List<ModelLoaderFactory<Model, Data>> replace(Class<Model> modelClass,
       Class<Data> dataClass, ModelLoaderFactory<Model, Data> factory) {
     List<ModelLoaderFactory<Model, Data>> removed = remove(modelClass, dataClass);
     append(modelClass, dataClass, factory);
     return removed;
   }
 
-  <Model, Data> List<ModelLoaderFactory<Model, Data>> remove(Class<Model> modelClass,
+  synchronized <Model, Data> List<ModelLoaderFactory<Model, Data>> remove(Class<Model> modelClass,
       Class<Data> dataClass) {
     List<ModelLoaderFactory<Model, Data>> factories = new ArrayList<>();
     for (Iterator<Entry<?, ?>> iterator = entries.iterator(); iterator.hasNext(); ) {
@@ -64,17 +74,32 @@ public MultiModelLoaderFactory(Context context) {
     return factories;
   }
 
-  <Model> List<ModelLoader<Model, ?>> build(Class<Model> modelClass) {
-    List<ModelLoader<Model, ?>> loaders = new ArrayList<>();
-    for (Entry<?, ?> entry : entries) {
-      if (entry.handles(modelClass)) {
-        loaders.add(this.<Model, Object>build(entry));
+  synchronized <Model> List<ModelLoader<Model, ?>> build(Class<Model> modelClass) {
+    try {
+      List<ModelLoader<Model, ?>> loaders = new ArrayList<>();
+      for (Entry<?, ?> entry : entries) {
+        // Avoid stack overflow recursively creating model loaders by only creating loaders in
+        // recursive requests if they haven't been created earlier in the chain. For example:
+        // A Uri loader may translate to another model, which in turn may translate back to a Uri.
+        // The original Uri loader won't be provided to the intermediate model loader, although
+        // other Uri loaders will be.
+        if (alreadyUsedEntries.contains(entry)) {
+          continue;
+        }
+        if (entry.handles(modelClass)) {
+          alreadyUsedEntries.add(entry);
+          loaders.add(this.<Model, Object>build(entry));
+          alreadyUsedEntries.remove(entry);
+        }
       }
+      return loaders;
+    } catch (Throwable t) {
+      alreadyUsedEntries.clear();
+      throw t;
     }
-    return loaders;
   }
 
-  List<Class<?>> getDataClasses(Class<?> modelClass) {
+  synchronized List<Class<?>> getDataClasses(Class<?> modelClass) {
     List<Class<?>> result = new ArrayList<>();
     for (Entry<?, ?> entry : entries) {
       if (!result.contains(entry.dataClass) && entry.handles(modelClass)) {
@@ -84,20 +109,44 @@ public MultiModelLoaderFactory(Context context) {
     return result;
   }
 
-  public <Model, Data> ModelLoader<Model, Data> build(Class<Model> modelClass,
+  public synchronized <Model, Data> ModelLoader<Model, Data> build(Class<Model> modelClass,
       Class<Data> dataClass) {
-    List<ModelLoader<Model, Data>> loaders = new ArrayList<>();
-    for (Entry<?, ?> entry : entries) {
-      if (entry.handles(modelClass, dataClass)) {
-        loaders.add(this.<Model, Data>build(entry));
+    try {
+      List<ModelLoader<Model, Data>> loaders = new ArrayList<>();
+      boolean ignoredAnyEntries = false;
+      for (Entry<?, ?> entry : entries) {
+        // Avoid stack overflow recursively creating model loaders by only creating loaders in
+        // recursive requests if they haven't been created earlier in the chain. For example:
+        // A Uri loader may translate to another model, which in turn may translate back to a Uri.
+        // The original Uri loader won't be provided to the intermediate model loader, although
+        // other Uri loaders will be.
+        if (alreadyUsedEntries.contains(entry)) {
+          ignoredAnyEntries = true;
+          continue;
+        }
+        if (entry.handles(modelClass, dataClass)) {
+          alreadyUsedEntries.add(entry);
+          loaders.add(this.<Model, Data>build(entry));
+          alreadyUsedEntries.remove(entry);
+        }
       }
-    }
-    if (loaders.size() > 1) {
-      return factory.build(loaders);
-    } else if (loaders.size() == 1) {
-      return loaders.get(0);
-    } else {
-      throw new NoModelLoaderAvailableException(modelClass, dataClass);
+      if (loaders.size() > 1) {
+        return factory.build(loaders, exceptionListPool);
+      } else if (loaders.size() == 1) {
+        return loaders.get(0);
+      } else {
+        // Avoid crashing if recursion results in no loaders available. The assertion is supposed to
+        // catch completely unhandled types, recursion may mean a subtype isn't handled somewhere
+        // down the stack, which is often ok.
+        if (ignoredAnyEntries) {
+          return emptyModelLoader();
+        } else {
+          throw new NoModelLoaderAvailableException(modelClass, dataClass);
+        }
+      }
+    } catch (Throwable t) {
+      alreadyUsedEntries.clear();
+      throw t;
     }
   }
 
@@ -112,6 +161,11 @@ public MultiModelLoaderFactory(Context context) {
         .checkNotNull(entry.factory.build(context, this));
   }
 
+  @SuppressWarnings("unchecked")
+  private static <Model, Data> ModelLoader<Model, Data> emptyModelLoader() {
+    return (ModelLoader<Model, Data>) EMPTY_MODEL_LOADER;
+  }
+
   private static class Entry<Model, Data> {
     private final Class<Model> modelClass;
     private final Class<Data> dataClass;
@@ -135,8 +189,21 @@ public boolean handles(Class<?> modelClass) {
 
   static class Factory {
     public <Model, Data> MultiModelLoader<Model, Data> build(
-        List<ModelLoader<Model, Data>> modelLoaders) {
-      return new MultiModelLoader<>(modelLoaders);
+        List<ModelLoader<Model, Data>> modelLoaders, Pool<List<Exception>> exceptionListPool) {
+      return new MultiModelLoader<>(modelLoaders, exceptionListPool);
+    }
+  }
+
+  private static class EmptyModelLoader implements ModelLoader<Object, Object> {
+
+    @Override
+    public LoadData<Object> buildLoadData(Object o, int width, int height, Options options) {
+      throw new UnsupportedOperationException("EmptyModelLoader does not handle data");
+    }
+
+    @Override
+    public boolean handles(Object o) {
+      return false;
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
index 434aadfb4..8c420ae9f 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
@@ -5,6 +5,7 @@
 import android.content.res.Resources;
 import android.net.Uri;
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
 import com.bumptech.glide.load.Options;
@@ -38,6 +39,7 @@ public ResourceLoader(Resources resources, ModelLoader<Uri, Data> uriLoader) {
     return uri == null ? null : uriLoader.buildLoadData(uri, width, height, options);
   }
 
+  @Nullable
   private Uri getResourceUri(Integer model) {
     try {
       return Uri.parse(ContentResolver.SCHEME_ANDROID_RESOURCE + "://"
diff --git a/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java b/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
index d0148ce8f..5f878b1c5 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.net.Uri;
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.bumptech.glide.load.Options;
@@ -27,7 +28,7 @@ public StringLoader(ModelLoader<Uri, Data> uriLoader) {
   public LoadData<Data> buildLoadData(String model, int width, int height,
       Options options) {
     Uri uri = parseUri(model);
-    return uriLoader.buildLoadData(uri, width, height, options);
+    return uri == null ? null : uriLoader.buildLoadData(uri, width, height, options);
   }
 
   @Override
@@ -35,6 +36,7 @@ public boolean handles(String model) {
     return true;
   }
 
+  @Nullable
   private static Uri parseUri(String model) {
     Uri uri;
     if (TextUtils.isEmpty(model)) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
index 88cfd81a5..d10f4fac6 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model.stream;
 
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.bumptech.glide.load.Key;
@@ -22,19 +23,20 @@
  */
 public abstract class BaseGlideUrlLoader<Model> implements ModelLoader<Model, InputStream> {
   private final ModelLoader<GlideUrl, InputStream> concreteLoader;
-  private final ModelCache<Model, GlideUrl> modelCache;
+  @Nullable private final ModelCache<Model, GlideUrl> modelCache;
 
   protected BaseGlideUrlLoader(ModelLoader<GlideUrl, InputStream> concreteLoader) {
     this(concreteLoader, null);
   }
 
   protected BaseGlideUrlLoader(ModelLoader<GlideUrl, InputStream> concreteLoader,
-      ModelCache<Model, GlideUrl> modelCache) {
+      @Nullable ModelCache<Model, GlideUrl> modelCache) {
     this.concreteLoader = concreteLoader;
     this.modelCache = modelCache;
   }
 
   @Override
+  @Nullable
   public LoadData<InputStream> buildLoadData(Model model, int width, int height, Options options) {
     GlideUrl result = null;
     if (modelCache != null) {
@@ -108,7 +110,8 @@ protected BaseGlideUrlLoader(ModelLoader<GlideUrl, InputStream> concreteLoader,
    * @param width The width in pixels of the view/target the image will be loaded into.
    * @param height The height in pixels of the view/target the image will be loaded into.
    */
+  @Nullable
   protected Headers getHeaders(Model model, int width, int height, Options options) {
-    return Headers.NONE;
+    return Headers.DEFAULT;
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
index 7294128ad..a42d2ca14 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model.stream;
 
 import android.content.Context;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.HttpUrlFetcher;
@@ -17,8 +18,7 @@
  * com.bumptech.glide.load.model.GlideUrl} (http/https URLS) into {@link java.io.InputStream} data.
  */
 public class HttpGlideUrlLoader implements ModelLoader<GlideUrl, InputStream> {
-
-  private final ModelCache<GlideUrl, GlideUrl> modelCache;
+  @Nullable private final ModelCache<GlideUrl, GlideUrl> modelCache;
 
   public HttpGlideUrlLoader() {
     this(null);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
index fef63a214..1ab758391 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.net.Uri;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.mediastore.MediaStoreUtil;
@@ -9,6 +10,7 @@
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
 import com.bumptech.glide.load.model.MultiModelLoaderFactory;
+import com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder;
 import com.bumptech.glide.signature.ObjectKey;
 
 import java.io.InputStream;
@@ -16,6 +18,11 @@
 /**
  * Loads {@link InputStream}s from media store video {@link Uri}s that point to pre-generated
  * thumbnails for those {@link Uri}s in the media store.
+ *
+ * <p>If {@link VideoBitmapDecoder#TARGET_FRAME} is set with a non-null value that is not equal to
+ * {@link VideoBitmapDecoder#DEFAULT_FRAME}, this loader will always return {@code null}. The media
+ * store does not use a defined frame to generate the thumbnail, so we cannot accurately fulfill
+ * requests for specific frames.
  */
 public class MediaStoreVideoThumbLoader implements ModelLoader<Uri, InputStream> {
   private final Context context;
@@ -25,14 +32,20 @@
   }
 
   @Override
+  @Nullable
   public LoadData<InputStream> buildLoadData(Uri model, int width, int height, Options options) {
-    if (MediaStoreUtil.isThumbnailSize(width, height)) {
+    if (MediaStoreUtil.isThumbnailSize(width, height) && isRequestingDefaultFrame(options)) {
       return new LoadData<>(new ObjectKey(model), ThumbFetcher.buildVideoFetcher(context, model));
     } else {
       return null;
     }
   }
 
+  private boolean isRequestingDefaultFrame(Options options) {
+    Long specifiedFrame = options.get(VideoBitmapDecoder.TARGET_FRAME);
+    return specifiedFrame != null && specifiedFrame == VideoBitmapDecoder.DEFAULT_FRAME;
+  }
+
   @Override
   public boolean handles(Uri model) {
     return MediaStoreUtil.isMediaStoreVideoUri(model);
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java
index c3a1d2302..4753d2476 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapResource.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
@@ -21,7 +22,8 @@
    * @param bitmap     A Bitmap.
    * @param bitmapPool A non-null {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool}.
    */
-  public static BitmapResource obtain(Bitmap bitmap, BitmapPool bitmapPool) {
+  @Nullable
+  public static BitmapResource obtain(@Nullable Bitmap bitmap, BitmapPool bitmapPool) {
     if (bitmap == null) {
       return null;
     } else {
@@ -51,8 +53,6 @@ public int getSize() {
 
   @Override
   public void recycle() {
-    if (!bitmapPool.put(bitmap)) {
-      bitmap.recycle();
-    }
+    bitmapPool.put(bitmap);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
index e7190549c..cdd367c82 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.Transformation;
@@ -111,6 +112,6 @@ public BitmapTransformation(BitmapPool bitmapPool) {
    * @param outHeight   The ideal height of the transformed bitmap (the transformed heightdoes not
    *                    need to match exactly).
    */
-  protected abstract Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth,
-      int outHeight);
+  protected abstract Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,
+      int outWidth, int outHeight);
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
index 4ba4a3806..c81d59b9b 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 
@@ -29,14 +30,9 @@ public CenterCrop(BitmapPool bitmapPool) {
   // Bitmap doesn't implement equals, so == and .equals are equivalent here.
   @SuppressWarnings("PMD.CompareObjectsWithEquals")
   @Override
-  protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
-    final Bitmap toReuse = pool.get(outWidth, outHeight,
-        toTransform.getConfig() != null ? toTransform.getConfig() : Bitmap.Config.ARGB_8888);
-    Bitmap transformed = TransformationUtils.centerCrop(toReuse, toTransform, outWidth, outHeight);
-    if (toReuse != null && toReuse != transformed && !pool.put(toReuse)) {
-      toReuse.recycle();
-    }
-    return transformed;
+  protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth,
+      int outHeight) {
+    return TransformationUtils.centerCrop(pool, toTransform, outWidth, outHeight);
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java
index 1bfbb2a1e..39b602969 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CircleCrop.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
-import android.graphics.Bitmap.Config;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 
@@ -15,7 +15,10 @@
  * <p> Uses a PorterDuff blend mode, see http://ssp.impulsetrain.com/porterduff.html. </p>
  */
 public class CircleCrop extends BitmapTransformation {
-  private static final String ID = "com.bumptech.glide.load.resource.bitmap.CircleCrop";
+  // The version of this transformation, incremented to correct an error in a previous version.
+  // See #455.
+  private static final int VERSION = 1;
+  private static final String ID = "com.bumptech.glide.load.resource.bitmap.CircleCrop." + VERSION;
   private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
 
   public CircleCrop(Context context) {
@@ -29,14 +32,9 @@ public CircleCrop(BitmapPool bitmapPool) {
   // Bitmap doesn't implement equals, so == and .equals are equivalent here.
   @SuppressWarnings("PMD.CompareObjectsWithEquals")
   @Override
-  protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
-    final Bitmap toReuse = pool.get(outWidth, outHeight,
-        toTransform.getConfig() != null ? toTransform.getConfig() : Config.ARGB_8888);
-    Bitmap transformed = TransformationUtils.circleCrop(toReuse, toTransform, outWidth, outHeight);
-    if (toReuse != null && toReuse != transformed && !pool.put(toReuse)) {
-      toReuse.recycle();
-    }
-    return transformed;
+  protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth,
+      int outHeight) {
+    return TransformationUtils.circleCrop(pool, toTransform, outWidth, outHeight);
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
index d91b83a23..0ab010b53 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
@@ -12,6 +12,9 @@
    *
    * <p>This method will upscale if the requested width and height are greater than the source width
    * and height. To avoid upscaling, use {@link #AT_LEAST} or {@link #AT_MOST}.
+   *
+   * <p>On pre-KitKat devices, this is equivalent to {@link #AT_MOST} because only power of
+   * two downsampling can be used.
    */
   public static final DownsampleStrategy CENTER_INSIDE = new CenterInside();
 
@@ -22,6 +25,9 @@
    *
    * <p>This method will upscale if the requested width and height are greater than the source width
    * and height. To avoid upscaling, use {@link #AT_LEAST} or {@link #AT_MOST}.
+   *
+   * <p>On pre-KitKat devices, this is equivalent to {@link #AT_LEAST} because only power of
+   * two downsampling can be used.
    */
   public static final DownsampleStrategy CENTER_OUTSIDE = new CenterOutside();
 
@@ -57,6 +63,9 @@
    * {@link android.graphics.BitmapFactory.Options#inDensity}. Because of rounding errors the scale
    * factor may not be applied precisely.
    *
+   * <p>The float scaling factor will only be applied on KitKat+. Prior to KitKat, only the power
+   * of two downsampling will be applied.
+   *
    * @param sourceWidth   The width in pixels of the image to be downsampled.
    * @param sourceHeight  The height in pixels of the image to be downsampled.
    * @param requestedWidth  The width in pixels of the view/target the image will be displayed in.
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 3de34e4f1..065e9796a 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -7,7 +7,6 @@
 import android.util.DisplayMetrics;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
@@ -187,9 +186,9 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
       // the expected density dpi.
       downsampled.setDensity(displayMetrics.densityDpi);
 
-      rotated = TransformationUtils.rotateImageExif(downsampled, bitmapPool, orientation);
-      if (!downsampled.equals(rotated) && !bitmapPool.put(downsampled)) {
-        downsampled.recycle();
+      rotated = TransformationUtils.rotateImageExif(bitmapPool, downsampled, orientation);
+      if (!downsampled.equals(rotated)) {
+        bitmapPool.put(downsampled);
       }
     }
 
@@ -249,8 +248,12 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy, int degreesT
     float adjustedScaleFactor = powerOfTwoSampleSize * exactScaleFactor;
 
     options.inSampleSize = powerOfTwoSampleSize;
-    options.inTargetDensity = (int) (1000 * adjustedScaleFactor + 0.5f);
-    options.inDensity = 1000;
+    // Density scaling is only supported if inBitmap is null prior to KitKat. Avoid setting
+    // densities here so we calculate the final Bitmap size correctly.
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+      options.inTargetDensity = (int) (1000 * adjustedScaleFactor + 0.5f);
+      options.inDensity = 1000;
+    }
     if (isScaling(options)) {
       options.inScaled = true;
     } else {
@@ -271,12 +274,12 @@ static void calculateScaling(DownsampleStrategy downsampleStrategy, int degreesT
 
   private int getOrientation(InputStream is) throws IOException {
     is.mark(MARK_POSITION);
-    int orientation = 0;
+    int orientation = ImageHeaderParser.UNKNOWN_ORIENTATION;
     try {
       orientation = new ImageHeaderParser(is, byteArrayPool).getOrientation();
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Cannot determine the image orientation from header", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Cannot determine the image orientation from header", e);
       }
     } finally {
       is.reset();
@@ -297,8 +300,8 @@ private Bitmap downsampleWithSize(InputStream is, BitmapFactory.Options options,
       int sampleSize = options.inSampleSize;
       int downsampledWidth = (int) Math.ceil(sourceWidth / (float) sampleSize);
       int downsampledHeight = (int) Math.ceil(sourceHeight / (float) sampleSize);
-      int expectedWidth = (int) Math.ceil(downsampledWidth * densityMultiplier);
-      int expectedHeight = (int) Math.ceil(downsampledHeight * densityMultiplier);
+      int expectedWidth = Math.round(downsampledWidth * densityMultiplier);
+      int expectedHeight = Math.round(downsampledHeight * densityMultiplier);
 
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "Calculated target [" + expectedWidth + "x" + expectedHeight + "] for source"
@@ -308,8 +311,11 @@ private Bitmap downsampleWithSize(InputStream is, BitmapFactory.Options options,
             + ", density: " + options.inDensity
             + ", density multiplier: " + densityMultiplier);
       }
-      // BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.
-      setInBitmap(options, pool.getDirty(expectedWidth, expectedHeight, options.inPreferredConfig));
+      // If this isn't an image, or BitmapFactory was unable to parse the size, width and height
+      // will be -1 here.
+      if (expectedWidth > 0 && expectedHeight > 0) {
+        setInBitmap(options, pool, expectedWidth, expectedHeight, options.inPreferredConfig);
+      }
     }
     return decodeStream(is, options, callbacks);
   }
@@ -328,8 +334,8 @@ private boolean shouldUsePool(InputStream is) throws IOException {
       // See: https://groups.google.com/forum/#!msg/android-developers/Mp0MFVFi1Fo/e8ZQ9FGdWdEJ
       return TYPES_THAT_USE_POOL_PRE_KITKAT.contains(type);
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Cannot determine the image type from header", e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Cannot determine the image type from header", e);
       }
     } finally {
       is.reset();
@@ -349,9 +355,9 @@ private boolean shouldUsePool(InputStream is) throws IOException {
     try {
       hasAlpha = new ImageHeaderParser(is, byteArrayPool).hasAlpha();
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.DEBUG)) {
-        Logs.log(Log.DEBUG, "Cannot determine whether the image has alpha or not from header for"
-            + " format " + format, e);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Cannot determine whether the image has alpha or not from header"
+            + ", format " + format, e);
       }
     } finally {
       is.reset();
@@ -460,9 +466,11 @@ private static IOException newIoExceptionForInBitmapAssertion(IllegalArgumentExc
   }
 
   @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-  private static void setInBitmap(BitmapFactory.Options options, Bitmap recycled) {
+  private static void setInBitmap(BitmapFactory.Options options, BitmapPool bitmapPool, int width,
+      int height, Bitmap.Config config) {
     if (Build.VERSION_CODES.HONEYCOMB <= Build.VERSION.SDK_INT) {
-      options.inBitmap = recycled;
+      // BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.
+      options.inBitmap = bitmapPool.getDirty(width, height, config);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java
index 173a10586..9f728b1b3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 
@@ -25,8 +26,9 @@ public FitCenter(BitmapPool bitmapPool) {
   }
 
   @Override
-  protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
-    return TransformationUtils.fitCenter(toTransform, pool, outWidth, outHeight);
+  protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth,
+      int outHeight) {
+    return TransformationUtils.fitCenter(pool, toTransform, outWidth, outHeight);
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
index dccd28500..2411ddab0 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParser.java
@@ -22,6 +22,12 @@
  */
 public class ImageHeaderParser {
   private static final String TAG = "ImageHeaderParser";
+  /**
+   * A constant indicating we were unable to parse the orientation from the image either because
+   * no exif segment containing orientation data existed, or because of an I/O error attempting to
+   * read the exif segment.
+   */
+  public static final int UNKNOWN_ORIENTATION = -1;
 
   /**
    * The format of the image data including whether or not the image may include transparent
@@ -126,51 +132,89 @@ public int getOrientation() throws IOException {
     final int magicNumber = reader.getUInt16();
 
     if (!handles(magicNumber)) {
-      return -1;
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Parser doesn't handle magic number: " + magicNumber);
+      }
+      return UNKNOWN_ORIENTATION;
     } else {
-      byte[] exifData = getExifSegment();
-      boolean hasJpegExifPreamble =
-          exifData != null && exifData.length > JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length;
-
-      if (hasJpegExifPreamble) {
-        for (int i = 0; i < JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length; i++) {
-          if (exifData[i] != JPEG_EXIF_SEGMENT_PREAMBLE_BYTES[i]) {
-            hasJpegExifPreamble = false;
-            break;
-          }
+      int exifSegmentLength = moveToExifSegmentAndGetLength();
+      if (exifSegmentLength == -1) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "Failed to parse exif segment length, or exif segment not found");
         }
+        return UNKNOWN_ORIENTATION;
       }
 
-      if (hasJpegExifPreamble) {
-        return parseExifSegment(new RandomAccessReader(exifData));
-      } else {
-        return -1;
+      byte[] exifData = byteArrayPool.get(exifSegmentLength);
+      try {
+        return parseExifSegment(exifData, exifSegmentLength);
+      } finally {
+        byteArrayPool.put(exifData);
       }
     }
   }
 
-  private byte[] getExifSegment() throws IOException {
+  private int parseExifSegment(byte[] tempArray, int exifSegmentLength) throws IOException {
+    int read = reader.read(tempArray, exifSegmentLength);
+    if (read != exifSegmentLength) {
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Unable to read exif segment data"
+            + ", length: " + exifSegmentLength
+            + ", actually read: " + read);
+      }
+      return UNKNOWN_ORIENTATION;
+    }
+
+    boolean hasJpegExifPreamble = hasJpegExifPreamble(tempArray, exifSegmentLength);
+    if (hasJpegExifPreamble) {
+      return parseExifSegment(new RandomAccessReader(tempArray, exifSegmentLength));
+    } else {
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Missing jpeg exif preamble");
+      }
+      return UNKNOWN_ORIENTATION;
+    }
+  }
+
+  private boolean hasJpegExifPreamble(byte[] exifData, int exifSegmentLength) {
+    boolean result =
+        exifData != null && exifSegmentLength > JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length;
+    if (result) {
+      for (int i = 0; i < JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length; i++) {
+        if (exifData[i] != JPEG_EXIF_SEGMENT_PREAMBLE_BYTES[i]) {
+          result = false;
+          break;
+        }
+      }
+    }
+    return result;
+  }
+
+  /**
+   * Moves reader to the start of the exif segment and returns the length of the exif segment or
+   * {@code -1} if no exif segment is found.
+   */
+  private int moveToExifSegmentAndGetLength() throws IOException {
     short segmentId, segmentType;
     int segmentLength;
     while (true) {
       segmentId = reader.getUInt8();
-
       if (segmentId != SEGMENT_START_ID) {
         if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "Unknown segmentId=" + segmentId);
         }
-        return null;
+        return -1;
       }
 
       segmentType = reader.getUInt8();
 
       if (segmentType == SEGMENT_SOS) {
-        return null;
+        return -1;
       } else if (segmentType == MARKER_EOI) {
         if (Log.isLoggable(TAG, Log.DEBUG)) {
           Log.d(TAG, "Found MARKER_EOI in exif segment");
         }
-        return null;
+        return -1;
       }
 
       // Segment length includes bytes for segment length.
@@ -185,26 +229,10 @@ public int getOrientation() throws IOException {
                     + ", wanted to skip: " + segmentLength
                     + ", but actually skipped: " + skipped);
             }
-            return null;
+            return -1;
         }
       } else {
-        byte[] segmentData = byteArrayPool.get(segmentLength);
-        try {
-          int read = reader.read(segmentData);
-          if (read != segmentLength) {
-            if (Log.isLoggable(TAG, Log.DEBUG)) {
-              Log.d(TAG, "Unable to read segment data"
-                  + ", type: " + segmentType
-                  + ", length: " + segmentLength
-                  + ", actually read: " + read);
-            }
-            return null;
-          } else {
-            return segmentData;
-          }
-        } finally {
-          byteArrayPool.put(segmentData);
-        }
+        return segmentLength;
       }
     }
   }
@@ -260,7 +288,7 @@ private static int parseExifSegment(RandomAccessReader segmentData) {
       }
 
       if (Log.isLoggable(TAG, Log.DEBUG)) {
-        Log.d(TAG, "Got tagIndex=" + i + " tagType=" + tagType + " formatCode =" + formatCode
+        Log.d(TAG, "Got tagIndex=" + i + " tagType=" + tagType + " formatCode=" + formatCode
             + " componentCount=" + componentCount);
       }
 
@@ -309,9 +337,10 @@ private static boolean handles(int imageMagicNumber) {
   private static class RandomAccessReader {
     private final ByteBuffer data;
 
-    public RandomAccessReader(byte[] data) {
-      this.data = ByteBuffer.wrap(data);
-      this.data.order(ByteOrder.BIG_ENDIAN);
+    public RandomAccessReader(byte[] data, int length) {
+      this.data = (ByteBuffer) ByteBuffer.wrap(data)
+          .order(ByteOrder.BIG_ENDIAN)
+          .limit(length);
     }
 
     public void order(ByteOrder byteOrder) {
@@ -319,7 +348,7 @@ public void order(ByteOrder byteOrder) {
     }
 
     public int length() {
-      return data.array().length;
+      return data.remaining();
     }
 
     public int getInt32(int offset) {
@@ -335,7 +364,7 @@ public short getInt16(int offset) {
     int getUInt16() throws IOException;
     short getUInt8() throws IOException;
     long skip(long total) throws IOException;
-    int read(byte[] buffer) throws IOException;
+    int read(byte[] buffer, int byteCount) throws IOException;
     int getByte() throws IOException;
   }
 
@@ -366,9 +395,9 @@ public long skip(long total) throws IOException {
     }
 
     @Override
-    public int read(byte[] buffer) throws IOException {
-      int toRead = Math.min(buffer.length, byteBuffer.remaining());
-      byteBuffer.get(buffer);
+    public int read(byte[] buffer, int byteCount) throws IOException {
+      int toRead = Math.min(byteCount, byteBuffer.remaining());
+      byteBuffer.get(buffer, 0 /*dstOffset*/, byteCount);
       return toRead;
     }
 
@@ -426,13 +455,13 @@ public long skip(long total) throws IOException {
     }
 
     @Override
-    public int read(byte[] buffer) throws IOException {
-      int toRead = buffer.length;
+    public int read(byte[] buffer, int byteCount) throws IOException {
+      int toRead = byteCount;
       int read;
-      while (toRead > 0 && ((read = is.read(buffer, buffer.length - toRead, toRead)) != -1)) {
+      while (toRead > 0 && ((read = is.read(buffer, byteCount - toRead, toRead)) != -1)) {
         toRead -= read;
       }
-      return buffer.length - toRead;
+      return byteCount - toRead;
     }
 
     @Override
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResource.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResource.java
index 83b9abb90..9a4b7b205 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResource.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/LazyBitmapDrawableResource.java
@@ -53,8 +53,6 @@ public int getSize() {
 
   @Override
   public void recycle() {
-    if (!bitmapPool.put(bitmap)) {
-      bitmap.recycle();
-    }
+    bitmapPool.put(bitmap);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
new file mode 100644
index 000000000..33af8b853
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RoundedCorners.java
@@ -0,0 +1,64 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.util.Preconditions;
+
+import java.nio.ByteBuffer;
+import java.security.MessageDigest;
+
+/**
+ * A {@link BitmapTransformation} which rounds the corners of a bitmap.
+ */
+public final class RoundedCorners extends BitmapTransformation {
+  private static final String ID = "com.bumptech.glide.load.resource.bitmap.RoundedCorners";
+  private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
+
+  private final int roundingRadius;
+
+  /**
+   * @param roundingRadius the corner radius (in device-specific pixels).
+   * @throws IllegalArgumentException if rounding radius is 0 or less.
+   */
+  public RoundedCorners(BitmapPool bitmapPool, int roundingRadius) {
+    super(bitmapPool);
+    Preconditions.checkArgument(roundingRadius > 0, "roundingRadius must be greater than 0.");
+    this.roundingRadius = roundingRadius;
+  }
+
+  /**
+   * @param roundingRadius the corner radius (in device-specific pixels).
+   * @throws IllegalArgumentException if rounding radius is 0 or less.
+   */
+  public RoundedCorners(Context context, int roundingRadius) {
+    super(context);
+    Preconditions.checkArgument(roundingRadius > 0, "roundingRadius must be greater than 0.");
+    this.roundingRadius = roundingRadius;
+  }
+
+  @Override
+  protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
+    return TransformationUtils.roundedCorners(pool, toTransform, outWidth, outHeight,
+        roundingRadius);
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    return (o instanceof RoundedCorners) && ((RoundedCorners) o).roundingRadius == roundingRadius;
+  }
+
+  @Override
+  public int hashCode() {
+    return ID.hashCode() + roundingRadius;
+  }
+
+  @Override
+  public void updateDiskCacheKey(MessageDigest messageDigest) {
+    messageDigest.update(ID_BYTES);
+
+    byte[] radiusData = ByteBuffer.allocate(4).putInt(roundingRadius).array();
+    messageDigest.update(radiusData);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
index bb516a1b2..bedf360ba 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java
@@ -37,10 +37,13 @@ public boolean handles(InputStream source, Options options) throws IOException {
 
     // Use to fix the mark limit to avoid allocating buffers that fit entire images.
     final RecyclableBufferedInputStream bufferedStream;
+    final boolean ownsBufferedStream;
     if (source instanceof RecyclableBufferedInputStream) {
       bufferedStream = (RecyclableBufferedInputStream) source;
+      ownsBufferedStream = false;
     } else {
       bufferedStream = new RecyclableBufferedInputStream(source, byteArrayPool);
+      ownsBufferedStream = true;
     }
 
     // Use to retrieve exceptions thrown while reading.
@@ -59,7 +62,9 @@ public boolean handles(InputStream source, Options options) throws IOException {
       return downsampler.decode(invalidatingStream, width, height, options, callbacks);
     } finally {
       exceptionStream.release();
-      bufferedStream.release();
+      if (ownsBufferedStream) {
+        bufferedStream.release();
+      }
     }
   }
 
@@ -93,8 +98,8 @@ public void onDecodeComplete(BitmapPool bitmapPool, Bitmap downsampled) throws I
       // ExceptionCatchingInputStream and throw them here.
       IOException streamException = exceptionStream.getException();
       if (streamException != null) {
-        if (downsampled != null && !bitmapPool.put(downsampled)) {
-          downsampled.recycle();
+        if (downsampled != null) {
+          bitmapPool.put(downsampled);
         }
         throw streamException;
       }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
index bb2582b32..64dff14b9 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
@@ -2,18 +2,23 @@
 
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffXfermode;
 import android.graphics.Rect;
 import android.graphics.RectF;
+import android.graphics.Shader;
 import android.media.ExifInterface;
 import android.os.Build;
+import android.support.annotation.NonNull;
 import android.util.Log;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.util.Preconditions;
 
 /**
  * A class with methods to efficiently resize Bitmaps.
@@ -22,10 +27,12 @@
   private static final String TAG = "TransformationUtils";
   public static final int PAINT_FLAGS = Paint.DITHER_FLAG | Paint.FILTER_BITMAP_FLAG;
   private static final Paint DEFAULT_PAINT = new Paint(PAINT_FLAGS);
-  private static final Paint CIRCLE_CROP_PAINT;
+  private static final int CIRCLE_CROP_PAINT_FLAGS = PAINT_FLAGS | Paint.ANTI_ALIAS_FLAG;
+  private static final Paint CIRCLE_CROP_SHAPE_PAINT = new Paint(CIRCLE_CROP_PAINT_FLAGS);
+  private static final Paint CIRCLE_CROP_BITMAP_PAINT;
   static {
-    CIRCLE_CROP_PAINT = new Paint(PAINT_FLAGS | Paint.ANTI_ALIAS_FLAG);
-    CIRCLE_CROP_PAINT.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
+    CIRCLE_CROP_BITMAP_PAINT = new Paint(CIRCLE_CROP_PAINT_FLAGS);
+    CIRCLE_CROP_BITMAP_PAINT.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
   }
 
   private TransformationUtils() {
@@ -37,17 +44,15 @@ private TransformationUtils() {
    * dimensions. This operation is significantly less expensive in terms of memory if a mutable
    * Bitmap with the given dimensions is passed in as well.
    *
-   * @param recycled A mutable Bitmap with dimensions width and height that we can load the cropped
-   *                 portion of toCrop into.
+   * @param pool     The BitmapPool to obtain a bitmap from.
    * @param toCrop   The Bitmap to resize.
    * @param width    The width in pixels of the final Bitmap.
    * @param height   The height in pixels of the final Bitmap.
    * @return The resized Bitmap (will be recycled if recycled is not null).
    */
-  public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int height) {
-    if (toCrop == null) {
-      return null;
-    } else if (toCrop.getWidth() == width && toCrop.getHeight() == height) {
+  public static Bitmap centerCrop(@NonNull BitmapPool pool, @NonNull Bitmap toCrop, int width,
+      int height) {
+    if (toCrop.getWidth() == width && toCrop.getHeight() == height) {
       return toCrop;
     }
     // From ImageView/Bitmap.createScaledBitmap.
@@ -64,18 +69,14 @@ public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int h
 
     m.setScale(scale, scale);
     m.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
-    final Bitmap result;
-    if (recycled != null) {
-      result = recycled;
-    } else {
-      result = Bitmap.createBitmap(width, height, getSafeConfig(toCrop));
-    }
 
+    Bitmap result = pool.get(width, height, getSafeConfig(toCrop));
     // We don't add or remove alpha, so keep the alpha setting of the Bitmap we were given.
     TransformationUtils.setAlpha(toCrop, result);
 
     Canvas canvas = new Canvas(result);
     canvas.drawBitmap(toCrop, m, DEFAULT_PAINT);
+    clear(canvas);
     return result;
   }
 
@@ -83,14 +84,15 @@ public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int h
    * An expensive operation to resize the given Bitmap down so that it fits within the given
    * dimensions maintain the original proportions.
    *
+   * @param pool   The BitmapPool obtain a bitmap from.
    * @param toFit  The Bitmap to shrink.
-   * @param pool   The BitmapPool to try to reuse a bitmap from.
    * @param width  The width in pixels the final image will fit within.
    * @param height The height in pixels the final image will fit within.
    * @return A new Bitmap shrunk to fit within the given dimensions, or toFit if toFit's width or
    * height matches the given dimensions and toFit fits within the given dimensions
    */
-  public static Bitmap fitCenter(Bitmap toFit, BitmapPool pool, int width, int height) {
+  public static Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull Bitmap toFit, int width,
+      int height) {
     if (toFit.getWidth() == width && toFit.getHeight() == height) {
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "requested target size matches input, returning input");
@@ -116,9 +118,7 @@ public static Bitmap fitCenter(Bitmap toFit, BitmapPool pool, int width, int hei
 
     Bitmap.Config config = getSafeConfig(toFit);
     Bitmap toReuse = pool.get(targetWidth, targetHeight, config);
-    if (toReuse == null) {
-      toReuse = Bitmap.createBitmap(targetWidth, targetHeight, config);
-    }
+
     // We don't add or remove alpha, so keep the alpha setting of the Bitmap we were given.
     TransformationUtils.setAlpha(toFit, toReuse);
 
@@ -133,6 +133,7 @@ public static Bitmap fitCenter(Bitmap toFit, BitmapPool pool, int width, int hei
     Matrix matrix = new Matrix();
     matrix.setScale(minPercentage, minPercentage);
     canvas.drawBitmap(toFit, matrix, DEFAULT_PAINT);
+    clear(canvas);
 
     return toReuse;
   }
@@ -157,31 +158,6 @@ private static void setAlphaIfAvailable(Bitmap bitmap, boolean hasAlpha) {
     }
   }
 
-  /**
-   * Returns a matrix with rotation put based on Exif orientation tag. If the orientation is
-   * undefined or 0 null is returned.
-   *
-   * @param pathToOriginal Path to original image file that may have exif data.
-   * @return A rotation in degrees based on exif orientation
-   * @deprecated No longer used by Glide, scheduled to be removed in Glide 4.0
-   */
-  @TargetApi(Build.VERSION_CODES.ECLAIR)
-  @Deprecated
-  public static int getOrientation(String pathToOriginal) {
-    int degreesToRotate = 0;
-    try {
-      ExifInterface exif = new ExifInterface(pathToOriginal);
-      int orientation =
-          exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);
-      return getExifOrientationDegrees(orientation);
-    } catch (Exception e) {
-      if (Log.isLoggable(TAG, Log.ERROR)) {
-        Log.e(TAG, "Unable to get orientation for image with path=" + pathToOriginal, e);
-      }
-    }
-    return degreesToRotate;
-  }
-
   /**
    * This is an expensive operation that copies the image in place with the pixels rotated. If
    * possible rather use getOrientationMatrix, and put that as the imageMatrix on an ImageView.
@@ -191,15 +167,14 @@ public static int getOrientation(String pathToOriginal) {
    *                        returned unmodified.
    * @return The oriented bitmap. May be the imageToOrient without modification, or a new Bitmap.
    */
-  public static Bitmap rotateImage(Bitmap imageToOrient, int degreesToRotate) {
+  public static Bitmap rotateImage(@NonNull Bitmap imageToOrient, int degreesToRotate) {
     Bitmap result = imageToOrient;
     try {
       if (degreesToRotate != 0) {
         Matrix matrix = new Matrix();
         matrix.setRotate(degreesToRotate);
-        result = Bitmap
-            .createBitmap(imageToOrient, 0, 0, imageToOrient.getWidth(), imageToOrient.getHeight(),
-                matrix, true);
+        result = Bitmap.createBitmap(imageToOrient, 0, 0, imageToOrient.getWidth(),
+            imageToOrient.getHeight(), matrix, true /*filter*/);
       }
     } catch (Exception e) {
       if (Log.isLoggable(TAG, Log.ERROR)) {
@@ -232,7 +207,6 @@ public static int getExifOrientationDegrees(int exifOrientation) {
         break;
       default:
         degreesToRotate = 0;
-
     }
     return degreesToRotate;
   }
@@ -240,13 +214,14 @@ public static int getExifOrientationDegrees(int exifOrientation) {
   /**
    * Rotate and/or flip the image to match the given exif orientation.
    *
-   * @param toOrient        The bitmap to rotate/flip.
    * @param pool            A pool that may or may not contain an image of the necessary
    *                        dimensions.
+   * @param toOrient        The bitmap to rotate/flip.
    * @param exifOrientation the exif orientation [1-8].
    * @return The rotated and/or flipped image or toOrient if no rotation or flip was necessary.
    */
-  public static Bitmap rotateImageExif(Bitmap toOrient, BitmapPool pool, int exifOrientation) {
+  public static Bitmap rotateImageExif(@NonNull BitmapPool pool, @NonNull Bitmap toOrient,
+      int exifOrientation) {
     final Matrix matrix = new Matrix();
     initializeMatrixForRotation(exifOrientation, matrix);
     if (matrix.isIdentity()) {
@@ -262,14 +237,12 @@ public static Bitmap rotateImageExif(Bitmap toOrient, BitmapPool pool, int exifO
 
     Bitmap.Config config = getSafeConfig(toOrient);
     Bitmap result = pool.get(newWidth, newHeight, config);
-    if (result == null) {
-      result = Bitmap.createBitmap(newWidth, newHeight, config);
-    }
 
     matrix.postTranslate(-newRect.left, -newRect.top);
 
     final Canvas canvas = new Canvas(result);
     canvas.drawBitmap(toOrient, matrix, DEFAULT_PAINT);
+    clear(canvas);
 
     return result;
   }
@@ -278,22 +251,14 @@ public static Bitmap rotateImageExif(Bitmap toOrient, BitmapPool pool, int exifO
    * Crop the image to a circle and resize to the specified width/height.  The circle crop will
    * have the same width and height equal to the min-edge of the result image.
    *
-   * @param recycled A mutable Bitmap with dimensions width and height that we can load the cropped
-   *                 portion of toCrop into.
+   * @param pool   The BitmapPool obtain a bitmap from.
    * @param toCrop   The Bitmap to resize.
    * @param destWidth    The width in pixels of the final Bitmap.
    * @param destHeight   The height in pixels of the final Bitmap.
    * @return The resized Bitmap (will be recycled if recycled is not null).
    */
-  public static Bitmap circleCrop(Bitmap recycled, Bitmap toCrop, int destWidth, int destHeight) {
-    if (toCrop == null) {
-      return null;
-    }
-
-    Bitmap result = (recycled != null) ? recycled
-        : Bitmap.createBitmap(destWidth, destHeight, getSafeConfig(toCrop));
-    setAlphaIfAvailable(result, true /*hasAlpha*/);
-
+  public static Bitmap circleCrop(@NonNull BitmapPool pool, @NonNull Bitmap toCrop, int destWidth,
+      int destHeight) {
     int destMinEdge = Math.min(destWidth, destHeight);
     float radius = destMinEdge / 2f;
     Rect destRect = new Rect((destWidth - destMinEdge) / 2, (destHeight - destMinEdge) / 2,
@@ -305,17 +270,76 @@ public static Bitmap circleCrop(Bitmap recycled, Bitmap toCrop, int destWidth, i
     Rect srcRect = new Rect((srcWidth - srcMinEdge) / 2, (srcHeight - srcMinEdge) / 2,
         srcMinEdge, srcMinEdge);
 
+    Bitmap result = pool.get(destWidth, destHeight, getSafeConfig(toCrop));
+    setAlphaIfAvailable(result, true /*hasAlpha*/);
     Canvas canvas = new Canvas(result);
 
     // Draw a circle
-    canvas.drawCircle(destRect.left + radius, destRect.top + radius, radius, CIRCLE_CROP_PAINT);
+    canvas.drawCircle(destRect.left + radius, destRect.top + radius, radius,
+        CIRCLE_CROP_SHAPE_PAINT);
 
     // Draw the bitmap in the circle
-    canvas.drawBitmap(toCrop, srcRect, destRect, CIRCLE_CROP_PAINT);
+    canvas.drawBitmap(toCrop, srcRect, destRect, CIRCLE_CROP_BITMAP_PAINT);
+    clear(canvas);
 
     return result;
   }
 
+  /**
+   * Creates a bitmap from a source bitmap and rounds the corners.
+   *
+   * @param toTransform the source bitmap to use as a basis for the created bitmap.
+   * @param width the width of the generated bitmap.
+   * @param height the height of the generated bitmap.
+   * @param roundingRadius the corner radius to be applied (in device-specific pixels).
+   * @return a {@link Bitmap} similar to toTransform but with rounded corners.
+   * @throws IllegalArgumentException if roundingRadius, width or height is 0 or less.
+   */
+  public static Bitmap roundedCorners(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,
+      int width, int height, int roundingRadius) {
+    Preconditions.checkArgument(width > 0, "width must be greater than 0.");
+    Preconditions.checkArgument(height > 0, "height must be greater than 0.");
+    Preconditions.checkArgument(roundingRadius > 0, "roundingRadius must be greater than 0.");
+
+    boolean recycleToTransform = false;
+
+    // Alpha is required for this transformation.
+    if (!Bitmap.Config.ARGB_8888.equals(toTransform.getConfig())) {
+      Bitmap argbBitmap = pool.get(toTransform.getWidth(), toTransform.getHeight(),
+          Bitmap.Config.ARGB_8888);
+      new Canvas(argbBitmap).drawBitmap(toTransform, 0, 0, null);
+
+      // We now own toTransform. It's our responsibility to replace it in the pool.
+      toTransform = argbBitmap;
+      recycleToTransform = true;
+    }
+    final Bitmap result = pool.get(width, height, Bitmap.Config.ARGB_8888);
+
+    setAlphaIfAvailable(result, true /* hasAlpha */);
+
+    BitmapShader shader = new BitmapShader(toTransform, Shader.TileMode.CLAMP,
+        Shader.TileMode.CLAMP);
+    Paint paint = new Paint();
+    paint.setAntiAlias(true);
+    paint.setShader(shader);
+    RectF rect = new RectF(0, 0, result.getWidth(), result.getHeight());
+    Canvas canvas = new Canvas(result);
+    canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
+    canvas.drawRoundRect(rect, roundingRadius, roundingRadius, paint);
+    clear(canvas);
+
+    if (recycleToTransform) {
+      pool.put(toTransform);
+    }
+
+    return result;
+  }
+
+  // Avoids warnings in M+.
+  private static void clear(Canvas canvas) {
+    canvas.setBitmap(null);
+  }
+
   private static Bitmap.Config getSafeConfig(Bitmap bitmap) {
     return bitmap.getConfig() != null ? bitmap.getConfig() : Bitmap.Config.ARGB_8888;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
index fdd024727..c3cb3f5c6 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.java
@@ -31,9 +31,14 @@
   public static final long DEFAULT_FRAME = -1;
 
   /**
-   * A long indicating the target frame we should provide to
-   * {@link android.media.MediaMetadataRetriever#getFrameAtTime(long)} when extracting a video
-   * frame.
+   * A long indicating the time position (in microseconds) of the target frame which will be
+   * retrieved. {@link android.media.MediaMetadataRetriever#getFrameAtTime(long)} is used to
+   * extract the video frame.
+   *
+   * <p>When retrieving the frame at the given time position, there is no guarantee that the data
+   * source has a frame located at the position. When this happens, a frame nearby will be returned.
+   * If the long is negative, time position and option will ignored, and any frame that the
+   * implementation considers as representative may be returned.
    */
   public static final Option<Long> TARGET_FRAME = Option.disk(
       "com.bumptech.glide.load.resource.bitmap.VideoBitmapDecode.TargetFrame", DEFAULT_FRAME,
@@ -43,12 +48,39 @@
         public void update(byte[] keyBytes, Long value, MessageDigest messageDigest) {
           messageDigest.update(keyBytes);
           synchronized (buffer) {
-            buffer.rewind();
+            buffer.position(0);
             messageDigest.update(buffer.putLong(value).array());
           }
         }
       });
 
+  /**
+   * An integer indicating the frame option used to retrieve a target frame.
+   *
+   * <p>This option will be ignored if {@link #TARGET_FRAME} is not set or is set to
+   * {@link #DEFAULT_FRAME}.
+   *
+   * @see MediaMetadataRetriever#getFrameAtTime(long, int)
+   */
+  public static final Option<Integer> FRAME_OPTION = Option.disk(
+      "com.bumptech.glide.load.resource.bitmap.VideoBitmapDecode.FrameOption",
+      null /*defaultValue*/,
+      new Option.CacheKeyUpdater<Integer>() {
+        private final ByteBuffer buffer = ByteBuffer.allocate(Integer.SIZE / Byte.SIZE);
+        @Override
+        public void update(byte[] keyBytes, Integer value, MessageDigest messageDigest) {
+          if (value == null) {
+            return;
+          }
+          messageDigest.update(keyBytes);
+          synchronized (buffer) {
+            buffer.position(0);
+            messageDigest.update(buffer.putInt(value).array());
+          }
+        }
+      }
+  );
+
   private static final MediaMetadataRetrieverFactory DEFAULT_FACTORY =
       new MediaMetadataRetrieverFactory();
 
@@ -86,19 +118,22 @@ public boolean handles(ParcelFileDescriptor data, Options options) {
   @Override
   public Resource<Bitmap> decode(ParcelFileDescriptor resource, int outWidth, int outHeight,
       Options options) throws IOException {
-    long frame = options.get(TARGET_FRAME);
-    if (frame < 0 && frame != DEFAULT_FRAME) {
+    long frameTimeMicros = options.get(TARGET_FRAME);
+    if (frameTimeMicros < 0 && frameTimeMicros != DEFAULT_FRAME) {
       throw new IllegalArgumentException(
-          "Requested frame must be non-negative, or DEFAULT_FRAME, given: " + frame);
+          "Requested frame must be non-negative, or DEFAULT_FRAME, given: " + frameTimeMicros);
     }
+    Integer frameOption = options.get(FRAME_OPTION);
 
     MediaMetadataRetriever mediaMetadataRetriever = factory.build();
     mediaMetadataRetriever.setDataSource(resource.getFileDescriptor());
     final Bitmap result;
-    if (frame == DEFAULT_FRAME) {
+    if (frameTimeMicros == DEFAULT_FRAME) {
       result = mediaMetadataRetriever.getFrameAtTime();
+    } else if (frameOption == null) {
+      result = mediaMetadataRetriever.getFrameAtTime(frameTimeMicros);
     } else {
-      result = mediaMetadataRetriever.getFrameAtTime(frame);
+      result = mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);
     }
     mediaMetadataRetriever.release();
     resource.close();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
index 191e7b500..815c14b8f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bytes/ByteBufferRewinder.java
@@ -17,7 +17,7 @@ public ByteBufferRewinder(ByteBuffer buffer) {
 
   @Override
   public ByteBuffer rewindAndGet() throws IOException {
-    buffer.rewind();
+    buffer.position(0);
     return buffer;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
index 487421b71..9d8c8a2f2 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
@@ -8,8 +8,8 @@
 /**
  * Contains {@link Drawable} specific animation options.
  */
-public final class DrawableTransitionOptions extends TransitionOptions<DrawableTransitionOptions,
-    Drawable> {
+public final class DrawableTransitionOptions extends
+    TransitionOptions<DrawableTransitionOptions, Drawable> {
 
   public static DrawableTransitionOptions withCrossFade() {
     return new DrawableTransitionOptions().crossFade();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
index 42045a498..da9ba30ff 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
@@ -5,7 +5,6 @@
 import android.util.Log;
 
 import com.bumptech.glide.Glide;
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.gifdecoder.GifHeader;
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
@@ -13,8 +12,10 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
 import com.bumptech.glide.load.resource.UnitTransformation;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType;
@@ -46,31 +47,35 @@
   private final Context context;
   private final GifHeaderParserPool parserPool;
   private final BitmapPool bitmapPool;
-  private final ByteArrayPool byteArrayPool;
   private final GifDecoderFactory gifDecoderFactory;
   private final GifBitmapProvider provider;
 
   public ByteBufferGifDecoder(Context context) {
-    this(context, Glide.get(context).getBitmapPool(), Glide.get(context).getByteArrayPool());
+    this(context, Glide.get(context).getBitmapPool(), Glide.get(context).getArrayPool());
   }
 
-  public ByteBufferGifDecoder(Context context, BitmapPool bitmapPool, ByteArrayPool byteArrayPool) {
-    this(context, bitmapPool, byteArrayPool, PARSER_POOL, GIF_DECODER_FACTORY);
+  public ByteBufferGifDecoder(
+      Context context, BitmapPool bitmapPool, ArrayPool arrayPool) {
+    this(context, bitmapPool, arrayPool, PARSER_POOL, GIF_DECODER_FACTORY);
   }
 
   // Visible for testing.
-  ByteBufferGifDecoder(Context context, BitmapPool bitmapPool, ByteArrayPool byteArrayPool,
-      GifHeaderParserPool parserPool, GifDecoderFactory gifDecoderFactory) {
+  ByteBufferGifDecoder(
+      Context context,
+      BitmapPool bitmapPool,
+      ArrayPool arrayPool,
+      GifHeaderParserPool parserPool,
+      GifDecoderFactory gifDecoderFactory) {
     this.context = context;
     this.bitmapPool = bitmapPool;
-    this.byteArrayPool = byteArrayPool;
     this.gifDecoderFactory = gifDecoderFactory;
-    this.provider = new GifBitmapProvider(bitmapPool);
+    this.provider = new GifBitmapProvider(bitmapPool, arrayPool);
     this.parserPool = parserPool;
   }
 
   @Override
   public boolean handles(ByteBuffer source, Options options) throws IOException {
+    ByteArrayPool byteArrayPool = new LruByteArrayPool();
     return !options.get(DISABLE_ANIMATION)
         && new ImageHeaderParser(source, byteArrayPool).getType() == ImageType.GIF;
   }
@@ -109,8 +114,8 @@ private GifDrawableResource decode(ByteBuffer byteBuffer, int width, int height,
         new GifDrawable(context, gifDecoder, bitmapPool, unitTransformation, width, height,
             firstFrame);
 
-    if (Logs.isEnabled(Log.VERBOSE)) {
-      Logs.log(Log.VERBOSE, "Decoded gif from stream in " + LogTime.getElapsedMillis(startTime));
+    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+      Log.v(TAG, "Decoded gif from stream in " + LogTime.getElapsedMillis(startTime));
     }
 
     return new GifDrawableResource(gifDrawable);
@@ -126,8 +131,8 @@ private static int getSampleSize(GifHeader gifHeader, int targetWidth, int targe
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       Log.v(TAG, "Downsampling gif"
           + ", sampleSize: " + sampleSize
-          + ", target dimens: [" + targetWidth + "x" + targetHeight
-          + ", actual dimens: [" + gifHeader.getWidth() + "x" + gifHeader.getHeight());
+          + ", target dimens: [" + targetWidth + "x" + targetHeight + "]"
+          + ", actual dimens: [" + gifHeader.getWidth() + "x" + gifHeader.getHeight() + "]");
     }
     return sampleSize;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
index 504e0dfe0..0cd50a9ce 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
@@ -2,8 +2,11 @@
 
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.gifdecoder.GifDecoder;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 
 /**
@@ -12,11 +15,26 @@
  */
 public final class GifBitmapProvider implements GifDecoder.BitmapProvider {
   private final BitmapPool bitmapPool;
+  @Nullable private final ArrayPool arrayPool;
 
+  /**
+   * Constructs an instance without a shared byte array pool. Byte arrays will be always constructed
+   * when requested.
+   */
   public GifBitmapProvider(BitmapPool bitmapPool) {
+    this(bitmapPool, null /* arrayPool */);
+  }
+
+  /**
+   * Constructs an instance with a shared array pool. Arrays will be reused where
+   * possible.
+   */
+  public GifBitmapProvider(BitmapPool bitmapPool, ArrayPool arrayPool) {
     this.bitmapPool = bitmapPool;
+    this.arrayPool = arrayPool;
   }
 
+  @NonNull
   @Override
   public Bitmap obtain(int width, int height, Bitmap.Config config) {
     return bitmapPool.getDirty(width, height, config);
@@ -24,8 +42,38 @@ public Bitmap obtain(int width, int height, Bitmap.Config config) {
 
   @Override
   public void release(Bitmap bitmap) {
-    if (!bitmapPool.put(bitmap)) {
-      bitmap.recycle();
+    bitmapPool.put(bitmap);
+  }
+
+  @Override
+  public byte[] obtainByteArray(int size) {
+    if (arrayPool == null) {
+      return new byte[size];
+    }
+    return arrayPool.get(size, byte[].class);
+  }
+
+  @Override
+  public void release(byte[] bytes) {
+    if (arrayPool == null) {
+      return;
+    }
+    arrayPool.put(bytes, byte[].class);
+  }
+
+  @Override
+  public int[] obtainIntArray(int size) {
+    if (arrayPool == null) {
+      return new int[size];
+    }
+    return arrayPool.get(size, int[].class);
+  }
+
+  @Override
+  public void release(int[] array) {
+    if (arrayPool == null) {
+      return;
     }
+    arrayPool.put(array, int[].class);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
index 0dfb13a94..dfcffbc6f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
@@ -134,6 +134,14 @@ public int getFrameCount() {
     return state.frameLoader.getFrameCount();
   }
 
+  /**
+   * Returns the current frame index in the range 0..{@link #getFrameCount()} - 1, or -1 if no frame
+   * is displayed.
+   */
+  public int getFrameIndex() {
+    return state.frameLoader.getCurrentIndex();
+  }
+
   private void resetLoopCount() {
     loopCount = 0;
   }
@@ -254,7 +262,7 @@ public int getOpacity() {
 
   @TargetApi(Build.VERSION_CODES.HONEYCOMB)
   @Override
-  public void onFrameReady(int frameIndex) {
+  public void onFrameReady() {
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && getCallback() == null) {
       stop();
       invalidateSelf();
@@ -263,7 +271,7 @@ public void onFrameReady(int frameIndex) {
 
     invalidateSelf();
 
-    if (frameIndex == state.frameLoader.getFrameCount() - 1) {
+    if (getFrameIndex() == getFrameCount() - 1) {
       loopCount++;
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
index 1eb928d18..5431bca24 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
@@ -46,7 +46,7 @@
   private Transformation<Bitmap> transformation;
 
   public interface FrameCallback {
-    void onFrameReady(int index);
+    void onFrameReady();
   }
 
   public GifFrameLoader(Context context, GifDecoder gifDecoder, int width, int height,
@@ -121,6 +121,10 @@ int getSize() {
     return gifDecoder.getByteSize() + getFrameSize();
   }
 
+  int getCurrentIndex() {
+    return current != null ? current.index : -1;
+  }
+
   private int getFrameSize() {
     return Util.getBitmapByteSize(getCurrentFrame().getWidth(), getCurrentFrame().getHeight(),
         getCurrentFrame().getConfig());
@@ -177,18 +181,19 @@ private void loadNextFrame() {
       return;
     }
     isLoadPending = true;
+    // Get the delay before incrementing the pointer because the delay indicates the amount of time
+    // we want to spend on the current frame.
+    int delay = gifDecoder.getNextDelay();
+    long targetTime = SystemClock.uptimeMillis() + delay;
 
     gifDecoder.advance();
-    long targetTime = SystemClock.uptimeMillis() + gifDecoder.getNextDelay();
     next = new DelayTarget(handler, gifDecoder.getCurrentFrameIndex(), targetTime);
     requestBuilder.clone().apply(signatureOf(new FrameSignature())).load(gifDecoder).into(next);
   }
 
   private void recycleFirstFrame() {
     if (firstFrame != null) {
-      if (!Glide.get(context).getBitmapPool().put(firstFrame)) {
-        firstFrame.recycle();
-      }
+      Glide.get(context).getBitmapPool().put(firstFrame);
       firstFrame = null;
     }
   }
@@ -208,7 +213,7 @@ void onFrameReady(DelayTarget delayTarget) {
       // concurrent modifications.
       for (int i = callbacks.size() - 1; i >= 0; i--) {
         FrameCallback cb = callbacks.get(i);
-        cb.onFrameReady(delayTarget.index);
+        cb.onFrameReady();
       }
       if (previous != null) {
         handler.obtainMessage(FrameLoaderCallback.MSG_CLEAR, previous).sendToTarget();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
index 0bf790f3c..bef067093 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/StreamGifDecoder.java
@@ -2,7 +2,6 @@
 
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -22,6 +21,7 @@
  * the buffer to a wrapped decoder.
  */
 public class StreamGifDecoder implements ResourceDecoder<InputStream, GifDrawable> {
+  private static final String TAG = "StreamGifDecoder";
   /**
    * If set to {@code true}, disables this decoder
    * ({@link #handles(InputStream, Options)} will return {@code false}). Defaults to
@@ -67,8 +67,8 @@ public boolean handles(InputStream source, Options options) throws IOException {
       }
       buffer.flush();
     } catch (IOException e) {
-      if (Logs.isEnabled(Log.WARN)) {
-        Logs.log(Log.WARN, "Error reading data from stream", e);
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Error reading data from stream", e);
       }
       return null;
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
index e6c965436..ad1c55c6e 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/transcode/ResourceTranscoder.java
@@ -11,7 +11,7 @@
 public interface ResourceTranscoder<Z, R> {
 
   /**
-   * Transcodes the given resource to the new resource type and returns the wew resource.
+   * Transcodes the given resource to the new resource type and returns the new resource.
    *
    * @param toTranscode The resource to transcode.
    */
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index f06b68f21..1650bf2f2 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -5,6 +5,8 @@
 import android.app.Activity;
 import android.app.Fragment;
 import android.os.Build;
+import android.support.annotation.Nullable;
+import android.util.Log;
 
 import com.bumptech.glide.RequestManager;
 
@@ -23,14 +25,16 @@
  */
 @TargetApi(Build.VERSION_CODES.HONEYCOMB)
 public class RequestManagerFragment extends Fragment {
+  private static final String TAG = "RMFragment";
   private final ActivityFragmentLifecycle lifecycle;
   private final RequestManagerTreeNode requestManagerTreeNode =
       new FragmentRequestManagerTreeNode();
   private final HashSet<RequestManagerFragment> childRequestManagerFragments =
       new HashSet<>();
 
-  private RequestManager requestManager;
-  private RequestManagerFragment rootRequestManagerFragment;
+  @Nullable private RequestManager requestManager;
+  @Nullable private RequestManagerFragment rootRequestManagerFragment;
+  @Nullable private Fragment parentFragmentHint;
 
   public RequestManagerFragment() {
     this(new ActivityFragmentLifecycle());
@@ -58,6 +62,7 @@ ActivityFragmentLifecycle getLifecycle() {
   /**
    * Returns the current {@link com.bumptech.glide.RequestManager} or null if none exists.
    */
+  @Nullable
   public RequestManager getRequestManager() {
     return requestManager;
   }
@@ -102,6 +107,28 @@ private void removeChildRequestManagerFragment(RequestManagerFragment child) {
     }
   }
 
+  /**
+   * Sets a hint for which fragment is our parent which allows the fragment to return correct
+   * information about its parents before pending fragment transactions have been executed.
+   */
+  void setParentFragmentHint(Fragment parentFragmentHint) {
+    this.parentFragmentHint = parentFragmentHint;
+    if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {
+      registerFragmentWithRoot(parentFragmentHint.getActivity());
+    }
+  }
+
+  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+  private Fragment getParentFragmentUsingHint() {
+    final Fragment fragment;
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+      fragment = getParentFragment();
+    } else {
+      fragment = null;
+    }
+    return fragment != null ? fragment : parentFragmentHint;
+  }
+
   /**
    * Returns true if the fragment is a descendant of our parent.
    */
@@ -117,25 +144,41 @@ private boolean isDescendant(Fragment fragment) {
     return false;
   }
 
-  @Override
-  public void onAttach(Activity activity) {
-    super.onAttach(activity);
-    rootRequestManagerFragment =
-        RequestManagerRetriever.get().getRequestManagerFragment(getActivity().getFragmentManager());
+  private void registerFragmentWithRoot(Activity activity) {
+    unregisterFragmentWithRoot();
+    rootRequestManagerFragment = RequestManagerRetriever.get()
+        .getRequestManagerFragment(activity.getFragmentManager(), null);
     if (rootRequestManagerFragment != this) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
   }
 
-  @Override
-  public void onDetach() {
-    super.onDetach();
+  private void unregisterFragmentWithRoot() {
     if (rootRequestManagerFragment != null) {
       rootRequestManagerFragment.removeChildRequestManagerFragment(this);
       rootRequestManagerFragment = null;
     }
   }
 
+  @Override
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    try {
+      registerFragmentWithRoot(activity);
+    } catch (IllegalArgumentException e) {
+      // OnAttach can be called after the activity is destroyed, see #497.
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Unable to register fragment with root", e);
+      }
+    }
+  }
+
+  @Override
+  public void onDetach() {
+    super.onDetach();
+    unregisterFragmentWithRoot();
+  }
+
   @Override
   public void onStart() {
     super.onStart();
@@ -152,6 +195,7 @@ public void onStop() {
   public void onDestroy() {
     super.onDestroy();
     lifecycle.onDestroy();
+    unregisterFragmentWithRoot();
   }
 
   @Override
@@ -172,6 +216,11 @@ public void onLowMemory() {
     }
   }
 
+  @Override
+  public String toString() {
+    return super.toString() + "{parent=" + getParentFragmentUsingHint() + "}";
+  }
+
   private class FragmentRequestManagerTreeNode implements RequestManagerTreeNode {
     @Override
     public Set<RequestManager> getDescendants() {
@@ -184,5 +233,10 @@ public void onLowMemory() {
       }
       return descendants;
     }
+
+    @Override
+    public String toString() {
+      return super.toString() + "{fragment=" + RequestManagerFragment.this + "}";
+    }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index da5516422..e46936da8 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -25,8 +25,9 @@
  * retrieving existing ones from activities and fragment.
  */
 public class RequestManagerRetriever implements Handler.Callback {
-  private static final String TAG = "RMRetriever";
+  // Visible for testing.
   static final String FRAGMENT_TAG = "com.bumptech.glide.manager";
+  private static final String TAG = "RMRetriever";
 
   /**
    * The singleton instance of RequestManagerRetriever.
@@ -113,7 +114,7 @@ public RequestManager get(FragmentActivity activity) {
     } else {
       assertNotDestroyed(activity);
       FragmentManager fm = activity.getSupportFragmentManager();
-      return supportFragmentGet(activity, fm);
+      return supportFragmentGet(activity, fm, null);
     }
   }
 
@@ -126,7 +127,7 @@ public RequestManager get(Fragment fragment) {
       return get(fragment.getActivity().getApplicationContext());
     } else {
       FragmentManager fm = fragment.getChildFragmentManager();
-      return supportFragmentGet(fragment.getActivity(), fm);
+      return supportFragmentGet(fragment.getActivity(), fm, fragment);
     }
   }
 
@@ -137,7 +138,7 @@ public RequestManager get(Activity activity) {
     } else {
       assertNotDestroyed(activity);
       android.app.FragmentManager fm = activity.getFragmentManager();
-      return fragmentGet(activity, fm);
+      return fragmentGet(activity, fm, null);
     }
   }
 
@@ -158,17 +159,19 @@ public RequestManager get(android.app.Fragment fragment) {
       return get(fragment.getActivity().getApplicationContext());
     } else {
       android.app.FragmentManager fm = fragment.getChildFragmentManager();
-      return fragmentGet(fragment.getActivity(), fm);
+      return fragmentGet(fragment.getActivity(), fm, fragment);
     }
   }
 
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-  RequestManagerFragment getRequestManagerFragment(final android.app.FragmentManager fm) {
+  RequestManagerFragment getRequestManagerFragment(
+      final android.app.FragmentManager fm, android.app.Fragment parentHint) {
     RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);
     if (current == null) {
       current = pendingRequestManagerFragments.get(fm);
       if (current == null) {
         current = new RequestManagerFragment();
+        current.setParentFragmentHint(parentHint);
         pendingRequestManagerFragments.put(fm, current);
         fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();
         handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();
@@ -178,8 +181,9 @@ RequestManagerFragment getRequestManagerFragment(final android.app.FragmentManag
   }
 
   @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-  RequestManager fragmentGet(Context context, android.app.FragmentManager fm) {
-    RequestManagerFragment current = getRequestManagerFragment(fm);
+  RequestManager fragmentGet(Context context, android.app.FragmentManager fm,
+      android.app.Fragment parentHint) {
+    RequestManagerFragment current = getRequestManagerFragment(fm, parentHint);
     RequestManager requestManager = current.getRequestManager();
     if (requestManager == null) {
       requestManager =
@@ -189,13 +193,15 @@ RequestManager fragmentGet(Context context, android.app.FragmentManager fm) {
     return requestManager;
   }
 
-  SupportRequestManagerFragment getSupportRequestManagerFragment(final FragmentManager fm) {
+  SupportRequestManagerFragment getSupportRequestManagerFragment(
+      final FragmentManager fm, Fragment parentHint) {
     SupportRequestManagerFragment current =
         (SupportRequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);
     if (current == null) {
       current = pendingSupportRequestManagerFragments.get(fm);
       if (current == null) {
         current = new SupportRequestManagerFragment();
+        current.setParentFragmentHint(parentHint);
         pendingSupportRequestManagerFragments.put(fm, current);
         fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();
         handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget();
@@ -204,8 +210,8 @@ SupportRequestManagerFragment getSupportRequestManagerFragment(final FragmentMan
     return current;
   }
 
-  RequestManager supportFragmentGet(Context context, FragmentManager fm) {
-    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm);
+  RequestManager supportFragmentGet(Context context, FragmentManager fm, Fragment parentHint) {
+    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);
     RequestManager requestManager = current.getRequestManager();
     if (requestManager == null) {
       requestManager =
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
index f2ea1c39a..48d5882a7 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
@@ -124,4 +124,9 @@ public void restartRequests() {
       }
     }
   }
+
+  @Override
+  public String toString() {
+    return super.toString() + "{numRequests=" + requests.size() + ", isPaused=" + isPaused + "}";
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index 00aa40f9f..6fa4b4c41 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -2,7 +2,10 @@
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.util.Log;
 
 import com.bumptech.glide.RequestManager;
 
@@ -20,14 +23,16 @@
  * @see com.bumptech.glide.RequestManager
  */
 public class SupportRequestManagerFragment extends Fragment {
+  private static final String TAG = "SupportRMFragment";
   private final ActivityFragmentLifecycle lifecycle;
   private final RequestManagerTreeNode requestManagerTreeNode =
       new SupportFragmentRequestManagerTreeNode();
   private final HashSet<SupportRequestManagerFragment> childRequestManagerFragments =
       new HashSet<>();
 
-  private SupportRequestManagerFragment rootRequestManagerFragment;
-  private RequestManager requestManager;
+  @Nullable private SupportRequestManagerFragment rootRequestManagerFragment;
+  @Nullable private RequestManager requestManager;
+  @Nullable private Fragment parentFragmentHint;
 
   public SupportRequestManagerFragment() {
     this(new ActivityFragmentLifecycle());
@@ -55,6 +60,7 @@ ActivityFragmentLifecycle getLifecycle() {
   /**
    * Returns the current {@link com.bumptech.glide.RequestManager} or null if none is put.
    */
+  @Nullable
   public RequestManager getRequestManager() {
     return requestManager;
   }
@@ -89,7 +95,7 @@ private void removeChildRequestManagerFragment(SupportRequestManagerFragment chi
       HashSet<SupportRequestManagerFragment> descendants = new HashSet<>();
       for (SupportRequestManagerFragment fragment : rootRequestManagerFragment
           .getDescendantRequestManagerFragments()) {
-        if (isDescendant(fragment.getParentFragment())) {
+        if (isDescendant(fragment.getParentFragmentUsingHint())) {
           descendants.add(fragment);
         }
       }
@@ -97,11 +103,27 @@ private void removeChildRequestManagerFragment(SupportRequestManagerFragment chi
     }
   }
 
+  /**
+   * Sets a hint for which fragment is our parent which allows the fragment to return correct
+   * information about its parents before pending fragment transactions have been executed.
+   */
+  void setParentFragmentHint(Fragment parentFragmentHint) {
+    this.parentFragmentHint = parentFragmentHint;
+    if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {
+      registerFragmentWithRoot(parentFragmentHint.getActivity());
+    }
+  }
+
+  private Fragment getParentFragmentUsingHint() {
+    Fragment fragment = getParentFragment();
+    return fragment != null ? fragment : parentFragmentHint;
+  }
+
   /**
    * Returns true if the fragment is a descendant of our parent.
    */
   private boolean isDescendant(Fragment fragment) {
-    Fragment root = this.getParentFragment();
+    Fragment root = this.getParentFragmentUsingHint();
     while (fragment.getParentFragment() != null) {
       if (fragment.getParentFragment() == root) {
         return true;
@@ -111,25 +133,42 @@ private boolean isDescendant(Fragment fragment) {
     return false;
   }
 
-  @Override
-  public void onAttach(Activity activity) {
-    super.onAttach(activity);
+  private void registerFragmentWithRoot(FragmentActivity activity) {
+    unregisterFragmentWithRoot();
     rootRequestManagerFragment = RequestManagerRetriever.get()
-        .getSupportRequestManagerFragment(getActivity().getSupportFragmentManager());
+        .getSupportRequestManagerFragment(activity.getSupportFragmentManager(), null);
     if (rootRequestManagerFragment != this) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
   }
 
-  @Override
-  public void onDetach() {
-    super.onDetach();
+  private void unregisterFragmentWithRoot() {
     if (rootRequestManagerFragment != null) {
       rootRequestManagerFragment.removeChildRequestManagerFragment(this);
       rootRequestManagerFragment = null;
     }
   }
 
+  @Override
+  public void onAttach(Activity activity) {
+    super.onAttach(activity);
+    try {
+      registerFragmentWithRoot(getActivity());
+    } catch (IllegalArgumentException e) {
+      // OnAttach can be called after the activity is destroyed, see #497.
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Unable to register fragment with root", e);
+      }
+    }
+  }
+
+  @Override
+  public void onDetach() {
+    super.onDetach();
+    parentFragmentHint = null;
+    unregisterFragmentWithRoot();
+  }
+
   @Override
   public void onStart() {
     super.onStart();
@@ -146,6 +185,7 @@ public void onStop() {
   public void onDestroy() {
     super.onDestroy();
     lifecycle.onDestroy();
+    unregisterFragmentWithRoot();
   }
 
   @Override
@@ -158,6 +198,11 @@ public void onLowMemory() {
     }
   }
 
+  @Override
+  public String toString() {
+    return super.toString() + "{parent=" + getParentFragmentUsingHint() + "}";
+  }
+
   private class SupportFragmentRequestManagerTreeNode implements RequestManagerTreeNode {
     @Override
     public Set<RequestManager> getDescendants() {
@@ -171,5 +216,10 @@ public void onLowMemory() {
       }
       return descendants;
     }
+
+    @Override
+    public String toString() {
+      return super.toString() + "{fragment=" + SupportRequestManagerFragment.this + "}";
+    }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java b/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java
new file mode 100644
index 000000000..6c83dd896
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java
@@ -0,0 +1,56 @@
+package com.bumptech.glide.manager;
+
+import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.util.Util;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.WeakHashMap;
+
+/**
+ * Holds the set of {@link Target}s currently active for a
+ * {@link com.bumptech.glide.RequestManager} and forwards on lifecycle events.
+ */
+public final class TargetTracker implements LifecycleListener {
+  private final Set<Target<?>> targets =
+      Collections.newSetFromMap(new WeakHashMap<Target<?>, Boolean>());
+
+  public void track(Target<?> target) {
+    targets.add(target);
+  }
+
+  public void untrack(Target<?> target) {
+    targets.remove(target);
+  }
+
+  @Override
+  public void onStart() {
+    for (Target<?> target : Util.getSnapshot(targets)) {
+      target.onStart();
+    }
+  }
+
+  @Override
+  public void onStop() {
+    for (Target<?> target : Util.getSnapshot(targets)) {
+      target.onStop();
+    }
+  }
+
+  @Override
+  public void onDestroy() {
+    for (Target<?> target : Util.getSnapshot(targets)) {
+      target.onDestroy();
+    }
+  }
+
+  public List<Target<?>> getAll() {
+    return new ArrayList<>(targets);
+  }
+
+  public void clear() {
+    targets.clear();
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
index 6327df5be..915bd0024 100644
--- a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.Encoder;
 
 import java.util.ArrayList;
@@ -13,6 +15,7 @@
   private final List<Entry<?>> encoders = new ArrayList<>();
 
   @SuppressWarnings("unchecked")
+  @Nullable
   public synchronized <T> Encoder<T> getEncoder(Class<T> dataClass) {
     for (Entry<?> entry : encoders) {
       if (entry.handles(dataClass)) {
diff --git a/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java b/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java
index cd538df13..f9c68b34a 100644
--- a/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java
+++ b/library/src/main/java/com/bumptech/glide/provider/LoadPathCache.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 
 import com.bumptech.glide.load.engine.LoadPath;
@@ -26,6 +27,7 @@ public boolean contains(Class<?> dataClass, Class<?> resourceClass, Class<?> tra
   }
 
   @SuppressWarnings("unchecked")
+  @Nullable
   public <Data, TResource, Transcode> LoadPath<Data, TResource, Transcode> get(
       Class<Data> dataClass, Class<TResource> resourceClass, Class<Transcode> transcodeClass) {
     MultiClassKey key = getKey(dataClass, resourceClass, transcodeClass);
diff --git a/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
index 5c71f504e..01e771d7d 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 
 import com.bumptech.glide.util.MultiClassKey;
@@ -16,6 +17,7 @@
   private final ArrayMap<MultiClassKey, List<Class<?>>> registeredResourceClassCache =
       new ArrayMap<>();
 
+  @Nullable
   public List<Class<?>> get(Class<?> modelClass, Class<?> resourceClass) {
     MultiClassKey key = resourceClassKeyRef.getAndSet(null);
     if (key == null) {
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
index 3144221c9..e5f5ef9c7 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.ResourceEncoder;
 
 import java.util.ArrayList;
@@ -18,6 +20,7 @@
   }
 
   @SuppressWarnings("unchecked")
+  @Nullable
   public synchronized <Z> ResourceEncoder<Z> get(Class<Z> resourceClass) {
     int size = encoders.size();
     for (int i = 0; i < size; i++) {
diff --git a/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java
index 279d8f91f..c23a56923 100644
--- a/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java
@@ -1,9 +1,12 @@
 package com.bumptech.glide.request;
 
 import android.content.Context;
+import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DecodeFormat;
@@ -12,10 +15,10 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.UnitTransformation;
 import com.bumptech.glide.load.resource.bitmap.BitmapDrawableTransformation;
 import com.bumptech.glide.load.resource.bitmap.BitmapEncoder;
 import com.bumptech.glide.load.resource.bitmap.CenterCrop;
+import com.bumptech.glide.load.resource.bitmap.CircleCrop;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
 import com.bumptech.glide.load.resource.bitmap.Downsampler;
 import com.bumptech.glide.load.resource.bitmap.FitCenter;
@@ -53,11 +56,13 @@
   private static final int IS_CACHEABLE = 1 << 8;
   private static final int OVERRIDE = 1 << 9;
   private static final int SIGNATURE = 1 << 10;
-  private static final int TAG = 1 << 11;
-  private static final int TRANSFORMATION = 1 << 12;
-  private static final int RESOURCE_CLASS = 1 << 13;
-  private static final int FALLBACK = 1 << 14;
-  private static final int FALLBACK_ID = 1 << 15;
+  private static final int TRANSFORMATION = 1 << 11;
+  private static final int RESOURCE_CLASS = 1 << 12;
+  private static final int FALLBACK = 1 << 13;
+  private static final int FALLBACK_ID = 1 << 14;
+  private static final int THEME = 1 << 15;
+  private static final int TRANSFORMATION_ALLOWED = 1 << 16;
+  private static final int TRANSFORMATION_REQUIRED = 1 << 17;
 
   private int fields;
 
@@ -72,8 +77,8 @@
   private int overrideHeight = UNSET;
   private int overrideWidth = UNSET;
   private Key signature = EmptySignature.obtain();
-  private String tag;
   private boolean isTransformationRequired;
+  private boolean isTransformationAllowed = true;
   private Drawable fallbackDrawable;
   private int fallbackId;
 
@@ -81,12 +86,8 @@
   private Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
   private Class<?> resourceClass = Object.class;
   private boolean isLocked;
-
-  public final CHILD tag(String tag) {
-    this.tag = tag;
-    fields |= TAG;
-    return selfOrThrowIfLocked();
-  }
+  private Resources.Theme theme;
+  private boolean isAutoCloneEnabled;
 
   /**
    * Applies a multiplier to the {@link com.bumptech.glide.request.target.Target}'s size before
@@ -99,6 +100,10 @@ public final CHILD tag(String tag) {
    * @return This request builder.
    */
   public final CHILD sizeMultiplier(float sizeMultiplier) {
+    if (isAutoCloneEnabled) {
+      return clone().sizeMultiplier(sizeMultiplier);
+    }
+
     if (sizeMultiplier < 0f || sizeMultiplier > 1f) {
       throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");
     }
@@ -122,7 +127,10 @@ public final CHILD sizeMultiplier(float sizeMultiplier) {
    * @param strategy The strategy to use.
    * @return This request builder.
    */
-  public final CHILD diskCacheStrategy(DiskCacheStrategy strategy) {
+  public final CHILD diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    if (isAutoCloneEnabled) {
+      return clone().diskCacheStrategy(strategy);
+    }
     this.diskCacheStrategy = Preconditions.checkNotNull(strategy);
     fields |= DISK_CACHE_STRATEGY;
 
@@ -135,7 +143,11 @@ public final CHILD diskCacheStrategy(DiskCacheStrategy strategy) {
    * @param priority A priority.
    * @return This request builder.
    */
-  public final CHILD priority(Priority priority) {
+  public final CHILD priority(@NonNull Priority priority) {
+    if (isAutoCloneEnabled) {
+      return clone().priority(priority);
+    }
+
     this.priority = Preconditions.checkNotNull(priority);
     fields |= PRIORITY;
 
@@ -148,7 +160,11 @@ public final CHILD priority(Priority priority) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
-  public final CHILD placeholder(Drawable drawable) {
+  public final CHILD placeholder(@Nullable Drawable drawable) {
+    if (isAutoCloneEnabled) {
+      return clone().placeholder(drawable);
+    }
+
     this.placeholderDrawable = drawable;
     fields |= PLACEHOLDER;
 
@@ -163,6 +179,10 @@ public final CHILD placeholder(Drawable drawable) {
    * @return This request builder.
    */
   public final CHILD placeholder(int resourceId) {
+    if (isAutoCloneEnabled) {
+      return clone().placeholder(resourceId);
+    }
+
     this.placeholderId = resourceId;
     fields |= PLACEHOLDER_ID;
 
@@ -183,6 +203,10 @@ public final CHILD placeholder(int resourceId) {
    * @return This request builder.
    */
   public final CHILD fallback(Drawable drawable) {
+    if (isAutoCloneEnabled) {
+      return clone().fallback(drawable);
+    }
+
     this.fallbackDrawable = drawable;
     fields |= FALLBACK;
 
@@ -203,6 +227,10 @@ public final CHILD fallback(Drawable drawable) {
    * @return This request builder.
    */
   public final CHILD fallback(int resourceId) {
+    if (isAutoCloneEnabled) {
+      return clone().fallback(resourceId);
+    }
+
     this.fallbackId = resourceId;
     fields |= FALLBACK_ID;
 
@@ -215,7 +243,11 @@ public final CHILD fallback(int resourceId) {
    * @param drawable The drawable to display.
    * @return This request builder.
    */
-  public final CHILD error(Drawable drawable) {
+  public final CHILD error(@Nullable Drawable drawable) {
+    if (isAutoCloneEnabled) {
+      return clone().error(drawable);
+    }
+
     this.errorPlaceholder = drawable;
     fields |= ERROR_PLACEHOLDER;
 
@@ -229,12 +261,34 @@ public final CHILD error(Drawable drawable) {
    * @return This request builder.
    */
   public final CHILD error(int resourceId) {
+    if (isAutoCloneEnabled) {
+      return clone().error(resourceId);
+    }
     this.errorId = resourceId;
     fields |= ERROR_ID;
 
     return selfOrThrowIfLocked();
   }
 
+  /**
+   * Sets the {@link android.content.res.Resources.Theme} to apply when loading {@link Drawable}s
+   * for resource ids provided via {@link #error(int)}, {@link #placeholder(int)}, and
+   * {@link #fallback(Drawable)}.
+   *
+   * @param theme The theme to use when loading Drawables.
+   * @return this request builder.
+   */
+  public final CHILD theme(Resources.Theme theme) {
+    if (isAutoCloneEnabled) {
+      return clone().theme(theme);
+    }
+
+    this.theme = theme;
+    fields |= THEME;
+
+    return selfOrThrowIfLocked();
+  }
+
   /**
    * Allows the loaded resource to skip the memory cache.
    *
@@ -245,6 +299,10 @@ public final CHILD error(int resourceId) {
    * @return This request builder.
    */
   public final CHILD skipMemoryCache(boolean skip) {
+    if (isAutoCloneEnabled) {
+      return clone().skipMemoryCache(true);
+    }
+
     this.isCacheable = !skip;
     fields |= IS_CACHEABLE;
 
@@ -261,6 +319,10 @@ public final CHILD skipMemoryCache(boolean skip) {
    * @return This request builder.
    */
   public final CHILD override(int width, int height) {
+    if (isAutoCloneEnabled) {
+      return clone().override(width, height);
+    }
+
     this.overrideWidth = width;
     this.overrideHeight = height;
     fields |= OVERRIDE;
@@ -268,6 +330,18 @@ public final CHILD override(int width, int height) {
     return selfOrThrowIfLocked();
   }
 
+  /**
+   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
+   * given size.
+   *
+   * @see #override(int, int)
+   * @param size The width and height to use.
+   * @return This request builder.
+   */
+  public final CHILD override(int size) {
+    return override(size, size);
+  }
+
   /**
    * Sets some additional data to be mixed in to the memory and disk cache keys allowing the caller
    * more control over when cached data is invalidated.
@@ -279,7 +353,11 @@ public final CHILD override(int width, int height) {
    * @return This request builder.
    * @see com.bumptech.glide.signature.StringSignature
    */
-  public final CHILD signature(Key signature) {
+  public final CHILD signature(@NonNull Key signature) {
+    if (isAutoCloneEnabled) {
+      return clone().signature(signature);
+    }
+
     this.signature = Preconditions.checkNotNull(signature);
     fields |= SIGNATURE;
     return selfOrThrowIfLocked();
@@ -306,23 +384,38 @@ public final CHILD clone() {
       result.transformations = new HashMap<>();
       result.transformations.putAll(transformations);
       result.isLocked = false;
+      result.isAutoCloneEnabled = false;
       return (CHILD) result;
     } catch (CloneNotSupportedException e) {
       throw new RuntimeException(e);
     }
   }
 
-  public final <T> CHILD set(Option<T> option, T value) {
+  public final <T> CHILD set(@NonNull Option<T> option, @NonNull T value) {
+    if (isAutoCloneEnabled) {
+      return clone().set(option, value);
+    }
+
+    Preconditions.checkNotNull(option);
+    Preconditions.checkNotNull(value);
     options.set(option, value);
     return selfOrThrowIfLocked();
   }
 
-  public final CHILD decode(Class<?> resourceClass) {
+  public final CHILD decode(@NonNull Class<?> resourceClass) {
+    if (isAutoCloneEnabled) {
+      return clone().decode(resourceClass);
+    }
+
     this.resourceClass = Preconditions.checkNotNull(resourceClass);
     fields |= RESOURCE_CLASS;
     return selfOrThrowIfLocked();
   }
 
+  public final boolean isTransformationAllowed() {
+    return isTransformationAllowed;
+  }
+
   public final boolean isTransformationSet() {
     return isSet(TRANSFORMATION);
   }
@@ -335,80 +428,151 @@ public final boolean isLocked() {
    * Sets the value for key
    * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
    */
-  public CHILD encodeFormat(Bitmap.CompressFormat format) {
-    return set(BitmapEncoder.COMPRESSION_FORMAT, format);
+  public CHILD encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
   }
 
   /**
    * Sets the value for key
    * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_QUALITY}.
    */
-  public CHILD encodeQuality(Integer quality) {
+  public CHILD encodeQuality(int quality) {
     return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
   }
 
-  public CHILD format(DecodeFormat format) {
+  /**
+   * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using
+   * {@link Downsampler}.
+   *
+   * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be
+   * decoded using a decoder that cannot control the format
+   * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to
+   * ignore the requested format if it can't display the image (ie RGB_565 is requested, but the
+   * image has alpha).
+   */
+  public CHILD format(@NonNull DecodeFormat format) {
     return set(Downsampler.DECODE_FORMAT, Preconditions.checkNotNull(format));
   }
 
-  public CHILD frame(long frame) {
-    return set(VideoBitmapDecoder.TARGET_FRAME, frame);
+  /**
+   * Sets the time position of the frame to extract from a video.
+   *
+   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
+   *                        Android framework implementation return a representative frame.
+   */
+  public CHILD frame(long frameTimeMicros) {
+    return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);
   }
 
-  public CHILD downsample(DownsampleStrategy strategy) {
-    return set(Downsampler.DOWNSAMPLE_STRATEGY, strategy);
+  /**
+   * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using
+   * {@link Downsampler}.
+   */
+  public CHILD downsample(@NonNull DownsampleStrategy strategy) {
+    return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));
   }
 
   /**
    * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types, and
    * ignores unknown types.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param context Any {@link android.content.Context}.
    * @see #optionalTransform(Class, com.bumptech.glide.load.Transformation)
    * @see #centerCrop(android.content.Context)
    */
   public CHILD optionalCenterCrop(Context context) {
-    downsample(DownsampleStrategy.CENTER_OUTSIDE);
-    return optionalTransform(context, new CenterCrop(context));
+    return optionalTransform(context, DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop(context));
   }
 
   /**
    * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types and
    * throws an exception if asked to transform an unknown type.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param context Any {@link android.content.Context}.
    * @see #transform(Class, com.bumptech.glide.load.Transformation)
    * @see #optionalCenterCrop(android.content.Context)
    */
   public CHILD centerCrop(Context context) {
-    downsample(DownsampleStrategy.CENTER_OUTSIDE);
-    return transform(context, new CenterCrop(context));
+    return transform(context, DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop(context));
   }
 
   /**
    * Applies {@link com.bumptech.glide.load.resource.bitmap.FitCenter} to all default types, and
    * ignores unknown types.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param context Any {@link android.content.Context}.
    * @see #optionalTransform(Class, com.bumptech.glide.load.Transformation)
    * @see #fitCenter(android.content.Context)
    */
   public CHILD optionalFitCenter(Context context) {
-    downsample(DownsampleStrategy.CENTER_INSIDE);
-    return optionalTransform(context, new FitCenter(context));
+    return optionalTransform(context, DownsampleStrategy.CENTER_INSIDE, new FitCenter(context));
   }
 
   /**
    * Applies {@link com.bumptech.glide.load.resource.bitmap.FitCenter} to all default types and
    * throws an exception if asked to transform an unknown type.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param context Any {@link android.content.Context}.
    * @see #transform(Class, com.bumptech.glide.load.Transformation)
    * @see #optionalFitCenter(android.content.Context)
    */
   public CHILD fitCenter(Context context) {
-    downsample(DownsampleStrategy.CENTER_INSIDE);
-    return transform(context, new FitCenter(context));
+    return transform(context, DownsampleStrategy.CENTER_INSIDE, new FitCenter(context));
+  }
+
+  /**
+   * Applies {@link CircleCrop} to all default types, and ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param context Any {@link Context}.
+   * @see #optionalTransform(Context, Transformation)
+   * @see #circleCrop(Context)
+   */
+  public CHILD optionalCircleCrop(Context context) {
+    return optionalTransform(context, DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop(context));
+  }
+
+  /**
+   * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform
+   * an unknown type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param context Any {@link Context}.
+   * @see #transform(Class, Transformation)
+   * @see #optionalCenterCrop(Context)
+   */
+  public CHILD circleCrop(Context context) {
+    return transform(context, DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop(context));
+  }
+
+  final CHILD optionalTransform(Context context, DownsampleStrategy downsampleStrategy,
+      Transformation<Bitmap> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().optionalTransform(context, downsampleStrategy, transformation);
+    }
+
+    downsample(downsampleStrategy);
+    return optionalTransform(context, transformation);
+  }
+
+  final CHILD transform(Context context, DownsampleStrategy downsampleStrategy,
+      Transformation<Bitmap> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().transform(context, downsampleStrategy, transformation);
+    }
+
+    downsample(downsampleStrategy);
+    return transform(context, transformation);
   }
 
   /**
@@ -418,15 +582,22 @@ public CHILD fitCenter(Context context) {
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
    * and throws an exception if asked to transform an unknown type.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param context        Any {@link android.content.Context}.
    * @param transformation Any {@link com.bumptech.glide.load.Transformation} for
    *                       {@link android.graphics.Bitmap}s.
    * @see #optionalTransform(android.content.Context, com.bumptech.glide.load.Transformation)
    * @see #optionalTransform(Class, com.bumptech.glide.load.Transformation)
    */
-  public CHILD transform(Context context, Transformation<Bitmap> transformation) {
+  public CHILD transform(Context context, @NonNull Transformation<Bitmap> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().transform(context, transformation);
+    }
+
     optionalTransform(context, transformation);
     isTransformationRequired = true;
+    fields |= TRANSFORMATION_REQUIRED;
     return selfOrThrowIfLocked();
   }
 
@@ -436,6 +607,8 @@ public CHILD transform(Context context, Transformation<Bitmap> transformation) {
    * {@link android.graphics.drawable.BitmapDrawable}, and
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and ignores unknown types.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param context        Any {@link android.content.Context}.
    * @param transformation Any {@link com.bumptech.glide.load.Transformation} for
    *                       {@link android.graphics.Bitmap}s.
@@ -443,6 +616,10 @@ public CHILD transform(Context context, Transformation<Bitmap> transformation) {
    * @see #transform(Class, com.bumptech.glide.load.Transformation)
    */
   public CHILD optionalTransform(Context context, Transformation<Bitmap> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().optionalTransform(context, transformation);
+    }
+
     optionalTransform(Bitmap.class, transformation);
     // TODO: remove BitmapDrawable decoder and this transformation.
     optionalTransform(BitmapDrawable.class,
@@ -463,15 +640,23 @@ public CHILD optionalTransform(Context context, Transformation<Bitmap> transform
    * an unknown resource class will throw an exception. To allow unknown types, users must always
    * call the optional version of each method. </p>
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param resourceClass  The type of resource to transform.
    * @param transformation The {@link com.bumptech.glide.load.Transformation} to apply.
    */
   public final <T> CHILD optionalTransform(Class<T> resourceClass,
       Transformation<T> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().optionalTransform(resourceClass, transformation);
+    }
+
     Preconditions.checkNotNull(resourceClass);
     Preconditions.checkNotNull(transformation);
-    fields |= TRANSFORMATION;
     transformations.put(resourceClass, transformation);
+    fields |= TRANSFORMATION;
+    isTransformationAllowed = true;
+    fields |= TRANSFORMATION_ALLOWED;
     return selfOrThrowIfLocked();
   }
 
@@ -479,13 +664,20 @@ public CHILD optionalTransform(Context context, Transformation<Bitmap> transform
    * Applies the given {@link com.bumptech.glide.load.Transformation} for any decoded resource of
    * the given type and throws if asked to transform an unknown resource type.
    *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
    * @param resourceClass  The type of resource to transform.
    * @param transformation The {@link com.bumptech.glide.load.Transformation} to apply.
    * @see #optionalTransform(Class, com.bumptech.glide.load.Transformation)
    */
   public final <T> CHILD transform(Class<T> resourceClass, Transformation<T> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().transform(resourceClass, transformation);
+    }
+
     optionalTransform(resourceClass, transformation);
     isTransformationRequired = true;
+    fields |= TRANSFORMATION_REQUIRED;
     return selfOrThrowIfLocked();
   }
 
@@ -495,9 +687,16 @@ public CHILD optionalTransform(Context context, Transformation<Bitmap> transform
    * exception.
    */
   public final CHILD dontTransform() {
-    fields &= ~TRANSFORMATION;
+    if (isAutoCloneEnabled) {
+      return clone().dontTransform();
+    }
+
     transformations.clear();
+    fields &= ~TRANSFORMATION;
     isTransformationRequired = false;
+    fields &= ~TRANSFORMATION_REQUIRED;
+    isTransformationAllowed = false;
+    fields |= TRANSFORMATION_ALLOWED;
     return selfOrThrowIfLocked();
   }
 
@@ -509,54 +708,29 @@ public final CHILD dontTransform() {
    * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
    */
   public final CHILD dontAnimate() {
+    if (isAutoCloneEnabled) {
+      return clone().dontAnimate();
+    }
+
     set(ByteBufferGifDecoder.DISABLE_ANIMATION, true);
     set(StreamGifDecoder.DISABLE_ANIMATION, true);
     return selfOrThrowIfLocked();
   }
 
-  public final Map<Class<?>, Transformation<?>> getTransformations() {
-    return transformations;
-  }
-
-  @SuppressWarnings("unchecked")
-  public final <T> Transformation<T> getTransformation(Class<T> resourceClass) {
-    Transformation<T> result = (Transformation<T>) transformations.get(resourceClass);
-    if (result == null) {
-      if (!transformations.isEmpty() && isTransformationRequired) {
-        throw new IllegalArgumentException(
-            "Missing transformation for " + resourceClass + ". If you wish to"
-                + " ignore unknown resource types, use the optional transformation methods.");
-      } else {
-        return UnitTransformation.get();
-      }
+  public final CHILD apply(BaseRequestOptions<?> other) {
+    if (isAutoCloneEnabled) {
+      return clone().apply(other);
     }
-    return result;
-  }
 
-  /**
-   * Throws if any further mutations are attempted.
-   *
-   * <p> Once locked, the only way to unlock is to use {@link #clone()} </p>
-   */
-  @SuppressWarnings("unchecked")
-  public final CHILD lock() {
-    isLocked = true;
-    // This is the only place we should not check locked.
-    return (CHILD) this;
-  }
-
-  public final Options getOptions() {
-    return options;
-  }
-
-  public final Class<?> getResourceClass() {
-    return resourceClass;
-  }
-
-  public final CHILD apply(BaseRequestOptions<?> other) {
+    if (isSet(other.fields, SIZE_MULTIPLIER)) {
+      sizeMultiplier = other.sizeMultiplier;
+    }
     if (isSet(other.fields, DISK_CACHE_STRATEGY)) {
       diskCacheStrategy = other.diskCacheStrategy;
     }
+    if (isSet(other.fields, PRIORITY)) {
+      priority = other.priority;
+    }
     if (isSet(other.fields, ERROR_PLACEHOLDER)) {
       errorPlaceholder = other.errorPlaceholder;
     }
@@ -569,43 +743,105 @@ public final CHILD apply(BaseRequestOptions<?> other) {
     if (isSet(other.fields, PLACEHOLDER_ID)) {
       placeholderId = other.placeholderId;
     }
-    if (isSet(other.fields, FALLBACK)) {
-      fallbackDrawable = other.fallbackDrawable;
-    }
-    if (isSet(other.fields, FALLBACK_ID)) {
-      fallbackId = other.fallbackId;
-    }
     if (isSet(other.fields, IS_CACHEABLE)) {
       isCacheable = other.isCacheable;
     }
-    if (isSet(other.fields, SIGNATURE)) {
-      signature = other.signature;
-    }
-    if (isSet(other.fields, PRIORITY)) {
-      priority = other.priority;
-    }
     if (isSet(other.fields, OVERRIDE)) {
       overrideWidth = other.overrideWidth;
       overrideHeight = other.overrideHeight;
     }
-    if (isSet(other.fields, SIZE_MULTIPLIER)) {
-      sizeMultiplier = other.sizeMultiplier;
-    }
-    if (isSet(other.fields, TAG)) {
-      tag = other.tag;
+    if (isSet(other.fields, SIGNATURE)) {
+      signature = other.signature;
     }
     if (isSet(other.fields, RESOURCE_CLASS)) {
       resourceClass = other.resourceClass;
     }
+    if (isSet(other.fields, FALLBACK)) {
+      fallbackDrawable = other.fallbackDrawable;
+    }
+    if (isSet(other.fields, FALLBACK_ID)) {
+      fallbackId = other.fallbackId;
+    }
+    if (isSet(other.fields, THEME)) {
+      theme = other.theme;
+    }
+    if (isSet(other.fields, TRANSFORMATION_ALLOWED)) {
+      isTransformationAllowed = other.isTransformationAllowed;
+    }
+    if (isSet(other.fields, TRANSFORMATION_REQUIRED)) {
+      isTransformationRequired = other.isTransformationRequired;
+    }
+    if (isSet(other.fields, TRANSFORMATION)) {
+      transformations.putAll(other.transformations);
+    }
+
+    // Applying options with dontTransform() is expected to clear our transformations.
+    if (!isTransformationAllowed) {
+      transformations.clear();
+      fields &= ~TRANSFORMATION;
+      isTransformationRequired = false;
+      fields &= ~TRANSFORMATION_REQUIRED;
+    }
 
-    isTransformationRequired |= other.isTransformationRequired;
     fields |= other.fields;
-    transformations.putAll(other.transformations);
     options.putAll(other.options);
 
     return selfOrThrowIfLocked();
   }
 
+  /**
+   * Throws if any further mutations are attempted.
+   *
+   * <p> Once locked, the only way to unlock is to use {@link #clone()} </p>
+   */
+  @SuppressWarnings("unchecked")
+  public final CHILD lock() {
+    isLocked = true;
+    // This is the only place we should not check locked.
+    return (CHILD) this;
+  }
+
+  /**
+   * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen
+   * before the mutation resulting in all methods returning a new Object and leaving the original
+   * locked object unmodified.
+   *
+   * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects
+   * are mutable and are not locked.
+   */
+  public final CHILD autoLock() {
+    if (isLocked && !isAutoCloneEnabled) {
+      throw new IllegalStateException("You cannot auto lock an already locked options object"
+          + ", try clone() first");
+    }
+    isAutoCloneEnabled = true;
+    return lock();
+  }
+
+  @SuppressWarnings("unchecked")
+  private CHILD selfOrThrowIfLocked() {
+    if (isLocked) {
+      throw new IllegalStateException("You cannot modify locked RequestOptions, consider clone()");
+    }
+    return (CHILD) this;
+  }
+
+  public final Map<Class<?>, Transformation<?>> getTransformations() {
+    return transformations;
+  }
+
+  public final boolean isTransformationRequired() {
+    return isTransformationRequired;
+  }
+
+  public final Options getOptions() {
+    return options;
+  }
+
+  public final Class<?> getResourceClass() {
+    return resourceClass;
+  }
+
   public final DiskCacheStrategy getDiskCacheStrategy() {
     return diskCacheStrategy;
   }
@@ -634,6 +870,10 @@ public final Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
+  public final Resources.Theme getTheme() {
+    return theme;
+  }
+
   public final boolean isMemoryCacheable() {
     return isCacheable;
   }
@@ -666,18 +906,6 @@ public final float getSizeMultiplier() {
     return sizeMultiplier;
   }
 
-  public final String getTag() {
-    return tag;
-  }
-
-  @SuppressWarnings("unchecked")
-  private CHILD selfOrThrowIfLocked() {
-    if (isLocked) {
-      throw new IllegalStateException("You cannot modify locked RequestOptions, consider clone()");
-    }
-    return (CHILD) this;
-  }
-
   private boolean isSet(int flag) {
     return isSet(fields, flag);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index 018be8e2e..3c57db530 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -2,6 +2,7 @@
 
 import android.graphics.drawable.Drawable;
 import android.os.Handler;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.transition.Transition;
@@ -44,8 +45,8 @@
   private final boolean assertBackgroundThread;
   private final Waiter waiter;
 
-  private R resource;
-  private Request request;
+  @Nullable private R resource;
+  @Nullable private Request request;
   private boolean isCancelled;
   private boolean resultReceived;
   private boolean loadFailed;
@@ -118,11 +119,12 @@ public void getSize(SizeReadyCallback cb) {
    * {@inheritDoc}
    */
   @Override
-  public void setRequest(Request request) {
+  public void setRequest(@Nullable Request request) {
     this.request = request;
   }
 
   @Override
+  @Nullable
   public Request getRequest() {
     return request;
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestListener.java b/library/src/main/java/com/bumptech/glide/request/RequestListener.java
index 92f031189..0bde3e95a 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestListener.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java
@@ -1,5 +1,9 @@
 package com.bumptech.glide.request;
 
+import android.support.annotation.Nullable;
+
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.request.target.Target;
 
 /**
@@ -30,13 +34,16 @@
    * <p> Note - if you want to reload this or any other model after an exception, you will need to
    * include all relevant builder calls (like centerCrop, placeholder etc). </p>
    *
+   * @param e               The maybe {@code null} exception containing information about why the
+   *                        request failed.
    * @param model           The model we were trying to load when the exception occurred.
    * @param target          The {@link Target} we were trying to load the image into.
-   * @param isFirstResource True if this exception is for the first resource to load.
-   * @return True if the listener has handled updating the target for the given exception, false to
-   * allow Glide's request to update the target.
+   * @param isFirstResource {@code true} if this exception is for the first resource to load.
+   * @return {@code true} if the listener has handled updating the target for the given exception,
+   *         {@code false} to allow Glide's request to update the target.
    */
-  boolean onLoadFailed(Object model, Target<R> target, boolean isFirstResource);
+  boolean onLoadFailed(@Nullable GlideException e, Object model, Target<R> target,
+      boolean isFirstResource);
 
   /**
    * Called when a load completes successfully, immediately after {@link
@@ -45,15 +52,15 @@
    * @param resource          The resource that was loaded for the target.
    * @param model             The specific model that was used to load the image.
    * @param target            The target the model was loaded into.
-   * @param isFromMemoryCache True if the load completed synchronously (useful for determining
-   *                          whether or not to run a transition)
-   * @param isFirstResource   True if this is the first resource to in this load to be loaded into
-   *                          the target. For example when loading a thumbnail and a fullsize image,
-   *                          this will be true for the first image to load and false for the
-   *                          second.
-   * @return True if the listener has handled setting the resource on the target (including any
-   * animations), false to allow Glide's request to update the target (again including animations).
+   * @param dataSource        The {@link DataSource} the resource was loaded from.
+   * @param isFirstResource   {@code true} if this is the first resource to in this load to be
+   *                          loaded into the target. For example when loading a thumbnail and a
+   *                          full-sized image, this will be {@code true} for the first image to
+   *                          load and {@code false} for the second.
+   * @return {@code true} if the listener has handled setting the resource on the target,
+   *         {@code false} to allow Glide's request to update the target.
+   *         Setting the resource includes handling animations, be sure to take that into account.
    */
-  boolean onResourceReady(R resource, Object model, Target<R> target, boolean isFromMemoryCache,
+  boolean onResourceReady(R resource, Object model, Target<R> target, DataSource dataSource,
       boolean isFirstResource);
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index 319440019..6e8aa1e65 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -3,6 +3,8 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DecodeFormat;
@@ -18,103 +20,210 @@
  * <p> Uses with custom types, transformations, or options can subclass and customize. {@link
  * com.bumptech.glide.request.BaseRequestOptions}. </p>
  */
-@SuppressWarnings("PMD.UseUtilityClass")
+@SuppressWarnings({"PMD.UseUtilityClass", "unused"})
 public final class RequestOptions extends BaseRequestOptions<RequestOptions> {
 
+  private static RequestOptions skipMemoryCacheTrueOptions;
+  private static RequestOptions skipMemoryCacheFalseOptions;
+  private static RequestOptions fitCenterOptions;
+  private static RequestOptions centerCropOptions;
+  private static RequestOptions circleCropOptions;
+  private static RequestOptions noTransformOptions;
+  private static RequestOptions noAnimationOptions;
+
+  /**
+   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
+   */
   public static RequestOptions sizeMultiplierOf(float sizeMultiplier) {
     return new RequestOptions().sizeMultiplier(sizeMultiplier);
   }
 
-  public static RequestOptions diskCacheStrategyOf(DiskCacheStrategy diskCacheStrategy) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
+   */
+  public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {
     return new RequestOptions().diskCacheStrategy(diskCacheStrategy);
   }
 
-  public static RequestOptions priorityOf(Priority priority) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
+   */
+  public static RequestOptions priorityOf(@NonNull Priority priority) {
     return new RequestOptions().priority(priority);
   }
 
-  public static RequestOptions placeholderOf(Drawable placeholder) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #placeholder(Drawable)} set.
+   */
+  public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
     return new RequestOptions().placeholder(placeholder);
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #placeholder(int)} set.
+   */
   public static RequestOptions placeholderOf(int placeholderId) {
     return new RequestOptions().placeholder(placeholderId);
   }
 
-  public static RequestOptions errorOf(Drawable errorDrawable) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #error(Drawable)} set.
+   */
+  public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
     return new RequestOptions().error(errorDrawable);
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #error(int)}} set.
+   */
   public static RequestOptions errorOf(int errorId) {
     return new RequestOptions().error(errorId);
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set.
+   */
   public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new RequestOptions().skipMemoryCache(skipMemoryCache);
+    if (skipMemoryCache) {
+      if (skipMemoryCacheTrueOptions == null) {
+        skipMemoryCacheTrueOptions = new RequestOptions().skipMemoryCache(true).autoLock();
+      }
+      return skipMemoryCacheTrueOptions;
+    } else {
+      if (skipMemoryCacheFalseOptions == null) {
+        skipMemoryCacheFalseOptions = new RequestOptions().skipMemoryCache(false).autoLock();
+      }
+      return skipMemoryCacheFalseOptions;
+    }
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #override(int, int)}} set.
+   */
   public static RequestOptions overrideOf(int width, int height) {
     return new RequestOptions().override(width, height);
   }
 
-  public static RequestOptions signatureOf(Key signature) {
-    return new RequestOptions().signature(signature);
+  /**
+   * Returns a {@link RequestOptions} with {@link #override(int, int)} set where both the width and
+   * height are the given size.
+   */
+  public static RequestOptions overrideOf(int size) {
+    return overrideOf(size, size);
   }
 
-  public static RequestOptions tagOf(String tag) {
-    return new RequestOptions().tag(tag);
+  /**
+   * Returns a {@link RequestOptions} object with {@link #signature} set.
+   */
+  public static RequestOptions signatureOf(@NonNull Key signature) {
+    return new RequestOptions().signature(signature);
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #fitCenter(Context)} set.
+   */
   public static RequestOptions fitCenterTransform(Context context) {
-    return new RequestOptions().fitCenter(context);
+    if (fitCenterOptions == null) {
+      fitCenterOptions = new RequestOptions()
+          .fitCenter(context.getApplicationContext())
+          .autoLock();
+    }
+    return fitCenterOptions;
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #circleCrop(Context)} set.
+   */
   public static RequestOptions centerCropTransform(Context context) {
-    return new RequestOptions().centerCrop(context);
+    if (centerCropOptions == null) {
+      centerCropOptions = new RequestOptions()
+          .centerCrop(context.getApplicationContext())
+          .autoLock();
+    }
+    return centerCropOptions;
+  }
+
+  /**
+   * Returns a {@link RequestOptions} object with {@link RequestOptions#circleCrop(Context)} set.
+   */
+  public static RequestOptions circleCropTransform(Context context) {
+    if (circleCropOptions == null) {
+      circleCropOptions = new RequestOptions()
+          .circleCrop(context.getApplicationContext())
+          .autoLock();
+    }
+    return circleCropOptions;
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #transform(Context, Transformation)} set.
+   */
   public static RequestOptions bitmapTransform(Context context,
-      Transformation<Bitmap> transformation) {
+      @NonNull Transformation<Bitmap> transformation) {
     return new RequestOptions().transform(context, transformation);
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
+   */
   public static RequestOptions noTransform() {
-    return new RequestOptions().dontTransform();
+    if (noTransformOptions == null) {
+      noTransformOptions = new RequestOptions()
+          .dontTransform()
+          .autoLock();
+    }
+    return noTransformOptions;
   }
 
-  public static <T> RequestOptions option(Option<T> option, T value) {
+  /**
+   * Returns a {@link RequestOptions} object with the given {@link Option} set via
+   * {@link #set(Option, Object)}.
+   */
+  public static <T> RequestOptions option(@NonNull Option<T> option, @NonNull T value) {
     return new RequestOptions().set(option, value);
   }
 
-  public static RequestOptions decodeTypeOf(Class<?> resourceClass) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #decode(Class)} set.
+   */
+  public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
     return new RequestOptions().decode(resourceClass);
   }
 
-  public static RequestOptions formatOf(DecodeFormat format) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
+   */
+  public static RequestOptions formatOf(@NonNull DecodeFormat format) {
     return new RequestOptions().format(format);
   }
 
-  public static RequestOptions frameOf(int frame) {
-    return new RequestOptions().frame(frame);
+  /**
+   * Returns a {@link RequestOptions} object with {@link #frame(long)} set.
+   */
+  public static RequestOptions frameOf(long frameTimeMicros) {
+    return new RequestOptions().frame(frameTimeMicros);
   }
 
-  public static RequestOptions downsampleOf(DownsampleStrategy strategy) {
+  /**
+   * Returns a {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
+   */
+  public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
     return new RequestOptions().downsample(strategy);
   }
 
   /**
-   * Returns a new {@link com.bumptech.glide.request.RequestOptions} with {@link
-   * #encodeQuality(Integer)} called with the given quality.
+   * Returns a {@link com.bumptech.glide.request.RequestOptions} with {@link
+   * #encodeQuality(int)} called with the given quality.
    */
-  public static RequestOptions encodeQualityOf(Integer quality) {
+  public static RequestOptions encodeQualityOf(int quality) {
     return new RequestOptions().encodeQuality(quality);
   }
 
   /**
-   * Returns a new {@link com.bumptech.glide.request.RequestOptions} with {@link
+   * Returns a {@link com.bumptech.glide.request.RequestOptions} with {@link
    * #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
    */
-  public static RequestOptions encodeFormatOf(Bitmap.CompressFormat format) {
+  public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
     return new RequestOptions().encodeFormat(format);
   }
 
@@ -123,6 +232,11 @@ public static RequestOptions encodeFormatOf(Bitmap.CompressFormat format) {
    * called.
    */
   public static RequestOptions noAnimation() {
-    return new RequestOptions().dontAnimate();
+    if (noAnimationOptions == null) {
+      noAnimationOptions = new RequestOptions()
+          .dontAnimate()
+          .autoLock();
+    }
+    return noAnimationOptions;
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/ResourceCallback.java b/library/src/main/java/com/bumptech/glide/request/ResourceCallback.java
index 8de051368..ed1ec1063 100644
--- a/library/src/main/java/com/bumptech/glide/request/ResourceCallback.java
+++ b/library/src/main/java/com/bumptech/glide/request/ResourceCallback.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request;
 
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.Resource;
 
 /**
@@ -13,10 +15,12 @@
    *
    * @param resource The loaded resource.
    */
-  void onResourceReady(Resource<?> resource);
+  void onResourceReady(Resource<?> resource, DataSource dataSource);
 
   /**
    * Called when a resource fails to load successfully.
+   *
+   * @param e a non-null {@link GlideException}.
    */
-  void onLoadFailed();
+  void onLoadFailed(GlideException e);
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 646c3b474..3798a2300 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -1,13 +1,16 @@
 package com.bumptech.glide.request;
 
+import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
+import android.support.v4.content.res.ResourcesCompat;
 import android.support.v4.util.Pools;
-import android.support.v4.util.Pools.SimplePool;
 import android.util.Log;
 
-import com.bumptech.glide.Logs;
+import com.bumptech.glide.GlideContext;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.Engine;
-import com.bumptech.glide.load.engine.RequestContext;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
@@ -15,6 +18,8 @@
 import com.bumptech.glide.request.transition.TransitionFactory;
 import com.bumptech.glide.util.LogTime;
 import com.bumptech.glide.util.Util;
+import com.bumptech.glide.util.pool.FactoryPools;
+import com.bumptech.glide.util.pool.StateVerifier;
 
 /**
  * A {@link Request} that loads a {@link com.bumptech.glide.load.engine.Resource} into a given
@@ -24,10 +29,19 @@
  */
 public final class SingleRequest<R> implements Request,
     SizeReadyCallback,
-    ResourceCallback {
+    ResourceCallback,
+    FactoryPools.Poolable {
+  /** Tag for logging internal events, not generally suitable for public use. */
   private static final String TAG = "Request";
-  private static final Pools.Pool<SingleRequest<?>> REQUEST_POOL = new SimplePool<>(150);
-  private static final double TO_MEGABYTE = 1d / (1024d * 1024d);
+  /** Tag for logging externally useful events (request completion, timing etc). */
+  private static final String GLIDE_TAG = "Glide";
+  private static final Pools.Pool<SingleRequest<?>> POOL = FactoryPools.simple(150,
+      new FactoryPools.Factory<SingleRequest<?>>() {
+        @Override
+        public SingleRequest<?> create() {
+          return new SingleRequest<Object>();
+        }
+      });
 
   private enum Status {
     /**
@@ -55,7 +69,7 @@
      */
     CANCELLED,
     /**
-     * Cleared by the user with a placeholder put, may not be restarted.
+     * Cleared by the user with a placeholder set, may not be restarted.
      */
     CLEARED,
     /**
@@ -65,28 +79,60 @@
   }
 
   private final String tag = String.valueOf(hashCode());
+  private final StateVerifier stateVerifier = StateVerifier.newInstance();
 
-  private RequestContext<?, R> requestContext;
   private RequestCoordinator requestCoordinator;
+  private GlideContext glideContext;
+  private Object model;
+  private Class<R> transcodeClass;
+  private BaseRequestOptions<?> requestOptions;
+  private int overrideWidth;
+  private int overrideHeight;
+  private Priority priority;
   private Target<R> target;
   private RequestListener<R> requestListener;
   private Engine engine;
   private TransitionFactory<? super R> animationFactory;
-  private boolean loadedFromMemoryCache;
   private Resource<R> resource;
   private Engine.LoadStatus loadStatus;
   private long startTime;
   private Status status;
-
-  public static <R> SingleRequest<R> obtain(RequestContext<?, R> requestContext, Target<R> target,
-      RequestListener<R> requestListener, RequestCoordinator requestCoordinator, Engine engine,
+  private Drawable errorDrawable;
+  private Drawable placeholderDrawable;
+  private Drawable fallbackDrawable;
+  private int width;
+  private int height;
+
+  public static <R> SingleRequest<R> obtain(
+      GlideContext glideContext,
+      Object model,
+      Class<R> transcodeClass,
+      BaseRequestOptions<?> requestOptions,
+      int overrideWidth,
+      int overrideHeight,
+      Priority priority,
+      Target<R> target,
+      RequestListener<R> requestListener,
+      RequestCoordinator requestCoordinator,
+      Engine engine,
       TransitionFactory<? super R> animationFactory) {
     @SuppressWarnings("unchecked") SingleRequest<R> request =
-        (SingleRequest<R>) REQUEST_POOL.acquire();
+        (SingleRequest<R>) POOL.acquire();
     if (request == null) {
       request = new SingleRequest<>();
     }
-    request.init(requestContext, target, requestListener, requestCoordinator, engine,
+    request.init(
+        glideContext,
+        model,
+        transcodeClass,
+        requestOptions,
+        overrideWidth,
+        overrideHeight,
+        priority,
+        target,
+        requestListener,
+        requestCoordinator,
+        engine,
         animationFactory);
     return request;
   }
@@ -95,11 +141,26 @@ private SingleRequest() {
     // just create, instances are reused with recycle/init
   }
 
-  private void init(RequestContext<?, R> requestContext,
-      Target<R> target, RequestListener<R> requestListener,
-      RequestCoordinator requestCoordinator, Engine engine,
+  private void init(
+      GlideContext glideContext,
+      Object model,
+      Class<R> transcodeClass,
+      BaseRequestOptions<?> requestOptions,
+      int overrideWidth,
+      int overrideHeight,
+      Priority priority,
+      Target<R> target,
+      RequestListener<R> requestListener,
+      RequestCoordinator requestCoordinator,
+      Engine engine,
       TransitionFactory<? super R> animationFactory) {
-    this.requestContext = requestContext;
+    this.glideContext = glideContext;
+    this.model = model;
+    this.transcodeClass = transcodeClass;
+    this.requestOptions = requestOptions;
+    this.overrideWidth = overrideWidth;
+    this.overrideHeight = overrideHeight;
+    this.priority = priority;
     this.target = target;
     this.requestListener = requestListener;
     this.requestCoordinator = requestCoordinator;
@@ -108,29 +169,46 @@ private void init(RequestContext<?, R> requestContext,
     status = Status.PENDING;
   }
 
+  @Override
+  public StateVerifier getVerifier() {
+    return stateVerifier;
+  }
+
   @Override
   public void recycle() {
-    requestContext = null;
+    glideContext = null;
+    model = null;
+    transcodeClass = null;
+    requestOptions = null;
+    overrideWidth = -1;
+    overrideHeight = -1;
     target = null;
     requestListener = null;
     requestCoordinator = null;
     animationFactory = null;
-    loadedFromMemoryCache = false;
     loadStatus = null;
-    REQUEST_POOL.release(this);
+    errorDrawable = null;
+    placeholderDrawable = null;
+    fallbackDrawable = null;
+    width = -1;
+    height = -1;
+    POOL.release(this);
   }
 
   @Override
   public void begin() {
+    stateVerifier.throwIfRecycled();
     startTime = LogTime.getLogTime();
-    if (requestContext.getModel() == null) {
-      onLoadFailed();
+    if (model == null) {
+      if (Util.isValidDimensions(overrideWidth, overrideHeight)) {
+        width = overrideWidth;
+        height = overrideHeight;
+      }
+      onLoadFailed(new GlideException("Received null model"));
       return;
     }
 
     status = Status.WAITING_FOR_SIZE;
-    int overrideWidth = requestContext.getOverrideWidth();
-    int overrideHeight = requestContext.getOverrideHeight();
     if (Util.isValidDimensions(overrideWidth, overrideHeight)) {
       onSizeReady(overrideWidth, overrideHeight);
     } else {
@@ -139,7 +217,7 @@ public void begin() {
 
     if ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE)
         && canNotifyStatusChanged()) {
-      target.onLoadStarted(requestContext.getPlaceholderDrawable());
+      target.onLoadStarted(getPlaceholderDrawable());
     }
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       logV("finished run method in " + LogTime.getElapsedMillis(startTime));
@@ -155,6 +233,7 @@ public void begin() {
    * @see #clear()
    */
   void cancel() {
+    stateVerifier.throwIfRecycled();
     status = Status.CANCELLED;
     if (loadStatus != null) {
       loadStatus.cancel();
@@ -182,7 +261,7 @@ public void clear() {
       releaseResource(resource);
     }
     if (canNotifyStatusChanged()) {
-      target.onLoadCleared(requestContext.getPlaceholderDrawable());
+      target.onLoadCleared(getPlaceholderDrawable());
     }
     // Must be after cancel().
     status = Status.CLEARED;
@@ -229,16 +308,49 @@ public boolean isFailed() {
     return status == Status.FAILED;
   }
 
+  private Drawable getErrorDrawable() {
+    if (errorDrawable == null) {
+      errorDrawable = requestOptions.getErrorPlaceholder();
+      if (errorDrawable == null && requestOptions.getErrorId() > 0) {
+        errorDrawable = loadDrawable(requestOptions.getErrorId());
+      }
+    }
+    return errorDrawable;
+  }
+
+  private Drawable getPlaceholderDrawable() {
+     if (placeholderDrawable == null) {
+      placeholderDrawable = requestOptions.getPlaceholderDrawable();
+      if (placeholderDrawable == null && requestOptions.getPlaceholderId() > 0) {
+        placeholderDrawable = loadDrawable(requestOptions.getPlaceholderId());
+      }
+    }
+    return placeholderDrawable;
+  }
+
+  private Drawable getFallbackDrawable() {
+    if (fallbackDrawable == null) {
+      fallbackDrawable = requestOptions.getFallbackDrawable();
+      if (fallbackDrawable == null && requestOptions.getFallbackId() > 0) {
+        fallbackDrawable = loadDrawable(requestOptions.getFallbackId());
+      }
+    }
+    return fallbackDrawable;
+  }
+
+  private Drawable loadDrawable(int resouceId) {
+    Resources resources = glideContext.getResources();
+    return ResourcesCompat.getDrawable(resources, resouceId, requestOptions.getTheme());
+  }
+
   private void setErrorPlaceholder() {
     if (!canNotifyStatusChanged()) {
       return;
     }
 
-    Object model = requestContext.getModel();
-    Drawable error = model == null
-        ? requestContext.getFallbackDrawable() : requestContext.getErrorDrawable();
+    Drawable error = model == null ? getFallbackDrawable() : getErrorDrawable();
     if (error == null) {
-      error = requestContext.getPlaceholderDrawable();
+      error = getPlaceholderDrawable();
     }
     target.onLoadFailed(error);
   }
@@ -248,6 +360,7 @@ private void setErrorPlaceholder() {
    */
   @Override
   public void onSizeReady(int width, int height) {
+    stateVerifier.throwIfRecycled();
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       logV("Got onSizeReady in " + LogTime.getElapsedMillis(startTime));
     }
@@ -256,16 +369,28 @@ public void onSizeReady(int width, int height) {
     }
     status = Status.RUNNING;
 
-    float sizeMultiplier = requestContext.getSizeMultiplier();
-    width = Math.round(sizeMultiplier * width);
-    height = Math.round(sizeMultiplier * height);
+    float sizeMultiplier = requestOptions.getSizeMultiplier();
+    this.width = Math.round(sizeMultiplier * width);
+    this.height = Math.round(sizeMultiplier * height);
 
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       logV("finished setup for calling load in " + LogTime.getElapsedMillis(startTime));
     }
-    loadedFromMemoryCache = true;
-    loadStatus = engine.load(requestContext, width, height, this);
-    loadedFromMemoryCache = resource != null;
+    loadStatus = engine.load(
+        glideContext,
+        model,
+        requestOptions.getSignature(),
+        this.width,
+        this.height,
+        requestOptions.getResourceClass(),
+        transcodeClass,
+        priority,
+        requestOptions.getDiskCacheStrategy(),
+        requestOptions.getTransformations(),
+        requestOptions.isTransformationRequired(),
+        requestOptions.getOptions(),
+        requestOptions.isMemoryCacheable(),
+        this);
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
       logV("finished onSizeReady in " + LogTime.getElapsedMillis(startTime));
     }
@@ -294,29 +419,26 @@ private void notifyLoadSuccess() {
    */
   @SuppressWarnings("unchecked")
   @Override
-  public void onResourceReady(Resource<?> resource) {
-    Class<R> transcodeClass = requestContext.getTranscodeClass();
+  public void onResourceReady(Resource<?> resource, DataSource dataSource) {
+    stateVerifier.throwIfRecycled();
+    loadStatus = null;
     if (resource == null) {
-      if (Logs.isEnabled(Log.ERROR)) {
-        Logs.log(Log.ERROR, "Expected to receive a Resource<R> with an object of " + transcodeClass
-            + " inside, but instead got null.");
-      }
-      onLoadFailed();
+      GlideException exception = new GlideException("Expected to receive a Resource<R> with an "
+          + "object of " + transcodeClass + " inside, but instead got null.");
+      onLoadFailed(exception);
       return;
     }
 
     Object received = resource.get();
     if (received == null || !transcodeClass.isAssignableFrom(received.getClass())) {
       releaseResource(resource);
-      if (Logs.isEnabled(Log.ERROR)) {
-        Logs.log(Log.ERROR,
-            "Expected to receive an object of " + transcodeClass + " but instead" + " got "
-                + (received != null ? received.getClass() : "") + "{" + received + "} inside" + " "
-                + "Resource{" + resource + "}."
-                + (received != null ? "" : " " + "To indicate failure return a null Resource "
-                + "object, rather than a Resource object containing null data."));
-      }
-      onLoadFailed();
+      GlideException exception = new GlideException("Expected to receive an object of "
+          + transcodeClass + " but instead" + " got "
+          + (received != null ? received.getClass() : "") + "{" + received + "} inside" + " "
+          + "Resource{" + resource + "}."
+          + (received != null ? "" : " " + "To indicate failure return a null Resource "
+          + "object, rather than a Resource object containing null data."));
+      onLoadFailed(exception);
       return;
     }
 
@@ -327,50 +449,56 @@ public void onResourceReady(Resource<?> resource) {
       return;
     }
 
-    onResourceReady((Resource<R>) resource, (R) received);
+    onResourceReady((Resource<R>) resource, (R) received, dataSource);
   }
 
   /**
-   * Internal {@link #onResourceReady(Resource)} where arguments are known to be safe.
+   * Internal {@link #onResourceReady(Resource, DataSource)} where arguments are known to be safe.
    *
    * @param resource original {@link Resource}, never <code>null</code>
    * @param result   object returned by {@link Resource#get()}, checked for type and never
    *                 <code>null</code>
    */
-  private void onResourceReady(Resource<R> resource, R result) {
+  private void onResourceReady(Resource<R> resource, R result, DataSource dataSource) {
     // We must call isFirstReadyResource before setting status.
     boolean isFirstResource = isFirstReadyResource();
     status = Status.COMPLETE;
     this.resource = resource;
 
+    if (glideContext.getLogLevel() <= Log.DEBUG) {
+      Log.d(GLIDE_TAG, "Finished loading " + result.getClass().getSimpleName() + " from "
+          + dataSource + " for " + model + " with size [" + width + "x" + height + "] in "
+          + LogTime.getElapsedMillis(startTime) + " ms");
+    }
+
     if (requestListener == null
-        || !requestListener.onResourceReady(result, requestContext.getModel(), target,
-        loadedFromMemoryCache, isFirstResource)) {
+        || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource)) {
       Transition<? super R> animation =
-          animationFactory.build(loadedFromMemoryCache, isFirstResource);
+          animationFactory.build(dataSource, isFirstResource);
       target.onResourceReady(result, animation);
     }
 
     notifyLoadSuccess();
-
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
-      logV("Resource ready in " + LogTime.getElapsedMillis(startTime) + " size: " + (
-          resource.getSize() * TO_MEGABYTE) + " fromCache: " + loadedFromMemoryCache);
-    }
   }
 
   /**
    * A callback method that should never be invoked directly.
    */
   @Override
-  public void onLoadFailed() {
-    if (Log.isLoggable(TAG, Log.DEBUG)) {
-      Log.d(TAG, "Load failed");
+  public void onLoadFailed(GlideException e) {
+    stateVerifier.throwIfRecycled();
+    int logLevel = glideContext.getLogLevel();
+    if (logLevel <= Log.WARN) {
+      Log.w(GLIDE_TAG, "Load failed for " + model + " with size [" + width + "x" + height + "]", e);
+      if (logLevel <= Log.INFO) {
+        e.logRootCauses(GLIDE_TAG);
+      }
     }
 
+    loadStatus = null;
     status = Status.FAILED;
     //TODO: what if this is a thumbnail request?
-    if (requestListener == null || !requestListener.onLoadFailed(requestContext.getModel(), target,
+    if (requestListener == null || !requestListener.onLoadFailed(e, model, target,
         isFirstReadyResource())) {
       setErrorPlaceholder();
     }
diff --git a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
index 2fef40691..195c24d69 100644
--- a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request;
 
+import android.support.annotation.Nullable;
+
 /**
  * A coordinator that coordinates two individual {@link Request}s that load a small thumbnail
  * version of an image and the full size version of the image at the same time.
@@ -8,7 +10,7 @@
     Request {
   private Request full;
   private Request thumb;
-  private RequestCoordinator coordinator;
+  @Nullable private RequestCoordinator coordinator;
   private boolean isRunning;
 
   public ThumbnailRequestCoordinator() {
diff --git a/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
index 75bd6d1de..6928462ae 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/AppWidgetTarget.java
@@ -9,7 +9,6 @@
 import com.bumptech.glide.request.transition.Transition;
 import com.bumptech.glide.util.Preconditions;
 
-
 /**
  * This class is used in order to display downloaded Bitmap inside an ImageView of an AppWidget
  * through RemoteViews.
diff --git a/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
new file mode 100644
index 000000000..c4b247964
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/request/target/BitmapThumbnailImageViewTarget.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.request.target;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.widget.ImageView;
+
+/**
+ * Efficiently displays multiple Bitmaps loaded serially into a single {@link android.view.View}.
+ */
+public class BitmapThumbnailImageViewTarget extends ThumbnailImageViewTarget<Bitmap> {
+  public BitmapThumbnailImageViewTarget(ImageView view) {
+    super(view);
+  }
+
+  @Override
+  protected Drawable getDrawable(Bitmap resource) {
+    return new BitmapDrawable(view.getResources(), resource);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
index 18d4adc68..e9ab75e01 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableImageViewTarget.java
@@ -1,59 +1,20 @@
 package com.bumptech.glide.request.target;
 
-import android.graphics.drawable.Animatable;
 import android.graphics.drawable.Drawable;
-import android.view.ViewGroup;
+import android.support.annotation.Nullable;
 import android.widget.ImageView;
 
-import com.bumptech.glide.request.transition.Transition;
-
 /**
  * A target for display {@link Drawable} objects in {@link ImageView}s.
  */
 public class DrawableImageViewTarget extends ImageViewTarget<Drawable> {
-  private Drawable resource;
 
   public DrawableImageViewTarget(ImageView view) {
     super(view);
   }
 
   @Override
-  protected void setResource(Drawable resource) {
-    this.resource = resource;
+  protected void setResource(@Nullable Drawable resource) {
     view.setImageDrawable(resource);
   }
-
-  @Override
-  public void onResourceReady(Drawable resource, Transition<? super Drawable> transition) {
-    ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
-
-    // This is a dirty hack that tries to make loading square thumbnails and then square full
-    // images less costly by forcing both the smaller thumb and the larger version to have exactly
-    // the same intrinsic dimensions. If a drawable is replaced in an ImageView by another drawable
-    // with different intrinsic dimensions, the ImageView requests a layout. Scrolling rapidly while
-    // replacing thumbs with larger images triggers lots of these calls and causes significant
-    // amounts of jank.
-    if (!(resource instanceof Animatable) && layoutParams != null && layoutParams.width > 0
-        && layoutParams.height > 0) {
-      resource = new FixedSizeDrawable(resource, layoutParams.width, layoutParams.height);
-    }
-    super.onResourceReady(resource, transition);
-    if (resource instanceof Animatable) {
-      ((Animatable) resource).start();
-    }
-  }
-
-  @Override
-  public void onStart() {
-    if (resource instanceof Animatable) {
-      ((Animatable) resource).start();
-    }
-  }
-
-  @Override
-  public void onStop() {
-    if (resource instanceof Animatable) {
-      ((Animatable) resource).stop();
-    }
-  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
new file mode 100644
index 000000000..416633f7c
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/request/target/DrawableThumbnailImageViewTarget.java
@@ -0,0 +1,18 @@
+package com.bumptech.glide.request.target;
+
+import android.graphics.drawable.Drawable;
+import android.widget.ImageView;
+
+/**
+ * Efficiently displays multiple Drawables loaded serially into a single {@link android.view.View}.
+ */
+public class DrawableThumbnailImageViewTarget extends ThumbnailImageViewTarget<Drawable> {
+  public DrawableThumbnailImageViewTarget(ImageView view) {
+    super(view);
+  }
+
+  @Override
+  protected Drawable getDrawable(Drawable resource) {
+    return resource;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
index ebaa4b118..85ed326a4 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ImageViewTarget.java
@@ -1,6 +1,8 @@
 package com.bumptech.glide.request.target;
 
+import android.graphics.drawable.Animatable;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.Nullable;
 import android.widget.ImageView;
 
 import com.bumptech.glide.request.transition.Transition;
@@ -15,6 +17,9 @@
 public abstract class ImageViewTarget<Z> extends ViewTarget<ImageView, Z>
     implements Transition.ViewAdapter {
 
+  @Nullable
+  private Animatable animatable;
+
   public ImageViewTarget(ImageView view) {
     super(view);
   }
@@ -24,6 +29,7 @@ public ImageViewTarget(ImageView view) {
    * using {@link android.widget.ImageView#getDrawable()}.
    */
   @Override
+  @Nullable
   public Drawable getCurrentDrawable() {
     return view.getDrawable();
   }
@@ -46,7 +52,8 @@ public void setDrawable(Drawable drawable) {
    * @param placeholder {@inheritDoc}
    */
   @Override
-  public void onLoadStarted(Drawable placeholder) {
+  public void onLoadStarted(@Nullable Drawable placeholder) {
+    super.onLoadStarted(placeholder);
     setResource(null);
     setDrawable(placeholder);
   }
@@ -58,7 +65,8 @@ public void onLoadStarted(Drawable placeholder) {
    * @param errorDrawable {@inheritDoc}
    */
   @Override
-  public void onLoadFailed(Drawable errorDrawable) {
+  public void onLoadFailed(@Nullable Drawable errorDrawable) {
+    super.onLoadFailed(errorDrawable);
     setResource(null);
     setDrawable(errorDrawable);
   }
@@ -70,19 +78,38 @@ public void onLoadFailed(Drawable errorDrawable) {
    * @param placeholder {@inheritDoc}
    */
   @Override
-  public void onLoadCleared(Drawable placeholder) {
+  public void onLoadCleared(@Nullable Drawable placeholder) {
+    super.onLoadCleared(placeholder);
     setResource(null);
     setDrawable(placeholder);
   }
 
   @Override
-  public void onResourceReady(Z resource, Transition<? super Z> transition) {
+  public void onResourceReady(Z resource, @Nullable Transition<? super Z> transition) {
     if (transition == null || !transition.transition(resource, this)) {
       setResource(resource);
     }
+
+    if (resource instanceof Animatable) {
+      animatable = (Animatable) resource;
+      animatable.start();
+    }
+  }
+
+  @Override
+  public void onStart() {
+    if (animatable != null) {
+      animatable.start();
+    }
   }
 
-  protected abstract void setResource(Z resource);
+  @Override
+  public void onStop() {
+    if (animatable != null) {
+      animatable.stop();
+    }
+  }
 
+  protected abstract void setResource(@Nullable Z resource);
 }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/target/Target.java b/library/src/main/java/com/bumptech/glide/request/target/Target.java
index acc9efa18..2245adace 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/Target.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/Target.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.request.target;
 
 import android.graphics.drawable.Drawable;
+import android.support.annotation.Nullable;
 
 import com.bumptech.glide.manager.LifecycleListener;
 import com.bumptech.glide.request.Request;
@@ -38,7 +39,7 @@
    *
    * @param placeholder The placeholder drawable to optionally show, or null.
    */
-  void onLoadStarted(Drawable placeholder);
+  void onLoadStarted(@Nullable Drawable placeholder);
 
   /**
    * A lifecycle callback that is called when a load fails.
@@ -48,7 +49,7 @@
    *
    * @param errorDrawable The error drawable to optionally show, or null.
    */
-  void onLoadFailed(Drawable errorDrawable);
+  void onLoadFailed(@Nullable Drawable errorDrawable);
 
   /**
    * The method that will be called when the resource load has finished.
@@ -62,7 +63,7 @@
    *
    * @param placeholder The placeholder drawable to optionally show, or null.
    */
-  void onLoadCleared(Drawable placeholder);
+  void onLoadCleared(@Nullable Drawable placeholder);
 
   /**
    * A method to retrieve the size of this target.
@@ -74,10 +75,11 @@
   /**
    * Sets the current request for this target to retain, should not be called outside of Glide.
    */
-  void setRequest(Request request);
+  void setRequest(@Nullable Request request);
 
   /**
    * Retrieves the current request for this target, should not be called outside of Glide.
    */
+  @Nullable
   Request getRequest();
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
new file mode 100644
index 000000000..84306618b
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/request/target/ThumbnailImageViewTarget.java
@@ -0,0 +1,41 @@
+package com.bumptech.glide.request.target;
+
+import android.graphics.drawable.Drawable;
+import android.support.annotation.Nullable;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+
+/**
+ * Avoids extra calls to {@link android.view.View#requestLayout} when loading more than once
+ * image into an {@link android.widget.ImageView} with fixed dimensions.
+ *
+ * <p>Typically it makes sense
+ * to use this class when loading multiple images with the {@link
+ * com.bumptech.glide.RequestBuilder#thumbnail(com.bumptech.glide.RequestBuilder)} API into views in
+ * a scrolling list like ListView, GridView, or RecyclerView.
+ *
+ * <p>{@link FixedSizeDrawable} may cause skewing or other undesireable behavior depending on
+ * your images, views, and scaling. If this occurs, consider {@link DrawableImageViewTarget} or
+ * {@link BitmapImageViewTarget} as alternatives.
+ *
+ * @param <T> The type of resource that will be displayed in the ImageView.
+ */
+public abstract class ThumbnailImageViewTarget<T> extends ImageViewTarget<T> {
+
+  public ThumbnailImageViewTarget(ImageView view) {
+    super(view);
+  }
+
+  @Override
+  protected void setResource(@Nullable T resource) {
+    ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
+    Drawable result = getDrawable(resource);
+    if (layoutParams != null && layoutParams.width > 0 && layoutParams.height > 0) {
+      result = new FixedSizeDrawable(result, layoutParams.width, layoutParams.height);
+    }
+
+    view.setImageDrawable(result);
+  }
+
+  protected abstract Drawable getDrawable(T resource);
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 12f3bba81..336d4b069 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -3,7 +3,9 @@
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.graphics.Point;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.support.annotation.Nullable;
 import android.util.Log;
 import android.view.Display;
 import android.view.View;
@@ -33,13 +35,15 @@
  * View#setTag(Object)} on a view, consider using {@link BaseTarget} or {@link SimpleTarget}
  * instead. </p>
  *
+ * <p> Subclasses must call super in {@link #onLoadCleared(Drawable)} </p>
+ *
  * @param <T> The specific subclass of view wrapped by this target.
  * @param <Z> The resource type this target will receive.
  */
 public abstract class ViewTarget<T extends View, Z> extends BaseTarget<Z> {
   private static final String TAG = "ViewTarget";
   private static boolean isTagUsedAtLeastOnce = false;
-  private static Integer tagId = null;
+  @Nullable private static Integer tagId = null;
 
   protected final T view;
   private final SizeDeterminer sizeDeterminer;
@@ -70,13 +74,19 @@ public void getSize(SizeReadyCallback cb) {
     sizeDeterminer.getSize(cb);
   }
 
+  @Override
+  public void onLoadCleared(Drawable placeholder) {
+    super.onLoadCleared(placeholder);
+    sizeDeterminer.clearCallbacksAndListener();
+  }
+
   /**
    * Stores the request using {@link View#setTag(Object)}.
    *
    * @param request {@inheritDoc}
    */
   @Override
-  public void setRequest(Request request) {
+  public void setRequest(@Nullable Request request) {
     setTag(request);
   }
 
@@ -92,6 +102,7 @@ public void setRequest(Request request) {
    * com.bumptech.glide.request.Request}. </p>
    */
   @Override
+  @Nullable
   public Request getRequest() {
     Object tag = getTag();
     Request request = null;
@@ -111,7 +122,7 @@ public String toString() {
     return "Target for: " + view;
   }
 
-  private void setTag(Object tag) {
+  private void setTag(@Nullable Object tag) {
     if (tagId == null) {
       isTagUsedAtLeastOnce = true;
       view.setTag(tag);
@@ -120,6 +131,7 @@ private void setTag(Object tag) {
     }
   }
 
+  @Nullable
   private Object getTag() {
     if (tagId == null) {
       return view.getTag();
@@ -160,8 +172,8 @@ public static void setTagId(int tagId) {
     private final View view;
     private final List<SizeReadyCallback> cbs = new ArrayList<>();
 
-    private SizeDeterminerLayoutListener layoutListener;
-    private Point displayDimens;
+    @Nullable private SizeDeterminerLayoutListener layoutListener;
+    @Nullable private Point displayDimens;
 
     public SizeDeterminer(View view) {
       this.view = view;
@@ -171,7 +183,6 @@ private void notifyCbs(int width, int height) {
       for (SizeReadyCallback cb : cbs) {
         cb.onSizeReady(width, height);
       }
-      cbs.clear();
     }
 
     private void checkCurrentDimens() {
@@ -186,20 +197,10 @@ private void checkCurrentDimens() {
       }
 
       notifyCbs(currentWidth, currentHeight);
-      // Keep a reference to the layout listener and remove it here
-      // rather than having the observer remove itself because the observer
-      // we add the listener to will be almost immediately merged into
-      // another observer and will therefore never be alive. If we instead
-      // keep a reference to the listener and remove it here, we get the
-      // current view tree observer and should succeed.
-      ViewTreeObserver observer = view.getViewTreeObserver();
-      if (observer.isAlive()) {
-        observer.removeOnPreDrawListener(layoutListener);
-      }
-      layoutListener = null;
+      clearCallbacksAndListener();
     }
 
-    public void getSize(SizeReadyCallback cb) {
+    void getSize(SizeReadyCallback cb) {
       int currentWidth = getViewWidthOrParam();
       int currentHeight = getViewHeightOrParam();
       if (isSizeValid(currentWidth) && isSizeValid(currentHeight)) {
@@ -219,6 +220,21 @@ public void getSize(SizeReadyCallback cb) {
       }
     }
 
+    void clearCallbacksAndListener() {
+      // Keep a reference to the layout listener and remove it here
+      // rather than having the observer remove itself because the observer
+      // we add the listener to will be almost immediately merged into
+      // another observer and will therefore never be alive. If we instead
+      // keep a reference to the listener and remove it here, we get the
+      // current view tree observer and should succeed.
+      ViewTreeObserver observer = view.getViewTreeObserver();
+      if (observer.isAlive()) {
+        observer.removeOnPreDrawListener(layoutListener);
+      }
+      layoutListener = null;
+      cbs.clear();
+    }
+
     private int getViewHeightOrParam() {
       final LayoutParams layoutParams = view.getLayoutParams();
       if (isSizeValid(view.getHeight())) {
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
index db90cf3f5..e4e3a0d93 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
@@ -5,6 +5,8 @@
 import android.view.animation.AlphaAnimation;
 import android.view.animation.Animation;
 
+import com.bumptech.glide.load.DataSource;
+
 /**
  * A factory class that produces a new {@link Transition} that varies depending on whether or not
  * the drawable was loaded from the memory cache and whether or not the drawable is the first image
@@ -45,30 +47,29 @@ public DrawableCrossFadeFactory(Animation defaultAnimation, int duration) {
   }
 
   @Override
-  public Transition<Drawable> build(boolean isFromMemoryCache, boolean isFirstResource) {
-    if (isFromMemoryCache) {
+  public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {
+    if (dataSource == DataSource.MEMORY_CACHE) {
       return NoTransition.get();
     } else if (isFirstResource) {
-      return getFirstResourceTransition();
+      return getFirstResourceTransition(dataSource);
     } else {
-      return getSecondResourceTransition();
+      return getSecondResourceTransition(dataSource);
     }
   }
 
-
-  private Transition<Drawable> getFirstResourceTransition() {
+  private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {
       if (firstResourceTransition == null) {
           Transition<Drawable> defaultAnimation =
-              viewAnimationFactory.build(false /*isFromMemoryCache*/, true /*isFirstResource*/);
+              viewAnimationFactory.build(dataSource, true /*isFirstResource*/);
           firstResourceTransition = new DrawableCrossFadeTransition(defaultAnimation, duration);
       }
       return firstResourceTransition;
   }
 
-  private Transition<Drawable> getSecondResourceTransition() {
+  private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {
       if (secondResourceTransition == null) {
           Transition<Drawable> defaultAnimation =
-              viewAnimationFactory.build(false /*isFromMemoryCache*/, false /*isFirstResource*/);
+              viewAnimationFactory.build(dataSource, false /*isFirstResource*/);
           secondResourceTransition = new DrawableCrossFadeTransition(defaultAnimation, duration);
       }
       return secondResourceTransition;
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
index 9fe88fca1..5192b150b 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/NoTransition.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request.transition;
 
+import com.bumptech.glide.load.DataSource;
+
 /**
  * A simple {@link Transition} that performs no actions.
  *
@@ -17,7 +19,7 @@
   public static class NoAnimationFactory<R> implements TransitionFactory<R> {
     @SuppressWarnings("unchecked")
     @Override
-    public Transition<R> build(boolean isFromMemoryCache, boolean isFirstResource) {
+    public Transition<R> build(DataSource dataSource, boolean isFirstResource) {
       return (Transition<R>) NO_ANIMATION;
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/Transition.java b/library/src/main/java/com/bumptech/glide/request/transition/Transition.java
index c1384efc8..50debd7b9 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/Transition.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/Transition.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.request.transition;
 
 import android.graphics.drawable.Drawable;
+import android.support.annotation.Nullable;
 import android.view.View;
 
 /**
@@ -30,6 +31,7 @@
      * Returns the current drawable being displayed in the view, or null if no such drawable exists
      * (or one cannot be retrieved).
      */
+    @Nullable
     Drawable getCurrentDrawable();
 
     /**
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/TransitionFactory.java b/library/src/main/java/com/bumptech/glide/request/transition/TransitionFactory.java
index 898793f86..727b508a7 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/TransitionFactory.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/TransitionFactory.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request.transition;
 
+import com.bumptech.glide.load.DataSource;
+
 /**
  * A factory class that can produce different {@link Transition}s based on the state of the
  * request.
@@ -11,9 +13,9 @@
   /**
    * Returns a new {@link Transition}.
    *
-   * @param isFromMemoryCache True if this will be a transition for a resource that was loaded from
-   *                          the memory cache.
-   * @param isFirstResource   True if this is the first resource to be loaded into the target.
+   * @param dataSource      The {@link com.bumptech.glide.load.DataSource} the resource was loaded
+   *                        from.
+   * @param isFirstResource True if this is the first resource to be loaded into the target.
    */
-  Transition<R> build(boolean isFromMemoryCache, boolean isFirstResource);
+  Transition<R> build(DataSource dataSource, boolean isFirstResource);
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/ViewAnimationFactory.java b/library/src/main/java/com/bumptech/glide/request/transition/ViewAnimationFactory.java
index 29b2e8b1e..0aad3abef 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/ViewAnimationFactory.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/ViewAnimationFactory.java
@@ -4,6 +4,8 @@
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 
+import com.bumptech.glide.load.DataSource;
+
 /**
  * A {@link TransitionFactory} that produces {@link ViewTransition}s.
  *
@@ -31,12 +33,12 @@ public ViewAnimationFactory(int animationId) {
    * or isFirstImage is {@code false}, returns a {@link NoTransition} and otherwise returns a new
    * {@link ViewTransition}.
    *
-   * @param isFromMemoryCache {@inheritDoc}
+   * @param dataSource {@inheritDoc}
    * @param isFirstResource   {@inheritDoc}
    */
   @Override
-  public Transition<R> build(boolean isFromMemoryCache, boolean isFirstResource) {
-    if (isFromMemoryCache || !isFirstResource) {
+  public Transition<R> build(DataSource dataSource, boolean isFirstResource) {
+    if (dataSource == DataSource.MEMORY_CACHE || !isFirstResource) {
       return NoTransition.get();
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/ViewPropertyAnimationFactory.java b/library/src/main/java/com/bumptech/glide/request/transition/ViewPropertyAnimationFactory.java
index 0fc41c05c..ca8bdd548 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/ViewPropertyAnimationFactory.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/ViewPropertyAnimationFactory.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request.transition;
 
+import com.bumptech.glide.load.DataSource;
+
 /**
  * A {@link TransitionFactory} that produces ViewPropertyAnimations.
  *
@@ -20,8 +22,8 @@ public ViewPropertyAnimationFactory(ViewPropertyTransition.Animator animator) {
    * constructor.
    */
   @Override
-  public Transition<R> build(boolean isFromMemoryCache, boolean isFirstResource) {
-    if (isFromMemoryCache || !isFirstResource) {
+  public Transition<R> build(DataSource dataSource, boolean isFirstResource) {
+    if (dataSource == DataSource.MEMORY_CACHE || !isFirstResource) {
       return NoTransition.get();
     }
     if (animation == null) {
diff --git a/library/src/main/java/com/bumptech/glide/signature/EmptySignature.java b/library/src/main/java/com/bumptech/glide/signature/EmptySignature.java
index 81a765906..56d4c474d 100644
--- a/library/src/main/java/com/bumptech/glide/signature/EmptySignature.java
+++ b/library/src/main/java/com/bumptech/glide/signature/EmptySignature.java
@@ -18,6 +18,11 @@ private EmptySignature() {
     // Empty.
   }
 
+  @Override
+  public String toString() {
+    return "EmptySignature";
+  }
+
   @Override
   public void updateDiskCacheKey(MessageDigest messageDigest) {
     // Do nothing.
diff --git a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
index 0096534f4..72204c4b4 100644
--- a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
+++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
@@ -102,7 +102,7 @@ public static void toStream(ByteBuffer byteBuffer, OutputStream os) throws IOExc
     } else {
       ByteBuffer toCopy = byteBuffer.asReadOnlyBuffer();
       result = new byte[toCopy.limit()];
-      toCopy.rewind();
+      toCopy.position(0);
       toCopy.get(result);
     }
     return result;
diff --git a/library/src/main/java/com/bumptech/glide/util/LruCache.java b/library/src/main/java/com/bumptech/glide/util/LruCache.java
index 383024d2a..1377e3a15 100644
--- a/library/src/main/java/com/bumptech/glide/util/LruCache.java
+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.util;
 
+import android.support.annotation.Nullable;
+
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -93,6 +95,7 @@ public synchronized boolean contains(T key) {
    *
    * @param key The key to check.
    */
+  @Nullable
   public synchronized Y get(T key) {
     return cache.get(key);
   }
@@ -133,6 +136,7 @@ public synchronized Y put(T key, Y item) {
    *
    * @param key The key to remove the item at.
    */
+  @Nullable
   public synchronized Y remove(T key) {
     final Y value = cache.remove(key);
     if (value != null) {
diff --git a/library/src/main/java/com/bumptech/glide/util/Util.java b/library/src/main/java/com/bumptech/glide/util/Util.java
index 36cafde3a..762d49765 100644
--- a/library/src/main/java/com/bumptech/glide/util/Util.java
+++ b/library/src/main/java/com/bumptech/glide/util/Util.java
@@ -138,7 +138,7 @@ public static void assertMainThread() {
    */
   public static void assertBackgroundThread() {
     if (!isOnBackgroundThread()) {
-      throw new IllegalArgumentException("YOu must call this method on a background thread");
+      throw new IllegalArgumentException("You must call this method on a background thread");
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java b/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java
new file mode 100644
index 000000000..87c9d71fc
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java
@@ -0,0 +1,163 @@
+package com.bumptech.glide.util.pool;
+
+import android.support.v4.util.Pools.Pool;
+import android.support.v4.util.Pools.SimplePool;
+import android.support.v4.util.Pools.SynchronizedPool;
+import android.util.Log;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Provides implementations of {@link Pool} never return {@code null}, log when new instances are
+ * created, and that can use the {@link com.bumptech.glide.util.pool.FactoryPools.Poolable}
+ * interface to ensure objects aren't used while inside the pool.
+ */
+public final class FactoryPools {
+  private static final String TAG = "FactoryPools";
+  private static final int DEFAULT_POOL_SIZE = 20;
+  private static final Resetter<Object> EMPTY_RESETTER = new Resetter<Object>() {
+    @Override
+    public void reset(Object object) {
+      // Do nothing.
+    }
+  };
+
+  private FactoryPools() { }
+
+  /**
+   * Returns a non-thread safe {@link Pool} that never returns {@code null} from
+   * {@link Pool#acquire()} and that contains objects of the type created by the given
+   * {@link Factory} with the given maximum size.
+   *
+   * <p>If the pool is empty when {@link Pool#acquire()} is called, the given {@link Factory} will
+   * be used to create a new instance.
+   *
+   * @param <T> The type of object the pool will contains.
+   */
+  public static <T extends Poolable> Pool<T> simple(int size, Factory<T> factory) {
+    return build(new SimplePool<T>(size), factory);
+  }
+
+  /**
+   * Returns a new thread safe {@link Pool} that never returns {@code null} from
+   * {@link Pool#acquire()} and that contains objects of the type created by the given
+   * {@link Factory} with the given maximum size.
+   *
+   * <p>If the pool is empty when {@link Pool#acquire()} is called, the given {@link Factory} will
+   * be used to create a new instance.
+   *
+   * @param <T> The type of object the pool will contains.
+   */
+  public static <T extends Poolable> Pool<T> threadSafe(int size, Factory<T> factory) {
+    return build(new SynchronizedPool<T>(size), factory);
+  }
+
+  /**
+   * Returns a new {@link Pool} that never returns {@code null} and that contains {@link List Lists}
+   * of a specific generic type with a standard maximum size of 20.
+   *
+   * <p>If the pool is empty when {@link Pool#acquire()} is called, a new {@link List} will be
+   * created.
+   *
+   * @param <T> The type of object that the {@link List Lists} will contain.
+   */
+  public static <T> Pool<List<T>> threadSafeList() {
+    return threadSafeList(DEFAULT_POOL_SIZE);
+  }
+
+  /**
+   * Returns a new thread safe {@link Pool} that never returns {@code null} and that contains
+   * {@link List Lists} of a specific generic type with the given maximum size.
+   *
+   * <p>If the pool is empty when {@link Pool#acquire()} is called, a new {@link List} will be
+   * created.
+   *
+   * @param <T> The type of object that the {@link List Lists} will contain.
+   */
+  public static <T> Pool<List<T>> threadSafeList(int size) {
+    return build(new SynchronizedPool<List<T>>(size), new Factory<List<T>>() {
+      @Override
+      public List<T> create() {
+        return new ArrayList<>();
+      }
+    }, new Resetter<List<T>>() {
+      @Override
+      public void reset(List<T> object) {
+        object.clear();
+      }
+    });
+  }
+
+  private static <T extends Poolable> Pool<T> build(Pool<T> pool, Factory<T> factory) {
+    return build(pool, factory, FactoryPools.<T>emptyResetter());
+  }
+
+  private static <T> Pool<T> build(Pool<T> pool, Factory<T> factory,
+      Resetter<T> resetter) {
+    return new FactoryPool<>(pool, factory, resetter);
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T> Resetter<T> emptyResetter() {
+    return (Resetter<T>) EMPTY_RESETTER;
+  }
+
+  /**
+   * Creates new instances of the given type.
+   */
+  public interface Factory<T> {
+    T create();
+  }
+
+  /**
+   * Resets state when objects are returned to the pool.
+   */
+  public interface Resetter<T> {
+    void reset(T object);
+  }
+
+  /**
+   * Allows additional verification to catch errors caused by using objects while they are in
+   * an object pool.
+   */
+  public interface Poolable {
+    StateVerifier getVerifier();
+  }
+
+  private static final class FactoryPool<T> implements Pool<T> {
+    private final Factory<T> factory;
+    private final Resetter<T> resetter;
+    private final Pool<T> pool;
+
+    FactoryPool(Pool<T> pool, Factory<T> factory, Resetter<T> resetter) {
+      this.pool = pool;
+      this.factory = factory;
+      this.resetter = resetter;
+    }
+
+    @Override
+    public T acquire() {
+      T result = pool.acquire();
+      if (result == null) {
+        result = factory.create();
+        if (Log.isLoggable(TAG, Log.VERBOSE)) {
+          Log.v(TAG, "Created new " + result.getClass());
+        }
+      }
+      if (result instanceof Poolable) {
+        ((Poolable) result).getVerifier().setRecycled(false /*isRecycled*/);
+      }
+      return result;
+    }
+
+    @Override
+    public boolean release(T instance) {
+      if (instance instanceof Poolable) {
+        ((Poolable) instance).getVerifier().setRecycled(true /*isRecycled*/);
+      }
+      resetter.reset(instance);
+      return pool.release(instance);
+    }
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
new file mode 100644
index 000000000..b5268c68b
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
@@ -0,0 +1,69 @@
+package com.bumptech.glide.util.pool;
+
+/**
+ * Verifies that the job is not in the recycled state.
+ */
+public abstract class StateVerifier {
+  private static final boolean DEBUG = false;
+
+  /**
+   * Creates a new {@link StateVerifier} instance.
+   */
+  public static StateVerifier newInstance() {
+    if (DEBUG) {
+      return new DebugStateVerifier();
+    } else {
+      return new DefaultStateVerifier();
+    }
+  }
+
+  private StateVerifier() { }
+
+  /**
+   * Throws an exception if we believe our object is recycled and inactive (ie is currently in an
+   * object pool).
+   */
+  public abstract void throwIfRecycled();
+
+  /**
+   * Sets whether or not our objet is recycled.
+   */
+  abstract void setRecycled(boolean isRecycled);
+
+  private static class DefaultStateVerifier extends StateVerifier {
+    private volatile boolean isReleased;
+
+    @Override
+    public void throwIfRecycled() {
+      if (isReleased) {
+        throw new IllegalStateException("Already released");
+      }
+    }
+
+    @Override
+    public void setRecycled(boolean isRecycled) {
+      this.isReleased = isRecycled;
+    }
+  }
+
+  private static class DebugStateVerifier extends StateVerifier {
+    // Keeps track of the stack trace where our state was set to recycled.
+    private volatile RuntimeException recycledAtStackTraceException;
+
+    @Override
+    public void throwIfRecycled() {
+      if (recycledAtStackTraceException != null) {
+        throw new IllegalStateException("Already released", recycledAtStackTraceException);
+      }
+    }
+
+    @Override
+    void setRecycled(boolean isRecycled) {
+      if (isRecycled) {
+        this.recycledAtStackTraceException = new RuntimeException("Released");
+      } else {
+        this.recycledAtStackTraceException = null;
+      }
+    }
+  }
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
similarity index 81%
rename from library/src/androidTest/java/com/bumptech/glide/GlideTest.java
rename to library/src/test/java/com/bumptech/glide/GlideTest.java
index 4e8cb9013..01bdd28b8 100644
--- a/library/src/androidTest/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -3,10 +3,9 @@
 import static com.bumptech.glide.request.RequestOptions.decodeTypeOf;
 import static com.bumptech.glide.request.RequestOptions.placeholderOf;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.notNull;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
@@ -20,6 +19,7 @@
 import android.content.res.AssetFileDescriptor;
 import android.graphics.Bitmap;
 import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.media.MediaMetadataRetriever;
@@ -30,13 +30,15 @@
 import android.view.ViewGroup;
 import android.widget.ImageView;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.data.DataFetcher;
-import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
+import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.load.model.ModelLoader;
 import com.bumptech.glide.load.model.ModelLoaderFactory;
@@ -80,14 +82,12 @@
 import java.nio.ByteBuffer;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
 
 /**
  * Tests for the {@link Glide} interface and singleton.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = {
+@Config(manifest = Config.NONE, sdk = 18, shadows = {
     GlideTest.ShadowFileDescriptorContentResolver.class,
     GlideTest.ShadowMediaMetadataRetriever.class, GlideShadowLooper.class,
     GlideTest.MutableShadowBitmap.class })
@@ -111,10 +111,10 @@ public void setUp() throws Exception {
     target = mock(Target.class);
     imageView = new ImageView(RuntimeEnvironment.application);
     imageView.setLayoutParams(new ViewGroup.LayoutParams(100, 100));
-    doAnswer(new CallSizeReady()).when(target).getSize(any(SizeReadyCallback.class));
+    doAnswer(new CallSizeReady()).when(target).getSize(isA(SizeReadyCallback.class));
 
     Handler bgHandler = mock(Handler.class);
-    when(bgHandler.post(any(Runnable.class))).thenAnswer(new Answer<Boolean>() {
+    when(bgHandler.post(isA(Runnable.class))).thenAnswer(new Answer<Boolean>() {
       @Override
       public Boolean answer(InvocationOnMock invocation) throws Throwable {
         Runnable runnable = (Runnable) invocation.getArguments()[0];
@@ -202,10 +202,10 @@ private void runTestFileDefaultLoader() {
     File file = new File("fake");
     mockUri(Uri.fromFile(file));
 
-    requestManager.asDrawable().load(file).into(target);
-    requestManager.asDrawable().load(file).into(imageView);
+    requestManager.load(file).into(target);
+    requestManager.load(file).into(imageView);
 
-    verify(target).onResourceReady(any(Resource.class), any(Transition.class));
+    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
     verify(target).setRequest((Request) notNull());
 
     assertNotNull(imageView.getDrawable());
@@ -215,10 +215,10 @@ private void runTestFileDefaultLoader() {
   public void testUrlDefaultLoader() throws MalformedURLException {
     URL url = new URL("http://www.google.com");
 
-    requestManager.asDrawable().load(url).into(target);
-    requestManager.asDrawable().load(url).into(imageView);
+    requestManager.load(url).into(target);
+    requestManager.load(url).into(imageView);
 
-    verify(target).onResourceReady(any(Resource.class), any(Transition.class));
+    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
     verify(target).setRequest((Request) notNull());
 
     assertNotNull(imageView.getDrawable());
@@ -231,7 +231,7 @@ public void testAsBitmapOption() {
 
     requestManager.asBitmap().load(uri).into(target);
 
-    verify(target).onResourceReady(any(Bitmap.class), any(Transition.class));
+    verify(target).onResourceReady(isA(Bitmap.class), isA(Transition.class));
   }
 
   @Test
@@ -241,7 +241,7 @@ public void testToBytesOption() {
 
     requestManager.as(byte[].class).apply(decodeTypeOf(Bitmap.class)).load(uri).into(target);
 
-    verify(target).onResourceReady(any(byte[].class), any(Transition.class));
+    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));
   }
 
   @Test
@@ -265,10 +265,10 @@ private void runTestUriDefaultLoader() {
     Uri uri = Uri.parse("content://test/something");
     mockUri(uri);
 
-    requestManager.asDrawable().load(uri).into(target);
-    requestManager.asDrawable().load(uri).into(imageView);
+    requestManager.load(uri).into(target);
+    requestManager.load(uri).into(imageView);
 
-    verify(target).onResourceReady(anyObject(), any(Transition.class));
+    verify(target).onResourceReady(notNull(), isA(Transition.class));
     verify(target).setRequest((Request) notNull());
 
     assertNotNull(imageView.getDrawable());
@@ -326,22 +326,22 @@ private void runTestUriStringDefaultLoader() {
   }
 
   private void runTestStringDefaultLoader(String string) {
-    requestManager.asDrawable().load(string).listener(new RequestListener<Drawable>() {
+    requestManager.load(string).listener(new RequestListener<Drawable>() {
       @Override
-      public boolean onLoadFailed(Object model, Target target,
+      public boolean onLoadFailed(GlideException e, Object model, Target target,
           boolean isFirstResource) {
         throw new RuntimeException("Load failed");
       }
 
       @Override
       public boolean onResourceReady(Drawable resource, Object model, Target target,
-          boolean isFromMemoryCache, boolean isFirstResource) {
+          DataSource dataSource, boolean isFirstResource) {
         return false;
       }
     }).into(target);
-    requestManager.asDrawable().load(string).into(imageView);
+    requestManager.load(string).into(imageView);
 
-    verify(target).onResourceReady(any(Resource.class), any(Transition.class));
+    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
     verify(target).setRequest((Request) notNull());
 
     assertNotNull(imageView.getDrawable());
@@ -368,10 +368,10 @@ private void runTestIntegerDefaultLoader() {
     int integer = android.R.drawable.star_on;
     mockUri("android.resource://" + "android" + "/drawable/star_on");
 
-    requestManager.asDrawable().load(integer).into(target);
-    requestManager.asDrawable().load(integer).into(imageView);
+    requestManager.load(integer).into(target);
+    requestManager.load(integer).into(imageView);
 
-    verify(target).onResourceReady(any(Resource.class), any(Transition.class));
+    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
     verify(target).setRequest((Request) notNull());
 
     assertNotNull(imageView.getDrawable());
@@ -380,10 +380,10 @@ private void runTestIntegerDefaultLoader() {
   @Test
   public void testByteArrayDefaultLoader() {
     byte[] bytes = new byte[10];
-    requestManager.asDrawable().load(bytes).into(target);
-    requestManager.asDrawable().load(bytes).into(imageView);
+    requestManager.load(bytes).into(target);
+    requestManager.load(bytes).into(imageView);
 
-    verify(target).onResourceReady(any(Resource.class), any(Transition.class));
+    verify(target).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
     verify(target).setRequest((Request) notNull());
 
     assertNotNull(imageView.getDrawable());
@@ -393,7 +393,7 @@ public void testByteArrayDefaultLoader() {
   @Test(expected = Exception.class)
   public void testUnregisteredModelThrowsException() {
     Float unregistered = 0.5f;
-    requestManager.asDrawable().load(unregistered).into(target);
+    requestManager.load(unregistered).into(target);
   }
 
   @Test
@@ -401,7 +401,7 @@ public void testUnregisteredModelThrowsException() {
   public void testNonDefaultModelWithRegisteredFactoryDoesNotThrow() {
     registerMockStreamModelLoader(Float.class);
 
-    requestManager.asDrawable().load(0.5f).into(target);
+    requestManager.load(0.5f).into(target);
   }
 
   @Test
@@ -412,7 +412,7 @@ public void testReceivesGif() throws IOException {
 
     requestManager.asGif().load(fakeUri).into(target);
 
-    verify(target).onResourceReady(any(GifDrawable.class), any(Transition.class));
+    verify(target).onResourceReady(isA(GifDrawable.class), isA(Transition.class));
   }
 
   @Test
@@ -424,7 +424,7 @@ public void testReceivesGifBytes() throws IOException {
     requestManager.as(byte[].class).apply(decodeTypeOf(GifDrawable.class)).load(fakeUri)
         .into(target);
 
-    verify(target).onResourceReady(any(byte[].class), any(Transition.class));
+    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));
   }
 
   @Test
@@ -433,89 +433,108 @@ public void testReceivesBitmapBytes() {
     mockUri(fakeUri);
     requestManager.as(byte[].class).apply(decodeTypeOf(Bitmap.class)).load(fakeUri).into(target);
 
-    verify(target).onResourceReady(any(byte[].class), any(Transition.class));
+    verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));
   }
 
   @Test
   public void testReceivesThumbnails() {
     String full = mockUri("content://full");
     String thumb = mockUri("content://thumb");
-    requestManager.asDrawable().load(full).thumbnail(requestManager.asDrawable().load(thumb))
+    requestManager
+        .load(full)
+        .thumbnail(requestManager.load(thumb))
         .into(target);
 
-    verify(target, times(2)).onResourceReady(any(Drawable.class), any(Transition.class));
+    verify(target, times(2)).onResourceReady(isA(Drawable.class), isA(Transition.class));
   }
 
   @Test
   public void testReceivesRecursiveThumbnails() {
-    requestManager.asDrawable().load(mockUri("content://first")).thumbnail(
-        requestManager.asDrawable().load(mockUri("content://second")).thumbnail(
-            requestManager.asDrawable().load(mockUri("content://third"))
-                .thumbnail(requestManager.asDrawable().load(mockUri("content://fourth")))))
+    requestManager.load(mockUri("content://first")).thumbnail(
+        requestManager.load(mockUri("content://second")).thumbnail(
+            requestManager.load(mockUri("content://third")).thumbnail(
+                requestManager.load(mockUri("content://fourth")))))
         .into(target);
-    verify(target, times(4)).onResourceReady(any(Drawable.class), any(Transition.class));
+    verify(target, times(4)).onResourceReady(isA(Drawable.class), isA(Transition.class));
   }
 
   @Test
   public void testReceivesRecursiveThumbnailWithPercentage() {
-    requestManager.asDrawable().load(mockUri("content://first"))
-        .thumbnail(requestManager.asDrawable().load(mockUri("content://second")).thumbnail(0.5f))
+    requestManager.load(mockUri("content://first"))
+        .thumbnail(requestManager.load(mockUri("content://second")).thumbnail(0.5f))
         .into(target);
-    verify(target, times(3)).onResourceReady(any(Drawable.class), any(Transition.class));
+    verify(target, times(3)).onResourceReady(isA(Drawable.class), isA(Transition.class));
   }
 
   @Test
   public void testNullModelInGenericImageLoadDoesNotThrow() {
-    requestManager.asDrawable().load((Double) null).into(target);
+    requestManager.load(null).into(target);
   }
 
   @Test
   public void testNullModelInGenericVideoLoadDoesNotThrow() {
-    requestManager.asDrawable().load((Float) null).into(target);
+    requestManager.load(null).into(target);
   }
 
   @Test
   public void testNullModelInGenericLoadDoesNotThrow() {
-    requestManager.asDrawable().load((Double) null).into(target);
+    requestManager.load(null).into(target);
   }
 
   @Test
   public void testNullModelDoesNotThrow() {
-    String nullString = null;
-
     Drawable drawable = new ColorDrawable(Color.RED);
-    requestManager.asDrawable().load(nullString).apply(placeholderOf(drawable)).into(target);
+    requestManager
+        .load(null)
+        .apply(placeholderOf(drawable))
+        .into(target);
 
     verify(target).onLoadFailed(eq(drawable));
   }
 
   @Test
   public void testNullModelPrefersErrorDrawable() {
-    String nullString = null;
-
     Drawable placeholder = new ColorDrawable(Color.GREEN);
     Drawable error = new ColorDrawable(Color.RED);
 
-    requestManager.asDrawable().load(nullString).apply(placeholderOf(placeholder).error(error))
+    requestManager
+        .load(null)
+        .apply(placeholderOf(placeholder)
+            .error(error))
         .into(target);
 
     verify(target).onLoadFailed(eq(error));
   }
 
+  @Test
+  public void testNullModelPrefersFallbackDrwaable() {
+    Drawable placeholder = new ColorDrawable(Color.GREEN);
+    Drawable error = new ColorDrawable(Color.RED);
+    Drawable fallback = new ColorDrawable(Color.BLUE);
+
+    requestManager
+        .load(null)
+        .apply(placeholderOf(placeholder)
+            .error(error)
+            .fallback(fallback))
+        .into(target);
+
+    verify(target).onLoadFailed(eq(fallback));
+  }
+
   @Test
   public void testByteData() {
     byte[] data = new byte[] { 1, 2, 3, 4, 5, 6 };
-    requestManager.asDrawable().load(data).into(target);
+    requestManager.load(data).into(target);
   }
 
   @Test
   public void testClone() throws IOException {
     Target firstTarget = mock(Target.class);
-    doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(any(SizeReadyCallback.class));
+    doAnswer(new CallSizeReady(100, 100)).when(firstTarget).getSize(isA(SizeReadyCallback.class));
     Target secondTarget = mock(Target.class);
-    doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(any(SizeReadyCallback.class));
+    doAnswer(new CallSizeReady(100, 100)).when(secondTarget).getSize(isA(SizeReadyCallback.class));
     RequestBuilder<Drawable> firstRequest = Glide.with(getContext())
-        .asDrawable()
         .load(mockUri("content://first"));
 
     firstRequest.into(firstTarget);
@@ -524,8 +543,8 @@ public void testClone() throws IOException {
         .apply(placeholderOf(new ColorDrawable(Color.RED)))
         .into(secondTarget);
 
-    verify(firstTarget).onResourceReady(any(Resource.class), any(Transition.class));
-    verify(secondTarget).onResourceReady(anyObject(), any(Transition.class));
+    verify(firstTarget).onResourceReady(isA(BitmapDrawable.class), isA(Transition.class));
+    verify(secondTarget).onResourceReady(notNull(), isA(Transition.class));
   }
 
   @SuppressWarnings("unchecked")
@@ -534,14 +553,14 @@ public void testClone() throws IOException {
     DataFetcher<Z> failFetcher = mock(DataFetcher.class);
     doAnswer(new Util.CallDataReady(null))
         .when(failFetcher)
-        .loadData(any(Priority.class), any(DataFetcher.DataCallback.class));
+        .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));
     when(failFetcher.getDataClass()).thenReturn(failResource);
     ModelLoader<T, Z> failLoader = mock(ModelLoader.class);
-    when(failLoader.buildLoadData(any(failModel), anyInt(), anyInt(), any(Options.class)))
+    when(failLoader.buildLoadData(isA(failModel), anyInt(), anyInt(), isA(Options.class)))
         .thenReturn(new ModelLoader.LoadData<>(mock(Key.class), failFetcher));
-    when(failLoader.handles(any(failModel))).thenReturn(true);
+    when(failLoader.handles(isA(failModel))).thenReturn(true);
     ModelLoaderFactory<T, Z> failFactory = mock(ModelLoaderFactory.class);
-    when(failFactory.build(any(Context.class), any(MultiModelLoaderFactory.class)))
+    when(failFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class)))
         .thenReturn(failLoader);
 
     Glide.get(getContext()).getRegistry().prepend(failModel, failResource, failFactory);
@@ -580,7 +599,7 @@ private Context getContext() {
   private <T> void registerMockStreamModelLoader(final Class<T> modelClass) {
     ModelLoader<T, InputStream> modelLoader = mockStreamModelLoader(modelClass);
     ModelLoaderFactory<T, InputStream> modelLoaderFactory = mock(ModelLoaderFactory.class);
-    when(modelLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class)))
+    when(modelLoaderFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class)))
         .thenReturn(modelLoader);
 
     Glide.get(RuntimeEnvironment.application).getRegistry()
@@ -593,14 +612,14 @@ private Context getContext() {
     DataFetcher<InputStream> fetcher = mock(DataFetcher.class);
     try {
       doAnswer(new Util.CallDataReady(new ByteArrayInputStream(new byte[0]))).when(fetcher)
-          .loadData(any(Priority.class), any(DataFetcher.DataCallback.class));
+          .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));
     } catch (Exception e) {
       // Do nothing.
     }
     when(fetcher.getDataClass()).thenReturn(InputStream.class);
-    when(modelLoader.buildLoadData(any(modelClass), anyInt(), anyInt(), any(Options.class)))
+    when(modelLoader.buildLoadData(isA(modelClass), anyInt(), anyInt(), isA(Options.class)))
         .thenReturn(new ModelLoader.LoadData<>(mock(Key.class), fetcher));
-    when(modelLoader.handles(any(modelClass))).thenReturn(true);
+    when(modelLoader.handles(isA(modelClass))).thenReturn(true);
 
     return modelLoader;
   }
@@ -635,21 +654,21 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
     @Override
     public void applyOptions(Context context, GlideBuilder builder) {
       // Run all tasks on the main thread so they complete synchronously.
-      ExecutorService service = mock(ExecutorService.class);
-      when(service.submit(any(Runnable.class))).thenAnswer(new Answer<Future<?>>() {
+      GlideExecutor executor = mock(GlideExecutor.class);
+      doAnswer(new Answer<Void>() {
         @Override
-        public Future<?> answer(InvocationOnMock invocation) throws Throwable {
+        public Void answer(InvocationOnMock invocation) throws Throwable {
           Runnable runnable = (Runnable) invocation.getArguments()[0];
           runnable.run();
-          return mock(Future.class);
+          return null;
         }
-      });
+      }).when(executor).execute(isA(Runnable.class));
 
       DiskCache.Factory diskCacheFactory = mock(DiskCache.Factory.class);
       when(diskCacheFactory.build()).thenReturn(mock(DiskCache.class));
 
       builder.setMemoryCache(mock(MemoryCache.class)).setDiskCache(diskCacheFactory)
-          .setResizeService(service).setDiskCacheService(service);
+          .setResizeExecutor(executor).setDiskCacheExecutor(executor);
     }
 
     @Override
@@ -671,16 +690,16 @@ public void registerComponents(Context context, Registry registry) {
       try {
         doAnswer(new Util.CallDataReady<>(loadedData))
             .when(mockStreamFetcher)
-            .loadData(any(Priority.class), any(DataFetcher.DataCallback.class));
+            .loadData(isA(Priority.class), isA(DataFetcher.DataCallback.class));
       } catch (Exception e) {
         throw new RuntimeException(e);
       }
       ModelLoader<X, Y> mockUrlLoader = mock(ModelLoader.class);
-      when(mockUrlLoader.buildLoadData(any(modelClass), anyInt(), anyInt(), any(Options.class)))
+      when(mockUrlLoader.buildLoadData(isA(modelClass), anyInt(), anyInt(), isA(Options.class)))
           .thenReturn(new ModelLoader.LoadData<>(mock(Key.class), mockStreamFetcher));
-      when(mockUrlLoader.handles(any(modelClass))).thenReturn(true);
+      when(mockUrlLoader.handles(isA(modelClass))).thenReturn(true);
       ModelLoaderFactory<X, Y> mockUrlLoaderFactory = mock(ModelLoaderFactory.class);
-      when(mockUrlLoaderFactory.build(any(Context.class), any(MultiModelLoaderFactory.class)))
+      when(mockUrlLoaderFactory.build(isA(Context.class), isA(MultiModelLoaderFactory.class)))
           .thenReturn(mockUrlLoader);
 
       registry.replace(modelClass, dataClass, mockUrlLoaderFactory);
diff --git a/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java
rename to library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
index 26b0ca716..34d04e635 100644
--- a/library/src/androidTest/java/com/bumptech/glide/ListPreloaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/ListPreloaderTest.java
@@ -31,7 +31,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ListPreloaderTest {
 
   @Mock private RequestBuilder<Bitmap> request;
diff --git a/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
similarity index 86%
rename from library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java
rename to library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
index 55871ce7e..f08fae2af 100644
--- a/library/src/androidTest/java/com/bumptech/glide/RequestBuilderTest.java
+++ b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
@@ -1,14 +1,15 @@
 package com.bumptech.glide;
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import android.widget.ImageView;
 
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
@@ -25,7 +26,7 @@
 
 @SuppressWarnings("unchecked")
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class RequestBuilderTest {
   @Mock GlideContext glideContext;
   @Mock RequestManager requestManager;
@@ -55,7 +56,7 @@ public void testAddsNewRequestToRequestTracker() {
     Target target = mock(Target.class);
     getNullModelRequest().into(target);
 
-    verify(requestManager).track(eq(target), any(Request.class));
+    verify(requestManager).track(eq(target), isA(Request.class));
   }
 
   @Test
@@ -103,9 +104,11 @@ public void runTest() throws Exception {
   }
 
   private RequestBuilder getNullModelRequest() {
-    when(glideContext.buildImageViewTarget(any(ImageView.class), any(Class.class)))
+    when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class)))
         .thenReturn(mock(Target.class));
-    when(glideContext.getOptions()).thenReturn(new RequestOptions());
+    when(glideContext.getDefaultRequestOptions()).thenReturn(new RequestOptions());
+    when(requestManager.getDefaultRequestOptions())
+        .thenReturn((BaseRequestOptions) new RequestOptions());
     return new RequestBuilder(glideContext, requestManager, Object.class)
         .load((Object) null);
   }
diff --git a/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java b/library/src/test/java/com/bumptech/glide/RequestManagerTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
rename to library/src/test/java/com/bumptech/glide/RequestManagerTest.java
index eabddf31f..0e171262f 100644
--- a/library/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
+++ b/library/src/test/java/com/bumptech/glide/RequestManagerTest.java
@@ -3,8 +3,8 @@
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -33,7 +33,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, sdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerTest {
   @Mock Lifecycle lifecycle = mock(Lifecycle.class);
   @Mock RequestManagerTreeNode treeNode = mock(RequestManagerTreeNode.class);
@@ -48,7 +48,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     connectivityMonitor = mock(ConnectivityMonitor.class);
     ConnectivityMonitorFactory factory = mock(ConnectivityMonitorFactory.class);
-    when(factory.build(any(Context.class), any(ConnectivityMonitor.ConnectivityListener.class)))
+    when(factory.build(isA(Context.class), isA(ConnectivityMonitor.ConnectivityListener.class)))
         .thenAnswer(new Answer<ConnectivityMonitor>() {
           @Override
           public ConnectivityMonitor answer(InvocationOnMock invocation) throws Throwable {
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/MultiTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/MultiTransformationTest.java
rename to library/src/test/java/com/bumptech/glide/load/MultiTransformationTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/OptionsTest.java b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java
similarity index 95%
rename from library/src/androidTest/java/com/bumptech/glide/load/OptionsTest.java
rename to library/src/test/java/com/bumptech/glide/load/OptionsTest.java
index 83cc3df88..7205db1dc 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/OptionsTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/OptionsTest.java
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class OptionsTest {
 
   @Test
@@ -33,4 +33,4 @@ public void testEquals() {
         ).testEquals();
   }
 
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java b/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
index 13d1ac629..a682ff139 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/ExifOrientationStreamTest.java
@@ -16,7 +16,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ExifOrientationStreamTest {
   private LruByteArrayPool byteArrayPool;
 
@@ -47,4 +47,4 @@ public void testIncludesGivenExifOrientation() throws IOException {
       }
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
index d7b89d15f..4e2b4636f 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcherTest.java
@@ -23,7 +23,7 @@
 import java.io.IOException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class FileDescriptorAssetPathFetcherTest {
 
   @Mock AssetManager assetManager;
@@ -70,4 +70,4 @@ public void testDoesNothingOnCancel() throws Exception {
     fetcher.cancel();
     verify(expected, never()).close();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java b/library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
similarity index 92%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
index 8cd831735..0d9fbc268 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherServerTest.java
@@ -1,7 +1,7 @@
 package com.bumptech.glide.load.data;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.isNull;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -38,7 +38,7 @@
  * {@link com.bumptech.glide.load.data.HttpUrlFetcherTest}, response handling should go here.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class HttpUrlFetcherServerTest {
   private static final String DEFAULT_PATH = "/fakepath";
   private static final int TIMEOUT_TIME_MS = 300;
@@ -55,7 +55,7 @@ public void setUp() throws IOException {
     defaultFollowRedirects = HttpURLConnection.getFollowRedirects();
     HttpURLConnection.setFollowRedirects(false);
     mockWebServer = new MockWebServer();
-    mockWebServer.play();
+    mockWebServer.start();
 
     streamCaptor = ArgumentCaptor.forClass(InputStream.class);
   }
@@ -143,7 +143,7 @@ public void testFailsOnRedirectLoops() throws Exception {
 
     getFetcher().loadData(Priority.IMMEDIATE, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -152,7 +152,7 @@ public void testFailsIfRedirectLocationIsNotPresent() throws Exception {
 
     getFetcher().loadData(Priority.NORMAL, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -161,7 +161,7 @@ public void testFailsIfRedirectLocationIsPresentAndEmpty() throws Exception {
 
     getFetcher().loadData(Priority.NORMAL, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -169,7 +169,7 @@ public void testFailsIfStatusCodeIsNegativeOne() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(-1));
     getFetcher().loadData(Priority.LOW, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -180,7 +180,7 @@ public void testFailsAfterTooManyRedirects() throws Exception {
     }
     getFetcher().loadData(Priority.NORMAL, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -188,7 +188,7 @@ public void testFailsIfStatusCodeIs500() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(500));
     getFetcher().loadData(Priority.NORMAL, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -196,7 +196,7 @@ public void testFailsIfStatusCodeIs400() throws Exception {
     mockWebServer.enqueue(new MockResponse().setResponseCode(400));
     getFetcher().loadData(Priority.LOW, callback);
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -204,7 +204,7 @@ public void testSetsReadTimeout() throws Exception {
     MockWebServer tempWebServer = new MockWebServer();
     tempWebServer.enqueue(
         new MockResponse().setBody("test").throttleBody(1, TIMEOUT_TIME_MS, TimeUnit.MILLISECONDS));
-    tempWebServer.play();
+    tempWebServer.start();
 
     try {
       getFetcher().loadData(Priority.HIGH, callback);
@@ -214,7 +214,7 @@ public void testSetsReadTimeout() throws Exception {
       mockWebServer.enqueue(new MockResponse().setResponseCode(200));
     }
 
-    verify(callback).onDataReady(isNull(InputStream.class));
+    verify(callback).onLoadFailed(isA(IOException.class));
   }
 
   @Test
@@ -233,7 +233,7 @@ public void testAppliesHeadersInGlideUrl() throws Exception {
   }
 
   private HttpUrlFetcher getFetcher() {
-    return getFetcher(Headers.NONE);
+    return getFetcher(Headers.DEFAULT);
   }
 
   private HttpUrlFetcher getFetcher(Headers headers) {
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
index 08eff22a1..7f70a4a82 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/HttpUrlFetcherTest.java
@@ -26,7 +26,7 @@
 import java.net.URL;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class HttpUrlFetcherTest {
   @Mock HttpURLConnection urlConnection;
   @Mock HttpUrlFetcher.HttpUrlConnectionFactory connectionFactory;
@@ -116,4 +116,4 @@ public void testClosesStreamBeforeDisconnectingConnection() throws IOException {
     order.verify(stream).close();
     order.verify(urlConnection).disconnect();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
index 9ce0532d5..af261f814 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
@@ -25,7 +25,7 @@
 import java.io.IOException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class LocalUriFetcherTest {
   private TestLocalUriFetcher fetcher;
   @Mock DataFetcher.DataCallback<Closeable> callback;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
index ba4aba3e0..2f57e9cc1 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/StreamAssetPathFetcherTest.java
@@ -21,7 +21,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class StreamAssetPathFetcherTest {
   @Mock AssetManager assetManager;
   @Mock InputStream expected;
@@ -64,4 +64,4 @@ public void testDoesNothingOnCancel() throws Exception {
     fetcher.cancel();
     verify(expected, never()).close();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
index 4b9453cf8..0b0673dc3 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
@@ -23,7 +23,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ThumbFetcherTest {
 
   @Mock ThumbnailStreamOpener opener;
@@ -63,4 +63,4 @@ public void testClosesInputStreamFromThumbnailOpenerOnCleanup() throws Exception
   public void testDoesNotThrowIfCleanupWithNullInputStream() {
     fetcher.cleanup();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java b/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
index 3f73a5f1a..a6f9070da 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
@@ -30,7 +30,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ThumbnailStreamOpenerTest {
   private Harness harness;
 
@@ -129,4 +129,4 @@ public ThumbnailStreamOpener get() {
       return new ThumbnailStreamOpener(service, query, byteArrayPool);
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
similarity index 95%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
index 2725926fe..b9790640b 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
@@ -27,7 +27,7 @@
 import org.robolectric.internal.ShadowExtractor;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { ContentResolverShadow.class })
+@Config(manifest = Config.NONE, sdk = 18, shadows = { ContentResolverShadow.class })
 public class FileDescriptorLocalUriFetcherTest {
 
   @Mock DataFetcher.DataCallback<ParcelFileDescriptor> callback;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
rename to library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
index 4bbdb6736..ee8f8d922 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
@@ -22,7 +22,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class StreamLocalUriFetcherTest {
   @Mock DataFetcher.DataCallback<InputStream> callback;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
index 35a67441d..33ea85ac1 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/DataCacheKeyTest.java
@@ -65,4 +65,4 @@ public void testSameIfIdAndSignatureAreTheSame()
 
     KeyAssertions.assertSame(first, second);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
similarity index 61%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
index eb655a253..1987cc797 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineJobTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.tests.Util.anyResource;
+import static com.bumptech.glide.tests.Util.isADataSource;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
@@ -14,8 +16,11 @@
 import static org.mockito.Mockito.when;
 
 import android.os.Handler;
+import android.support.v4.util.Pools;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 
 import org.junit.Before;
@@ -30,13 +35,10 @@
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Future;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class EngineJobTest {
   private EngineJobHarness harness;
 
@@ -47,15 +49,19 @@ public void setUp() {
 
   @Test
   public void testOnResourceReadyPassedToCallbacks() throws Exception {
-    harness.getJob().onResourceReady(harness.resource);
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.cb).onResourceReady(eq(harness.engineResource));
+    verify(harness.cb).onResourceReady(eq(harness.engineResource), eq(harness.dataSource));
   }
 
   @Test
   public void testListenerNotifiedJobCompleteOnOnResourceReady() {
-    harness.getJob().onResourceReady(harness.resource);
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
 
@@ -65,25 +71,29 @@ public void testListenerNotifiedJobCompleteOnOnResourceReady() {
   @Test
   public void testNotifiesAllCallbacksOnReady() {
     MultiCbHarness harness = new MultiCbHarness();
-    harness.job.onResourceReady(harness.resource);
+    harness.job.start(harness.decodeJob);
+    harness.job.onResourceReady(harness.resource, harness.dataSource);
     for (ResourceCallback cb : harness.cbs) {
-      verify(cb).onResourceReady(eq(harness.engineResource));
+      verify(cb).onResourceReady(eq(harness.engineResource), eq(harness.dataSource));
     }
   }
 
   @Test
   public void testNotifiesAllCallbacksOnException() {
     MultiCbHarness harness = new MultiCbHarness();
-    harness.job.onLoadFailed();
+    harness.job.start(harness.decodeJob);
+    GlideException exception = new GlideException("test");
+    harness.job.onLoadFailed(exception);
     for (ResourceCallback cb : harness.cbs) {
-      verify(cb).onLoadFailed();
+      verify(cb).onLoadFailed(eq(exception));
     }
   }
 
   @Test
   public void testAcquiresResourceOncePerCallback() {
     MultiCbHarness harness = new MultiCbHarness();
-    harness.job.onResourceReady(harness.resource);
+    harness.job.start(harness.decodeJob);
+    harness.job.onResourceReady(harness.resource, harness.dataSource);
 
     // Acquired once and then released while notifying.
     InOrder order = inOrder(harness.engineResource);
@@ -94,7 +104,9 @@ public void testAcquiresResourceOncePerCallback() {
   @Test
   public void testListenerNotifiedJobCompleteOnException() {
     harness = new EngineJobHarness();
-    harness.getJob().onLoadFailed();
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onLoadFailed(new GlideException("test"));
     ShadowLooper.runUiThreadTasks();
     verify(harness.listener).onEngineJobComplete(eq(harness.key), (EngineResource) isNull());
   }
@@ -102,24 +114,28 @@ public void testListenerNotifiedJobCompleteOnException() {
   @Test
   public void testResourceIsCacheableWhenIsCacheableOnReady() {
     harness.isCacheable = true;
-    harness.getJob().onResourceReady(harness.resource);
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));
+    verify(harness.factory).build(anyResource(), eq(harness.isCacheable));
   }
 
   @Test
   public void testResourceIsCacheableWhenNotIsCacheableOnReady() {
     harness.isCacheable = false;
-    harness.getJob().onResourceReady(harness.resource);
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.factory).build(any(Resource.class), eq(harness.isCacheable));
+    verify(harness.factory).build(anyResource(), eq(harness.isCacheable));
   }
 
   @Test
   public void testListenerNotifiedOfCancelOnCancel() {
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
     job.cancel();
 
@@ -128,32 +144,32 @@ public void testListenerNotifiedOfCancelOnCancel() {
 
   @Test
   public void testOnResourceReadyNotDeliveredAfterCancel() {
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
     job.cancel();
 
-    job.onResourceReady(harness.resource);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.cb, never()).onResourceReady(eq(harness.resource));
+    verify(harness.cb, never()).onResourceReady(anyResource(), isADataSource());
   }
 
   @Test
   public void testOnExceptionNotDeliveredAfterCancel() {
     harness = new EngineJobHarness();
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
     job.cancel();
 
-    job.onLoadFailed();
+    job.onLoadFailed(new GlideException("test"));
 
     ShadowLooper.runUiThreadTasks();
-    verify(harness.cb, never()).onLoadFailed();
+    verify(harness.cb, never()).onLoadFailed(any(GlideException.class));
   }
 
   @Test
   public void testRemovingAllCallbacksCancelsRunner() {
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
     job.removeCallback(harness.cb);
 
@@ -172,24 +188,26 @@ public void removingSomeCallbacksDoesNotCancelRunner() {
 
   @Test
   public void testResourceIsAcquiredOncePerConsumerAndOnceForCache() {
-    harness.getJob().onResourceReady(harness.resource);
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     // Once while notifying and once for single callback.
     verify(harness.engineResource, times(2)).acquire();
   }
 
   @Test
-  public void testDoesNotNotifyCancelledIfCompletesBeforeCancel() {
-    EngineJob job = harness.getJob();
-    job.onResourceReady(harness.resource);
-    job.cancel();
+  public void testDoesNotNotifyCancelledIfCompletes() {
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     verify(harness.listener, never()).onEngineJobCancelled(eq(job), eq(harness.key));
   }
 
   @Test
   public void testDoesNotNotifyCancelledIfAlreadyCancelled() {
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
     job.cancel();
     job.cancel();
@@ -199,10 +217,9 @@ public void testDoesNotNotifyCancelledIfAlreadyCancelled() {
 
   @Test
   public void testDoesNotNotifyCancelledIfReceivedException() {
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
-    job.onLoadFailed();
-    job.cancel();
+    job.onLoadFailed(new GlideException("test"));
 
     verify(harness.listener).onEngineJobComplete(eq(harness.key), (EngineResource) isNull());
     verify(harness.listener, never()).onEngineJobCancelled(any(EngineJob.class), any(Key.class));
@@ -213,9 +230,9 @@ public void testReleasesResourceIfCancelledOnReady() {
     ShadowLooper shadowLooper = Shadows.shadowOf(harness.mainHandler.getLooper());
     shadowLooper.pause();
 
-    EngineJob job = harness.getJob();
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
-    job.onResourceReady(harness.resource);
+    job.onResourceReady(harness.resource, harness.dataSource);
     job.cancel();
     shadowLooper.runOneTask();
 
@@ -225,14 +242,16 @@ public void testReleasesResourceIfCancelledOnReady() {
   @Test
   public void testDoesNotAcquireOnceForMemoryCacheIfNotCacheable() {
     harness.isCacheable = false;
-    harness.getJob().onResourceReady(harness.resource);
+    EngineJob<Object> job = harness.getJob();
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     verify(harness.engineResource, times(2)).acquire();
   }
 
   @Test
   public void testNotifiesNewCallbackOfResourceIfCallbackIsAddedDuringOnResourceReady() {
-    final EngineJob job = harness.getJob();
+    final EngineJob<Object> job = harness.getJob();
     final ResourceCallback existingCallback = mock(ResourceCallback.class);
     final ResourceCallback newCallback = mock(ResourceCallback.class);
 
@@ -242,12 +261,13 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.addCallback(newCallback);
         return null;
       }
-    }).when(existingCallback).onResourceReady(any(Resource.class));
+    }).when(existingCallback).onResourceReady(anyResource(), isADataSource());
 
     job.addCallback(existingCallback);
-    job.onResourceReady(harness.resource);
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
-    verify(newCallback).onResourceReady(eq(harness.engineResource));
+    verify(newCallback).onResourceReady(eq(harness.engineResource), eq(harness.dataSource));
   }
 
   @Test
@@ -263,17 +283,19 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.addCallback(newCallback);
         return null;
       }
-    }).when(existingCallback).onLoadFailed();
+    }).when(existingCallback).onLoadFailed(any(GlideException.class));
 
+    GlideException exception = new GlideException("test");
     job.addCallback(existingCallback);
-    job.onLoadFailed();
+    job.start(harness.decodeJob);
+    job.onLoadFailed(exception);
 
-    verify(newCallback).onLoadFailed();
+    verify(newCallback).onLoadFailed(eq(exception));
   }
 
   @Test
   public void testRemovingCallbackDuringOnResourceReadyIsIgnoredIfCallbackHasAlreadyBeenCalled() {
-    final EngineJob job = harness.getJob();
+    final EngineJob<Object> job = harness.getJob();
     final ResourceCallback cb = mock(ResourceCallback.class);
 
     doAnswer(new Answer() {
@@ -282,18 +304,19 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.removeCallback(cb);
         return null;
       }
-    }).when(cb).onResourceReady(any(Resource.class));
+    }).when(cb).onResourceReady(anyResource(), isADataSource());
 
     job.addCallback(cb);
-    job.onResourceReady(harness.resource);
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
-    verify(cb, times(1)).onResourceReady(any(Resource.class));
+    verify(cb, times(1)).onResourceReady(anyResource(), isADataSource());
   }
 
   @Test
   public void testRemovingCallbackDuringOnExceptionIsIgnoredIfCallbackHasAlreadyBeenCalled() {
     harness = new EngineJobHarness();
-    final EngineJob job = harness.getJob();
+    final EngineJob<Object> job = harness.getJob();
     final ResourceCallback cb = mock(ResourceCallback.class);
 
     doAnswer(new Answer() {
@@ -302,18 +325,20 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.removeCallback(cb);
         return null;
       }
-    }).when(cb).onLoadFailed();
+    }).when(cb).onLoadFailed(any(GlideException.class));
 
+    GlideException exception = new GlideException("test");
     job.addCallback(cb);
-    job.onLoadFailed();
+    job.start(harness.decodeJob);
+    job.onLoadFailed(exception);
 
-    verify(cb, times(1)).onLoadFailed();
+    verify(cb, times(1)).onLoadFailed(eq(exception));
   }
 
   @Test
   public void
   testRemovingCallbackDuringOnResourceReadyPreventsCallbackFromBeingCalledIfNotYetCalled() {
-    final EngineJob job = harness.getJob();
+    final EngineJob<Object> job = harness.getJob();
     final ResourceCallback notYetCalled = mock(ResourceCallback.class);
 
     doAnswer(new Answer() {
@@ -322,19 +347,19 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.removeCallback(notYetCalled);
         return null;
       }
-    }).when(harness.cb).onResourceReady(any(Resource.class));
+    }).when(harness.cb).onResourceReady(anyResource(), isADataSource());
 
     job.addCallback(notYetCalled);
+    job.start(harness.decodeJob);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
-    job.onResourceReady(harness.resource);
-
-    verify(notYetCalled, never()).onResourceReady(any(Resource.class));
+    verify(notYetCalled, never()).onResourceReady(anyResource(), isADataSource());
   }
 
   @Test
   public void
   testRemovingCallbackDuringOnResourceReadyPreventsResourceFromBeingAcquiredForCallback() {
-    final EngineJob job = harness.getJob();
+    final EngineJob<Object> job = harness.getJob();
     final ResourceCallback notYetCalled = mock(ResourceCallback.class);
 
     doAnswer(new Answer() {
@@ -343,11 +368,12 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.removeCallback(notYetCalled);
         return null;
       }
-    }).when(harness.cb).onResourceReady(any(Resource.class));
+    }).when(harness.cb).onResourceReady(anyResource(), isADataSource());
 
     job.addCallback(notYetCalled);
+    job.start(harness.decodeJob);
 
-    job.onResourceReady(harness.resource);
+    job.onResourceReady(harness.resource, harness.dataSource);
 
     // Once for notifying, once for called.
     verify(harness.engineResource, times(2)).acquire();
@@ -356,7 +382,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
   @Test
   public void testRemovingCallbackDuringOnExceptionPreventsCallbackFromBeingCalledIfNotYetCalled() {
     harness = new EngineJobHarness();
-    final EngineJob job = harness.getJob();
+    final EngineJob<Object> job = harness.getJob();
     final ResourceCallback called = mock(ResourceCallback.class);
     final ResourceCallback notYetCalled = mock(ResourceCallback.class);
 
@@ -366,79 +392,52 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         job.removeCallback(notYetCalled);
         return null;
       }
-    }).when(called).onLoadFailed();
+    }).when(called).onLoadFailed(any(GlideException.class));
 
     job.addCallback(called);
     job.addCallback(notYetCalled);
-    job.onLoadFailed();
+    job.start(harness.decodeJob);
+    job.onLoadFailed(new GlideException("test"));
 
-    verify(notYetCalled, never()).onResourceReady(any(Resource.class));
+    verify(notYetCalled, never()).onResourceReady(anyResource(), isADataSource());
   }
 
   @Test
-  public void testRemovingCallbackAfterLoadFailsWithNullExceptionDoesNotCancelJob() {
-    EngineJob job = harness.getJob();
-
-    job.onLoadFailed();
-    job.removeCallback(harness.cb);
-    verify(harness.listener, never()).onEngineJobCancelled(any(EngineJob.class), any(Key.class));
-  }
-
-  @Test
-  public void testCancelsFutureFromDiskCacheServiceIfCancelledAfterStartButBeforeSourceSubmit() {
-    Future future = mock(Future.class);
-    when(harness.diskCacheService.submit(eq(harness.decodeJob))).thenReturn(future);
-
-    EngineJob job = harness.getJob();
+  public void testCancelsDecodeJobOnCancel() {
+    EngineJob<Object> job = harness.getJob();
     job.start(harness.decodeJob);
     job.cancel();
 
-    verify(future).cancel(eq(true));
+    verify(harness.decodeJob).cancel();
   }
 
   @Test
-  public void testCancelsFutureFromSourceServiceIfCancelledAfterSourceSubmit() {
-    Future future = mock(Future.class);
-    when(harness.sourceService.submit(eq(harness.decodeJob))).thenReturn(future);
-
-    EngineJob job = harness.getJob();
-    job.start(harness.decodeJob);
+  public void testSubmitsDecodeJobToSourceServiceOnSubmitForSource() {
+    EngineJob<Object> job = harness.getJob();
     job.reschedule(harness.decodeJob);
-    job.cancel();
 
-    verify(future).cancel(eq(true));
+    verify(harness.sourceService).execute(eq(harness.decodeJob));
   }
 
   @Test
-  public void testCancelsEngineRunnableOnCancel() {
-    EngineJob job = harness.getJob();
+  public void testSubmitsDecodeJobToDiskCacheServiceWhenDecodingFromCacheOnStart() {
+    EngineJob<Object> job = harness.getJob();
+    when(harness.decodeJob.willDecodeFromCache()).thenReturn(true);
     job.start(harness.decodeJob);
-    job.cancel();
 
-    verify(harness.decodeJob).cancel();
+    verify(harness.diskCacheService).execute(eq(harness.decodeJob));
   }
 
   @Test
-  public void testSubmitsRunnableToSourceServiceOnSubmitForSource() {
-    EngineJob job = harness.getJob();
-    job.reschedule(harness.decodeJob);
-
-    verify(harness.sourceService).submit(eq(harness.decodeJob));
-  }
-
-  @Test
-  public void testSubimtsRunnableToDiskCacheServiceOnStart() {
-    EngineJob job = harness.getJob();
+  public void testSubmitsDecodeJobToSourceServiceWhenDecodingFromSoureOnlyOnStart() {
+    EngineJob<Object> job = harness.getJob();
+    when(harness.decodeJob.willDecodeFromCache()).thenReturn(false);
     job.start(harness.decodeJob);
 
-    verify(harness.diskCacheService).submit(eq(harness.decodeJob));
-  }
-
-  @SafeVarargs
-  private static <T> List<T> list(T... items) {
-    return Arrays.asList(items);
+    verify(harness.sourceService).execute(eq(harness.decodeJob));
   }
 
+  @SuppressWarnings("unchecked")
   private static class MultiCbHarness {
     Key key = mock(Key.class);
     Resource<Object> resource = mock(Resource.class);
@@ -448,13 +447,17 @@ public void testSubimtsRunnableToDiskCacheServiceOnStart() {
     int numCbs = 10;
     List<ResourceCallback> cbs = new ArrayList<>();
     EngineJob.EngineResourceFactory factory = mock(EngineJob.EngineResourceFactory.class);
-    EngineJob job;
-    ExecutorService diskCacheService = mock(ExecutorService.class);
-    ExecutorService sourceService = mock(ExecutorService.class);
+    EngineJob<Object> job;
+    GlideExecutor diskCacheService = mock(GlideExecutor.class);
+    GlideExecutor sourceService = mock(GlideExecutor.class);
+    Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);
+    DecodeJob<Object> decodeJob = mock(DecodeJob.class);
+    DataSource dataSource = DataSource.LOCAL;
 
     public MultiCbHarness() {
       when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);
-      job = new EngineJob(key, diskCacheService, sourceService, isCacheable, listener, factory);
+      job = new EngineJob<>(diskCacheService, sourceService, listener, pool, factory)
+          .init(key, isCacheable);
       for (int i = 0; i < numCbs; i++) {
         cbs.add(mock(ResourceCallback.class));
       }
@@ -473,15 +476,17 @@ public MultiCbHarness() {
     Resource<Object> resource = mock(Resource.class);
     EngineResource<Object> engineResource = mock(EngineResource.class);
     EngineJobListener listener = mock(EngineJobListener.class);
-    ExecutorService diskCacheService = mock(ExecutorService.class);
-    ExecutorService sourceService = mock(ExecutorService.class);
+    GlideExecutor diskCacheService = mock(GlideExecutor.class);
+    GlideExecutor sourceService = mock(GlideExecutor.class);
     boolean isCacheable = true;
     DecodeJob<Object> decodeJob = mock(DecodeJob.class);
+    Pools.Pool<EngineJob<?>> pool = new Pools.SimplePool<>(1);
+    DataSource dataSource = DataSource.DATA_DISK_CACHE;
 
-    public EngineJob getJob() {
+    public EngineJob<Object> getJob() {
       when(factory.build(eq(resource), eq(isCacheable))).thenReturn(engineResource);
-      EngineJob result =
-          new EngineJob(key, diskCacheService, sourceService, isCacheable, listener, factory);
+      EngineJob result = new EngineJob(diskCacheService, sourceService, listener, pool, factory)
+          .init(key, isCacheable);
       result.addCallback(cb);
       return result;
     }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
index a59f482ce..e2c13d0e7 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
@@ -31,7 +31,7 @@
  * workflow part. Also checking whether the equals method is symmetric.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class EngineKeyTest {
   private Harness harness;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
index 8615d474c..1f328c03d 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineResourceTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
@@ -18,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class EngineResourceTest {
   private EngineResource<Object> engineResource;
   private EngineResource.ResourceListener listener;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
similarity index 85%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 820ec30cb..8cbe62361 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine;
 
+import static com.bumptech.glide.tests.Util.anyResource;
+import static com.bumptech.glide.tests.Util.isADataSource;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -16,11 +18,15 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import com.bumptech.glide.GlideContext;
 import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
+import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.tests.BackgroundUtil;
 import com.bumptech.glide.tests.GlideShadowLooper;
@@ -36,10 +42,9 @@
 import java.lang.ref.WeakReference;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.ExecutorService;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { GlideShadowLooper.class })
+@Config(manifest = Config.NONE, sdk = 18, shadows = { GlideShadowLooper.class })
 public class EngineTest {
   private EngineTestHarness harness;
 
@@ -117,7 +122,7 @@ public void testResourceIsReturnedFromActiveResourcesIfPresent() {
 
     harness.doLoad();
 
-    verify(harness.cb).onResourceReady(eq(harness.resource));
+    verify(harness.cb).onResourceReady(eq(harness.resource), eq(DataSource.MEMORY_CACHE));
   }
 
   @Test
@@ -126,7 +131,7 @@ public void testResourceIsNotReturnedFromActiveResourcesIfRefIsCleared() {
 
     harness.doLoad();
 
-    verify(harness.cb, never()).onResourceReady(isNull(Resource.class));
+    verify(harness.cb, never()).onResourceReady(isNull(Resource.class), isADataSource());
   }
 
   @Test
@@ -174,8 +179,8 @@ public void testActiveResourcesIsNotCheckedIfReturnedFromCache() {
 
     harness.doLoad();
 
-    verify(harness.cb).onResourceReady(eq(harness.resource));
-    verify(harness.cb, never()).onResourceReady(eq(other));
+    verify(harness.cb).onResourceReady(eq(harness.resource), eq(DataSource.MEMORY_CACHE));
+    verify(harness.cb, never()).onResourceReady(eq(other), isADataSource());
   }
 
   @Test
@@ -183,7 +188,7 @@ public void testActiveResourcesIsNotCheckedIfNotMemoryCacheable() {
     harness.activeResources
         .put(harness.cacheKey, new WeakReference<EngineResource<?>>(harness.resource));
 
-    when(harness.requestContext.isMemoryCacheable()).thenReturn(false);
+    harness.isMemoryCacheable = false;
     harness.doLoad();
 
     verify(harness.resource, never()).acquire();
@@ -196,14 +201,14 @@ public void testCacheIsCheckedIfMemoryCacheable() {
 
     harness.doLoad();
 
-    verify(harness.cb).onResourceReady(eq(harness.resource));
+    verify(harness.cb).onResourceReady(eq(harness.resource), eq(DataSource.MEMORY_CACHE));
   }
 
   @Test
   public void testCacheIsNotCheckedIfNotMemoryCacheable() {
     when(harness.cache.remove(eq(harness.cacheKey))).thenReturn(harness.resource);
 
-    when(harness.requestContext.isMemoryCacheable()).thenReturn(false);
+    harness.isMemoryCacheable = false;
     harness.doLoad();
 
     verify(harness.job).start(any(DecodeJob.class));
@@ -215,7 +220,7 @@ public void testResourceIsReturnedFromCacheIfPresent() {
 
     harness.doLoad();
 
-    verify(harness.cb).onResourceReady(eq(harness.resource));
+    verify(harness.cb).onResourceReady(eq(harness.resource), eq(DataSource.MEMORY_CACHE));
   }
 
   @Test
@@ -232,11 +237,11 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         assertEquals(expected, resource.get());
         return null;
       }
-    }).when(harness.cb).onResourceReady(any(Resource.class));
+    }).when(harness.cb).onResourceReady(anyResource(), isADataSource());
 
     harness.doLoad();
 
-    verify(harness.cb).onResourceReady(any(Resource.class));
+    verify(harness.cb).onResourceReady(anyResource(), isADataSource());
   }
 
   @Test
@@ -305,7 +310,7 @@ public void testResourceIsAddedToActiveResourcesOnEngineComplete() {
     harness.engine.onEngineJobComplete(harness.cacheKey, harness.resource);
 
     WeakReference<EngineResource<?>> resourceRef = harness.activeResources.get(harness.cacheKey);
-    assertEquals(harness.resource, resourceRef.get());
+    assertThat(harness.resource).isEqualTo(resourceRef.get());
   }
 
   @Test
@@ -407,16 +412,15 @@ public void testKeyFactoryIsGivenNecessaryArguments() {
     harness.doLoad();
 
     verify(harness.keyFactory)
-        .buildKey(eq(harness.requestContext), eq(harness.width), eq(harness.height));
+        .buildKey(eq(harness.model), eq(harness.signature), eq(harness.width), eq(harness.height),
+            eq(harness.transformations), eq(Object.class), eq(Object.class), eq(harness.options));
   }
 
   @Test
   public void testFactoryIsGivenNecessaryArguments() {
-    boolean isMemoryCacheable = true;
-    when(harness.requestContext.isMemoryCacheable()).thenReturn(isMemoryCacheable);
     harness.doLoad();
 
-    verify(harness.engineJobFactory).build(eq(harness.cacheKey), eq(isMemoryCacheable));
+    verify(harness.engineJobFactory).build(eq(harness.cacheKey), eq(true) /*isMemoryCacheable*/);
   }
 
   @Test
@@ -445,38 +449,54 @@ public void runTest() throws Exception {
   private static class EngineTestHarness {
     EngineKey cacheKey = mock(EngineKey.class);
     EngineKeyFactory keyFactory = mock(EngineKeyFactory.class);
-    Priority priority = Priority.NORMAL;
     ResourceCallback cb = mock(ResourceCallback.class);
     EngineResource resource = mock(EngineResource.class);
     Map<Key, EngineJob> jobs = new HashMap<>();
-    Transformation transformation = mock(Transformation.class);
     Map<Key, WeakReference<EngineResource<?>>> activeResources = new HashMap<>();
-    Key signature = mock(Key.class);
-    RequestContext<Object, Object> requestContext = mock(RequestContext.class);
 
     int width = 100;
     int height = 100;
 
+    Object model = new Object();
     MemoryCache cache = mock(MemoryCache.class);
     EngineJob job;
     Engine engine;
     Engine.EngineJobFactory engineJobFactory = mock(Engine.EngineJobFactory.class);
+    Engine.DecodeJobFactory decodeJobFactory = mock(Engine.DecodeJobFactory.class);
     ResourceRecycler resourceRecycler = mock(ResourceRecycler.class);
+    Key signature = mock(Key.class);
+    Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
+    Options options = new Options();
+    GlideContext glideContext = mock(GlideContext.class);
+    boolean isMemoryCacheable = true;
 
     public EngineTestHarness() {
-      when(keyFactory.buildKey(eq(requestContext), anyInt(), anyInt())).thenReturn(cacheKey);
-      when(requestContext.isMemoryCacheable()).thenReturn(true);
+      when(keyFactory.buildKey(eq(model), eq(signature), anyInt(), anyInt(), eq(transformations),
+          eq(Object.class), eq(Object.class), eq(options))).thenReturn(cacheKey);
 
       job = mock(EngineJob.class);
 
-      engine = new Engine(cache, mock(DiskCache.Factory.class), mock(ExecutorService.class),
-          mock(ExecutorService.class), jobs, keyFactory, activeResources, engineJobFactory,
-          resourceRecycler);
+      engine = new Engine(cache, mock(DiskCache.Factory.class), mock(GlideExecutor.class),
+          mock(GlideExecutor.class), jobs, keyFactory, activeResources, engineJobFactory,
+          decodeJobFactory, resourceRecycler);
     }
 
     public Engine.LoadStatus doLoad() {
       when(engineJobFactory.build(eq(cacheKey), anyBoolean())).thenReturn(job);
-      return engine.load(requestContext, width, height, cb);
+      return engine.load(glideContext,
+          model,
+          signature,
+          width,
+          height,
+          Object.class,
+          Object.class,
+          Priority.HIGH,
+          DiskCacheStrategy.ALL,
+          transformations,
+          false /*isTransformationRequired*/,
+          options,
+          isMemoryCacheable,
+          cb);
     }
   }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
index 12ec0d4f8..fe8c252b1 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
@@ -134,4 +134,4 @@ ResourceCacheKey build() {
           resourceClass, options);
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
index af53fa9be..9d4257b6d 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ResourceRecyclerTest {
 
   private ResourceRecycler recycler;
@@ -58,4 +58,4 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
     verify(child).recycle();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
index 05494d926..e81521160 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyKeyTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class AttributeStrategyKeyTest {
 
   private AttributeStrategy.KeyPool keyPool;
@@ -71,4 +71,4 @@ public void testInitSetsAttributes() {
 
     assertEquals(key, other);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
index 10576c5ce..9fc1f1eb2 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/AttributeStrategyTest.java
@@ -13,7 +13,7 @@
 import org.robolectric.shadows.ShadowBitmap;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class AttributeStrategyTest {
 
   private AttributeStrategy strategy;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
index 84b360c63..ab9604ddc 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/GroupedLinkedMapTest.java
@@ -11,7 +11,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GroupedLinkedMapTest {
 
     private GroupedLinkedMap<Key, Object> map;
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
new file mode 100644
index 000000000..f48d297dd
--- /dev/null
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
@@ -0,0 +1,111 @@
+package com.bumptech.glide.load.engine.bitmap_recycle;
+
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.Arrays;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.DEFAULT, sdk = 18)
+public class LruArrayPoolTest {
+  private static final int MAX_SIZE = 10;
+  private static final Class ARRAY_CLASS = byte[].class;
+  private static final ArrayAdapterInterface ADAPTER = new ByteArrayAdapter();
+  private LruArrayPool pool;
+
+  @Before
+  public void setUp() throws Exception {
+    pool = new LruArrayPool(MAX_SIZE);
+  }
+
+  @Test
+  public void testNewPoolIsEmpty() {
+    assertEquals(pool.getCurrentSize(), 0);
+  }
+
+  @Test
+  public void testICanAddAndGetValidArray() {
+    int size = 758;
+    int value = 564;
+    fillPool(pool, size - 1, value);
+    pool.put(createArray(ARRAY_CLASS, size, value), ARRAY_CLASS);
+    Object array = pool.get(size, ARRAY_CLASS);
+    assertNotNull(array);
+    assertTrue(ADAPTER.getArrayLength(array) >= size);
+    assertTrue(array.getClass() == ARRAY_CLASS);
+    assertTrue(((byte[]) array)[0] == (byte) 0);
+  }
+
+  @Test
+  public void testItIsSizeLimited() {
+    fillPool(pool, MAX_SIZE / ADAPTER.getElementSizeInBytes() + 1, 1);
+    assertTrue(pool.getCurrentSize() <= MAX_SIZE);
+  }
+
+  @Test
+  public void testArrayLargerThanPoolIsNotAdded() {
+    pool = new LruArrayPool(MAX_SIZE);
+    pool.put(createArray(ARRAY_CLASS, MAX_SIZE / ADAPTER.getElementSizeInBytes() + 1, 0),
+        ARRAY_CLASS);
+    assertEquals(0, pool.getCurrentSize());
+  }
+
+  @Test
+  public void testClearMemoryRemovesAllArrays() {
+    fillPool(pool, MAX_SIZE / ADAPTER.getElementSizeInBytes() + 1, 0);
+    pool.clearMemory();
+    assertEquals(0, pool.getCurrentSize());
+  }
+
+  @Test
+  public void testTrimMemoryUiHiddenOrLessRemovesHalfOfArrays() {
+    testTrimMemory(MAX_SIZE, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
+  }
+
+  @Test
+  public void testTrimMemoryUiHiddenOrLessRemovesNoArraysIfPoolLessThanHalfFull() {
+    testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
+  }
+
+  @Test
+  public void testTrimMemoryBackgroundOrGreaterRemovesAllArrays() {
+    for (int trimLevel : new int[] {TRIM_MEMORY_BACKGROUND, TRIM_MEMORY_COMPLETE}) {
+      testTrimMemory(MAX_SIZE, trimLevel, 0);
+    }
+  }
+
+  private void testTrimMemory(int fillSize, int trimLevel, int expectedSize) {
+    pool = new LruArrayPool(MAX_SIZE);
+    fillPool(pool, fillSize / ADAPTER.getElementSizeInBytes(), 1);
+    pool.trimMemory(trimLevel);
+    assertEquals("Failed level=" + trimLevel, expectedSize, pool.getCurrentSize());
+  }
+
+  private void fillPool(LruArrayPool pool, int arrayCount, int arrayLength) {
+    for (int i = 0; i < arrayCount; i++) {
+      pool.put(createArray(ARRAY_CLASS, arrayLength, 10), ARRAY_CLASS);
+    }
+  }
+
+  private Object createArray(Class type, int size, int value) {
+    Object array = null;
+    if (type.equals(int[].class)) {
+      array = new int[size];
+      Arrays.fill((int[]) array, value);
+    } else if (type.equals(byte[].class)) {
+      array = new byte[size];
+      Arrays.fill((byte[]) array, (byte) value);
+    }
+    return array;
+  }
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
similarity index 92%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
index 5dce09d8c..14b51fedc 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
@@ -1,9 +1,9 @@
 package com.bumptech.glide.load.engine.bitmap_recycle;
 
-import static com.google.common.truth.Truth.assertThat;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
-import static android.content.ComponentCallbacks2.TRIM_MEMORY_MODERATE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
@@ -29,7 +29,7 @@
 import java.util.Set;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class LruBitmapPoolTest {
   private static final int MAX_SIZE = 10;
   private static final Set<Bitmap.Config> ALLOWED_CONFIGS =
@@ -102,18 +102,18 @@ public void testEvictedBitmapsAreRecycled() {
   }
 
   @Test
-  public void testTrimMemoryBackgroundOrLessRemovesHalfOfBitmaps() {
-    testTrimMemory(MAX_SIZE, TRIM_MEMORY_BACKGROUND, MAX_SIZE / 2);
+  public void testTrimMemoryUiHiddenOrLessRemovesHalfOfBitmaps() {
+    testTrimMemory(MAX_SIZE, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
   }
 
   @Test
-  public void testTrimMemoryBackgroundOrLessRemovesNoBitmapsIfPoolLessThanHalfFull() {
-    testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_BACKGROUND, 0);
+  public void testTrimMemoryUiHiddenOrLessRemovesNoBitmapsIfPoolLessThanHalfFull() {
+    testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_UI_HIDDEN, 0);
   }
 
   @Test
-  public void testTrimMemoryModerateOrGreaterRemovesAllBitmaps() {
-    for (int trimLevel : new int[] { TRIM_MEMORY_MODERATE, TRIM_MEMORY_COMPLETE }) {
+  public void testTrimMemoryBackgroundOrGreaterRemovesAllBitmaps() {
+    for (int trimLevel : new int[] { TRIM_MEMORY_BACKGROUND, TRIM_MEMORY_COMPLETE }) {
       testTrimMemory(MAX_SIZE, trimLevel, MAX_SIZE);
     }
   }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeConfigStrategyTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
index 129f4ecd9..79385ce31 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategyKeyTest.java
@@ -59,4 +59,4 @@ public void testInitSetsSize() {
 
     assertEquals(key, other);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
index d88e50d74..a1ecd5953 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
@@ -19,7 +19,7 @@
 import java.security.MessageDigest;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class DiskLruCacheWrapperTest {
   private DiskLruCacheWrapper cache;
   private byte[] data;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/cache/LruCacheTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
index 61918f223..4944d2564 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
@@ -39,30 +39,30 @@ public TrimClearMemoryCacheHarness() {
   }
 
   @Test
-  public void testTrimMemoryModerate() {
+  public void testTrimMemoryBackground() {
     TrimClearMemoryCacheHarness harness = new TrimClearMemoryCacheHarness();
 
-    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_MODERATE);
+    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
 
     verify(harness.listener).onResourceRemoved(eq(harness.first));
     verify(harness.listener).onResourceRemoved(eq(harness.second));
   }
 
   @Test
-  public void testTrimMemoryComplete() {
+  public void testTrimMemoryModerate() {
     TrimClearMemoryCacheHarness harness = new TrimClearMemoryCacheHarness();
 
-    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);
+    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_MODERATE);
 
     verify(harness.listener).onResourceRemoved(harness.first);
     verify(harness.listener).onResourceRemoved(harness.second);
   }
 
   @Test
-  public void testTrimMemoryBackground() {
+  public void testTrimMemoryUiHidden() {
     TrimClearMemoryCacheHarness harness = new TrimClearMemoryCacheHarness();
 
-    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
+    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
 
     verify(harness.listener).onResourceRemoved(harness.first);
     verify(harness.listener, never()).onResourceRemoved(harness.second);
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
similarity index 86%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
index bfc3438b4..d22bf9fa9 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
@@ -20,9 +20,10 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowActivityManager;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class MemorySizeCalculatorTest {
   private MemorySizeHarness harness;
   private int initialSdkVersion;
@@ -124,6 +125,8 @@ public void testCumulativePoolAndMemoryCacheSizesAreSmallerOnLowMemoryDevices()
 
     Util.setSdkVersionInt(10);
 
+    // Keep the bitmap pool size constant, even though normally it would change.
+    harness.byteArrayPoolSizeBytes *= 2;
     final int smallMemoryCacheSize = harness.getCalculator().getMemoryCacheSize();
     final int smallBitmapPoolSize = harness.getCalculator().getBitmapPoolSize();
 
@@ -131,12 +134,24 @@ public void testCumulativePoolAndMemoryCacheSizesAreSmallerOnLowMemoryDevices()
     assertThat(smallBitmapPoolSize).isLessThan(normalBitmapPoolSize);
   }
 
+  @Test
+  public void testByteArrayPoolSize_withLowRamDevice_isHalfTheSpecifiedBytes() {
+    ShadowActivityManager activityManager = Shadows.shadowOf(harness.activityManager);
+    activityManager.setMemoryClass(getLargeEnoughMemoryClass());
+
+    Util.setSdkVersionInt(10);
+
+    int byteArrayPoolSize = harness.getCalculator().getArrayPoolSizeInBytes();
+    assertThat(byteArrayPoolSize).isEqualTo(harness.byteArrayPoolSizeBytes / 2);
+  }
+
   private int getLargeEnoughMemoryClass() {
     float totalScreenBytes =
         harness.getScreenSize() * (harness.bitmapPoolScreens + harness.memoryCacheScreens);
+    float totalBytes = totalScreenBytes + harness.byteArrayPoolSizeBytes;
     // Memory class is in mb, not bytes!
-    float totalScreenMb = totalScreenBytes / (1024 * 1024);
-    float memoryClassMb = totalScreenMb / harness.sizeMultiplier;
+    float totalMb = totalBytes / (1024 * 1024);
+    float memoryClassMb = totalMb / harness.sizeMultiplier;
     return (int) Math.ceil(memoryClassMb);
   }
 
@@ -146,6 +161,7 @@ private int getLargeEnoughMemoryClass() {
     float memoryCacheScreens = MemorySizeCalculator.Builder.MEMORY_CACHE_TARGET_SCREENS;
     float bitmapPoolScreens = MemorySizeCalculator.Builder.BITMAP_POOL_TARGET_SCREENS;
     float sizeMultiplier = MemorySizeCalculator.Builder.MAX_SIZE_MULTIPLIER;
+    int byteArrayPoolSizeBytes = MemorySizeCalculator.Builder.ARRAY_POOL_SIZE_BYTES;
     ActivityManager activityManager =
         (ActivityManager) RuntimeEnvironment.application.getSystemService(Context.ACTIVITY_SERVICE);
     MemorySizeCalculator.ScreenDimensions screenDimensions =
@@ -160,6 +176,7 @@ public MemorySizeCalculator getCalculator() {
           .setMaxSizeMultiplier(sizeMultiplier)
           .setActivityManager(activityManager)
           .setScreenDimensions(screenDimensions)
+          .setArrayPoolSize(byteArrayPoolSizeBytes)
           .build();
     }
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
index 81be0bf20..738bcd951 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
@@ -15,7 +15,7 @@
 import java.util.regex.Pattern;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class SafeKeyGeneratorTest {
   private SafeKeyGenerator keyGenerator;
   private int nextId;
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java b/library/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
new file mode 100644
index 000000000..1a6f5d9cd
--- /dev/null
+++ b/library/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
@@ -0,0 +1,64 @@
+package com.bumptech.glide.load.engine.executor;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, sdk = 18)
+public class GlideExecutorTest {
+
+  @Test
+  public void testLoadsAreExecutedInOrder() throws InterruptedException {
+    final List<Integer> resultPriorities = Collections.synchronizedList(new ArrayList<Integer>());
+    GlideExecutor executor = new GlideExecutor(1);
+    for (int i = 5; i > 0; i--) {
+      executor.execute(new MockRunnable(i, new MockRunnable.OnRun() {
+        @Override
+        public void onRun(int priority) {
+          resultPriorities.add(priority);
+        }
+      }));
+    }
+
+    executor.shutdown();
+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);
+
+    // Since no jobs are queued, the first item added will be run immediately, regardless of
+    // priority.
+    assertThat(resultPriorities).containsExactly(5, 1, 2, 3, 4).inOrder();
+  }
+
+  private static class MockRunnable implements Runnable,
+      Comparable<MockRunnable> {
+    private final int priority;
+    private final OnRun onRun;
+
+    @Override
+    public int compareTo(MockRunnable another) {
+      return priority - another.priority;
+    }
+
+    public interface OnRun {
+      void onRun(int priority);
+    }
+
+    public MockRunnable(int priority, OnRun onRun) {
+      this.priority = priority;
+      this.onRun = onRun;
+    }
+
+    @Override
+    public void run() {
+      onRun.onRun(priority);
+    }
+  }
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
similarity index 92%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
index 0db017e89..a5f045618 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
@@ -7,8 +7,8 @@
 import static org.mockito.Matchers.anyLong;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.atLeastOnce;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -21,12 +21,15 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.resource.bitmap.BitmapResource;
+import com.bumptech.glide.tests.Util.CreateBitmap;
 import com.bumptech.glide.util.Util;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
@@ -38,24 +41,23 @@
 import java.util.Map;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapPreFillRunnerTest {
-  private BitmapPreFillRunner.Clock clock;
-  private BitmapPool pool;
-  private MemoryCache cache;
+  @Mock BitmapPreFillRunner.Clock clock;
+  @Mock BitmapPool pool;
+  @Mock MemoryCache cache;
+  @Mock Handler mainHandler;
   private List<Bitmap> addedBitmaps = new ArrayList<>();
-  private Handler mainHandler;
 
   @Before
   public void setUp() {
-    clock = mock(BitmapPreFillRunner.Clock.class);
+    MockitoAnnotations.initMocks(this);
 
-    pool = mock(BitmapPool.class);
-    when(pool.put(any(Bitmap.class))).thenAnswer(new AddBitmapPoolAnswer(addedBitmaps));
-    cache = mock(MemoryCache.class);
+    doAnswer(new AddBitmapPoolAnswer(addedBitmaps)).when(pool).put(any(Bitmap.class));
+    when(pool.getDirty(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenAnswer(new CreateBitmap());
     when(cache.put(any(Key.class), any(Resource.class)))
         .thenAnswer(new AddBitmapCacheAnswer(addedBitmaps));
-    mainHandler = mock(Handler.class);
   }
 
   private BitmapPreFillRunner getHandler(Map<PreFillType, Integer> allocationOrder) {
@@ -268,13 +270,14 @@ public void testDoesAGetFromPoolBeforeAddingForEachSize() {
     getHandler(allocationOrder).run();
 
     InOrder firstOrder = inOrder(pool);
-    firstOrder.verify(pool).get(eq(first.getWidth()), eq(first.getHeight()), eq(first.getConfig()));
+    firstOrder.verify(pool).getDirty(eq(first.getWidth()), eq(first.getHeight()),
+        eq(first.getConfig()));
     // TODO(b/20335397): This code was relying on Bitmap equality which Robolectric removed
     // firstOrder.verify(pool).put(eq(first));
 
     InOrder secondOrder = inOrder(pool);
     secondOrder.verify(pool)
-        .get(eq(second.getWidth()), eq(second.getHeight()), eq(second.getConfig()));
+        .getDirty(eq(second.getWidth()), eq(second.getHeight()), eq(second.getConfig()));
     // TODO(b/20335397): This code was relying on Bitmap equality which Robolectric removed
     // secondOrder.verify(pool).put(eq(second));
   }
@@ -293,12 +296,13 @@ public void testDoesNotGetMoreThanOncePerSize() {
     getHandler(allocationOrder).run();
 
     InOrder order = inOrder(pool);
-    order.verify(pool).get(eq(bitmap.getWidth()), eq(bitmap.getHeight()), eq(bitmap.getConfig()));
+    order.verify(pool).getDirty(eq(bitmap.getWidth()), eq(bitmap.getHeight()),
+        eq(bitmap.getConfig()));
     // TODO(b/20335397): This code was relying on Bitmap equality which Robolectric removed
     // order.verify(pool, times(numBitmaps)).put(eq(bitmap));
   }
 
-  private static class AddBitmapPoolAnswer implements Answer<Boolean> {
+  private static class AddBitmapPoolAnswer implements Answer<Void> {
     private List<Bitmap> bitmaps;
 
     public AddBitmapPoolAnswer(List<Bitmap> bitmaps) {
@@ -306,7 +310,7 @@ public AddBitmapPoolAnswer(List<Bitmap> bitmaps) {
     }
 
     @Override
-    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
+    public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
       Bitmap bitmap = (Bitmap) invocationOnMock.getArguments()[0];
       bitmaps.add(bitmap);
       return null;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
similarity index 95%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 08f4c0ea4..a308dae93 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -17,12 +18,15 @@
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
+import com.bumptech.glide.tests.Util.CreateBitmap;
 import com.bumptech.glide.util.Util;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
@@ -30,7 +34,7 @@
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapPreFillerTest {
   private static final int DEFAULT_BITMAP_WIDTH = 100;
   private static final int DEFAULT_BITMAP_HEIGHT = 50;
@@ -45,15 +49,16 @@
   private final int poolSize = BITMAPS_IN_CACHE * defaultBitmapSize;
   private final int cacheSize = BITMAPS_IN_POOL * defaultBitmapSize;
 
-  private BitmapPool pool;
+  @Mock BitmapPool pool;
+  @Mock MemoryCache cache;
   private BitmapPreFiller bitmapPreFiller;
-  private MemoryCache cache;
 
   @Before
   public void setUp() {
-    pool = mock(BitmapPool.class);
+    MockitoAnnotations.initMocks(this);
     when(pool.getMaxSize()).thenReturn(poolSize);
-    cache = mock(MemoryCache.class);
+    when(pool.getDirty(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenAnswer(new CreateBitmap());
     when(cache.getMaxSize()).thenReturn(cacheSize);
 
     bitmapPreFiller = new BitmapPreFiller(cache, pool, DecodeFormat.DEFAULT);
@@ -265,7 +270,8 @@ public void testSetsConfigOnBuildersToDefaultIfNotSet() {
     bitmapPreFiller.preFill(builder);
 
     InOrder order = inOrder(builder);
-    order.verify(builder).setConfig(Bitmap.Config.RGB_565);
+    order.verify(builder).setConfig(DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888
+        ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
     order.verify(builder).build();
   }
 
@@ -280,4 +286,4 @@ public void testDoesNotSetConfigOnBuildersIfConfigIsAlreadySet() {
 
     verify(builder, never()).setConfig(any(Bitmap.Config.class));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
rename to library/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
index 93711ff51..26f2469a3 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class PreFillTypeTest {
 
   @Test(expected = IllegalArgumentException.class)
@@ -73,4 +73,4 @@ public void testEquality() {
         .addEqualityGroup(new PreFillType(100, 100, Bitmap.Config.ARGB_8888, 1))
         .addEqualityGroup(new PreFillType(100, 100, Bitmap.Config.ARGB_4444, 2)).testEquals();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
index a232f0821..4df23384d 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/AssetUriLoaderTest.java
@@ -22,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class AssetUriLoaderTest {
   private static final int IMAGE_SIDE = 10;
 
@@ -44,4 +44,4 @@ public void testHandlesAssetUris() {
     assertEquals(fetcher, loader.buildLoadData(assetUri, IMAGE_SIDE, IMAGE_SIDE,
         new Options()).fetcher);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/ByteArrayLoaderTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java b/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
index 8c6677c35..7593eaccb 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/GlideUrlTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
@@ -14,7 +14,7 @@
 import java.net.URL;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GlideUrlTest {
 
   @Test(expected = NullPointerException.class)
@@ -115,4 +115,4 @@ public void testEquals() throws MalformedURLException {
             new GlideUrl(new URL(url), otherHeaders)
         ).testEquals();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java b/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
new file mode 100644
index 000000000..8e0269c4e
--- /dev/null
+++ b/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
@@ -0,0 +1,292 @@
+package com.bumptech.glide.load.model;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import com.google.common.testing.EqualsTester;
+
+import com.bumptech.glide.load.model.LazyHeaders.Builder;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.Map;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE, sdk = 18)
+public class LazyHeadersTest {
+
+  @Test
+  public void testIncludesEagerHeaders() {
+    Map<String, String> headers = new Builder()
+        .addHeader("key", "value")
+        .build()
+        .getHeaders();
+    assertThat(headers).containsEntry("key", "value");
+  }
+
+  @Test
+  public void testIncludesLazyHeaders() {
+    LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
+    when(factory.buildHeader()).thenReturn("value");
+    Map<String, String> headers = new Builder()
+        .addHeader("key", factory)
+        .build()
+        .getHeaders();
+
+    assertThat(headers).containsEntry("key", "value");
+  }
+
+  @Test
+  public void testMultipleEagerValuesAreSeparatedByCommas() {
+    Map<String, String> headers = new Builder()
+        .addHeader("key", "first")
+        .addHeader("key", "second")
+        .build()
+        .getHeaders();
+
+    assertThat(headers).containsEntry("key", "first,second");
+  }
+
+  @Test
+  public void testMultipleLazyValuesAreSeparatedByCommas() {
+    LazyHeaderFactory first = mock(LazyHeaderFactory.class);
+    when(first.buildHeader()).thenReturn("first");
+    LazyHeaderFactory second = mock(LazyHeaderFactory.class);
+    when(second.buildHeader()).thenReturn("second");
+
+    Map<String, String> headers = new Builder()
+        .addHeader("key", first)
+        .addHeader("key", second)
+        .build()
+        .getHeaders();
+    assertThat(headers).containsEntry("key", "first,second");
+  }
+
+  @Test
+  public void testMixedEagerAndLazyValuesAreIncluded() {
+    LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
+    when(factory.buildHeader()).thenReturn("first");
+    Map<String, String> headers = new Builder()
+        .addHeader("key", factory)
+        .addHeader("key", "second")
+        .build()
+        .getHeaders();
+
+    assertThat(headers).containsEntry("key", "first,second");
+
+    headers = new Builder()
+        .addHeader("key", "second")
+        .addHeader("key", factory)
+        .build()
+        .getHeaders();
+
+    assertThat(headers).containsEntry("key", "second,first");
+  }
+
+  @Test
+  public void testCanAddMultipleKeys() {
+    LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
+    when(factory.buildHeader()).thenReturn("lazy");
+    Map<String, String> headers = new Builder()
+        .addHeader("first", factory)
+        .addHeader("second", "eager")
+        .build()
+        .getHeaders();
+
+    assertThat(headers).containsEntry("first", "lazy");
+    assertThat(headers).containsEntry("second", "eager");
+  }
+
+  @Test
+  public void testUpdatingBuilderAfterBuildingDoesNotModifyOriginalHeaders() {
+    Builder builder = new Builder();
+    builder.addHeader("key", "firstValue");
+    builder.addHeader("otherKey", "otherValue");
+    LazyHeaders first = builder.build();
+
+    LazyHeaderFactory factory = mock(LazyHeaderFactory.class);
+    when(factory.buildHeader()).thenReturn("otherValue");
+    builder.addHeader("key", "secondValue");
+    builder.setHeader("otherKey", factory);
+    LazyHeaders second = builder.build();
+
+    assertThat(first.getHeaders()).isNotEqualTo(second.getHeaders());
+
+    assertThat(first.getHeaders()).containsEntry("key", "firstValue");
+    assertThat(first.getHeaders()).containsEntry("otherKey", "otherValue");
+
+    assertThat(second.getHeaders()).containsEntry("key", "firstValue,secondValue");
+    assertThat(second.getHeaders()).containsEntry("otherKey", "otherValue");
+  }
+
+  @Test
+  public void testSetHeaderReplacesExistingHeaders() {
+    Builder builder = new Builder();
+    builder.addHeader("key", "first")
+        .addHeader("key", "second")
+        .setHeader("key", "third");
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("key", "third");
+  }
+
+  @Test
+  public void testSetHeaderWithNullStringRemovesExistingHeader() {
+    Builder builder = new Builder();
+    builder.addHeader("key", "first")
+        .addHeader("key", "second")
+        .setHeader("key", (String) null);
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).doesNotContainKey("key");
+  }
+
+  @Test
+  public void testSetHeaderWithNullLazyHeaderFactoryRemovesExistingHeader() {
+    Builder builder = new Builder();
+    builder.addHeader("key", "first")
+        .addHeader("key", "second")
+        .setHeader("key", (LazyHeaderFactory) null);
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).doesNotContainKey("key");
+  }
+
+  @Test
+  public void testAddingEncodingHeaderReplacesDefaultThenAppends() {
+    Builder builder = new Builder();
+    builder.addHeader("Accept-Encoding", "false");
+
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("Accept-Encoding", "false");
+
+    builder.addHeader("Accept-Encoding", "true");
+    headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("Accept-Encoding", "false,true");
+  }
+
+  @Test
+  public void testRemovingAndAddingEncodingHeaderReplacesDefaultThenAppends() {
+    Builder builder = new Builder();
+    builder.setHeader("Accept-Encoding", (String) null);
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).doesNotContainKey("Accept-Encoding");
+
+    builder.addHeader("Accept-Encoding", "false");
+    headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("Accept-Encoding", "false");
+
+    builder.addHeader("Accept-Encoding", "true");
+    headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("Accept-Encoding", "false,true");
+  }
+
+  @Test
+  public void testAddingUserAgentHeaderReplacesDefaultThenAppends() {
+    Builder builder = new Builder();
+    builder.addHeader("User-Agent", "false");
+
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("User-Agent", "false");
+
+    builder.addHeader("User-Agent", "true");
+    headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("User-Agent", "false,true");
+  }
+
+  @Test
+  public void testRemovingAndAddingUserAgentHeaderReplacesDefaultThenAppends() {
+    Builder builder = new Builder();
+    builder.setHeader("User-Agent", (String) null);
+    LazyHeaders headers = builder.build();
+    assertThat(headers.getHeaders()).doesNotContainKey("User-Agent");
+
+    builder.addHeader("User-Agent", "false");
+    headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("User-Agent", "false");
+
+    builder.addHeader("User-Agent", "true");
+    headers = builder.build();
+    assertThat(headers.getHeaders()).containsEntry("User-Agent", "false,true");
+  }
+
+  @Test
+  public void testEquals() {
+    LazyHeaderFactory firstLazyFactory = mock(LazyHeaderFactory.class);
+    LazyHeaderFactory secondLazyFactory = mock(LazyHeaderFactory.class);
+    new EqualsTester()
+        .addEqualityGroup(
+            new Builder().build(),
+            new Builder().build()
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("key", "value").build(),
+            new Builder().addHeader("key", "value").build()
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("key", "value").addHeader("key", "value").build()
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("key", firstLazyFactory).build(),
+            new Builder().addHeader("key", firstLazyFactory).build()
+        )
+        .addEqualityGroup(
+            new Builder()
+                .addHeader("key", firstLazyFactory)
+                .addHeader("key", firstLazyFactory)
+                .build()
+        )
+        .addEqualityGroup(
+            new Builder()
+                .addHeader("firstKey", "value")
+                .addHeader("secondKey", firstLazyFactory)
+                .build(),
+            new Builder()
+                .addHeader("secondKey", firstLazyFactory)
+                .addHeader("firstKey", "value")
+                .build()
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("key", "secondValue")
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("secondKey", "value")
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("key", secondLazyFactory)
+        )
+        .addEqualityGroup(
+            new Builder().addHeader("secondKey", firstLazyFactory)
+        )
+        .addEqualityGroup(
+            new Builder()
+                .addHeader("firstKey", "firstValue")
+                .addHeader("secondKey", "secondValue")
+                .build(),
+            new Builder()
+                .addHeader("firstKey", "firstValue")
+                .addHeader("secondKey", "secondValue")
+                .build(),
+            new Builder()
+                .addHeader("secondKey", "secondValue")
+                .addHeader("firstKey", "firstValue")
+                .build()
+        )
+        .addEqualityGroup(
+            new Builder()
+                .addHeader("firstKey", firstLazyFactory)
+                .addHeader("secondKey", secondLazyFactory)
+                .build(),
+            new Builder()
+                .addHeader("firstKey", firstLazyFactory)
+                .addHeader("secondKey", secondLazyFactory)
+                .build(),
+            new Builder()
+                .addHeader("secondKey", secondLazyFactory)
+                .addHeader("firstKey", firstLazyFactory)
+                .build()
+        )
+        .testEquals();
+  }
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/ModelCacheTest.java b/library/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/ModelCacheTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java
index b4e09b25c..0d323dfbb 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/ModelCacheTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/ModelCacheTest.java
@@ -52,4 +52,4 @@ public void testCanSetAndGetMultipleResultsWithDifferentDimensionsForSameObject(
     assertEquals(firstResult, cache.get(model, firstWidth, firstHeight));
     assertEquals(secondResult, cache.get(model, secondWidth, secondHeight));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java b/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
index 3e4eb8029..3664fcce2 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
@@ -8,8 +8,10 @@
 import static org.mockito.Mockito.when;
 
 import android.content.Context;
+import android.support.v4.util.Pools.Pool;
 
 import com.bumptech.glide.Registry.NoModelLoaderAvailableException;
+import com.bumptech.glide.util.pool.FactoryPools;
 
 import org.junit.Before;
 import org.junit.Rule;
@@ -27,7 +29,7 @@
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class MultiModelLoaderFactoryTest {
 
   @Mock ModelLoaderFactory<String, String> firstFactory;
@@ -38,14 +40,16 @@
 
   @Rule public ExpectedException exception = ExpectedException.none();
 
+  private Pool<List<Exception>> exceptionListPool;
   private MultiModelLoaderFactory multiFactory;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
+    exceptionListPool = FactoryPools.threadSafeList();
 
-    multiFactory =
-        new MultiModelLoaderFactory(RuntimeEnvironment.application, multiModelLoaderFactory);
+    multiFactory = new MultiModelLoaderFactory(RuntimeEnvironment.application, exceptionListPool,
+            multiModelLoaderFactory);
     when(firstFactory.build(anyContext(), eq(multiFactory))).thenReturn(firstModelLoader);
     when(secondFactory.build(anyContext(), eq(multiFactory))).thenReturn(secondModelLoader);
   }
@@ -272,7 +276,7 @@ public void testBuild_respectsPrependOrder() {
       Class<Y> dataClass) {
     ArgumentCaptor<List> captor = ArgumentCaptor.forClass(List.class);
     multiFactory.build(modelClass, dataClass);
-    verify(multiModelLoaderFactory).build(captor.capture());
+    verify(multiModelLoaderFactory).build(captor.capture(), eq(exceptionListPool));
 
     List<ModelLoader> captured = captor.getValue();
     List<ModelLoader<X, Y>> result = new ArrayList<>(captured.size());
@@ -307,4 +311,5 @@ public void testBuild_respectsPrependOrder() {
   private static Context anyContext() {
     return any(Context.class);
   }
-}
\ No newline at end of file
+}
+
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/ResourceLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
index b9b4403ae..492e029dc 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/ResourceLoaderTest.java
@@ -29,7 +29,7 @@
  * Tests for the {@link com.bumptech.glide.load.model.ResourceLoader} class.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ResourceLoaderTest {
 
   @Mock ModelLoader<Uri, Object> uriLoader;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/StreamEncoderTest.java b/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/StreamEncoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
index 6ff12c436..184012b38 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/StreamEncoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
@@ -19,7 +19,7 @@
 import java.io.IOException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class StreamEncoderTest {
   private StreamEncoder encoder;
   private File file;
@@ -45,4 +45,4 @@ public void testWritesDataFromInputStreamToOutputStream() throws IOException {
 
     assertEquals(fakeData, new String(data));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/StringLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/StringLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
index 740965b14..d8cd64909 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/StringLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
@@ -31,7 +31,7 @@
  * Tests for the {@link com.bumptech.glide.load.model.StringLoader} class.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class StringLoaderTest {
   // Not a magic number, just an arbitrary non zero value.
   private static final int IMAGE_SIDE = 100;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/UriLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/UriLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
index cbc85be44..47fcd5457 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/UriLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/UriLoaderTest.java
@@ -28,7 +28,7 @@
  * Tests for the {@link UriLoader} class.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class UriLoaderTest {
   // Not a magic number, just arbitrary non zero.
   private static final int IMAGE_SIDE = 120;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
index af9e9b760..16d54a573 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
@@ -29,7 +29,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BaseGlideUrlLoaderTest {
 
   @Mock ModelCache<Object, GlideUrl> modelCache;
@@ -147,4 +147,4 @@ public boolean handles(Object model) {
       return true;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
index e0f858cc3..369696786 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
@@ -22,7 +22,7 @@
 import java.net.MalformedURLException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class HttpUriLoaderTest {
   private static final int IMAGE_SIDE = 100;
   private static final Options OPTIONS = new Options();
@@ -71,4 +71,4 @@ public void testHandlesMostlyInvalidHttpUris() {
         .buildLoadData(eq(new GlideUrl(mostlyInvalidHttpUri.toString())), eq(IMAGE_SIDE),
             eq(IMAGE_SIDE), eq(OPTIONS));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/SimpleResourceTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/UnitTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
index 37f5ebed0..ce38270a9 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/UnitTransformationTest.java
@@ -36,4 +36,4 @@ public void testEquals() throws NoSuchAlgorithmException {
         .updateDiskCacheKey(any(MessageDigest.class));
     KeyAssertions.assertDifferent(UnitTransformation.get(), other);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
index cd1a8ca71..15d6e505b 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableResourceTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapDrawableResourceTest {
   private BitmapDrawableResourceHarness harness;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
index 9dd949749..78ba2efc9 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
@@ -34,7 +34,7 @@
 import java.security.NoSuchAlgorithmException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapDrawableTransformationTest {
 
   @Mock BitmapPool bitmapPool;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
index 50526302e..60e3e3db7 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
@@ -29,7 +29,7 @@
 import java.io.IOException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = {
+@Config(manifest = Config.NONE, sdk = 18, shadows = {
     BitmapEncoderTest.AlphaShadowBitmap.class })
 public class BitmapEncoderTest {
   private EncoderHarness harness;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
similarity index 78%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
index 1b8d9e9bf..b6d8a8b43 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapResourceTest.java
@@ -1,12 +1,9 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
 import android.os.Build;
@@ -23,7 +20,7 @@
 
 //TODO: add a test for bitmap size using getAllocationByteSize when robolectric supports kitkat.
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapResourceTest {
   private int currentBuildVersion;
   private BitmapResourceHarness harness;
@@ -58,24 +55,6 @@ public void testPutsBitmapInPoolOnRecycle() {
     verify(harness.bitmapPool).put(eq(harness.bitmap));
   }
 
-  @Test
-  public void testBitmapIsNotRecycledIfAcceptedByPool() {
-    when(harness.bitmapPool.put(eq(harness.bitmap))).thenReturn(true);
-
-    harness.resource.recycle();
-
-    assertFalse(harness.bitmap.isRecycled());
-  }
-
-  @Test
-  public void testRecyclesBitmapIfRejectedByPool() {
-    when(harness.bitmapPool.put(eq(harness.bitmap))).thenReturn(false);
-
-    harness.resource.recycle();
-
-    assertTrue(harness.bitmap.isRecycled());
-  }
-
   @Test(expected = NullPointerException.class)
   public void testThrowsIfBitmapIsNull() {
     new BitmapResource(null, mock(BitmapPool.class));
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
similarity index 84%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
index 5728ffe9c..e53f0180a 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
@@ -7,6 +7,7 @@
 import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
@@ -23,7 +24,7 @@
 import java.security.MessageDigest;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapTransformationTest {
 
   @Mock
@@ -41,7 +42,8 @@ public void testReturnsGivenResourceWhenBitmapNotTransformed() {
       public void updateDiskCacheKey(MessageDigest messageDigest) { }
 
       @Override
-      protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
+      protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,
+          int outWidth, int outHeight) {
         return toTransform;
       }
     };
@@ -58,7 +60,8 @@ public void testReturnsNewResourceWhenBitmapTransformed() {
       public void updateDiskCacheKey(MessageDigest messageDigest) { }
 
       @Override
-      protected Bitmap transform(BitmapPool pool, Bitmap bitmap, int outWidth, int outHeight) {
+      protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap bitmap, int outWidth,
+          int outHeight) {
         return transformed;
       }
     };
@@ -77,7 +80,8 @@ public void testPassesGivenArgumentsToTransform() {
       public void updateDiskCacheKey(MessageDigest messageDigest) { }
 
       @Override
-      protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
+      protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,
+          int outWidth, int outHeight) {
         assertEquals(bitmapPool, pool);
         assertEquals(resource.get(), toTransform);
         assertEquals(expectedWidth, outWidth);
@@ -97,8 +101,8 @@ public void testThrowsIfGivenInvalidWidth() {
       public void updateDiskCacheKey(MessageDigest messageDigest) { }
 
       @Override
-      protected Bitmap transform(BitmapPool bitmapPool, Bitmap toTransform, int outWidth,
-          int outHeight) {
+      protected Bitmap transform(@NonNull BitmapPool bitmapPool, @NonNull Bitmap toTransform,
+          int outWidth, int outHeight) {
         return null;
       }
     };
@@ -113,8 +117,8 @@ public void testThrowsIfGivenInvalidHeight() {
       public void updateDiskCacheKey(MessageDigest messageDigest) { }
 
       @Override
-      protected Bitmap transform(BitmapPool bitmapPool, Bitmap toTransform, int outWidth,
-          int outHeight) {
+      protected Bitmap transform(@NonNull BitmapPool bitmapPool, @NonNull Bitmap toTransform,
+          int outWidth, int outHeight) {
         return null;
       }
 
@@ -130,7 +134,8 @@ public void testReturnsNullIfTransformReturnsNull() {
       public void updateDiskCacheKey(MessageDigest messageDigest) {  }
 
       @Override
-      protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
+      protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform,
+          int outWidth, int outHeight) {
         return null;
       }
     };
@@ -178,7 +183,8 @@ public SizeTrackingTransform() {
     }
 
     @Override
-    protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
+    protected Bitmap transform(@NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth,
+        int outHeight) {
       givenWidth = outWidth;
       givenHeight = outHeight;
       return null;
@@ -187,4 +193,4 @@ protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, in
     @Override
     public void updateDiskCacheKey(MessageDigest messageDigest) { }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
similarity index 86%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
index 71c1c7689..53359e2f7 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
@@ -6,8 +6,8 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -32,10 +32,11 @@
 import java.security.NoSuchAlgorithmException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class CenterCropTest {
   @Mock Resource<Bitmap> resource;
   @Mock BitmapPool pool;
+  @Mock Transformation<Bitmap> transformation;
 
   private CenterCrop centerCrop;
   private int bitmapWidth;
@@ -50,11 +51,15 @@ public void setUp() {
     bitmap = Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888);
     when(resource.get()).thenReturn(bitmap);
 
+    when(pool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenAnswer(new Util.CreateBitmap());
+
     centerCrop = new CenterCrop(pool);
   }
 
   @Test
   public void testDoesNotPutNullBitmapAcquiredFromPool() {
+    reset(pool);
     when(pool.get(anyInt(), anyInt(), any(Bitmap.Config.class))).thenReturn(null);
 
     centerCrop.transform(resource, 100, 100);
@@ -77,17 +82,6 @@ public void testDoesNotRecycleGivenResourceIfMatchesSizeExactly() {
     verify(resource, never()).recycle();
   }
 
-  @Test
-  public void testDoesPutNonNullBitmapAcquiredFromPoolWhenUnused() {
-    Bitmap fromPool =
-        Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888);
-    when(pool.get(anyInt(), anyInt(), any(Bitmap.Config.class))).thenReturn(fromPool);
-
-    centerCrop.transform(resource, bitmapWidth, bitmapHeight);
-
-    verify(pool).put(eq(fromPool));
-  }
-
   @Test
   public void testDoesNotRecycleGivenResource() {
     centerCrop.transform(resource, 50, 50);
@@ -110,7 +104,6 @@ public void testReturnsBitmapWithExactlyGivenDimensionsIfBitmapIsLargerThanTarge
     int expectedWidth = 75;
     int expectedHeight = 74;
 
-    Resource<Bitmap> resource = mock(Resource.class);
     for (int[] dimens : new int[][] { new int[] { 800, 200 }, new int[] { 450, 100 },
         new int[] { 78, 78 } }) {
       Bitmap toTransform = Bitmap.createBitmap(dimens[0], dimens[1], Bitmap.Config.ARGB_4444);
@@ -129,7 +122,6 @@ public void testReturnsBitmapWithExactlyGivenDimensionsIfBitmapIsSmallerThanTarg
     int expectedWidth = 100;
     int expectedHeight = 100;
 
-    Resource<Bitmap> resource = mock(Resource.class);
     for (int[] dimens : new int[][] { new int[] { 50, 90 }, new int[] { 150, 2 },
         new int[] { 78, 78 } }) {
       Bitmap toTransform = Bitmap.createBitmap(dimens[0], dimens[1], Bitmap.Config.ARGB_4444);
@@ -147,9 +139,8 @@ public void testReturnsBitmapWithExactlyGivenDimensionsIfBitmapIsSmallerThanTarg
   public void testEquals() throws NoSuchAlgorithmException {
     KeyAssertions.assertSame(centerCrop, new CenterCrop(pool));
 
-    Transformation<Bitmap> other = mock(Transformation.class);
-    doAnswer(new Util.WriteDigest("other")).when(other)
+    doAnswer(new Util.WriteDigest("other")).when(transformation)
         .updateDiskCacheKey(any(MessageDigest.class));
-    KeyAssertions.assertDifferent(centerCrop, other);
+    KeyAssertions.assertDifferent(centerCrop, transformation);
   }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
similarity index 93%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
index de6aa6c0e..63bd65c10 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
@@ -1,6 +1,8 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.when;
 
 import android.annotation.TargetApi;
@@ -11,6 +13,7 @@
 import android.graphics.Rect;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.tests.Util;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -31,6 +34,8 @@
   @Before
   public void setup() {
     MockitoAnnotations.initMocks(this);
+    when(bitmapPool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenAnswer(new Util.CreateBitmap());
     circleCrop = new CircleCrop(RuntimeEnvironment.application);
   }
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
index bdc7c0f90..f68d1e556 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategyTest.java
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class DownsampleStrategyTest {
 
   @Test
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
similarity index 92%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
index b141f2a56..c88e3081a 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DownsamplerTest.java
@@ -15,6 +15,7 @@
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.ByteArrayPool;
+import com.bumptech.glide.load.resource.bitmap.DownsamplerTest.AllocationSizeBitmap;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -24,6 +25,9 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowBitmap;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -32,7 +36,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 19, shadows = AllocationSizeBitmap.class)
 public class DownsamplerTest {
   @Mock private BitmapPool bitmapPool;
   @Mock private ByteArrayPool byteArrayPool;
@@ -177,4 +181,14 @@ private InputStream compressBitmap(Bitmap bitmap, Bitmap.CompressFormat compress
     bitmap.compress(compressFormat, 100, os);
     return new ByteArrayInputStream(os.toByteArray());
   }
+
+  // Robolectric doesn't implement getAllocationByteCount correctly.
+  @Implements(Bitmap.class)
+  public static class AllocationSizeBitmap extends ShadowBitmap {
+
+    @Implementation
+    public int getAllocationByteCount() {
+      return getWidth() * getHeight() * (getConfig() == Bitmap.Config.ARGB_8888 ? 4 : 2);
+    }
+  }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
similarity index 71%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
index a2d517639..a140022d8 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
@@ -2,18 +2,20 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
 
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
 import com.bumptech.glide.tests.KeyAssertions;
 import com.bumptech.glide.tests.Util;
 
@@ -24,16 +26,20 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowCanvas;
 
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18, shadows = { FitCenterTest.DrawNothingCanvas.class })
 public class FitCenterTest {
 
-  @Mock BitmapPool pool;
   @Mock Resource<Bitmap> resource;
+  @Mock Transformation<Bitmap> transformation;
+  private BitmapPool pool;
   private FitCenter fitCenter;
   private int bitmapWidth;
   private int bitmapHeight;
@@ -46,16 +52,9 @@ public void setUp() {
     Bitmap bitmap = Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888);
     when(resource.get()).thenReturn(bitmap);
 
-    fitCenter = new FitCenter(pool);
-  }
-
-  @Test
-  public void testDoesNotPutNullBitmapAcquiredFromPool() {
-    when(pool.get(anyInt(), anyInt(), any(Bitmap.Config.class))).thenReturn(null);
-
-    fitCenter.transform(resource, 100, 100);
+    pool = new BitmapPoolAdapter();
 
-    verify(pool, never()).put(any(Bitmap.class));
+    fitCenter = new FitCenter(pool);
   }
 
   @Test
@@ -84,9 +83,18 @@ public void testDoesNotRecycleGivenResource() {
   public void testEquals() throws NoSuchAlgorithmException {
     KeyAssertions.assertSame(fitCenter, new FitCenter(pool));
 
-    Transformation<Bitmap> other = mock(Transformation.class);
-    doAnswer(new Util.WriteDigest("other")).when(other)
+    doAnswer(new Util.WriteDigest("other")).when(transformation)
         .updateDiskCacheKey(any(MessageDigest.class));
-    KeyAssertions.assertDifferent(fitCenter, other);
+    KeyAssertions.assertDifferent(fitCenter, transformation);
+  }
+
+  @Implements(Canvas.class)
+  public static final class DrawNothingCanvas extends ShadowCanvas {
+
+    @Implementation
+    @Override
+    public void drawBitmap(Bitmap bitmap, Matrix matrix, Paint paint) {
+      // Do nothing.
+    }
   }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
index 8b804a394..705246076 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/ImageHeaderParserTest.java
@@ -21,7 +21,7 @@
 import java.nio.ByteBuffer;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ImageHeaderParserTest {
 
   private static final byte[] PNG_HEADER_WITH_IHDR_CHUNK =
@@ -226,4 +226,4 @@ public int read(byte[] buffer, int byteOffset, int byteCount) throws IOException
         return super.read(buffer, byteOffset, toActuallyRead);
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
index 855f726be..c8edbaeac 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStreamTest.java
@@ -21,7 +21,7 @@
 import java.util.Arrays;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class RecyclableBufferedInputStreamTest {
 
   private static final int DATA_SIZE = 30;
@@ -288,4 +288,4 @@ public void testResetThrowsIfMarkIsInvalid() throws IOException {
     stream.read();
     stream.reset();
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
similarity index 76%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
index aae8f0db4..24bd56cad 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
@@ -3,25 +3,32 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import com.google.common.collect.Range;
 
+import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.graphics.Matrix;
 import android.media.ExifInterface;
+import android.os.Build;
 
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.tests.Util;
 import com.bumptech.glide.util.Preconditions;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
@@ -29,19 +36,28 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadows.ShadowBitmap;
 
+@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = {
+@Config(manifest = Config.NONE, sdk = 18, shadows = {
     TransformationUtilsTest.AlphaShadowBitmap.class })
 public class TransformationUtilsTest {
 
+  @Mock BitmapPool bitmapPool;
+
+  @Before
+  public void setUp() {
+    MockitoAnnotations.initMocks(this);
+    when(bitmapPool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenAnswer(new Util.CreateBitmap());
+  }
+
   @Test
   public void testFitCenterWithWideBitmap() {
     final int maxSide = 500;
 
     Bitmap wide = Bitmap.createBitmap(2000, 100, Bitmap.Config.ARGB_8888);
 
-    Bitmap transformed =
-        TransformationUtils.fitCenter(wide, mock(BitmapPool.class), maxSide, maxSide);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, wide, maxSide, maxSide);
 
     assertHasOriginalAspectRatio(wide, transformed);
     assertBitmapFitsExactlyWithinBounds(maxSide, transformed);
@@ -53,8 +69,7 @@ public void testFitCenterWithSmallWideBitmap() {
 
     Bitmap smallWide = Bitmap.createBitmap(400, 40, Bitmap.Config.ARGB_8888);
 
-    Bitmap transformed =
-        TransformationUtils.fitCenter(smallWide, mock(BitmapPool.class), maxSide, maxSide);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, smallWide, maxSide, maxSide);
 
     assertHasOriginalAspectRatio(smallWide, transformed);
     assertBitmapFitsExactlyWithinBounds(maxSide, transformed);
@@ -66,8 +81,7 @@ public void testFitCenterWithTallBitmap() {
 
     Bitmap tall = Bitmap.createBitmap(65, 3000, Bitmap.Config.ARGB_8888);
 
-    Bitmap transformed =
-        TransformationUtils.fitCenter(tall, mock(BitmapPool.class), maxSide, maxSide);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, tall, maxSide, maxSide);
 
     assertHasOriginalAspectRatio(tall, transformed);
     assertBitmapFitsExactlyWithinBounds(maxSide, transformed);
@@ -79,8 +93,7 @@ public void testFitCenterWithSmallTallBitmap() {
 
     Bitmap smallTall = Bitmap.createBitmap(10, 400, Bitmap.Config.ARGB_8888);
 
-    Bitmap transformed =
-        TransformationUtils.fitCenter(smallTall, mock(BitmapPool.class), maxSide, maxSide);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, smallTall, maxSide, maxSide);
 
     assertHasOriginalAspectRatio(smallTall, transformed);
     assertBitmapFitsExactlyWithinBounds(maxSide, transformed);
@@ -91,9 +104,7 @@ public void testFitCenterWithSquareBitmap() {
     final int maxSide = 500;
 
     Bitmap square = Bitmap.createBitmap(600, 600, Bitmap.Config.ARGB_8888);
-
-    Bitmap transformed =
-        TransformationUtils.fitCenter(square, mock(BitmapPool.class), maxSide, maxSide);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, square, maxSide, maxSide);
 
     assertHasOriginalAspectRatio(square, transformed);
     assertBitmapFitsExactlyWithinBounds(maxSide, transformed);
@@ -105,8 +116,7 @@ public void testFitCenterWithTooSmallSquareBitmap() {
 
     Bitmap smallSquare = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
-    Bitmap transformed =
-        TransformationUtils.fitCenter(smallSquare, mock(BitmapPool.class), maxSide, maxSide);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, smallSquare, maxSide, maxSide);
 
     assertHasOriginalAspectRatio(smallSquare, transformed);
     assertBitmapFitsExactlyWithinBounds(maxSide, transformed);
@@ -117,8 +127,7 @@ public void testFitCenterWithTooSmallSquareBitmap() {
   public void testFitCenterUsesFloorInsteadOfRoundingForOutputBitmapSize() {
     Bitmap toTransform = Bitmap.createBitmap(1230, 1640, Bitmap.Config.RGB_565);
 
-    Bitmap transformed =
-        TransformationUtils.fitCenter(toTransform, mock(BitmapPool.class), 1075, 1366);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, toTransform, 1075, 1366);
 
     assertEquals(1024, transformed.getWidth());
     assertEquals(1366, transformed.getHeight());
@@ -127,8 +136,8 @@ public void testFitCenterUsesFloorInsteadOfRoundingForOutputBitmapSize() {
   @Test
   public void testFitCenterReturnsGivenBitmapIfGivenBitmapMatchesExactly() {
     Bitmap toFit = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_4444);
-    Bitmap transformed =
-        TransformationUtils.fitCenter(toFit, null, toFit.getWidth(), toFit.getHeight());
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, toFit, toFit.getWidth(),
+        toFit.getHeight());
     assertTrue(toFit == transformed);
   }
 
@@ -136,7 +145,7 @@ public void testFitCenterReturnsGivenBitmapIfGivenBitmapMatchesExactly() {
   public void testFitCenterReturnsGivenBitmapIfGivenBitmapWidthMatchesExactly() {
     Bitmap toFit = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_4444);
     Bitmap transformed =
-        TransformationUtils.fitCenter(toFit, null, toFit.getWidth(), toFit.getHeight() * 2);
+        TransformationUtils.fitCenter(bitmapPool, toFit, toFit.getWidth(), toFit.getHeight() * 2);
     assertTrue(toFit == transformed);
   }
 
@@ -144,22 +153,15 @@ public void testFitCenterReturnsGivenBitmapIfGivenBitmapWidthMatchesExactly() {
   public void testFitCenterReturnsGivenBitmapIfGivenBitmapHeightMatchesExactly() {
     Bitmap toFit = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_4444);
     Bitmap transformed =
-        TransformationUtils.fitCenter(toFit, null, toFit.getWidth() * 2, toFit.getHeight());
+        TransformationUtils.fitCenter(bitmapPool, toFit, toFit.getWidth() * 2, toFit.getHeight());
     assertTrue(toFit == transformed);
   }
 
-  @Test
-  public void testCenterCropReturnsNullIfGivenBitmapIsNull() {
-    Bitmap transformed =
-        TransformationUtils.centerCrop(null /*recycled*/, null /*toCrop*/, 100, 100);
-    assertNull(transformed);
-  }
-
   @Test
   public void testCenterCropReturnsGivenBitmapIfGivenBitmapExactlyMatchesGivenDimensions() {
     Bitmap toCrop = Bitmap.createBitmap(200, 300, Bitmap.Config.ARGB_8888);
     Bitmap transformed = TransformationUtils
-        .centerCrop(null /*recycled*/, toCrop, toCrop.getWidth(), toCrop.getHeight());
+        .centerCrop(bitmapPool, toCrop, toCrop.getWidth(), toCrop.getHeight());
 
     // Robolectric incorrectly implements equals() for Bitmaps, we want the original object not
     // just an equivalent.
@@ -170,7 +172,7 @@ public void testCenterCropReturnsGivenBitmapIfGivenBitmapExactlyMatchesGivenDime
   public void testFitCenterHandlesBitmapsWithNullConfigs() {
     Bitmap toFit = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
     Shadows.shadowOf(toFit).setConfig(null);
-    Bitmap transformed = TransformationUtils.fitCenter(toFit, mock(BitmapPool.class), 50, 50);
+    Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, toFit, 50, 50);
     assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());
   }
 
@@ -179,12 +181,15 @@ public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmap
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
     Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
+    reset(bitmapPool);
+    when(bitmapPool.get(eq(50), eq(50), eq(Bitmap.Config.ARGB_8888)))
+        .thenReturn(toReuse);
 
     toReuse.setHasAlpha(false);
     toTransform.setHasAlpha(true);
 
-    Bitmap result = TransformationUtils
-        .centerCrop(toReuse, toTransform, toReuse.getWidth(), toReuse.getHeight());
+    Bitmap result = TransformationUtils.centerCrop(bitmapPool, toTransform, toReuse.getWidth(),
+        toReuse.getHeight());
 
     assertEquals(toReuse, result);
     assertTrue(result.hasAlpha());
@@ -196,12 +201,14 @@ public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmap
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
     Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
+    reset(bitmapPool);
+    when(bitmapPool.get(eq(50), eq(50), eq(Bitmap.Config.ARGB_8888))).thenReturn(toReuse);
 
     toReuse.setHasAlpha(true);
     toTransform.setHasAlpha(false);
 
-    Bitmap result = TransformationUtils
-        .centerCrop(toReuse, toTransform, toReuse.getWidth(), toReuse.getHeight());
+    Bitmap result = TransformationUtils.centerCrop(bitmapPool, toTransform, toReuse.getWidth(),
+        toReuse.getHeight());
 
     assertEquals(toReuse, result);
     assertFalse(result.hasAlpha());
@@ -213,8 +220,8 @@ public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {
 
     toTransform.setHasAlpha(true);
 
-    Bitmap result = TransformationUtils
-        .centerCrop(null, toTransform, toTransform.getWidth() / 2, toTransform.getHeight() / 2);
+    Bitmap result = TransformationUtils.centerCrop(bitmapPool, toTransform,
+        toTransform.getWidth() / 2, toTransform.getHeight() / 2);
 
     assertTrue(result.hasAlpha());
   }
@@ -224,7 +231,7 @@ public void testCenterCropHandlesBitmapsWithNullConfigs() {
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
     Shadows.shadowOf(toTransform).setConfig(null);
 
-    Bitmap transformed = TransformationUtils.centerCrop(null /*recycled*/, toTransform, 50, 50);
+    Bitmap transformed = TransformationUtils.centerCrop(bitmapPool, toTransform, 50, 50);
 
     assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());
   }
@@ -235,8 +242,8 @@ public void testCenterCropSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlpha(
 
     toTransform.setHasAlpha(false);
 
-    Bitmap result = TransformationUtils
-        .centerCrop(null, toTransform, toTransform.getWidth() / 2, toTransform.getHeight() / 2);
+    Bitmap result = TransformationUtils.centerCrop(bitmapPool, toTransform,
+        toTransform.getWidth() / 2, toTransform.getHeight() / 2);
 
     assertFalse(result.hasAlpha());
   }
@@ -246,15 +253,15 @@ public void testFitCenterSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapI
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
     Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
-    BitmapPool bitmapPool = mock(BitmapPool.class);
+    reset(bitmapPool);
     when(bitmapPool.get(eq(toReuse.getWidth()), eq(toReuse.getHeight()), eq(toReuse.getConfig())))
         .thenReturn(toReuse);
 
     toReuse.setHasAlpha(false);
     toTransform.setHasAlpha(true);
 
-    Bitmap result = TransformationUtils
-        .fitCenter(toTransform, bitmapPool, toReuse.getWidth(), toReuse.getHeight());
+    Bitmap result = TransformationUtils.fitCenter(bitmapPool, toTransform, toReuse.getWidth(),
+        toReuse.getHeight());
 
     assertEquals(toReuse, result);
     assertTrue(result.hasAlpha());
@@ -266,15 +273,15 @@ public void testFitCenterSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapI
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
     Bitmap toReuse = Bitmap.createBitmap(50, 50, Bitmap.Config.ARGB_8888);
-    BitmapPool bitmapPool = mock(BitmapPool.class);
+    reset(bitmapPool);
     when(bitmapPool.get(eq(toReuse.getWidth()), eq(toReuse.getHeight()), eq(toReuse.getConfig())))
         .thenReturn(toReuse);
 
     toReuse.setHasAlpha(true);
     toTransform.setHasAlpha(false);
 
-    Bitmap result = TransformationUtils
-        .fitCenter(toTransform, bitmapPool, toReuse.getWidth(), toReuse.getHeight());
+    Bitmap result = TransformationUtils.fitCenter(bitmapPool, toTransform, toReuse.getWidth(),
+        toReuse.getHeight());
 
     assertEquals(toReuse, result);
     assertFalse(result.hasAlpha());
@@ -283,12 +290,11 @@ public void testFitCenterSetsOutBitmapToHaveAlphaIfInBitmapHasAlphaAndOutBitmapI
   @Test
   public void testFitCenterSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    BitmapPool pool = mock(BitmapPool.class);
 
     toTransform.setHasAlpha(true);
 
-    Bitmap result = TransformationUtils
-        .fitCenter(toTransform, pool, toTransform.getWidth() / 2, toTransform.getHeight() / 2);
+    Bitmap result = TransformationUtils.fitCenter(bitmapPool, toTransform,
+        toTransform.getWidth() / 2, toTransform.getHeight() / 2);
 
     assertTrue(result.hasAlpha());
   }
@@ -296,12 +302,11 @@ public void testFitCenterSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {
   @Test
   public void testFitCenterSetsOutBitmapToNotHaveAlphaIfInBitmapDoesNotHaveAlpha() {
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
-    BitmapPool pool = mock(BitmapPool.class);
 
     toTransform.setHasAlpha(false);
 
-    Bitmap result = TransformationUtils
-        .fitCenter(toTransform, pool, toTransform.getWidth() / 2, toTransform.getHeight() / 2);
+    Bitmap result = TransformationUtils.fitCenter(bitmapPool, toTransform,
+        toTransform.getWidth() / 2, toTransform.getHeight() / 2);
 
     assertFalse(result.hasAlpha());
   }
@@ -357,54 +362,39 @@ public void testRotateImage() {
 
   @Test
   public void testRotateImageExifReturnsGivenBitmapIfRotationIsNormal() {
-    BitmapPool bitmapPool = mock(BitmapPool.class);
     Bitmap toRotate = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_4444);
     // Use assertTrue because Robolectric incorrectly implements equality for Bitmaps. We want
-    // not just an
-    // identical Bitmap, but our original Bitmap object back.
+    // not just an identical Bitmap, but our original Bitmap object back.
     Bitmap rotated =
-        TransformationUtils.rotateImageExif(toRotate, bitmapPool, ExifInterface.ORIENTATION_NORMAL);
+        TransformationUtils.rotateImageExif(bitmapPool, toRotate, ExifInterface.ORIENTATION_NORMAL);
     assertTrue(toRotate == rotated);
   }
 
   @Test
   public void testRotateImageExifReturnsGivenBitmapIfRotationIsUndefined() {
-    BitmapPool bitmapPool = mock(BitmapPool.class);
     Bitmap toRotate = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
     // Use assertTrue because Robolectric incorrectly implements equality for Bitmaps. We want
-    // not just an
-    // identical Bitmap, but our original Bitmap object back.
-    Bitmap rotated = TransformationUtils
-        .rotateImageExif(toRotate, bitmapPool, ExifInterface.ORIENTATION_UNDEFINED);
+    // not just an identical Bitmap, but our original Bitmap object back.
+    Bitmap rotated = TransformationUtils.rotateImageExif(bitmapPool, toRotate,
+        ExifInterface.ORIENTATION_UNDEFINED);
     assertTrue(toRotate == rotated);
   }
 
   @Test
   public void testRotateImageExifReturnsGivenBitmapIfOrientationIsInvalid() {
-    BitmapPool bitmapPool = mock(BitmapPool.class);
     Bitmap toRotate = Bitmap.createBitmap(200, 100, Bitmap.Config.ARGB_8888);
     // Use assertTrue because Robolectric incorrectly implements equality for Bitmaps. We want
-    // not just an
-    // identical Bitmap, but our original Bitmap object back.
-    Bitmap rotated = TransformationUtils.rotateImageExif(toRotate, bitmapPool, -1);
+    // not just an identical Bitmap, but our original Bitmap object back.
+    Bitmap rotated = TransformationUtils.rotateImageExif(bitmapPool, toRotate, -1);
     assertTrue(toRotate == rotated);
   }
 
-  @Test
-  public void testRotateImageExifHandlesEmptyBitmapPool() {
-    Bitmap toRotate = Bitmap.createBitmap(200, 100, Bitmap.Config.ARGB_4444);
-    BitmapPool bitmapPool = mock(BitmapPool.class);
-    assertNotNull(TransformationUtils
-        .rotateImageExif(toRotate, bitmapPool, ExifInterface.ORIENTATION_ROTATE_90));
-  }
-
   @Test
   public void testRotateImageExifHandlesBitmapsWithNullConfigs() {
     Bitmap toRotate = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
     Shadows.shadowOf(toRotate).setConfig(null);
-    BitmapPool bitmapPool = mock(BitmapPool.class);
-    Bitmap rotated = TransformationUtils
-        .rotateImageExif(toRotate, bitmapPool, ExifInterface.ORIENTATION_ROTATE_180);
+    Bitmap rotated = TransformationUtils.rotateImageExif(bitmapPool, toRotate,
+        ExifInterface.ORIENTATION_ROTATE_180);
     assertEquals(Bitmap.Config.ARGB_8888, rotated.getConfig());
   }
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
index f523d0097..b1716d3ac 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoderTest.java
@@ -27,7 +27,7 @@
 import java.io.IOException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class VideoBitmapDecoderTest {
   @Mock private ParcelFileDescriptor resource;
   @Mock private VideoBitmapDecoder.MediaMetadataRetrieverFactory factory;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/bytes/BytesResourceTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
index 811d9f76d..f95f8bd10 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class DrawableResourceTest {
   private TestDrawable drawable;
   private DrawableResource<TestDrawable> resource;
@@ -107,4 +107,4 @@ public int getOpacity() {
       return 0;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
index 8935855c7..508316e05 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/file/FileDecoderTest.java
@@ -32,4 +32,4 @@ public void testReturnsGivenFileAsResource() throws IOException {
 
     assertEquals(expected, decoded.get());
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
index 17a67ab32..1cfb5408b 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/file/FileResourceTest.java
@@ -25,4 +25,4 @@ public void setUp() {
   public void testReturnsGivenFile() {
     assertEquals(file, resource.get());
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
similarity index 86%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
index 2ea725abe..257e50e75 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
@@ -3,9 +3,9 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -14,7 +14,7 @@
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.LruByteArrayPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.tests.GlideShadowLooper;
 
 import org.junit.Before;
@@ -31,9 +31,10 @@
 import java.nio.ByteBuffer;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, sdk = 18, shadows = GlideShadowLooper.class)
 public class ByteBufferGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] { 0x47, 0x49, 0x46 };
+  static final int ARRAY_POOL_SIZE_BYTES = 4 * 1024 * 1024;
 
   private ByteBufferGifDecoder decoder;
   private GifHeader gifHeader;
@@ -45,22 +46,26 @@
   @Mock ByteBufferGifDecoder.GifHeaderParserPool parserPool;
   @Mock ByteBufferGifDecoder.GifDecoderFactory decoderFactory;
 
-
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
 
     gifHeader = Mockito.spy(new GifHeader());
     when(parser.parseHeader()).thenReturn(gifHeader);
-    when(parserPool.obtain(any(ByteBuffer.class))).thenReturn(parser);
+    when(parserPool.obtain(isA(ByteBuffer.class))).thenReturn(parser);
 
-    when(decoderFactory.build(any(GifDecoder.BitmapProvider.class),
-        any(GifHeader.class), any(ByteBuffer.class), anyInt()))
+    when(decoderFactory.build(isA(GifDecoder.BitmapProvider.class),
+        eq(gifHeader), isA(ByteBuffer.class), anyInt()))
         .thenReturn(gifDecoder);
 
     options = new Options();
-    decoder = new ByteBufferGifDecoder(RuntimeEnvironment.application, bitmapPool,
-        new LruByteArrayPool(), parserPool, decoderFactory);
+    decoder =
+        new ByteBufferGifDecoder(
+            RuntimeEnvironment.application,
+            bitmapPool,
+            new LruArrayPool(ARRAY_POOL_SIZE_BYTES),
+            parserPool,
+            decoderFactory);
   }
 
   @Test
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
similarity index 95%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
index 1cc251d93..c83dd1740 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GifDrawableResourceTest {
   private GifDrawable drawable;
   private GifDrawableResource resource;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
similarity index 84%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 46f89110e..d838b7efa 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -5,8 +5,8 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -26,6 +26,7 @@
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.resource.gif.GifDrawableTest.BitmapTrackingShadowCanvas;
 import com.bumptech.glide.tests.GlideShadowLooper;
 import com.bumptech.glide.tests.Util;
 
@@ -38,9 +39,17 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.internal.ShadowExtractor;
+import org.robolectric.shadows.ShadowCanvas;
+
+import java.util.HashSet;
+import java.util.Set;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, sdk = 18,
+    shadows = { GlideShadowLooper.class, BitmapTrackingShadowCanvas.class })
 public class GifDrawableTest {
   private GifDrawable drawable;
   private int frameHeight;
@@ -54,6 +63,14 @@
   @Mock private Paint paint;
   @Mock private Transformation<Bitmap> transformation;
 
+  private static Paint isAPaint() {
+    return isA(Paint.class);
+  }
+
+  private static Rect isARect() {
+    return isA(Rect.class);
+  }
+
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
@@ -64,6 +81,7 @@ public void setUp() {
     when(frameLoader.getWidth()).thenReturn(frameWidth);
     when(frameLoader.getHeight()).thenReturn(frameHeight);
     when(frameLoader.getCurrentFrame()).thenReturn(firstFrame);
+    when(frameLoader.getCurrentIndex()).thenReturn(0);
     drawable.setCallback(cb);
     initialSdkVersion = Build.VERSION.SDK_INT;
   }
@@ -75,18 +93,12 @@ public void tearDown() {
 
   @Test
   public void testShouldDrawFirstFrameBeforeAnyFrameRead() {
-    Canvas canvas = mock(Canvas.class);
+    Canvas canvas = new Canvas();
     drawable.draw(canvas);
 
-    verify(canvas).drawBitmap(eq(firstFrame), anyRect(), anyRect(), anyPaint());
-  }
-
-  @Test
-  public void testDoesNotDrawNullFirstFrame() {
-    drawable = new GifDrawable(RuntimeEnvironment.application, frameLoader, bitmapPool, paint);
-    Canvas canvas = mock(Canvas.class);
-
-    verify(canvas, never()).drawBitmap(any(Bitmap.class), anyRect(), anyRect(), anyPaint());
+    BitmapTrackingShadowCanvas shadowCanvas =
+        (BitmapTrackingShadowCanvas) ShadowExtractor.extract(canvas);
+    assertThat(shadowCanvas.getDrawnBitmaps()).containsExactly(firstFrame);
   }
 
   @Test
@@ -96,8 +108,8 @@ public void testDoesDrawCurrentFrameIfOneIsAvailable() {
     when(frameLoader.getCurrentFrame()).thenReturn(currentFrame);
 
     drawable.draw(canvas);
-    verify(canvas).drawBitmap(eq(currentFrame), anyRect(), anyRect(), anyPaint());
-    verify(canvas, never()).drawBitmap(eq(firstFrame), anyRect(), anyRect(), anyPaint());
+    verify(canvas).drawBitmap(eq(currentFrame), (Rect) isNull(), isARect(), isAPaint());
+    verify(canvas, never()).drawBitmap(eq(firstFrame), (Rect) isNull(), isARect(), isAPaint());
   }
 
   @Test
@@ -174,7 +186,7 @@ public void testReturnsTrueFromIsRunningWhenRunning() {
   @Test
   public void testInvalidatesSelfWhenFrameReady() {
     drawable.setIsRunning(true);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     verify(cb).invalidateDrawable(eq(drawable));
   }
@@ -183,7 +195,7 @@ public void testInvalidatesSelfWhenFrameReady() {
   public void testDoesNotStartLoadingNextFrameWhenCurrentFinishesIfHasNoCallback() {
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     verify(frameLoader).unsubscribe(eq(drawable));
   }
@@ -192,7 +204,7 @@ public void testDoesNotStartLoadingNextFrameWhenCurrentFinishesIfHasNoCallback()
   public void testStopsWhenCurrentFrameFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     assertFalse(drawable.isRunning());
   }
@@ -203,7 +215,7 @@ public void testDoesNotStopWhenCurrentFrameFinishesIfHasNoCallbackAndIsPreHoneyc
 
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     assertTrue(drawable.isRunning());
   }
@@ -212,7 +224,7 @@ public void testDoesNotStopWhenCurrentFrameFinishesIfHasNoCallbackAndIsPreHoneyc
   public void testUnsubscribesWhenCurrentFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     verify(frameLoader).unsubscribe(eq(drawable));
   }
@@ -280,6 +292,24 @@ public void testReturnsFrameCountFromDecoder() {
     assertEquals(expected, drawable.getFrameCount());
   }
 
+  @Test
+  public void testReturnsDefaultFrameIndex() {
+    final int expected = -1;
+
+    when(frameLoader.getCurrentIndex()).thenReturn(expected);
+
+    assertEquals(expected, drawable.getFrameIndex());
+  }
+
+  @Test
+  public void testReturnsNonDefaultFrameIndex() {
+    final int expected = 100;
+
+    when(frameLoader.getCurrentIndex()).thenReturn(expected);
+
+    assertEquals(expected, drawable.getFrameIndex());
+  }
+
   @Test
   public void testRecycleCallsClearOnFrameManager() {
     drawable.recycle();
@@ -399,13 +429,16 @@ public void testCallingStartResetsLoopCounter() {
     drawable.setVisible(true, true);
     drawable.start();
 
-    drawable.onFrameReady(0);
-    drawable.onFrameReady(1);
+    drawable.onFrameReady();
+    when(frameLoader.getCurrentIndex()).thenReturn(1);
+    drawable.onFrameReady();
 
     drawable.start();
 
-    drawable.onFrameReady(0);
-    drawable.onFrameReady(1);
+    when(frameLoader.getCurrentIndex()).thenReturn(0);
+    drawable.onFrameReady();
+    when(frameLoader.getCurrentIndex()).thenReturn(1);
+    drawable.onFrameReady();
 
     // 4 onFrameReady(), 2 start()
     verify(cb, times(4 + 2)).invalidateDrawable(eq(drawable));
@@ -462,11 +495,11 @@ public void testDoesNotDrawFrameAfterRecycle() {
     drawable.setVisible(true, true);
     drawable.start();
     when(frameLoader.getCurrentFrame()).thenReturn(bitmap);
-    drawable.onFrameReady(1);
+    drawable.onFrameReady();
     drawable.recycle();
     Canvas canvas = mock(Canvas.class);
     drawable.draw(canvas);
-    verify(canvas, never()).drawBitmap(any(Bitmap.class), anyRect(), anyRect(), anyPaint());
+    verify(canvas, never()).drawBitmap(eq(bitmap), isARect(), isARect(), isAPaint());
   }
 
   @Test
@@ -491,7 +524,7 @@ public void testAppliesGravityOnDrawAfterBoundsChange() {
     Canvas canvas = mock(Canvas.class);
     drawable.draw(canvas);
 
-    verify(canvas).drawBitmap(any(Bitmap.class), (Rect) isNull(), eq(bounds), eq(paint));
+    verify(canvas).drawBitmap(isA(Bitmap.class), (Rect) isNull(), eq(bounds), eq(paint));
   }
 
   @Test
@@ -508,7 +541,6 @@ public void testSetColorFilterSetsColorFilterOnPaint() {
     verify(paint).setColorFilter(eq(colorFilter));
   }
 
-
   @Test
   public void testReturnsCurrentTransformationInGetFrameTransformation() {
     Transformation<Bitmap> newTransformation = mock(Transformation.class);
@@ -528,19 +560,29 @@ private void verifyRanLoops(int loopCount, int frameCount) {
     verify(cb, times(1 + loopCount * frameCount)).invalidateDrawable(eq(drawable));
   }
 
-  private static Paint anyPaint() {
-    return any(Paint.class);
-  }
-
-  private static Rect anyRect() {
-    return any(Rect.class);
-  }
-
   private void runLoops(int loopCount, int frameCount) {
     for (int loop = 0; loop < loopCount; loop++) {
       for (int frame = 0; frame < frameCount; frame++) {
-        drawable.onFrameReady(frame);
+        when(frameLoader.getCurrentIndex()).thenReturn(frame);
+        drawable.onFrameReady();
       }
     }
   }
+
+  /**
+   * Keeps track of the set of Bitmaps drawn to the canvas.
+   */
+  @Implements(Canvas.class)
+  public static class BitmapTrackingShadowCanvas extends ShadowCanvas {
+    private final Set<Bitmap> drawnBitmaps = new HashSet<>();
+
+    @Implementation
+    public void drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint) {
+      drawnBitmaps.add(bitmap);
+    }
+
+    public Iterable<Bitmap> getDrawnBitmaps() {
+      return drawnBitmaps;
+    }
+  }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
similarity index 89%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
index 8643c3fb2..120ad07a1 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
@@ -1,8 +1,8 @@
 package com.bumptech.glide.load.resource.gif;
 
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -29,7 +29,7 @@
 import java.security.NoSuchAlgorithmException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GifDrawableTransformationTest {
   @Mock Transformation<Bitmap> wrapped;
   @Mock BitmapPool bitmapPool;
@@ -61,22 +61,22 @@ public void testSetsTransformationAsFrameTransformation() {
     Bitmap expectedBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
     Resource<Bitmap> expectedResource = mock(Resource.class);
     when(expectedResource.get()).thenReturn(expectedBitmap);
-    when(wrapped.transform(any(Resource.class), anyInt(), anyInt())).thenReturn(expectedResource);
+    when(wrapped.transform(isA(Resource.class), anyInt(), anyInt())).thenReturn(expectedResource);
 
     transformation.transform(resource, width, height);
 
-    verify(gifDrawable).setFrameTransformation(any(Transformation.class), eq(expectedBitmap));
+    verify(gifDrawable).setFrameTransformation(isA(Transformation.class), eq(expectedBitmap));
   }
 
   @Test
   public void testEquals() throws NoSuchAlgorithmException {
     doAnswer(new Util.WriteDigest("first")).when(wrapped)
-        .updateDiskCacheKey(any(MessageDigest.class));
+        .updateDiskCacheKey(isA(MessageDigest.class));
     KeyAssertions.assertSame(transformation, new GifDrawableTransformation(wrapped, bitmapPool));
 
     Transformation<Bitmap> other = mock(Transformation.class);
     doAnswer(new Util.WriteDigest("other")).when(other)
-        .updateDiskCacheKey(any(MessageDigest.class));
+        .updateDiskCacheKey(isA(MessageDigest.class));
     KeyAssertions.assertDifferent(transformation, new GifDrawableTransformation(other, bitmapPool));
   }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
similarity index 90%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
index 82f244f7d..759a88013 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
@@ -3,10 +3,9 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -47,7 +46,7 @@
 import java.util.UUID;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GifFrameLoaderTest {
 
   @Mock GifFrameLoader.FrameCallback callback;
@@ -57,18 +56,17 @@
   @Mock RequestManager requestManager;
   private GifFrameLoader loader;
   private RequestBuilder<Bitmap> requestBuilder;
-  private ByteBuffer byteBuffer;
   private Bitmap firstFrame;
 
   @SuppressWarnings("unchecked")
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    when(handler.obtainMessage(anyInt(), anyObject())).thenReturn(mock(Message.class));
+    when(handler.obtainMessage(anyInt(), isA(DelayTarget.class))).thenReturn(mock(Message.class));
 
     firstFrame = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
 
-    byteBuffer = ByteBuffer.allocate(10);
+    ByteBuffer byteBuffer = ByteBuffer.allocate(10);
     when(gifDecoder.getData()).thenReturn(byteBuffer);
 
     requestBuilder = mock(RequestBuilder.class, new ReturnsSelfAnswer());
@@ -83,7 +81,7 @@ public void testSetFrameTransformationSetsTransformationOnRequestBuilder() {
     Transformation<Bitmap> transformation = mock(Transformation.class);
     loader.setFrameTransformation(transformation, firstFrame);
 
-    verify(requestBuilder, times(2)).apply(any(RequestOptions.class));
+    verify(requestBuilder, times(2)).apply(isA(RequestOptions.class));
   }
 
   @Test(expected = NullPointerException.class)
@@ -102,7 +100,7 @@ public void testReturnsSizeFromGifDecoderAndCurrentFrame() {
   public void testStartGetsNextFrameIfNotStartedAndWithNoLoadPending() {
     loader.subscribe(callback);
 
-    verify(requestBuilder).into(any(Target.class));
+    verify(requestBuilder).into(isA(Target.class));
   }
 
   @Test
@@ -111,8 +109,8 @@ public void testGetNextFrameIncrementsSignatureAndAdvancesDecoderBeforeStartingL
 
     InOrder order = inOrder(gifDecoder, requestBuilder);
     order.verify(gifDecoder).advance();
-    order.verify(requestBuilder).apply(any(BaseRequestOptions.class));
-    order.verify(requestBuilder).into(any(Target.class));
+    order.verify(requestBuilder).apply(isA(BaseRequestOptions.class));
+    order.verify(requestBuilder).into(isA(Target.class));
   }
 
   @Test
@@ -135,14 +133,14 @@ public void testStartDoesNotStartIfAlreadyRunning() {
     loader.subscribe(callback);
     loader.subscribe(mock(FrameCallback.class));
 
-    verify(requestBuilder, times(1)).into(any(Target.class));
+    verify(requestBuilder, times(1)).into(isA(Target.class));
   }
 
   @Test
   public void testGetNextFrameDoesNotStartLoadIfLoaderIsNotRunning() {
     loader.onFrameReady(mock(DelayTarget.class));
 
-    verify(requestBuilder, never()).into(any(Target.class));
+    verify(requestBuilder, never()).into(isA(Target.class));
   }
 
   @Test
@@ -151,7 +149,7 @@ public void testGetNextFrameDoesNotStartLoadIfLoadIsInProgress() {
     loader.unsubscribe(callback);
     loader.subscribe(callback);
 
-    verify(requestBuilder, times(1)).into(any(Target.class));
+    verify(requestBuilder, times(1)).into(isA(Target.class));
   }
 
   @Test
@@ -162,7 +160,7 @@ public void testGetNextFrameDoesStartLoadIfRestartedAndNoLoadIsInProgress() {
     loader.onFrameReady(mock(DelayTarget.class));
     loader.subscribe(callback);
 
-    verify(requestBuilder, times(2)).into(any(Target.class));
+    verify(requestBuilder, times(2)).into(isA(Target.class));
   }
 
   @Test
@@ -170,7 +168,7 @@ public void testGetNextFrameDoesStartLoadAfterLoadCompletesIfStarted() {
     loader.subscribe(callback);
     loader.onFrameReady(mock(DelayTarget.class));
 
-    verify(requestBuilder, times(2)).into(any(Target.class));
+    verify(requestBuilder, times(2)).into(isA(Target.class));
   }
 
   @Test
@@ -217,7 +215,7 @@ public void testDelayTargetSendsMessageWithHandlerDelayed() {
     DelayTarget delayTarget = new DelayTarget(handler, 1, targetTime);
     delayTarget.onResourceReady(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888), null
     /*glideAnimation*/);
-    verify(handler).sendMessageAtTime(any(Message.class), eq(targetTime));
+    verify(handler).sendMessageAtTime(isA(Message.class), eq(targetTime));
   }
 
   @Test
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
index ae7c9c78b..2a4c28460 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
@@ -20,7 +20,7 @@
 import java.io.IOException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GifFrameResourceDecoderTest {
   private GifDecoder gifDecoder;
   private GifFrameResourceDecoder resourceDecoder;
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
index 20ed15458..bd4efeda5 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
@@ -19,7 +19,7 @@
 import java.nio.ByteBuffer;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class StreamGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] { 0x47, 0x49, 0x46 };
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
index eae0652a7..41fea2adc 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapBytesTranscoderTest {
   private BitmapBytesTranscoderHarness harness;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
index 32672e5bd..cb975b03f 100644
--- a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
@@ -18,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapDrawableTranscoderTest {
   private BitmapDrawableTranscoder transcoder;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/transcode/GifDrawableBytesTranscoderTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/transcode/TranscoderRegistryTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
rename to library/src/test/java/com/bumptech/glide/load/resource/transcode/UnitTranscoderTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java b/library/src/test/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
rename to library/src/test/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
index ab10914b1..d1a14b0a1 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/ConnectivityMonitorFactoryTest.java
@@ -12,7 +12,7 @@
 import org.robolectric.shadows.ShadowApplication;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ConnectivityMonitorFactoryTest {
   private ConnectivityMonitorFactory factory;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java b/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
rename to library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
index 9353b67c2..44ac8726f 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
@@ -27,7 +27,7 @@
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class DefaultConnectivityMonitorTest {
   private ConnectivityMonitor.ConnectivityListener listener;
   private DefaultConnectivityMonitor monitor;
@@ -146,4 +146,4 @@ public void broadcast() {
       ShadowApplication.getInstance().sendBroadcast(connected);
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/Issue117Activity.java b/library/src/test/java/com/bumptech/glide/manager/Issue117Activity.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/manager/Issue117Activity.java
rename to library/src/test/java/com/bumptech/glide/manager/Issue117Activity.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java b/library/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java
rename to library/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
index 870b1c8e6..bcc1f9bea 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/LifecycleTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
@@ -14,7 +14,7 @@
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class LifecycleTest {
 
   private ActivityFragmentLifecycle lifecycle;
@@ -123,4 +123,4 @@ public void testNotifiesMultipleListeners() {
       verify(lifecycleListener).onDestroy();
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java b/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
rename to library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
index 9002c3a1a..1d863c384 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
@@ -22,7 +22,7 @@
 import org.robolectric.util.ActivityController;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class RequestManagerFragmentTest {
   private static final String TAG = "tag";
   private Harness[] harnesses;
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java b/library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
rename to library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
index e98176ba9..0dd3828d3 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
@@ -1,7 +1,7 @@
 package com.bumptech.glide.manager;
 
-import static com.google.common.truth.Truth.assertThat;
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
@@ -35,7 +35,7 @@
 import org.robolectric.util.ActivityController;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = GlideShadowLooper.class)
+@Config(manifest = Config.NONE, sdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerRetrieverTest {
   private static final String PARENT_TAG = "parent";
   private RetrieverHarness[] harnesses;
diff --git a/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java
rename to library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
index 7aa49fcf5..2110a1613 100644
--- a/library/src/androidTest/java/com/bumptech/glide/manager/RequestTrackerTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
@@ -355,4 +355,4 @@ public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
       return null;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/module/ManifestParserTest.java b/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/module/ManifestParserTest.java
rename to library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
index d5a2288e5..ab71f9d20 100644
--- a/library/src/androidTest/java/com/bumptech/glide/module/ManifestParserTest.java
+++ b/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
@@ -24,7 +24,7 @@
 import java.util.List;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ManifestParserTest {
   private static final String MODULE_VALUE = "GlideModule";
 
@@ -155,4 +155,4 @@ public int hashCode() {
       return super.hashCode();
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/test/java/com/bumptech/glide/request/BaseRequestOptionsTest.java b/library/src/test/java/com/bumptech/glide/request/BaseRequestOptionsTest.java
new file mode 100644
index 000000000..dad0d87eb
--- /dev/null
+++ b/library/src/test/java/com/bumptech/glide/request/BaseRequestOptionsTest.java
@@ -0,0 +1,142 @@
+package com.bumptech.glide.request;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.graphics.Bitmap;
+
+import com.bumptech.glide.load.Transformation;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class BaseRequestOptionsTest {
+
+  private TestOptions options;
+  @Mock private Transformation<Bitmap> transformation;
+
+  @Before
+  public void setUp() {
+    MockitoAnnotations.initMocks(this);
+    options = new TestOptions();
+  }
+
+  @Test
+  public void testIsTransformationRequired_byDefault_isFalse() {
+    assertThat(options.isTransformationRequired()).isFalse();
+  }
+
+  @Test
+  public void testIsTransformationSet_byDefault_isFalse() {
+    assertThat(options.isTransformationSet()).isFalse();
+  }
+
+  @Test
+  public void testIsTransformationAllowed_byDefault_isTrue() {
+    assertThat(options.isTransformationAllowed()).isTrue();
+  }
+
+  @Test
+  public void testIsTransformationSet_afterApplyingOptionsWithTransform_isTrue() {
+    TestOptions other = new TestOptions();
+    other.transform(Bitmap.class, transformation);
+    options.apply(other);
+    assertThat(options.isTransformationSet()).isTrue();
+  }
+
+  @Test
+  public void testIsTransformationSet_afterDontTransform_isFalse() {
+    options.dontTransform();
+    assertThat(options.isTransformationSet()).isFalse();
+  }
+
+  @Test
+  public void testIsTransformationAllowed_afterDontTransform_isFalse() {
+    options.dontTransform();
+    assertThat(options.isTransformationAllowed()).isFalse();
+  }
+
+  @Test
+  public void testIsTransformationRequired_afterDontTransform_isFalse() {
+    options.dontTransform();
+    assertThat(options.isTransformationRequired()).isFalse();
+  }
+
+  @Test
+  public void testApplyingDontTransform_overridesTransformations() {
+    options.transform(RuntimeEnvironment.application, transformation);
+    options.dontTransform();
+    assertThat(options.isTransformationSet()).isFalse();
+    assertThat(options.isTransformationRequired()).isFalse();
+    assertThat(options.getTransformations()).isEmpty();
+  }
+
+  @Test
+  public void testApplyingTransformation_overridesDontTransform() {
+    options.dontTransform();
+    options.transform(RuntimeEnvironment.application, transformation);
+
+    assertThat(options.isTransformationAllowed()).isTrue();
+    assertThat(options.isTransformationRequired()).isTrue();
+    assertThat(options.getTransformations()).containsEntry(Bitmap.class, transformation);
+  }
+
+  @Test
+  public void testApplyingOptions_withDontTransform_overridesTransformations() {
+    options.transform(RuntimeEnvironment.application, transformation);
+    TestOptions other = new TestOptions();
+    other.dontTransform();
+
+    options.apply(other);
+
+    assertThat(options.isTransformationAllowed()).isFalse();
+    assertThat(options.isTransformationSet()).isFalse();
+    assertThat(options.isTransformationRequired()).isFalse();
+    assertThat(options.getTransformations()).isEmpty();
+  }
+
+  @Test
+  public void testApplyingOptions_withTransformation_overridesDontTransform() {
+    options.dontTransform();
+    TestOptions other = new TestOptions();
+    other.transform(RuntimeEnvironment.application, transformation);
+
+    options.apply(other);
+
+    assertThat(options.isTransformationAllowed()).isTrue();
+    assertThat(options.isTransformationSet()).isTrue();
+    assertThat(options.isTransformationRequired()).isTrue();
+    assertThat(options.getTransformations()).containsEntry(Bitmap.class, transformation);
+  }
+
+  @Test
+  public void testApplyingDefaultOptions_withDontTransform_retainsDontTransform() {
+    options.dontTransform();
+    options.apply(new TestOptions());
+
+    assertThat(options.isTransformationAllowed()).isFalse();
+    assertThat(options.isTransformationRequired()).isFalse();
+    assertThat(options.getTransformations()).isEmpty();
+  }
+
+  @Test
+  public void testApplyingDefaultOptions_withTransform_retrainsTransform() {
+    options.transform(RuntimeEnvironment.application, transformation);
+    options.apply(new TestOptions());
+
+    assertThat(options.isTransformationAllowed()).isTrue();
+    assertThat(options.isTransformationRequired()).isTrue();
+    assertThat(options.getTransformations()).containsEntry(Bitmap.class, transformation);
+  }
+
+  private static class TestOptions extends BaseRequestOptions<TestOptions> {
+    // Empty.
+  }
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java b/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
index 5e946fcf0..fb73a052b 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/RequestFutureTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
@@ -30,7 +30,7 @@
 import java.util.concurrent.TimeoutException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class RequestFutureTargetTest {
   private int width;
   private int height;
@@ -351,4 +351,4 @@ public void testDoesNotWaitIfGivenTimeOutEqualToZero() throws InterruptedExcepti
 
     verify(waiter, never()).waitForTimeout(eq(future), anyLong());
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
similarity index 72%
rename from library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java
rename to library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index 627aa533f..43af5105f 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request;
 
+import static com.bumptech.glide.tests.Util.isADataSource;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -7,6 +8,7 @@
 import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -14,13 +16,19 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-import android.content.res.Resources;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 
+import com.bumptech.glide.GlideContext;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.Engine;
-import com.bumptech.glide.load.engine.RequestContext;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
@@ -36,10 +44,12 @@
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class SingleRequestTest {
   private RequestHarness harness;
 
@@ -62,7 +72,11 @@
     int overrideWidth = -1;
     int overrideHeight = -1;
     List result = new ArrayList();
-    RequestContext<Number, List> requestContext = mock(RequestContext.class);
+    GlideContext glideContext = mock(GlideContext.class);
+    Key signature = mock(Key.class);
+    Priority priority = Priority.HIGH;
+
+    Map<Class<?>, Transformation<?>>  transformations = new HashMap<>();
 
     public RequestHarness() {
       when(requestCoordinator.canSetImage(any(Request.class))).thenReturn(true);
@@ -71,17 +85,16 @@ public RequestHarness() {
     }
 
     public SingleRequest<List> getRequest() {
-      when(requestContext.getModel()).thenReturn(model);
-      when(requestContext.getTranscodeClass()).thenReturn(List.class);
-      when(requestContext.getErrorDrawable()).thenReturn(errorDrawable);
-      when(requestContext.getPlaceholderDrawable()).thenReturn(placeholderDrawable);
-      when(requestContext.getFallbackDrawable()).thenReturn(fallbackDrawable);
-      when(requestContext.getOverrideWidth()).thenReturn(overrideWidth);
-      when(requestContext.getOverrideHeight()).thenReturn(overrideHeight);
-      when(requestContext.getSizeMultiplier()).thenReturn(1f);
-
+       RequestOptions requestOptions = new RequestOptions()
+        .error(errorDrawable)
+        .placeholder(placeholderDrawable)
+        .fallback(fallbackDrawable)
+        .override(overrideWidth, overrideHeight)
+        .priority(priority)
+        .signature(signature);
       return SingleRequest
-          .obtain(requestContext, target, requestListener, requestCoordinator, engine, factory);
+          .obtain(glideContext, model, List.class, requestOptions, overrideWidth, overrideHeight,
+              priority, target, requestListener, requestCoordinator, engine, factory);
     }
   }
 
@@ -101,11 +114,11 @@ public void testIsNotCompleteBeforeReceivingResource() {
   public void testCanHandleNullResources() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onResourceReady(null);
+    request.onResourceReady(null, DataSource.LOCAL);
 
     assertTrue(request.isFailed());
-    verify(harness.requestListener)
-        .onLoadFailed(any(Number.class), eq(harness.target), anyBoolean());
+    verify(harness.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),
+        eq(harness.target), anyBoolean());
   }
 
   @Test
@@ -113,12 +126,12 @@ public void testCanHandleEmptyResources() {
     SingleRequest<List> request = harness.getRequest();
     when(harness.resource.get()).thenReturn(null);
 
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.REMOTE);
 
     assertTrue(request.isFailed());
     verify(harness.engine).release(eq(harness.resource));
-    verify(harness.requestListener)
-        .onLoadFailed(any(Number.class), eq(harness.target), anyBoolean());
+    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
+        eq(harness.target), anyBoolean());
   }
 
   @Test
@@ -127,19 +140,19 @@ public void testCanHandleNonConformingResources() {
     when(((Resource) (harness.resource)).get())
         .thenReturn("Invalid mocked String, this should be a List");
 
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     assertTrue(request.isFailed());
     verify(harness.engine).release(eq(harness.resource));
-    verify(harness.requestListener)
-        .onLoadFailed(any(Number.class), eq(harness.target), anyBoolean());
+    verify(harness.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
+        eq(harness.target), anyBoolean());
   }
 
   @Test
   public void testIsNotFailedAfterClear() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onResourceReady(null);
+    request.onResourceReady(null, DataSource.DATA_DISK_CACHE);
     request.clear();
 
     assertFalse(request.isFailed());
@@ -175,7 +188,7 @@ public void testIsNotPausedAfterBeginningWhilePaused() {
   public void testIsNotFailedAfterBegin() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onResourceReady(null);
+    request.onResourceReady(null, DataSource.DATA_DISK_CACHE);
     request.begin();
 
     assertFalse(request.isFailed());
@@ -185,7 +198,7 @@ public void testIsNotFailedAfterBegin() {
   public void testIsCompleteAfterReceivingResource() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.LOCAL);
 
     assertTrue(request.isComplete());
   }
@@ -193,7 +206,7 @@ public void testIsCompleteAfterReceivingResource() {
   @Test
   public void testIsNotCompleteAfterClear() {
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.REMOTE);
     request.clear();
 
     assertFalse(request.isComplete());
@@ -231,7 +244,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     harness.requestCoordinator = requestCoordinator;
     SingleRequest<List> request = harness.getRequest();
 
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(requestCoordinator).canSetImage(eq(request));
   }
@@ -247,7 +260,7 @@ public void testIsNotFailedWithoutException() {
   public void testIsFailedAfterException() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
     assertTrue(request.isFailed());
   }
 
@@ -259,14 +272,17 @@ public void testIgnoresOnSizeReadyIfNotWaitingForSize() {
     request.onSizeReady(100, 100);
 
     verify(harness.engine, times(1))
-        .load(eq(harness.requestContext), eq(100), eq(100), any(ResourceCallback.class));
+        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), eq(100), eq(100),
+            eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),
+            eq(harness.transformations), anyBoolean(), any(Options.class),
+            anyBoolean(), any(ResourceCallback.class));
   }
 
   @Test
   public void testIsFailedAfterNoResultAndNullException() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
     assertTrue(request.isFailed());
   }
 
@@ -275,7 +291,10 @@ public void testEngineLoadCancelledOnCancel() {
     Engine.LoadStatus loadStatus = mock(Engine.LoadStatus.class);
 
     when(harness.engine
-        .load(any(RequestContext.class), anyInt(), anyInt(), any(ResourceCallback.class)))
+       .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(), anyInt(),
+          eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),
+          eq(harness.transformations), anyBoolean(), any(Options.class),
+          anyBoolean(), any(ResourceCallback.class)))
         .thenReturn(loadStatus);
 
     SingleRequest<List> request = harness.getRequest();
@@ -291,7 +310,7 @@ public void testEngineLoadCancelledOnCancel() {
   public void testResourceIsRecycledOnClear() {
     SingleRequest<List> request = harness.getRequest();
 
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.REMOTE);
     request.clear();
 
     verify(harness.engine).release(eq(harness.resource));
@@ -321,7 +340,7 @@ public void testErrorDrawableIsSetOnLoadFailed() {
     harness.target = target;
     SingleRequest<List> request = harness.getRequest();
 
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
 
     assertEquals(expected, target.currentPlaceholder);
   }
@@ -395,7 +414,7 @@ public void testIsRunningAfterRunCalled() {
   public void testIsNotRunningAfterComplete() {
     SingleRequest<List> request = harness.getRequest();
     request.begin();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.REMOTE);
 
     assertFalse(request.isRunning());
   }
@@ -404,7 +423,7 @@ public void testIsNotRunningAfterComplete() {
   public void testIsNotRunningAfterFailing() {
     SingleRequest<List> request = harness.getRequest();
     request.begin();
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
 
     assertFalse(request.isRunning());
   }
@@ -422,38 +441,38 @@ public void testIsNotRunningAfterClear() {
   public void testCallsTargetOnResourceReadyIfNoRequestListener() {
     harness.requestListener = null;
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.LOCAL);
 
-    verify(harness.target).onResourceReady(eq(harness.result), any(Transition.class));
+    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());
   }
 
   @Test
   public void testCallsTargetOnResourceReadyIfRequestListenerReturnsFalse() {
     SingleRequest<List> request = harness.getRequest();
     when(harness.requestListener
-        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), anyBoolean(),
+        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), isADataSource(),
             anyBoolean())).thenReturn(false);
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.LOCAL);
 
-    verify(harness.target).onResourceReady(eq(harness.result), any(Transition.class));
+    verify(harness.target).onResourceReady(eq(harness.result), anyTransition());
   }
 
   @Test
   public void testDoesNotCallTargetOnResourceReadyIfRequestListenerReturnsTrue() {
     SingleRequest<List> request = harness.getRequest();
     when(harness.requestListener
-        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), anyBoolean(),
+        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), isADataSource(),
             anyBoolean())).thenReturn(true);
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.REMOTE);
 
-    verify(harness.target, never()).onResourceReady(any(List.class), any(Transition.class));
+    verify(harness.target, never()).onResourceReady(any(List.class), anyTransition());
   }
 
   @Test
   public void testCallsTargetOnExceptionIfNoRequestListener() {
     harness.requestListener = null;
     SingleRequest<List> request = harness.getRequest();
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
 
     verify(harness.target).onLoadFailed(eq(harness.errorDrawable));
   }
@@ -461,10 +480,10 @@ public void testCallsTargetOnExceptionIfNoRequestListener() {
   @Test
   public void testCallsTargetOnExceptionIfRequestListenerReturnsFalse() {
     SingleRequest<List> request = harness.getRequest();
-    when(harness.requestListener
-        .onLoadFailed(any(Number.class), eq(harness.target), anyBoolean()))
+    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
+        eq(harness.target), anyBoolean()))
         .thenReturn(false);
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
 
     verify(harness.target).onLoadFailed(eq(harness.errorDrawable));
   }
@@ -472,11 +491,11 @@ public void testCallsTargetOnExceptionIfRequestListenerReturnsFalse() {
   @Test
   public void testDoesNotCallTargetOnExceptionIfRequestListenerReturnsTrue() {
     SingleRequest<List> request = harness.getRequest();
-    when(harness.requestListener
-        .onLoadFailed(any(Number.class), eq(harness.target), anyBoolean()))
+    when(harness.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
+        eq(harness.target), anyBoolean()))
         .thenReturn(true);
 
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
 
     verify(harness.target, never()).onLoadFailed(any(Drawable.class));
   }
@@ -484,30 +503,30 @@ public void testDoesNotCallTargetOnExceptionIfRequestListenerReturnsTrue() {
   @Test
   public void testRequestListenerIsCalledWithResourceResult() {
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), any(Target.class), anyBoolean(),
+        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithModel() {
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.requestListener)
-        .onResourceReady(any(List.class), eq(harness.model), any(Target.class), anyBoolean(),
+        .onResourceReady(any(List.class), eq(harness.model), isAListTarget(), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithTarget() {
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.requestListener)
-        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), anyBoolean(),
+        .onResourceReady(any(List.class), any(Number.class), eq(harness.target), isADataSource(),
             anyBoolean());
   }
 
@@ -516,11 +535,14 @@ public void testRequestListenerIsCalledWithLoadedFromMemoryIfLoadCompletesSynchr
     final SingleRequest<List> request = harness.getRequest();
 
     when(harness.engine
-        .load(any(RequestContext.class), anyInt(), anyInt(), any(ResourceCallback.class)))
+        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
+            anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
+            any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
+            any(Options.class), anyBoolean(), any(ResourceCallback.class)))
         .thenAnswer(new Answer<Object>() {
           @Override
           public Object answer(InvocationOnMock invocation) throws Throwable {
-            request.onResourceReady(harness.resource);
+            request.onResourceReady(harness.resource, DataSource.MEMORY_CACHE);
             return null;
           }
         });
@@ -528,8 +550,8 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     request.begin();
     request.onSizeReady(100, 100);
     verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), any(Target.class), eq(true),
-            anyBoolean());
+        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),
+            eq(DataSource.MEMORY_CACHE), anyBoolean());
   }
 
   @Test
@@ -537,21 +559,21 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
   testRequestListenerIsCalledWithNotLoadedFromMemoryCacheIfLoadCompletesAsynchronously() {
     SingleRequest<List> request = harness.getRequest();
     request.onSizeReady(100, 100);
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.LOCAL);
 
     verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), any(Target.class), eq(false),
-            anyBoolean());
+        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),
+            eq(DataSource.LOCAL), anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithIsFirstResourceIfNoRequestCoordinator() {
     harness.requestCoordinator = null;
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), any(Target.class), anyBoolean(),
+        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), isADataSource(),
             eq(true));
   }
 
@@ -559,10 +581,10 @@ public void testRequestListenerIsCalledWithIsFirstResourceIfNoRequestCoordinator
   public void testRequestListenerIsCalledWithFirstImageIfRequestCoordinatorReturnsNoResourceSet() {
     SingleRequest<List> request = harness.getRequest();
     when(harness.requestCoordinator.isAnyResourceSet()).thenReturn(false);
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), any(Target.class), anyBoolean(),
+        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(), isADataSource(),
             eq(true));
   }
 
@@ -571,19 +593,19 @@ public void testRequestListenerIsCalledWithFirstImageIfRequestCoordinatorReturns
   testRequestListenerIsCalledWithNotIsFirstRequestIfRequestCoordinatorReturnsResourceSet() {
     SingleRequest<List> request = harness.getRequest();
     when(harness.requestCoordinator.isAnyResourceSet()).thenReturn(true);
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.requestListener)
-        .onResourceReady(eq(harness.result), any(Number.class), any(Target.class), anyBoolean(),
-            eq(false));
+        .onResourceReady(eq(harness.result), any(Number.class), isAListTarget(),
+            isADataSource(), eq(false));
   }
 
   @Test
   public void testTargetIsCalledWithAnimationFromFactory() {
     SingleRequest<List> request = harness.getRequest();
-    Transition<List> transition = mock(Transition.class);
-    when(harness.factory.build(anyBoolean(), anyBoolean())).thenReturn(transition);
-    request.onResourceReady(harness.resource);
+    Transition<List> transition = mockTransition();
+    when(harness.factory.build(any(DataSource.class), anyBoolean())).thenReturn(transition);
+    request.onResourceReady(harness.resource, DataSource.DATA_DISK_CACHE);
 
     verify(harness.target).onResourceReady(eq(harness.result), eq(transition));
   }
@@ -627,8 +649,10 @@ public void testCallsEngineWithOverrideWidthAndHeightIfSet() {
     request.begin();
 
     verify(harness.engine)
-        .load(eq(harness.requestContext), eq(harness.overrideWidth), eq(harness.overrideHeight),
-            any(ResourceCallback.class));
+        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
+            anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
+            any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
+            any(Options.class), anyBoolean(), any(ResourceCallback.class));
   }
 
   @Test
@@ -636,7 +660,7 @@ public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {
     harness.errorDrawable = new ColorDrawable(Color.RED);
     SingleRequest<List> request = harness.getRequest();
     when(harness.requestCoordinator.canNotifyStatusChanged(any(Request.class))).thenReturn(false);
-    request.onLoadFailed();
+    request.onLoadFailed(new GlideException("test"));
 
     verify(harness.target, never()).onLoadFailed(any(Drawable.class));
   }
@@ -647,7 +671,10 @@ public void testCanReRunCancelledRequests() {
         .getSize(any(SizeReadyCallback.class));
 
     when(harness.engine
-        .load(eq(harness.requestContext), eq(100), eq(100), any(ResourceCallback.class)))
+        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), eq(100), eq(100),
+            eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),
+            eq(harness.transformations), anyBoolean(), any(Options.class),
+            anyBoolean(), any(ResourceCallback.class)))
         .thenAnswer(new CallResourceCallback(harness.resource));
     SingleRequest<List> request = harness.getRequest();
 
@@ -655,13 +682,13 @@ public void testCanReRunCancelledRequests() {
     request.cancel();
     request.begin();
 
-    verify(harness.target, times(2)).onResourceReady(eq(harness.result), any(Transition.class));
+    verify(harness.target, times(2)).onResourceReady(eq(harness.result), anyTransition());
   }
 
   @Test
   public void testResourceOnlyReceivesOneGetOnResourceReady() {
     SingleRequest<List> request = harness.getRequest();
-    request.onResourceReady(harness.resource);
+    request.onResourceReady(harness.resource, DataSource.LOCAL);
 
     verify(harness.resource, times(1)).get();
   }
@@ -673,7 +700,29 @@ public void testDoesNotStartALoadIfOnSizeReadyIsCalledAfterCancel() {
     request.onSizeReady(100, 100);
 
     verify(harness.engine, never())
-        .load(any(RequestContext.class), anyInt(), anyInt(), any(ResourceCallback.class));
+        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
+            anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
+            any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
+            any(Options.class), anyBoolean(), any(ResourceCallback.class));
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T> Transition<T> mockTransition() {
+    return mock(Transition.class);
+  }
+
+  @SuppressWarnings("unchecked")
+  private static Target<List> isAListTarget() {
+    return isA(Target.class);
+  }
+
+  private static GlideException isAGlideException() {
+    return isA(GlideException.class);
+  }
+
+  @SuppressWarnings("unchecked")
+  private static <T> Transition<T> anyTransition() {
+    return any(Transition.class);
   }
 
   private static class CallResourceCallback implements Answer {
@@ -689,7 +738,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
       ResourceCallback cb =
           (ResourceCallback) invocationOnMock.getArguments()[invocationOnMock.getArguments().length
               - 1];
-      cb.onResourceReady(resource);
+      cb.onResourceReady(resource, DataSource.REMOTE);
       return null;
     }
   }
@@ -712,12 +761,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
     }
   }
 
-  private void mockContextToReturn(int resourceId, Drawable drawable) {
-    Resources resources = mock(Resources.class);
-    when(harness.requestContext.getResources()).thenReturn(resources);
-    when(resources.getDrawable(eq(resourceId))).thenReturn(drawable);
-  }
-
   private static class MockTarget implements Target<List> {
     private Drawable currentPlaceholder;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java b/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
rename to library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
index 1bf976005..8a13ace4b 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/AppWidgetTargetTest.java
@@ -23,7 +23,7 @@
 import org.robolectric.shadows.ShadowAppWidgetManager;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = AppWidgetTargetTest
+@Config(manifest = Config.NONE, sdk = 18, shadows = AppWidgetTargetTest
     .UpdateShadowAppWidgetManager.class)
 public class AppWidgetTargetTest {
 
@@ -144,4 +144,4 @@ public void updateAppWidget(ComponentName componentName, RemoteViews views) {
       updatedRemoteViews = views;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
similarity index 95%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
index 116c4baed..7689e0d9a 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/BitmapImageViewTargetTest.java
@@ -14,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class BitmapImageViewTargetTest {
 
   private ImageView view;
@@ -32,4 +32,4 @@ public void testSetsBitmapOnViewInSetResource() {
     target.setResource(bitmap);
     assertEquals(bitmap, ((BitmapDrawable) view.getDrawable()).getBitmap());
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java b/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
index f6e629fbe..238151560 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetFactoryTest.java
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ImageViewTargetFactoryTest {
   private ImageViewTargetFactory factory;
   private ImageView view;
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
index 7c85fc214..c734c8baf 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/ImageViewTargetTest.java
@@ -23,7 +23,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ImageViewTargetTest {
 
   private ImageView view;
@@ -116,4 +116,4 @@ protected void setResource(Drawable resource) {
       this.resource = resource;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/NotificationTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/NotificationTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
index 48e988be5..1a0dfc8d1 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/NotificationTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/NotificationTargetTest.java
@@ -23,7 +23,7 @@
 import org.robolectric.shadows.ShadowNotificationManager;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = NotificationTargetTest
+@Config(manifest = Config.NONE, sdk = 18, shadows = NotificationTargetTest
     .UpdateShadowNotificationManager.class)
 public class NotificationTargetTest {
 
@@ -98,4 +98,4 @@ public void notify(int notificationId, Notification notification) {
       updatedNotification = notification;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
similarity index 96%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
index bfff02fe7..5a6674534 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/PreloadTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/PreloadTargetTest.java
@@ -16,7 +16,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class PreloadTargetTest {
 
   @Mock RequestManager requestManager;
@@ -46,4 +46,4 @@ public void testClearsTargetInOnResourceReady() {
 
     verify(requestManager).clear(eq(target));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java
index 1363b4057..4ceda7c64 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/SimpleTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/SimpleTargetTest.java
@@ -63,4 +63,4 @@ public void onResourceReady(Object resource, Transition<? super Object> transiti
       }
     };
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/request/target/ViewTargetTest.java
rename to library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
index e6ac0773d..3debccfcd 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/target/ViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
@@ -1,8 +1,8 @@
 package com.bumptech.glide.request.target;
 
-import static com.google.common.truth.Truth.assertThat;
 import static android.view.ViewGroup.LayoutParams;
 import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.anyInt;
@@ -41,7 +41,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18, shadows = { ViewTargetTest.SizedShadowView.class,
+@Config(manifest = Config.NONE, sdk = 18, shadows = { ViewTargetTest.SizedShadowView.class,
     ViewTargetTest.PreDrawShadowViewTreeObserver.class })
 public class ViewTargetTest {
   private View view;
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
similarity index 80%
rename from library/src/androidTest/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
rename to library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
index a1f3cb426..b6fa33ac8 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
@@ -6,6 +6,8 @@
 
 import android.graphics.drawable.Drawable;
 
+import com.bumptech.glide.load.DataSource;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -13,7 +15,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class DrawableCrossFadeFactoryTest {
 
   private DrawableCrossFadeFactory factory;
@@ -28,18 +30,18 @@ public void setUp() {
   @Test
   public void testReturnsNoAnimationIfFromMemoryCache() {
     assertEquals(NoTransition.<Drawable>get(),
-        factory.build(true /*isFromMemoryCache*/, true /*isFirstResource*/));
+        factory.build(DataSource.MEMORY_CACHE, true /*isFirstResource*/));
   }
 
   @Test
   public void testReturnsReturnsAnimationIfNotFromMemoryCacheAndIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
-        factory.build(false /*isFromMemoryCache*/, true /*isFirstResource*/));
+        factory.build(DataSource.DATA_DISK_CACHE, true /*isFirstResource*/));
   }
 
   @Test
   public void testReturnsAnimationIfNotFromMemocyCacheAndNotIsFirstResource() {
     assertNotEquals(NoTransition.<Drawable>get(),
-        factory.build(false /*isFromMemoryCache*/, false /*isFirstResource*/));
+        factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
rename to library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
index 822bbf876..78861713d 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
@@ -22,7 +22,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class DrawableCrossFadeViewAnimationTest {
   private CrossFadeHarness harness;
 
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewAnimationTest.java b/library/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
rename to library/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
index 43482da11..54ebaff3c 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ViewAnimationTest {
   private ViewTransition<Object> viewAnimation;
   private ViewAdapter adapter;
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java b/library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
rename to library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
index 0636a15a8..52f429f4e 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyAnimationTest.java
@@ -20,7 +20,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ViewPropertyAnimationTest {
   private ViewPropertyTransition.Animator animator;
   private ViewPropertyTransition<Object> animation;
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java b/library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
similarity index 80%
rename from library/src/androidTest/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
rename to library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
index 511735e61..2d680b57e 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/ViewPropertyViewTransitionAnimationFactoryTest.java
@@ -4,6 +4,8 @@
 import static org.junit.Assert.assertNotEquals;
 import static org.mockito.Mockito.mock;
 
+import com.bumptech.glide.load.DataSource;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -23,18 +25,18 @@ public void setUp() {
   @Test
   public void testReturnsNoAnimationIfFromMemoryCache() {
     assertEquals(NoTransition.get(),
-        factory.build(true /*isFromMemoryCache*/, true /*isFirstResource*/));
+        factory.build(DataSource.MEMORY_CACHE, true /*isFirstResource*/));
   }
 
   @Test
   public void testReturnsNoAnimationIfNotFirstResource() {
     assertEquals(NoTransition.get(),
-        factory.build(false /*isFromMemoryCache*/, false /*isFirstResource*/));
+        factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/));
   }
 
   @Test
   public void testReturnsAnimationIfNotFromMemoryCacheAndFirstResource() {
     assertNotEquals(NoTransition.get(),
-        factory.build(false /*isFromMemoryCache*/, true /*isFirstResource*/));
+        factory.build(DataSource.DATA_DISK_CACHE, true /*isFirstResource*/));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java b/library/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
similarity index 89%
rename from library/src/androidTest/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
rename to library/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
index f4d0eb7f3..d7f433788 100644
--- a/library/src/androidTest/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
@@ -12,6 +12,8 @@
 import android.view.View;
 import android.view.animation.Animation;
 
+import com.bumptech.glide.load.DataSource;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -34,7 +36,7 @@ public void setUp() {
   @Test
   public void testFactoryReturnsNoAnimationIfFromMemoryCache() {
     Transition<Object> animation =
-        factory.build(true /*isFromMemoryCache*/, true /*isFirstResource*/);
+        factory.build(DataSource.MEMORY_CACHE, true /*isFirstResource*/);
     assertEquals(NoTransition.get(), animation);
     verify(viewTransitionAnimationFactory, never()).build(RuntimeEnvironment.application);
   }
@@ -42,7 +44,7 @@ public void testFactoryReturnsNoAnimationIfFromMemoryCache() {
   @Test
   public void testFactoryReturnsNoAnimationIfNotFirstResource() {
     Transition<Object> animation =
-        factory.build(false /*isFromMemoryCache*/, false /*isFirstResource*/);
+        factory.build(DataSource.DATA_DISK_CACHE, false /*isFirstResource*/);
     assertEquals(NoTransition.get(), animation);
     verify(viewTransitionAnimationFactory, never()).build(RuntimeEnvironment.application);
   }
@@ -50,7 +52,7 @@ public void testFactoryReturnsNoAnimationIfNotFirstResource() {
   @Test
   public void testFactoryReturnsActualAnimationIfNotIsFromMemoryCacheAndIsFirstResource() {
     Transition<Object> transition =
-        factory.build(false /*isFromMemoryCache*/, true /*isFirstResource*/);
+        factory.build(DataSource.DATA_DISK_CACHE, true /*isFirstResource*/);
 
     Animation animation = mock(Animation.class);
     when(viewTransitionAnimationFactory.build(any(Context.class))).thenReturn(animation);
@@ -62,4 +64,4 @@ public void testFactoryReturnsActualAnimationIfNotIsFromMemoryCacheAndIsFirstRes
 
     verify(view).startAnimation(eq(animation));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java b/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
similarity index 71%
rename from library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java
rename to library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
index b5b206618..2d92de3d4 100644
--- a/library/src/androidTest/java/com/bumptech/glide/resize/load/ExifTest.java
+++ b/library/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
@@ -17,7 +17,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ExifTest {
 
   private LruByteArrayPool byteArrayPool;
@@ -30,7 +30,7 @@ private void assertOrientation(String filePrefix, int expectedOrientation) {
     InputStream is = null;
     try {
       is = open(filePrefix + "_" + expectedOrientation + ".jpg");
-      assertEquals(new ImageHeaderParser(is, new LruByteArrayPool()).getOrientation(),
+      assertEquals(new ImageHeaderParser(is, byteArrayPool).getOrientation(),
           expectedOrientation);
     } catch (IOException e) {
       throw new RuntimeException(e);
@@ -52,8 +52,8 @@ public void setUp() {
 
   @Test
   public void testIssue387() throws IOException {
-      InputStream is = TestResourceUtil.openResource(getClass(), "issue387_rotated_jpeg.jpg");
-      assertThat(new ImageHeaderParser(is, byteArrayPool).getOrientation()).isEqualTo(6);
+    InputStream is = TestResourceUtil.openResource(getClass(), "issue387_rotated_jpeg.jpg");
+    assertThat(new ImageHeaderParser(is, byteArrayPool).getOrientation()).isEqualTo(6);
   }
 
   @Test
@@ -69,4 +69,16 @@ public void testPortrait() throws IOException {
       assertOrientation("Portrait", i);
     }
   }
+
+  @Test
+  public void testHandlesInexactSizesInByteArrayPools() {
+    for (int i = 1; i <= 8; i++) {
+      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
+      assertOrientation("Portrait", i);
+    }
+    for (int i = 1; i <= 8; i++) {
+      byteArrayPool.put(new byte[LruByteArrayPool.STANDARD_BUFFER_SIZE_BYTES]);
+      assertOrientation("Landscape", i);
+    }
+  }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java b/library/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
similarity index 95%
rename from library/src/androidTest/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
rename to library/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
index f39a71bc8..3d444fd17 100644
--- a/library/src/androidTest/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
+++ b/library/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
@@ -16,7 +16,7 @@
 import java.security.NoSuchAlgorithmException;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ApplicationVersionSignatureTest {
 
   @After
@@ -37,4 +37,4 @@ public void testKeyForSignatureIsTheSameAcrossCallsInTheSamePackage()
     Key second = ApplicationVersionSignature.obtain(RuntimeEnvironment.application);
     KeyAssertions.assertSame(first, second);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java b/library/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
rename to library/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
index 00fa20ef8..46b41c9ba 100644
--- a/library/src/androidTest/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
+++ b/library/src/test/java/com/bumptech/glide/signature/MediaStoreSignatureTest.java
@@ -47,4 +47,4 @@ public void testSignaturesAreTheSameIfAllArgsAreTheSame()
 
     KeyAssertions.assertSame(first, second);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/signature/ObjectKeyTest.java b/library/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/signature/ObjectKeyTest.java
rename to library/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java
index d0d3222f9..2012092af 100644
--- a/library/src/androidTest/java/com/bumptech/glide/signature/ObjectKeyTest.java
+++ b/library/src/test/java/com/bumptech/glide/signature/ObjectKeyTest.java
@@ -17,4 +17,4 @@ public void testEquals() throws NoSuchAlgorithmException {
     KeyAssertions.assertSame(new ObjectKey(object), new ObjectKey(object));
     KeyAssertions.assertDifferent(new ObjectKey(object), new ObjectKey(new Object()));
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/signature/StringSignatureTest.java b/library/src/test/java/com/bumptech/glide/signature/StringSignatureTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/signature/StringSignatureTest.java
rename to library/src/test/java/com/bumptech/glide/signature/StringSignatureTest.java
index 1d68b8196..463d17cca 100644
--- a/library/src/androidTest/java/com/bumptech/glide/signature/StringSignatureTest.java
+++ b/library/src/test/java/com/bumptech/glide/signature/StringSignatureTest.java
@@ -29,4 +29,4 @@ public void testStringSignatureIsEqualIfStringIsTheSame()
 
     KeyAssertions.assertSame(first, second);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/tests/BackgroundUtil.java b/library/src/test/java/com/bumptech/glide/tests/BackgroundUtil.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/tests/BackgroundUtil.java
rename to library/src/test/java/com/bumptech/glide/tests/BackgroundUtil.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/tests/ContentResolverShadow.java b/library/src/test/java/com/bumptech/glide/tests/ContentResolverShadow.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/tests/ContentResolverShadow.java
rename to library/src/test/java/com/bumptech/glide/tests/ContentResolverShadow.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/tests/GlideShadowLog.java b/library/src/test/java/com/bumptech/glide/tests/GlideShadowLog.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/tests/GlideShadowLog.java
rename to library/src/test/java/com/bumptech/glide/tests/GlideShadowLog.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/tests/GlideShadowLooper.java b/library/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/tests/GlideShadowLooper.java
rename to library/src/test/java/com/bumptech/glide/tests/GlideShadowLooper.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/tests/KeyAssertions.java b/library/src/test/java/com/bumptech/glide/tests/KeyAssertions.java
similarity index 100%
rename from library/src/androidTest/java/com/bumptech/glide/tests/KeyAssertions.java
rename to library/src/test/java/com/bumptech/glide/tests/KeyAssertions.java
diff --git a/library/src/androidTest/java/com/bumptech/glide/tests/Util.java b/library/src/test/java/com/bumptech/glide/tests/Util.java
similarity index 78%
rename from library/src/androidTest/java/com/bumptech/glide/tests/Util.java
rename to library/src/test/java/com/bumptech/glide/tests/Util.java
index 42c77539d..ab333bec8 100644
--- a/library/src/androidTest/java/com/bumptech/glide/tests/Util.java
+++ b/library/src/test/java/com/bumptech/glide/tests/Util.java
@@ -1,11 +1,16 @@
 package com.bumptech.glide.tests;
 
 import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.RETURNS_DEFAULTS;
 
+import android.graphics.Bitmap;
 import android.os.Build;
 
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.data.DataFetcher;
+import com.bumptech.glide.load.engine.Resource;
 
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -19,14 +24,19 @@
 import java.io.OutputStream;
 import java.security.MessageDigest;
 
+// FIXME move to testutil module
 public class Util {
 
   public static String getExpectedClassId(Class clazz) {
     return clazz.getSimpleName() + "." + clazz.getPackage().getName();
   }
 
-  public static void assertClassHasValidId(Class clazz, String id) {
-    assertEquals(getExpectedClassId(clazz), id);
+  public static DataSource isADataSource() {
+    return isA(DataSource.class);
+  }
+
+  public static Resource<?> anyResource() {
+    return any(Resource.class);
   }
 
   public static boolean isWindows() {
@@ -112,4 +122,15 @@ public Void answer(InvocationOnMock invocationOnMock) throws Throwable {
       return null;
     }
   }
+
+  public static class CreateBitmap implements Answer<Bitmap> {
+
+    @Override
+    public Bitmap answer(InvocationOnMock invocation) throws Throwable {
+      int width = (Integer) invocation.getArguments()[0];
+      int height = (Integer) invocation.getArguments()[1];
+      Bitmap.Config config = (Bitmap.Config) invocation.getArguments()[2];
+      return Bitmap.createBitmap(width, height, config);
+    }
+  }
 }
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java b/library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
rename to library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
index 01f1fe73b..84d01d0b0 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
@@ -18,7 +18,7 @@
 import java.io.InputStream;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ContentLengthInputStreamTest {
   @Mock InputStream wrapped;
 
@@ -131,4 +131,4 @@ public void testReadBytes_whenReturnsLessThanZeroWithInvalidLength_doesNotThrow(
     when(wrapped.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
     is.read(new byte[10], 0, 0);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java b/library/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
rename to library/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
index dbe5e6db7..8a07d5a27 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/ExceptionCatchingInputStreamTest.java
@@ -172,4 +172,4 @@ public void testCanObtainNewStreamFromPool() throws IOException {
     int read = fromPool.read();
     assertEquals(1, read);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java b/library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
similarity index 92%
rename from library/src/androidTest/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
rename to library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
index 530f85967..89cab6985 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class FixedPreloadSizeProviderTest {
 
   @Test
@@ -21,4 +21,4 @@ public void testReturnsGivenSize() {
 
     assertThat(size).asList().containsExactly(width, height);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java b/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
similarity index 99%
rename from library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
rename to library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
index 18ffacd80..16d5d0187 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
@@ -167,4 +167,4 @@ public void testReturnsMarkLimitAsAvailable_whenMarkIsSet_withMarkLessThanStream
 
     assertEquals(expected, is.available());
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/UtilTest.java b/library/src/test/java/com/bumptech/glide/util/UtilTest.java
similarity index 97%
rename from library/src/androidTest/java/com/bumptech/glide/util/UtilTest.java
rename to library/src/test/java/com/bumptech/glide/util/UtilTest.java
index 486f8b810..64f89ff8a 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/UtilTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/UtilTest.java
@@ -10,7 +10,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class UtilTest {
 
   @Test
@@ -71,4 +71,4 @@ public void testReturnsLargestSizeForNullConfig() {
     int size = Util.getBitmapByteSize(width, height, null);
     assertEquals(width * height * 4, size);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/androidTest/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java b/library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
similarity index 98%
rename from library/src/androidTest/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
rename to library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
index bbe940a37..81ed47525 100644
--- a/library/src/androidTest/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
@@ -14,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class ViewPreloadSizeProviderTest {
 
   private View view;
@@ -88,4 +88,4 @@ public void testCanObtainSizeFromViewWhenGivenViewInConstructor() {
     int[] size = provider.getPreloadSize(new Object(), 0, 0);
     assertThat(size).asList().containsExactly(width, height);
   }
-}
\ No newline at end of file
+}
diff --git a/library/src/test/java/javax/microedition/khronos/opengles/GL.java b/library/src/test/java/javax/microedition/khronos/opengles/GL.java
new file mode 100644
index 000000000..40792a85f
--- /dev/null
+++ b/library/src/test/java/javax/microedition/khronos/opengles/GL.java
@@ -0,0 +1,9 @@
+package javax.microedition.khronos.opengles;
+
+/**
+ * TODO: Figure out why this is necessary and remove it.
+ * See: https://github.com/robolectric/robolectric-gradle-plugin/issues/145
+ */
+public interface GL {
+}
+
diff --git a/library/src/androidTest/resources/exif-orientation-examples b/library/src/test/resources/exif-orientation-examples
similarity index 100%
rename from library/src/androidTest/resources/exif-orientation-examples
rename to library/src/test/resources/exif-orientation-examples
diff --git a/library/src/androidTest/resources/issue387_rotated_jpeg.jpg b/library/src/test/resources/issue387_rotated_jpeg.jpg
similarity index 100%
rename from library/src/androidTest/resources/issue387_rotated_jpeg.jpg
rename to library/src/test/resources/issue387_rotated_jpeg.jpg
diff --git a/library/src/androidTest/resources/org.robolectric.Config.properties b/library/src/test/resources/org.robolectric.Config.properties
similarity index 100%
rename from library/src/androidTest/resources/org.robolectric.Config.properties
rename to library/src/test/resources/org.robolectric.Config.properties
diff --git a/library/src/androidTest/resources/short_exif_sample.jpg b/library/src/test/resources/short_exif_sample.jpg
similarity index 100%
rename from library/src/androidTest/resources/short_exif_sample.jpg
rename to library/src/test/resources/short_exif_sample.jpg
diff --git a/library/src/androidTest/resources/test.gif b/library/src/test/resources/test.gif
similarity index 100%
rename from library/src/androidTest/resources/test.gif
rename to library/src/test/resources/test.gif
diff --git a/samples/flickr/build.gradle b/samples/flickr/build.gradle
index 85128997d..aec235f5e 100644
--- a/samples/flickr/build.gradle
+++ b/samples/flickr/build.gradle
@@ -2,9 +2,13 @@ apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':library')
+    compile(project(':integration:recyclerview')) {
+        transitive = false
+    }
     compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
     compile "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
     compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
+    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
 }
 
 android {
@@ -13,7 +17,7 @@ android {
 
     defaultConfig {
         applicationId 'com.bumptech.glide.samples.flickr'
-        minSdkVersion MIN_SDK_VERSION as int
+        minSdkVersion 11
         targetSdkVersion TARGET_SDK_VERSION as int
 
         versionCode 1
diff --git a/samples/flickr/flickr.iml b/samples/flickr/flickr.iml
deleted file mode 100644
index 93e129ce3..000000000
--- a/samples/flickr/flickr.iml
+++ /dev/null
@@ -1,96 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":samples:flickr" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="glide-parent.samples" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":samples:flickr" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="appcompat-v7-21.0.3" level="project" />
-    <orderEntry type="library" exported="" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="library" exported="" name="support-v4-21.0.3" level="project" />
-    <orderEntry type="library" exported="" name="library-1.0.10" level="project" />
-    <orderEntry type="module" module-name="library" exported="" />
-    <orderEntry type="module" module-name="disklrucache" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/samples/flickr/lint.xml b/samples/flickr/lint.xml
new file mode 100644
index 000000000..5c710c8c7
--- /dev/null
+++ b/samples/flickr/lint.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Not supported by all build systems -->
+    <issue id="GradleOverrides" severity="ignore" />
+    <issue id="IconMissingDensityFolder" severity="ignore"/>
+</lint>
diff --git a/samples/flickr/src/main/AndroidManifest.xml b/samples/flickr/src/main/AndroidManifest.xml
index b869526c7..1a6e4a6ff 100644
--- a/samples/flickr/src/main/AndroidManifest.xml
+++ b/samples/flickr/src/main/AndroidManifest.xml
@@ -7,8 +7,7 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
     <uses-sdk android:minSdkVersion="10"
-      android:targetSdkVersion="19" />
-
+      android:targetSdkVersion="22" />
 
     <application
         android:label="@string/app_name"
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
index c9ecf2f86..de9b10705 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
@@ -1,31 +1,33 @@
 package com.bumptech.glide.samples.flickr;
 
-import static com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;
+import static com.bumptech.glide.GenericTransitionOptions.withNoTransition;
 import static com.bumptech.glide.request.RequestOptions.centerCropTransform;
 import static com.bumptech.glide.request.RequestOptions.diskCacheStrategyOf;
 import static com.bumptech.glide.request.RequestOptions.priorityOf;
 
 import android.content.Intent;
+import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
+import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.BaseAdapter;
-import android.widget.GridView;
 import android.widget.ImageView;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.ListPreloader;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.samples.flickr.api.Api;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.util.FixedPreloadSizeProvider;
 
-import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -42,11 +44,12 @@
   private PhotoAdapter adapter;
   private List<Photo> currentPhotos;
   private int photoSize;
-  private GridView grid;
+  private RecyclerView grid;
   private boolean thumbnail;
   private RequestBuilder<Drawable> fullRequest;
   private RequestBuilder<Drawable> thumbnailRequest;
   private RequestBuilder<Drawable> preloadRequest;
+  private GridLayoutManager layoutManager;
 
   public static FlickrPhotoGrid newInstance(int size, int preloadCount, boolean thumbnail) {
     FlickrPhotoGrid photoGrid = new FlickrPhotoGrid();
@@ -67,31 +70,53 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
     fullRequest = Glide.with(this)
         .asDrawable()
-        .transition(withCrossFade(R.anim.fade_in, 150))
+        .transition(withNoTransition())
         .apply(centerCropTransform(getActivity()));
 
     thumbnailRequest = Glide.with(this)
         .asDrawable()
-        .transition(withCrossFade(R.anim.fade_in, 150))
+        .transition(withNoTransition())
         .apply(diskCacheStrategyOf(DiskCacheStrategy.DATA)
             .centerCrop(getActivity())
-            .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE));
+            .override(Api.SQUARE_THUMB_SIZE));
 
     preloadRequest =
         thumbnail ? thumbnailRequest.clone().apply(priorityOf(Priority.HIGH)) : fullRequest;
 
     final View result = inflater.inflate(R.layout.flickr_photo_grid, container, false);
 
-    grid = (GridView) result.findViewById(R.id.images);
-    grid.setColumnWidth(photoSize);
+    final int gridMargin = getResources().getDimensionPixelOffset(R.dimen.grid_margin);
+    int spanCount = getResources().getDisplayMetrics().widthPixels / (photoSize + (2 * gridMargin));
+    grid = (RecyclerView) result.findViewById(R.id.flickr_photo_grid);
+    layoutManager = new GridLayoutManager(getActivity(), spanCount);
+    grid.setLayoutManager(layoutManager);
+
+    grid.addItemDecoration(new RecyclerView.ItemDecoration() {
+      @Override
+      public void getItemOffsets(Rect outRect, View view, RecyclerView parent,
+          RecyclerView.State state) {
+        outRect.set(gridMargin, gridMargin, gridMargin, gridMargin);
+      }
+    });
+    grid.setRecyclerListener(new RecyclerView.RecyclerListener() {
+      @Override
+      public void onViewRecycled(RecyclerView.ViewHolder holder) {
+        PhotoViewHolder photoViewHolder = (PhotoViewHolder) holder;
+        Glide.with(FlickrPhotoGrid.this).clear(photoViewHolder.imageView);
+      }
+    });
+
+    int heightCount = getResources().getDisplayMetrics().heightPixels / photoSize;
+    grid.getRecycledViewPool().setMaxRecycledViews(0, spanCount * heightCount * 2);
+    grid.setItemViewCacheSize(0);
     adapter = new PhotoAdapter();
     grid.setAdapter(adapter);
 
-    final FixedPreloadSizeProvider<Photo> preloadSizeProvider =
-        new FixedPreloadSizeProvider<Photo>(photoSize, photoSize);
-    final ListPreloader<Photo> preloader = new ListPreloader<Photo>(Glide.with(this), adapter,
+    FixedPreloadSizeProvider<Photo> preloadSizeProvider =
+        new FixedPreloadSizeProvider<>(photoSize, photoSize);
+    RecyclerViewPreloader<Photo> preloader = new RecyclerViewPreloader<>(Glide.with(this), adapter,
         preloadSizeProvider, args.getInt(PRELOAD_KEY));
-    grid.setOnScrollListener(preloader);
+    grid.addOnScrollListener(preloader);
 
     if (currentPhotos != null) {
       adapter.setPhotos(currentPhotos);
@@ -99,7 +124,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
     if (savedInstanceState != null) {
       int index = savedInstanceState.getInt(STATE_POSITION_INDEX);
-      grid.setSelection(index);
+      grid.scrollToPosition(index);
     }
 
     return result;
@@ -109,7 +134,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
   public void onSaveInstanceState(Bundle outState) {
     super.onSaveInstanceState(outState);
     if (grid != null) {
-      int index = grid.getFirstVisiblePosition();
+      int index = layoutManager.findFirstVisibleItemPosition();
       outState.putInt(STATE_POSITION_INDEX, index);
     }
   }
@@ -122,10 +147,10 @@ public void onPhotosUpdated(List<Photo> photos) {
     }
   }
 
-  private class PhotoAdapter extends BaseAdapter implements
+  private class PhotoAdapter extends RecyclerView.Adapter<PhotoViewHolder> implements
       ListPreloader.PreloadModelProvider<Photo> {
-    private List<Photo> photos = new ArrayList<Photo>(0);
     private final LayoutInflater inflater;
+    private List<Photo> photos = Collections.emptyList();
 
     public PhotoAdapter() {
       this.inflater = LayoutInflater.from(getActivity());
@@ -137,46 +162,44 @@ public void setPhotos(List<Photo> photos) {
     }
 
     @Override
-    public int getCount() {
-      return photos.size();
-    }
-
-    @Override
-    public Object getItem(int i) {
-      return photos.get(i);
+    public int getItemViewType(int position) {
+      return 0;
     }
 
     @Override
-    public long getItemId(int i) {
-      return 0;
+    public PhotoViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+      View view = inflater.inflate(R.layout.flickr_photo_grid_item, parent, false);
+      ViewGroup.LayoutParams params = view.getLayoutParams();
+      params.width = photoSize;
+      params.height = photoSize;
+      return new PhotoViewHolder(view);
     }
 
     @Override
-    public View getView(int position, View view, ViewGroup container) {
+    public void onBindViewHolder(PhotoViewHolder holder, int position) {
       final Photo current = photos.get(position);
-      final ImageView imageView;
-      if (view == null) {
-        imageView = (ImageView) inflater.inflate(R.layout.flickr_photo_grid_item, container, false);
-        ViewGroup.LayoutParams params = imageView.getLayoutParams();
-        params.width = photoSize;
-        params.height = photoSize;
-      } else {
-        imageView = (ImageView) view;
-      }
 
       fullRequest.load(current)
           .thumbnail(thumbnail ? thumbnailRequest.load(current) : null)
-          .into(imageView);
+          .into(holder.imageView);
 
-      imageView.setOnClickListener(new View.OnClickListener() {
+      holder.imageView.setOnClickListener(new View.OnClickListener() {
         @Override
         public void onClick(View view) {
           Intent intent = FullscreenActivity.getIntent(getActivity(), current);
           startActivity(intent);
         }
       });
+    }
 
-      return imageView;
+    @Override
+    public long getItemId(int i) {
+      return RecyclerView.NO_ID;
+    }
+
+    @Override
+    public int getItemCount() {
+      return photos.size();
     }
 
     @Override
@@ -189,4 +212,13 @@ public RequestBuilder getPreloadRequestBuilder(Photo item) {
       return preloadRequest.load(item);
     }
   }
+
+  private static class PhotoViewHolder extends RecyclerView.ViewHolder {
+    private final ImageView imageView;
+
+    public PhotoViewHolder(View itemView) {
+      super(itemView);
+      imageView = (ImageView) itemView;
+    }
+  }
 }
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
index 07ca4249a..8c4496714 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoList.java
@@ -10,23 +10,25 @@
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.BaseAdapter;
 import android.widget.ImageView;
-import android.widget.ListView;
 import android.widget.TextView;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.ListPreloader;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.samples.flickr.api.Api;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.util.ViewPreloadSizeProvider;
 
-import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -38,10 +40,11 @@
   private static final String STATE_POSITION_OFFSET = "state_position_offset";
   private FlickrPhotoListAdapter adapter;
   private List<Photo> currentPhotos;
-  private ListView list;
+  private RecyclerView list;
   private RequestBuilder<Drawable> fullRequest;
   private RequestBuilder<Drawable> thumbRequest;
   private ViewPreloadSizeProvider<Photo> preloadSizeProvider;
+  private LinearLayoutManager layoutManager;
 
   public static FlickrPhotoList newInstance() {
     return new FlickrPhotoList();
@@ -59,34 +62,47 @@ public void onPhotosUpdated(List<Photo> photos) {
   public View onCreateView(LayoutInflater inflater, ViewGroup container,
       Bundle savedInstanceState) {
     final View result = inflater.inflate(R.layout.flickr_photo_list, container, false);
-    list = (ListView) result.findViewById(R.id.flickr_photo_list);
+
+    list = (RecyclerView) result.findViewById(R.id.flickr_photo_list);
+    layoutManager = new LinearLayoutManager(getActivity());
+    list.setLayoutManager(layoutManager);
     adapter = new FlickrPhotoListAdapter();
     list.setAdapter(adapter);
 
-    preloadSizeProvider = new ViewPreloadSizeProvider<Photo>();
-    ListPreloader<Photo> preloader = new ListPreloader<Photo>(Glide.with(this), adapter,
+    preloadSizeProvider = new ViewPreloadSizeProvider<>();
+    RecyclerViewPreloader<Photo> preloader = new RecyclerViewPreloader<>(Glide.with(this), adapter,
         preloadSizeProvider, PRELOAD_AHEAD_ITEMS);
-    list.setOnScrollListener(preloader);
+    list.addOnScrollListener(preloader);
+    list.setItemViewCacheSize(0);
 
     if (currentPhotos != null) {
       adapter.setPhotos(currentPhotos);
     }
 
-    fullRequest = Glide.with(FlickrPhotoList.this)
+    final RequestManager requestManager = Glide.with(this);
+    fullRequest = requestManager
         .asDrawable()
         .apply(centerCropTransform(getActivity())
             .placeholder(new ColorDrawable(Color.GRAY)));
 
-    thumbRequest = Glide.with(FlickrPhotoList.this)
+    thumbRequest = requestManager
         .asDrawable()
         .apply(diskCacheStrategyOf(DiskCacheStrategy.DATA)
-            .override(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE))
+            .override(Api.SQUARE_THUMB_SIZE))
         .transition(withCrossFade());
 
+    list.setRecyclerListener(new RecyclerView.RecyclerListener() {
+      @Override
+      public void onViewRecycled(RecyclerView.ViewHolder holder) {
+        PhotoTitleViewHolder vh = (PhotoTitleViewHolder) holder;
+        requestManager.clear(vh.imageView);
+      }
+    });
+
     if (savedInstanceState != null) {
       int index = savedInstanceState.getInt(STATE_POSITION_INDEX);
       int offset = savedInstanceState.getInt(STATE_POSITION_OFFSET);
-      list.setSelectionFromTop(index, offset);
+      layoutManager.scrollToPositionWithOffset(index, offset);
     }
 
     return result;
@@ -96,7 +112,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
   public void onSaveInstanceState(Bundle outState) {
     super.onSaveInstanceState(outState);
     if (list != null) {
-      int index = list.getFirstVisiblePosition();
+      int index = layoutManager.findFirstVisibleItemPosition();
       View topView = list.getChildAt(0);
       int offset = topView != null ? topView.getTop() : 0;
       outState.putInt(STATE_POSITION_INDEX, index);
@@ -104,20 +120,10 @@ public void onSaveInstanceState(Bundle outState) {
     }
   }
 
-  private static class ViewHolder {
-    private final TextView titleText;
-    private final ImageView imageView;
-
-    public ViewHolder(ImageView imageView, TextView titleText) {
-      this.imageView = imageView;
-      this.titleText = titleText;
-    }
-  }
-
-  private class FlickrPhotoListAdapter extends BaseAdapter
+  private class FlickrPhotoListAdapter extends RecyclerView.Adapter<PhotoTitleViewHolder>
       implements ListPreloader.PreloadModelProvider<Photo> {
     private final LayoutInflater inflater;
-    private List<Photo> photos = new ArrayList<Photo>(0);
+    private List<Photo> photos = Collections.emptyList();
 
     public FlickrPhotoListAdapter() {
       this.inflater = LayoutInflater.from(getActivity());
@@ -129,40 +135,21 @@ public void setPhotos(List<Photo> photos) {
     }
 
     @Override
-    public int getCount() {
-      return photos.size();
-    }
-
-    @Override
-    public Object getItem(int i) {
-      return null;
-    }
-
-    @Override
-    public long getItemId(int i) {
-      return 0;
+    public PhotoTitleViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+      View view = inflater.inflate(R.layout.flickr_photo_list_item, parent, false);
+      PhotoTitleViewHolder vh = new PhotoTitleViewHolder(view);
+      preloadSizeProvider.setView(vh.imageView);
+      return vh;
     }
 
     @Override
-    public View getView(int position, View view, ViewGroup container) {
+    public void onBindViewHolder(PhotoTitleViewHolder holder, int position) {
       final Photo current = photos.get(position);
-      final ViewHolder viewHolder;
-      if (view == null) {
-        view = inflater.inflate(R.layout.flickr_photo_list_item, container, false);
-        final ImageView imageView = (ImageView) view.findViewById(R.id.photo_view);
-        TextView titleView = (TextView) view.findViewById(R.id.title_view);
-        viewHolder = new ViewHolder(imageView, titleView);
-        view.setTag(viewHolder);
-        preloadSizeProvider.setView(imageView);
-      } else {
-        viewHolder = (ViewHolder) view.getTag();
-      }
-
       fullRequest.load(current)
           .thumbnail(thumbRequest.load(current))
-          .into(viewHolder.imageView);
+          .into(holder.imageView);
 
-      viewHolder.imageView.setOnClickListener(new View.OnClickListener() {
+      holder.imageView.setOnClickListener(new View.OnClickListener() {
         @Override
         public void onClick(View view) {
           Intent intent = FullscreenActivity.getIntent(getActivity(), current);
@@ -170,8 +157,17 @@ public void onClick(View view) {
         }
       });
 
-      viewHolder.titleText.setText(current.getTitle());
-      return view;
+      holder.titleView.setText(current.getTitle());
+    }
+
+    @Override
+    public long getItemId(int i) {
+      return RecyclerView.NO_ID;
+    }
+
+    @Override
+    public int getItemCount() {
+      return photos.size();
     }
 
     @Override
@@ -184,4 +180,15 @@ public RequestBuilder getPreloadRequestBuilder(Photo item) {
       return fullRequest.thumbnail(thumbRequest.load(item)).load(item);
     }
   }
+
+  private static class PhotoTitleViewHolder extends RecyclerView.ViewHolder {
+    private final TextView titleView;
+    private final ImageView imageView;
+
+    public PhotoTitleViewHolder(View itemView) {
+      super(itemView);
+      imageView = (ImageView) itemView.findViewById(R.id.photo_view);
+      titleView = (TextView) itemView.findViewById(R.id.title_view);
+    }
+  }
 }
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
index f57cef225..163c9d220 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
@@ -12,18 +12,16 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentPagerAdapter;
-import android.support.v4.app.FragmentTransaction;
+import android.support.v4.view.MenuItemCompat;
 import android.support.v4.view.ViewPager;
-import android.support.v7.app.ActionBar;
-import android.support.v7.app.ActionBarActivity;
+import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
 import android.util.Log;
-import android.view.KeyEvent;
+import android.view.Menu;
+import android.view.MenuInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.inputmethod.EditorInfo;
-import android.widget.Button;
-import android.widget.EditText;
+import android.widget.SearchView;
 import android.widget.TextView;
 
 import com.bumptech.glide.Glide;
@@ -31,9 +29,13 @@
 import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.samples.flickr.api.Api;
 import com.bumptech.glide.samples.flickr.api.Photo;
+import com.bumptech.glide.samples.flickr.api.Query;
+import com.bumptech.glide.samples.flickr.api.RecentQuery;
+import com.bumptech.glide.samples.flickr.api.SearchQuery;
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -45,21 +47,22 @@
  * An activity that allows users to search for images on Flickr and that contains a series of
  * fragments that display retrieved image thumbnails.
  */
-public class FlickrSearchActivity extends ActionBarActivity {
+public class FlickrSearchActivity extends AppCompatActivity
+    implements SearchView.OnQueryTextListener {
   private static final String TAG = "FlickrSearchActivity";
-  private static final String STATE_SEARCH_STRING = "state_search_string";
+  private static final String STATE_QUERY = "state_search_string";
 
-  private EditText searchText;
+  private final QueryListener queryListener = new QueryListener();
   private View searching;
   private TextView searchTerm;
-  private Set<PhotoViewer> photoViewers = new HashSet<PhotoViewer>();
-  private List<Photo> currentPhotos = new ArrayList<Photo>();
+  private Set<PhotoViewer> photoViewers = new HashSet<>();
+  private List<Photo> currentPhotos = new ArrayList<>();
   private View searchLoading;
-  private String currentSearchString;
-  private final SearchListener searchListener = new SearchListener();
   private BackgroundThumbnailFetcher backgroundThumbnailFetcher;
   private HandlerThread backgroundThread;
   private Handler backgroundHandler;
+  private SearchView searchView;
+  private Query currentQuery;
 
   private enum Page {
     SMALL,
@@ -87,90 +90,79 @@ public void onAttachFragment(Fragment fragment) {
     }
   }
 
+  @Override
+  public boolean onCreateOptionsMenu(Menu menu) {
+    MenuInflater menuInflater = getMenuInflater();
+    menuInflater.inflate(R.menu.search_activity, menu);
+
+    searchView =
+        (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.search));
+    searchView.setSubmitButtonEnabled(true);
+    searchView.setIconified(false);
+    searchView.setOnQueryTextListener(this);
+
+    return true;
+  }
+
+  @Override
+  public boolean onQueryTextSubmit(String query) {
+    executeSearch(query);
+    searchView.setQuery("", false /*submit*/);
+    return true;
+  }
+
+  @Override
+  public boolean onQueryTextChange(String newText) {
+    return false;
+  }
+
   /**
    * Called when the activity is first created.
    */
   @Override
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
+    StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
+        .detectAll()
+        .penaltyLog()
+        .build());
+
     backgroundThread = new HandlerThread("BackgroundThumbnailHandlerThread");
     backgroundThread.start();
     backgroundHandler = new Handler(backgroundThread.getLooper());
 
     setContentView(R.layout.flickr_search_activity);
-    StrictMode
-        .setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
     searching = findViewById(R.id.searching);
     searchLoading = findViewById(R.id.search_loading);
     searchTerm = (TextView) findViewById(R.id.search_term);
 
-    searchText = (EditText) findViewById(R.id.search_text);
-    searchText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
-      @Override
-      public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
-        if (actionId == EditorInfo.IME_ACTION_SEARCH) {
-          executeSearch();
-          return true;
-        }
-        return false;
-      }
-    });
-
-    final Button search = (Button) findViewById(R.id.search);
-    search.setOnClickListener(new View.OnClickListener() {
-      @Override
-      public void onClick(View view) {
-        executeSearch();
-      }
-    });
-
-    final ViewPager pager = (ViewPager) findViewById(R.id.view_pager);
-    pager.setPageMargin(50);
-    pager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
-      @Override
-      public void onPageScrolled(int i, float v, int i2) {
-      }
-
-      @Override
-      public void onPageSelected(int position) {
-        getSupportActionBar().getTabAt(position).select();
-      }
-
-      @Override
-      public void onPageScrollStateChanged(int i) {
-      }
-    });
-
-
-    final ActionBar actionBar = getSupportActionBar();
-    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
-
-    for (Page page : Page.values()) {
-      final int textId = PAGE_TO_TITLE.get(page);
-      actionBar.addTab(actionBar.newTab().setText(textId).setTabListener(new TabListener(pager)));
-    }
-
+    Resources res = getResources();
+    ViewPager pager = (ViewPager) findViewById(R.id.view_pager);
+    pager.setPageMargin(res.getDimensionPixelOffset(R.dimen.page_margin));
     pager.setAdapter(new FlickrPagerAdapter(getSupportFragmentManager()));
 
-    Api.get(this).registerSearchListener(searchListener);
+    Api.get(this).registerSearchListener(queryListener);
     if (savedInstanceState != null) {
-      String savedSearchString = savedInstanceState.getString(STATE_SEARCH_STRING);
-      if (!TextUtils.isEmpty(savedSearchString)) {
-        executeSearch(savedSearchString);
+      Query savedQuery = savedInstanceState.getParcelable(STATE_QUERY);
+      if (savedQuery != null) {
+        executeQuery(savedQuery);
       }
+    } else {
+      executeQuery(RecentQuery.get());
     }
 
-    final Resources res = getResources();
     int smallGridSize = res.getDimensionPixelSize(R.dimen.small_photo_side);
     int mediumGridSize = res.getDimensionPixelSize(R.dimen.medium_photo_side);
     int listHeightSize = res.getDimensionPixelSize(R.dimen.flickr_list_item_height);
     int screenWidth = getScreenWidth();
 
-    // Weight values determined experimentally by measuring the number of incurred GCs while
-    // scrolling through the various photo grids/lists.
-    Glide.get(this).preFillBitmapPool(new PreFillType.Builder(smallGridSize).setWeight(1),
-        new PreFillType.Builder(mediumGridSize).setWeight(1),
-        new PreFillType.Builder(screenWidth / 2, listHeightSize).setWeight(6));
+    if (savedInstanceState == null) {
+      // Weight values determined experimentally by measuring the number of incurred GCs while
+      // scrolling through the various photo grids/lists.
+      Glide.get(this).preFillBitmapPool(new PreFillType.Builder(smallGridSize).setWeight(1),
+          new PreFillType.Builder(mediumGridSize).setWeight(1),
+          new PreFillType.Builder(screenWidth / 2, listHeightSize).setWeight(6));
+    }
   }
 
   private int getScreenWidth() {
@@ -180,15 +172,15 @@ private int getScreenWidth() {
   @Override
   protected void onSaveInstanceState(Bundle outState) {
     super.onSaveInstanceState(outState);
-    if (!TextUtils.isEmpty(currentSearchString)) {
-      outState.putString(STATE_SEARCH_STRING, currentSearchString);
+    if (currentQuery != null) {
+      outState.putParcelable(STATE_QUERY, currentQuery);
     }
   }
 
   @Override
   protected void onDestroy() {
     super.onDestroy();
-    Api.get(this).unregisterSearchListener(searchListener);
+    Api.get(this).unregisterSearchListener(queryListener);
     if (backgroundThumbnailFetcher != null) {
       backgroundThumbnailFetcher.cancel();
       backgroundThumbnailFetcher = null;
@@ -210,51 +202,29 @@ public void onLowMemory() {
     Glide.get(this).clearMemory();
   }
 
-  private void executeSearch() {
-    String searchString = searchText.getText().toString();
-    searchText.getText().clear();
-    executeSearch(searchString);
-  }
-
   private void executeSearch(String searchString) {
-    currentSearchString = searchString;
+    Query query = TextUtils.isEmpty(searchString) ? null : new SearchQuery(searchString);
+    executeQuery(query);
+  }
 
-    if (TextUtils.isEmpty(searchString)) {
+  private void executeQuery(Query query) {
+    currentQuery = query;
+    if (query == null) {
+      queryListener.onSearchCompleted(null, Collections.<Photo>emptyList());
       return;
     }
 
     searching.setVisibility(View.VISIBLE);
     searchLoading.setVisibility(View.VISIBLE);
-    searchTerm.setText(getString(R.string.searching_for, currentSearchString));
+    searchTerm.setText(getString(R.string.searching_for, currentQuery.getDescription()));
 
-    Api.get(this).search(currentSearchString);
+    Api.get(this).query(currentQuery);
   }
 
-  private static class TabListener implements ActionBar.TabListener {
-    private final ViewPager pager;
-
-    public TabListener(ViewPager pager) {
-      this.pager = pager;
-    }
-
-    @Override
-    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {
-      pager.setCurrentItem(tab.getPosition());
-    }
-
+  private class QueryListener implements Api.QueryListener {
     @Override
-    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction ft) {
-    }
-
-    @Override
-    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction ft) {
-    }
-  }
-
-  private class SearchListener implements Api.SearchListener {
-    @Override
-    public void onSearchCompleted(String searchString, List<Photo> photos) {
-      if (!TextUtils.equals(currentSearchString, searchString)) {
+    public void onSearchCompleted(Query query, List<Photo> photos) {
+      if (!isCurrentQuery(query)) {
         return;
       }
 
@@ -278,9 +248,13 @@ public void onSearchCompleted(String searchString, List<Photo> photos) {
       currentPhotos = photos;
     }
 
+    private boolean isCurrentQuery(Query query) {
+      return currentQuery != null && currentQuery.equals(query);
+    }
+
     @Override
-    public void onSearchFailed(String searchString, Exception e) {
-      if (!TextUtils.equals(currentSearchString, searchString)) {
+    public void onSearchFailed(Query query, Exception e) {
+      if (!isCurrentQuery(query)) {
         return;
       }
 
@@ -289,7 +263,7 @@ public void onSearchFailed(String searchString, Exception e) {
       }
       searching.setVisibility(View.VISIBLE);
       searchLoading.setVisibility(View.INVISIBLE);
-      searchTerm.setText(getString(R.string.search_failed, currentSearchString));
+      searchTerm.setText(getString(R.string.search_failed, currentQuery.getDescription()));
     }
   }
 
@@ -328,11 +302,18 @@ public int getCount() {
       return Page.values().length;
     }
 
+    @Override
+    public CharSequence getPageTitle(int position) {
+      Page page = Page.values()[position];
+      int titleId = PAGE_TO_TITLE.get(page);
+      return getString(titleId);
+    }
+
     private Fragment pageToFragment(int position) {
       Page page = Page.values()[position];
       if (page == Page.SMALL) {
         int pageSize = getPageSize(R.dimen.small_photo_side);
-        return FlickrPhotoGrid.newInstance(pageSize, 30, false /*thumbnail*/);
+        return FlickrPhotoGrid.newInstance(pageSize, 15, false /*thumbnail*/);
       } else if (page == Page.MEDIUM) {
         int pageSize = getPageSize(R.dimen.medium_photo_side);
         return FlickrPhotoGrid.newInstance(pageSize, 10, true /*thumbnail*/);
@@ -370,11 +351,10 @@ public void run() {
           return;
         }
 
-        // TODO: Calling asDrawable (or Bitmap/Gif) and then downloadOnly is weird.
         FutureTarget<File> futureTarget = Glide.with(context)
-            .asDrawable()
+            .downloadOnly()
             .load(photo)
-            .downloadOnly(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
+            .submit(Api.SQUARE_THUMB_SIZE, Api.SQUARE_THUMB_SIZE);
 
         try {
           futureTarget.get();
@@ -387,7 +367,7 @@ public void run() {
             Log.d(TAG, "Got ExecutionException waiting for background downloadOnly", e);
           }
         }
-        futureTarget.cancel(true /*mayInterruptIfRunning*/);
+        Glide.with(context).clear(futureTarget);
       }
     }
   }
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java
index b30e68c0b..ab474658f 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FullscreenActivity.java
@@ -32,9 +32,8 @@ protected void onCreate(Bundle savedInstanceState) {
     Photo photo = getIntent().getParcelableExtra(ARG_PHOTO);
 
     Glide.with(this)
-        .asDrawable()
-        .apply(fitCenterTransform(this))
         .load(photo)
+        .apply(fitCenterTransform(this))
         .into(fullscreenView);
   }
 }
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java
new file mode 100644
index 000000000..1560cf82e
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/SquareImageView.java
@@ -0,0 +1,36 @@
+package com.bumptech.glide.samples.flickr;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.widget.ImageView;
+
+/**
+ * An always square {@link ImageView}.
+ */
+public final class SquareImageView extends ImageView {
+
+  public SquareImageView(Context context) {
+    super(context);
+  }
+
+  public SquareImageView(Context context, AttributeSet attrs) {
+    super(context, attrs);
+  }
+
+  public SquareImageView(Context context, AttributeSet attrs, int defStyleAttr) {
+    super(context, attrs, defStyleAttr);
+  }
+
+  @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+  public SquareImageView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+    super(context, attrs, defStyleAttr, defStyleRes);
+  }
+
+  @Override
+  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+    super.onMeasure(widthMeasureSpec, widthMeasureSpec);
+  }
+}
+
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
index 726ef9fcb..e31424079 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Api.java
@@ -1,23 +1,15 @@
 package com.bumptech.glide.samples.flickr.api;
 
 import android.content.Context;
-import android.text.TextUtils;
-import android.util.Log;
 import android.util.SparseArray;
 
 import com.android.volley.DefaultRetryPolicy;
 import com.android.volley.Request;
 import com.android.volley.RequestQueue;
-import com.android.volley.Response;
-import com.android.volley.VolleyError;
 import com.android.volley.toolbox.StringRequest;
 import com.android.volley.toolbox.Volley;
 import com.bumptech.glide.util.LruCache;
 
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
@@ -38,6 +30,8 @@
   private static final int MAX_URLS_TO_CACHE = 2000;
   private static final LruCache<UrlCacheKey, String> CACHED_URLS =
       new LruCache<>(MAX_URLS_TO_CACHE);
+  private static final int MAX_ITEMS_PER_PAGE = 300;
+  private static final String PER_PAGE = "&per_page=" + MAX_ITEMS_PER_PAGE;
 
   private static final SparseArray<String> EDGE_TO_SIZE_KEY = new SparseArray<String>() {
     {
@@ -51,7 +45,8 @@
     }
   };
   private static final List<Integer> SORTED_SIZE_KEYS =
-      new ArrayList<Integer>(EDGE_TO_SIZE_KEY.size());
+      new ArrayList<>(EDGE_TO_SIZE_KEY.size());
+
 
   static {
     for (int i = 0; i < EDGE_TO_SIZE_KEY.size(); i++) {
@@ -114,10 +109,6 @@ private static String getUrlForMethod(String method) {
     return String.format(SIGNED_API_URL, method);
   }
 
-  private static String getSearchUrl(String text) {
-    return getUrlForMethod("flickr.photos.search") + "&text=" + text + "&per_page=300";
-  }
-
   private static String getPhotoUrl(Photo photo, String sizeKey) {
     UrlCacheKey entry = new UrlCacheKey(photo, sizeKey);
     String result = CACHED_URLS.get(entry);
@@ -128,25 +119,33 @@ private static String getPhotoUrl(Photo photo, String sizeKey) {
     return result;
   }
 
+  static String getSearchUrl(String text) {
+    return getUrlForMethod("flickr.photos.search") + "&text=" + text + PER_PAGE;
+  }
+
+  static String getRecentUrl() {
+    return getUrlForMethod("flickr.photos.getRecent" + PER_PAGE);
+  }
+
   /**
    * An interface for listening for search results from the Flickr API.
    */
-  public interface SearchListener {
+  public interface QueryListener {
     /**
      * Called when a search completes successfully.
      *
-     * @param searchString The term that was searched for.
-     * @param photos       A list of images that were found for the given search term.
+     * @param query  The query used to obtain the results.
+     * @param photos A list of images that were found for the given search term.
      */
-    public void onSearchCompleted(String searchString, List<Photo> photos);
+    void onSearchCompleted(Query query, List<Photo> photos);
 
     /**
      * Called when a search fails.
      *
-     * @param searchString The term that was searched for.
-     * @param e            The exception that caused the search to fail.
+     * @param query The query we attempted to obtain results for.
+     * @param e     The exception that caused the search to fail.
      */
-    public void onSearchFailed(String searchString, Exception e);
+    void onSearchFailed(Query query, Exception e);
   }
 
   public static Api get(Context context) {
@@ -157,75 +156,56 @@ public static Api get(Context context) {
   }
 
   private final RequestQueue requestQueue;
-  private final Set<SearchListener> searchListeners = new HashSet<SearchListener>();
-  private SearchResult lastSearchResult;
+  private final Set<QueryListener> queryListeners = new HashSet<QueryListener>();
+  private QueryResult lastQueryResult;
 
   protected Api(Context context) {
     this.requestQueue = Volley.newRequestQueue(context.getApplicationContext());
+    QueryListener queryListener = new QueryListener() {
+      @Override
+      public void onSearchCompleted(Query query, List<Photo> photos) {
+        lastQueryResult = new QueryResult(query, photos);
+      }
+
+      @Override
+      public void onSearchFailed(Query query, Exception e) {
+        lastQueryResult = null;
+      }
+    };
+    queryListeners.add(queryListener);
   }
 
-  public void registerSearchListener(SearchListener searchListener) {
-    searchListeners.add(searchListener);
+  public void registerSearchListener(QueryListener queryListener) {
+    queryListeners.add(queryListener);
   }
 
-  public void unregisterSearchListener(SearchListener searchListener) {
-    searchListeners.remove(searchListener);
+  public void unregisterSearchListener(QueryListener queryListener) {
+    queryListeners.remove(queryListener);
   }
 
-  public void search(final String text) {
-    if (lastSearchResult != null && TextUtils.equals(lastSearchResult.searchString, text)) {
-      for (SearchListener listener : searchListeners) {
-        listener.onSearchCompleted(lastSearchResult.searchString, lastSearchResult.results);
+  public void query(Query query) {
+    if (lastQueryResult != null && lastQueryResult.query.equals(query)) {
+      for (QueryListener listener : queryListeners) {
+        listener.onSearchCompleted(lastQueryResult.query, lastQueryResult.results);
       }
       return;
     }
 
-    StringRequest request =
-        new StringRequest(Request.Method.GET, getSearchUrl(text), new Response.Listener<String>() {
-          @Override
-          public void onResponse(String response) {
-            try {
-              // Cut out initial flickJsonApi(
-              JSONObject searchResults =
-                  new JSONObject(response.substring(14, response.length() - 1));
-              JSONArray photos = searchResults.getJSONObject("photos").getJSONArray("photo");
-              List<Photo> results = new ArrayList<Photo>(photos.length());
-              for (int i = 0; i < photos.length(); i++) {
-                results.add(new Photo(photos.getJSONObject(i)));
-              }
-              lastSearchResult = new SearchResult(text, results);
-              for (SearchListener listener : searchListeners) {
-                listener.onSearchCompleted(text, results);
-              }
-            } catch (JSONException e) {
-              for (SearchListener listener : searchListeners) {
-                listener.onSearchFailed(text, e);
-              }
-              if (Log.isLoggable(TAG, Log.ERROR)) {
-                Log.e(TAG, "Search failed response=" + response, e);
-              }
-            }
-          }
-        }, new Response.ErrorListener() {
-          @Override
-          public void onErrorResponse(VolleyError error) {
-            for (SearchListener listener : searchListeners) {
-              listener.onSearchFailed(text, error);
-            }
-          }
-        });
+    FlickrQueryResponseListener responseListener
+        = new FlickrQueryResponseListener(new PhotoJsonStringParser(), query, queryListeners);
+    StringRequest request = new StringRequest(Request.Method.GET, query.getUrl(),
+        responseListener, responseListener);
     request.setRetryPolicy(new DefaultRetryPolicy(DefaultRetryPolicy.DEFAULT_TIMEOUT_MS, 3,
         DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
     requestQueue.add(request);
   }
 
-  private static class SearchResult {
-    private final String searchString;
+  private static class QueryResult {
+    private final Query query;
     private final List<Photo> results;
 
-    public SearchResult(String searchString, List<Photo> results) {
-
-      this.searchString = searchString;
+    public QueryResult(Query query, List<Photo> results) {
+      this.query = query;
       this.results = results;
     }
   }
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/FlickrQueryResponseListener.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/FlickrQueryResponseListener.java
new file mode 100644
index 000000000..cdc081bf3
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/FlickrQueryResponseListener.java
@@ -0,0 +1,52 @@
+package com.bumptech.glide.samples.flickr.api;
+
+import com.android.volley.Response;
+import com.android.volley.VolleyError;
+
+import org.json.JSONException;
+
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * Handles photo list responses and errors from Flickr API calls.
+ */
+final class FlickrQueryResponseListener implements Response.Listener<String>,
+    Response.ErrorListener {
+  private final PhotoJsonStringParser parser;
+  private final Query query;
+  private final Collection<Api.QueryListener> listeners;
+
+  FlickrQueryResponseListener(PhotoJsonStringParser parser, Query query,
+      Collection<Api.QueryListener> listeners) {
+    this.parser = parser;
+    this.query = query;
+    this.listeners = listeners;
+  }
+
+  @Override
+  public void onResponse(String response) {
+    try {
+      notifySuccess(parser.parse(response));
+    } catch (JSONException e) {
+      notifyFailed(e);
+    }
+  }
+
+  @Override
+  public void onErrorResponse(VolleyError error) {
+    notifyFailed(error);
+  }
+
+  private void notifySuccess(List<Photo> results) {
+    for (Api.QueryListener listener : listeners) {
+      listener.onSearchCompleted(query, results);
+    }
+  }
+
+  private void notifyFailed(Exception e) {
+    for (Api.QueryListener listener : listeners) {
+      listener.onSearchFailed(query, e);
+    }
+  }
+}
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/PhotoJsonStringParser.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/PhotoJsonStringParser.java
new file mode 100644
index 000000000..50522b63e
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/PhotoJsonStringParser.java
@@ -0,0 +1,27 @@
+package com.bumptech.glide.samples.flickr.api;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Parses a list of {@link Photo} objects from a Flickr API response string containing JSON data.
+ */
+final class PhotoJsonStringParser {
+  private static final int FLICKR_API_PREFIX_LENGTH = 14;
+
+  List<Photo> parse(String response) throws JSONException {
+    JSONObject searchResults =
+        new JSONObject(response.substring(FLICKR_API_PREFIX_LENGTH, response.length() - 1));
+    JSONArray photos = searchResults.getJSONObject("photos").getJSONArray("photo");
+    List<Photo> results = new ArrayList<>(photos.length());
+    for (int i = 0, size = photos.length(); i < size; i++) {
+      results.add(new Photo(photos.getJSONObject(i)));
+    }
+
+    return results;
+  }
+}
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Query.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Query.java
new file mode 100644
index 000000000..877f5aa14
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/Query.java
@@ -0,0 +1,11 @@
+package com.bumptech.glide.samples.flickr.api;
+
+import android.os.Parcelable;
+
+/** An interface representing a query in Flickr's API that returns a list of photos. */
+public interface Query extends Parcelable {
+  /** A user facing description of the query. */
+  String getDescription();
+  /** The url to use to execute the query. */
+  String getUrl();
+}
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
new file mode 100644
index 000000000..b3442f26b
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/RecentQuery.java
@@ -0,0 +1,45 @@
+package com.bumptech.glide.samples.flickr.api;
+
+import android.os.Parcel;
+
+/** Query wusing flickr's recent API. */
+public final class RecentQuery implements Query {
+  public static final Creator<RecentQuery> CREATOR = new Creator<RecentQuery>() {
+    @Override
+    public RecentQuery createFromParcel(Parcel source) {
+      return RECENT_QUERY;
+    }
+
+    @Override
+    public RecentQuery[] newArray(int size) {
+      return new RecentQuery[size];
+    }
+  };
+  private static final RecentQuery RECENT_QUERY = new RecentQuery();
+
+  public static RecentQuery get() {
+    return RECENT_QUERY;
+  }
+
+  private RecentQuery() {
+    // Singleton.
+  }
+
+  @Override
+  public String getDescription() {
+    return "Recent";
+  }
+
+  @Override
+  public String getUrl() {
+    return Api.getRecentUrl();
+  }
+
+  @Override
+  public int describeContents() {
+    return 0;
+  }
+
+  @Override
+  public void writeToParcel(Parcel dest, int flags) { }
+}
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/SearchQuery.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/SearchQuery.java
new file mode 100644
index 000000000..0d36aaf24
--- /dev/null
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/api/SearchQuery.java
@@ -0,0 +1,62 @@
+package com.bumptech.glide.samples.flickr.api;
+
+import android.os.Parcel;
+
+/** Wraps a search query string. */
+public final class SearchQuery implements Query {
+  public static final Creator<SearchQuery> CREATOR = new Creator<SearchQuery>() {
+    @Override
+    public SearchQuery createFromParcel(Parcel source) {
+      return new SearchQuery(source);
+    }
+
+    @Override
+    public SearchQuery[] newArray(int size) {
+      return new SearchQuery[size];
+    }
+  };
+
+  private final String queryString;
+
+  public SearchQuery(String queryString) {
+    this.queryString = queryString;
+  }
+
+  private SearchQuery(Parcel in) {
+    queryString = in.readString();
+  }
+
+  @Override
+  public void writeToParcel(Parcel dest, int flags) {
+    dest.writeString(queryString);
+  }
+
+  @Override
+  public int describeContents() {
+    return 0;
+  }
+
+  @Override
+  public String getDescription() {
+    return queryString;
+  }
+
+  @Override
+  public String getUrl() {
+    return Api.getSearchUrl(queryString);
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (o instanceof SearchQuery) {
+      SearchQuery other = (SearchQuery) o;
+      return queryString.equals(other.queryString);
+    }
+    return false;
+  }
+
+  @Override
+  public int hashCode() {
+    return queryString.hashCode();
+  }
+}
diff --git a/samples/flickr/src/main/res/anim/fade_in.xml b/samples/flickr/src/main/res/anim/fade_in.xml
deleted file mode 100644
index 14a8bd19c..000000000
--- a/samples/flickr/src/main/res/anim/fade_in.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<alpha xmlns:android="http://schemas.android.com/apk/res/android"
-       android:interpolator="@android:anim/linear_interpolator"
-       android:fromAlpha="0.0"
-       android:toAlpha="1.0"
-       android:duration="150"
-    />
-
diff --git a/samples/flickr/src/main/res/layout/flickr_photo_grid.xml b/samples/flickr/src/main/res/layout/flickr_photo_grid.xml
index f756a4c31..dd069be64 100644
--- a/samples/flickr/src/main/res/layout/flickr_photo_grid.xml
+++ b/samples/flickr/src/main/res/layout/flickr_photo_grid.xml
@@ -1,14 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
-<GridView xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/images"
-          android:cacheColorHint="#00000000"
-          android:fadingEdge="none"
-          android:scrollingCache="false"
-          android:numColumns="auto_fit"
-          android:horizontalSpacing="10dp"
-          android:verticalSpacing="10dp"
-          android:gravity="center"
-          android:layout_gravity="center"
-          android:stretchMode="columnWidth"
-          android:layout_width="fill_parent"
-          android:layout_height="fill_parent"/>
+<android.support.v7.widget.RecyclerView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingTop="10dp"
+    android:id="@+id/flickr_photo_grid" />
diff --git a/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml b/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml
index f7642db0b..5a53ad9fd 100644
--- a/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml
+++ b/samples/flickr/src/main/res/layout/flickr_photo_grid_item.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
-
-<ImageView xmlns:android="http://schemas.android.com/apk/res/android"
-           android:scaleType="centerCrop"
-           android:layout_width="fill_parent"
-           android:layout_height="fill_parent"
-           android:contentDescription="@string/image_description"/>
+<com.bumptech.glide.samples.flickr.SquareImageView
+       xmlns:android="http://schemas.android.com/apk/res/android"
+       android:scaleType="centerCrop"
+       android:layout_width="fill_parent"
+       android:layout_height="fill_parent"
+       android:contentDescription="@string/image_description"/>
diff --git a/samples/flickr/src/main/res/layout/flickr_photo_list.xml b/samples/flickr/src/main/res/layout/flickr_photo_list.xml
index 9f19722de..13723e059 100644
--- a/samples/flickr/src/main/res/layout/flickr_photo_list.xml
+++ b/samples/flickr/src/main/res/layout/flickr_photo_list.xml
@@ -1,10 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
-
-<ListView xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/flickr_photo_list"
-          android:layout_width="fill_parent"
-          android:layout_height="fill_parent"
-          android:cacheColorHint="#00000000"
-          android:scrollingCache="false">
-</ListView>
+<android.support.v7.widget.RecyclerView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/flickr_photo_list" />
 
diff --git a/samples/flickr/src/main/res/layout/flickr_photo_list_item.xml b/samples/flickr/src/main/res/layout/flickr_photo_list_item.xml
index 5491ec04c..8c5bc8cb6 100644
--- a/samples/flickr/src/main/res/layout/flickr_photo_list_item.xml
+++ b/samples/flickr/src/main/res/layout/flickr_photo_list_item.xml
@@ -22,4 +22,4 @@
         android:layout_margin="10dp"
         android:gravity="center"
         android:textSize="16sp"/>
-</LinearLayout>
\ No newline at end of file
+</LinearLayout>
diff --git a/samples/flickr/src/main/res/layout/flickr_search_activity.xml b/samples/flickr/src/main/res/layout/flickr_search_activity.xml
index bfd035308..a4b216c7e 100644
--- a/samples/flickr/src/main/res/layout/flickr_search_activity.xml
+++ b/samples/flickr/src/main/res/layout/flickr_search_activity.xml
@@ -1,73 +1,41 @@
 <?xml version="1.0" encoding="utf-8"?>
 <merge xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <LinearLayout
-        android:orientation="vertical"
+    <android.support.v4.view.ViewPager
+        android:id="@+id/view_pager"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent">
 
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_margin="10dp"
-            android:orientation="horizontal">
-
-            <EditText
-                android:id="@+id/search_text"
-                android:layout_width="0dp"
+        <android.support.v4.view.PagerTabStrip
+                android:id="@+id/pager_tab_strip"
+                android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_marginRight="10dp"
-                android:layout_marginEnd="10dp"
-                android:layout_weight="1"
-                android:cursorVisible="true"
-                android:textSize="16sp"
-                android:singleLine="true"
-                android:inputType="text"
-                android:imeOptions="actionSearch"/>
-
-            <Button
-                android:id="@+id/search"
-                android:layout_width="wrap_content"
-                android:minWidth="50dp"
-                android:layout_height="40dp"
-                android:text="@string/search"/>
-        </LinearLayout>
-
-        <FrameLayout
-            android:layout_width="fill_parent"
-            android:layout_height="0dp"
-            android:layout_weight="1">
-
-            <android.support.v4.view.ViewPager
-                android:id="@+id/view_pager"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"/>
+                android:layout_gravity="top" />
 
-            <LinearLayout
-                android:id="@+id/searching"
-                android:layout_width="fill_parent"
-                android:layout_height="fill_parent"
-                android:background="@color/translucent_black"
-                android:visibility="invisible"
-                android:layout_gravity="center"
-                android:gravity="center"
-                android:orientation="vertical">
+    </android.support.v4.view.ViewPager>
 
-                <TextView
-                    android:id="@+id/search_term"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:gravity="center"
-                    android:textSize="16sp"
-                    android:layout_marginBottom="10dp"/>
+    <LinearLayout
+        android:id="@+id/searching"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:background="@color/translucent_black"
+        android:visibility="invisible"
+        android:layout_gravity="center"
+        android:gravity="center"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/search_term"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="16sp"
+            android:layout_marginBottom="10dp"/>
 
-                <ProgressBar
-                    android:id="@+id/search_loading"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:indeterminate="true"/>
-            </LinearLayout>
-        </FrameLayout>
+        <ProgressBar
+            android:id="@+id/search_loading"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:indeterminate="true"/>
     </LinearLayout>
 </merge>
-
diff --git a/samples/flickr/src/main/res/menu/search_activity.xml b/samples/flickr/src/main/res/menu/search_activity.xml
new file mode 100644
index 000000000..23c1dfa0a
--- /dev/null
+++ b/samples/flickr/src/main/res/menu/search_activity.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+      xmlns:app="http://schemas.android.com/apk/res-auto">
+<item android:id="@+id/search"
+      android:title="@string/search"
+      android:icon="@android:drawable/ic_menu_search"
+      app:showAsAction="collapseActionView|ifRoom"
+      app:actionViewClass="android.widget.SearchView" />
+</menu>
diff --git a/samples/flickr/src/main/res/values/colors.xml b/samples/flickr/src/main/res/values/colors.xml
index f2cb7a7f5..c9e3de8f5 100644
--- a/samples/flickr/src/main/res/values/colors.xml
+++ b/samples/flickr/src/main/res/values/colors.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <color name="translucent_black">#B0000000</color>
-</resources>
\ No newline at end of file
+</resources>
diff --git a/samples/flickr/src/main/res/values/dimens.xml b/samples/flickr/src/main/res/values/dimens.xml
index 89db175df..0f5cf0099 100644
--- a/samples/flickr/src/main/res/values/dimens.xml
+++ b/samples/flickr/src/main/res/values/dimens.xml
@@ -3,4 +3,7 @@
     <dimen name="medium_photo_side">110dp</dimen>
     <dimen name="small_photo_side">55dp</dimen>
     <dimen name="flickr_list_item_height">170dp</dimen>
-</resources>
\ No newline at end of file
+    <dimen name="grid_margin">5dp</dimen>
+    <dimen name="page_margin">8dp</dimen>
+</resources>
+
diff --git a/samples/gallery/build.gradle b/samples/gallery/build.gradle
index 694755a34..8346d8778 100644
--- a/samples/gallery/build.gradle
+++ b/samples/gallery/build.gradle
@@ -2,18 +2,21 @@ apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':library')
+    compile(project(':integration:recyclerview')) {
+        transitive = false
+    }
     compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    compile "com.android.support:recyclerview-v7:21.0.3"
+    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
 }
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion "21.1.2"
+    compileSdkVersion COMPILE_SDK_VERSION as int
+    buildToolsVersion BUILD_TOOLS_VERSION
 
     defaultConfig {
         applicationId 'com.bumptech.glide.samples.gallery'
-        minSdkVersion 19
-        targetSdkVersion 21
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
         versionCode 1
         versionName "1.0"
     }
diff --git a/samples/gallery/lint.xml b/samples/gallery/lint.xml
new file mode 100644
index 000000000..5c710c8c7
--- /dev/null
+++ b/samples/gallery/lint.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Not supported by all build systems -->
+    <issue id="GradleOverrides" severity="ignore" />
+    <issue id="IconMissingDensityFolder" severity="ignore"/>
+</lint>
diff --git a/samples/gallery/src/main/AndroidManifest.xml b/samples/gallery/src/main/AndroidManifest.xml
index 45c77627e..7a38c3fb1 100644
--- a/samples/gallery/src/main/AndroidManifest.xml
+++ b/samples/gallery/src/main/AndroidManifest.xml
@@ -1,12 +1,17 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.bumptech.glide.samples.gallery"
-          android:versionCode="1"
-          android:versionName="1.0">
-  <uses-sdk android:minSdkVersion="19"
-    android:targetSdkVersion="19" />
+          package="com.bumptech.glide.samples.gallery">
+
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
-  <application android:label="@string/app_name" android:icon="@drawable/ic_launcher">
+
+  <uses-sdk
+        android:minSdkVersion="10"
+        android:targetSdkVersion="22" />
+
+  <application
+          android:label="@string/app_name"
+          android:icon="@android:drawable/sym_def_app_icon"
+          android:allowBackup="false">
     <activity android:name=".MainActivity"
               android:label="@string/app_name">
       <intent-filter>
diff --git a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerViewFragment.java b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/HorizontalGalleryFragment.java
similarity index 53%
rename from samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerViewFragment.java
rename to samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/HorizontalGalleryFragment.java
index 5f893d37f..35e1376fd 100644
--- a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerViewFragment.java
+++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/HorizontalGalleryFragment.java
@@ -5,23 +5,21 @@
 import android.support.v4.app.LoaderManager;
 import android.support.v4.content.Loader;
 import android.support.v7.widget.GridLayoutManager;
-import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AbsListView;
 
 import com.bumptech.glide.Glide;
-import com.bumptech.glide.ListPreloader;
 import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;
 
 import java.util.List;
 
 /**
  * Displays media store data in a recycler view.
  */
-public class RecyclerViewFragment extends Fragment
+public class HorizontalGalleryFragment extends Fragment
     implements LoaderManager.LoaderCallbacks<List<MediaStoreData>> {
 
   private RecyclerView recyclerView;
@@ -56,11 +54,9 @@ public void onLoadFinished(Loader<List<MediaStoreData>> loader,
     RequestManager requestManager = Glide.with(this);
     RecyclerAdapter adapter =
         new RecyclerAdapter(getActivity(), mediaStoreData, requestManager);
-    ListPreloader<MediaStoreData> preloader =
-        new ListPreloader<>(requestManager, adapter, adapter, 3);
-    RecyclerViewPreloaderListener recyclerViewPreloaderListener =
-        new RecyclerViewPreloaderListener(preloader);
-    recyclerView.setOnScrollListener(recyclerViewPreloaderListener);
+    RecyclerViewPreloader<MediaStoreData> preloader =
+        new RecyclerViewPreloader<>(requestManager, adapter, adapter, 3);
+    recyclerView.addOnScrollListener(preloader);
     recyclerView.setAdapter(adapter);
   }
 
@@ -68,30 +64,4 @@ public void onLoadFinished(Loader<List<MediaStoreData>> loader,
   public void onLoaderReset(Loader<List<MediaStoreData>> loader) {
     // Do nothing.
   }
-
-  private static class RecyclerViewPreloaderListener extends RecyclerView.OnScrollListener {
-    private final AbsListView.OnScrollListener scrollListener;
-    private int lastFirstVisible = -1;
-    private int lastVisibleCount = -1;
-    private int lastItemCount = -1;
-
-    public RecyclerViewPreloaderListener(AbsListView.OnScrollListener scrollListener) {
-      this.scrollListener = scrollListener;
-    }
-
-    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
-      // Adapter the recycler view scroll listener interface to match ListView's.
-      LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
-      int firstVisible = layoutManager.findFirstVisibleItemPosition();
-      int visibleCount = Math.abs(firstVisible - layoutManager.findLastVisibleItemPosition());
-      int itemCount = recyclerView.getAdapter().getItemCount();
-      if (firstVisible != lastFirstVisible || visibleCount != lastVisibleCount
-          || itemCount != lastItemCount) {
-        scrollListener.onScroll(null, firstVisible, visibleCount, itemCount);
-        lastFirstVisible = firstVisible;
-        lastFirstVisible = visibleCount;
-        lastItemCount = itemCount;
-      }
-    }
-  }
 }
diff --git a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java
index 6ce32bcff..4c7c3e509 100644
--- a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java
+++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/MainActivity.java
@@ -7,22 +7,14 @@
 import com.bumptech.glide.MemoryCategory;
 
 /**
- * Displays a {@link com.bumptech.glide.samples.gallery.RecyclerViewFragment}.
+ * Displays a {@link HorizontalGalleryFragment}.
  */
 public class MainActivity extends FragmentActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.fragment_container);
+        setContentView(R.layout.main_activity);
         Glide.get(this).setMemoryCategory(MemoryCategory.HIGH);
-
-        if (savedInstanceState == null) {
-            RecyclerViewFragment fragment = new RecyclerViewFragment();
-            getSupportFragmentManager()
-                    .beginTransaction()
-                    .replace(R.id.fragment_container, fragment)
-                    .commit();
-        }
     }
 }
diff --git a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java
index bafdb2498..1b26904ad 100644
--- a/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java
+++ b/samples/gallery/src/main/java/com/bumptech/glide/samples/gallery/RecyclerAdapter.java
@@ -3,8 +3,11 @@
 import static com.bumptech.glide.request.RequestOptions.fitCenterTransform;
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 
+import android.annotation.TargetApi;
 import android.content.Context;
+import android.graphics.Point;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.support.v7.widget.RecyclerView;
 import android.view.Display;
 import android.view.LayoutInflater;
@@ -44,9 +47,7 @@
 
     setHasStableIds(true);
 
-    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-    Display display = wm.getDefaultDisplay();
-    screenWidth = display.getWidth();
+    screenWidth = getWidth(context);
   }
 
   @Override
@@ -122,9 +123,27 @@ public RequestBuilder getPreloadRequestBuilder(MediaStoreData item) {
     return actualDimensions;
   }
 
+  // Display#getSize(Point)
+  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
+  @SuppressWarnings("deprecation")
+  private static int getWidth(Context context) {
+    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+    Display display = wm.getDefaultDisplay();
+
+    final int result;
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+      Point size = new Point();
+      display.getSize(size);
+      result = size.x;
+    } else {
+      result = display.getWidth();
+    }
+    return result;
+  }
+
   /**
-   * ViewHolder containing views to display individual {@link com.bumptech.glide.samples
-   * .gallery.MediaStoreData}.
+   * ViewHolder containing views to display individual {@link
+   * com.bumptech.glide.samples.gallery.MediaStoreData}.
    */
   public static final class ListViewHolder extends RecyclerView.ViewHolder {
 
diff --git a/samples/gallery/src/main/res/drawable-hdpi/ic_launcher.png b/samples/gallery/src/main/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e5b..000000000
Binary files a/samples/gallery/src/main/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/samples/gallery/src/main/res/drawable-ldpi/ic_launcher.png b/samples/gallery/src/main/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 99238729d..000000000
Binary files a/samples/gallery/src/main/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/samples/gallery/src/main/res/drawable-mdpi/ic_launcher.png b/samples/gallery/src/main/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047dfa..000000000
Binary files a/samples/gallery/src/main/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/samples/gallery/src/main/res/drawable-xhdpi/ic_launcher.png b/samples/gallery/src/main/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d760f..000000000
Binary files a/samples/gallery/src/main/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/samples/gallery/src/main/res/layout/fragment_container.xml b/samples/gallery/src/main/res/layout/fragment_container.xml
deleted file mode 100644
index 0c944f35d..000000000
--- a/samples/gallery/src/main/res/layout/fragment_container.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-   android:id="@+id/fragment_container"
-   android:layout_width="match_parent"
-   android:layout_height="match_parent" />
diff --git a/samples/gallery/src/main/res/layout/main.xml b/samples/gallery/src/main/res/layout/main.xml
deleted file mode 100644
index 9c0faaf51..000000000
--- a/samples/gallery/src/main/res/layout/main.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-  android:id="@+id/fragment_container"
-  android:layout_width="match_parent"
-  android:layout_height="match_parent" />
-
diff --git a/samples/gallery/src/main/res/layout/main_activity.xml b/samples/gallery/src/main/res/layout/main_activity.xml
new file mode 100644
index 000000000..18c1a634f
--- /dev/null
+++ b/samples/gallery/src/main/res/layout/main_activity.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <fragment
+            android:name="com.bumptech.glide.samples.gallery.HorizontalGalleryFragment"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:id="@+id/horizontal_gallery_fragment"/>
+</merge>
diff --git a/samples/gallery/src/main/res/layout/media_page.xml b/samples/gallery/src/main/res/layout/media_page.xml
deleted file mode 100644
index 0b6f53495..000000000
--- a/samples/gallery/src/main/res/layout/media_page.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<FrameLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-  <ImageView
-    android:id="@+id/media_view"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent" />
-  <ImageView
-    android:id="@+id/play_button"
-    android:layout_width="wrap_content"
-    android:layout_height="wrap_content"
-    android:layout_gravity="center"
-    android:src="@android:drawable/ic_media_play" />
-</FrameLayout>
\ No newline at end of file
diff --git a/samples/gallery/src/main/res/layout/one_up.xml b/samples/gallery/src/main/res/layout/one_up.xml
deleted file mode 100644
index d0a5dc40d..000000000
--- a/samples/gallery/src/main/res/layout/one_up.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent">
-  <android.support.v4.view.ViewPager
-    android:id="@+id/media_pager"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent" />
-</FrameLayout>
\ No newline at end of file
diff --git a/samples/gallery/src/main/res/layout/recycler_item.xml b/samples/gallery/src/main/res/layout/recycler_item.xml
index 39c20e669..84eb858dd 100644
--- a/samples/gallery/src/main/res/layout/recycler_item.xml
+++ b/samples/gallery/src/main/res/layout/recycler_item.xml
@@ -4,4 +4,5 @@
    android:paddingLeft="5dp"
    android:paddingRight="5dp"
    android:layout_width="match_parent"
-   android:layout_height="match_parent"/>
+   android:layout_height="match_parent"
+   android:contentDescription="@string/image_content_description"/>
diff --git a/samples/gallery/src/main/res/values/ids.xml b/samples/gallery/src/main/res/values/ids.xml
index f8f388e7d..6187e3ee6 100644
--- a/samples/gallery/src/main/res/values/ids.xml
+++ b/samples/gallery/src/main/res/values/ids.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
   <item type="id" name="loader_id_media_store_data" />
-</resources>
\ No newline at end of file
+</resources>
diff --git a/samples/gallery/src/main/res/values/strings.xml b/samples/gallery/src/main/res/values/strings.xml
index 467ca3b81..c1e016007 100644
--- a/samples/gallery/src/main/res/values/strings.xml
+++ b/samples/gallery/src/main/res/values/strings.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
   <string name="app_name">gallery</string>
+  <string name="image_content_description">Photo</string>
 </resources>
diff --git a/samples/giphy/build.gradle b/samples/giphy/build.gradle
index 5f69cc909..54054fe42 100644
--- a/samples/giphy/build.gradle
+++ b/samples/giphy/build.gradle
@@ -2,7 +2,11 @@ apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':library')
+    compile(project(':integration:recyclerview')) {
+        transitive = false
+    }
     compile 'com.google.code.gson:gson:2.3'
+    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
 }
 
 android {
diff --git a/samples/giphy/giphy.iml b/samples/giphy/giphy.iml
deleted file mode 100644
index 184160258..000000000
--- a/samples/giphy/giphy.iml
+++ /dev/null
@@ -1,94 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":samples:giphy" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="glide-parent.samples" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":samples:giphy" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="gson-2.2.4" level="project" />
-    <orderEntry type="library" exported="" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="module" module-name="library" exported="" />
-    <orderEntry type="module" module-name="disklrucache" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/samples/giphy/lint.xml b/samples/giphy/lint.xml
new file mode 100644
index 000000000..95a2ab036
--- /dev/null
+++ b/samples/giphy/lint.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Not supported by all build systems -->
+    <issue id="GradleOverrides" severity="ignore" />
+</lint>
diff --git a/samples/giphy/src/main/AndroidManifest.xml b/samples/giphy/src/main/AndroidManifest.xml
index e5f73a261..4fa0d5d60 100644
--- a/samples/giphy/src/main/AndroidManifest.xml
+++ b/samples/giphy/src/main/AndroidManifest.xml
@@ -3,8 +3,9 @@
           package="com.bumptech.glide.samples.giphy">
 
     <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-sdk android:minSdkVersion="10"
-      android:targetSdkVersion="19" />
+
+    <uses-sdk android:minSdkVersion="14"
+      android:targetSdkVersion="22" />
 
     <application
         android:allowBackup="true"
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
index 25530c572..b7c0de95a 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
@@ -22,8 +22,8 @@
   private static volatile Api api = null;
   private static final String BETA_KEY = "dc6zaTOxFJmzC";
   private static final String BASE_URL = "https://api.giphy.com/";
-  private static final String SEARCH_PATH = "/v1/gifs/search";
-  private static final String TRENDING_PATH = "/v1/gifs/trending";
+  private static final String SEARCH_PATH = "v1/gifs/search";
+  private static final String TRENDING_PATH = "v1/gifs/trending";
   private final Handler bgHandler;
   private final Handler mainHandler;
   private final HashSet<Monitor> monitors = new HashSet<Monitor>();
@@ -171,13 +171,13 @@ public String toString() {
    */
   public static class GifUrlSet {
     public GifImage original;
-    public GifImage fixed_width_downsampled;
-    public GifImage fixed_height_downsampled;
+    public GifImage fixed_width;
+    public GifImage fixed_height;
 
     @Override
     public String toString() {
-      return "GifUrlSet{" + "original=" + original + ", fixed_width_downsampled="
-          + fixed_width_downsampled + ", fixed_height_downsampled=" + fixed_height_downsampled
+      return "GifUrlSet{" + "original=" + original + ", fixed_width="
+          + fixed_width + ", fixed_height=" + fixed_height
           + '}';
     }
   }
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
index 72b2234f2..47ef06e8e 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
@@ -17,6 +17,8 @@
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.Target;
@@ -62,21 +64,22 @@ public void onClick(View view) {
     });
 
     RequestBuilder<Drawable> thumbnailRequest = Glide.with(this)
-        .asDrawable()
-        .apply(decodeTypeOf(Bitmap.class))
-        .load(result);
+        .load(result)
+        .apply(decodeTypeOf(Bitmap.class));
 
-    Glide.with(this).asDrawable().thumbnail(thumbnailRequest).load(result.images.original.url)
+    Glide.with(this)
+        .load(result.images.original.url)
+        .thumbnail(thumbnailRequest)
         .listener(new RequestListener<Drawable>() {
           @Override
-          public boolean onLoadFailed(Object model, Target<Drawable> target,
+          public boolean onLoadFailed(GlideException e, Object model, Target<Drawable> target,
               boolean isFirstResource) {
             return false;
           }
 
           @Override
           public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target,
-              boolean isFromMemoryCache, boolean isFirstResource) {
+              DataSource dataSource, boolean isFirstResource) {
             if (resource instanceof GifDrawable) {
               gifDrawable = (GifDrawable) resource;
             } else {
@@ -84,6 +87,7 @@ public boolean onResourceReady(Drawable resource, Object model, Target<Drawable>
             }
             return false;
           }
-        }).into(gifView);
+        })
+        .into(gifView);
   }
 }
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java
index d2c93ab6c..3d27c6fe7 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java
@@ -48,9 +48,9 @@ public GiphyModelLoader(ModelLoader<GlideUrl, InputStream> urlLoader) {
 
   @Override
   protected String getUrl(Api.GifResult model, int width, int height, Options options) {
-    Api.GifImage fixedHeight = model.images.fixed_height_downsampled;
+    Api.GifImage fixedHeight = model.images.fixed_height;
     int fixedHeightDifference = getDifference(fixedHeight, width, height);
-    Api.GifImage fixedWidth = model.images.fixed_width_downsampled;
+    Api.GifImage fixedWidth = model.images.fixed_width;
     int fixedWidthDifference = getDifference(fixedWidth, width, height);
     if (fixedHeightDifference < fixedWidthDifference && !TextUtils.isEmpty(fixedHeight.url)) {
       return fixedHeight.url;
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
index f679ba69f..80e9f4fed 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
@@ -7,19 +7,19 @@
 import android.content.Intent;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
-import android.util.Log;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.BaseAdapter;
 import android.widget.ImageView;
-import android.widget.ListView;
 
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.ListPreloader;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;
 import com.bumptech.glide.util.ViewPreloadSizeProvider;
 
-import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -27,8 +27,6 @@
  * Giphy's api.
  */
 public class MainActivity extends Activity implements Api.Monitor {
-  private static final String TAG = "GiphyActivity";
-
   private GifAdapter adapter;
 
   @Override
@@ -39,28 +37,29 @@ protected void onCreate(Bundle savedInstanceState) {
     ImageView giphyLogoView = (ImageView) findViewById(R.id.giphy_logo_view);
 
     Glide.with(this)
-        .asDrawable()
         .load(R.raw.large_giphy_logo)
         .into(giphyLogoView);
 
-    ListView gifList = (ListView) findViewById(R.id.gif_list);
+    RecyclerView gifList = (RecyclerView) findViewById(R.id.gif_list);
+    LinearLayoutManager layoutManager = new LinearLayoutManager(this);
+    gifList.setLayoutManager(layoutManager);
 
     RequestBuilder<Drawable> gifItemRequest = Glide.with(this).asDrawable();
 
     ViewPreloadSizeProvider<Api.GifResult> preloadSizeProvider =
-        new ViewPreloadSizeProvider<Api.GifResult>();
+        new ViewPreloadSizeProvider<>();
     adapter = new GifAdapter(this, gifItemRequest, preloadSizeProvider);
     gifList.setAdapter(adapter);
-    ListPreloader<Api.GifResult> preloader =
-        new ListPreloader<Api.GifResult>(Glide.with(this), adapter, preloadSizeProvider, 2);
-    gifList.setOnScrollListener(preloader);
+    RecyclerViewPreloader<Api.GifResult> preloader =
+        new RecyclerViewPreloader<>(Glide.with(this), adapter, preloadSizeProvider, 4);
+    gifList.addOnScrollListener(preloader);
   }
 
   @Override
   protected void onStart() {
     super.onStart();
     Api.get().addMonitor(this);
-    if (adapter.getCount() == 0) {
+    if (adapter.getItemCount() == 0) {
       Api.get().getTrending();
     }
   }
@@ -76,8 +75,8 @@ public void onSearchComplete(Api.SearchResult result) {
     adapter.setResults(result.data);
   }
 
-  private static class GifAdapter extends BaseAdapter implements ListPreloader
-      .PreloadModelProvider<Api.GifResult> {
+  private static class GifAdapter extends RecyclerView.Adapter<GifViewHolder>
+      implements ListPreloader.PreloadModelProvider<Api.GifResult> {
     private static final Api.GifResult[] EMPTY_RESULTS = new Api.GifResult[0];
 
     private final Activity activity;
@@ -103,38 +102,21 @@ public void setResults(Api.GifResult[] results) {
     }
 
     @Override
-    public int getCount() {
-      return results.length;
+    public GifViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+      View view = activity.getLayoutInflater().inflate(R.layout.gif_list_item, parent, false);
+      return new GifViewHolder(view);
     }
 
     @Override
-    public Api.GifResult getItem(int i) {
-      return results[i];
-    }
-
-    @Override
-    public long getItemId(int i) {
-      return 0;
-    }
-
-    @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
-      if (convertView == null) {
-        convertView = activity.getLayoutInflater().inflate(R.layout.gif_list_item, parent, false);
-      }
-
+    public void onBindViewHolder(GifViewHolder holder, int position) {
       final Api.GifResult result = results[position];
-      if (Log.isLoggable(TAG, Log.DEBUG)) {
-        Log.d(TAG, "load result: " + result);
-      }
-      final ImageView gifView = (ImageView) convertView.findViewById(R.id.gif_view);
-      gifView.setOnClickListener(new View.OnClickListener() {
+      holder.gifView.setOnClickListener(new View.OnClickListener() {
         @Override
         public void onClick(View view) {
           ClipboardManager clipboard =
               (ClipboardManager) activity.getSystemService(Context.CLIPBOARD_SERVICE);
           ClipData clip =
-              ClipData.newPlainText("giphy_url", result.images.fixed_height_downsampled.url);
+              ClipData.newPlainText("giphy_url", result.images.fixed_height.url);
           clipboard.setPrimaryClip(clip);
 
           Intent fullscreenIntent = FullscreenActivity.getIntent(activity, result);
@@ -142,18 +124,24 @@ public void onClick(View view) {
         }
       });
 
-      requestBuilder.load(result).into(gifView);
+      requestBuilder.load(result).into(holder.gifView);
 
-      preloadSizeProvider.setView(gifView);
+      preloadSizeProvider.setView(holder.gifView);
+    }
+
+    @Override
+    public long getItemId(int i) {
+      return 0;
+    }
 
-      return convertView;
+    @Override
+    public int getItemCount() {
+      return results.length;
     }
 
     @Override
     public List<Api.GifResult> getPreloadItems(int position) {
-      List<Api.GifResult> items = new ArrayList<Api.GifResult>(1);
-      items.add(getItem(position));
-      return items;
+      return Collections.singletonList(results[position]);
     }
 
     @Override
@@ -161,4 +149,13 @@ public RequestBuilder getPreloadRequestBuilder(Api.GifResult item) {
       return requestBuilder.load(item);
     }
   }
+
+  private static class GifViewHolder extends RecyclerView.ViewHolder {
+    private final ImageView gifView;
+
+    public GifViewHolder(View itemView) {
+      super(itemView);
+      gifView = (ImageView) itemView.findViewById(R.id.gif_view);
+    }
+  }
 }
diff --git a/samples/giphy/src/main/res/layout/activity_main.xml b/samples/giphy/src/main/res/layout/activity_main.xml
index 629745ecb..332705305 100644
--- a/samples/giphy/src/main/res/layout/activity_main.xml
+++ b/samples/giphy/src/main/res/layout/activity_main.xml
@@ -2,24 +2,18 @@
               xmlns:tools="http://schemas.android.com/tools"
               android:layout_width="match_parent"
               android:layout_height="match_parent"
-              android:paddingLeft="@dimen/activity_horizontal_margin"
-              android:paddingRight="@dimen/activity_horizontal_margin"
-              android:paddingTop="@dimen/activity_vertical_margin"
-              android:paddingBottom="@dimen/activity_vertical_margin"
+              android:layout_margin="@dimen/activity_margin"
               android:orientation="vertical"
               tools:context=".MainActivity">
-
     <ImageView
         android:id="@+id/giphy_logo_view"
         android:layout_width="100dp"
         android:layout_height="50dp"
         android:layout_gravity="center_horizontal"
-        android:contentDescription="@string/giphy_logo_description"
-        />
-
-    <ListView
+        android:contentDescription="@string/giphy_logo_description" />
+    <android.support.v7.widget.RecyclerView
         android:id="@+id/gif_list"
-        android:layout_width="match_parent"
         android:layout_height="0dp"
+        android:layout_width="match_parent"
         android:layout_weight="1"/>
 </LinearLayout>
diff --git a/samples/giphy/src/main/res/values-w820dp/dimens.xml b/samples/giphy/src/main/res/values-w820dp/dimens.xml
deleted file mode 100644
index 63fc81644..000000000
--- a/samples/giphy/src/main/res/values-w820dp/dimens.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<resources>
-    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
-         (such as screen margins) for screens with more than 820dp of available width. This
-         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
-    <dimen name="activity_horizontal_margin">64dp</dimen>
-</resources>
diff --git a/samples/giphy/src/main/res/values/dimens.xml b/samples/giphy/src/main/res/values/dimens.xml
index 47c822467..e641ba457 100644
--- a/samples/giphy/src/main/res/values/dimens.xml
+++ b/samples/giphy/src/main/res/values/dimens.xml
@@ -1,5 +1,3 @@
 <resources>
-    <!-- Default screen margins, per the Android Design guidelines. -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="activity_margin">16dp</dimen>
 </resources>
diff --git a/samples/samples.iml b/samples/samples.iml
deleted file mode 100644
index b1fe502a8..000000000
--- a/samples/samples.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":samples" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="glide-parent" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":samples" />
-      </configuration>
-    </facet>
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/samples/svg/lint.xml b/samples/svg/lint.xml
new file mode 100644
index 000000000..95a2ab036
--- /dev/null
+++ b/samples/svg/lint.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <!-- Not supported by all build systems -->
+    <issue id="GradleOverrides" severity="ignore" />
+</lint>
diff --git a/samples/svg/src/main/AndroidManifest.xml b/samples/svg/src/main/AndroidManifest.xml
index 9eb410d93..218bbe4b5 100644
--- a/samples/svg/src/main/AndroidManifest.xml
+++ b/samples/svg/src/main/AndroidManifest.xml
@@ -4,6 +4,10 @@
 
     <uses-permission android:name="android.permission.INTERNET"/>
 
+    <uses-sdk
+            android:minSdkVersion="10"
+            android:targetSdkVersion="22" />
+
     <application
         android:allowBackup="true"
         android:icon="@android:drawable/sym_def_app_icon"
diff --git a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgSoftwareLayerSetter.java b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgSoftwareLayerSetter.java
index 5c7095db9..c3b4aa003 100644
--- a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgSoftwareLayerSetter.java
+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgSoftwareLayerSetter.java
@@ -5,6 +5,8 @@
 import android.os.Build;
 import android.widget.ImageView;
 
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.ImageViewTarget;
 import com.bumptech.glide.request.target.Target;
@@ -18,7 +20,7 @@
 public class SvgSoftwareLayerSetter implements RequestListener<PictureDrawable> {
 
   @Override
-  public boolean onLoadFailed(Object model, Target<PictureDrawable> target,
+  public boolean onLoadFailed(GlideException e, Object model, Target<PictureDrawable> target,
       boolean isFirstResource) {
     ImageView view = ((ImageViewTarget<?>) target).getView();
     if (Build.VERSION_CODES.HONEYCOMB <= Build.VERSION.SDK_INT) {
@@ -29,7 +31,7 @@ public boolean onLoadFailed(Object model, Target<PictureDrawable> target,
 
   @Override
   public boolean onResourceReady(PictureDrawable resource, Object model,
-      Target<PictureDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {
+      Target<PictureDrawable> target, DataSource dataSource, boolean isFirstResource) {
     ImageView view = ((ImageViewTarget<?>) target).getView();
     if (Build.VERSION_CODES.HONEYCOMB <= Build.VERSION.SDK_INT) {
       view.setLayerType(ImageView.LAYER_TYPE_SOFTWARE, null);
diff --git a/samples/svg/svg.iml b/samples/svg/svg.iml
deleted file mode 100644
index e117df1e4..000000000
--- a/samples/svg/svg.iml
+++ /dev/null
@@ -1,94 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":samples:svg" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="glide-parent.samples" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":samples:svg" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="library" exported="" name="androidsvg-1.2.1" level="project" />
-    <orderEntry type="module" module-name="library" exported="" />
-    <orderEntry type="module" module-name="disklrucache" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index 575e72c6c..6f0fe1a45 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,3 +1,6 @@
+exec {
+  commandLine "git", "submodule", "update", "--init", "--recursive"
+}
 include ':library'
 include ':glide'
 include ':third_party:gif_decoder'
@@ -10,6 +13,7 @@ include ':integration'
 include ':integration:volley'
 include ':integration:okhttp'
 include ':integration:gifencoder'
+include ':integration:recyclerview'
 include ':testutil'
 
 rootProject.name = 'glide-parent'
diff --git a/testutil/testutil.iml b/testutil/testutil.iml
deleted file mode 100644
index 8f6e72822..000000000
--- a/testutil/testutil.iml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":testutil" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="glide-parent" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":testutil" />
-      </configuration>
-    </facet>
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/classes/main" />
-    <output-test url="file://$MODULE_DIR$/build/classes/test" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="truth-0.24" level="project" />
-    <orderEntry type="library" exported="" name="guava-17.0" level="project" />
-    <orderEntry type="library" exported="" name="junit-4.10" level="project" />
-    <orderEntry type="library" exported="" name="hamcrest-core-1.1" level="project" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/third_party/disklrucache b/third_party/disklrucache
index c115bbe41..847e0dad0 160000
--- a/third_party/disklrucache
+++ b/third_party/disklrucache
@@ -1 +1 @@
-Subproject commit c115bbe419672669daf78c33ebe2a7ff7d5eb566
+Subproject commit 847e0dad08098c57e6dd12104463780e47e8e24e
diff --git a/third_party/gif_decoder/build.gradle b/third_party/gif_decoder/build.gradle
index 4ab209946..9857cf758 100644
--- a/third_party/gif_decoder/build.gradle
+++ b/third_party/gif_decoder/build.gradle
@@ -1,13 +1,15 @@
 apply plugin: 'com.android.library'
-apply plugin: 'robolectric'
+apply plugin: 'org.robolectric'
 
 dependencies {
-    androidTestCompile project(':testutil')
-    androidTestCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    androidTestCompile "junit:junit:${JUNIT_VERSION}"
-    androidTestCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
-    androidTestCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+
+    testCompile project(':testutil')
+    testCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
+    testCompile "junit:junit:${JUNIT_VERSION}"
+    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
 }
 
 android {
diff --git a/third_party/gif_decoder/gif_decoder.iml b/third_party/gif_decoder/gif_decoder.iml
deleted file mode 100644
index 28839242f..000000000
--- a/third_party/gif_decoder/gif_decoder.iml
+++ /dev/null
@@ -1,122 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":third_party:gif_decoder" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/../.." external.system.id="GRADLE" external.system.module.group="glide-parent.third_party" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":third_party:gif_decoder" />
-      </configuration>
-    </facet>
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
-        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugTest" />
-        <option name="SOURCE_GEN_TASK_NAME" value="generateDebugSources" />
-        <option name="TEST_SOURCE_GEN_TASK_NAME" value="generateDebugTestSources" />
-        <option name="ALLOW_USER_CONFIGURATION" value="false" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
-        <option name="LIBRARY_PROJECT" value="true" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/test/debug" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/test/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/generated/test/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/build/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/bundles" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/coverage-instrumented-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex-cache" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/jacoco" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/javaResources" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/libs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/lint" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/ndk" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/proguard" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
-      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
-      <excludeFolder url="file://$MODULE_DIR$/build/reports" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-classes" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-report" />
-      <excludeFolder url="file://$MODULE_DIR$/build/test-results" />
-      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-resources-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="support-v4-21.0.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="truth-0.24" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="accessibility-test-framework-1.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="bcprov-jdk16-1.46" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="sqlite4java-0.282" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="maven-ant-tasks-2.1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="commons-codec-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-annotations-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="vtd-xml-2.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-commons-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="hamcrest-core-1.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="junit-4.11" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-tree-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-analysis-5.0.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="robolectric-utils-3.0-rc2" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="shadows-core-3.0-rc2-21" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="icu4j-53.1" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="mockito-all-1.9.5" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="support-annotations-21.0.3" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="guava-17.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="ant-launcher-1.8.0" level="project" />
-    <orderEntry type="library" exported="" scope="TEST" name="asm-util-5.0.1" level="project" />
-    <orderEntry type="module" module-name="testutil" exported="" />
-  </component>
-</module>
\ No newline at end of file
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
index ca9149334..6e881fa23 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
@@ -22,9 +22,12 @@
  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
+
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
 import java.io.ByteArrayOutputStream;
@@ -38,16 +41,16 @@
  * Reads frame data from a GIF image source and decodes it into individual frames for animation
  * purposes.  Image data can be read from either and InputStream source or a byte[].
  *
- * This class is optimized for running animations with the frames, there are no methods to get
+ * <p>This class is optimized for running animations with the frames, there are no methods to get
  * individual frame images, only to decode the next frame in the animation sequence.  Instead, it
  * lowers its memory footprint by only housing the minimum data necessary to decode the next frame
  * in the animation sequence.
  *
- * The animation must be manually moved forward using {@link #advance()} before requesting the next
- * frame.  This method must also be called before you request the first frame or an error will
- * occur.
+ * <p>The animation must be manually moved forward using {@link #advance()} before requesting the
+ * next frame.  This method must also be called before you request the first frame or an error
+ * will occur.
  *
- * Implementation adapted from sample code published in Lyons. (2004). <em>Java for
+ * <p>Implementation adapted from sample code published in Lyons. (2004). <em>Java for
  * Programmers</em>, republished under the MIT Open Source License
  */
 public class GifDecoder {
@@ -97,12 +100,6 @@
 
   private static final int BYTES_PER_INTEGER = 4;
 
-  // We can't tell if a gif has transparency to decode a partial frame on top of a previous
-  // frame, or if the final frame will actually have transparent pixels, so we must always use a
-  // format that supports  transparency. We can't use ARGB_4444 because of framework issues drawing
-  // onto ARGB_4444 Bitmaps using Canvas.
-  private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;
-
   // Global File Header values and parsing flags.
   // Active color table.
   private int[] act;
@@ -111,7 +108,14 @@
   private ByteBuffer rawData;
 
   // Raw data read working array.
-  private final byte[] block = new byte[256];
+  private byte[] block;
+
+  // Temporary buffer for block reading. Reads 16k chunks from the native buffer for processing,
+  // to greatly reduce JNI overhead.
+  private static final int WORK_BUFFER_SIZE = 16384;
+  @Nullable private byte[] workBuffer;
+  private int workBufferSize = 0;
+  private int workBufferPosition = 0;
 
   private GifHeaderParser parser;
 
@@ -139,20 +143,44 @@
    */
   public interface BitmapProvider {
     /**
-     * Returns an {@link Bitmap} with exactly the given dimensions and config, or null if no such
-     * {@link Bitmap} could be obtained.
+     * Returns an {@link Bitmap} with exactly the given dimensions and config.
      *
      * @param width  The width in pixels of the desired {@link android.graphics.Bitmap}.
      * @param height The height in pixels of the desired {@link android.graphics.Bitmap}.
      * @param config The {@link android.graphics.Bitmap.Config} of the desired {@link
      *               android.graphics.Bitmap}.
      */
+    @NonNull
     Bitmap obtain(int width, int height, Bitmap.Config config);
 
     /**
      * Releases the given Bitmap back to the pool.
      */
     void release(Bitmap bitmap);
+
+    /**
+     * Returns a byte array used for decoding and generating the frame bitmap.
+     *
+     * @param size the size of the byte array to obtain
+     */
+    byte[] obtainByteArray(int size);
+
+    /**
+     * Releases the given byte array back to the pool.
+     */
+    void release(byte[] bytes);
+
+    /**
+     * Returns an int array used for decoding/generating the frame bitmaps.
+     * @param size
+     */
+    int[] obtainIntArray(int size);
+
+    /**
+     * Release the given array back to the pool.
+     * @param array
+     */
+    void release(int[] array);
   }
 
   public GifDecoder(BitmapProvider provider, GifHeader gifHeader, ByteBuffer rawData) {
@@ -219,7 +247,7 @@ public int getDelay(int n) {
    */
   public int getNextDelay() {
     if (header.frameCount <= 0 || framePointer < 0) {
-      return -1;
+      return 0;
     }
 
     return getDelay(framePointer);
@@ -243,8 +271,12 @@ public int getCurrentFrameIndex() {
     return framePointer;
   }
 
+  /**
+   * Resets the frame pointer to before the 0th frame, as if we'd never used this decoder to
+   * decode any frames.
+   */
   public void resetFrameIndex() {
-    framePointer = -1;
+    framePointer = INITIAL_FRAME_POINTER;
   }
 
   /**
@@ -292,6 +324,8 @@ public synchronized Bitmap getNextFrame() {
       previousFrame = header.frames.get(previousIndex);
     }
 
+    final int savedBgColor = header.bgColor;
+
     // Set the appropriate color table.
     if (currentFrame.lct == null) {
       act = header.gct;
@@ -324,6 +358,7 @@ public synchronized Bitmap getNextFrame() {
     if (currentFrame.transparency) {
       act[currentFrame.transIndex] = save;
     }
+    header.bgColor = savedBgColor;
 
     return result;
   }
@@ -367,14 +402,24 @@ public int read(InputStream is, int contentLength) {
 
   public void clear() {
     header = null;
-    mainPixels = null;
-    mainScratch = null;
+    if (mainPixels != null) {
+      bitmapProvider.release(mainPixels);
+    }
+    if (mainScratch != null) {
+      bitmapProvider.release(mainScratch);
+    }
     if (previousImage != null) {
       bitmapProvider.release(previousImage);
     }
     previousImage = null;
     rawData = null;
     isFirstFrameTransparent = false;
+    if (block != null) {
+      bitmapProvider.release(block);
+    }
+    if (workBuffer != null) {
+      bitmapProvider.release(workBuffer);
+    }
   }
 
   public synchronized void setData(GifHeader header, byte[] data) {
@@ -397,7 +442,7 @@ public synchronized void setData(GifHeader header, ByteBuffer buffer, int sample
     framePointer = INITIAL_FRAME_POINTER;
     // Initialize the raw data buffer.
     rawData = buffer.asReadOnlyBuffer();
-    rawData.rewind();
+    rawData.position(0);
     rawData.order(ByteOrder.LITTLE_ENDIAN);
 
     // No point in specially saving an old frame if we're never going to use it.
@@ -413,8 +458,9 @@ public synchronized void setData(GifHeader header, ByteBuffer buffer, int sample
     // Now that we know the size, init scratch arrays.
     // TODO: Find a way to avoid this entirely or at least downsample it
     // (either should be possible).
-    mainPixels = new byte[header.width * header.height];
-    mainScratch = new int[(header.width / sampleSize) * (header.height / sampleSize)];
+    mainPixels = bitmapProvider.obtainByteArray(header.width * header.height);
+    mainScratch =
+        bitmapProvider.obtainIntArray((header.width / sampleSize) * (header.height / sampleSize));
     downsampledWidth = header.width / sampleSize;
     downsampledHeight = header.height / sampleSize;
   }
@@ -602,6 +648,8 @@ private int averageColorsNear(int positionInMainPixels, int maxPositionInMainPix
    * Decodes LZW image data into pixel array. Adapted from John Cristy's BitmapMagick.
    */
   private void decodeBitmapData(GifFrame frame) {
+    workBufferSize = 0;
+    workBufferPosition = 0;
     if (frame != null) {
       // Jump to the frame start position.
       rawData.position(frame.bufferFrameStart);
@@ -614,7 +662,7 @@ private void decodeBitmapData(GifFrame frame) {
 
     if (mainPixels == null || mainPixels.length < npix) {
       // Allocate new pixel array.
-      mainPixels = new byte[npix];
+      mainPixels = bitmapProvider.obtainByteArray(npix);
     }
     if (prefix == null) {
       prefix = new short[MAX_STACK_SIZE];
@@ -627,7 +675,7 @@ private void decodeBitmapData(GifFrame frame) {
     }
 
     // Initialize GIF data stream decoder.
-    dataSize = read();
+    dataSize = readByte();
     clear = 1 << dataSize;
     endOfInformation = clear + 1;
     available = clear + 2;
@@ -728,17 +776,32 @@ private void decodeBitmapData(GifFrame frame) {
     }
   }
 
+  /**
+   * Reads the next chunk for the intermediate work buffer.
+   */
+  private void readChunkIfNeeded() {
+    if (workBufferSize > workBufferPosition) {
+      return;
+    }
+    if (workBuffer == null) {
+      workBuffer = bitmapProvider.obtainByteArray(WORK_BUFFER_SIZE);
+    }
+    workBufferPosition = 0;
+    workBufferSize = Math.min(rawData.remaining(), WORK_BUFFER_SIZE);
+    rawData.get(workBuffer, 0, workBufferSize);
+  }
+
   /**
    * Reads a single byte from the input stream.
    */
-  private int read() {
-    int curByte = 0;
+  private int readByte() {
     try {
-      curByte = rawData.get() & 0xFF;
+      readChunkIfNeeded();
+      return workBuffer[workBufferPosition++] & 0xFF;
     } catch (Exception e) {
       status = STATUS_FORMAT_ERROR;
+      return 0;
     }
-    return curByte;
   }
 
   /**
@@ -747,32 +810,40 @@ private int read() {
    * @return number of bytes stored in "buffer".
    */
   private int readBlock() {
-    int blockSize = read();
-    int n = 0;
+    int blockSize = readByte();
     if (blockSize > 0) {
       try {
-        int count;
-        while (n < blockSize) {
-          count = blockSize - n;
-          rawData.get(block, n, count);
-
-          n += count;
+        if (block == null) {
+          block = bitmapProvider.obtainByteArray(255);
+        }
+        final int remaining = workBufferSize - workBufferPosition;
+        if (remaining >= blockSize) {
+          // Block can be read from the current work buffer.
+          System.arraycopy(workBuffer, workBufferPosition, block, 0, blockSize);
+          workBufferPosition += blockSize;
+        } else if (rawData.remaining() + remaining >= blockSize) {
+          // Block can be read in two passes.
+          System.arraycopy(workBuffer, workBufferPosition, block, 0, remaining);
+          workBufferPosition = workBufferSize;
+          readChunkIfNeeded();
+          final int secondHalfRemaining = blockSize - remaining;
+          System.arraycopy(workBuffer, 0, block, remaining, secondHalfRemaining);
+          workBufferPosition += secondHalfRemaining;
+        } else {
+          status = STATUS_FORMAT_ERROR;
         }
       } catch (Exception e) {
         Log.w(TAG, "Error Reading Block", e);
         status = STATUS_FORMAT_ERROR;
       }
     }
-    return n;
+    return blockSize;
   }
 
   private Bitmap getNextBitmap() {
     Bitmap.Config config = isFirstFrameTransparent
         ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;
     Bitmap result = bitmapProvider.obtain(downsampledWidth, downsampledHeight, config);
-    if (result == null) {
-      result = Bitmap.createBitmap(downsampledWidth, downsampledHeight, config);
-    }
     setAlpha(result);
     return result;
   }
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
index 8fcd49a7b..3a0a16bb7 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifHeaderParser.java
@@ -17,7 +17,7 @@
   public static final String TAG = "GifHeaderParser";
 
   // The minimum frame delay in hundredths of a second.
-  static final int MIN_FRAME_DELAY = 3;
+  static final int MIN_FRAME_DELAY = 2;
   // The default frame delay in hundredths of a second for GIFs with frame delays less than the
   // minimum.
   static final int DEFAULT_FRAME_DELAY = 10;
@@ -33,7 +33,7 @@
   public GifHeaderParser setData(ByteBuffer data) {
     reset();
     rawData = data.asReadOnlyBuffer();
-    rawData.rewind();
+    rawData.position(0);
     rawData.order(ByteOrder.LITTLE_ENDIAN);
     return this;
   }
@@ -79,13 +79,32 @@ public GifHeader parseHeader() {
     return header;
   }
 
+  /**
+   * Determines if the GIF is animated by trying to read in the first 2 frames
+   * This method reparses the data even if the header has already been read.
+   */
+  public boolean isAnimated() {
+    readHeader();
+    if (!err()) {
+      readContents(2 /* maxFrames */);
+    }
+    return header.frameCount > 1;
+  }
+
   /**
    * Main file parser. Reads GIF content blocks.
    */
   private void readContents() {
+    readContents(Integer.MAX_VALUE /* maxFrames */);
+  }
+
+  /**
+   * Main file parser. Reads GIF content blocks. Stops after reading maxFrames
+   */
+  private void readContents(int maxFrames) {
     // Read GIF file content blocks.
     boolean done = false;
-    while (!(done || err())) {
+    while (!(done || err() || header.frameCount > maxFrames)) {
       int code = read();
       switch (code) {
         // Image separator.
diff --git a/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
similarity index 87%
rename from third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
rename to third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
index aae1cb15d..94d081f3c 100644
--- a/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
+++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
 
 import com.bumptech.glide.testutil.TestUtil;
 
@@ -20,7 +21,7 @@
  * Tests for {@link com.bumptech.glide.gifdecoder.GifDecoder}.
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, emulateSdk = 18)
+@Config(manifest = Config.NONE, sdk = 18)
 public class GifDecoderTest {
 
   private MockProvider provider;
@@ -95,6 +96,7 @@ public void testSettingDataResetsFramePointer() {
 
   private static class MockProvider implements GifDecoder.BitmapProvider {
 
+    @NonNull
     @Override
     public Bitmap obtain(int width, int height, Bitmap.Config config) {
       Bitmap result = Bitmap.createBitmap(width, height, config);
@@ -106,5 +108,26 @@ public Bitmap obtain(int width, int height, Bitmap.Config config) {
     public void release(Bitmap bitmap) {
       // Do nothing.
     }
+
+    @Override
+    public byte[] obtainByteArray(int size) {
+      return new byte[size];
+    }
+
+    @Override
+    public void release(byte[] bytes) {
+      // Do nothing.
+    }
+
+    @Override
+    public int[] obtainIntArray(int size) {
+      return new int[size];
+    }
+
+    @Override
+    public void release(int[] array) {
+      // Do Nothing
+    }
+
   }
 }
diff --git a/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java
similarity index 84%
rename from third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java
rename to third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java
index 4f7e3c8e6..22f2e5c78 100644
--- a/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java
+++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifHeaderParserTest.java
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 
 import com.bumptech.glide.gifdecoder.test.GifBytesTestUtil;
 import com.bumptech.glide.testutil.TestUtil;
@@ -214,9 +215,52 @@ public void testCanParseMultipleFrames() {
     assertEquals(expectedFrames, header.frames.size());
   }
 
+  @Test
+  public void testIsAnimatedMultipleFrames() {
+    final int lzwMinCodeSize = 2;
+    final int numFrames = 3;
+
+    final int frameSize =
+        GifBytesTestUtil.IMAGE_DESCRIPTOR_LENGTH
+            + GifBytesTestUtil.getImageDataSize(lzwMinCodeSize);
+    ByteBuffer buffer =
+        ByteBuffer.allocate(GifBytesTestUtil.HEADER_LENGTH + numFrames * frameSize)
+            .order(ByteOrder.LITTLE_ENDIAN);
+
+    GifBytesTestUtil.writeHeaderAndLsd(buffer, 1, 1, false, 0);
+    for (int i = 0; i < numFrames; i++) {
+      GifBytesTestUtil.writeImageDescriptor(buffer, 0, 0, 1, 1, false /*hasLct*/, 0 /*numColors*/);
+      GifBytesTestUtil.writeFakeImageData(buffer, 2);
+    }
+
+    parser.setData(buffer.array());
+    assertTrue(parser.isAnimated());
+  }
+
+  @Test
+  public void testIsNotAnimatedOneFrame() {
+    final int lzwMinCodeSize = 2;
+
+    final int frameSize =
+        GifBytesTestUtil.IMAGE_DESCRIPTOR_LENGTH
+            + GifBytesTestUtil.getImageDataSize(lzwMinCodeSize);
+
+    ByteBuffer buffer =
+        ByteBuffer.allocate(GifBytesTestUtil.HEADER_LENGTH + frameSize)
+            .order(ByteOrder.LITTLE_ENDIAN);
+
+    GifBytesTestUtil.writeHeaderAndLsd(buffer, 1, 1, false, 0);
+    GifBytesTestUtil.writeImageDescriptor(buffer, 0, 0, 1, 1, false /*hasLct*/, 0 /*numColors*/);
+    GifBytesTestUtil.writeFakeImageData(buffer, 2);
+
+    parser.setData(buffer.array());
+    assertFalse(parser.isAnimated());
+  }
+
+
   @Test(expected = IllegalStateException.class)
   public void testThrowsIfParseHeaderCalledBeforeSetData() {
     GifHeaderParser parser = new GifHeaderParser();
     parser.parseHeader();
   }
-}
\ No newline at end of file
+}
diff --git a/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtil.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtil.java
similarity index 100%
rename from third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtil.java
rename to third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtil.java
diff --git a/third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtilTest.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtilTest.java
similarity index 100%
rename from third_party/gif_decoder/src/androidTest/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtilTest.java
rename to third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/test/GifBytesTestUtilTest.java
diff --git a/third_party/gif_decoder/src/androidTest/resources/gif_without_graphical_control_extension.gif b/third_party/gif_decoder/src/test/resources/gif_without_graphical_control_extension.gif
similarity index 100%
rename from third_party/gif_decoder/src/androidTest/resources/gif_without_graphical_control_extension.gif
rename to third_party/gif_decoder/src/test/resources/gif_without_graphical_control_extension.gif
diff --git a/third_party/gif_decoder/src/androidTest/resources/partial_gif_decode.gif b/third_party/gif_decoder/src/test/resources/partial_gif_decode.gif
similarity index 100%
rename from third_party/gif_decoder/src/androidTest/resources/partial_gif_decode.gif
rename to third_party/gif_decoder/src/test/resources/partial_gif_decode.gif
diff --git a/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java
index aa1123f67..e08a214f7 100644
--- a/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java
+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/AnimatedGifEncoder.java
@@ -22,6 +22,7 @@
  *     e.setDelay(1000);   // 1 frame per sec
  *     e.addFrame(image1);
  *     e.addFrame(image2);
+ *     e.addFrame(image3, 100, 100);    // set position of the frame
  *     e.finish();
  * </pre>
  *
@@ -38,13 +39,18 @@
 public class AnimatedGifEncoder {
     private static final String TAG = "AnimatedGifEncoder";
 
-    // The minimum % of an images pixels that must be transparent for us to set a transparent index automatically.
+    // The minimum % of an images pixels that must be transparent for us to set a transparent index
+    // automatically.
     private static final double MIN_TRANSPARENT_PERCENTAGE = 4d;
 
     private int width; // image size
 
     private int height;
 
+    private int fixedWidth;   // set by setSize()
+
+    private int fixedHeight;
+
     private Integer transparent = null; // transparent color if given
 
     private int transIndex; // transparent index in color table
@@ -140,22 +146,46 @@ public void setTransparent(int color) {
      * Adds next GIF frame. The frame is not written immediately, but is actually
      * deferred until the next frame is received so that timing data can be
      * inserted. Invoking <code>finish()</code> flushes all frames. If
-     * <code>setSize</code> was not invoked, the size of the first image is used
-     * for all subsequent frames.
+     * <code>setSize</code> was invoked, the size is used for all subsequent frames.
+     * Otherwise, the actual size of the image is used for each frames.
      *
      * @param im
      *          BufferedImage containing frame to write.
      * @return true if successful.
      */
     public boolean addFrame(Bitmap im) {
+        return addFrame(im, 0, 0);
+    }
+
+    /**
+     * Adds next GIF frame to the specified position. The frame is not written immediately, but is
+     * actually deferred until the next frame is received so that timing data can be inserted.
+     * Invoking <code>finish()</code> flushes all frames. If <code>setSize</code> was invoked, the
+     * size is used for all subsequent frames. Otherwise, the actual size of the image is used for
+     * each frame.
+     *
+     * See page 11 of http://giflib.sourceforge.net/gif89.txt for the position of the frame
+     *
+     * @param im
+     *          BufferedImage containing frame to write.
+     * @param x
+     *          Column number, in pixels, of the left edge of the image, with respect to the left
+     *          edge of the Logical Screen.
+     * @param y
+     *          Row number, in pixels, of the top edge of the image with respect to the top edge of
+     *          the Logical Screen.
+     * @return true if successful.
+     */
+    public boolean addFrame(Bitmap im, int x, int y) {
         if ((im == null) || !started) {
             return false;
         }
         boolean ok = true;
         try {
-            if (!sizeSet) {
-                // use first frame's size
-                setSize(im.getWidth(), im.getHeight());
+            if (sizeSet) {
+                setFrameSize(fixedWidth, fixedHeight);
+            } else {
+                setFrameSize(im.getWidth(), im.getHeight());
             }
             image = im;
             getImagePixels(); // convert to correct format if necessary
@@ -169,7 +199,7 @@ public boolean addFrame(Bitmap im) {
                 }
             }
             writeGraphicCtrlExt(); // write graphic control extension
-            writeImageDesc(); // image descriptor
+            writeImageDesc(x, y); // image descriptor
             if (!firstFrame) {
                 writePalette(); // local color table
             }
@@ -243,8 +273,8 @@ public void setQuality(int quality) {
     }
 
     /**
-     * Sets the GIF frame size. The default size is the size of the first frame
-     * added if this method is not invoked.
+     * Sets the fixed GIF frame size for all the frames.
+     * This should be called before start.
      *
      * @param w
      *          int frame width.
@@ -252,15 +282,33 @@ public void setQuality(int quality) {
      *          int frame width.
      */
     public void setSize(int w, int h) {
-        if (started && !firstFrame)
+        if (started) {
             return;
+        }
+
+        fixedWidth = w;
+        fixedHeight = h;
+        if (fixedWidth < 1) {
+            fixedWidth = 320;
+        }
+        if (fixedHeight < 1) {
+            fixedHeight = 240;
+        }
+
+        sizeSet = true;
+    }
+
+    /**
+     * Sets current GIF frame size.
+     *
+     * @param w
+     *          int frame width.
+     * @param h
+     *          int frame width.
+     */
+    private void setFrameSize(int w, int h) {
         width = w;
         height = h;
-        if (width < 1)
-            width = 320;
-        if (height < 1)
-            height = 240;
-        sizeSet = true;
     }
 
     /**
@@ -400,11 +448,12 @@ private void getImagePixels() {
         }
 
         double transparentPercentage = 100 * totalTransparentPixels / (double) pixelsInt.length;
-        // Assume images with greater where more than n% of the pixels are transparent actually have transparency.
-        // See issue #214.
+        // Assume images with greater where more than n% of the pixels are transparent actually have
+        // transparency. See issue #214.
         hasTransparentPixels = transparentPercentage > MIN_TRANSPARENT_PERCENTAGE;
         if (Log.isLoggable(TAG, Log.DEBUG)) {
-            Log.d(TAG, "got pixels for frame with " + transparentPercentage + "% transparent pixels");
+            Log.d(TAG, "got pixels for frame with " + transparentPercentage
+                + "% transparent pixels");
         }
     }
 
@@ -442,10 +491,10 @@ private void writeGraphicCtrlExt() throws IOException {
     /**
      * Writes Image Descriptor
      */
-    private void writeImageDesc() throws IOException {
+    private void writeImageDesc(int x, int y) throws IOException {
         out.write(0x2c); // image separator
-        writeShort(0); // image position x,y = 0,0
-        writeShort(0);
+        writeShort(x); // image position
+        writeShort(y);
         writeShort(width); // image size
         writeShort(height);
         // packed fields
diff --git a/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/LZWEncoder.java b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/LZWEncoder.java
index 0d61ef48a..41febf606 100644
--- a/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/LZWEncoder.java
+++ b/third_party/gif_encoder/src/main/java/com/bumptech/glide/gifencoder/LZWEncoder.java
@@ -6,7 +6,6 @@
 // ==============================================================================
 // Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.
 // K Weiner 12/00
-
 class LZWEncoder {
 
     private static final int EOF = -1;
diff --git a/third_party/third_party.iml b/third_party/third_party.iml
deleted file mode 100644
index 8c99928f0..000000000
--- a/third_party/third_party.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id=":third_party" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="glide-parent" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android-gradle" name="Android-Gradle">
-      <configuration>
-        <option name="GRADLE_PROJECT_PATH" value=":third_party" />
-      </configuration>
-    </facet>
-    <facet type="java-gradle" name="Java-Gradle">
-      <configuration>
-        <option name="BUILD_FOLDER_PATH" />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
-      <excludeFolder url="file://$MODULE_DIR$/build" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
