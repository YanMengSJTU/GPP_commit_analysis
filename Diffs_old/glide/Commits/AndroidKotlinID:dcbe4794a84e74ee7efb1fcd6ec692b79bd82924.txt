diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
index 3db778951..98595daf3 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
@@ -16,14 +16,8 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.TypeMirror;
 
 /**
  * Generates a new implementation of a AppGlideModule that calls all included LibraryGlideModules
@@ -86,11 +80,9 @@
   private static final String GENERATED_APP_MODULE_IMPL_SIMPLE_NAME = "GeneratedAppGlideModuleImpl";
   private static final String GENERATED_ROOT_MODULE_SIMPLE_NAME = "GeneratedAppGlideModule";
 
-  private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
 
-  AppModuleGenerator(ProcessingEnvironment processingEnv, ProcessorUtil processorUtil) {
-    this.processingEnv = processingEnv;
+  AppModuleGenerator(ProcessorUtil processorUtil) {
     this.processorUtil = processorUtil;
   }
 
@@ -239,52 +231,12 @@ private MethodSpec generateRegisterComponents(
     return registerComponents.build();
   }
 
-  private boolean doesAppGlideModuleConstructorAcceptContext(ClassName appGlideModule) {
-    TypeElement appGlideModuleType =
-        processingEnv.getElementUtils().getTypeElement(appGlideModule.reflectionName());
-
-    for (Element enclosed : appGlideModuleType.getEnclosedElements()) {
-      if (enclosed.getKind() == ElementKind.CONSTRUCTOR) {
-        ExecutableElement constructor = (ExecutableElement) enclosed;
-        List<? extends VariableElement> parameters = constructor.getParameters();
-        if (parameters.isEmpty()) {
-          return false;
-        } else if (parameters.size() > 1) {
-          throw new IllegalStateException(
-              "Constructor for "
-                  + appGlideModule
-                  + " accepts too many parameters"
-                  + ", it should accept no parameters, or a single Context");
-        } else {
-          VariableElement parameter = parameters.get(0);
-          TypeMirror parameterType = parameter.asType();
-          TypeMirror contextType =
-              processingEnv.getElementUtils().getTypeElement("android.content.Context").asType();
-          if (!processingEnv.getTypeUtils().isSameType(parameterType, contextType)) {
-            throw new IllegalStateException("Unrecognized type: " + parameterType);
-          }
-          return true;
-        }
-      }
-    }
-    return false;
-  }
-
   private MethodSpec generateConstructor(
       ClassName appGlideModule,
       Collection<String> libraryGlideModuleClassNames,
       Collection<String> excludedGlideModuleClassNames) {
-    MethodSpec.Builder constructorBuilder =
-        MethodSpec.constructorBuilder()
-            .addParameter(
-                ParameterSpec.builder(ClassName.get("android.content", "Context"), "context")
-                    .build());
-
-    if (doesAppGlideModuleConstructorAcceptContext(appGlideModule)) {
-      constructorBuilder.addStatement("appGlideModule = new $T(context)", appGlideModule);
-    } else {
-      constructorBuilder.addStatement("appGlideModule = new $T()", appGlideModule);
-    }
+    MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
+    constructorBuilder.addStatement("appGlideModule = new $T()", appGlideModule);
 
     ClassName androidLogName = ClassName.get("android.util", "Log");
 
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
index 1d2f8b8f5..6fa850c5a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
@@ -36,7 +36,7 @@
     this.processingEnv = processingEnv;
     this.processorUtil = processorUtil;
 
-    appModuleGenerator = new AppModuleGenerator(processingEnv, processorUtil);
+    appModuleGenerator = new AppModuleGenerator(processorUtil);
     requestOptionsGenerator = new RequestOptionsGenerator(processingEnv, processorUtil);
     requestManagerGenerator = new RequestManagerGenerator(processingEnv, processorUtil);
     requestManagerFactoryGenerator =
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
index 5e145c622..e4e14f972 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final AppModuleWithExcludes appGlideModule;
 
-  GeneratedAppGlideModuleImpl(Context context) {
+  GeneratedAppGlideModuleImpl() {
     appGlideModule = new AppModuleWithExcludes();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithExcludes");
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
index 53997c48b..fe59ab971 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final AppModuleWithLibraryInPackage appGlideModule;
 
-  GeneratedAppGlideModuleImpl(Context context) {
+  GeneratedAppGlideModuleImpl() {
     appGlideModule = new AppModuleWithLibraryInPackage();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithLibraryInPackage");
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
index d19b07c4a..02aac77b8 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final AppModuleWithMultipleExcludes appGlideModule;
 
-  GeneratedAppGlideModuleImpl(Context context) {
+  GeneratedAppGlideModuleImpl() {
     appGlideModule = new AppModuleWithMultipleExcludes();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithMultipleExcludes");
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
index 48c71a9d9..759ec2325 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
@@ -12,7 +12,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final EmptyAppModule appGlideModule;
 
-  GeneratedAppGlideModuleImpl(Context context) {
+  GeneratedAppGlideModuleImpl() {
     appGlideModule = new EmptyAppModule();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.EmptyAppModule");
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
index 8c2b56f99..56bdd756e 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
@@ -11,7 +11,7 @@
 final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
   private final EmptyAppModule appGlideModule;
 
-  GeneratedAppGlideModuleImpl(Context context) {
+  GeneratedAppGlideModuleImpl() {
     appGlideModule = new EmptyAppModule();
     if (Log.isLoggable("Glide", Log.DEBUG)) {
       Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.EmptyAppModule");
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 6a2c652d1..4283555ac 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -172,8 +172,7 @@ public static File getPhotoCacheDir(@NonNull Context context, @NonNull String ca
   @NonNull
   public static Glide get(@NonNull Context context) {
     if (glide == null) {
-      GeneratedAppGlideModule annotationGeneratedModule =
-          getAnnotationGeneratedGlideModules(context.getApplicationContext());
+      GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
       synchronized (Glide.class) {
         if (glide == null) {
           checkAndInitializeGlide(context, annotationGeneratedModule);
@@ -215,7 +214,7 @@ public static synchronized void init(Glide glide) {
 
   @VisibleForTesting
   public static void init(@NonNull Context context, @NonNull GlideBuilder builder) {
-    GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules(context);
+    GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
     synchronized (Glide.class) {
       if (Glide.glide != null) {
         tearDown();
@@ -306,15 +305,14 @@ private static void initializeGlide(
   }
 
   @Nullable
-  @SuppressWarnings({"unchecked", "TryWithIdenticalCatches"})
-  private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules(Context context) {
+  @SuppressWarnings({"unchecked", "deprecation", "TryWithIdenticalCatches"})
+  private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     GeneratedAppGlideModule result = null;
     try {
       Class<GeneratedAppGlideModule> clazz =
           (Class<GeneratedAppGlideModule>)
               Class.forName("com.bumptech.glide.GeneratedAppGlideModuleImpl");
-      result =
-          clazz.getDeclaredConstructor(Context.class).newInstance(context.getApplicationContext());
+      result = clazz.getDeclaredConstructor().newInstance();
     } catch (ClassNotFoundException e) {
       if (Log.isLoggable(TAG, Log.WARN)) {
         Log.w(
