diff --git a/README.md b/README.md
index f4bb5ed31..033f71469 100644
--- a/README.md
+++ b/README.md
@@ -31,8 +31,8 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.github.bumptech.glide:glide:4.9.0'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
+  implementation 'com.github.bumptech.glide:glide:4.10.0'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'
 }
 ```
 
@@ -42,12 +42,12 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.9.0</version>
+  <version>4.10.0</version>
 </dependency>
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.9.0</version>
+  <version>4.10.0</version>
   <optional>true</optional>
 </dependency>
 ```
diff --git a/glide/build.gradle b/glide/build.gradle
index 5704cfa64..bd60dbf64 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -2,11 +2,6 @@ import com.android.build.gradle.api.LibraryVariant
 
 apply plugin: 'java'
 
-// The paths of Android projects that should be included in the jar and javadoc.
-static def getAndroidPathsForJar() {
-    [':third_party:gif_decoder', ':library', ':third_party:disklrucache' ]
-}
-
 // The paths of Android projects that should be included only in Javadoc, not in the jar.
 static def getAndroidPathsForJavadoc() {
     [
@@ -16,7 +11,10 @@ static def getAndroidPathsForJavadoc() {
             ':integration:okhttp3',
             ':integration:recyclerview',
             ':integration:volley',
+            ':library',
             ':mocks',
+            ':third_party:disklrucache',
+            ':third_party:gif_decoder',
     ]
 }
 
@@ -25,7 +23,7 @@ static def getJavaPathsForJavadoc() {
     [':annotation']
 }
 
-(getAndroidPathsForJavadoc() + getAndroidPathsForJar() + getJavaPathsForJavadoc()).each {
+(getAndroidPathsForJavadoc() + getJavaPathsForJavadoc()).each {
     evaluationDependsOn(it)
 }
 
@@ -41,45 +39,21 @@ def getAndroidCompileSdkVersion() {
     project(':library').android.compileSdkVersion
 }
 
-def getInternalAndroidProjectsForJar() {
-    asProjects(getAndroidPathsForJar())
-}
-
-def getInternalAndroidProjectsForJavadoc() {
+def getAndroidProjectsForJavadoc() {
     asProjects(getAndroidPathsForJavadoc())
 }
 
-def getAndroidProjectsForJar() {
-    getAndroidLibraryVariantsForJar('debug')
-}
-
-def getAndroidLibraryVariantsForJar(variantName) {
-    getAndroidLibraryVariants(getInternalAndroidProjectsForJar(), variantName)
-}
-
-def getAndroidLibraryVariantsForJavadoc(variantName) {
-    getAndroidLibraryVariants(getInternalAndroidProjectsForJavadoc(), variantName)
-}
-
-static def getAndroidLibraryVariants(projects, variantName) {
-    projects.collect { project ->
+def getAndroidLibraryVariantsForJavadoc() {
+    getAndroidProjectsForJavadoc().collect { project ->
         project.android.libraryVariants.findAll { type ->
-            type.buildType.name.equalsIgnoreCase(variantName)
+            type.buildType.name.equalsIgnoreCase("debug")
         }
     }.sum()
 }
 
-def getSourceFilesForVariantJar(variantName) {
-    getAndroidLibraryVariantsForJar(variantName).collect { variant -> 
-        variant.getJavaCompileProvider().get().source.findAll { 
-            return !it.getName().equals("R.java")
-        }
-    }
-}
-
-def getSourceFilesForVariantJavadoc(variantName) {
-    getAndroidLibraryVariantsForJavadoc(variantName).collect { 
-        it.getJavaCompileProvider().get().source 
+def getSourceFilesForJavadoc() {
+    getAndroidProjectsForJavadoc().collect { project ->
+      project.android.sourceSets.main.java.srcDirs
     }
 }
 
@@ -91,57 +65,57 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
 // Generate javadocs and sources containing batched documentation and sources for all internal
 // projects.
-['debug'].each { variantName ->
-
-    def javadocTask = tasks.create("${variantName}Javadoc", Javadoc) {
-        source = getSourceFilesForVariantJar(variantName)
-        source += getSourceFilesForVariantJavadoc(variantName)
-      
-        doFirst {
-            it.classpath =
-                    project.files(
-                            getAndroidJar(),
-                            getAndroidLibraryVariantsForJar(variantName).collect {
-                                LibraryVariant lib ->
-                                    lib.getJavaCompileProvider().get().classpath.files
-                            },
-                            getAndroidLibraryVariantsForJavadoc(variantName).collect {
-                                LibraryVariant lib ->
-                                    lib.getJavaCompileProvider().get().classpath.files
-                            },
-                            // Finds dependencies of Android packages that would otherwise be
-                            // ignored (Volley in particular)
-                            getInternalAndroidProjectsForJavadoc().collect { Project project ->
-                                project.file('build/intermediates/classes/debug')
-                            }
-            )
-        }
-
-        options {
-            links("http://docs.oracle.com/javase/7/docs/api/")
-            links("https://square.github.io/okhttp/3.x/okhttp/")
-            links("https://square.github.io/okhttp/2.x/okhttp/")
-            linksOffline("http://d.android.com/reference",
-                    "${getAndroidSdkDirectory()}/docs/reference")
-        }
+def javadocTask = tasks.create("debugJavadoc", Javadoc) {
+    source = getSourceFilesForJavadoc()
+
+    doFirst {
+        it.classpath =
+                project.files(
+                        getAndroidJar(),
+                        getAndroidLibraryVariantsForJavadoc().collect {
+                            LibraryVariant lib ->
+                                lib.getJavaCompileProvider().get().classpath.files
+                        },
+                        // Finds dependencies of Android packages that would otherwise be
+                        // ignored (Volley in particular)
+                        getAndroidProjectsForJavadoc().collect { Project project ->
+                            project.file('build/intermediates/classes/debug')
+                        }
+        )
+    }
 
-        exclude '**/R.java'
+    options {
+        links("http://docs.oracle.com/javase/7/docs/api/")
+        links("https://square.github.io/okhttp/3.x/okhttp/")
+        links("https://square.github.io/okhttp/2.x/okhttp/")
+        linksOffline("http://d.android.com/reference",
+                "${getAndroidSdkDirectory()}/docs/reference")
     }
 
-    def cleanJavadocTask = task("clean${variantName.capitalize()}Javadoc", type: Delete) {
-        delete javadocTask.destinationDir
-    } as Task
-    clean.dependsOn(cleanJavadocTask)
+    exclude '**/R.java'
+}
+
+def cleanJavadocTask = task("cleanDebugJavadoc", type: Delete) {
+    delete javadocTask.destinationDir
+} as Task
+clean.dependsOn(cleanJavadocTask)
+
+def javadocJarTask = task("debugJavadocJar", type: Jar) {
+    from javadocTask.destinationDir
+} as Task
 
-    def javadocJarTask = task("${variantName}JavadocJar", type: Jar) {
-        from javadocTask.destinationDir
-    } as Task
-    javadocJarTask.dependsOn(javadocTask)
+javadocJarTask.dependsOn(javadocTask)
+
+(getAndroidProjectsForJavadoc()).each {
+    project ->
+        debugJavadoc.dependsOn(project.tasks.compileDebugSources)
+        jar.dependsOn(project.tasks.compileDebugSources)
 }
 
+
 jar {
     from files(
-            getAndroidProjectsForJar().collect { LibraryVariant variant ->
+            getAndroidLibraryVariantsForJavadoc().collect { LibraryVariant variant ->
                 variant.getJavaCompileProvider().get().destinationDir
             }
     )
@@ -149,12 +123,8 @@ jar {
     exclude "**/R\$*.class"
     exclude "android/**"
 }
+ 
 
-(getInternalAndroidProjectsForJar() + getInternalAndroidProjectsForJavadoc()).each {
-    project ->
-        debugJavadoc.dependsOn(project.tasks.compileDebugSources)
-        jar.dependsOn(project.tasks.compileDebugSources)
-}
 
 artifacts {
     archives debugJavadocJar {
diff --git a/gradle.properties b/gradle.properties
index dc490ff17..0b983e4d8 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,7 +1,7 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=false
 
-VERSION_NAME=4.10.0-SNAPSHOT
+VERSION_NAME=4.10.0
 VERSION_MAJOR=4
 VERSION_MINOR=10
 VERSION_PATCH=0
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index e55ca1a91..8ebf35628 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -68,6 +68,26 @@ public LruBitmapPool(long maxSize, Set<Bitmap.Config> allowedConfigs) {
     this(maxSize, getDefaultStrategy(), allowedConfigs);
   }
 
+  /** Returns the number of cache hits for bitmaps in the pool. */
+  public long hitCount() {
+    return hits;
+  }
+
+  /** Returns the number of cache misses for bitmaps in the pool. */
+  public long missCount() {
+    return misses;
+  }
+
+  /** Returns the number of bitmaps that have been evicted from the pool. */
+  public long evictionCount() {
+    return evictions;
+  }
+
+  /** Returns the current size of the pool in bytes. */
+  public long getCurrentSize() {
+    return currentSize;
+  }
+
   @Override
   public long getMaxSize() {
     return maxSize;
diff --git a/scripts/release_checks.sh b/scripts/release_checks.sh
index e25412f51..e4a43222d 100755
--- a/scripts/release_checks.sh
+++ b/scripts/release_checks.sh
@@ -32,7 +32,7 @@ echo "Setting version to $version"
 echo -n "Is this a correct? (y/n)? "
 read answer
 if echo "$answer" | grep -iq "^y" ; then
-  echo "Updating gradle.properties..."
+  echo "Updating gradle.properties"
 else
   echo "Cancelling"
   exit 1
@@ -43,45 +43,37 @@ sed -i '' "s/VERSION_MAJOR=.*/VERSION_MAJOR=$(echo $version | cut -d '.' -f 1)/"
 sed -i '' "s/VERSION_MINOR=.*/VERSION_MINOR=$(echo $version | cut -d '.' -f 2)/" gradle.properties
 sed -i '' "s/VERSION_PATCH=.*/VERSION_PATCH=$(echo $version | cut -d '.' -f 3 | sed 's/-.*//')/" gradle.properties
 
+if [[ $version != *"SNAPSHOT"* ]]; then
+  echo "Found release version, update README"
+  sed -i '' "s:<version>.*</version>:<version>${version}</version>:" README.md
+  sed -i '' "s/'com.github.bumptech.glide:glide:.*'/'com.github.bumptech.glide:glide:${version}'/" README.md
+  sed -i '' "s/'com.github.bumptech.glide:compiler:.*'/'com.github.bumptech.glide:compiler:${version}'/" README.md
+fi
+
 git diff
 
-echo "Updated gradle.properties, is this correct? (y/n)?"
+echo "Updated files, is this correct? (y/n)?"
 read answer
 if echo "$answer" | grep -iq "^y" ; then
-  echo "Committing..."
+  echo "Committing and pushing..."
 else
   echo "Cancelling"
   exit 1
 fi
 
-version_tag="v${version}"
+branchname="bump_version_to_${version}"
+
+git checkout -b $branchname
 git add gradle.properties
+git add README.md
 git commit -m "Bump version to ${version}"
-if [[ $version != *"SNAPSHOT"* ]]; then
-  echo "Found release version, adding tag, building and uploading"
-  git tag $version_tag
-
-  echo "Building... and uploading"
-  ./gradlew clean build --parallel
-  ./gradlew uploadArchives 
-
-  echo "Upload complete, please verify the output and upload the jars to the GitHub release."
-fi
-
-echo -n "Ready to push, continue? (y/n)? "
-read answer
-if echo "$answer" | grep -iq "^y" ; then
-  echo "Pushing commits"
-else
-  echo "Cancelling"
-  exit 1
-fi
-
-git push origin master
-git push bump master
-if [[ $version != *"SNAPSHOT"* ]]; then
-  echo "Found release version, pushing tags"
-  git push origin $version_tag
-  git push bump $version_tag
-fi
+git push origin $branchname
 
+echo "Now submit a PR and get it submitted internally."
+echo "Then tag the new commit with the new version (e.g. v4.10.0)."
+echo "And upload them:"
+echo "git push origin v4.10.0"
+echo "git push bump v4.10.0"
+echo "Then upload the build with:"
+echo "./gradlew clean build --parallel"
+echo "./gradlew uploadArchives"
