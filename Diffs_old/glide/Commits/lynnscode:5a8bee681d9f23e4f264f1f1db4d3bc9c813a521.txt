diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
index 870cb704a..69acfabca 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
@@ -14,6 +14,7 @@
 /**
  * A calculator that tries to intelligently determine cache sizes for a given device based on some
  * constants and the devices screen density, width, and height.
+ * 内存计算器,会根据设备屏幕密度,宽度,高度来确定缓存的大小
  */
 public final class MemorySizeCalculator {
   private static final String TAG = "MemorySizeCalculator";
@@ -34,22 +35,26 @@
   // Package private to avoid PMD warning.
   MemorySizeCalculator(MemorySizeCalculator.Builder builder) {
     this.context = builder.context;
-
-    arrayPoolSize =
-        isLowMemoryDevice(builder.activityManager)
+    //数组池的大小
+    arrayPoolSize = isLowMemoryDevice(builder.activityManager)
+            //如果是低内存设备,默认为4M/2=2M
             ? builder.arrayPoolSizeBytes / LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR
+            //高内存设备默认为4M
             : builder.arrayPoolSizeBytes;
+
+    //计算最大的可以使用内存
     int maxSize =
-        getMaxSize(
-            builder.activityManager, builder.maxSizeMultiplier, builder.lowMemoryMaxSizeMultiplier);
+        getMaxSize(builder.activityManager, builder.maxSizeMultiplier, builder.lowMemoryMaxSizeMultiplier);
 
     int widthPixels = builder.screenDimensions.getWidthPixels();
     int heightPixels = builder.screenDimensions.getHeightPixels();
+    //screenSize = 宽度*高度*4
     int screenSize = widthPixels * heightPixels * BYTES_PER_ARGB_8888_PIXEL;
-
+    //bitmapPool大小 =屏幕尺寸*图片的大小(四舍五入),在8.0的系统上有特殊处理
     int targetBitmapPoolSize = Math.round(screenSize * builder.bitmapPoolScreens);
-
+    //MemoryCache大小 = 屏幕尺寸*2 (四舍五入),默认为 2
     int targetMemoryCacheSize = Math.round(screenSize * builder.memoryCacheScreens);
+    //可用大小 = 最大可用内存-arrayPoolSize的大小
     int availableSize = maxSize - arrayPoolSize;
 
     if (targetMemoryCacheSize + targetBitmapPoolSize <= availableSize) {
@@ -158,6 +163,7 @@ private String toMb(int bytes) {
 
     // Modifiable (non-final) for testing.
     @Synthetic ActivityManager activityManager;
+    //屏幕分辨率类
     @Synthetic ScreenDimensions screenDimensions;
 
     @Synthetic float memoryCacheScreens = MEMORY_CACHE_TARGET_SCREENS;
@@ -265,6 +271,9 @@ public MemorySizeCalculator build() {
     }
   }
 
+  /**
+   * 屏幕分辨率管理类
+   */
   private static final class DisplayMetricsScreenDimensions implements ScreenDimensions {
     private final DisplayMetrics displayMetrics;
 
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index a8260fa81..aa3051fc2 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -97,6 +97,7 @@ private RequestManager getApplicationManager(@NonNull Context context) {
           applicationManager =
               factory.build(
                   glide,
+                  //自定义周期函数 包括addListener和removeListener两个方法
                   new ApplicationLifecycle(),
                   new EmptyRequestManagerTreeNode(),
                   context.getApplicationContext());
@@ -107,6 +108,11 @@ private RequestManager getApplicationManager(@NonNull Context context) {
     return applicationManager;
   }
 
+  /**
+   * 根据不同的context类型执行不同的代码
+   * @param context
+   * @return
+   */
   @NonNull
   public RequestManager get(@NonNull Context context) {
     if (context == null) {
@@ -126,6 +132,7 @@ public RequestManager get(@NonNull Context context) {
 
   @NonNull
   public RequestManager get(@NonNull FragmentActivity activity) {
+    //如果不在主线程则使用applicationContext加载
     if (Util.isOnBackgroundThread()) {
       return get(activity.getApplicationContext());
     } else {
@@ -414,6 +421,7 @@ private SupportRequestManagerFragment getSupportRequestManagerFragment(
       if (current == null) {
         current = new SupportRequestManagerFragment();
         current.setParentFragmentHint(parentHint);
+        //判断activity是否显示
         if (isParentVisible) {
           current.getGlideLifecycle().onStart();
         }
@@ -426,14 +434,12 @@ private SupportRequestManagerFragment getSupportRequestManagerFragment(
   }
 
   @NonNull
-  private RequestManager supportFragmentGet(
-      @NonNull Context context,
-      @NonNull FragmentManager fm,
-      @Nullable Fragment parentHint,
-      boolean isParentVisible) {
-    SupportRequestManagerFragment current =
-        getSupportRequestManagerFragment(fm, parentHint, isParentVisible);
+  private RequestManager supportFragmentGet(@NonNull Context context, @NonNull FragmentManager fm,
+      @Nullable Fragment parentHint, boolean isParentVisible) {
+
+    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint, isParentVisible);
     RequestManager requestManager = current.getRequestManager();
+
     if (requestManager == null) {
       // TODO(b/27524013): Factor out this Glide.get() call.
       Glide glide = Glide.get(context);
@@ -483,6 +489,9 @@ RequestManager build(
         @NonNull Context context);
   }
 
+  /**
+   * 默认的实现类
+   */
   private static final RequestManagerFactory DEFAULT_FACTORY = new RequestManagerFactory() {
     @NonNull
     @Override
