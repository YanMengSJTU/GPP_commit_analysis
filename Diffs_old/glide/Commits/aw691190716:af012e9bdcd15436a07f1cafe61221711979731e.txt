diff --git a/README.md b/README.md
index ac3fa0aad..f1445f0d3 100644
--- a/README.md
+++ b/README.md
@@ -31,8 +31,8 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.github.bumptech.glide:glide:4.6.0'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.6.0'
+  implementation 'com.github.bumptech.glide:glide:4.6.1'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'
 }
 ```
 
@@ -42,12 +42,12 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.6.0</version>
+  <version>4.6.1</version>
 </dependency>
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.6.0</version>
+  <version>4.6.1</version>
   <optional>true</optional>
 </dependency>
 ```
diff --git a/gradle.properties b/gradle.properties
index 7c283ca76..6e13ac59c 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,10 +1,10 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=true
 
-VERSION_NAME=4.7.0-SNAPSHOT
+VERSION_NAME=4.6.1
 VERSION_MAJOR=4
-VERSION_MINOR=7
-VERSION_PATCH=0
+VERSION_MINOR=6
+VERSION_PATCH=1
 GROUP=com.github.bumptech.glide
 
 POM_DESCRIPTION=A fast and efficient image loading library for Android focused on smooth scrolling.
diff --git a/scripts/upload.gradle b/scripts/upload.gradle
index 99a582239..8f8d18b7b 100644
--- a/scripts/upload.gradle
+++ b/scripts/upload.gradle
@@ -59,6 +59,7 @@ def getRepositoryPassword() {
 }
 
 afterEvaluate { project ->
+    def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')
     // To avoid uploading the default empty jar artifact in the project root directory, we use a custom
     // configuration to specify which artifacts we want to upload.
     uploadArchives {
@@ -86,6 +87,34 @@ afterEvaluate { project ->
                     pom.packaging = POM_PACKAGING
                 }
 
+                // Dependencies are only automatically included by the release plugin if the release
+                // variant is built. Since we've disabled the release variant to improve build
+                // times, we need to add the dependencies to the pom file explicitly.
+                if (isAndroidProject) {
+                    pom.withXml {
+                        def dependenciesNode = asNode().appendNode('dependencies')
+
+                        project.configurations.implementation.allDependencies.each {
+                            def groupId = it.group
+                            def artifactId = it.name
+                            // If we specify an artifact id that differs from the project name, it won't
+                            // match. To avoid that, we look up the artifact id (and group) by property
+                            // for any project dependencies.
+                            // TODO: there must be a neater way to do this.
+                            if (it instanceof ProjectDependency) {
+                                def properties = it.getDependencyProject().getProperties()
+                                groupId = properties.get("GROUP")
+                                artifactId = properties.get("POM_ARTIFACT_ID")
+                            }
+                            def dependencyNode = dependenciesNode.appendNode('dependency')
+                            dependencyNode.appendNode('groupId', groupId)
+                            dependencyNode.appendNode('artifactId', artifactId)
+                            dependencyNode.appendNode('version', it.version)
+                            dependencyNode.appendNode('scope', 'compile')
+                        }
+                    }
+                }
+
                 pom.project {
                     name = POM_NAME
                     description = POM_DESCRIPTION
@@ -127,7 +156,6 @@ afterEvaluate { project ->
         sign configurations.archives
     }
 
-    def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')
 
     if (isAndroidProject) {
         def variants = project.android.libraryVariants.findAll {
