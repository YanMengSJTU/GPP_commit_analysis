diff --git a/README.md b/README.md
index 7b3d643e5..b2e7f345b 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@ Glide
 =====
 
 [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide) [![Build Status](https://travis-ci.org/bumptech/glide.svg?branch=master)](https://travis-ci.org/bumptech/glide)
-| [View Glide's documentation][20] | [Report an issue with Glide][5]
+| [View Glide's documentation][20] | [简体中文文档][22] | [Report an issue with Glide][5]
 
 Glide is a fast and efficient open source media management and image loading framework for Android that wraps media
 decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.
@@ -219,3 +219,4 @@ This is not an official Google product.
 [19]: https://github.com/wasabeef/glide-transformations
 [20]: http://bumptech.github.io/glide/
 [21]: http://bumptech.github.io/glide/doc/generatedapi.html
+[22]: https://muyangmin.github.io/glide-docs-cn/
\ No newline at end of file
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index dc53911fa..85be60dc7 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -285,17 +285,20 @@ public String apply(ParameterSpec input) {
         .add(");\n")
         .build();
 
-    return MethodSpec.methodBuilder(requestOptionMethod.name)
+    MethodSpec.Builder result = MethodSpec.methodBuilder(requestOptionMethod.name)
         .addJavadoc(
             processorUtil.generateSeeMethodJavadoc(requestOptionsClassName, requestOptionMethod))
-        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
+        .addModifiers(Modifier.PUBLIC)
         .varargs(requestOptionMethod.varargs)
         .addAnnotations(
             FluentIterable.from(requestOptionMethod.annotations)
                 .filter(new Predicate<AnnotationSpec>() {
                   @Override
                   public boolean apply(AnnotationSpec input) {
-                    return !input.type.equals(TypeName.get(Override.class));
+                    return !input.type.equals(TypeName.get(Override.class))
+                        // SafeVarargs can only be applied to final methods. GlideRequest is
+                        // non-final to allow for mocking.
+                        && !input.type.equals(TypeName.get(SafeVarargs.class));
                   }
                 })
                 .toList()
@@ -313,8 +316,18 @@ public boolean apply(AnnotationSpec input) {
             requestOptionsClassName))
         .addCode(callRequestOptionsMethod)
         .endControlFlow()
-        .addStatement("return this")
-        .build();
+        .addStatement("return this");
+
+    if (requestOptionMethod.annotations.contains(
+        AnnotationSpec.builder(SafeVarargs.class).build())) {
+      result.addAnnotation(
+          AnnotationSpec.builder(SuppressWarnings.class)
+              .addMember("value", "$S", "unchecked")
+              .addMember("value", "$S", "varargs")
+              .build());
+    }
+
+    return result.build();
   }
 
   private List<MethodSpec> generateConstructors() {
