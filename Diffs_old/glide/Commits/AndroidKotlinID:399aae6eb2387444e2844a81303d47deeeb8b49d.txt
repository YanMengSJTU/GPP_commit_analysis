diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
new file mode 100644
index 000000000..0b46ad79d
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
@@ -0,0 +1,105 @@
+package com.bumptech.glide;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.CompressFormat;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import android.util.Base64;
+import com.bumptech.glide.test.ConcurrencyHelper;
+import com.bumptech.glide.test.ResourceIds;
+import com.bumptech.glide.test.TearDownGlide;
+import java.io.ByteArrayOutputStream;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public class DataUriTest {
+  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();
+  private final Context context = InstrumentationRegistry.getTargetContext();
+
+  @Test
+  public void load_withJpegAsDataUriString_returnsBitmap() {
+    Bitmap bitmap =
+        concurrency.get(
+            Glide.with(context)
+                .asBitmap()
+                .load(getDataUriString(CompressFormat.JPEG))
+                .submit());
+    assertThat(bitmap).isNotNull();
+  }
+
+  @Test
+  public void load_withPngDataUriString_returnsBitmap() {
+    Bitmap bitmap =
+        concurrency.get(
+            Glide.with(context)
+                .asBitmap()
+                .load(getDataUriString(CompressFormat.PNG))
+                .submit());
+    assertThat(bitmap).isNotNull();
+  }
+
+  @Test
+  public void load_withJpegAsDataUri_returnsBitmap() {
+    Bitmap bitmap =
+        concurrency.get(
+            Glide.with(context)
+                .asBitmap()
+                .load(getDataUri(CompressFormat.JPEG))
+                .submit());
+    assertThat(bitmap).isNotNull();
+  }
+
+  @Test
+  public void load_withPngAsDataUri_returnsBitmap() {
+    Bitmap bitmap =
+        concurrency.get(
+            Glide.with(context)
+                .asBitmap()
+                .load(getDataUri(CompressFormat.PNG))
+                .submit());
+    assertThat(bitmap).isNotNull();
+  }
+
+  private Uri getDataUri(CompressFormat format) {
+    return Uri.parse(getDataUriString(format));
+  }
+
+  private String getDataUriString(CompressFormat format) {
+    String bytes = getBase64BitmapBytes(format);
+    String imageType;
+    switch (format) {
+      case PNG:
+        imageType = "png";
+        break;
+      case JPEG:
+        imageType = "jpeg";
+        break;
+      case WEBP:
+        imageType = "webp";
+        break;
+      default:
+        throw new IllegalArgumentException("Unrecognized format: " + format);
+    }
+
+    String mimeType = "image/" + imageType;
+    return "data:" + mimeType + ";base64," + bytes;
+  }
+
+  private String getBase64BitmapBytes(CompressFormat format) {
+    ByteArrayOutputStream bos = new ByteArrayOutputStream();
+    Drawable drawable = context.getResources().getDrawable(ResourceIds.raw.canonical);
+    Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
+    bitmap.compress(format, 100, bos);
+    byte[] data = bos.toByteArray();
+    return Base64.encodeToString(data, /*flags=*/ 0);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 63b0f12c7..c7f7e4562 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -446,7 +446,8 @@ private static void throwIncorrectGlideModule(Exception e) {
             AssetFileDescriptor.class,
             resourceLoaderAssetFileDescriptorFactory)
         .append(int.class, Uri.class, resourceLoaderUriFactory)
-        .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory())
+        .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory<String>())
+        .append(Uri.class, InputStream.class, new DataUrlLoader.StreamFactory<Uri>())
         .append(String.class, InputStream.class, new StringLoader.StreamFactory())
         .append(String.class, ParcelFileDescriptor.class, new StringLoader.FileDescriptorFactory())
         .append(
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 44ecdfe91..3f8056407 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -94,8 +94,12 @@ protected RequestBuilder(Class<TranscodeType> transcodeClass, RequestBuilder<?>
   }
 
   /**
-   * Applies the given options to the request, options set or unset in the given options will
-   * replace those previously set in options in this class.
+   * Applies the given options to the request.
+   *
+   * <p>As with {@link RequestOptions#apply(RequestOptions)}, {@code #apply} only replaces those
+   * values that are explicitly set in the given {@link RequestOptions} object. If you need to
+   * completely reset all previously set options, create a new {@code RequestBuilder} instead of
+   * using this method.
    *
    * @see RequestOptions#apply(RequestOptions)
    * @return This request builder.
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
index b9b7211a1..1418c466b 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
@@ -184,7 +184,7 @@ public Builder(Context context) {
      * returns this Builder.
      */
     public Builder setMemoryCacheScreens(float memoryCacheScreens) {
-      Preconditions.checkArgument(bitmapPoolScreens >= 0,
+      Preconditions.checkArgument(memoryCacheScreens >= 0,
           "Memory cache screens must be greater than or equal to 0");
       this.memoryCacheScreens = memoryCacheScreens;
       return this;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
index b5bddccaf..646c43907 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
@@ -20,9 +20,10 @@
  *
  * <p>Briefly, a 'data' URL has the form: <pre>data:[mediatype][;base64],some_data</pre>
  *
- * @param <Data> The type of data that can be opened.
+ * @param <Model> The type of Model that we can retrieve data for, e.g. {@link String}.
+ * @param <Data> The type of data that can be opened, e.g. {@link InputStream}.
  */
-public final class DataUrlLoader<Data> implements ModelLoader<String, Data> {
+public final class DataUrlLoader<Model, Data> implements ModelLoader<Model, Data> {
 
   private static final String DATA_SCHEME_IMAGE = "data:image";
   private static final String BASE64_TAG = ";base64";
@@ -35,14 +36,17 @@ public DataUrlLoader(DataDecoder<Data> dataDecoder) {
   }
 
   @Override
-  public LoadData<Data> buildLoadData(@NonNull String model, int width, int height,
+  public LoadData<Data> buildLoadData(@NonNull Model model, int width, int height,
       @NonNull Options options) {
-    return new LoadData<>(new ObjectKey(model), new DataUriFetcher<>(model, dataDecoder));
+    return new LoadData<>(
+        new ObjectKey(model), new DataUriFetcher<>(model.toString(), dataDecoder));
   }
 
   @Override
-  public boolean handles(@NonNull String url) {
-    return url.startsWith(DATA_SCHEME_IMAGE);
+  public boolean handles(@NonNull Model model) {
+    // We expect Model to be a Uri or a String, both of which implement toString() efficiently. We
+    // should reconsider this implementation before adding any new Model types.
+    return model.toString().startsWith(DATA_SCHEME_IMAGE);
   }
 
   /**
@@ -108,9 +112,11 @@ public DataSource getDataSource() {
   }
 
   /**
-   * Factory for loading {@link InputStream} from Data URL string.
+   * Factory for loading {@link InputStream}s from data uris.
+   *
+   * @param <Model> The type of Model we can obtain data for, e.g. String.
    */
-  public static final class StreamFactory implements ModelLoaderFactory<String, InputStream> {
+  public static final class StreamFactory<Model> implements ModelLoaderFactory<Model, InputStream> {
 
     private final DataDecoder<InputStream> opener;
 
@@ -152,7 +158,7 @@ public void close(InputStream inputStream) throws IOException {
 
     @NonNull
     @Override
-    public ModelLoader<String, InputStream> build(
+    public ModelLoader<Model, InputStream> build(
         @NonNull MultiModelLoaderFactory multiFactory) {
       return new DataUrlLoader<>(opener);
     }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index 3dc929ef2..4e416b649 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -1352,6 +1352,21 @@ public RequestOptions dontAnimate() {
     return set(GifOptions.DISABLE_ANIMATION, true);
   }
 
+  /**
+   * Updates this options set with any options that are explicitly set in the given
+   * {@code RequestOptions} object and returns this object if {@link #autoClone()} is disabled or
+   * a new {@code RequestOptions} object if {@link #autoClone()} is enabled.
+   *
+   * <p>{@code #apply} only replaces those values that are explicitly set in the given
+   * {@code RequestOptions}. If you need to completely reset all previously set options, create a
+   * new {@code RequestOptions} object instead of using this method.
+   *
+   * <p>The options that will be set to values in the returned {@code RequestOptions} object is the
+   * intersection of the set of options in this {@code RequestOptions} object and the given
+   * {@code RequestOptions} object that were explicitly set. If the values of any of the options
+   * conflict, the values in the returned {@code RequestOptions} object will be set to those in the
+   * given {@code RequestOptions} object.
+   */
   @NonNull
   @CheckResult
   public RequestOptions apply(@NonNull RequestOptions other) {
diff --git a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
index a3ebfba76..4c2143ab1 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
@@ -19,7 +19,7 @@
  *       .into(new SimpleTarget<Bitmap>(250, 250) {
  *
  *         {@literal @Override}
- *         public void onResourceReady(Bitmap resource, GlideAnimation<Bitmap> glideAnimation) {
+ *         public void onResourceReady(Bitmap resource, Transition<? super Bitmap> transition) {
  *           // Do something with bitmap here.
  *         }
  *
diff --git a/library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
index d88efdcb8..440516b26 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
@@ -56,18 +56,17 @@
 
   @Mock
   private MultiModelLoaderFactory multiFactory;
-  private DataUrlLoader<InputStream> dataUrlLoader;
+  private DataUrlLoader<String, InputStream> dataUrlLoader;
   private DataFetcher<InputStream> fetcher;
   private Options options;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    DataUrlLoader.StreamFactory factory = new DataUrlLoader.StreamFactory();
+    DataUrlLoader.StreamFactory<String> factory = new DataUrlLoader.StreamFactory<>();
     options = new Options();
-    dataUrlLoader = (DataUrlLoader<InputStream>) factory.build(multiFactory);
+    dataUrlLoader = (DataUrlLoader<String, InputStream>) factory.build(multiFactory);
     fetcher = dataUrlLoader.buildLoadData(VALID_PNG, -1, -1, options).fetcher;
-
   }
 
   @Test
