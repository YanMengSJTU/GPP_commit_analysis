diff --git a/.gitignore b/.gitignore
index 37ac0c17d..e90dca6f0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,5 +23,7 @@ docs/**/*
 
 # Intellij
 *.iml
+*.ipr
+*.iws
 .idea/**
 !.idea/codeStyleSettings.xml
diff --git a/build.gradle b/build.gradle
index d7b42257b..ac4c7b560 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,5 @@
+import se.bjurr.violations.gradle.plugin.ViolationsTask
+
 buildscript {
     repositories {
         google()
@@ -13,8 +15,9 @@ buildscript {
     dependencies {
         classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_VERSION}"
         if (!hasProperty('DISABLE_ERROR_PRONE')) {
-            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_VERSION}"
+            classpath "net.ltgt.gradle:gradle-errorprone-plugin:${ERROR_PRONE_PLUGIN_VERSION}"
         }
+        classpath "se.bjurr.violations:violations-gradle-plugin:${VIOLATIONS_PLUGIN_VERSION}"
     }
 }
 
@@ -37,7 +40,8 @@ subprojects { project ->
         // modified, so we're not going to worry about cleaning it up.
         if ("gifencoder" != project.getName()) {
           options.compilerArgs \
-                << "-Xlint:all" << "-Werror" \
+                << "-Xlint:all" \
+                << "-Werror" \
                 /*
                  * Java expects every annotation to have a processor, but we use
                  * javax.annotation.Nullable, which doesn't have one.
@@ -62,6 +66,8 @@ subprojects { project ->
                 lintOptions {
                     warningsAsErrors true
                     quiet true
+                    // Caught by the violations plugin.
+                    abortOnError false
                 }
             }
         }
@@ -92,15 +98,34 @@ subprojects { project ->
         source 'src'
         include '**/*.java'
         exclude '**/gen/**'
+        // Caught by the violations plugin.
+        ignoreFailures = true
 
         // empty classpath
         classpath = files()
     }
 
+    apply plugin: "se.bjurr.violations.violations-gradle-plugin"
+
+    task violations(type: ViolationsTask) {
+        minSeverity 'INFO'
+        detailLevel 'VERBOSE'
+        maxViolations 0
+
+        // Formats are listed here: https://github.com/tomasbjerre/violations-lib
+        def dir = projectDir.absolutePath;
+        violations = [
+                ["FINDBUGS",    dir, ".*/findbugs/.*\\.xml\$",   "Findbugs"],
+                ["PMD",         dir, ".*/pmd/.*\\.xml\$",        "PMD"],
+                ["ANDROIDLINT", dir, ".*/lint-results\\.xml\$",  "AndroidLint"],
+                ["CHECKSTYLE",  dir, ".*/checkstyle/.*\\.xml\$", "Checkstyle"],
+        ]
+    }
+
     afterEvaluate {
         if (project.tasks.findByName('check')) {
             check.dependsOn('checkstyle')
+            check.finalizedBy violations
         }
     }
 }
-
diff --git a/checkstyle.xml b/checkstyle.xml
index 42a2c8a50..c2a00167d 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -73,7 +73,7 @@
 
         <!-- Allow common trailing comments used to describe suppressions -->
         <module name="TrailingComment">
-          <property name="legalComment" value="Public API" />
+          <property name="legalComment" value="^Public API.?$|^NOPMD .*$" />
         </module>
 
         <!-- Checks for imports. -->
diff --git a/gradle.properties b/gradle.properties
index 65e27a5e3..dd0b3a3ae 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -32,9 +32,11 @@ JSR_305_VERSION=3.0.2
 AUTO_SERVICE_VERSION=1.0-rc3
 JAVAPOET_VERSION=1.9.0
 
-PMD_VERSION=5.4.0
+PMD_VERSION=5.8.1
 FINDBUGS_VERSION=3.0.0
-ERROR_PRONE_VERSION=0.0.13
+ERROR_PRONE_VERSION=2.1.4-SNAPSHOT
+ERROR_PRONE_PLUGIN_VERSION=0.0.13
+VIOLATIONS_PLUGIN_VERSION=1.3
 
 COMPILE_SDK_VERSION=27
 TARGET_SDK_VERSION=27
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java
index d950ca215..5ae25c4ac 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/WideGamutTest.java
@@ -87,10 +87,10 @@ public void load_withEncodedPngWideGamutImage_decodesWideGamut() {
             100, 100, Bitmap.Config.RGBA_F16, /*hasAlpha=*/ true, ColorSpace.get(Named.DCI_P3));
 
     ByteArrayOutputStream os = new ByteArrayOutputStream();
-    toCompress.compress(CompressFormat.PNG, 100, os);
+    assertThat(toCompress.compress(CompressFormat.PNG, 100, os)).isTrue();
     byte[] data = os.toByteArray();
 
-      Bitmap bitmap =
+    Bitmap bitmap =
         concurrency.get(
             Glide.with(context)
                 .asBitmap()
@@ -101,15 +101,18 @@ public void load_withEncodedPngWideGamutImage_decodesWideGamut() {
 
   @Test
   public void load_withEncodedJpegWideGamutImage_decodesArgb8888() {
+    // TODO(b/71430152): Figure out whether or not this is supposed to pass in API 26 and fail in
+    // API 27.
+    assumeTrue(Build.VERSION.SDK_INT != Build.VERSION_CODES.O_MR1);
     Bitmap toCompress =
         Bitmap.createBitmap(
             100, 100, Bitmap.Config.RGBA_F16, /*hasAlpha=*/ true, ColorSpace.get(Named.DCI_P3));
 
     ByteArrayOutputStream os = new ByteArrayOutputStream();
-    toCompress.compress(CompressFormat.JPEG, 100, os);
+    assertThat(toCompress.compress(CompressFormat.JPEG, 100, os)).isTrue();
     byte[] data = os.toByteArray();
 
-      Bitmap bitmap =
+    Bitmap bitmap =
         concurrency.get(
             Glide.with(context)
                 .asBitmap()
@@ -125,10 +128,10 @@ public void load_withEncodedWebpWideGamutImage_decodesArgb8888() {
             100, 100, Bitmap.Config.RGBA_F16, /*hasAlpha=*/ true, ColorSpace.get(Named.DCI_P3));
 
     ByteArrayOutputStream os = new ByteArrayOutputStream();
-    toCompress.compress(CompressFormat.WEBP, 100, os);
+    assertThat(toCompress.compress(CompressFormat.WEBP, 100, os)).isTrue();
     byte[] data = os.toByteArray();
 
-      Bitmap bitmap =
+    Bitmap bitmap =
         concurrency.get(
             Glide.with(context)
                 .asBitmap()
diff --git a/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
index f4a971d97..641dc7357 100644
--- a/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
+++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
@@ -3,7 +3,6 @@
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.junit.Assume.assumeTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
@@ -95,6 +94,8 @@ public void setUp() {
 
   @After
   public void tearDown() {
+    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468)
+    System.gc();
     if (file.exists() && !file.delete()) {
       throw new RuntimeException("Failed to delete file");
     }
@@ -120,8 +121,6 @@ public void testEncodeStrategy_withEncodeTransformationFalse_returnsSource() {
   @Test
   public void testEncode_withEncodeTransformationFalse_writesSourceDataToStream()
       throws IOException {
-    // Most likely an instance of http://stackoverflow.com/q/991489/253468
-    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));
     options.set(ReEncodingGifResourceEncoder.ENCODE_TRANSFORMATION, false);
     String expected = "testString";
     byte[] data = expected.getBytes("UTF-8");
@@ -134,7 +133,6 @@ public void testEncode_withEncodeTransformationFalse_writesSourceDataToStream()
   @Test
   public void testEncode_WithEncodeTransformationFalse_whenOsThrows_returnsFalse()
       throws IOException {
-
     options.set(ReEncodingGifResourceEncoder.ENCODE_TRANSFORMATION, false);
     byte[] data = "testString".getBytes("UTF-8");
     when(gifDrawable.getBuffer()).thenReturn(ByteBuffer.wrap(data));
@@ -312,10 +310,7 @@ public void testRecyclesFrameResourceAfterWritingIfFrameResourceIsNotTransformed
   }
 
   @Test
-  public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation()
-      throws IOException {
-    // Most likely an instance of http://stackoverflow.com/q/991489/253468
-    assumeTrue(!System.getProperty("os.name").startsWith("Windows"));
+  public void testWritesBytesDirectlyToDiskIfTransformationIsUnitTransformation() {
     when(gifDrawable.getFrameTransformation()).thenReturn(UnitTransformation.<Bitmap>get());
     String expected = "expected";
     when(gifDrawable.getBuffer()).thenReturn(ByteBuffer.wrap(expected.getBytes()));
diff --git a/library/build.gradle b/library/build.gradle
index 0305f8c3c..8672d9ddb 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -20,6 +20,10 @@ dependencies {
     testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
     testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
     testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
+
+    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
+       errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
+    }
 }
 
 android.testOptions.unitTests.all { Test testTask ->
@@ -78,15 +82,15 @@ afterEvaluate {
                         it.javaCompile.classpath.files
                     })
         }
-
-
         effort = 'max'
-
         excludeFilter = file("findbugs-exclude.xml")
 
+        // Failures are caught and printed by the violations plugin.
+        ignoreFailures = true
+
         reports {
-            xml.enabled = false
-            html.enabled = true
+            xml.enabled = true
+            html.enabled = false
         }
     }
 
@@ -108,9 +112,12 @@ afterEvaluate {
         ruleSetFiles = files('pmd-ruleset.xml')
         source android.sourceSets.main.java.srcDirs
 
+        // Failures are caught and printed by the violations plugin.
+        ignoreFailures = true
+
         reports {
-            xml.enabled = false
-            html.enabled = true
+            xml.enabled = true
+            html.enabled = false
         }
     }
 
diff --git a/library/pmd-ruleset.xml b/library/pmd-ruleset.xml
index 76249e191..da8c961e3 100644
--- a/library/pmd-ruleset.xml
+++ b/library/pmd-ruleset.xml
@@ -3,15 +3,17 @@
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
 
-    <description>This ruleset was created from PMD.rul</description>
+    <description>Check for flaws in Glide's codebase.</description>
 
     <rule ref="rulesets/java/basic.xml">
         <exclude name="AvoidBranchingStatementAsLastInLoop"/>
     </rule>
     <rule ref="rulesets/java/braces.xml"/>
-    <rule ref="rulesets/java/strings.xml">
-        <!-- TODO: This warns about annotations, apparently fixed in a later version. -->
-        <exclude name="AvoidDuplicateLiterals"/>
+    <rule ref="rulesets/java/strings.xml"/>
+    <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">
+        <properties>
+            <property name="skipAnnotations" value="true" />
+        </properties>
     </rule>
     <rule ref="rulesets/java/unusedcode.xml"/>
 
@@ -28,31 +30,39 @@
         <exclude name="GodClass"/>
     </rule>
 
+    <rule ref="rulesets/java/design.xml/AccessorMethodGeneration"
+          message="Avoid autogenerated methods to access private fields and methods of inner / outer classes.
+                   Use @Synthetic to flag members made more visible than necessary to prevent accessors.">
+        <properties>
+            <!-- Ignore references to `private static final * * = <literal>`
+                 Suppress via XPath: current node (access that generates the accessor) is .
+                 Check if there exists a FieldDeclaration (private static final)
+                 which has a VariableInitializer with a Literal
+                 and the name (@Image) of the declaration is the same as the accessed member.
+                 TODO calculated constants are false positive https://github.com/pmd/pmd/issues/808
+            -->
+            <property name="violationSuppressXPath" value="
+            .[@Image =
+                //FieldDeclaration[@Private = 'true' and @Static='true' and @Final='true']
+                /VariableDeclarator[
+                    VariableInitializer/Expression/PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Literal
+                ]/VariableDeclaratorId/@Image
+             ]" />
+        </properties>
+    </rule>
+
     <rule ref="rulesets/java/empty.xml/EmptyCatchBlock" message="Commented blocks are ok">
         <properties>
             <property name="allowCommentedBlocks" value="true"/>
         </properties>
     </rule>
 
-
-    <!--Overrides default check to avoid violation when @Synthetic annotation is present-->
-    <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"
-          message="Document empty constructor">
-
+    <!-- Configures check to avoid violation when @Synthetic annotation is present. -->
+    <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor">
         <properties>
-            <property name="xpath">
-                <value>
-                    <![CDATA[
-//ConstructorDeclaration[@Private='false'][count(BlockStatement) = 0 and
-($ignoreExplicitConstructorInvocation = 'true' or not(ExplicitConstructorInvocation)) and @containsComment = 'false'
- and not(../Annotation/MarkerAnnotation/Name[@Image='Synthetic'])]
- ]]>
-                </value>
-            </property>
-
+            <property name="violationSuppressXPath"
+                      value="../Annotation/MarkerAnnotation/Name[@Image='Synthetic']" />
         </properties>
-
     </rule>
 
-
 </ruleset>
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 18dcbbce9..ec4d145cd 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -30,6 +30,7 @@
 import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.signature.ApplicationVersionSignature;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.Util;
 import java.io.File;
 import java.net.URL;
@@ -572,7 +573,7 @@ protected RequestOptions getMutableOptions() {
   }
 
   @NonNull
-  private <Y extends Target<TranscodeType>> Y into(
+  @Synthetic <Y extends Target<TranscodeType>> Y into(
       @NonNull Y target,
       @Nullable RequestListener<TranscodeType> targetListener) {
     return into(target, targetListener, getMutableOptions());
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java
index 79f057325..19671164c 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ActiveResources.java
@@ -91,7 +91,8 @@ void deactivate(Key key) {
     return active;
   }
 
-  private void cleanupActiveReference(@NonNull ResourceWeakReference ref) {
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic void cleanupActiveReference(@NonNull ResourceWeakReference ref) {
     Util.assertMainThread();
     activeEngineResources.remove(ref.key);
 
@@ -112,22 +113,7 @@ private void cleanupActiveReference(@NonNull ResourceWeakReference ref) {
         @Override
         public void run() {
           Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
-          ResourceWeakReference ref;
-          while (!isShutdown) {
-            try {
-              ref = (ResourceWeakReference) resourceReferenceQueue.remove();
-              mainHandler.obtainMessage(MSG_CLEAN_REF, ref).sendToTarget();
-
-              // This section for testing only.
-              DequeuedResourceCallback current = cb;
-              if (current != null) {
-                current.onResourceDequeued();
-              }
-              // End for testing only.
-            } catch (InterruptedException e) {
-              Thread.currentThread().interrupt();
-            }
-          }
+          cleanReferenceQueue();
         }
       }, "glide-active-resources");
       cleanReferenceQueueThread.start();
@@ -135,6 +121,25 @@ public void run() {
     return resourceReferenceQueue;
   }
 
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic void cleanReferenceQueue() {
+    while (!isShutdown) {
+      try {
+        ResourceWeakReference ref = (ResourceWeakReference) resourceReferenceQueue.remove();
+        mainHandler.obtainMessage(MSG_CLEAN_REF, ref).sendToTarget();
+
+        // This section for testing only.
+        DequeuedResourceCallback current = cb;
+        if (current != null) {
+          current.onResourceDequeued();
+        }
+        // End for testing only.
+      } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+      }
+    }
+  }
+
   @VisibleForTesting
   void setDequeuedResourceCallback(DequeuedResourceCallback cb) {
     this.cb = cb;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 888bf71d3..35a35ce80 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -41,26 +41,22 @@
     Poolable {
   private static final String TAG = "DecodeJob";
 
-  @SuppressWarnings("WeakerAccess")
-  @Synthetic
-  final DecodeHelper<R> decodeHelper = new DecodeHelper<>();
+  private final DecodeHelper<R> decodeHelper = new DecodeHelper<>();
   private final List<Throwable> throwables = new ArrayList<>();
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
   private final DiskCacheProvider diskCacheProvider;
   private final Pools.Pool<DecodeJob<?>> pool;
-  @SuppressWarnings("WeakerAccess")
-  @Synthetic
-  final DeferredEncodeManager<?> deferredEncodeManager = new DeferredEncodeManager<>();
+  private final DeferredEncodeManager<?> deferredEncodeManager = new DeferredEncodeManager<>();
   private final ReleaseManager releaseManager = new ReleaseManager();
 
   private GlideContext glideContext;
-  @SuppressWarnings("WeakerAccess") @Synthetic Key signature;
+  private Key signature;
   private Priority priority;
   private EngineKey loadKey;
-  @SuppressWarnings("WeakerAccess") @Synthetic int width;
-  @SuppressWarnings("WeakerAccess") @Synthetic int height;
-  @SuppressWarnings("WeakerAccess") @Synthetic DiskCacheStrategy diskCacheStrategy;
-  @SuppressWarnings("WeakerAccess") @Synthetic Options options;
+  private int width;
+  private int height;
+  private DiskCacheStrategy diskCacheStrategy;
+  private Options options;
   private Callback<R> callback;
   private int order;
   private Stage stage;
@@ -69,7 +65,7 @@
   private boolean onlyRetrieveFromCache;
 
   private Thread currentThread;
-  @SuppressWarnings("WeakerAccess") @Synthetic Key currentSourceKey;
+  private Key currentSourceKey;
   private Key currentAttemptingKey;
   private Object currentData;
   private DataSource currentDataSource;
@@ -521,6 +517,65 @@ public StateVerifier getVerifier() {
     return stateVerifier;
   }
 
+  @Synthetic <Z> Resource<Z> onResourceDecoded(DataSource dataSource, Resource<Z> decoded) {
+    @SuppressWarnings("unchecked")
+    Class<Z> resourceSubClass = (Class<Z>) decoded.get().getClass();
+    Transformation<Z> appliedTransformation = null;
+    Resource<Z> transformed = decoded;
+    if (dataSource != DataSource.RESOURCE_DISK_CACHE) {
+      appliedTransformation = decodeHelper.getTransformation(resourceSubClass);
+      transformed = appliedTransformation.transform(glideContext, decoded, width, height);
+    }
+    // TODO: Make this the responsibility of the Transformation.
+    if (!decoded.equals(transformed)) {
+      decoded.recycle();
+    }
+
+    final EncodeStrategy encodeStrategy;
+    final ResourceEncoder<Z> encoder;
+    if (decodeHelper.isResourceEncoderAvailable(transformed)) {
+      encoder = decodeHelper.getResultEncoder(transformed);
+      encodeStrategy = encoder.getEncodeStrategy(options);
+    } else {
+      encoder = null;
+      encodeStrategy = EncodeStrategy.NONE;
+    }
+
+    Resource<Z> result = transformed;
+    boolean isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);
+    if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,
+        encodeStrategy)) {
+      if (encoder == null) {
+        throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());
+      }
+      final Key key;
+      switch (encodeStrategy) {
+        case SOURCE:
+          key = new DataCacheKey(currentSourceKey, signature);
+          break;
+        case TRANSFORMED:
+          key =
+              new ResourceCacheKey(
+                  decodeHelper.getArrayPool(),
+                  currentSourceKey,
+                  signature,
+                  width,
+                  height,
+                  appliedTransformation,
+                  resourceSubClass,
+                  options);
+          break;
+        default:
+          throw new IllegalArgumentException("Unknown strategy: " + encodeStrategy);
+      }
+
+      LockedResource<Z> lockedResult = LockedResource.obtain(transformed);
+      deferredEncodeManager.init(key, encoder, lockedResult);
+      result = lockedResult;
+    }
+    return result;
+  }
+
   private final class DecodeCallback<Z> implements DecodePath.DecodeCallback<Z> {
 
     private final DataSource dataSource;
@@ -532,66 +587,7 @@ public StateVerifier getVerifier() {
 
     @Override
     public Resource<Z> onResourceDecoded(Resource<Z> decoded) {
-      Class<Z> resourceSubClass = getResourceClass(decoded);
-      Transformation<Z> appliedTransformation = null;
-      Resource<Z> transformed = decoded;
-      if (dataSource != DataSource.RESOURCE_DISK_CACHE) {
-        appliedTransformation = decodeHelper.getTransformation(resourceSubClass);
-        transformed = appliedTransformation.transform(glideContext, decoded, width, height);
-      }
-      // TODO: Make this the responsibility of the Transformation.
-      if (!decoded.equals(transformed)) {
-        decoded.recycle();
-      }
-
-      final EncodeStrategy encodeStrategy;
-      final ResourceEncoder<Z> encoder;
-      if (decodeHelper.isResourceEncoderAvailable(transformed)) {
-        encoder = decodeHelper.getResultEncoder(transformed);
-        encodeStrategy = encoder.getEncodeStrategy(options);
-      } else {
-        encoder = null;
-        encodeStrategy = EncodeStrategy.NONE;
-      }
-
-      Resource<Z> result = transformed;
-      boolean isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);
-      if (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,
-          encodeStrategy)) {
-        if (encoder == null) {
-          throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());
-        }
-        final Key key;
-        switch (encodeStrategy) {
-          case SOURCE:
-            key = new DataCacheKey(currentSourceKey, signature);
-            break;
-          case TRANSFORMED:
-            key =
-                new ResourceCacheKey(
-                    decodeHelper.getArrayPool(),
-                    currentSourceKey,
-                    signature,
-                    width,
-                    height,
-                    appliedTransformation,
-                    resourceSubClass,
-                    options);
-            break;
-          default:
-            throw new IllegalArgumentException("Unknown strategy: " + encodeStrategy);
-        }
-
-        LockedResource<Z> lockedResult = LockedResource.obtain(transformed);
-        deferredEncodeManager.init(key, encoder, lockedResult);
-        result = lockedResult;
-      }
-      return result;
-    }
-
-    @SuppressWarnings("unchecked")
-    private Class<Z> getResourceClass(Resource<Z> resource) {
-      return (Class<Z>) resource.get().getClass();
+      return DecodeJob.this.onResourceDecoded(dataSource, decoded);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
index 4431689fd..a5b89f53d 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/SizeStrategy.java
@@ -111,7 +111,7 @@ static String getBitmapString(int size) {
   static class KeyPool extends BaseKeyPool<Key> {
 
     public Key get(int size) {
-      Key result = get();
+      Key result = super.get();
       result.init(size);
       return result;
     }
@@ -149,6 +149,8 @@ public int hashCode() {
       return size;
     }
 
+    // PMD.AccessorMethodGeneration: https://github.com/pmd/pmd/issues/807
+    @SuppressWarnings("PMD.AccessorMethodGeneration")
     @Override
     public String toString() {
       return getBitmapString(size);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
index b697ca556..b9b7211a1 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
@@ -9,6 +9,7 @@
 import android.util.DisplayMetrics;
 import android.util.Log;
 import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A calculator that tries to intelligently determine cache sizes for a given device based on some
@@ -115,7 +116,7 @@ private String toMb(int bytes) {
   }
 
   @TargetApi(Build.VERSION_CODES.KITKAT)
-  private static boolean isLowMemoryDevice(ActivityManager activityManager) {
+  @Synthetic static boolean isLowMemoryDevice(ActivityManager activityManager) {
     // Explicitly check with an if statement, on some devices both parts of boolean expressions
     // can be evaluated even if we'd normally expect a short circuit.
     //noinspection SimplifiableIfStatement
@@ -149,17 +150,17 @@ private static boolean isLowMemoryDevice(ActivityManager activityManager) {
     // 4MB.
     static final int ARRAY_POOL_SIZE_BYTES = 4 * 1024 * 1024;
 
-    private final Context context;
+    @Synthetic final Context context;
 
-    // Modifiable for testing.
-    private ActivityManager activityManager;
-    private ScreenDimensions screenDimensions;
+    // Modifiable (non-final) for testing.
+    @Synthetic ActivityManager activityManager;
+    @Synthetic ScreenDimensions screenDimensions;
 
-    private float memoryCacheScreens = MEMORY_CACHE_TARGET_SCREENS;
-    private float bitmapPoolScreens = BITMAP_POOL_TARGET_SCREENS;
-    private float maxSizeMultiplier = MAX_SIZE_MULTIPLIER;
-    private float lowMemoryMaxSizeMultiplier = LOW_MEMORY_MAX_SIZE_MULTIPLIER;
-    private int arrayPoolSizeBytes = ARRAY_POOL_SIZE_BYTES;
+    @Synthetic float memoryCacheScreens = MEMORY_CACHE_TARGET_SCREENS;
+    @Synthetic float bitmapPoolScreens = BITMAP_POOL_TARGET_SCREENS;
+    @Synthetic float maxSizeMultiplier = MAX_SIZE_MULTIPLIER;
+    @Synthetic float lowMemoryMaxSizeMultiplier = LOW_MEMORY_MAX_SIZE_MULTIPLIER;
+    @Synthetic int arrayPoolSizeBytes = ARRAY_POOL_SIZE_BYTES;
 
     public Builder(Context context) {
       this.context = context;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
index 57fecd893..7f8845534 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/executor/GlideExecutor.java
@@ -433,7 +433,8 @@ public synchronized Thread newThread(@NonNull Runnable runnable) {
       final Thread result = new Thread(runnable, "glide-" + name + "-thread-" + threadNum) {
         @Override
         public void run() {
-          android.os.Process.setThreadPriority(DEFAULT_PRIORITY);
+          // why PMD suppression is needed: https://github.com/pmd/pmd/issues/808
+          android.os.Process.setThreadPriority(DEFAULT_PRIORITY); //NOPMD AccessorMethodGeneration
           if (preventNetworkOperations) {
             StrictMode.setThreadPolicy(
                 new ThreadPolicy.Builder()
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
index 9f4df0849..da0d1a1ec 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/CenterCrop.java
@@ -16,8 +16,6 @@
   private static final String ID = "com.bumptech.glide.load.resource.bitmap.CenterCrop";
   private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
 
-  // Bitmap doesn't implement equals, so == and .equals are equivalent here.
-  @SuppressWarnings("PMD.CompareObjectsWithEquals")
   @Override
   protected Bitmap transform(
       @NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth, int outHeight) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
index bcd23762d..9275e3429 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
@@ -69,7 +69,7 @@ public DrawableTransformation(Transformation<Bitmap> wrapped, boolean isRequired
     }
   }
 
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings({"unchecked", "PMD.UnnecessaryLocalBeforeReturn"})
   private Resource<Drawable> newDrawableResource(
       Context context, Resource<Bitmap> transformed) {
     Resource<? extends Drawable> result =
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
index c58e781dc..0f726f22f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
@@ -15,6 +15,7 @@
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.request.target.Target;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
@@ -168,7 +169,15 @@ private static Bitmap decodeFrame(
       int frameOption,
       int outWidth,
       int outHeight) {
-     if (Build.VERSION.SDK_INT >= VERSION_CODES.O_MR1) {
+    // Arguably we should handle the case where just width or just height is set to
+    // Target.SIZE_ORIGINAL. Up to and including OMR1, MediaMetadataRetriever defaults to setting
+    // the dimensions to the display width and height if they aren't specified (ie
+    // getScaledFrameAtTime is not used). Given that this is an optimization only if
+    // Target.SIZE_ORIGINAL is not used and not using getScaledFrameAtTime ever would match the
+    // behavior of Glide in all versions of Android prior to OMR1, it's probably fine for now.
+    if (Build.VERSION.SDK_INT >= VERSION_CODES.O_MR1
+         && outWidth != Target.SIZE_ORIGINAL
+         && outHeight != Target.SIZE_ORIGINAL) {
        return mediaMetadataRetriever.getScaledFrameAtTime(
            frameTimeMicros, frameOption, outWidth, outHeight);
     } else {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
index d2b5503c6..400530d79 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifBitmapProvider.java
@@ -55,7 +55,6 @@ public void release(@NonNull Bitmap bitmap) {
     return arrayPool.get(size, byte[].class);
   }
 
-  @SuppressWarnings("PMD.UseVarargs")
   @Override
   public void release(@NonNull byte[] bytes) {
     if (arrayPool == null) {
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index b13795658..23fc35355 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -28,8 +28,7 @@
   private final ActivityFragmentLifecycle lifecycle;
   private final RequestManagerTreeNode requestManagerTreeNode =
       new FragmentRequestManagerTreeNode();
-  private final HashSet<RequestManagerFragment> childRequestManagerFragments =
-      new HashSet<>();
+  private final Set<RequestManagerFragment> childRequestManagerFragments = new HashSet<>();
 
   @Nullable private RequestManager requestManager;
   @Nullable private RequestManagerFragment rootRequestManagerFragment;
@@ -86,7 +85,7 @@ private void removeChildRequestManagerFragment(RequestManagerFragment child) {
    * our parent is the fragment that we are annotating).
    */
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-  private Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
+  @Synthetic Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
     if (this.equals(rootRequestManagerFragment)) {
       return Collections.unmodifiableSet(childRequestManagerFragments);
     } else if (rootRequestManagerFragment == null
@@ -95,7 +94,7 @@ private void removeChildRequestManagerFragment(RequestManagerFragment child) {
       // so just return an empty set.
       return Collections.emptySet();
     } else {
-      HashSet<RequestManagerFragment> descendants = new HashSet<>();
+      Set<RequestManagerFragment> descendants = new HashSet<>();
       for (RequestManagerFragment fragment : rootRequestManagerFragment
           .getDescendantRequestManagerFragments()) {
         if (isDescendant(fragment.getParentFragment())) {
@@ -212,7 +211,7 @@ public String toString() {
     @Override
     public Set<RequestManager> getDescendants() {
       Set<RequestManagerFragment> descendantFragments = getDescendantRequestManagerFragments();
-      HashSet<RequestManager> descendants = new HashSet<>(descendantFragments.size());
+      Set<RequestManager> descendants = new HashSet<>(descendantFragments.size());
       for (RequestManagerFragment fragment : descendantFragments) {
         if (fragment.getRequestManager() != null) {
           descendants.add(fragment.getRequestManager());
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index 1307a34c1..a44bb02e2 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -27,8 +27,7 @@
   private final ActivityFragmentLifecycle lifecycle;
   private final RequestManagerTreeNode requestManagerTreeNode =
       new SupportFragmentRequestManagerTreeNode();
-  private final HashSet<SupportRequestManagerFragment> childRequestManagerFragments =
-      new HashSet<>();
+  private final Set<SupportRequestManagerFragment> childRequestManagerFragments = new HashSet<>();
 
   @Nullable private SupportRequestManagerFragment rootRequestManagerFragment;
   @Nullable private RequestManager requestManager;
@@ -86,13 +85,13 @@ private void removeChildRequestManagerFragment(SupportRequestManagerFragment chi
    * Returns the set of fragments that this RequestManagerFragment's parent is a parent to. (i.e.
    * our parent is the fragment that we are annotating).
    */
-  private Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments() {
+  @Synthetic Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments() {
     if (rootRequestManagerFragment == null) {
       return Collections.emptySet();
     } else if (this.equals(rootRequestManagerFragment)) {
       return Collections.unmodifiableSet(childRequestManagerFragments);
     } else {
-      HashSet<SupportRequestManagerFragment> descendants = new HashSet<>();
+      Set<SupportRequestManagerFragment> descendants = new HashSet<>();
       for (SupportRequestManagerFragment fragment : rootRequestManagerFragment
           .getDescendantRequestManagerFragments()) {
         if (isDescendant(fragment.getParentFragmentUsingHint())) {
@@ -203,7 +202,7 @@ public String toString() {
     public Set<RequestManager> getDescendants() {
       Set<SupportRequestManagerFragment> descendantFragments =
           getDescendantRequestManagerFragments();
-      HashSet<RequestManager> descendants = new HashSet<>(descendantFragments.size());
+      Set<RequestManager> descendants = new HashSet<>(descendantFragments.size());
       for (SupportRequestManagerFragment fragment : descendantFragments) {
         if (fragment.getRequestManager() != null) {
           descendants.add(fragment.getRequestManager());
diff --git a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
index 90284f80c..903522fc0 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/PreloadTarget.java
@@ -8,6 +8,7 @@
 import android.support.annotation.Nullable;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.util.Synthetic;
 
 /**
  * A one time use {@link com.bumptech.glide.request.target.Target} class that loads a resource into
@@ -51,7 +52,8 @@ public void onResourceReady(@NonNull Z resource, @Nullable Transition<? super Z>
     HANDLER.obtainMessage(MESSAGE_CLEAR, this).sendToTarget();
   }
 
-  private void clear() {
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic void clear() {
     requestManager.clear(this);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index e017e209b..be500d87c 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -112,26 +112,36 @@ public ViewTarget(@NonNull T view, boolean waitForLayout) {
     attachStateListener = new OnAttachStateChangeListener() {
       @Override
       public void onViewAttachedToWindow(View v) {
-        Request request = getRequest();
-        if (request != null && request.isPaused()) {
-          request.begin();
-        }
+        resumeMyRequest();
       }
 
       @Override
       public void onViewDetachedFromWindow(View v) {
-        Request request = getRequest();
-        if (request != null && !request.isCancelled() && !request.isPaused()) {
-          isClearedByUs = true;
-          request.pause();
-          isClearedByUs = false;
-        }
+        pauseMyRequest();
       }
     };
     maybeAddAttachStateListener();
     return this;
   }
 
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic void resumeMyRequest() {
+    Request request = getRequest();
+    if (request != null && request.isPaused()) {
+      request.begin();
+    }
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic void pauseMyRequest() {
+    Request request = getRequest();
+    if (request != null && !request.isCancelled() && !request.isPaused()) {
+      isClearedByUs = true;
+      request.pause();
+      isClearedByUs = false;
+    }
+  }
+
   /**
    * Indicates that Glide should always wait for any pending layout pass before checking
    * for the size an {@link View}.
@@ -151,6 +161,7 @@ public void onViewDetachedFromWindow(View v) {
    * still be used instead of the {@link View}'s dimensions even if this method is called. This
    * parameter is a fallback only.
    */
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public final ViewTarget<T, Z> waitForLayout() {
     sizeDeterminer.waitForLayout = true;
@@ -319,7 +330,7 @@ public static void setTagId(int tagId) {
     static Integer maxDisplayLength;
     private final View view;
     private final List<SizeReadyCallback> cbs = new ArrayList<>();
-    private boolean waitForLayout;
+    @Synthetic boolean waitForLayout;
 
     @Nullable private SizeDeterminerLayoutListener layoutListener;
 
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
index 06e2b7c12..24a1098e7 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
@@ -3,6 +3,7 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
+import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.mock;
 
 import android.support.annotation.NonNull;
@@ -53,6 +54,8 @@ private static void deleteRecursive(File file) {
         }
       }
     }
+    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468)
+    System.gc();
     if (!file.delete() && file.exists()) {
       throw new RuntimeException("Failed to delete: " + file);
     }
@@ -139,6 +142,7 @@ public boolean write(@NonNull File file) {
   // Tests #2465.
   @Test
   public void clearDiskCache_afterOpeningDiskCache_andDeleteDirectoryOutsideGlide_doesNotThrow() {
+    assumeTrue("A file handle is likely open, so cannot delete dir", !Util.isWindows());
     DiskCache cache = DiskLruCacheWrapper.create(dir, 1024 * 1024);
     cache.get(mock(Key.class));
     deleteRecursive(dir);
@@ -148,6 +152,7 @@ public void clearDiskCache_afterOpeningDiskCache_andDeleteDirectoryOutsideGlide_
   // Tests #2465.
   @Test
   public void get_afterDeleteDirectoryOutsideGlideAndClose_doesNotThrow() {
+    assumeTrue("A file handle is likely open, so cannot delete dir", !Util.isWindows());
     DiskCache cache = DiskLruCacheWrapper.create(dir, 1024 * 1024);
     cache.get(mock(Key.class));
     deleteRecursive(dir);
diff --git a/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java b/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
index f266fb214..07dd655dc 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/StreamEncoderTest.java
@@ -30,6 +30,8 @@ public void setUp() {
 
   @After
   public void tearDown() {
+    // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468)
+    System.gc();
     if (!file.delete()) {
       throw new IllegalStateException("Failed to delete: " + file);
     }
diff --git a/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
index f772ad3ea..b6554eabf 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/StringLoaderTest.java
@@ -15,7 +15,6 @@
 import com.bumptech.glide.tests.Util;
 import com.bumptech.glide.util.Preconditions;
 import java.io.File;
-import java.io.IOException;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -42,7 +41,7 @@
   private Options options;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     MockitoAnnotations.initMocks(this);
 
     options = new Options();
@@ -51,9 +50,9 @@ public void setUp() throws Exception {
   }
 
   @Test
-  public void testHandlesPaths() throws IOException {
-    // TODO on windows it will fail with schema being the drive letter (C:\... -> C)
-    assumeTrue(!Util.isWindows());
+  public void testHandlesPaths() {
+    // TODO fix drive letter parsing somehow
+    assumeTrue("it will fail with schema being the drive letter (C:\\... -> C)", !Util.isWindows());
 
     File f = RuntimeEnvironment.application.getCacheDir();
     Uri expected = Uri.fromFile(f);
@@ -69,8 +68,6 @@ public void testHandlesPaths() throws IOException {
 
   @Test
   public void testCanHandleComplexFilePaths() {
-    assumeTrue(!Util.isWindows());
-
     String testPath =
         "/storage/emulated/0/DCIM/Camera/IMG_20140520_100001:nopm:.jpg,mimeType=image/jpeg,"
             + "2448x3264,orientation=0,date=Tue";
@@ -86,7 +83,7 @@ public void testCanHandleComplexFilePaths() {
   }
 
   @Test
-  public void testHandlesFileUris() throws IOException {
+  public void testHandlesFileUris() {
     File f = RuntimeEnvironment.application.getCacheDir();
 
     Uri expected = Uri.fromFile(f);
@@ -101,7 +98,7 @@ public void testHandlesFileUris() throws IOException {
   }
 
   @Test
-  public void testHandlesResourceUris() throws IOException {
+  public void testHandlesResourceUris() {
     Uri resourceUri = Uri.parse("android.resource://com.bumptech.glide.tests/raw/ic_launcher");
 
     when(uriLoader.buildLoadData(eq(resourceUri), eq(IMAGE_SIDE), eq(IMAGE_SIDE), eq(options)))
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
index 06f071de7..9db7c4994 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
@@ -126,6 +126,8 @@ String encode() throws IOException {
     }
 
     void tearDown() {
+      // GC before delete() to release files on Windows (https://stackoverflow.com/a/4213208/253468)
+      System.gc();
       if (file.exists() && !file.delete()) {
         throw new IllegalStateException("Failed to delete: " + file);
       }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
index e886c51fa..ab3ebc56a 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
@@ -2,6 +2,9 @@
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -12,6 +15,7 @@
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.tests.Util;
 import com.bumptech.glide.util.Preconditions;
 import java.io.IOException;
@@ -109,4 +113,39 @@ public void getScaledFrameAtTime() throws IOException {
 
     assertThat(decoder.decode(resource, 100, 100, options).get()).isSameAs(expected);
   }
+
+  @Test
+  public void decodeFrame_withTargetSizeOriginal_onApi27_doesNotThrow() throws IOException {
+    Bitmap expected = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    when(retriever.getFrameAtTime(-1, MediaMetadataRetriever.OPTION_CLOSEST_SYNC))
+        .thenReturn(expected);
+
+    verify(retriever, never()).getScaledFrameAtTime(anyLong(), anyInt(), anyInt(), anyInt());
+    assertThat(decoder.decode(resource, Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL, options).get())
+        .isSameAs(expected);
+  }
+
+  @Test
+  public void decodeFrame_withTargetSizeOriginalWidthOnly_onApi27_doesNotThrow()
+      throws IOException {
+    Bitmap expected = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    when(retriever.getFrameAtTime(-1, MediaMetadataRetriever.OPTION_CLOSEST_SYNC))
+        .thenReturn(expected);
+
+    verify(retriever, never()).getScaledFrameAtTime(anyLong(), anyInt(), anyInt(), anyInt());
+    assertThat(decoder.decode(resource, Target.SIZE_ORIGINAL, 100, options).get())
+        .isSameAs(expected);
+  }
+
+  @Test
+  public void decodeFrame_withTargetSizeOriginalHeightOnly_onApi27_doesNotThrow()
+      throws IOException {
+    Bitmap expected = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    when(retriever.getFrameAtTime(-1, MediaMetadataRetriever.OPTION_CLOSEST_SYNC))
+        .thenReturn(expected);
+
+    verify(retriever, never()).getScaledFrameAtTime(anyLong(), anyInt(), anyInt(), anyInt());
+    assertThat(decoder.decode(resource, 100, Target.SIZE_ORIGINAL, options).get())
+        .isSameAs(expected);
+  }
 }
diff --git a/scripts/travis_firebase.sh b/scripts/travis_firebase.sh
index fb64c0e6d..e405462a5 100755
--- a/scripts/travis_firebase.sh
+++ b/scripts/travis_firebase.sh
@@ -20,6 +20,7 @@ apk_dir=instrumentation/build/outputs/apk
   --type instrumentation \
   --app $apk_dir/debug/instrumentation-debug.apk \
   --test $apk_dir/androidTest/debug/instrumentation-debug-androidTest.apk \
+  --device model=Nexus6P,version=27,locale=en,orientation=portrait \
   --device model=Nexus6P,version=26,locale=en,orientation=portrait \
   --device model=Nexus6P,version=25,locale=en,orientation=portrait \
   --device model=Nexus6P,version=24,locale=en,orientation=portrait \
