diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 768e55cc6..4283555ac 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -57,9 +57,11 @@
 import com.bumptech.glide.load.resource.bitmap.BitmapDrawableEncoder;
 import com.bumptech.glide.load.resource.bitmap.BitmapEncoder;
 import com.bumptech.glide.load.resource.bitmap.ByteBufferBitmapDecoder;
+import com.bumptech.glide.load.resource.bitmap.ByteBufferBitmapImageDecoderResourceDecoder;
 import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.Downsampler;
 import com.bumptech.glide.load.resource.bitmap.ExifInterfaceImageHeaderParser;
+import com.bumptech.glide.load.resource.bitmap.InputStreamBitmapImageDecoderResourceDecoder;
 import com.bumptech.glide.load.resource.bitmap.ResourceBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.UnitBitmapDecoder;
@@ -170,9 +172,10 @@ public static File getPhotoCacheDir(@NonNull Context context, @NonNull String ca
   @NonNull
   public static Glide get(@NonNull Context context) {
     if (glide == null) {
+      GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
       synchronized (Glide.class) {
         if (glide == null) {
-          checkAndInitializeGlide(context);
+          checkAndInitializeGlide(context, annotationGeneratedModule);
         }
       }
     }
@@ -180,7 +183,9 @@ public static Glide get(@NonNull Context context) {
     return glide;
   }
 
-  private static void checkAndInitializeGlide(@NonNull Context context) {
+  @GuardedBy("Glide.class")
+  private static void checkAndInitializeGlide(
+      @NonNull Context context, @Nullable GeneratedAppGlideModule generatedAppGlideModule) {
     // In the thread running initGlide(), one or more classes may call Glide.get(context).
     // Without this check, those calls could trigger infinite recursion.
     if (isInitializing) {
@@ -189,7 +194,7 @@ private static void checkAndInitializeGlide(@NonNull Context context) {
               + " use the provided Glide instance instead");
     }
     isInitializing = true;
-    initializeGlide(context);
+    initializeGlide(context, generatedAppGlideModule);
     isInitializing = false;
   }
 
@@ -208,11 +213,14 @@ public static synchronized void init(Glide glide) {
   }
 
   @VisibleForTesting
-  public static synchronized void init(@NonNull Context context, @NonNull GlideBuilder builder) {
-    if (Glide.glide != null) {
-      tearDown();
+  public static void init(@NonNull Context context, @NonNull GlideBuilder builder) {
+    GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
+    synchronized (Glide.class) {
+      if (Glide.glide != null) {
+        tearDown();
+      }
+      initializeGlide(context, builder, annotationGeneratedModule);
     }
-    initializeGlide(context, builder);
   }
 
   @VisibleForTesting
@@ -224,14 +232,19 @@ public static synchronized void tearDown() {
     glide = null;
   }
 
-  private static void initializeGlide(@NonNull Context context) {
-    initializeGlide(context, new GlideBuilder());
+  @GuardedBy("Glide.class")
+  private static void initializeGlide(
+      @NonNull Context context, @Nullable GeneratedAppGlideModule generatedAppGlideModule) {
+    initializeGlide(context, new GlideBuilder(), generatedAppGlideModule);
   }
 
+  @GuardedBy("Glide.class")
   @SuppressWarnings("deprecation")
-  private static void initializeGlide(@NonNull Context context, @NonNull GlideBuilder builder) {
+  private static void initializeGlide(
+      @NonNull Context context,
+      @NonNull GlideBuilder builder,
+      @Nullable GeneratedAppGlideModule annotationGeneratedModule) {
     Context applicationContext = context.getApplicationContext();
-    GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
     List<com.bumptech.glide.module.GlideModule> manifestModules = Collections.emptyList();
     if (annotationGeneratedModule == null || annotationGeneratedModule.isManifestParsingEnabled()) {
       manifestModules = new ManifestParser(applicationContext).parse();
@@ -342,7 +355,8 @@ private static void throwIncorrectGlideModule(Exception e) {
       @NonNull RequestOptionsFactory defaultRequestOptionsFactory,
       @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,
       @NonNull List<RequestListener<Object>> defaultRequestListeners,
-      boolean isLoggingRequestOriginsEnabled) {
+      boolean isLoggingRequestOriginsEnabled,
+      boolean isImageDecoderEnabledForBitmaps) {
     this.engine = engine;
     this.bitmapPool = bitmapPool;
     this.arrayPool = arrayPool;
@@ -362,14 +376,28 @@ private static void throwIncorrectGlideModule(Exception e) {
     }
 
     List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();
-    Downsampler downsampler =
-        new Downsampler(imageHeaderParsers, resources.getDisplayMetrics(), bitmapPool, arrayPool);
+
     ByteBufferGifDecoder byteBufferGifDecoder =
         new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);
     ResourceDecoder<ParcelFileDescriptor, Bitmap> parcelFileDescriptorVideoDecoder =
         VideoDecoder.parcel(bitmapPool);
-    ByteBufferBitmapDecoder byteBufferBitmapDecoder = new ByteBufferBitmapDecoder(downsampler);
-    StreamBitmapDecoder streamBitmapDecoder = new StreamBitmapDecoder(downsampler, arrayPool);
+
+    ResourceDecoder<ByteBuffer, Bitmap> byteBufferBitmapDecoder;
+    ResourceDecoder<InputStream, Bitmap> streamBitmapDecoder;
+    if (isImageDecoderEnabledForBitmaps && Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+      streamBitmapDecoder = new InputStreamBitmapImageDecoderResourceDecoder();
+      byteBufferBitmapDecoder = new ByteBufferBitmapImageDecoderResourceDecoder();
+    } else {
+      Downsampler downsampler =
+          new Downsampler(
+              registry.getImageHeaderParsers(),
+              resources.getDisplayMetrics(),
+              bitmapPool,
+              arrayPool);
+      byteBufferBitmapDecoder = new ByteBufferBitmapDecoder(downsampler);
+      streamBitmapDecoder = new StreamBitmapDecoder(downsampler, arrayPool);
+    }
+
     ResourceDrawableDecoder resourceDrawableDecoder = new ResourceDrawableDecoder(context);
     ResourceLoader.StreamFactory resourceLoaderStreamFactory =
         new ResourceLoader.StreamFactory(resources);
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index bbe3ce04b..1f9bb52c8 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -61,6 +61,7 @@ public RequestOptions build() {
   private boolean isActiveResourceRetentionAllowed;
   @Nullable private List<RequestListener<Object>> defaultRequestListeners;
   private boolean isLoggingRequestOriginsEnabled;
+  private boolean isImageDecoderEnabledForBitmaps;
 
   /**
    * Sets the {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool} implementation to use
@@ -449,6 +450,33 @@ public GlideBuilder setLogRequestOrigins(boolean isEnabled) {
     return this;
   }
 
+  /**
+   * Set to {@code true} to make Glide use {@link android.graphics.ImageDecoder} when decoding
+   * {@link Bitmap}s on Android P and higher.
+   *
+   * <p>Specifically {@link android.graphics.ImageDecoder} will be used in place of {@link
+   * com.bumptech.glide.load.resource.bitmap.Downsampler} and {@link android.graphics.BitmapFactory}
+   * to decode {@link Bitmap}s. GIFs, resources, and all other types of {@link
+   * android.graphics.drawable.Drawable}s are not affected by this flag.
+   *
+   * <p>This flag is experimental and may be removed without deprecation in a future version.
+   *
+   * <p>When this flag is enabled, Bitmap's will not be re-used when decoding images, though they
+   * may still be used as part of {@link com.bumptech.glide.load.Transformation}s because {@link
+   * android.graphics.ImageDecoder} does not support Bitmap re-use.
+   *
+   * <p>When this flag is enabled {@link
+   * com.bumptech.glide.load.resource.bitmap.Downsampler#FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS} is
+   * ignored. All other {@link com.bumptech.glide.load.resource.bitmap.Downsampler} flags are
+   * obeyed, although there may be subtle behavior differences because many options are subject to
+   * the whims of {@link android.graphics.BitmapFactory} and {@link android.graphics.ImageDecoder}
+   * which may not agree.
+   */
+  public GlideBuilder setImageDecoderEnabledForBitmaps(boolean isEnabled) {
+    isImageDecoderEnabledForBitmaps = isEnabled;
+    return this;
+  }
+
   void setRequestManagerFactory(@Nullable RequestManagerFactory factory) {
     this.requestManagerFactory = factory;
   }
@@ -535,6 +563,7 @@ Glide build(@NonNull Context context) {
         defaultRequestOptionsFactory,
         defaultTransitionOptions,
         defaultRequestListeners,
-        isLoggingRequestOriginsEnabled);
+        isLoggingRequestOriginsEnabled,
+        isImageDecoderEnabledForBitmaps);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/ImageDecoderResourceDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/ImageDecoderResourceDecoder.java
new file mode 100644
index 000000000..11c8da20f
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/ImageDecoderResourceDecoder.java
@@ -0,0 +1,135 @@
+package com.bumptech.glide.load.resource;
+
+import android.annotation.SuppressLint;
+import android.graphics.ImageDecoder;
+import android.graphics.ImageDecoder.DecodeException;
+import android.graphics.ImageDecoder.ImageInfo;
+import android.graphics.ImageDecoder.OnHeaderDecodedListener;
+import android.graphics.ImageDecoder.OnPartialImageListener;
+import android.graphics.ImageDecoder.Source;
+import android.util.Log;
+import android.util.Size;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.load.resource.bitmap.Downsampler;
+import com.bumptech.glide.load.resource.bitmap.HardwareConfigState;
+import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.util.Synthetic;
+import java.io.IOException;
+
+/**
+ * Downsamples, decodes, and rotates images according to their exif orientation using {@link
+ * ImageDecoder}.
+ *
+ * <p>Obeys all options in {@link Downsampler} except for {@link
+ * Downsampler#FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS}.
+ *
+ * @param <T> The type of resource to be decoded (Bitmap, Drawable etc).
+ */
+@RequiresApi(api = 28)
+public abstract class ImageDecoderResourceDecoder<T> implements ResourceDecoder<Source, T> {
+  private static final String TAG = "ImageDecoder";
+
+  @SuppressWarnings("WeakerAccess")
+  @Synthetic
+  final HardwareConfigState hardwareConfigState = HardwareConfigState.getInstance();
+
+  @Override
+  public final boolean handles(@NonNull Source source, @NonNull Options options) {
+    return true;
+  }
+
+  @Nullable
+  @Override
+  public final Resource<T> decode(
+      @NonNull Source source,
+      final int requestedWidth,
+      final int requestedHeight,
+      @NonNull Options options)
+      throws IOException {
+    final DecodeFormat decodeFormat = options.get(Downsampler.DECODE_FORMAT);
+    final DownsampleStrategy strategy = options.get(DownsampleStrategy.OPTION);
+    final boolean isHardwareConfigAllowed =
+        options.get(Downsampler.ALLOW_HARDWARE_CONFIG) != null
+            && options.get(Downsampler.ALLOW_HARDWARE_CONFIG);
+
+    return decode(
+        source,
+        requestedWidth,
+        requestedHeight,
+        new OnHeaderDecodedListener() {
+          @SuppressLint("Override")
+          @Override
+          public void onHeaderDecoded(ImageDecoder decoder, ImageInfo info, Source source) {
+            if (hardwareConfigState.isHardwareConfigAllowed(
+                requestedWidth,
+                requestedHeight,
+                isHardwareConfigAllowed,
+                /*isExifOrientationRequired=*/ false)) {
+              decoder.setAllocator(ImageDecoder.ALLOCATOR_HARDWARE);
+            } else {
+              decoder.setAllocator(ImageDecoder.ALLOCATOR_SOFTWARE);
+            }
+
+            if (decodeFormat == DecodeFormat.PREFER_RGB_565) {
+              decoder.setMemorySizePolicy(ImageDecoder.MEMORY_POLICY_LOW_RAM);
+            }
+
+            decoder.setOnPartialImageListener(
+                new OnPartialImageListener() {
+                  @Override
+                  public boolean onPartialImage(@NonNull DecodeException e) {
+                    // Never return partial images.
+                    return false;
+                  }
+                });
+
+            Size size = info.getSize();
+            int targetWidth = requestedWidth;
+            if (requestedWidth == Target.SIZE_ORIGINAL) {
+              targetWidth = size.getWidth();
+            }
+            int targetHeight = requestedHeight;
+            if (requestedHeight == Target.SIZE_ORIGINAL) {
+              targetHeight = size.getHeight();
+            }
+
+            float scaleFactor =
+                strategy.getScaleFactor(
+                    size.getWidth(), size.getHeight(), targetWidth, targetHeight);
+
+            int resizeWidth = Math.round(scaleFactor * size.getWidth());
+            int resizeHeight = Math.round(scaleFactor * size.getHeight());
+            if (Log.isLoggable(TAG, Log.VERBOSE)) {
+              Log.v(
+                  TAG,
+                  "Resizing"
+                      + " from ["
+                      + size.getWidth()
+                      + "x"
+                      + size.getHeight()
+                      + "]"
+                      + " to ["
+                      + resizeWidth
+                      + "x"
+                      + resizeHeight
+                      + "]"
+                      + " scaleFactor: "
+                      + scaleFactor);
+            }
+
+            decoder.setTargetSize(resizeWidth, resizeHeight);
+          }
+        });
+  }
+
+  protected abstract Resource<T> decode(
+      Source source, int requestedWidth, int requestedHeight, OnHeaderDecodedListener listener)
+      throws IOException;
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapImageDecoderResourceDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapImageDecoderResourceDecoder.java
new file mode 100644
index 000000000..284dd769c
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapImageDecoderResourceDecoder.java
@@ -0,0 +1,46 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.graphics.Bitmap;
+import android.graphics.ImageDecoder;
+import android.graphics.ImageDecoder.OnHeaderDecodedListener;
+import android.graphics.ImageDecoder.Source;
+import android.util.Log;
+import androidx.annotation.RequiresApi;
+import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
+import com.bumptech.glide.load.resource.ImageDecoderResourceDecoder;
+import java.io.IOException;
+
+/** {@link Bitmap} specific implementation of {@link ImageDecoderResourceDecoder}. */
+@RequiresApi(api = 28)
+public final class BitmapImageDecoderResourceDecoder extends ImageDecoderResourceDecoder<Bitmap> {
+  private static final String TAG = "BitmapImageDecoder";
+  private final BitmapPool bitmapPool = new BitmapPoolAdapter();
+
+  @Override
+  protected Resource<Bitmap> decode(
+      Source source,
+      int requestedResourceWidth,
+      int requestedResourceHeight,
+      OnHeaderDecodedListener listener)
+      throws IOException {
+    Bitmap result = ImageDecoder.decodeBitmap(source, listener);
+    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+      Log.v(
+          TAG,
+          "Decoded"
+              + " ["
+              + result.getWidth()
+              + "x"
+              + result.getHeight()
+              + "]"
+              + " for ["
+              + requestedResourceWidth
+              + "x"
+              + requestedResourceHeight
+              + "]");
+    }
+    return new BitmapResource(result, bitmapPool);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ByteBufferBitmapImageDecoderResourceDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ByteBufferBitmapImageDecoderResourceDecoder.java
new file mode 100644
index 000000000..c9a18528f
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ByteBufferBitmapImageDecoderResourceDecoder.java
@@ -0,0 +1,37 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.graphics.Bitmap;
+import android.graphics.ImageDecoder;
+import android.graphics.ImageDecoder.Source;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.engine.Resource;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+/**
+ * {@link ByteBuffer} specific implementation of {@link
+ * ByteBufferBitmapImageDecoderResourceDecoder}.
+ */
+@RequiresApi(api = 28)
+public final class ByteBufferBitmapImageDecoderResourceDecoder
+    implements ResourceDecoder<ByteBuffer, Bitmap> {
+  private final BitmapImageDecoderResourceDecoder wrapped = new BitmapImageDecoderResourceDecoder();
+
+  @Override
+  public boolean handles(@NonNull ByteBuffer source, @NonNull Options options) throws IOException {
+    return true;
+  }
+
+  @Nullable
+  @Override
+  public Resource<Bitmap> decode(
+      @NonNull ByteBuffer buffer, int width, int height, @NonNull Options options)
+      throws IOException {
+    Source source = ImageDecoder.createSource(buffer);
+    return wrapped.decode(source, width, height, options);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 9bf7c5140..57449a054 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -34,7 +34,10 @@
 import java.util.Queue;
 import java.util.Set;
 
-/** Downsamples, decodes, and rotates images according to their exif orientation. */
+/**
+ * Downsamples, decodes, and rotates images according to their exif orientation using {@link
+ * BitmapFactory}.
+ */
 public final class Downsampler {
   static final String TAG = "Downsampler";
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
index a597fa2a7..a1c4990de 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
@@ -13,7 +13,7 @@
  * State and constants for interacting with {@link android.graphics.Bitmap.Config#HARDWARE} on
  * Android O+.
  */
-final class HardwareConfigState {
+public final class HardwareConfigState {
   /**
    * The minimum size in pixels a {@link Bitmap} must be in both dimensions to be created with the
    * {@link Bitmap.Config#HARDWARE} configuration.
@@ -62,7 +62,7 @@
   @GuardedBy("this")
   private boolean isFdSizeBelowHardwareLimit = true;
 
-  static HardwareConfigState getInstance() {
+  public static HardwareConfigState getInstance() {
     if (instance == null) {
       synchronized (HardwareConfigState.class) {
         if (instance == null) {
@@ -79,11 +79,9 @@ static HardwareConfigState getInstance() {
     // Singleton constructor.
   }
 
-  @TargetApi(Build.VERSION_CODES.O)
-  boolean setHardwareConfigIfAllowed(
+  public boolean isHardwareConfigAllowed(
       int targetWidth,
       int targetHeight,
-      BitmapFactory.Options optionsWithScaling,
       boolean isHardwareConfigAllowed,
       boolean isExifOrientationRequired) {
     if (!isHardwareConfigAllowed
@@ -93,12 +91,22 @@ boolean setHardwareConfigIfAllowed(
       return false;
     }
 
-    boolean result =
-        targetWidth >= MIN_HARDWARE_DIMENSION
-            && targetHeight >= MIN_HARDWARE_DIMENSION
-            // Make sure to call isFdSizeBelowHardwareLimit last because it has side affects.
-            && isFdSizeBelowHardwareLimit();
+    return targetWidth >= MIN_HARDWARE_DIMENSION
+        && targetHeight >= MIN_HARDWARE_DIMENSION
+        // Make sure to call isFdSizeBelowHardwareLimit last because it has side affects.
+        && isFdSizeBelowHardwareLimit();
+  }
 
+  @TargetApi(Build.VERSION_CODES.O)
+  boolean setHardwareConfigIfAllowed(
+      int targetWidth,
+      int targetHeight,
+      BitmapFactory.Options optionsWithScaling,
+      boolean isHardwareConfigAllowed,
+      boolean isExifOrientationRequired) {
+    boolean result =
+        isHardwareConfigAllowed(
+            targetWidth, targetHeight, isHardwareConfigAllowed, isExifOrientationRequired);
     if (result) {
       optionsWithScaling.inPreferredConfig = Bitmap.Config.HARDWARE;
       optionsWithScaling.inMutable = false;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/InputStreamBitmapImageDecoderResourceDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/InputStreamBitmapImageDecoderResourceDecoder.java
new file mode 100644
index 000000000..0c0c8c0e9
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/InputStreamBitmapImageDecoderResourceDecoder.java
@@ -0,0 +1,37 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.graphics.Bitmap;
+import android.graphics.ImageDecoder;
+import android.graphics.ImageDecoder.Source;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.util.ByteBufferUtil;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+
+/** {@link InputStream} specific implementation of {@link BitmapImageDecoderResourceDecoder}. */
+@RequiresApi(api = 28)
+public final class InputStreamBitmapImageDecoderResourceDecoder
+    implements ResourceDecoder<InputStream, Bitmap> {
+  private final BitmapImageDecoderResourceDecoder wrapped = new BitmapImageDecoderResourceDecoder();
+
+  @Override
+  public boolean handles(@NonNull InputStream source, @NonNull Options options) throws IOException {
+    return true;
+  }
+
+  @Nullable
+  @Override
+  public Resource<Bitmap> decode(
+      @NonNull InputStream stream, int width, int height, @NonNull Options options)
+      throws IOException {
+    ByteBuffer buffer = ByteBufferUtil.fromStream(stream);
+    Source source = ImageDecoder.createSource(buffer);
+    return wrapped.decode(source, width, height, options);
+  }
+}
diff --git a/library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java b/library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java
index 3d3f66882..cf96d4bb2 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/OptionsTest.java
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class OptionsTest {
   @Rule public final KeyTester keyTester = new KeyTester();
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
index 0b59d74b1..3c3b5cbe8 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbFetcherTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ThumbFetcherTest {
 
   @Mock private ThumbnailStreamOpener opener;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
index 77d3f9320..ac3d5a933 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
@@ -34,7 +34,7 @@
 import org.robolectric.fakes.RoboCursor;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ThumbnailStreamOpenerTest {
   private Harness harness;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
index e6cc5deaa..7ca4dac65 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/resource/FileDescriptorLocalUriFetcherTest.java
@@ -28,7 +28,6 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    manifest = Config.NONE,
     sdk = 18,
     shadows = {ContentResolverShadow.class})
 public class FileDescriptorLocalUriFetcherTest {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
index 5826069c9..f9f5a1c50 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/resource/StreamLocalUriFetcherTest.java
@@ -26,7 +26,6 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    manifest = Config.NONE,
     sdk = 18,
     shadows = {ContentResolverShadow.class})
 public class StreamLocalUriFetcherTest {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
index 2b00b7b8f..89be0fd8c 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineJobTest.java
@@ -40,7 +40,7 @@
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class EngineJobTest {
   private EngineJobHarness harness;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
index 279efc5c5..6ea803c99 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
@@ -23,7 +23,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class EngineKeyTest {
   @Mock private Transformation<Object> transformation;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
index 744749eca..c308be1fe 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineResourceTest.java
@@ -21,7 +21,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class EngineResourceTest {
   private EngineResource<Object> engineResource;
   @Mock private EngineResource.ResourceListener listener;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 63449dd8a..9a652df3b 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -46,7 +46,6 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    manifest = Config.NONE,
     sdk = 18,
     shadows = {GlideShadowLooper.class})
 @SuppressWarnings("unchecked")
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
index 2f9286ff7..97ea3c666 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceCacheKeyTest.java
@@ -22,10 +22,8 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public class ResourceCacheKeyTest {
   @Rule public final KeyTester keyTester = new KeyTester();
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
index ac886190a..322e9349c 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/ResourceRecyclerTest.java
@@ -16,7 +16,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ResourceRecyclerTest {
 
   private ResourceRecycler recycler;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
index 5f9e6521d..f1f144899 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapperTest.java
@@ -21,7 +21,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class DiskLruCacheWrapperTest {
   private DiskCache cache;
   private byte[] data;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
index a7d0c8c75..38adb5c56 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculatorTest.java
@@ -24,7 +24,7 @@
 import org.robolectric.shadows.ShadowActivityManager;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 19, shadows = LowRamActivityManager.class)
+@Config(sdk = 19, shadows = LowRamActivityManager.class)
 public class MemorySizeCalculatorTest {
   private MemorySizeHarness harness;
   private int initialSdkVersion;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
index 99a07d2e5..0510e3e62 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/SafeKeyGeneratorTest.java
@@ -14,7 +14,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class SafeKeyGeneratorTest {
   private SafeKeyGenerator keyGenerator;
   private int nextId;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
index 6f4e45681..c9d9438ce 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/executor/GlideExecutorTest.java
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class GlideExecutorTest {
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
index 0c81d967b..6bbaf090e 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillRunnerTest.java
@@ -43,7 +43,7 @@
 import org.robolectric.shadows.ShadowLog;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class BitmapPreFillRunnerTest {
   @Mock private BitmapPreFillRunner.Clock clock;
   @Mock private BitmapPool pool;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index e556f7baf..2c5f4062f 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -30,7 +30,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class BitmapPreFillerTest {
   private static final int DEFAULT_BITMAP_WIDTH = 100;
   private static final int DEFAULT_BITMAP_HEIGHT = 50;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
index 45a2ac31b..f3e6acb4d 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/PreFillTypeTest.java
@@ -10,7 +10,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class PreFillTypeTest {
 
   @Test(expected = IllegalArgumentException.class)
diff --git a/library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
index fd28072ef..aa719ddbb 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/model/stream/BaseGlideUrlLoaderTest.java
@@ -29,7 +29,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class BaseGlideUrlLoaderTest {
 
   @Mock private ModelCache<Object, GlideUrl> modelCache;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
index e46c95fcd..446c15931 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoaderTest.java
@@ -13,10 +13,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public class HttpGlideUrlLoaderTest {
   private HttpGlideUrlLoader loader;
   private GlideUrl model;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
index e816a95d8..512c5f7ee 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/model/stream/HttpUriLoaderTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class HttpUriLoaderTest {
   private static final int IMAGE_SIDE = 100;
   private static final Options OPTIONS = new Options();
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
index d2b6f6942..8b3a61724 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/drawable/DrawableResourceTest.java
@@ -18,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class DrawableResourceTest {
   private TestDrawable drawable;
   private DrawableResource<TestDrawable> resource;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
index 7f56c67ec..e9a43cf79 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoderTest.java
@@ -33,7 +33,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18, shadows = GlideShadowLooper.class)
+@Config(sdk = 18, shadows = GlideShadowLooper.class)
 public class ByteBufferGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] {0x47, 0x49, 0x46};
   private static final int ARRAY_POOL_SIZE_BYTES = 4 * 1024 * 1024;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
index 2b5cfbba3..b72af3910 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableResourceTest.java
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class GifDrawableResourceTest {
   private GifDrawable drawable;
   private GifDrawableResource resource;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index b35c8d645..c3f056327 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -55,7 +55,6 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(
-    manifest = Config.NONE,
     sdk = 18,
     shadows = {GlideShadowLooper.class, BitmapTrackingShadowCanvas.class})
 public class GifDrawableTest {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
index f4c8e72d9..cbf6cea88 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
@@ -34,7 +34,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class GifDrawableTransformationTest {
   @Rule public final KeyTester keyTester = new KeyTester();
   @Mock private Transformation<Bitmap> wrapped;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
index 3b5c2fb12..80b023adf 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameLoaderTest.java
@@ -43,7 +43,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class GifFrameLoaderTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
index 59d3cfb09..e9fa2d914 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifFrameResourceDecoderTest.java
@@ -18,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class GifFrameResourceDecoderTest {
   private GifDecoder gifDecoder;
   private GifFrameResourceDecoder resourceDecoder;
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
index 9b5db247f..75182fbbd 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/StreamGifDecoderTest.java
@@ -21,7 +21,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class StreamGifDecoderTest {
   private static final byte[] GIF_HEADER = new byte[] {0x47, 0x49, 0x46};
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
index d6760ec91..d180f6196 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
@@ -17,7 +17,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class BitmapBytesTranscoderTest {
   private BitmapBytesTranscoderHarness harness;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
index b3c195657..795c6de09 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapDrawableTranscoderTest.java
@@ -16,7 +16,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class BitmapDrawableTranscoderTest {
   private BitmapDrawableTranscoder transcoder;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
index 58576f582..f9407bccb 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactoryTest.java
@@ -12,7 +12,7 @@
 import org.robolectric.shadows.ShadowApplication;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class DefaultConnectivityMonitorFactoryTest {
   private ConnectivityMonitorFactory factory;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
index fb7e44164..24ed89aa8 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
@@ -29,7 +29,7 @@
 import org.robolectric.shadows.ShadowNetworkInfo;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18, shadows = PermissionConnectivityManager.class)
+@Config(sdk = 18, shadows = PermissionConnectivityManager.class)
 public class DefaultConnectivityMonitorTest {
   @Mock private ConnectivityMonitor.ConnectivityListener listener;
   private DefaultConnectivityMonitor monitor;
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/LifecycleTest.java b/library/test/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
index df8bce1ae..93d67468d 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/LifecycleTest.java
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class LifecycleTest {
 
   private ActivityFragmentLifecycle lifecycle;
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
index 0b78ad0ee..72d6d5805 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
@@ -19,7 +19,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class RequestManagerFragmentTest {
   private static final String TAG = "tag";
   private Harness[] harnesses;
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
index 0211536b5..565679b2d 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
@@ -36,7 +36,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18, shadows = GlideShadowLooper.class)
+@Config(sdk = 18, shadows = GlideShadowLooper.class)
 public class RequestManagerRetrieverTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
index 605683c8a..dbf11323e 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
@@ -15,10 +15,8 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public class RequestTrackerTest {
   private RequestTracker tracker;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java b/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
index e5854e459..a59d2120d 100644
--- a/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
@@ -23,7 +23,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 @SuppressWarnings("deprecation")
 public class ManifestParserTest {
   private static final String MODULE_VALUE = "GlideModule";
diff --git a/library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
index 3feff57b5..67042c787 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
@@ -27,7 +27,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class RequestFutureTargetTest {
   private int width;
   private int height;
diff --git a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
index d3ec2f9b7..f9b2f8b64 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
@@ -26,10 +26,8 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public class RequestOptionsTest {
 
   private RequestOptions options;
diff --git a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index 787037168..c032fb5a5 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -56,7 +56,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 @SuppressWarnings("rawtypes")
 public class SingleRequestTest {
 
diff --git a/library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java b/library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
index f05b9c316..5d0a4cb65 100644
--- a/library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/resize/load/ExifTest.java
@@ -16,7 +16,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ExifTest {
 
   private ArrayPool byteArrayPool;
diff --git a/library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java b/library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
index 0d2c90bb8..45e747de6 100644
--- a/library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/signature/ApplicationVersionSignatureTest.java
@@ -21,7 +21,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ApplicationVersionSignatureTest {
   @Rule public final KeyTester keyTester = new KeyTester();
   private Context context;
diff --git a/library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java b/library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
index 82edfd619..1b8c93665 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/ByteBufferUtilTest.java
@@ -12,7 +12,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ByteBufferUtilTest {
   private static final int BUFFER_SIZE = 16384;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
index 4fbc8d0e1..0201a7a8a 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/ContentLengthInputStreamTest.java
@@ -18,7 +18,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ContentLengthInputStreamTest {
   @Mock private InputStream wrapped;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java b/library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
index 8418cc85d..3600ab841 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/FixedPreloadSizeProviderTest.java
@@ -8,7 +8,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class FixedPreloadSizeProviderTest {
 
   // containsExactly doesn't need a return value check.
diff --git a/library/test/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java b/library/test/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
index b8ef132d3..1d9dc4606 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
@@ -8,10 +8,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE)
 public class MarkEnforcingInputStreamTest {
   // An arbitrary number > 0.
   private static final int MARK_LIMIT = 5;
diff --git a/library/test/src/test/java/com/bumptech/glide/util/UtilTest.java b/library/test/src/test/java/com/bumptech/glide/util/UtilTest.java
index 416095784..a875b0591 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/UtilTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/UtilTest.java
@@ -10,7 +10,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 27)
+@Config(sdk = 27)
 public class UtilTest {
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java b/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
index 222d848b9..1136a3c44 100644
--- a/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/util/ViewPreloadSizeProviderTest.java
@@ -13,7 +13,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class ViewPreloadSizeProviderTest {
 
   private View view;
diff --git a/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
index fba484f05..5f16febb5 100644
--- a/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
+++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
@@ -20,11 +20,9 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadows.ShadowBitmap;
 
-/**
- * Tests for {@link com.bumptech.glide.gifdecoder.GifDecoder}.
- */
+/** Tests for {@link com.bumptech.glide.gifdecoder.GifDecoder}. */
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(sdk = 18)
 public class GifDecoderTest {
 
   private MockProvider provider;
