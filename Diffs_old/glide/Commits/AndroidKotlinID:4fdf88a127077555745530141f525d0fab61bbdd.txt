diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
index e12828b84..291f594ae 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
@@ -1,9 +1,12 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+
 import com.bumptech.glide.annotation.Excludes;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
@@ -78,6 +81,7 @@
   private static final String GENERATED_APP_MODULE_IMPL_SIMPLE_NAME =
       "GeneratedAppGlideModuleImpl";
   private static final String GENERATED_ROOT_MODULE_SIMPLE_NAME = "GeneratedAppGlideModule";
+
   private final ProcessorUtil processorUtil;
 
   AppModuleGenerator(ProcessorUtil processorUtil) {
@@ -110,8 +114,16 @@ TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClas
         MethodSpec.methodBuilder("applyOptions")
             .addModifiers(Modifier.PUBLIC)
             .addAnnotation(Override.class)
-            .addParameter(ClassName.get("android.content", "Context"), "context")
-            .addParameter(ClassName.get("com.bumptech.glide", "GlideBuilder"), "builder")
+            .addParameter(ParameterSpec.builder(
+                ClassName.get("android.content", "Context"), "context")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(
+                ClassName.get("com.bumptech.glide", "GlideBuilder"), "builder")
+                .addAnnotation(nonNull())
+                .build()
+            )
             .addStatement("appGlideModule.applyOptions(context, builder)", appGlideModule)
             .build();
 
@@ -147,6 +159,7 @@ TypeSpec generate(TypeElement appGlideModule, Set<String> libraryGlideModuleClas
     builder.addMethod(
         MethodSpec.methodBuilder("getRequestManagerFactory")
             .addAnnotation(Override.class)
+            .addAnnotation(nonNull())
             .returns(generatedRequestManagerFactoryClassName)
             .addStatement("return new $T()", generatedRequestManagerFactoryClassName)
             .build());
@@ -165,7 +178,7 @@ private MethodSpec generateGetExcludedModuleClasses(Collection<String> excludedC
     MethodSpec.Builder builder = MethodSpec.methodBuilder("getExcludedModuleClasses")
         .addModifiers(Modifier.PUBLIC)
         .addAnnotation(Override.class)
-        .addAnnotation(ClassName.get("android.support.annotation", "NonNull"))
+        .addAnnotation(nonNull())
         .returns(setOfClassOfWildcardOfObject);
 
     if (excludedClassNames.isEmpty()) {
@@ -193,9 +206,21 @@ private MethodSpec generateRegisterComponents(
         MethodSpec.methodBuilder("registerComponents")
             .addModifiers(Modifier.PUBLIC)
             .addAnnotation(Override.class)
-            .addParameter(ClassName.get("android.content", "Context"), "context")
-            .addParameter(ClassName.get("com.bumptech.glide", "Glide"), "glide")
-            .addParameter(ClassName.get("com.bumptech.glide", "Registry"), "registry");
+            .addParameter(ParameterSpec.builder(
+                ClassName.get("android.content", "Context"), "context")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(
+                ClassName.get("com.bumptech.glide", "Glide"), "glide")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(
+                ClassName.get("com.bumptech.glide", "Registry"), "registry")
+                .addAnnotation(nonNull())
+                .build()
+            );
 
     for (String glideModule : libraryGlideModuleClassNames) {
       if (excludedGlideModuleClassNames.contains(glideModule)) {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
index 842566324..24bd13efe 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+
 import com.bumptech.glide.annotation.GlideOption;
 import com.bumptech.glide.annotation.GlideType;
 import com.google.common.base.Function;
@@ -29,9 +31,6 @@
  * for an Application.
  */
 final class GlideExtensionValidator {
-  private static final String FULLY_QUALIFIED_NON_NULL_CLASS_NAME =
-      "android.support.annotation.NonNull";
-
   private final ProcessingEnvironment processingEnvironment;
   private final ProcessorUtil processorUtil;
 
@@ -254,11 +253,11 @@ public String apply(AnnotationMirror input) {
               }
             })
             .toSet();
-    if (!annotationNames.contains(FULLY_QUALIFIED_NON_NULL_CLASS_NAME)) {
+    if (!annotationNames.contains(nonNull().reflectionName())) {
       processingEnvironment.getMessager().printMessage(
           Kind.WARNING,
           executableElement.getEnclosingElement() + "#" + executableElement.getSimpleName()
-              + " is missing the " + FULLY_QUALIFIED_NON_NULL_CLASS_NAME + " annotation,"
+              + " is missing the " + nonNull().reflectionName() + " annotation,"
               + " please add it to ensure that your extension methods are always returning non-null"
               + " values");
     }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index 3daf58dad..201dd604a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -63,6 +63,8 @@
       GLIDE_MODULE_PACKAGE_NAME + "." + LIBRARY_GLIDE_MODULE_SIMPLE_NAME;
   private static final String COMPILER_PACKAGE_NAME =
       GlideAnnotationProcessor.class.getPackage().getName();
+  private static final ClassName NONNULL_ANNOTATION =
+      ClassName.get("android.support.annotation", "NonNull");
 
   private final ProcessingEnvironment processingEnv;
   private final TypeElement appGlideModuleType;
@@ -332,6 +334,10 @@ private static ParameterSpec getParameter(VariableElement method) {
     return result;
   }
 
+  static ClassName nonNull() {
+    return NONNULL_ANNOTATION;
+  }
+
   List<ExecutableElement> findInstanceMethodsReturning(TypeElement clazz, TypeMirror returnType) {
     return FluentIterable.from(clazz.getEnclosedElements())
         .filter(new FilterPublicMethods(returnType, MethodType.INSTANCE))
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 58e5db130..2486c8226 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
 import com.google.common.base.Function;
@@ -108,9 +110,7 @@
       ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");
   private static final ClassName CHECK_RESULT_CLASS_NAME =
       ClassName.get("android.support.annotation", "CheckResult");
-  private static final AnnotationSpec NON_NULL = AnnotationSpec
-      .builder(ClassName.get("android.support.annotation", "NonNull"))
-      .build();
+  private static final AnnotationSpec NON_NULL = AnnotationSpec.builder(nonNull()).build();
 
   private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
@@ -402,8 +402,14 @@ public String apply(CodeBlock input) {
 
     MethodSpec firstConstructor =
         MethodSpec.constructorBuilder()
-            .addParameter(classOfTranscodeType, "transcodeClass")
-            .addParameter(requestBuilderOfWildcardOfObject, "other")
+            .addParameter(ParameterSpec.builder(classOfTranscodeType, "transcodeClass")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(requestBuilderOfWildcardOfObject, "other")
+                .addAnnotation(nonNull())
+                .build()
+            )
         .addStatement("super($N, $N)", "transcodeClass", "other")
         .build();
 
@@ -412,10 +418,22 @@ public String apply(CodeBlock input) {
     ClassName requestManager = ClassName.get("com.bumptech.glide", "RequestManager");
     MethodSpec secondConstructor =
         MethodSpec.constructorBuilder()
-            .addParameter(glide, "glide")
-            .addParameter(requestManager, "requestManager")
-            .addParameter(classOfTranscodeType, "transcodeClass")
-            .addParameter(context, "context")
+            .addParameter(ParameterSpec.builder(glide, "glide")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(requestManager, "requestManager")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(classOfTranscodeType, "transcodeClass")
+                .addAnnotation(nonNull())
+                .build()
+            )
+            .addParameter(ParameterSpec.builder(context, "context")
+                .addAnnotation(nonNull())
+                .build()
+            )
             .addStatement(
                 "super($N, $N ,$N, $N)", "glide", "requestManager", "transcodeClass", "context")
             .build();
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
index bc059256b..4aec3c8bb 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
@@ -1,7 +1,10 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeSpec;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Modifier;
@@ -77,11 +80,25 @@ TypeSpec generate(String generatedCodePackageName, TypeSpec generatedRequestMana
             MethodSpec.methodBuilder("build")
                 .addModifiers(Modifier.PUBLIC)
                 .addAnnotation(Override.class)
+                .addAnnotation(nonNull())
                 .returns(requestManagerClassName)
-                .addParameter(ClassName.get(glideType), "glide")
-                .addParameter(ClassName.get(lifecycleType), "lifecycle")
-                .addParameter(ClassName.get(requestManagerTreeNodeType), "treeNode")
-                .addParameter(CONTEXT_CLASS_NAME, "context")
+                .addParameter(ParameterSpec.builder(ClassName.get(glideType), "glide")
+                    .addAnnotation(nonNull())
+                    .build()
+                )
+                .addParameter(ParameterSpec.builder(ClassName.get(lifecycleType), "lifecycle")
+                    .addAnnotation(nonNull())
+                    .build()
+                )
+                .addParameter(
+                    ParameterSpec.builder(ClassName.get(requestManagerTreeNodeType), "treeNode")
+                        .addAnnotation(nonNull())
+                        .build()
+                )
+                .addParameter(ParameterSpec.builder(CONTEXT_CLASS_NAME, "context")
+                    .addAnnotation(nonNull())
+                    .build()
+                )
                 .addStatement(
                     "return new $T(glide, lifecycle, treeNode, context)",
                     ClassName.get(generatedCodePackageName, generatedRequestManagerSpec.name))
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index 4f8b284a9..31e646ddc 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideType;
 import com.google.common.base.Function;
@@ -60,13 +62,8 @@
       "com.bumptech.glide.manager.RequestManagerTreeNode";
   private static final ClassName CHECK_RESULT_CLASS_NAME =
       ClassName.get("android.support.annotation", "CheckResult");
-  private static final ClassName NON_NULL_CLASS_NAME =
-      ClassName.get("android.support.annotation", "NonNull");
   private static final ClassName CONTEXT_CLASS_NAME =
       ClassName.get("android.content", "Context");
-  private static final AnnotationSpec NON_NULL = AnnotationSpec
-      .builder(ClassName.get("android.support.annotation", "NonNull"))
-      .build();
 
   private static final String GENERATED_REQUEST_MANAGER_SIMPLE_NAME =
       "GlideRequests";
@@ -105,37 +102,49 @@ TypeSpec generate(
       Set<String> glideExtensions) {
     generatedRequestBuilderClassName = ClassName.get(generatedCodePackageName, requestBuilder.name);
     return TypeSpec.classBuilder(GENERATED_REQUEST_MANAGER_SIMPLE_NAME)
-         .superclass(requestManagerClassName)
-         .addJavadoc("Includes all additions from methods in {@link $T}s\n"
-                 + "annotated with {@link $T}\n"
-                 + "\n"
-                 + "<p>Generated code, do not modify\n",
-             GlideExtension.class, GlideType.class)
+        .superclass(requestManagerClassName)
+        .addJavadoc("Includes all additions from methods in {@link $T}s\n"
+                + "annotated with {@link $T}\n"
+                + "\n"
+                + "<p>Generated code, do not modify\n",
+            GlideExtension.class, GlideType.class)
         .addAnnotation(
             AnnotationSpec.builder(SuppressWarnings.class)
                 .addMember("value", "$S", "deprecation")
                 .build())
-         .addModifiers(Modifier.PUBLIC)
-         .addMethod(generateAsMethod(generatedCodePackageName, requestBuilder))
-         .addMethod(generateCallSuperConstructor())
-         .addMethods(generateExtensionRequestManagerMethods(glideExtensions))
-         .addMethods(generateRequestManagerRequestManagerMethodOverrides(generatedCodePackageName))
-         .addMethods(generateRequestManagerRequestBuilderMethodOverrides())
-         .addMethods(
-             FluentIterable.from(
-                 Collections.singletonList(
-                     generateOverrideSetRequestOptions(generatedCodePackageName, requestOptions)))
-                 .filter(Predicates.<MethodSpec>notNull()))
-         .build();
+        .addModifiers(Modifier.PUBLIC)
+        .addMethod(generateAsMethod(generatedCodePackageName, requestBuilder))
+        .addMethod(generateCallSuperConstructor())
+        .addMethods(generateExtensionRequestManagerMethods(glideExtensions))
+        .addMethods(generateRequestManagerRequestManagerMethodOverrides(generatedCodePackageName))
+        .addMethods(generateRequestManagerRequestBuilderMethodOverrides())
+        .addMethods(
+            FluentIterable.from(
+                Collections.singletonList(
+                    generateOverrideSetRequestOptions(generatedCodePackageName, requestOptions)))
+                .filter(Predicates.<MethodSpec>notNull()))
+        .build();
   }
 
   private MethodSpec generateCallSuperConstructor() {
     return MethodSpec.constructorBuilder()
         .addModifiers(Modifier.PUBLIC)
-        .addParameter(ClassName.get(glideType), "glide")
-        .addParameter(ClassName.get(lifecycleType), "lifecycle")
-        .addParameter(ClassName.get(requestManagerTreeNodeType), "treeNode")
-        .addParameter(CONTEXT_CLASS_NAME, "context")
+        .addParameter(ParameterSpec.builder(ClassName.get(glideType), "glide")
+            .addAnnotation(nonNull())
+            .build()
+        )
+        .addParameter(ParameterSpec.builder(ClassName.get(lifecycleType), "lifecycle")
+            .addAnnotation(nonNull())
+            .build()
+        )
+        .addParameter(ParameterSpec.builder(ClassName.get(requestManagerTreeNodeType), "treeNode")
+            .addAnnotation(nonNull())
+            .build()
+        )
+        .addParameter(ParameterSpec.builder(CONTEXT_CLASS_NAME, "context")
+            .addAnnotation(nonNull())
+            .build()
+        )
         .addStatement("super(glide, lifecycle, treeNode, context)")
         .build();
   }
@@ -155,10 +164,11 @@ private MethodSpec generateAsMethod(String generatedCodePackageName, TypeSpec re
         .addModifiers(Modifier.PUBLIC)
         .addAnnotation(Override.class)
         .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
-        .addAnnotation(NON_NULL)
+        .addAnnotation(nonNull())
         .addTypeVariable(TypeVariableName.get("ResourceType"))
         .returns(requestBuilderOfResourceType)
-        .addParameter(classOfResouceType.annotated(NON_NULL), "resourceClass")
+        .addParameter(classOfResouceType.annotated(AnnotationSpec.builder(nonNull()).build()),
+            "resourceClass")
         .addStatement("return new $T<>(glide, this, resourceClass, context)",
             this.generatedRequestBuilderClassName)
         .build();
@@ -183,6 +193,7 @@ private MethodSpec generateRequestManagerRequestManagerMethodOverride(
     ClassName generatedRequestManagerName =
         ClassName.get(generatedPackageName, GENERATED_REQUEST_MANAGER_SIMPLE_NAME);
     return ProcessorUtil.overriding(method)
+        .addAnnotation(nonNull())
         .returns(generatedRequestManagerName)
         .addCode(ProcessorUtil.generateCastingSuperCall(generatedRequestManagerName, method))
         .build();
@@ -220,7 +231,7 @@ public MethodSpec apply(ExecutableElement input) {
    */
   private MethodSpec generateRequestManagerRequestBuilderMethodOverride(
       ExecutableElement methodToOverride) {
-     // We've already verified that this method returns a RequestBuilder and RequestBuilders have
+    // We've already verified that this method returns a RequestBuilder and RequestBuilders have
     // exactly one type argument, so this is safe unless those assumptions change.
     TypeMirror typeArgument =
         ((DeclaredType) methodToOverride.getReturnType()).getTypeArguments().get(0);
@@ -265,7 +276,7 @@ private MethodSpec generateAdditionalRequestManagerMethod(ExecutableElement exte
 
   private MethodSpec generateAdditionalRequestManagerMethodLegacy(
       ExecutableElement extensionMethod) {
-     String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
+    String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
         GlideType.class).iterator().next();
     ClassName returnTypeClassName = ClassName.bestGuess(returnType);
     ParameterizedTypeName parameterizedTypeName =
@@ -275,7 +286,7 @@ private MethodSpec generateAdditionalRequestManagerMethodLegacy(
         .addModifiers(Modifier.PUBLIC)
         .returns(parameterizedTypeName)
         .addJavadoc(processorUtil.generateSeeMethodJavadoc(extensionMethod))
-        .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build())
+        .addAnnotation(nonNull())
         .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .addStatement(
             "$T requestBuilder = this.as($T.class)", parameterizedTypeName, returnTypeClassName)
@@ -287,7 +298,7 @@ private MethodSpec generateAdditionalRequestManagerMethodLegacy(
 
   private MethodSpec generateAdditionalRequestManagerMethodNew(
       ExecutableElement extensionMethod) {
-     String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
+    String returnType = processorUtil.findClassValuesFromAnnotationOnClassAsNames(extensionMethod,
         GlideType.class).iterator().next();
     ClassName returnTypeClassName = ClassName.bestGuess(returnType);
     ParameterizedTypeName parameterizedTypeName =
@@ -297,7 +308,7 @@ private MethodSpec generateAdditionalRequestManagerMethodNew(
         .addModifiers(Modifier.PUBLIC)
         .returns(parameterizedTypeName)
         .addJavadoc(processorUtil.generateSeeMethodJavadoc(extensionMethod))
-        .addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build())
+        .addAnnotation(nonNull())
         .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .addStatement(
             "return ($T) $T.$N(this.as($T.class))",
@@ -322,10 +333,8 @@ private MethodSpec generateOverrideSetRequestOptions(
 
     Elements elementUtils = processingEnv.getElementUtils();
     TypeElement requestOptionsType =
-            elementUtils.getTypeElement(
-                RequestOptionsGenerator.REQUEST_OPTIONS_QUALIFIED_NAME);
-    TypeElement androidNonNullType =
-            elementUtils.getTypeElement("android.support.annotation.NonNull");
+        elementUtils.getTypeElement(
+            RequestOptionsGenerator.REQUEST_OPTIONS_QUALIFIED_NAME);
 
     // This class may have just been generated and therefore may not be found if we try to obtain
     // it via Elements, so use just the String version instead.
@@ -340,7 +349,7 @@ private MethodSpec generateOverrideSetRequestOptions(
         .addModifiers(Modifier.PROTECTED)
         .addParameter(
             ParameterSpec.builder(ClassName.get(requestOptionsType), parameterName)
-                .addAnnotation(ClassName.get(androidNonNullType))
+                .addAnnotation(nonNull())
                 .build())
         .beginControlFlow("if ($N instanceof $L)",
             parameterName, generatedRequestOptionsQualifiedName)
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 678602230..852ebc5c0 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_EXTEND;
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
 
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
@@ -78,8 +79,6 @@
       REQUEST_OPTIONS_PACKAGE_NAME + "." + REQUEST_OPTIONS_SIMPLE_NAME;
   private static final ClassName CHECK_RESULT_CLASS_NAME =
       ClassName.get("android.support.annotation", "CheckResult");
-  private static final ClassName NON_NULL_CLASS_NAME =
-      ClassName.get("android.support.annotation", "NonNull");
 
   private final ProcessingEnvironment processingEnvironment;
   private final ClassName requestOptionsName;
@@ -301,8 +300,9 @@ public String apply(VariableElement input) {
     code.append(")");
     builder.addStatement(code.toString(), args.toArray(new Object[0]));
 
-    builder.addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build());
-    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+    builder
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
+        .addAnnotation(nonNull());
 
     List<MethodAndStaticVar> result = new ArrayList<>();
     result.add(new MethodAndStaticVar(builder.build()));
@@ -373,9 +373,9 @@ public String apply(VariableElement input) {
     code.append(")");
     builder.addStatement(code.toString(), args.toArray(new Object[0]));
 
-    builder.addStatement("return this");
-    builder.addAnnotation(AnnotationSpec.builder(NON_NULL_CLASS_NAME).build());
-    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+    builder.addStatement("return this")
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
+        .addAnnotation(nonNull());
 
     List<MethodAndStaticVar> result = new ArrayList<>();
     result.add(new MethodAndStaticVar(builder.build()));
@@ -482,7 +482,9 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
           TypeVariableName.get(typeParameterElement.getSimpleName().toString()));
     }
 
-    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+    methodSpecBuilder
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
+        .addAnnotation(nonNull());
 
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
@@ -619,10 +621,8 @@ private static boolean skipStaticMethod(ExecutableElement element) {
   }
 
   private static final class MethodAndStaticVar {
-    @Nullable
-    final MethodSpec method;
-    @Nullable
-    final FieldSpec staticField;
+    @Nullable final MethodSpec method;
+    @Nullable final FieldSpec staticField;
 
     MethodAndStaticVar(@Nullable MethodSpec method) {
       this(method, null /*staticField*/);
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
index 5d5cb67f5..ecb3b4b05 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/GeneratedAppGlideModuleImpl.java
@@ -23,12 +23,13 @@
   }
 
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     appGlideModule.applyOptions(context, builder);
   }
 
   @Override
-  public void registerComponents(Context context, Glide glide, Registry registry) {
+  public void registerComponents(@NonNull Context context, @NonNull Glide glide,
+      @NonNull Registry registry) {
     appGlideModule.registerComponents(context, glide, registry);
   }
 
@@ -46,6 +47,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   GeneratedRequestManagerFactory getRequestManagerFactory() {
     return new GeneratedRequestManagerFactory();
   }
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
index 8c36f266a..af059c6b1 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/GeneratedAppGlideModuleImpl.java
@@ -24,12 +24,13 @@
   }
 
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     appGlideModule.applyOptions(context, builder);
   }
 
   @Override
-  public void registerComponents(Context context, Glide glide, Registry registry) {
+  public void registerComponents(@NonNull Context context, @NonNull Glide glide,
+      @NonNull Registry registry) {
     appGlideModule.registerComponents(context, glide, registry);
   }
 
@@ -48,6 +49,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   GeneratedRequestManagerFactory getRequestManagerFactory() {
     return new GeneratedRequestManagerFactory();
   }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
index 33030d953..6e307e0ff 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppAndLibraryGlideModulesTest/GeneratedAppGlideModuleImpl.java
@@ -24,12 +24,13 @@
   }
 
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     appGlideModule.applyOptions(context, builder);
   }
 
   @Override
-  public void registerComponents(Context context, Glide glide, Registry registry) {
+  public void registerComponents(@NonNull Context context, @NonNull Glide glide,
+      @NonNull Registry registry) {
     new EmptyLibraryModule().registerComponents(context, glide, registry);
     appGlideModule.registerComponents(context, glide, registry);
   }
@@ -46,6 +47,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   GeneratedRequestManagerFactory getRequestManagerFactory() {
     return new GeneratedRequestManagerFactory();
   }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
index d02d0832e..f960738d9 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedAppGlideModuleImpl.java
@@ -22,12 +22,13 @@
   }
 
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     appGlideModule.applyOptions(context, builder);
   }
 
   @Override
-  public void registerComponents(Context context, Glide glide, Registry registry) {
+  public void registerComponents(@NonNull Context context, @NonNull Glide glide,
+      @NonNull Registry registry) {
     appGlideModule.registerComponents(context, glide, registry);
   }
 
@@ -43,6 +44,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
+  @NonNull
   GeneratedRequestManagerFactory getRequestManagerFactory() {
     return new GeneratedRequestManagerFactory();
   }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java
index 3b28d3065..2a442b0a5 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GeneratedRequestManagerFactory.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
@@ -12,8 +13,9 @@
  */
 final class GeneratedRequestManagerFactory implements RequestManagerRetriever.RequestManagerFactory {
   @Override
-  public RequestManager build(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
-      Context context) {
+  @NonNull
+  public RequestManager build(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
     return new GlideRequests(glide, lifecycle, treeNode, context);
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index cbf4c9247..9b92b8ab4 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -46,6 +46,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -54,6 +55,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -62,6 +64,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -70,6 +73,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -78,6 +82,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -86,6 +91,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -94,6 +100,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -102,6 +109,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -110,6 +118,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -119,6 +128,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -127,6 +137,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -135,6 +146,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -147,6 +159,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -159,6 +172,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -171,6 +185,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -183,6 +198,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -191,6 +207,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -203,6 +220,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -211,6 +229,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -219,6 +238,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -227,6 +247,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -235,6 +256,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -243,6 +265,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -251,6 +274,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -259,6 +283,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -267,6 +292,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
index 877341ff3..00c6c5d7a 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
index 6a5eb55e3..7824b67f9 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
@@ -31,8 +31,8 @@
  */
 @SuppressWarnings("deprecation")
 public class GlideRequests extends RequestManager {
-  public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
-      Context context) {
+  public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
     super(glide, lifecycle, treeNode, context);
   }
 
@@ -44,11 +44,13 @@ public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode tr
   }
 
   @Override
+  @NonNull
   public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions arg0) {
     return (GlideRequests) super.applyDefaultRequestOptions(arg0);
   }
 
   @Override
+  @NonNull
   public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
     return (GlideRequests) super.setDefaultRequestOptions(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index a516bf99b..bd161674f 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -49,6 +49,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -57,6 +58,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -65,6 +67,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -73,6 +76,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -81,6 +85,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -89,6 +94,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -97,6 +103,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -105,6 +112,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -113,6 +121,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -122,6 +131,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -130,6 +140,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -138,6 +149,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform1 == null) {
       GlideOptions.fitCenterTransform1 =
@@ -150,6 +162,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform2 == null) {
       GlideOptions.centerInsideTransform2 =
@@ -162,6 +175,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform3 == null) {
       GlideOptions.centerCropTransform3 =
@@ -174,6 +188,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform4 == null) {
       GlideOptions.circleCropTransform4 =
@@ -186,6 +201,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -194,6 +210,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation5 == null) {
       GlideOptions.noTransformation5 =
@@ -206,6 +223,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -214,6 +232,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -222,6 +241,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -230,6 +250,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -238,6 +259,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -246,6 +268,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -254,6 +277,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -262,6 +286,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -270,6 +295,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation6 == null) {
       GlideOptions.noAnimation6 =
@@ -596,8 +622,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#test(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions test() {
     return (GlideOptions) Extension.test(this);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index 029481604..ca9ea8813 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#test()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> test() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).test();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index c18eb00da..5043b0d98 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -589,8 +615,8 @@ public final GlideOptions autoClone() {
    * @see RequestOptions#centerCrop()
    */
   @Override
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions centerCrop() {
     return (GlideOptions) Extension.centerCrop(super.centerCrop());
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index 546fb8ef9..6179c1263 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -638,8 +638,8 @@
   /**
    * @see GlideOptions#centerCrop()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index 34d14a62b..be6e957ad 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -119,6 +128,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -127,6 +137,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -139,6 +150,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -151,6 +163,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -163,6 +176,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -175,6 +189,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -183,6 +198,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -195,6 +211,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -203,6 +220,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -211,6 +229,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -219,6 +238,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -227,6 +247,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -235,6 +256,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -243,6 +265,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -251,6 +274,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -259,6 +283,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -580,8 +605,8 @@ public final GlideOptions autoClone() {
    * @see RequestOptions#override(int, int)
    */
   @Override
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions override(int width, int height) {
     return (GlideOptions) Extension.override(super.override(width, height), width, height);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
index ec25968af..ff1366641 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -638,8 +638,8 @@
   /**
    * @see GlideOptions#override(int, int)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 8c4ead00e..8d0696027 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -587,8 +613,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#centerCrop(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions centerCrop() {
     return (GlideOptions) Extension.centerCrop(this);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index 546fb8ef9..6179c1263 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -638,8 +638,8 @@
   /**
    * @see GlideOptions#centerCrop()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index a15e5a13e..74b45424d 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -594,8 +620,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#test(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions test() {
     return (GlideOptions) Extension.test(this);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index 029481604..ca9ea8813 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#test()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> test() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).test();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 5fb88e94f..14f17549b 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -594,8 +620,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#test(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions test() {
     return (GlideOptions) Extension.test(this);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index 029481604..ca9ea8813 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#test()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> test() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).test();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index a801496a4..377c83922 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -594,8 +620,8 @@ public final GlideOptions autoClone() {
   /**
    * @see ExtensionWithOption#squareThumb(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions squareThumb() {
     return (GlideOptions) ExtensionWithOption.squareThumb(this);
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
index 449e8f958..fb9e7f7c3 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#squareThumb()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> squareThumb() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).squareThumb();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index 0e6db8dba..0b3fbfea0 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
index d29ff687c..87d740099 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
@@ -32,8 +32,8 @@
  */
 @SuppressWarnings("deprecation")
 public class GlideRequests extends RequestManager {
-  public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
-      Context context) {
+  public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
     super(glide, lifecycle, treeNode, context);
   }
 
@@ -54,11 +54,13 @@ public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode tr
   }
 
   @Override
+  @NonNull
   public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions arg0) {
     return (GlideRequests) super.applyDefaultRequestOptions(arg0);
   }
 
   @Override
+  @NonNull
   public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
     return (GlideRequests) super.setDefaultRequestOptions(arg0);
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index e217989a0..6c0100161 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -49,6 +49,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -57,6 +58,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -65,6 +67,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -73,6 +76,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -81,6 +85,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -89,6 +94,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -97,6 +103,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -105,6 +112,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -113,6 +121,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -122,6 +131,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -130,6 +140,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -138,6 +149,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform1 == null) {
       GlideOptions.fitCenterTransform1 =
@@ -150,6 +162,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform2 == null) {
       GlideOptions.centerInsideTransform2 =
@@ -162,6 +175,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform3 == null) {
       GlideOptions.centerCropTransform3 =
@@ -174,6 +188,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform4 == null) {
       GlideOptions.circleCropTransform4 =
@@ -186,6 +201,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -194,6 +210,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation5 == null) {
       GlideOptions.noTransformation5 =
@@ -206,6 +223,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -214,6 +232,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -222,6 +241,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -230,6 +250,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -238,6 +259,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -246,6 +268,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -254,6 +277,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -262,6 +286,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -270,6 +295,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation6 == null) {
       GlideOptions.noAnimation6 =
@@ -596,8 +622,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#test(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions test() {
     if (isAutoCloneEnabled()) {
       return clone().test();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index 029481604..ca9ea8813 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#test()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> test() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).test();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index 7e59eb54f..ebeb08175 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -589,8 +615,8 @@ public final GlideOptions autoClone() {
    * @see RequestOptions#centerCrop()
    */
   @Override
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions centerCrop() {
     if (isAutoCloneEnabled()) {
       return clone().centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index 546fb8ef9..6179c1263 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -638,8 +638,8 @@
   /**
    * @see GlideOptions#centerCrop()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 83af4bee9..8604712ba 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -587,8 +613,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#centerCrop(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions centerCrop() {
     if (isAutoCloneEnabled()) {
       return clone().centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index 546fb8ef9..6179c1263 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -638,8 +638,8 @@
   /**
    * @see GlideOptions#centerCrop()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index b63941369..58fb322a4 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -594,8 +620,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#test(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions test() {
     if (isAutoCloneEnabled()) {
       return clone().test();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index 029481604..ca9ea8813 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#test()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> test() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).test();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 79b4838ec..970b5fb0a 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -594,8 +620,8 @@ public final GlideOptions autoClone() {
   /**
    * @see Extension#test(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions test() {
     if (isAutoCloneEnabled()) {
       return clone().test();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index 029481604..ca9ea8813 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#test()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> test() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).test();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
index 7caa63811..a7f63dd7c 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
@@ -594,8 +620,8 @@ public final GlideOptions autoClone() {
   /**
    * @see ExtensionWithOption#squareThumb(RequestOptions)
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideOptions squareThumb() {
     if (isAutoCloneEnabled()) {
       return clone().squareThumb();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
index 449e8f958..fb9e7f7c3 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
@@ -53,12 +53,12 @@
     "deprecation"
 })
 public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
+  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
     super(transcodeClass, other);
   }
 
-  GlideRequest(Glide glide, RequestManager requestManager, Class<TranscodeType> transcodeClass,
-      Context context) {
+  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
+      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
     super(glide, requestManager ,transcodeClass, context);
   }
 
@@ -652,8 +652,8 @@
   /**
    * @see GlideOptions#squareThumb()
    */
-  @NonNull
   @CheckResult
+  @NonNull
   public GlideRequest<TranscodeType> squareThumb() {
     if (getMutableOptions() instanceof GlideOptions) {
       this.requestOptions = ((GlideOptions) getMutableOptions()).squareThumb();
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
index 0e6db8dba..0b3fbfea0 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
@@ -47,6 +47,7 @@
    * @see RequestOptions#sizeMultiplierOf(float)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return new GlideOptions().sizeMultiplier(arg0);
   }
@@ -55,6 +56,7 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
     return new GlideOptions().diskCacheStrategy(arg0);
   }
@@ -63,6 +65,7 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    * @see RequestOptions#priorityOf(Priority)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions priorityOf(@NonNull Priority arg0) {
     return new GlideOptions().priority(arg0);
   }
@@ -71,6 +74,7 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    * @see RequestOptions#placeholderOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -79,6 +83,7 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    * @see RequestOptions#placeholderOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions placeholderOf(@DrawableRes int arg0) {
     return new GlideOptions().placeholder(arg0);
   }
@@ -87,6 +92,7 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    * @see RequestOptions#errorOf(Drawable)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@Nullable Drawable arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -95,6 +101,7 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    * @see RequestOptions#errorOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions errorOf(@DrawableRes int arg0) {
     return new GlideOptions().error(arg0);
   }
@@ -103,6 +110,7 @@ public static GlideOptions errorOf(@DrawableRes int arg0) {
    * @see RequestOptions#skipMemoryCacheOf(boolean)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     return new GlideOptions().skipMemoryCache(skipMemoryCache);
   }
@@ -111,6 +119,7 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * @see RequestOptions#overrideOf(int, int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
       @IntRange(from = 0) int arg1) {
     return new GlideOptions().override(arg0, arg1);
@@ -120,6 +129,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    * @see RequestOptions#overrideOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().override(arg0);
   }
@@ -128,6 +138,7 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#signatureOf(Key)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions signatureOf(@NonNull Key arg0) {
     return new GlideOptions().signature(arg0);
   }
@@ -136,6 +147,7 @@ public static GlideOptions signatureOf(@NonNull Key arg0) {
    * @see RequestOptions#fitCenterTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions fitCenterTransform() {
     if (GlideOptions.fitCenterTransform0 == null) {
       GlideOptions.fitCenterTransform0 =
@@ -148,6 +160,7 @@ public static GlideOptions fitCenterTransform() {
    * @see RequestOptions#centerInsideTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerInsideTransform() {
     if (GlideOptions.centerInsideTransform1 == null) {
       GlideOptions.centerInsideTransform1 =
@@ -160,6 +173,7 @@ public static GlideOptions centerInsideTransform() {
    * @see RequestOptions#centerCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions centerCropTransform() {
     if (GlideOptions.centerCropTransform2 == null) {
       GlideOptions.centerCropTransform2 =
@@ -172,6 +186,7 @@ public static GlideOptions centerCropTransform() {
    * @see RequestOptions#circleCropTransform()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions circleCropTransform() {
     if (GlideOptions.circleCropTransform3 == null) {
       GlideOptions.circleCropTransform3 =
@@ -184,6 +199,7 @@ public static GlideOptions circleCropTransform() {
    * @see RequestOptions#bitmapTransform(Transformation)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
     return new GlideOptions().transform(arg0);
   }
@@ -192,6 +208,7 @@ public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0)
    * @see RequestOptions#noTransformation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noTransformation() {
     if (GlideOptions.noTransformation4 == null) {
       GlideOptions.noTransformation4 =
@@ -204,6 +221,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#option(Option, T)
    */
   @CheckResult
+  @NonNull
   public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
     return new GlideOptions().set(arg0, arg1);
   }
@@ -212,6 +230,7 @@ public static GlideOptions noTransformation() {
    * @see RequestOptions#decodeTypeOf(Class)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
     return new GlideOptions().decode(arg0);
   }
@@ -220,6 +239,7 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    * @see RequestOptions#formatOf(DecodeFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
     return new GlideOptions().format(arg0);
   }
@@ -228,6 +248,7 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    * @see RequestOptions#frameOf(long)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
     return new GlideOptions().frame(arg0);
   }
@@ -236,6 +257,7 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    * @see RequestOptions#downsampleOf(DownsampleStrategy)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
     return new GlideOptions().downsample(arg0);
   }
@@ -244,6 +266,7 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    * @see RequestOptions#timeoutOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
     return new GlideOptions().timeout(arg0);
   }
@@ -252,6 +275,7 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    * @see RequestOptions#encodeQualityOf(int)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
     return new GlideOptions().encodeQuality(arg0);
   }
@@ -260,6 +284,7 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    * @see RequestOptions#encodeFormatOf(CompressFormat)
    */
   @CheckResult
+  @NonNull
   public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
     return new GlideOptions().encodeFormat(arg0);
   }
@@ -268,6 +293,7 @@ public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
    * @see RequestOptions#noAnimation()
    */
   @CheckResult
+  @NonNull
   public static GlideOptions noAnimation() {
     if (GlideOptions.noAnimation5 == null) {
       GlideOptions.noAnimation5 =
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
index 6d535ad15..be9b074e6 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
@@ -32,8 +32,8 @@
  */
 @SuppressWarnings("deprecation")
 public class GlideRequests extends RequestManager {
-  public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode treeNode,
-      Context context) {
+  public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
+      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
     super(glide, lifecycle, treeNode, context);
   }
 
@@ -56,11 +56,13 @@ public GlideRequests(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode tr
   }
 
   @Override
+  @NonNull
   public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions arg0) {
     return (GlideRequests) super.applyDefaultRequestOptions(arg0);
   }
 
   @Override
+  @NonNull
   public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
     return (GlideRequests) super.setDefaultRequestOptions(arg0);
   }
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
index 539a956bd..2019c1758 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.widget.ImageView;
@@ -36,12 +37,12 @@ public void setUp() {
     Glide glide = Glide.get(context);
     requestManager = new RequestManager(glide, new Lifecycle() {
       @Override
-      public void addListener(LifecycleListener listener) {
+      public void addListener(@NonNull LifecycleListener listener) {
         listener.onStart();
       }
 
       @Override
-      public void removeListener(LifecycleListener listener) {
+      public void removeListener(@NonNull LifecycleListener listener) {
         // Do nothing.
       }
     }, treeNode, context);
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
index 36a47491f..1bc1047a9 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
@@ -21,7 +22,7 @@
 @Deprecated
 public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     // Do nothing.
   }
 
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
index 60517251f..e58b041dd 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp3;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
@@ -22,7 +23,7 @@
 @Deprecated
 public class OkHttpGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     // Do nothing.
   }
 
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
index 52899e89a..5756c6172 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.volley;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
@@ -22,7 +23,7 @@
 @SuppressWarnings("deprecation")
 public class VolleyGlideModule implements com.bumptech.glide.module.GlideModule {
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     // Do nothing.
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index f2093dc5d..f05ad0d83 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -629,7 +629,7 @@ boolean untrack(@NonNull Target<?> target) {
     }
   }
 
-  void track(Target<?> target, Request request) {
+  void track(@NonNull Target<?> target, @NonNull Request request) {
     targetTracker.track(target);
     requestTracker.runRequest(request);
   }
diff --git a/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java
index fd88428e8..8bb528050 100644
--- a/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java
+++ b/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.util.Util;
 import java.util.Collections;
 import java.util.Set;
@@ -27,7 +28,7 @@
    * avoid adding listeners multiple times. </p>
    */
   @Override
-  public void addListener(LifecycleListener listener) {
+  public void addListener(@NonNull LifecycleListener listener) {
     lifecycleListeners.add(listener);
 
     if (isDestroyed) {
@@ -40,7 +41,7 @@ public void addListener(LifecycleListener listener) {
   }
 
   @Override
-  public void removeListener(LifecycleListener listener) {
+  public void removeListener(@NonNull LifecycleListener listener) {
     lifecycleListeners.remove(listener);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/manager/ApplicationLifecycle.java b/library/src/main/java/com/bumptech/glide/manager/ApplicationLifecycle.java
index 5911d5234..7bf69da7e 100644
--- a/library/src/main/java/com/bumptech/glide/manager/ApplicationLifecycle.java
+++ b/library/src/main/java/com/bumptech/glide/manager/ApplicationLifecycle.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
+
 /**
  * A {@link com.bumptech.glide.manager.Lifecycle} implementation for tracking and notifying
  * listeners of {@link android.app.Application} lifecycle events.
@@ -9,12 +11,12 @@
  */
 class ApplicationLifecycle implements Lifecycle {
   @Override
-  public void addListener(LifecycleListener listener) {
+  public void addListener(@NonNull LifecycleListener listener) {
     listener.onStart();
   }
 
   @Override
-  public void removeListener(LifecycleListener listener) {
+  public void removeListener(@NonNull LifecycleListener listener) {
     // Do nothing.
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
index d49c8503e..bea4b3673 100644
--- a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
@@ -7,6 +7,7 @@
 import android.content.IntentFilter;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Synthetic;
@@ -24,7 +25,7 @@
 
   private final BroadcastReceiver connectivityReceiver = new BroadcastReceiver() {
     @Override
-    public void onReceive(Context context, Intent intent) {
+    public void onReceive(@NonNull Context context, Intent intent) {
       boolean wasConnected = isConnected;
       isConnected = isConnected(context);
       if (wasConnected != isConnected) {
@@ -37,7 +38,7 @@ public void onReceive(Context context, Intent intent) {
     }
   };
 
-  DefaultConnectivityMonitor(Context context, ConnectivityListener listener) {
+  DefaultConnectivityMonitor(@NonNull Context context, @NonNull ConnectivityListener listener) {
     this.context = context.getApplicationContext();
     this.listener = listener;
   }
@@ -75,7 +76,7 @@ private void unregister() {
   @Synthetic
   // Permissions are checked in the factory instead.
   @SuppressLint("MissingPermission")
-  boolean isConnected(Context context) {
+  boolean isConnected(@NonNull Context context) {
     ConnectivityManager connectivityManager =
         Preconditions.checkNotNull(
             (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE));
diff --git a/library/src/main/java/com/bumptech/glide/manager/EmptyRequestManagerTreeNode.java b/library/src/main/java/com/bumptech/glide/manager/EmptyRequestManagerTreeNode.java
index 5d811cc49..7297680cd 100644
--- a/library/src/main/java/com/bumptech/glide/manager/EmptyRequestManagerTreeNode.java
+++ b/library/src/main/java/com/bumptech/glide/manager/EmptyRequestManagerTreeNode.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.RequestManager;
 import java.util.Collections;
 import java.util.Set;
@@ -8,6 +9,7 @@
  * A {@link RequestManagerTreeNode} that returns no relatives.
  */
 final class EmptyRequestManagerTreeNode implements RequestManagerTreeNode {
+    @NonNull
     @Override
     public Set<RequestManager> getDescendants() {
         return Collections.emptySet();
diff --git a/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
index 53044cee1..434b5dcab 100644
--- a/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
+++ b/library/src/main/java/com/bumptech/glide/manager/Lifecycle.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
+
 /**
  * An interface for listening to Activity/Fragment lifecycle events.
  */
@@ -7,7 +9,7 @@
   /**
    * Adds the given listener to the set of listeners managed by this Lifecycle implementation.
    */
-  void addListener(LifecycleListener listener);
+  void addListener(@NonNull LifecycleListener listener);
 
   /**
    * Removes the given listener from the set of listeners managed by this Lifecycle implementation,
@@ -16,5 +18,5 @@
    * <p>This is an optimization only, there is no guarantee that every added listener will
    * eventually be removed.
    */
-  void removeListener(LifecycleListener listener);
+  void removeListener(@NonNull LifecycleListener listener);
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index 23fc35355..272064fa4 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -5,7 +5,9 @@
 import android.app.Activity;
 import android.app.Fragment;
 import android.os.Build;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import android.util.Log;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
@@ -38,9 +40,9 @@ public RequestManagerFragment() {
     this(new ActivityFragmentLifecycle());
   }
 
-  // For testing only.
+  @VisibleForTesting
   @SuppressLint("ValidFragment")
-  RequestManagerFragment(ActivityFragmentLifecycle lifecycle) {
+  RequestManagerFragment(@NonNull ActivityFragmentLifecycle lifecycle) {
     this.lifecycle = lifecycle;
   }
 
@@ -53,6 +55,7 @@ public void setRequestManager(@Nullable RequestManager requestManager) {
     this.requestManager = requestManager;
   }
 
+  @NonNull
   ActivityFragmentLifecycle getGlideLifecycle() {
     return lifecycle;
   }
@@ -68,6 +71,7 @@ public RequestManager getRequestManager() {
   /**
    * Returns the {@link RequestManagerTreeNode} for this fragment.
    */
+  @NonNull
   public RequestManagerTreeNode getRequestManagerTreeNode() {
     return requestManagerTreeNode;
   }
@@ -85,8 +89,10 @@ private void removeChildRequestManagerFragment(RequestManagerFragment child) {
    * our parent is the fragment that we are annotating).
    */
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-  @Synthetic Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
-    if (this.equals(rootRequestManagerFragment)) {
+  @Synthetic
+  @NonNull
+  Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
+    if (equals(rootRequestManagerFragment)) {
       return Collections.unmodifiableSet(childRequestManagerFragments);
     } else if (rootRequestManagerFragment == null
         || Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
@@ -116,6 +122,7 @@ void setParentFragmentHint(@Nullable Fragment parentFragmentHint) {
     }
   }
 
+  @Nullable
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
   private Fragment getParentFragmentUsingHint() {
     final Fragment fragment;
@@ -131,8 +138,8 @@ private Fragment getParentFragmentUsingHint() {
    * Returns true if the fragment is a descendant of our parent.
    */
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-  private boolean isDescendant(Fragment fragment) {
-    Fragment root = this.getParentFragment();
+  private boolean isDescendant(@NonNull Fragment fragment) {
+    Fragment root = getParentFragment();
     Fragment parentFragment;
     while ((parentFragment = fragment.getParentFragment()) != null) {
       if (parentFragment.equals(root)) {
@@ -143,11 +150,11 @@ private boolean isDescendant(Fragment fragment) {
     return false;
   }
 
-  private void registerFragmentWithRoot(Activity activity) {
+  private void registerFragmentWithRoot(@NonNull Activity activity) {
     unregisterFragmentWithRoot();
     rootRequestManagerFragment = Glide.get(activity).getRequestManagerRetriever()
         .getRequestManagerFragment(activity.getFragmentManager(), null);
-    if (!this.equals(rootRequestManagerFragment)) {
+    if (!equals(rootRequestManagerFragment)) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
   }
@@ -208,6 +215,7 @@ public String toString() {
     @Synthetic
     FragmentRequestManagerTreeNode() { }
 
+    @NonNull
     @Override
     public Set<RequestManager> getDescendants() {
       Set<RequestManagerFragment> descendantFragments = getDescendantRequestManagerFragments();
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index dff9ab3cc..7d25d760b 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -80,6 +80,7 @@ public RequestManagerRetriever(@Nullable RequestManagerFactory factory) {
     handler = new Handler(Looper.getMainLooper(), this /* Callback */);
   }
 
+  @NonNull
   private RequestManager getApplicationManager(@NonNull Context context) {
     // Either an application context or we're on a background thread.
     if (applicationManager == null) {
@@ -361,6 +362,7 @@ private RequestManager fragmentGet(@NonNull Context context,
     return requestManager;
   }
 
+  @NonNull
   SupportRequestManagerFragment getSupportRequestManagerFragment(
       @NonNull final FragmentManager fm, @Nullable Fragment parentHint) {
     SupportRequestManagerFragment current =
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerTreeNode.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerTreeNode.java
index 38d341b3a..20666d093 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerTreeNode.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerTreeNode.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.RequestManager;
 import java.util.Set;
 
@@ -13,5 +14,6 @@
    * Returns all descendant {@link RequestManager}s relative to the context of the current
    * {@link RequestManager}.
    */
+  @NonNull
   Set<RequestManager> getDescendants();
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
index 6f3c67c2d..45fa25c17 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
 import com.bumptech.glide.request.Request;
@@ -35,7 +36,7 @@
   /**
    * Starts tracking the given request.
    */
-  public void runRequest(Request request) {
+  public void runRequest(@NonNull Request request) {
     requests.add(request);
     if (!isPaused) {
       request.begin();
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index a44bb02e2..b6b2f28dc 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -2,7 +2,9 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.util.Log;
@@ -37,9 +39,9 @@ public SupportRequestManagerFragment() {
     this(new ActivityFragmentLifecycle());
   }
 
-  // For testing only.
+  @VisibleForTesting
   @SuppressLint("ValidFragment")
-  public SupportRequestManagerFragment(ActivityFragmentLifecycle lifecycle) {
+  public SupportRequestManagerFragment(@NonNull ActivityFragmentLifecycle lifecycle) {
     this.lifecycle = lifecycle;
   }
 
@@ -52,6 +54,7 @@ public void setRequestManager(@Nullable RequestManager requestManager) {
     this.requestManager = requestManager;
   }
 
+  @NonNull
   ActivityFragmentLifecycle getGlideLifecycle() {
     return lifecycle;
   }
@@ -69,6 +72,7 @@ public RequestManager getRequestManager() {
    * to the
    * associated {@link RequestManager}.
    */
+  @NonNull
   public RequestManagerTreeNode getRequestManagerTreeNode() {
     return requestManagerTreeNode;
   }
@@ -85,10 +89,12 @@ private void removeChildRequestManagerFragment(SupportRequestManagerFragment chi
    * Returns the set of fragments that this RequestManagerFragment's parent is a parent to. (i.e.
    * our parent is the fragment that we are annotating).
    */
-  @Synthetic Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments() {
+  @Synthetic
+  @NonNull
+  Set<SupportRequestManagerFragment> getDescendantRequestManagerFragments() {
     if (rootRequestManagerFragment == null) {
       return Collections.emptySet();
-    } else if (this.equals(rootRequestManagerFragment)) {
+    } else if (equals(rootRequestManagerFragment)) {
       return Collections.unmodifiableSet(childRequestManagerFragments);
     } else {
       Set<SupportRequestManagerFragment> descendants = new HashSet<>();
@@ -113,6 +119,7 @@ void setParentFragmentHint(@Nullable Fragment parentFragmentHint) {
     }
   }
 
+  @Nullable
   private Fragment getParentFragmentUsingHint() {
     Fragment fragment = getParentFragment();
     return fragment != null ? fragment : parentFragmentHint;
@@ -121,8 +128,8 @@ private Fragment getParentFragmentUsingHint() {
   /**
    * Returns true if the fragment is a descendant of our parent.
    */
-  private boolean isDescendant(Fragment fragment) {
-    Fragment root = this.getParentFragmentUsingHint();
+  private boolean isDescendant(@NonNull Fragment fragment) {
+    Fragment root = getParentFragmentUsingHint();
     Fragment parentFragment;
     while ((parentFragment = fragment.getParentFragment()) != null) {
       if (parentFragment.equals(root)) {
@@ -133,11 +140,11 @@ private boolean isDescendant(Fragment fragment) {
     return false;
   }
 
-  private void registerFragmentWithRoot(FragmentActivity activity) {
+  private void registerFragmentWithRoot(@NonNull FragmentActivity activity) {
     unregisterFragmentWithRoot();
     rootRequestManagerFragment = Glide.get(activity).getRequestManagerRetriever()
         .getSupportRequestManagerFragment(activity.getSupportFragmentManager(), null);
-    if (!this.equals(rootRequestManagerFragment)) {
+    if (!equals(rootRequestManagerFragment)) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
   }
@@ -198,6 +205,7 @@ public String toString() {
     @Synthetic
     SupportFragmentRequestManagerTreeNode() { }
 
+    @NonNull
     @Override
     public Set<RequestManager> getDescendants() {
       Set<SupportRequestManagerFragment> descendantFragments =
diff --git a/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java b/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java
index b98f710f1..45ad1252a 100644
--- a/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/TargetTracker.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.util.Util;
 import java.util.Collections;
@@ -15,11 +16,11 @@
   private final Set<Target<?>> targets =
       Collections.newSetFromMap(new WeakHashMap<Target<?>, Boolean>());
 
-  public void track(Target<?> target) {
+  public void track(@NonNull Target<?> target) {
     targets.add(target);
   }
 
-  public void untrack(Target<?> target) {
+  public void untrack(@NonNull Target<?> target) {
     targets.remove(target);
   }
 
@@ -44,6 +45,7 @@ public void onDestroy() {
     }
   }
 
+  @NonNull
   public List<Target<?>> getAll() {
     return Util.getSnapshot(targets);
   }
diff --git a/library/src/main/java/com/bumptech/glide/module/AppGlideModule.java b/library/src/main/java/com/bumptech/glide/module/AppGlideModule.java
index 5b590ac36..77f124670 100644
--- a/library/src/main/java/com/bumptech/glide/module/AppGlideModule.java
+++ b/library/src/main/java/com/bumptech/glide/module/AppGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.module;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.GlideBuilder;
 
 /**
@@ -36,7 +37,7 @@ public boolean isManifestParsingEnabled() {
   }
 
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     // Default empty impl.
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java b/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java
index 923d364f7..c92e0da64 100644
--- a/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java
+++ b/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java
@@ -1,11 +1,13 @@
 package com.bumptech.glide.module;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.GlideBuilder;
 
 /**
  * An internal interface, to be removed when {@link GlideModule}s are removed.
  */
+@Deprecated
 interface AppliesOptions {
   /**
    * Lazily apply options to a {@link com.bumptech.glide.GlideBuilder} immediately before the Glide
@@ -16,5 +18,5 @@
    * @param context An Application {@link android.content.Context}.
    * @param builder The {@link com.bumptech.glide.GlideBuilder} that will be used to create Glide.
    */
-  void applyOptions(Context context, GlideBuilder builder);
+  void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder);
 }
diff --git a/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java b/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java
index 647945aec..612dc8c13 100644
--- a/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java
+++ b/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java
@@ -16,6 +16,7 @@
  * {@link com.bumptech.glide.annotation.Excludes} annotation to selectively remove one or more of
  * the conflicting modules.
  */
+@SuppressWarnings("deprecation")
 public abstract class LibraryGlideModule implements RegistersComponents {
   @Override
   public void registerComponents(@NonNull Context context, @NonNull Glide glide,
diff --git a/library/src/main/java/com/bumptech/glide/module/ManifestParser.java b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java
index 92431dd20..6304f179a 100644
--- a/library/src/main/java/com/bumptech/glide/module/ManifestParser.java
+++ b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java
@@ -13,6 +13,7 @@
  */
 // Used only in javadoc.
 @SuppressWarnings("deprecation")
+@Deprecated
 public final class ManifestParser {
   private static final String TAG = "ManifestParser";
   private static final String GLIDE_MODULE_VALUE = "GlideModule";
diff --git a/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
index 46c9c1ce7..9461ee341 100644
--- a/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
+++ b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
@@ -10,6 +10,7 @@
  */
 // Used only in javadocs.
 @SuppressWarnings("deprecation")
+@Deprecated
 interface RegistersComponents {
 
   /**
diff --git a/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java b/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
index f03379181..a7a73ccae 100644
--- a/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/RequestManagerTest.java
@@ -194,6 +194,7 @@ public void testDelegatesIsPausedToRequestTracker() {
   public void clear_withRequestStartedInSiblingManager_doesNotThrow() {
     final RequestManager child1 = new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return Collections.emptySet();
@@ -201,6 +202,7 @@ public void clear_withRequestStartedInSiblingManager_doesNotThrow() {
         }, context);
     final RequestManager child2 = new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return Collections.emptySet();
@@ -208,6 +210,7 @@ public void clear_withRequestStartedInSiblingManager_doesNotThrow() {
         }, context);
     new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return new HashSet<>(java.util.Arrays.asList(child1, child2));
@@ -223,6 +226,7 @@ public void clear_withRequestStartedInSiblingManager_doesNotThrow() {
   public void clear_withRequestStartedInChildManager_doesNotThrow() {
     final RequestManager child = new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return Collections.emptySet();
@@ -230,6 +234,7 @@ public void clear_withRequestStartedInChildManager_doesNotThrow() {
         }, context);
     RequestManager parent = new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return Collections.singleton(child);
@@ -245,6 +250,7 @@ public void clear_withRequestStartedInChildManager_doesNotThrow() {
   public void clear_withRequestStartedInParentManager_doesNotThrow() {
     final RequestManager child = new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return Collections.emptySet();
@@ -252,6 +258,7 @@ public void clear_withRequestStartedInParentManager_doesNotThrow() {
         }, context);
     RequestManager parent = new RequestManager(Glide.get(context), lifecycle,
         new RequestManagerTreeNode() {
+          @NonNull
           @Override
           public Set<RequestManager> getDescendants() {
             return Collections.singleton(child);
diff --git a/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java b/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
index dca2113e9..698425e22 100644
--- a/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
@@ -9,6 +9,7 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
@@ -114,7 +115,7 @@ private void addToManifest(String key) {
 
   public static class TestModule1 implements GlideModule {
     @Override
-    public void applyOptions(Context context, GlideBuilder builder) {
+    public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     }
 
     @Override
@@ -135,7 +136,7 @@ public int hashCode() {
   public static class TestModule2 implements GlideModule {
 
     @Override
-    public void applyOptions(Context context, GlideBuilder builder) {
+    public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     }
 
     @Override
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
index 83f7cc59d..c0a1bce18 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
@@ -19,7 +19,7 @@
 public class FlickrGlideModule extends AppGlideModule {
 
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
     super.applyOptions(context, builder);
     builder.setDefaultRequestOptions(new RequestOptions().format(DecodeFormat.PREFER_ARGB_8888));
   }
