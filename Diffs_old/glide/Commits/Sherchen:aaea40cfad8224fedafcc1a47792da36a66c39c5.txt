diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 000000000..24c2ac36a
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,36 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0" is_locked="false">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="JavaDoc" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="TOP_LEVEL_CLASS_OPTIONS">
+        <value>
+          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
+          <option name="REQUIRED_TAGS" value="" />
+        </value>
+      </option>
+      <option name="INNER_CLASS_OPTIONS">
+        <value>
+          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
+          <option name="REQUIRED_TAGS" value="" />
+        </value>
+      </option>
+      <option name="METHOD_OPTIONS">
+        <value>
+          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
+          <option name="REQUIRED_TAGS" value="@return@param@throws or @exception" />
+        </value>
+      </option>
+      <option name="FIELD_OPTIONS">
+        <value>
+          <option name="ACCESS_JAVADOC_REQUIRED_FOR" value="none" />
+          <option name="REQUIRED_TAGS" value="" />
+        </value>
+      </option>
+      <option name="IGNORE_DEPRECATED" value="false" />
+      <option name="IGNORE_JAVADOC_PERIOD" value="true" />
+      <option name="IGNORE_DUPLICATED_THROWS" value="false" />
+      <option name="IGNORE_POINT_TO_ITSELF" value="false" />
+      <option name="myAdditionalJavadocTags" value="date" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 7acd5525c..e5bd63c70 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -165,6 +165,7 @@ public static Glide get(Context context) {
     return glide;
   }
 
+  //wsq glide初始化
   private static void checkAndInitializeGlide(Context context) {
     // In the thread running initGlide(), one or more classes may call Glide.get(context).
     // Without this check, those calls could trigger infinite recursion.
@@ -255,6 +256,7 @@ private static void initializeGlide(Context context, GlideBuilder builder) {
     if (annotationGeneratedModule != null) {
       annotationGeneratedModule.applyOptions(applicationContext, builder);
     }
+    //wsq 创建glide实例，并且初始化
     Glide glide = builder.build(applicationContext);
     for (com.bumptech.glide.module.GlideModule module : manifestModules) {
       module.registerComponents(applicationContext, glide, glide.registry);
@@ -295,6 +297,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     return result;
   }
 
+  //wsq 这一步非常重要，初始化工作都是在这里做的
   @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
   Glide(
       Context context,
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 05ebfdfcf..0daf17fc2 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -36,6 +36,7 @@
   private BitmapPool bitmapPool;
   private ArrayPool arrayPool;
   private MemoryCache memoryCache;
+  //wsq 初始化这几个线程池，以供后面调用
   private GlideExecutor sourceExecutor;
   private GlideExecutor diskCacheExecutor;
   private DiskCache.Factory diskCacheFactory;
@@ -290,6 +291,7 @@ GlideBuilder setEngine(Engine engine) {
     return this;
   }
 
+  //wsq 这一步是最重要的，很多东西都是在这里初始化
   public Glide build(Context context) {
     if (sourceExecutor == null) {
       sourceExecutor = GlideExecutor.newSourceExecutor();
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 7af04eeca..aebc9e96f 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -574,6 +574,7 @@ protected RequestOptions getMutableOptions() {
 
     requestManager.clear(target);
     target.setRequest(request);
+    //wsq RequestManager开始启动request
     requestManager.track(target, request);
 
     return target;
@@ -820,6 +821,7 @@ private Request buildRequestRecursive(
     }
 
     Request mainRequest =
+            //wsq 创建thumbnail的request
         buildThumbnailRequestRecursive(
             target,
             targetListener,
@@ -831,6 +833,7 @@ private Request buildRequestRecursive(
             requestOptions);
 
     if (errorRequestCoordinator == null) {
+      //wsq 如果没有设置error,那么直接返回
       return mainRequest;
     }
 
@@ -842,6 +845,7 @@ private Request buildRequestRecursive(
       errorOverrideHeight = requestOptions.getOverrideHeight();
     }
 
+    //wsq 创建error的request
     Request errorRequest = errorBuilder.buildRequestRecursive(
         target,
         targetListener,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
index 2eb478ee3..648f5e739 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
@@ -41,6 +41,7 @@
     this.cb = cb;
   }
 
+  //
   @Override
   public boolean startNext() {
     while (modelLoaders == null || !hasNextModelLoader()) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index d07982859..736b6f202 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.engine;
 
 import android.os.Build;
+import android.os.Trace;
 import android.support.annotation.NonNull;
 import android.support.v4.os.TraceCompat;
 import android.support.v4.util.Pools;
@@ -217,6 +218,7 @@ public void cancel() {
     }
   }
 
+  //wsq GlideExecutor真正启动的方法在这里
   @Override
   public void run() {
     // This should be much more fine grained, but since Java's thread pool implementation silently
@@ -225,6 +227,8 @@ public void run() {
     TraceCompat.beginSection("DecodeJob#run");
     // Methods in the try statement can invalidate currentFetcher, so set a local variable here to
     // ensure that the fetcher is cleaned up either way.
+
+    //wsq 使用DataFetcher来获取数据
     DataFetcher<?> localFetcher = currentFetcher;
     try {
       if (isCancelled) {
@@ -305,6 +309,7 @@ private void runGenerators() {
       currentGenerator = getNextGenerator();
 
       if (stage == Stage.SOURCE) {
+        //wsq重新开始任务
         reschedule();
         return;
       }
@@ -338,6 +343,7 @@ private void setNotifiedOrThrow() {
     isCallbackNotified = true;
   }
 
+  //wsq stage变化 initialize -> RESOURCE_CACHE -> DATA_CACHE -> (ENCODE) ->SOURCE | FINISHED;
   private Stage getNextStage(Stage current) {
     switch (current) {
       case INITIALIZE:
@@ -363,6 +369,7 @@ public void reschedule() {
     callback.reschedule(this);
   }
 
+  //获取资源之后回调
   @Override
   public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetcher,
       DataSource dataSource, Key attemptedKey) {
@@ -392,6 +399,7 @@ public void onDataFetcherFailed(Key attemptedKey, Exception e, DataFetcher<?> fe
     exception.setLoggingDetails(attemptedKey, dataSource, fetcher.getDataClass());
     throwables.add(exception);
     if (Thread.currentThread() != currentThread) {
+      //wsq 判断当前线程是否被回收
       runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;
       callback.reschedule(this);
     } else {
@@ -454,6 +462,7 @@ private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource)
         return null;
       }
       long startTime = LogTime.getLogTime();
+      //wsq 获取数据
       Resource<R> result = decodeFromFetcher(data, dataSource);
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         logWithTimeAndKey("Decoded result " + result, startTime);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
index 18a6e3695..1ce161ab1 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
@@ -63,6 +63,7 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
       ResourceDecoder<DataType, ResourceType> decoder = decoders.get(i);
       try {
         DataType data = rewinder.rewindAndGet();
+        //wsq 判断decoder是否接受data
         if (decoder.handles(data, options)) {
           data = rewinder.rewindAndGet();
           result = decoder.decode(data, width, height, options);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index 3b5e05710..2ca78ee68 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -134,6 +134,7 @@ public Engine(MemoryCache memoryCache,
    * @param height The target height in pixels of the desired resource.
    * @param cb     The callback that will be called when the load completes.
    */
+  //wsq 这一步是加载数据，非常重要
   public <R> LoadStatus load(
       GlideContext glideContext,
       Object model,
@@ -159,6 +160,7 @@ public Engine(MemoryCache memoryCache,
     EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,
         resourceClass, transcodeClass, options);
 
+    //wsq 从active的resources获取resource
     EngineResource<?> active = loadFromActiveResources(key, isMemoryCacheable);
     if (active != null) {
       cb.onResourceReady(active, DataSource.MEMORY_CACHE);
@@ -168,6 +170,7 @@ public Engine(MemoryCache memoryCache,
       return null;
     }
 
+    //wsq 从cache中获取null
     EngineResource<?> cached = loadFromCache(key, isMemoryCacheable);
     if (cached != null) {
       cb.onResourceReady(cached, DataSource.MEMORY_CACHE);
@@ -177,6 +180,7 @@ public Engine(MemoryCache memoryCache,
       return null;
     }
 
+    //从EngineJob列表中获取job,如果存在则直接拿来使用
     EngineJob<?> current = jobs.get(key);
     if (current != null) {
       current.addCallback(cb);
@@ -186,6 +190,7 @@ public Engine(MemoryCache memoryCache,
       return new LoadStatus(cb, current);
     }
 
+    //创建新的job
     EngineJob<R> engineJob = engineJobFactory.build(key, isMemoryCacheable,
         useUnlimitedSourceExecutorPool, useAnimationPool);
     DecodeJob<R> decodeJob = decodeJobFactory.build(
@@ -205,8 +210,11 @@ public Engine(MemoryCache memoryCache,
         onlyRetrieveFromCache,
         options,
         engineJob);
+    //wsq 添加到任务列表
     jobs.put(key, engineJob);
+    //wsq 添加回调接口
     engineJob.addCallback(cb);
+    //wsq 启动任务
     engineJob.start(decodeJob);
 
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 97f0f310e..041e0daaa 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -247,6 +247,7 @@ private void release(boolean isRemovedFromQueue) {
   public void onResourceReady(Resource<R> resource, DataSource dataSource) {
     this.resource = resource;
     this.dataSource = dataSource;
+    //wsq 任务准备，发送handler消息
     MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, this).sendToTarget();
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
index 81b0e8c4c..365c19ca3 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineKey.java
@@ -52,6 +52,7 @@ public boolean equals(Object o) {
     return false;
   }
 
+  //wsq hashcode是会返回哈希值，为哈希表提供寻址方便，在外面这个EngineKey是作为HashMap的key来使用的
   @Override
   public int hashCode() {
     if (hashCode == 0) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
index 2cbf56769..ba28ca73b 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DefaultImageHeaderParser.java
@@ -78,6 +78,7 @@ public int getOrientation(ByteBuffer byteBuffer, ArrayPool byteArrayPool) throws
         Preconditions.checkNotNull(byteArrayPool));
   }
 
+  //wsq 获取图片类型
   private ImageType getType(Reader reader) throws IOException {
     int firstTwoBytes = reader.getUInt16();
 
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
index 2e95f54ca..cf026ae1e 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
@@ -100,6 +100,7 @@ public void pauseRequests() {
   /**
    * Starts any not yet completed or failed requests.
    */
+  //wsq 开发者调用pauseRequests之后， isPaused标志位为true, 这个方法会把所有pending的request全部启动
   public void resumeRequests() {
     isPaused = false;
     for (Request request : Util.getSnapshot(requests)) {
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 76b5cd4b5..c15fba15b 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -425,6 +425,7 @@ private void setErrorPlaceholder() {
    * A callback method that should never be invoked directly.
    */
   @Override
+  //wsq 测量到实际要显示的宽高之后，才开始加载图片
   public void onSizeReady(int width, int height) {
     stateVerifier.throwIfRecycled();
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 00e041656..db1b78294 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -344,10 +344,12 @@ void getSize(SizeReadyCallback cb) {
       // We want to notify callbacks in the order they were added and we only expect one or two
       // callbacks to be added a time, so a List is a reasonable choice.
       if (!cbs.contains(cb)) {
+        //wsq 获取到宽高之后再回调通知
         cbs.add(cb);
       }
       if (layoutListener == null) {
         ViewTreeObserver observer = view.getViewTreeObserver();
+        //wsq 通过注册监听ViewTreeObserver来获取view的宽高
         layoutListener = new SizeDeterminerLayoutListener(this);
         observer.addOnPreDrawListener(layoutListener);
       }
