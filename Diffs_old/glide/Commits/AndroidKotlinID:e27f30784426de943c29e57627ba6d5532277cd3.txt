diff --git a/.travis.yml b/.travis.yml
index 1d9564895..8940a3620 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -20,10 +20,9 @@ env:
   matrix:
     - COMPONENT=unit
     - COMPONENT=firebase
-      # TODO(#2738): Re-enable these when we find a fix.
-      #    - COMPONENT=instrumentation ANDROID_TARGET=16
-      #    - COMPONENT=instrumentation ANDROID_TARGET=17
-      #    - COMPONENT=instrumentation ANDROID_TARGET=18
+    - COMPONENT=instrumentation ANDROID_TARGET=16
+    - COMPONENT=instrumentation ANDROID_TARGET=17
+    - COMPONENT=instrumentation ANDROID_TARGET=18
     - COMPONENT=instrumentation ANDROID_TARGET=19
     - COMPONENT=instrumentation ANDROID_TARGET=21
     - COMPONENT=instrumentation ANDROID_TARGET=22
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
index 1e3949a2f..512fc42a7 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
@@ -7,7 +7,7 @@
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.MethodSpec.Builder;
 import com.squareup.javapoet.TypeSpec;
 import java.util.ArrayList;
 import java.util.List;
@@ -147,33 +147,9 @@ private MethodSpec overrideGlideStaticMethod(ExecutableElement methodToOverride)
         MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString())
             .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
             .addJavadoc(processorUtil.generateSeeMethodJavadoc(methodToOverride))
-            .addParameters(Lists.transform(parameters,
-                new Function<VariableElement, ParameterSpec>() {
-                  @Override
-                  public ParameterSpec apply(VariableElement input) {
-                    return ParameterSpec.get(input);
-                  }
-            }));
+            .addParameters(ProcessorUtil.getParameters(methodToOverride));
 
-    String visibleForTestingTypeQualifiedName =
-        processingEnv
-            .getElementUtils()
-            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME)
-            .toString();
-    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
-      builder.addAnnotation(AnnotationSpec.get(mirror));
-
-      // Suppress a lint warning if we're overriding a VisibleForTesting method.
-      // See #1977.
-      String annotationQualfiedName = mirror.getAnnotationType().toString();
-      if (annotationQualfiedName.equals(visibleForTestingTypeQualifiedName)) {
-        builder.addAnnotation(
-            AnnotationSpec.builder(
-                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME))
-                .addMember("value", "$S", "VisibleForTests")
-                .build());
-      }
-    }
+    addReturnAnnotations(builder, methodToOverride);
 
     boolean returnsValue = element != null;
     if (returnsValue) {
@@ -197,6 +173,31 @@ public ParameterSpec apply(VariableElement input) {
     return builder.build();
   }
 
+  private Builder addReturnAnnotations(Builder builder, ExecutableElement methodToOverride) {
+    String visibleForTestingTypeQualifiedName =
+        processingEnv
+            .getElementUtils()
+            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME)
+            .toString();
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      builder.addAnnotation(AnnotationSpec.get(mirror));
+
+      // Suppress a lint warning if we're overriding a VisibleForTesting method.
+      // See #1977.
+      String annotationQualifiedName = mirror.getAnnotationType().toString();
+      if (annotationQualifiedName.equals(visibleForTestingTypeQualifiedName)) {
+        builder.addAnnotation(
+            AnnotationSpec.builder(
+                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME))
+                .addMember("value", "$S", "VisibleForTests")
+                .build());
+      }
+    }
+
+    return builder;
+  }
+
   private List<ExecutableElement> discoverGlideMethodsToOverride() {
     return processorUtil.findStaticMethods(glideType);
   }
@@ -213,15 +214,17 @@ private MethodSpec overrideGlideWithMethod(
     Preconditions.checkArgument(
         parameters.size() == 1, "Expected size of 1, but got %s", methodToOverride);
     VariableElement parameter = parameters.iterator().next();
-    return MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString())
+
+    Builder builder = MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString())
         .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
         .addJavadoc(processorUtil.generateSeeMethodJavadoc(methodToOverride))
+        .addParameters(ProcessorUtil.getParameters(methodToOverride))
         .returns(generatedRequestManagerClassName)
-        .addParameter(ClassName.get(parameter.asType()), parameter.getSimpleName().toString())
         .addStatement("return ($T) $T.$N($L)",
             generatedRequestManagerClassName, glideType,
             methodToOverride.getSimpleName().toString(),
-            parameter.getSimpleName())
-        .build();
+            parameter.getSimpleName());
+
+    return addReturnAnnotations(builder, methodToOverride).build();
   }
 }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index ac49364b2..3daf58dad 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -220,7 +220,7 @@ private CodeBlock generateSeeMethodJavadocInternal(
     return CodeBlock.of(javadocString.toString(), javadocArgs.toArray(new Object[0]));
   }
 
-   /**
+  /**
    * Returns a safe String to use in a Javadoc that will function in a link.
    *
    * <p>This method exists because by Javadoc doesn't handle type parameters({@literal <T>}
@@ -439,12 +439,12 @@ private static String getExcludedModuleClassFromAnnotationAttribute(
     private final TypeMirror returnType;
     private final MethodType methodType;
 
-    FilterPublicMethods(@Nullable TypeMirror returnType, MethodType methodType)  {
+    FilterPublicMethods(@Nullable TypeMirror returnType, MethodType methodType) {
       this.returnType = returnType;
       this.methodType = methodType;
     }
 
-    FilterPublicMethods(@Nullable TypeElement returnType, MethodType methodType)  {
+    FilterPublicMethods(@Nullable TypeElement returnType, MethodType methodType) {
       this(returnType != null ? returnType.asType() : null, methodType);
     }
 
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index 6ed2e79b6..2f1a20b50 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -95,7 +95,6 @@
     glideType = elementUtils.getTypeElement(GLIDE_QUALIFIED_NAME);
   }
 
-  @Nullable
   TypeSpec generate(
       String generatedCodePackageName, @Nullable TypeSpec requestOptions, TypeSpec requestBuilder,
       Set<String> glideExtensions) {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 0cffa7c9a..6fcb003f0 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -276,8 +276,7 @@ public String apply(VariableElement input) {
             methodLiterals.substring(0, methodLiterals.length() - 2));
       }
       extensionRequestOptionsArgument = CodeBlock.builder()
-          .add(
-            "super.$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
+          .add("super.$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
           .build()
           .toString();
     } else {
@@ -354,7 +353,6 @@ public String apply(VariableElement input) {
           .addAnnotation(Override.class);
     }
 
-
     // Adds: <AnnotatedClass>.<thisMethodName>(RequestOptions<?>, <arg1>, <arg2>, <argN>);
     List<Object> args = new ArrayList<>();
     StringBuilder code = new StringBuilder("$T.$L($L, ");
@@ -440,25 +438,12 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
     MethodSpec.Builder methodSpecBuilder =
         MethodSpec.methodBuilder(staticMethodName)
             .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
-        .addJavadoc(processorUtil.generateSeeMethodJavadoc(staticMethod))
-        .returns(glideOptionsName);
+            .addJavadoc(processorUtil.generateSeeMethodJavadoc(staticMethod))
+            .returns(glideOptionsName);
 
     List<? extends VariableElement> parameters = staticMethod.getParameters();
-    StringBuilder createNewOptionAndCall = new StringBuilder("new $T().$N(");
-    if (!parameters.isEmpty()) {
-      methodSpecBuilder.addParameters(ProcessorUtil.getParameters(staticMethod));
-      for (VariableElement parameter : parameters) {
-        createNewOptionAndCall.append(parameter.getSimpleName().toString());
-        // use the Application Context to avoid memory leaks.
-        if (memoize && isAndroidContext(parameter)) {
-          createNewOptionAndCall.append(".getApplicationContext()");
-        }
-        createNewOptionAndCall.append(", ");
-      }
-      createNewOptionAndCall = new StringBuilder(
-          createNewOptionAndCall.substring(0, createNewOptionAndCall.length() - 2));
-    }
-    createNewOptionAndCall.append(")");
+    StringBuilder createNewOptionAndCall = createNewOptionAndCall(memoize, methodSpecBuilder,
+        parameters, "new $T().$N(", ProcessorUtil.getParameters(staticMethod));
 
     FieldSpec requiredStaticField = null;
     if (memoize) {
@@ -542,24 +527,12 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
     // Remove is not supported.
     parameters = parameters.subList(1, parameters.size());
 
-    StringBuilder createNewOptionAndCall = new StringBuilder("new $T().$L(");
-    if (!parameters.isEmpty()) {
-      methodSpecBuilder.addParameters(ProcessorUtil.getParameters(parameters));
-      for (VariableElement parameter : parameters) {
-        createNewOptionAndCall.append(parameter.getSimpleName().toString());
-        // use the Application Context to avoid memory leaks.
-        if (memoize && isAndroidContext(parameter)) {
-          createNewOptionAndCall.append(".getApplicationContext()");
-        }
-        createNewOptionAndCall.append(", ");
-      }
-      createNewOptionAndCall = new StringBuilder(
-          createNewOptionAndCall.substring(0, createNewOptionAndCall.length() - 2));
-    }
-    createNewOptionAndCall.append(")");
+    StringBuilder createNewOptionAndCall = createNewOptionAndCall(memoize, methodSpecBuilder,
+        parameters, "new $T().$L(", ProcessorUtil.getParameters(parameters));
 
     FieldSpec requiredStaticField = null;
     if (memoize) {
+      // Generates code that looks like:
       // if (GlideOptions.<methodName> == null) {
       //   GlideOptions.<methodName> = new GlideOptions().<methodName>().autoClone()
       // }
@@ -577,6 +550,7 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
           .endControlFlow()
           .addStatement("return $T.$N", glideOptionsName, staticVariableName);
     } else {
+      // Generates code that looks like:
       // return new GlideOptions().<methodName>()
       methodSpecBuilder.addStatement(
           "return " + createNewOptionAndCall, glideOptionsName, instanceMethodName);
@@ -593,6 +567,27 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
 
+  private StringBuilder createNewOptionAndCall(boolean memoize,
+      MethodSpec.Builder methodSpecBuilder,
+      List<? extends VariableElement> parameters, String start, List<ParameterSpec> specs) {
+    StringBuilder createNewOptionAndCall = new StringBuilder(start);
+    if (!parameters.isEmpty()) {
+      methodSpecBuilder.addParameters(specs);
+      for (VariableElement parameter : parameters) {
+        createNewOptionAndCall.append(parameter.getSimpleName().toString());
+        // use the Application Context to avoid memory leaks.
+        if (memoize && isAndroidContext(parameter)) {
+          createNewOptionAndCall.append(".getApplicationContext()");
+        }
+        createNewOptionAndCall.append(", ");
+      }
+      createNewOptionAndCall = new StringBuilder(
+          createNewOptionAndCall.substring(0, createNewOptionAndCall.length() - 2));
+    }
+    createNewOptionAndCall.append(")");
+    return createNewOptionAndCall;
+  }
+
   private boolean isAndroidContext(VariableElement variableElement) {
     Element element = processingEnvironment.getTypeUtils().asElement(variableElement.asType());
     return element.toString().equals("android.content.Context");
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
index 685506a88..4a1e8e108 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
@@ -32,7 +32,7 @@ private GlideApp() {
    * @see Glide#getPhotoCacheDir(Context)
    */
   @Nullable
-  public static File getPhotoCacheDir(Context arg0) {
+  public static File getPhotoCacheDir(@NonNull Context arg0) {
     return Glide.getPhotoCacheDir(arg0);
   }
 
@@ -40,7 +40,7 @@ public static File getPhotoCacheDir(Context arg0) {
    * @see Glide#getPhotoCacheDir(Context, String)
    */
   @Nullable
-  public static File getPhotoCacheDir(Context arg0, String arg1) {
+  public static File getPhotoCacheDir(@NonNull Context arg0, @NonNull String arg1) {
     return Glide.getPhotoCacheDir(arg0, arg1);
   }
 
@@ -48,7 +48,7 @@ public static File getPhotoCacheDir(Context arg0, String arg1) {
    * @see Glide#get(Context)
    */
   @NonNull
-  public static Glide get(Context arg0) {
+  public static Glide get(@NonNull Context arg0) {
     return Glide.get(arg0);
   }
 
@@ -67,7 +67,7 @@ public static void init(Glide glide) {
    */
   @VisibleForTesting
   @SuppressLint("VisibleForTests")
-  public static void init(Context arg0, GlideBuilder arg1) {
+  public static void init(@NonNull Context arg0, @NonNull GlideBuilder arg1) {
     Glide.init(arg0, arg1);
   }
 
@@ -83,42 +83,48 @@ public static void tearDown() {
   /**
    * @see Glide#with(Context)
    */
-  public static GlideRequests with(Context arg0) {
+  @NonNull
+  public static GlideRequests with(@NonNull Context arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 
   /**
    * @see Glide#with(Activity)
    */
-  public static GlideRequests with(Activity arg0) {
+  @NonNull
+  public static GlideRequests with(@NonNull Activity arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 
   /**
    * @see Glide#with(FragmentActivity)
    */
-  public static GlideRequests with(FragmentActivity arg0) {
+  @NonNull
+  public static GlideRequests with(@NonNull FragmentActivity arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 
   /**
    * @see Glide#with(Fragment)
    */
-  public static GlideRequests with(Fragment arg0) {
+  @NonNull
+  public static GlideRequests with(@NonNull Fragment arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 
   /**
    * @see Glide#with(Fragment)
    */
-  public static GlideRequests with(android.support.v4.app.Fragment arg0) {
+  @NonNull
+  public static GlideRequests with(@NonNull android.support.v4.app.Fragment arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 
   /**
    * @see Glide#with(View)
    */
-  public static GlideRequests with(View arg0) {
+  @NonNull
+  public static GlideRequests with(@NonNull View arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index b2aced03f..cbf4c9247 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -276,102 +276,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -384,108 +401,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -494,18 +529,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -513,35 +551,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
index 64329582e..376636b35 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index e082c19ab..b721e7f9d 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -279,102 +279,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -387,108 +404,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -497,18 +532,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -516,35 +554,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index e95fd0b0b..5533857e5 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index c54db9e3e..9ece405f4 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,102 +402,119 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -489,18 +523,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -508,35 +545,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index 665cc9c55..3e559893c 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -530,6 +565,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -557,6 +594,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -571,6 +609,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index 6c6962b80..ef9428d20 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -268,96 +268,112 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -370,108 +386,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -480,18 +514,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -499,35 +536,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
index dea6ceff3..cac11bc08 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -530,6 +565,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -557,6 +594,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -571,6 +609,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 3d3f388db..1ecca0318 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,102 +402,119 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -489,18 +523,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -508,35 +545,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index 665cc9c55..3e559893c 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -530,6 +565,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -557,6 +594,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -571,6 +609,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index bd449e23f..a82df71e5 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index e95fd0b0b..5533857e5 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index d3d533503..7a1516c66 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index e95fd0b0b..5533857e5 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index d2346da25..0faea6521 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
index 73a5fb86b..f461c8ad2 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index 444387326..0e6db8dba 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index 6daf49a29..e63a8c636 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -279,102 +279,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -387,108 +404,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -497,18 +532,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -516,35 +554,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index e95fd0b0b..5533857e5 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index 89eca39ff..0922d8cf3 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,102 +402,119 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -489,18 +523,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -508,35 +545,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index 665cc9c55..3e559893c 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -530,6 +565,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -557,6 +594,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -571,6 +609,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index fc8c90511..2be07d97e 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,102 +402,119 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -489,18 +523,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -508,35 +545,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index 665cc9c55..3e559893c 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -530,6 +565,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -557,6 +594,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -571,6 +609,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index 162142957..f360cefae 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index e95fd0b0b..5533857e5 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 7911b7b97..fc9293a65 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index e95fd0b0b..5533857e5 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
index 3887d0345..b3c4406a4 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
index 73a5fb86b..f461c8ad2 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
@@ -71,6 +71,7 @@
   /**
    * @see GlideOptions#sizeMultiplier(float)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -84,6 +85,7 @@
   /**
    * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -97,6 +99,7 @@
   /**
    * @see GlideOptions#useAnimationPool(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -110,6 +113,7 @@
   /**
    * @see GlideOptions#onlyRetrieveFromCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -123,6 +127,7 @@
   /**
    * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -136,6 +141,7 @@
   /**
    * @see GlideOptions#priority(Priority)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -149,6 +155,7 @@
   /**
    * @see GlideOptions#placeholder(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -162,6 +169,7 @@
   /**
    * @see GlideOptions#placeholder(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -175,6 +183,7 @@
   /**
    * @see GlideOptions#fallback(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -188,6 +197,7 @@
   /**
    * @see GlideOptions#fallback(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -201,6 +211,7 @@
   /**
    * @see GlideOptions#error(Drawable)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -214,6 +225,7 @@
   /**
    * @see GlideOptions#error(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -227,6 +239,7 @@
   /**
    * @see GlideOptions#theme(Resources.Theme)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -240,6 +253,7 @@
   /**
    * @see GlideOptions#skipMemoryCache(boolean)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -253,6 +267,7 @@
   /**
    * @see GlideOptions#override(int, int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -266,6 +281,7 @@
   /**
    * @see GlideOptions#override(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -279,6 +295,7 @@
   /**
    * @see GlideOptions#signature(Key)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -292,6 +309,7 @@
   /**
    * @see GlideOptions#set(Option<T>, T)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -305,6 +323,7 @@
   /**
    * @see GlideOptions#decode(Class<?>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -318,6 +337,7 @@
   /**
    * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -331,6 +351,7 @@
   /**
    * @see GlideOptions#encodeQuality(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -344,6 +365,7 @@
   /**
    * @see GlideOptions#frame(long)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -357,6 +379,7 @@
   /**
    * @see GlideOptions#format(DecodeFormat)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -370,6 +393,7 @@
   /**
    * @see GlideOptions#disallowHardwareConfig()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -383,6 +407,7 @@
   /**
    * @see GlideOptions#downsample(DownsampleStrategy)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -396,6 +421,7 @@
   /**
    * @see GlideOptions#timeout(int)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -409,6 +435,7 @@
   /**
    * @see GlideOptions#optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -422,6 +449,7 @@
   /**
    * @see GlideOptions#centerCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -435,6 +463,7 @@
   /**
    * @see GlideOptions#optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -448,6 +477,7 @@
   /**
    * @see GlideOptions#fitCenter()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -461,6 +491,7 @@
   /**
    * @see GlideOptions#optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -474,6 +505,7 @@
   /**
    * @see GlideOptions#centerInside()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -487,6 +519,7 @@
   /**
    * @see GlideOptions#optionalCircleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -500,6 +533,7 @@
   /**
    * @see GlideOptions#circleCrop()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -513,6 +547,7 @@
   /**
    * @see GlideOptions#transform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -526,6 +561,7 @@
   /**
    * @see GlideOptions#transforms(Transformation<Bitmap>[])
    */
+  @NonNull
   @CheckResult
   @SuppressWarnings({
       "unchecked",
@@ -543,6 +579,7 @@
   /**
    * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -556,6 +593,7 @@
   /**
    * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -570,6 +608,7 @@
   /**
    * @see GlideOptions#transform(Class<T>, Transformation<T>)
    */
+  @NonNull
   @CheckResult
   public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -584,6 +623,7 @@
   /**
    * @see GlideOptions#dontTransform()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
     if (getMutableOptions() instanceof GlideOptions) {
@@ -597,6 +637,7 @@
   /**
    * @see GlideOptions#dontAnimate()
    */
+  @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
     if (getMutableOptions() instanceof GlideOptions) {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
index 444387326..0e6db8dba 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
@@ -277,102 +277,119 @@ public static GlideOptions noAnimation() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
     return (GlideOptions) super.sizeMultiplier(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
     return (GlideOptions) super.diskCacheStrategy(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions priority(@NonNull Priority arg0) {
     return (GlideOptions) super.priority(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@Nullable Drawable arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions placeholder(@DrawableRes int arg0) {
     return (GlideOptions) super.placeholder(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@Nullable Drawable arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fallback(@DrawableRes int arg0) {
     return (GlideOptions) super.fallback(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@Nullable Drawable arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions error(@DrawableRes int arg0) {
     return (GlideOptions) super.error(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions theme(@Nullable Resources.Theme arg0) {
     return (GlideOptions) super.theme(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions signature(@NonNull Key arg0) {
     return (GlideOptions) super.signature(arg0);
@@ -385,108 +402,126 @@ public final GlideOptions clone() {
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
     return (GlideOptions) super.set(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions decode(@NonNull Class<?> arg0) {
     return (GlideOptions) super.decode(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
     return (GlideOptions) super.encodeFormat(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
     return (GlideOptions) super.encodeQuality(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions frame(@IntRange(from = 0) long arg0) {
     return (GlideOptions) super.frame(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions format(@NonNull DecodeFormat arg0) {
     return (GlideOptions) super.format(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
     return (GlideOptions) super.downsample(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
     return (GlideOptions) super.timeout(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.transform(arg0);
@@ -495,18 +530,21 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @Override
   @SafeVarargs
   @SuppressWarnings("varargs")
+  @NonNull
   @CheckResult
   public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
     return (GlideOptions) super.transforms(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
     return (GlideOptions) super.optionalTransform(arg0);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
       @NonNull Transformation<T> arg1) {
@@ -514,35 +552,41 @@ public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
     return (GlideOptions) super.transform(arg0, arg1);
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
+  @NonNull
   @CheckResult
   public final GlideOptions apply(@NonNull RequestOptions arg0) {
     return (GlideOptions) super.apply(arg0);
   }
 
   @Override
+  @NonNull
   public final GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
+  @NonNull
   public final GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
index 358a54263..2c89c9227 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/WaitModelLoader.java
@@ -83,6 +83,7 @@ public void countDown() {
       return new WaitModel<>(model);
     }
 
+    @NonNull
     @Override
     public ModelLoader<WaitModel<Model>, Data> build(
         MultiModelLoaderFactory multiFactory) {
@@ -106,7 +107,7 @@ public void teardown() {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super Data> callback) {
+    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       ConcurrencyHelper.waitOnLatch(toWaitOn);
       wrapped.loadData(priority, callback);
     }
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
index 2bbc438a9..dcac2f768 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
@@ -38,7 +38,8 @@ public OkHttpStreamFetcher(OkHttpClient client, GlideUrl url) {
   }
 
   @Override
-  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {
+  public void loadData(@NonNull Priority priority,
+      @NonNull final DataCallback<? super InputStream> callback) {
     Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());
     for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {
       String key = headerEntry.getKey();
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java
index c5374ba68..174c446f2 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpUrlLoader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.integration.okhttp;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.load.model.ModelLoader;
@@ -25,14 +26,14 @@ public OkHttpUrlLoader(OkHttpClient client) {
   }
 
   @Override
-  public boolean handles(GlideUrl url) {
+  public boolean handles(@NonNull GlideUrl url) {
     return true;
   }
 
   @SuppressWarnings("deprecation")
   @Override
-  public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,
-      Options options) {
+  public LoadData<InputStream> buildLoadData(@NonNull GlideUrl model, int width, int height,
+      @NonNull Options options) {
     return new LoadData<>(model, new OkHttpStreamFetcher(client, model));
   }
 
@@ -70,6 +71,7 @@ public Factory(OkHttpClient client) {
       this.client = client;
     }
 
+    @NonNull
     @SuppressWarnings("deprecation")
     @Override
     public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
index 7ffd81db6..785592905 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
@@ -22,8 +22,7 @@
 /**
  * Fetches an {@link InputStream} using the okhttp library.
  */
-public class OkHttpStreamFetcher implements DataFetcher<InputStream>,
- okhttp3.Callback {
+public class OkHttpStreamFetcher implements DataFetcher<InputStream>, okhttp3.Callback {
   private static final String TAG = "OkHttpFetcher";
   private final Call.Factory client;
   private final GlideUrl url;
@@ -40,7 +39,8 @@ public OkHttpStreamFetcher(Call.Factory client, GlideUrl url) {
   }
 
   @Override
-  public void loadData(Priority priority, final DataCallback<? super InputStream> callback) {
+  public void loadData(@NonNull Priority priority,
+      @NonNull final DataCallback<? super InputStream> callback) {
     Request.Builder requestBuilder = new Request.Builder().url(url.toStringUrl());
     for (Map.Entry<String, String> headerEntry : url.getHeaders().entrySet()) {
       String key = headerEntry.getKey();
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
index f43ff7825..97348ecc6 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
@@ -2,7 +2,6 @@
 
 import android.support.annotation.NonNull;
 import android.util.Log;
-import com.android.volley.AuthFailureError;
 import com.android.volley.NetworkResponse;
 import com.android.volley.Request;
 import com.android.volley.RequestQueue;
@@ -51,7 +50,8 @@ public VolleyStreamFetcher(RequestQueue requestQueue, GlideUrl url,
   }
 
   @Override
-  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {
+  public void loadData(@NonNull Priority priority,
+      @NonNull DataCallback<? super InputStream> callback) {
     request = requestFactory.create(url.toStringUrl(), callback, glideToVolleyPriority(priority),
         url.getHeaders());
     requestQueue.add(request);
@@ -82,7 +82,7 @@ public DataSource getDataSource() {
     return DataSource.REMOTE;
   }
 
-  private static Request.Priority glideToVolleyPriority(Priority priority) {
+  private static Request.Priority glideToVolleyPriority(@NonNull Priority priority) {
     switch (priority) {
       case LOW:
         return Request.Priority.LOW;
@@ -119,7 +119,7 @@ public GlideRequest(String url, DataCallback<? super InputStream> callback, Prio
     }
 
     @Override
-    public Map<String, String> getHeaders() throws AuthFailureError {
+    public Map<String, String> getHeaders() {
       return headers;
     }
 
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java
index d64a47d40..a5ceda30a 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyUrlLoader.java
@@ -77,6 +77,7 @@ public Factory(RequestQueue requestQueue, VolleyRequestFactory requestFactory) {
       this.requestQueue = requestQueue;
     }
 
+    @NonNull
     @Override
     public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory factory) {
       return new VolleyUrlLoader(requestQueue, requestFactory);
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index 41e4c8432..49d31b6f7 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -398,8 +398,9 @@ public Registry register(@NonNull ImageHeaderParser parser) {
    * {@link java.io.FileDescriptor}).
    */
   @NonNull
-  public <Model, Data> Registry append(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
+  public <Model, Data> Registry append(
+      @NonNull Class<Model> modelClass, @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<Model, Data> factory) {
     modelLoaderRegistry.append(modelClass, dataClass, factory);
     return this;
   }
@@ -428,8 +429,9 @@ public Registry register(@NonNull ImageHeaderParser parser) {
    * {@link java.io.FileDescriptor}).
    */
   @NonNull
-  public <Model, Data> Registry prepend(Class<Model> modelClass, Class<Data> dataClass,
-      ModelLoaderFactory<Model, Data> factory) {
+  public <Model, Data> Registry prepend(
+      @NonNull Class<Model> modelClass, @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<Model, Data> factory) {
     modelLoaderRegistry.prepend(modelClass, dataClass, factory);
     return this;
   }
@@ -459,9 +461,9 @@ public Registry register(@NonNull ImageHeaderParser parser) {
    */
   @NonNull
   public <Model, Data> Registry replace(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     modelLoaderRegistry.replace(modelClass, dataClass, factory);
     return this;
   }
@@ -518,7 +520,7 @@ public Registry register(@NonNull ImageHeaderParser parser) {
 
   @Nullable
   public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(
-      Class<Model> modelClass, @NonNull Class<TResource> resourceClass,
+      @NonNull Class<Model> modelClass, @NonNull Class<TResource> resourceClass,
       @NonNull Class<Transcode> transcodeClass) {
     List<Class<?>> result = modelToResourceClassCache.get(modelClass, resourceClass);
 
@@ -597,11 +599,12 @@ public boolean isResourceEncoderAvailable(@NonNull Resource<?> resource) {
   // Never serialized by Glide.
   @SuppressWarnings("serial")
   public static class NoModelLoaderAvailableException extends MissingComponentException {
-    public NoModelLoaderAvailableException(Object model) {
+    public NoModelLoaderAvailableException(@NonNull Object model) {
       super("Failed to find any ModelLoaders for model: " + model);
     }
 
-    public NoModelLoaderAvailableException(Class<?> modelClass, Class<?> dataClass) {
+    public NoModelLoaderAvailableException(@NonNull Class<?> modelClass,
+        @NonNull Class<?> dataClass) {
       super("Failed to find any ModelLoaders for model: " + modelClass + " and data: " + dataClass);
     }
   }
@@ -612,7 +615,7 @@ public NoModelLoaderAvailableException(Class<?> modelClass, Class<?> dataClass)
   // Never serialized by Glide.
   @SuppressWarnings("serial")
   public static class NoResultEncoderAvailableException extends MissingComponentException {
-    public NoResultEncoderAvailableException(Class<?> resourceClass) {
+    public NoResultEncoderAvailableException(@NonNull Class<?> resourceClass) {
       super("Failed to find result encoder for resource class: " + resourceClass);
     }
   }
@@ -623,7 +626,7 @@ public NoResultEncoderAvailableException(Class<?> resourceClass) {
   // Never serialized by Glide.
   @SuppressWarnings("serial")
   public static class NoSourceEncoderAvailableException extends MissingComponentException {
-    public NoSourceEncoderAvailableException(Class<?> dataClass) {
+    public NoSourceEncoderAvailableException(@NonNull Class<?> dataClass) {
       super("Failed to find source encoder for data class: " + dataClass);
     }
   }
@@ -634,7 +637,7 @@ public NoSourceEncoderAvailableException(Class<?> dataClass) {
   // Never serialized by Glide.
   @SuppressWarnings("serial")
   public static class MissingComponentException extends RuntimeException {
-    public MissingComponentException(String message) {
+    public MissingComponentException(@NonNull String message) {
       super(message);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
index 863ee034b..f21eb6c64 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
@@ -27,7 +27,7 @@ public AssetPathFetcher(AssetManager assetManager, String assetPath) {
   }
 
   @Override
-  public void loadData(Priority priority, DataCallback<? super T> callback) {
+  public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super T> callback) {
     try {
       data = loadResource(assetManager, assetPath);
     } catch (IOException e) {
diff --git a/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
index 9889eaf06..4a1674fd9 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
@@ -39,7 +39,7 @@
      *
      * @param e a non-null {@link Exception} indicating why the load failed.
      */
-    void onLoadFailed(Exception e);
+    void onLoadFailed(@NonNull Exception e);
   }
 
   /**
@@ -63,7 +63,7 @@
    * @param callback The callback to use when the request is complete
    * @see #cleanup() where the data retuned will be cleaned up
    */
-  void loadData(Priority priority, DataCallback<? super T> callback);
+  void loadData(@NonNull Priority priority, @NonNull DataCallback<? super T> callback);
 
   /**
    * Cleanup or recycle any resources used by this data fetcher. This method will be called in a
diff --git a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
index 064926698..d150608b4 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
@@ -48,7 +48,8 @@ public HttpUrlFetcher(GlideUrl glideUrl, int timeout) {
   }
 
   @Override
-  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {
+  public void loadData(@NonNull Priority priority,
+      @NonNull DataCallback<? super InputStream> callback) {
     long startTime = LogTime.getLogTime();
     final InputStream result;
     try {
diff --git a/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
index cb77e05ea..68ee75305 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
@@ -38,7 +38,8 @@ public LocalUriFetcher(ContentResolver contentResolver, Uri uri) {
   }
 
   @Override
-  public final void loadData(Priority priority, DataCallback<? super T> callback) {
+  public final void loadData(@NonNull Priority priority,
+      @NonNull DataCallback<? super T> callback) {
     try {
       data = loadResource(uri, contentResolver);
     } catch (FileNotFoundException e) {
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
index 3ab7f6a54..3b90b0a6b 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
@@ -52,7 +52,8 @@ private static ThumbFetcher build(Context context, Uri uri, ThumbnailQuery query
   }
 
   @Override
-  public void loadData(Priority priority, DataCallback<? super InputStream> callback) {
+  public void loadData(@NonNull Priority priority,
+      @NonNull DataCallback<? super InputStream> callback) {
     try {
       inputStream = openThumbInputStream();
     } catch (FileNotFoundException e) {
@@ -117,11 +118,11 @@ public DataSource getDataSource() {
     }
 
     private static final String[] PATH_PROJECTION = {
-      MediaStore.Video.Thumbnails.DATA
+        MediaStore.Video.Thumbnails.DATA
     };
     private static final String PATH_SELECTION =
         MediaStore.Video.Thumbnails.KIND + " = " + MediaStore.Video.Thumbnails.MINI_KIND
-        + " AND " + MediaStore.Video.Thumbnails.VIDEO_ID + " = ?";
+            + " AND " + MediaStore.Video.Thumbnails.VIDEO_ID + " = ?";
 
     @Override
     public Cursor query(Uri uri) {
@@ -145,11 +146,11 @@ public Cursor query(Uri uri) {
     }
 
     private static final String[] PATH_PROJECTION = {
-      MediaStore.Images.Thumbnails.DATA,
+        MediaStore.Images.Thumbnails.DATA,
     };
     private static final String PATH_SELECTION =
         MediaStore.Images.Thumbnails.KIND + " = " + MediaStore.Images.Thumbnails.MINI_KIND
-        + " AND " + MediaStore.Images.Thumbnails.IMAGE_ID + " = ?";
+            + " AND " + MediaStore.Images.Thumbnails.IMAGE_ID + " = ?";
 
     @Override
     public Cursor query(Uri uri) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
index 2eb478ee3..0972f30ad 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DataCacheGenerator.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.data.DataFetcher;
@@ -92,7 +93,7 @@ public void onDataReady(Object data) {
   }
 
   @Override
-  public void onLoadFailed(Exception e) {
+  public void onLoadFailed(@NonNull Exception e) {
     cb.onDataFetcherFailed(sourceKey, e, loadData.fetcher, DataSource.DATA_DISK_CACHE);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index a587886ae..888bf71d3 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -515,6 +515,7 @@ private void logWithTimeAndKey(String message, long startTime, String extraArgs)
         + Thread.currentThread().getName());
   }
 
+  @NonNull
   @Override
   public StateVerifier getVerifier() {
     return stateVerifier;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 2efc94290..344a15036 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -3,6 +3,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
+import android.support.annotation.NonNull;
 import android.support.annotation.VisibleForTesting;
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.DataSource;
@@ -296,6 +297,7 @@ void handleExceptionOnMainThread() {
     release(false /*isRemovedFromQueue*/);
   }
 
+  @NonNull
   @Override
   public StateVerifier getVerifier() {
     return stateVerifier;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
index 7770829c6..c1c43ec6e 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/LockedResource.java
@@ -90,6 +90,7 @@ public synchronized void recycle() {
     }
   }
 
+  @NonNull
   @Override
   public StateVerifier getVerifier() {
     return stateVerifier;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 43a446f59..537da858a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Transformation;
@@ -110,7 +111,7 @@ public void onDataReady(Object data) {
   }
 
   @Override
-  public void onLoadFailed(Exception e) {
+  public void onLoadFailed(@NonNull Exception e) {
     cb.onDataFetcherFailed(currentKey, e, loadData.fetcher, DataSource.RESOURCE_DISK_CACHE);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
index f95ea8ca2..5a57b971b 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/SourceGenerator.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine;
 
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Encoder;
@@ -114,7 +115,7 @@ public void onDataReady(Object data) {
   }
 
   @Override
-  public void onLoadFailed(Exception e) {
+  public void onLoadFailed(@NonNull Exception e) {
     cb.onDataFetcherFailed(originalKey, e, loadData.fetcher, loadData.fetcher.getDataSource());
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
index 9769077d6..f726ef10e 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/SafeKeyGenerator.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.engine.cache;
 
+import android.support.annotation.NonNull;
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.util.LruCache;
@@ -65,6 +66,7 @@ private String calculateHexStringDigest(Key key) {
       this.messageDigest = messageDigest;
     }
 
+    @NonNull
     @Override
     public StateVerifier getVerifier() {
       return stateVerifier;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/AssetUriLoader.java b/library/src/main/java/com/bumptech/glide/load/model/AssetUriLoader.java
index f8af6151b..9eea06323 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/AssetUriLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/AssetUriLoader.java
@@ -67,6 +67,7 @@ public StreamFactory(AssetManager assetManager) {
       this.assetManager = assetManager;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new AssetUriLoader<>(assetManager, this);
@@ -96,6 +97,7 @@ public FileDescriptorFactory(AssetManager assetManager) {
       this.assetManager = assetManager;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory) {
       return new AssetUriLoader<>(assetManager, this);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
index 54d80326c..42b17bf23 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
@@ -56,7 +56,7 @@ public boolean handles(@NonNull byte[] model) {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super Data> callback) {
+    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       Data result = converter.convert(model);
       callback.onDataReady(result);
     }
@@ -90,6 +90,7 @@ public DataSource getDataSource() {
    */
   public static class ByteBufferFactory implements ModelLoaderFactory<byte[], ByteBuffer> {
 
+    @NonNull
     @Override
     public ModelLoader<byte[], ByteBuffer> build(MultiModelLoaderFactory multiFactory) {
       return new ByteArrayLoader<>(new Converter<ByteBuffer>() {
@@ -116,6 +117,7 @@ public void teardown() {
    */
   public static class StreamFactory implements ModelLoaderFactory<byte[], InputStream> {
 
+    @NonNull
     @Override
     public ModelLoader<byte[], InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new ByteArrayLoader<>(new Converter<InputStream>() {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
index bc0ac5dc5..213c25ce1 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
@@ -35,6 +35,7 @@ public boolean handles(@NonNull File file) {
    */
   public static class Factory implements ModelLoaderFactory<File, ByteBuffer> {
 
+    @NonNull
     @Override
     public ModelLoader<File, ByteBuffer> build(MultiModelLoaderFactory multiFactory) {
       return new ByteBufferFileLoader();
@@ -57,7 +58,8 @@ public void teardown() {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super ByteBuffer> callback) {
+    public void loadData(@NonNull Priority priority,
+        @NonNull DataCallback<? super ByteBuffer> callback) {
       ByteBuffer result;
       try {
         result = ByteBufferUtil.fromFile(file);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
index 8a47e2068..6865bb818 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
@@ -71,7 +71,7 @@ public boolean handles(@NonNull String url) {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super Data> callback) {
+    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       try {
         data = reader.decode(dataUri);
         callback.onDataReady(data);
@@ -150,6 +150,7 @@ public void close(InputStream inputStream) throws IOException {
       };
     }
 
+    @NonNull
     @Override
     public final ModelLoader<String, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new DataUrlLoader<>(opener);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
index 0e1b732b2..f56f8bd58 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
@@ -63,7 +63,7 @@ public boolean handles(@NonNull File model) {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super Data> callback) {
+    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       try {
         data = opener.open(file);
       } catch (FileNotFoundException e) {
@@ -116,6 +116,7 @@ public Factory(FileOpener<Data> opener) {
       this.opener = opener;
     }
 
+    @NonNull
     @Override
     public final ModelLoader<File, Data> build(MultiModelLoaderFactory multiFactory) {
       return new FileLoader<>(opener);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
index 32867b928..6b36fb0ec 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
@@ -53,7 +53,7 @@ public boolean handles(@NonNull Uri uri) {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super File> callback) {
+    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super File> callback) {
       Cursor cursor = context.getContentResolver().query(uri, PROJECTION, null /*selection*/,
           null /*selectionArgs*/, null /*sortOrder*/);
 
@@ -109,6 +109,7 @@ public Factory(Context context) {
       this.context = context;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, File> build(MultiModelLoaderFactory multiFactory) {
       return new MediaStoreFileLoader(context);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
index 30fde57fd..2ef8de0dc 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoader.java
@@ -47,11 +47,12 @@
     public final List<Key> alternateKeys;
     public final DataFetcher<Data> fetcher;
 
-    public LoadData(Key sourceKey, DataFetcher<Data> fetcher) {
+    public LoadData(@NonNull Key sourceKey, @NonNull DataFetcher<Data> fetcher) {
       this(sourceKey, Collections.<Key>emptyList(), fetcher);
     }
 
-    public LoadData(Key sourceKey, List<Key> alternateKeys, DataFetcher<Data> fetcher) {
+    public LoadData(@NonNull Key sourceKey, @NonNull List<Key> alternateKeys,
+        @NonNull DataFetcher<Data> fetcher) {
       this.sourceKey = Preconditions.checkNotNull(sourceKey);
       this.alternateKeys = Preconditions.checkNotNull(alternateKeys);
       this.fetcher = Preconditions.checkNotNull(fetcher);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
index 19e126019..321077144 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 /**
  * An interface for creating a {@link ModelLoader} for a given model type. Will be retained
@@ -22,7 +23,8 @@
    *                     {@link ModelLoader}s that this factory's {@link ModelLoader} may depend on
    * @return A new {@link ModelLoader}
    */
-  ModelLoader<T, Y> build(MultiModelLoaderFactory multiFactory);
+  @NonNull
+  ModelLoader<T, Y> build(@NonNull MultiModelLoaderFactory multiFactory);
 
   /**
    * A lifecycle method that will be called when this factory is about to replaced.
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
index 37497b991..ef11d7a21 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.util.Pools.Pool;
 import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayList;
@@ -19,51 +21,53 @@
   private final MultiModelLoaderFactory multiModelLoaderFactory;
   private final ModelLoaderCache cache = new ModelLoaderCache();
 
-  public ModelLoaderRegistry(Pool<List<Throwable>> throwableListPool) {
+  public ModelLoaderRegistry(@NonNull Pool<List<Throwable>> throwableListPool) {
     this(new MultiModelLoaderFactory(throwableListPool));
   }
 
-  private ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
+  private ModelLoaderRegistry(@NonNull MultiModelLoaderFactory multiModelLoaderFactory) {
     this.multiModelLoaderFactory = multiModelLoaderFactory;
   }
 
   public synchronized <Model, Data> void append(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     multiModelLoaderFactory.append(modelClass, dataClass, factory);
     cache.clear();
   }
 
   public synchronized <Model, Data> void prepend(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     multiModelLoaderFactory.prepend(modelClass, dataClass, factory);
     cache.clear();
   }
 
-  public synchronized <Model, Data> void remove(Class<Model> modelClass, Class<Data> dataClass) {
+  public synchronized <Model, Data> void remove(@NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass) {
     tearDown(multiModelLoaderFactory.remove(modelClass, dataClass));
     cache.clear();
   }
 
   public synchronized <Model, Data> void replace(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     tearDown(multiModelLoaderFactory.replace(modelClass, dataClass, factory));
     cache.clear();
   }
 
   private <Model, Data> void tearDown(
-      List<ModelLoaderFactory<? extends Model, ? extends Data>> factories) {
+      @NonNull List<ModelLoaderFactory<? extends Model, ? extends Data>> factories) {
     for (ModelLoaderFactory<? extends Model, ? extends Data> factory : factories) {
       factory.teardown();
     }
   }
 
-  public synchronized <A> List<ModelLoader<A, ?>> getModelLoaders(A model) {
+  @NonNull
+  public synchronized <A> List<ModelLoader<A, ?>> getModelLoaders(@NonNull A model) {
     List<ModelLoader<A, ?>> modelLoaders = getModelLoadersForClass(getClass(model));
     int size = modelLoaders.size();
     List<ModelLoader<A, ?>> filteredLoaders = new ArrayList<>(size);
@@ -77,16 +81,18 @@ private ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
     return filteredLoaders;
   }
 
-  public synchronized <Model, Data> ModelLoader<Model, Data> build(Class<Model> modelClass,
-      Class<Data> dataClass) {
+  public synchronized <Model, Data> ModelLoader<Model, Data> build(@NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass) {
     return multiModelLoaderFactory.build(modelClass, dataClass);
   }
 
-  public synchronized List<Class<?>> getDataClasses(Class<?> modelClass) {
+  @NonNull
+  public synchronized List<Class<?>> getDataClasses(@NonNull Class<?> modelClass) {
     return multiModelLoaderFactory.getDataClasses(modelClass);
   }
 
-  private <A> List<ModelLoader<A, ?>> getModelLoadersForClass(Class<A> modelClass) {
+  @NonNull
+  private <A> List<ModelLoader<A, ?>> getModelLoadersForClass(@NonNull Class<A> modelClass) {
     List<ModelLoader<A, ?>> loaders = cache.get(modelClass);
     if (loaders == null) {
       loaders = Collections.unmodifiableList(multiModelLoaderFactory.build(modelClass));
@@ -95,8 +101,9 @@ private ModelLoaderRegistry(MultiModelLoaderFactory multiModelLoaderFactory) {
     return loaders;
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
-  private static <A> Class<A> getClass(A model) {
+  private static <A> Class<A> getClass(@NonNull A model) {
     return (Class<A>) model.getClass();
   }
 
@@ -117,6 +124,7 @@ public void clear() {
       }
     }
 
+    @Nullable
     @SuppressWarnings("unchecked")
     public <Model> List<ModelLoader<Model, ?>> get(Class<Model> modelClass) {
       Entry<Model> entry = (Entry<Model>) cachedModelLoaders.get(modelClass);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index 84d97b2ca..684dc76b0 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -29,8 +29,8 @@
   private final List<ModelLoader<Model, Data>> modelLoaders;
   private final Pool<List<Throwable>> exceptionListPool;
 
-  MultiModelLoader(List<ModelLoader<Model, Data>> modelLoaders,
-      Pool<List<Throwable>> exceptionListPool) {
+  MultiModelLoader(@NonNull List<ModelLoader<Model, Data>> modelLoaders,
+      @NonNull Pool<List<Throwable>> exceptionListPool) {
     this.modelLoaders = modelLoaders;
     this.exceptionListPool = exceptionListPool;
   }
@@ -82,7 +82,8 @@ public String toString() {
     @Nullable
     private List<Throwable> exceptions;
 
-    MultiFetcher(List<DataFetcher<Data>> fetchers, Pool<List<Throwable>> throwableListPool) {
+    MultiFetcher(@NonNull List<DataFetcher<Data>> fetchers,
+        @NonNull Pool<List<Throwable>> throwableListPool) {
       this.throwableListPool = throwableListPool;
       Preconditions.checkNotEmpty(fetchers);
       this.fetchers = fetchers;
@@ -90,7 +91,7 @@ public String toString() {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super Data> callback) {
+    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       this.priority = priority;
       this.callback = callback;
       exceptions = throwableListPool.acquire();
@@ -128,7 +129,7 @@ public DataSource getDataSource() {
     }
 
     @Override
-    public void onDataReady(Data data) {
+    public void onDataReady(@Nullable Data data) {
       if (data != null) {
         callback.onDataReady(data);
       } else {
@@ -137,7 +138,7 @@ public void onDataReady(Data data) {
     }
 
     @Override
-    public void onLoadFailed(Exception e) {
+    public void onLoadFailed(@NonNull Exception e) {
       Preconditions.checkNotNull(exceptions).add(e);
       startNextOrFail();
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
index eb903fab3..a286bc09d 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
@@ -28,53 +28,55 @@
   private final Set<Entry<?, ?>> alreadyUsedEntries = new HashSet<>();
   private final Pool<List<Throwable>> throwableListPool;
 
-  public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
+  public MultiModelLoaderFactory(@NonNull Pool<List<Throwable>> throwableListPool) {
     this(throwableListPool, DEFAULT_FACTORY);
   }
 
   @VisibleForTesting
-  MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool,
-      Factory factory) {
+  MultiModelLoaderFactory(@NonNull Pool<List<Throwable>> throwableListPool,
+      @NonNull Factory factory) {
     this.throwableListPool = throwableListPool;
     this.factory = factory;
   }
 
   synchronized <Model, Data> void append(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     add(modelClass, dataClass, factory, /*append=*/ true);
   }
 
   synchronized <Model, Data> void prepend(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     add(modelClass, dataClass, factory, /*append=*/ false);
   }
 
   private <Model, Data> void add(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory,
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory,
       boolean append) {
     Entry<Model, Data> entry = new Entry<>(modelClass, dataClass, factory);
     entries.add(append ? entries.size() : 0, entry);
   }
 
+  @NonNull
   synchronized <Model, Data> List<ModelLoaderFactory<? extends Model, ? extends Data>> replace(
-      Class<Model> modelClass,
-      Class<Data> dataClass,
-      ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass,
+      @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
     List<ModelLoaderFactory<? extends Model, ? extends Data>> removed =
         remove(modelClass, dataClass);
     append(modelClass, dataClass, factory);
     return removed;
   }
 
+  @NonNull
   synchronized <Model, Data> List<ModelLoaderFactory<? extends Model, ? extends Data>> remove(
-      Class<Model> modelClass,
-      Class<Data> dataClass) {
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass) {
     List<ModelLoaderFactory<? extends Model, ? extends Data>> factories = new ArrayList<>();
     for (Iterator<Entry<?, ?>> iterator = entries.iterator(); iterator.hasNext(); ) {
       Entry<?, ?> entry = iterator.next();
@@ -86,7 +88,8 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
     return factories;
   }
 
-  synchronized <Model> List<ModelLoader<Model, ?>> build(Class<Model> modelClass) {
+  @NonNull
+  synchronized <Model> List<ModelLoader<Model, ?>> build(@NonNull Class<Model> modelClass) {
     try {
       List<ModelLoader<Model, ?>> loaders = new ArrayList<>();
       for (Entry<?, ?> entry : entries) {
@@ -111,7 +114,8 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
     }
   }
 
-  synchronized List<Class<?>> getDataClasses(Class<?> modelClass) {
+  @NonNull
+  synchronized List<Class<?>> getDataClasses(@NonNull Class<?> modelClass) {
     List<Class<?>> result = new ArrayList<>();
     for (Entry<?, ?> entry : entries) {
       if (!result.contains(entry.dataClass) && entry.handles(modelClass)) {
@@ -121,8 +125,9 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
     return result;
   }
 
-  public synchronized <Model, Data> ModelLoader<Model, Data> build(Class<Model> modelClass,
-      Class<Data> dataClass) {
+  @NonNull
+  public synchronized <Model, Data> ModelLoader<Model, Data> build(@NonNull Class<Model> modelClass,
+      @NonNull Class<Data> dataClass) {
     try {
       List<ModelLoader<Model, Data>> loaders = new ArrayList<>();
       boolean ignoredAnyEntries = false;
@@ -162,16 +167,19 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
     }
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
-  private <Model, Data> ModelLoaderFactory<Model, Data> getFactory(Entry<?, ?> entry) {
+  private <Model, Data> ModelLoaderFactory<Model, Data> getFactory(@NonNull Entry<?, ?> entry) {
     return (ModelLoaderFactory<Model, Data>) entry.factory;
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
-  private <Model, Data> ModelLoader<Model, Data> build(Entry<?, ?> entry) {
+  private <Model, Data> ModelLoader<Model, Data> build(@NonNull Entry<?, ?> entry) {
     return (ModelLoader<Model, Data>) Preconditions.checkNotNull(entry.factory.build(this));
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
   private static <Model, Data> ModelLoader<Model, Data> emptyModelLoader() {
     return (ModelLoader<Model, Data>) EMPTY_MODEL_LOADER;
@@ -183,32 +191,33 @@ public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
     @Synthetic final ModelLoaderFactory<? extends Model, ? extends Data> factory;
 
     public Entry(
-        Class<Model> modelClass,
-        Class<Data> dataClass,
-        ModelLoaderFactory<? extends Model, ? extends Data> factory) {
+        @NonNull Class<Model> modelClass,
+        @NonNull Class<Data> dataClass,
+        @NonNull ModelLoaderFactory<? extends Model, ? extends Data> factory) {
       this.modelClass = modelClass;
       this.dataClass = dataClass;
       this.factory = factory;
     }
 
-    public boolean handles(Class<?> modelClass, Class<?> dataClass) {
+    public boolean handles(@NonNull Class<?> modelClass, @NonNull Class<?> dataClass) {
       return handles(modelClass) && this.dataClass.isAssignableFrom(dataClass);
     }
 
-    public boolean handles(Class<?> modelClass) {
+    public boolean handles(@NonNull Class<?> modelClass) {
       return this.modelClass.isAssignableFrom(modelClass);
     }
   }
 
   static class Factory {
+    @NonNull
     public <Model, Data> MultiModelLoader<Model, Data> build(
-        List<ModelLoader<Model, Data>> modelLoaders, Pool<List<Throwable>> throwableListPool) {
+        @NonNull List<ModelLoader<Model, Data>> modelLoaders,
+        @NonNull Pool<List<Throwable>> throwableListPool) {
       return new MultiModelLoader<>(modelLoaders, throwableListPool);
     }
   }
 
   private static class EmptyModelLoader implements ModelLoader<Object, Object> {
-
     @Synthetic
     EmptyModelLoader() { }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
index 7d1e49153..5ede18bb8 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
@@ -67,6 +67,7 @@ public StreamFactory(Resources resources) {
       this.resources = resources;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Integer, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new ResourceLoader<>(resources, multiFactory.build(Uri.class, InputStream.class));
@@ -90,6 +91,7 @@ public FileDescriptorFactory(Resources resources) {
       this.resources = resources;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Integer, ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory) {
       return new ResourceLoader<>(
@@ -113,6 +115,7 @@ public UriFactory(Resources resources) {
       this.resources = resources;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Integer, Uri> build(MultiModelLoaderFactory multiFactory) {
       return new ResourceLoader<>(resources, UnitModelLoader.<Uri>getInstance());
diff --git a/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java b/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
index 85425979c..26e2c95ec 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
@@ -62,6 +62,7 @@ private static Uri toFileUri(String path) {
    */
   public static class StreamFactory implements ModelLoaderFactory<String, InputStream> {
 
+    @NonNull
     @Override
     public ModelLoader<String, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new StringLoader<>(multiFactory.build(Uri.class, InputStream.class));
@@ -79,6 +80,7 @@ public void teardown() {
   public static class FileDescriptorFactory
       implements ModelLoaderFactory<String, ParcelFileDescriptor> {
 
+    @NonNull
     @Override
     public ModelLoader<String, ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory) {
       return new StringLoader<>(multiFactory.build(Uri.class, ParcelFileDescriptor.class));
diff --git a/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
index c59f2dd0a..4ca9dd16a 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
@@ -50,7 +50,8 @@ public boolean handles(@NonNull Model model) {
     }
 
     @Override
-    public void loadData(Priority priority, DataCallback<? super Model> callback) {
+    public void loadData(@NonNull Priority priority,
+        @NonNull DataCallback<? super Model> callback) {
       callback.onDataReady(resource);
     }
 
@@ -100,6 +101,7 @@ public Factory() {
       // Intentionally empty.
     }
 
+    @NonNull
     @Override
     public ModelLoader<Model, Model> build(MultiModelLoaderFactory multiFactory) {
       return UnitModelLoader.getInstance();
diff --git a/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java b/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java
index 51277b441..3b02a4902 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/UriLoader.java
@@ -79,6 +79,7 @@ public StreamFactory(ContentResolver contentResolver) {
       return new StreamLocalUriFetcher(contentResolver, uri);
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new UriLoader<>(this);
@@ -108,6 +109,7 @@ public FileDescriptorFactory(ContentResolver contentResolver) {
       return new FileDescriptorLocalUriFetcher(contentResolver, uri);
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory) {
       return new UriLoader<>(this);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/UrlUriLoader.java b/library/src/main/java/com/bumptech/glide/load/model/UrlUriLoader.java
index 931ac8649..f51b8698f 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/UrlUriLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/UrlUriLoader.java
@@ -50,6 +50,7 @@ public boolean handles(@NonNull Uri uri) {
    */
   public static class StreamFactory implements ModelLoaderFactory<Uri, InputStream> {
 
+    @NonNull
     @Override
     public ModelLoader<Uri, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new UrlUriLoader<>(multiFactory.build(GlideUrl.class, InputStream.class));
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
index 90bfbcc6f..e149e1916 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpGlideUrlLoader.java
@@ -66,6 +66,7 @@ public boolean handles(@NonNull GlideUrl model) {
   public static class Factory implements ModelLoaderFactory<GlideUrl, InputStream> {
     private final ModelCache<GlideUrl, GlideUrl> modelCache = new ModelCache<>(500);
 
+    @NonNull
     @Override
     public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new HttpGlideUrlLoader(modelCache);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/HttpUriLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpUriLoader.java
index 056750926..7ff6639b2 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/HttpUriLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/HttpUriLoader.java
@@ -44,6 +44,7 @@ public boolean handles(@NonNull Uri model) {
    */
   public static class Factory implements ModelLoaderFactory<Uri, InputStream> {
 
+    @NonNull
     @Override
     public ModelLoader<Uri, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new HttpUriLoader(multiFactory.build(GlideUrl.class, InputStream.class));
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreImageThumbLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreImageThumbLoader.java
index fdce945ad..aba0fe3cf 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreImageThumbLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreImageThumbLoader.java
@@ -51,6 +51,7 @@ public Factory(Context context) {
       this.context = context;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new MediaStoreImageThumbLoader(context);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
index a2862cf02..678961ed0 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/MediaStoreVideoThumbLoader.java
@@ -65,6 +65,7 @@ public Factory(Context context) {
       this.context = context;
     }
 
+    @NonNull
     @Override
     public ModelLoader<Uri, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new MediaStoreVideoThumbLoader(context);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/stream/UrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/stream/UrlLoader.java
index a2ae62eff..c3995affa 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/stream/UrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/stream/UrlLoader.java
@@ -40,6 +40,7 @@ public boolean handles(@NonNull URL model) {
    */
   public static class StreamFactory implements ModelLoaderFactory<URL, InputStream> {
 
+    @NonNull
     @Override
     public ModelLoader<URL, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new UrlLoader(multiFactory.build(GlideUrl.class, InputStream.class));
diff --git a/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
index 076661dfa..ac417c13f 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.provider;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 import com.bumptech.glide.util.MultiClassKey;
@@ -16,7 +17,7 @@
       new ArrayMap<>();
 
   @Nullable
-  public List<Class<?>> get(Class<?> modelClass, Class<?> resourceClass) {
+  public List<Class<?>> get(@NonNull Class<?> modelClass, @NonNull Class<?> resourceClass) {
     MultiClassKey key = resourceClassKeyRef.getAndSet(null);
     if (key == null) {
       key = new MultiClassKey(modelClass, resourceClass);
@@ -25,13 +26,14 @@
     }
     final List<Class<?>> result;
     synchronized (registeredResourceClassCache) {
-       result = registeredResourceClassCache.get(key);
+      result = registeredResourceClassCache.get(key);
     }
     resourceClassKeyRef.set(key);
     return result;
   }
 
-  public void put(Class<?> modelClass, Class<?> resourceClass, List<Class<?>> resourceClasses) {
+  public void put(@NonNull Class<?> modelClass, @NonNull Class<?> resourceClass,
+      @NonNull List<Class<?>> resourceClasses) {
     synchronized (registeredResourceClassCache) {
       registeredResourceClassCache
           .put(new MultiClassKey(modelClass, resourceClass), resourceClasses);
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index 3f0e2cb0d..a45a265dd 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -122,6 +122,7 @@
    * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions sizeMultiplierOf(
       @FloatRange(from = 0, to = 1) float sizeMultiplier) {
@@ -131,6 +132,7 @@ public static RequestOptions sizeMultiplierOf(
   /**
    * Returns a {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {
     return new RequestOptions().diskCacheStrategy(diskCacheStrategy);
@@ -140,6 +142,7 @@ public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy disk
    * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions priorityOf(@NonNull Priority priority) {
     return new RequestOptions().priority(priority);
@@ -148,6 +151,7 @@ public static RequestOptions priorityOf(@NonNull Priority priority) {
   /**
    * Returns a {@link RequestOptions} object with {@link #placeholder(Drawable)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
     return new RequestOptions().placeholder(placeholder);
@@ -156,6 +160,7 @@ public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
   /**
    * Returns a {@link RequestOptions} object with {@link #placeholder(int)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions placeholderOf(@DrawableRes int placeholderId) {
     return new RequestOptions().placeholder(placeholderId);
@@ -164,6 +169,7 @@ public static RequestOptions placeholderOf(@DrawableRes int placeholderId) {
   /**
    * Returns a {@link RequestOptions} object with {@link #error(Drawable)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
     return new RequestOptions().error(errorDrawable);
@@ -172,6 +178,7 @@ public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
   /**
    * Returns a {@link RequestOptions} object with {@link #error(int)}} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions errorOf(@DrawableRes int errorId) {
     return new RequestOptions().error(errorId);
@@ -180,6 +187,7 @@ public static RequestOptions errorOf(@DrawableRes int errorId) {
   /**
    * Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     if (skipMemoryCache) {
@@ -199,6 +207,7 @@ public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * Returns a {@link RequestOptions} object with {@link #override(int, int)}} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions overrideOf(
       @IntRange(from = 0) int width,
@@ -211,6 +220,7 @@ public static RequestOptions overrideOf(
    * height are the given size.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions overrideOf(@IntRange(from = 0) int size) {
     return overrideOf(size, size);
@@ -219,6 +229,7 @@ public static RequestOptions overrideOf(@IntRange(from = 0) int size) {
   /**
    * Returns a {@link RequestOptions} object with {@link #signature} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions signatureOf(@NonNull Key signature) {
     return new RequestOptions().signature(signature);
@@ -227,6 +238,7 @@ public static RequestOptions signatureOf(@NonNull Key signature) {
   /**
    * Returns a {@link RequestOptions} object with {@link #fitCenter()} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions fitCenterTransform() {
     if (fitCenterOptions == null) {
@@ -241,6 +253,7 @@ public static RequestOptions fitCenterTransform() {
    * Returns a {@link RequestOptions} object with {@link #centerInside()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions centerInsideTransform() {
     if (centerInsideOptions == null) {
@@ -255,6 +268,7 @@ public static RequestOptions centerInsideTransform() {
    * Returns a {@link RequestOptions} object with {@link #centerCrop()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions centerCropTransform() {
     if (centerCropOptions == null) {
@@ -269,6 +283,7 @@ public static RequestOptions centerCropTransform() {
    * Returns a {@link RequestOptions} object with {@link RequestOptions#circleCrop()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions circleCropTransform() {
     if (circleCropOptions == null) {
@@ -283,6 +298,7 @@ public static RequestOptions circleCropTransform() {
    * Returns a {@link RequestOptions} object with {@link #transform(Transformation)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
     return new RequestOptions().transform(transformation);
@@ -292,6 +308,7 @@ public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> tra
    * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
    */
   @SuppressWarnings("WeakerAccess")
+  @NonNull
   @CheckResult
   public static RequestOptions noTransformation() {
     if (noTransformOptions == null) {
@@ -306,6 +323,7 @@ public static RequestOptions noTransformation() {
    * Returns a {@link RequestOptions} object with the given {@link Option} set via
    * {@link #set(Option, Object)}.
    */
+  @NonNull
   @CheckResult
   public static <T> RequestOptions option(@NonNull Option<T> option, @NonNull T value) {
     return new RequestOptions().set(option, value);
@@ -314,6 +332,7 @@ public static RequestOptions noTransformation() {
   /**
    * Returns a {@link RequestOptions} object with {@link #decode(Class)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
     return new RequestOptions().decode(resourceClass);
@@ -323,6 +342,7 @@ public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
    * Returns a {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions formatOf(@NonNull DecodeFormat format) {
     return new RequestOptions().format(format);
@@ -332,6 +352,7 @@ public static RequestOptions formatOf(@NonNull DecodeFormat format) {
    * Returns a {@link RequestOptions} object with {@link #frame(long)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions frameOf(@IntRange(from = 0) long frameTimeMicros) {
     return new RequestOptions().frame(frameTimeMicros);
@@ -341,6 +362,7 @@ public static RequestOptions frameOf(@IntRange(from = 0) long frameTimeMicros) {
    * Returns a {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
     return new RequestOptions().downsample(strategy);
@@ -349,6 +371,7 @@ public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy)
   /**
    * Returns a {@link RequestOptions} object with {@link #timeout(int)} set.
    */
+  @NonNull
   @CheckResult
   public static RequestOptions timeoutOf(@IntRange(from = 0) int timeout) {
     return new RequestOptions().timeout(timeout);
@@ -359,6 +382,7 @@ public static RequestOptions timeoutOf(@IntRange(from = 0) int timeout) {
    * #encodeQuality(int)} called with the given quality.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions encodeQualityOf(@IntRange(from = 0, to = 100) int quality) {
     return new RequestOptions().encodeQuality(quality);
@@ -369,6 +393,7 @@ public static RequestOptions encodeQualityOf(@IntRange(from = 0, to = 100) int q
    * #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
     return new RequestOptions().encodeFormat(format);
@@ -379,6 +404,7 @@ public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat forma
    * called.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @NonNull
   @CheckResult
   public static RequestOptions noAnimation() {
     if (noAnimationOptions == null) {
@@ -403,6 +429,7 @@ private static boolean isSet(int fields, int flag) {
    *                       loading the resource.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions sizeMultiplier(@FloatRange(from = 0, to = 1) float sizeMultiplier) {
     if (isAutoCloneEnabled) {
@@ -430,6 +457,7 @@ public RequestOptions sizeMultiplier(@FloatRange(from = 0, to = 1) float sizeMul
    * <p>If both this method and {@link #useAnimationPool(boolean)} are set, this method will be
    * preferred and {@link #useAnimationPool(boolean)} will be ignored.
    */
+  @NonNull
   @CheckResult
   public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (isAutoCloneEnabled) {
@@ -455,6 +483,7 @@ public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
    * {@link #useUnlimitedSourceGeneratorsPool(boolean)} will be preferred and this method will be
    * ignored.
    */
+  @NonNull
   @CheckResult
   public RequestOptions useAnimationPool(boolean flag) {
     if (isAutoCloneEnabled) {
@@ -471,6 +500,7 @@ public RequestOptions useAnimationPool(boolean flag) {
    *
    * If set to true, will only load an item if found in the cache, and will not fetch from source.
    */
+  @NonNull
   @CheckResult
   public RequestOptions onlyRetrieveFromCache(boolean flag) {
     if (isAutoCloneEnabled) {
@@ -497,6 +527,7 @@ public RequestOptions onlyRetrieveFromCache(boolean flag) {
    * @param strategy The strategy to use.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (isAutoCloneEnabled) {
@@ -514,6 +545,7 @@ public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
    * @param priority A priority.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions priority(@NonNull Priority priority) {
     if (isAutoCloneEnabled) {
@@ -532,6 +564,7 @@ public RequestOptions priority(@NonNull Priority priority) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions placeholder(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
@@ -551,6 +584,7 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a placeholder
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions placeholder(@DrawableRes int resourceId) {
     if (isAutoCloneEnabled) {
@@ -576,6 +610,7 @@ public RequestOptions placeholder(@DrawableRes int resourceId) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions fallback(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
@@ -601,6 +636,7 @@ public RequestOptions fallback(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a fallback.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions fallback(@DrawableRes int resourceId) {
     if (isAutoCloneEnabled) {
@@ -619,6 +655,7 @@ public RequestOptions fallback(@DrawableRes int resourceId) {
    * @param drawable The drawable to display.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions error(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
@@ -637,6 +674,7 @@ public RequestOptions error(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a placeholder.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions error(@DrawableRes int resourceId) {
     if (isAutoCloneEnabled) {
@@ -666,6 +704,7 @@ public RequestOptions error(@DrawableRes int resourceId) {
    * @param theme The theme to use when loading Drawables.
    * @return this request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions theme(@Nullable Resources.Theme theme) {
     if (isAutoCloneEnabled) {
@@ -687,6 +726,7 @@ public RequestOptions theme(@Nullable Resources.Theme theme) {
    * @param skip True to allow the resource to skip the memory cache.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions skipMemoryCache(boolean skip) {
     if (isAutoCloneEnabled) {
@@ -708,6 +748,7 @@ public RequestOptions skipMemoryCache(boolean skip) {
    * @param height The height in pixels to use to load the resource.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions override(int width, int height) {
     if (isAutoCloneEnabled) {
@@ -729,6 +770,7 @@ public RequestOptions override(int width, int height) {
    * @param size The width and height to use.
    * @return This request builder.
    */
+  @NonNull
   @CheckResult
   public RequestOptions override(int size) {
     return override(size, size);
@@ -745,6 +787,7 @@ public RequestOptions override(int size) {
    * @return This request builder.
    * @see com.bumptech.glide.signature.ObjectKey
    */
+  @NonNull
   @CheckResult
   public RequestOptions signature(@NonNull Key signature) {
     if (isAutoCloneEnabled) {
@@ -785,6 +828,7 @@ public RequestOptions clone() {
     }
   }
 
+  @NonNull
   @CheckResult
   public <T> RequestOptions set(@NonNull Option<T> option, @NonNull T value) {
     if (isAutoCloneEnabled) {
@@ -797,6 +841,7 @@ public RequestOptions clone() {
     return selfOrThrowIfLocked();
   }
 
+  @NonNull
   @CheckResult
   public RequestOptions decode(@NonNull Class<?> resourceClass) {
     if (isAutoCloneEnabled) {
@@ -824,6 +869,7 @@ public final boolean isLocked() {
    * Sets the value for key
    * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
    */
+  @NonNull
   @CheckResult
   public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
@@ -833,6 +879,7 @@ public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
    * Sets the value for key
    * {@link BitmapEncoder#COMPRESSION_QUALITY}.
    */
+  @NonNull
   @CheckResult
   public RequestOptions encodeQuality(@IntRange(from = 0, to = 100) int quality) {
     return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
@@ -848,6 +895,7 @@ public RequestOptions encodeQuality(@IntRange(from = 0, to = 100) int quality) {
    * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
    *                        Android framework implementation return a representative frame.
    */
+  @NonNull
   @CheckResult
   public RequestOptions frame(@IntRange(from = 0) long frameTimeMicros) {
     return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);
@@ -875,6 +923,7 @@ public RequestOptions frame(@IntRange(from = 0) long frameTimeMicros) {
    * @see Downsampler#DECODE_FORMAT
    * @see GifOptions#DECODE_FORMAT
    */
+  @NonNull
   @CheckResult
   public RequestOptions format(@NonNull DecodeFormat format) {
     Preconditions.checkNotNull(format);
@@ -899,6 +948,7 @@ public RequestOptions format(@NonNull DecodeFormat format) {
    * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
    * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
    */
+  @NonNull
   @CheckResult
   public RequestOptions disallowHardwareConfig() {
     return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
@@ -911,6 +961,7 @@ public RequestOptions disallowHardwareConfig() {
    * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
    * is replaced or skipped because of your configuration, this option may be ignored.
    */
+  @NonNull
   @CheckResult
   public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
     return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));
@@ -927,6 +978,7 @@ public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
    * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
    * @param timeoutMs The read and write timeout in milliseconds.
    */
+  @NonNull
   @CheckResult
   public RequestOptions timeout(@IntRange(from = 0) int timeoutMs) {
     return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
@@ -941,6 +993,7 @@ public RequestOptions timeout(@IntRange(from = 0) int timeoutMs) {
    * @see #optionalTransform(Class, Transformation)
    * @see #centerCrop()
    */
+  @NonNull
   @CheckResult
   public RequestOptions optionalCenterCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
@@ -955,6 +1008,7 @@ public RequestOptions optionalCenterCrop() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public RequestOptions centerCrop() {
     return transform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
@@ -971,6 +1025,7 @@ public RequestOptions centerCrop() {
    * @see #optionalTransform(Class, Transformation)
    * @see #fitCenter()
    */
+  @NonNull
   @CheckResult
   public RequestOptions optionalFitCenter() {
     return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
@@ -987,6 +1042,7 @@ public RequestOptions optionalFitCenter() {
    * @see #transform(Class, Transformation)
    * @see #optionalFitCenter()
    */
+  @NonNull
   @CheckResult
   public RequestOptions fitCenter() {
     return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
@@ -1002,6 +1058,7 @@ public RequestOptions fitCenter() {
    * @see #optionalTransform(Class, Transformation)
    * @see #centerInside()
    */
+  @NonNull
   @CheckResult
   public RequestOptions optionalCenterInside() {
     return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
@@ -1017,6 +1074,7 @@ public RequestOptions optionalCenterInside() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterInside()
    */
+  @NonNull
   @CheckResult
   public RequestOptions centerInside() {
     return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
@@ -1030,6 +1088,7 @@ public RequestOptions centerInside() {
    * @see #optionalTransform(Transformation)
    * @see #circleCrop()
    */
+  @NonNull
   @CheckResult
   public RequestOptions optionalCircleCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
@@ -1044,6 +1103,7 @@ public RequestOptions optionalCircleCrop() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterCrop()
    */
+  @NonNull
   @CheckResult
   public RequestOptions circleCrop() {
     return transform(DownsampleStrategy.CENTER_INSIDE, new CircleCrop());
@@ -1052,8 +1112,9 @@ public RequestOptions circleCrop() {
   // calling optionalTransform() on the result of clone() requires greater access.
   // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings({"WeakerAccess", "CheckResult"})
-  final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
-      Transformation<Bitmap> transformation) {
+  @NonNull
+  final RequestOptions optionalTransform(@NonNull DownsampleStrategy downsampleStrategy,
+      @NonNull Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
       return clone().optionalTransform(downsampleStrategy, transformation);
     }
@@ -1065,9 +1126,10 @@ final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
   // calling transform() on the result of clone() requires greater access.
   // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings({"WeakerAccess", "CheckResult"})
+  @NonNull
   @CheckResult
-  final RequestOptions transform(DownsampleStrategy downsampleStrategy,
-      Transformation<Bitmap> transformation) {
+  final RequestOptions transform(@NonNull DownsampleStrategy downsampleStrategy,
+      @NonNull Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
       return clone().transform(downsampleStrategy, transformation);
     }
@@ -1076,19 +1138,22 @@ final RequestOptions transform(DownsampleStrategy downsampleStrategy,
     return transform(transformation);
   }
 
+  @NonNull
   private RequestOptions scaleOnlyTransform(
-      DownsampleStrategy strategy, Transformation<Bitmap> transformation) {
+      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
     return scaleOnlyTransform(strategy, transformation, true /*isTransformationRequired*/);
   }
 
+  @NonNull
   private RequestOptions optionalScaleOnlyTransform(
-      DownsampleStrategy strategy, Transformation<Bitmap> transformation) {
+      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
     return scaleOnlyTransform(strategy, transformation, false /*isTransformationRequired*/);
   }
 
+  @NonNull
   private RequestOptions scaleOnlyTransform(
-      DownsampleStrategy strategy,
-      Transformation<Bitmap> transformation,
+      @NonNull DownsampleStrategy strategy,
+      @NonNull Transformation<Bitmap> transformation,
       boolean isTransformationRequired) {
     RequestOptions result = isTransformationRequired
           ? transform(strategy, transformation) : optionalTransform(strategy, transformation);
@@ -1111,6 +1176,7 @@ private RequestOptions scaleOnlyTransform(
    */
   // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings("CheckResult")
+  @NonNull
   @CheckResult
   public RequestOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return transform(transformation, /*isRequired=*/ true);
@@ -1131,6 +1197,7 @@ public RequestOptions transform(@NonNull Transformation<Bitmap> transformation)
    */
   // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings({"unchecked", "varargs", "CheckResult"})
+  @NonNull
   @CheckResult
   public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
     return transform(new MultiTransformation<>(transformations), /*isRequired=*/ true);
@@ -1150,11 +1217,13 @@ public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformati
    */
   // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings("CheckResult")
+  @NonNull
   @CheckResult
   public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return transform(transformation, /*isRequired=*/ false);
   }
 
+  @NonNull
   private RequestOptions transform(
       @NonNull Transformation<Bitmap> transformation, boolean isRequired) {
     if (isAutoCloneEnabled) {
@@ -1191,12 +1260,14 @@ private RequestOptions transform(
    * @param resourceClass  The type of resource to transform.
    * @param transformation The {@link Transformation} to apply.
    */
+  @NonNull
   @CheckResult
   public <T> RequestOptions optionalTransform(
       @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
     return transform(resourceClass, transformation, /*isRequired=*/ false);
   }
 
+  @NonNull
   private <T> RequestOptions transform(
       @NonNull Class<T> resourceClass,
       @NonNull Transformation<T> transformation,
@@ -1233,6 +1304,7 @@ private RequestOptions transform(
    */
   // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings("CheckResult")
+  @NonNull
   @CheckResult
   public <T> RequestOptions transform(
       @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
@@ -1244,6 +1316,7 @@ private RequestOptions transform(
    * resource classes and allows unknown resource types to be transformed without throwing an
    * exception.
    */
+  @NonNull
   @CheckResult
   public RequestOptions dontTransform() {
     if (isAutoCloneEnabled) {
@@ -1269,11 +1342,13 @@ public RequestOptions dontTransform() {
    */
   // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
   @SuppressWarnings("CheckResult")
+  @NonNull
   @CheckResult
   public RequestOptions dontAnimate() {
     return set(GifOptions.DISABLE_ANIMATION, true);
   }
 
+  @NonNull
   @CheckResult
   public RequestOptions apply(@NonNull RequestOptions other) {
     if (isAutoCloneEnabled) {
@@ -1419,6 +1494,7 @@ public int hashCode() {
    *
    * <p> Once locked, the only way to unlock is to use {@link #clone()} </p>
    */
+  @NonNull
   @SuppressWarnings("unchecked")
   public RequestOptions lock() {
     isLocked = true;
@@ -1434,6 +1510,7 @@ public RequestOptions lock() {
    * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects
    * are mutable and are not locked.
    */
+  @NonNull
   public RequestOptions autoClone() {
     if (isLocked && !isAutoCloneEnabled) {
       throw new IllegalStateException("You cannot auto lock an already locked options object"
@@ -1443,6 +1520,7 @@ public RequestOptions autoClone() {
     return lock();
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
   private RequestOptions selfOrThrowIfLocked() {
     if (isLocked) {
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 8154a27a0..1cc122df3 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -4,6 +4,7 @@
 import android.content.res.Resources.Theme;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.Pools;
 import android.util.Log;
@@ -191,6 +192,7 @@ private void init(
     status = Status.PENDING;
   }
 
+  @NonNull
   @Override
   public StateVerifier getVerifier() {
     return stateVerifier;
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java b/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java
index 3854381db..12e641dc5 100644
--- a/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java
+++ b/library/src/main/java/com/bumptech/glide/util/pool/FactoryPools.java
@@ -18,7 +18,7 @@
   private static final int DEFAULT_POOL_SIZE = 20;
   private static final Resetter<Object> EMPTY_RESETTER = new Resetter<Object>() {
     @Override
-    public void reset(Object object) {
+    public void reset(@NonNull Object object) {
       // Do nothing.
     }
   };
@@ -35,7 +35,8 @@ private FactoryPools() { }
    *
    * @param <T> The type of object the pool will contains.
    */
-  public static <T extends Poolable> Pool<T> simple(int size, Factory<T> factory) {
+  @NonNull
+  public static <T extends Poolable> Pool<T> simple(int size, @NonNull Factory<T> factory) {
     return build(new SimplePool<T>(size), factory);
   }
 
@@ -49,7 +50,8 @@ private FactoryPools() { }
    *
    * @param <T> The type of object the pool will contains.
    */
-  public static <T extends Poolable> Pool<T> threadSafe(int size, Factory<T> factory) {
+  @NonNull
+  public static <T extends Poolable> Pool<T> threadSafe(int size, @NonNull Factory<T> factory) {
     return build(new SynchronizedPool<T>(size), factory);
   }
 
@@ -62,6 +64,7 @@ private FactoryPools() { }
    *
    * @param <T> The type of object that the {@link List Lists} will contain.
    */
+  @NonNull
   public static <T> Pool<List<T>> threadSafeList() {
     return threadSafeList(DEFAULT_POOL_SIZE);
   }
@@ -77,29 +80,35 @@ private FactoryPools() { }
    */
   // Public API.
   @SuppressWarnings("WeakerAccess")
+  @NonNull
   public static <T> Pool<List<T>> threadSafeList(int size) {
     return build(new SynchronizedPool<List<T>>(size), new Factory<List<T>>() {
+      @NonNull
       @Override
       public List<T> create() {
         return new ArrayList<>();
       }
     }, new Resetter<List<T>>() {
       @Override
-      public void reset(List<T> object) {
+      public void reset(@NonNull List<T> object) {
         object.clear();
       }
     });
   }
 
-  private static <T extends Poolable> Pool<T> build(Pool<T> pool, Factory<T> factory) {
+  @NonNull
+  private static <T extends Poolable> Pool<T> build(@NonNull Pool<T> pool,
+      @NonNull Factory<T> factory) {
     return build(pool, factory, FactoryPools.<T>emptyResetter());
   }
 
-  private static <T> Pool<T> build(Pool<T> pool, Factory<T> factory,
-      Resetter<T> resetter) {
+  @NonNull
+  private static <T> Pool<T> build(@NonNull Pool<T> pool, @NonNull Factory<T> factory,
+      @NonNull Resetter<T> resetter) {
     return new FactoryPool<>(pool, factory, resetter);
   }
 
+  @NonNull
   @SuppressWarnings("unchecked")
   private static <T> Resetter<T> emptyResetter() {
     return (Resetter<T>) EMPTY_RESETTER;
@@ -120,7 +129,7 @@ public void reset(List<T> object) {
    * @param <T> The type of Object that will be reset.
    */
   public interface Resetter<T> {
-    void reset(T object);
+    void reset(@NonNull T object);
   }
 
   /**
@@ -128,6 +137,7 @@ public void reset(List<T> object) {
    * an object pool.
    */
   public interface Poolable {
+    @NonNull
     StateVerifier getVerifier();
   }
 
@@ -136,7 +146,7 @@ public void reset(List<T> object) {
     private final Resetter<T> resetter;
     private final Pool<T> pool;
 
-    FactoryPool(Pool<T> pool, Factory<T> factory, Resetter<T> resetter) {
+    FactoryPool(@NonNull Pool<T> pool, @NonNull Factory<T> factory, @NonNull Resetter<T> resetter) {
       this.pool = pool;
       this.factory = factory;
       this.resetter = resetter;
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
index 7e6577dd3..79e0b40aa 100644
--- a/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
+++ b/library/src/main/java/com/bumptech/glide/util/pool/StateVerifier.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.util.pool;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.util.Synthetic;
 
 /**
@@ -11,6 +12,7 @@
   /**
    * Creates a new {@link StateVerifier} instance.
    */
+  @NonNull
   public static StateVerifier newInstance() {
     if (DEBUG) {
       return new DebugStateVerifier();
@@ -68,9 +70,9 @@ public void throwIfRecycled() {
     @Override
     void setRecycled(boolean isRecycled) {
       if (isRecycled) {
-        this.recycledAtStackTraceException = new RuntimeException("Released");
+        recycledAtStackTraceException = new RuntimeException("Released");
       } else {
-        this.recycledAtStackTraceException = null;
+        recycledAtStackTraceException = null;
       }
     }
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java b/library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
index 6665f0720..f4b3e2d4a 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/DataUrlLoaderTest.java
@@ -6,6 +6,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Base64;
 import com.bumptech.glide.Priority;
@@ -60,7 +61,7 @@
   private Options options;
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     MockitoAnnotations.initMocks(this);
     DataUrlLoader.StreamFactory factory = new DataUrlLoader.StreamFactory();
     options = new Options();
@@ -94,7 +95,7 @@ public void testDecode() throws IOException {
   }
 
   @Test
-  public void testDecodeInvalidScheme() throws IOException {
+  public void testDecodeInvalidScheme() {
     fetcher = dataUrlLoader.buildLoadData(INVALID_URL_WRONG_SCHEME1, -1, -1, options).fetcher;
     CallBack callback = new CallBack();
     fetcher.loadData(Priority.HIGH, callback);
@@ -102,7 +103,7 @@ public void testDecodeInvalidScheme() throws IOException {
   }
 
   @Test
-  public void testDecodeMissingComma() throws IOException {
+  public void testDecodeMissingComma() {
     fetcher = dataUrlLoader.buildLoadData(INVALID_URL_MISSING_COMMA, -1, -1, options).fetcher;
     CallBack callback = new CallBack();
     fetcher.loadData(Priority.HIGH, callback);
@@ -110,7 +111,7 @@ public void testDecodeMissingComma() throws IOException {
   }
 
   @Test
-  public void testDecodeWrongEncoding() throws IOException {
+  public void testDecodeWrongEncoding() {
     fetcher = dataUrlLoader.buildLoadData(INVALID_URL_WRONG_ENCODING, -1, -1, options).fetcher;
     CallBack callback = new CallBack();
     fetcher.loadData(Priority.HIGH, callback);
@@ -128,7 +129,7 @@ public void onDataReady(@Nullable Object data) {
     }
 
     @Override
-    public void onLoadFailed(Exception e) {
+    public void onLoadFailed(@NonNull Exception e) {
       this.exception = e;
     }
   }
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrModelLoader.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrModelLoader.java
index 1d5955101..a2b3d2f6e 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrModelLoader.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrModelLoader.java
@@ -26,6 +26,7 @@
   public static class Factory implements ModelLoaderFactory<Photo, InputStream> {
     private final ModelCache<Photo, GlideUrl> modelCache = new ModelCache<>(500);
 
+    @NonNull
     @Override
     public ModelLoader<Photo, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new FlickrModelLoader(
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java
index 5e4a00502..a0163074e 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyModelLoader.java
@@ -52,6 +52,7 @@ private static int getDifference(Api.GifImage gifImage, int width, int height) {
    * The default factory for {@link com.bumptech.glide.samples.giphy.GiphyModelLoader}s.
    */
   public static final class Factory implements ModelLoaderFactory<GifResult, InputStream> {
+    @NonNull
     @Override
     public ModelLoader<Api.GifResult, InputStream> build(MultiModelLoaderFactory multiFactory) {
       return new GiphyModelLoader(multiFactory.build(GlideUrl.class, InputStream.class));
diff --git a/scripts/travis_create_emulator.sh b/scripts/travis_create_emulator.sh
index 3be4a839f..997ffcdcc 100755
--- a/scripts/travis_create_emulator.sh
+++ b/scripts/travis_create_emulator.sh
@@ -5,7 +5,7 @@ set -e
 target="system-images;android-${ANDROID_TARGET};default;armeabi-v7a"
 echo y | sdkmanager --update
 echo y | sdkmanager --install $target
-avdmanager create avd --force -n test -k $target --device "Nexus 5X" -c 2000M
+avdmanager create avd --force -n test -k $target --device "Nexus 4" -c 2048M
 QEMU_AUDIO_DRV=none $ANDROID_HOME/emulator/emulator -avd test -no-window -memory 2048 &
 
 exit 0
