diff --git a/build.gradle b/build.gradle
index c689d6105..ea8d78df5 100644
--- a/build.gradle
+++ b/build.gradle
@@ -48,7 +48,8 @@ subprojects { project ->
         options.setBootstrapClasspath(files("${System.getProperty('java.home')}/lib/rt.jar"))
         // gifencoder is a legacy project that has a ton of warnings and is basically never
         // modified, so we're not going to worry about cleaning it up.
-        if ("gifencoder" != project.getName()) {
+        // Imgur uses generated code from dagger that has warnings.
+        if ("gifencoder" != project.getName() && "imgur" != project.getName()) {
           options.compilerArgs \
                 /*
                  * Treat all warnings as errors.
diff --git a/gradle.properties b/gradle.properties
index 0af4d3a62..42365c473 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -17,16 +17,16 @@ POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
 ANDROID_SUPPORT_VERSION=27.1.1
 ANDROIDX_TEST_VERSION=1.1.0-alpha4
-VOLLEY_VERSION=1.0.0
+VOLLEY_VERSION=1.1.0
 OK_HTTP_VERSION=3.9.1
-ANDROID_GRADLE_VERSION=3.1.3
-DAGGER_VERSION=2.11
+ANDROID_GRADLE_VERSION=3.2.1
+DAGGER_VERSION=2.15
 
 JUNIT_VERSION=4.13-SNAPSHOT
 # Matches the version in Google.
 MOCKITO_VERSION=1.9.5
 MOCKITO_ANDROID_VERSION=2.21.0
-ROBOLECTRIC_VERSION=3.6.1
+ROBOLECTRIC_VERSION=4.1
 MOCKWEBSERVER_VERSION=3.0.0-RC1
 TRUTH_VERSION=0.36
 JSR_305_VERSION=3.0.2
@@ -39,7 +39,7 @@ ERROR_PRONE_VERSION=2.3.1
 ERROR_PRONE_PLUGIN_VERSION=0.0.13
 VIOLATIONS_PLUGIN_VERSION=1.8
 
-COMPILE_SDK_VERSION=27
+COMPILE_SDK_VERSION=28
 TARGET_SDK_VERSION=27
 MIN_SDK_VERSION=14
 
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index bdfae965b..55f60f0fc 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -24,6 +24,7 @@
 import com.bumptech.glide.manager.DefaultConnectivityMonitorFactory;
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
@@ -204,7 +205,7 @@ public GlideBuilder setAnimationExecutor(@Nullable GlideExecutor service) {
    * Sets the default {@link RequestOptions} to use for all loads across the app.
    *
    * <p>Applying additional options with {@link
-   * RequestBuilder#apply(RequestOptions)} will override defaults
+   * RequestBuilder#apply(BaseRequestOptions)} will override defaults
    * set here.
    *
    * @param requestOptions The options to use by default.
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index a01d45500..1c19f0321 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -95,12 +95,14 @@ protected RequestBuilder(
     apply(requestManager.getDefaultRequestOptions());
   }
 
+  @SuppressLint("CheckResult")
   @SuppressWarnings("PMD.ConstructorCallsOverridableMethod")
   protected RequestBuilder(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
     this(other.glide, other.requestManager, transcodeClass, other.context);
     model = other.model;
     isModelSet = other.isModelSet;
 
+    // This is safe because it will always mutate, no one else has access to the object.
     apply(other);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 9e0cdb6c3..1a16e4a8b 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -153,7 +153,7 @@ private void updateRequestOptions(@NonNull RequestOptions toUpdate) {
    *
    * <p>The modified options will only be applied to loads started after this method is called.
    *
-   * @see RequestBuilder#apply(RequestOptions)
+   * @see RequestBuilder#apply(com.bumptech.glide.request.BaseRequestOptions)
    *
    * @return This request manager.
    */
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index bbe616a76..d6af647e4 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -81,6 +81,8 @@ public String toString() {
     @Nullable
     private List<Throwable> exceptions;
 
+    private volatile boolean isCancelled;
+
     MultiFetcher(
         @NonNull List<DataFetcher<Data>> fetchers,
         @NonNull Pool<List<Throwable>> throwableListPool) {
@@ -97,6 +99,14 @@ public void loadData(
       this.callback = callback;
       exceptions = throwableListPool.acquire();
       fetchers.get(currentIndex).loadData(priority, this);
+
+      // If a race occurred where we cancelled the fetcher in cancel() and then called loadData here
+      // immediately after, make sure that we cancel the newly started fetcher. We don't bother
+      // checking cancelled before loadData because it's not required for correctness and would
+      // require an unlikely race to be useful.
+      if (isCancelled) {
+        cancel();
+      }
     }
 
     @Override
@@ -112,6 +122,7 @@ public void cleanup() {
 
     @Override
     public void cancel() {
+      isCancelled = true;
       for (DataFetcher<Data> fetcher : fetchers) {
         fetcher.cancel();
       }
@@ -145,6 +156,9 @@ public void onLoadFailed(@NonNull Exception e) {
     }
 
     private void startNextOrFail() {
+      if (isCancelled) {
+        return;
+      }
       if (currentIndex < fetchers.size() - 1) {
         currentIndex++;
         loadData(priority, callback);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
index ede0b2baf..bc14314e6 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
@@ -57,7 +57,7 @@ public CustomTarget() {
   }
 
   /**
-   * Creates a new {@code CustomTarget} that will return the given {@code width} and {@link @code}
+   * Creates a new {@code CustomTarget} that will return the given {@code width} and {@code length}
    * as the requested size (unless overridden by
    * {@link com.bumptech.glide.request.RequestOptions#override(int)} in the request).
    *
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
index ab73d11e3..fda944cd7 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
@@ -27,7 +27,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(manifest = Config.NONE, sdk = 28)
 public class LruBitmapPoolTest {
   private static final int MAX_SIZE = 10;
   private static final Set<Bitmap.Config> ALLOWED_CONFIGS =
@@ -215,12 +215,12 @@ public void testBitmapsWithDisallowedConfigsAreIgnored() {
     assertEquals(0, strategy.numPuts);
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testBitmapsWithAllowedNullConfigsAreAllowed() {
     pool = new LruBitmapPool(100, strategy, Collections.<Bitmap.Config>singleton(null));
 
     Bitmap bitmap = createMutableBitmap();
-    Shadows.shadowOf(bitmap).setConfig(null);
+    bitmap.setConfig(null);
 
     pool.put(bitmap);
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
index 68d4a56c3..0b75ce481 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoderTest.java
@@ -17,6 +17,7 @@
 import java.io.IOException;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -26,6 +27,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
+@Ignore
 public class BitmapEncoderTest {
   private EncoderHarness harness;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
index d36b44ebd..93cd95ce6 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
@@ -31,11 +31,10 @@
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18)
+@Config(manifest = Config.NONE, sdk = 28)
 public class CenterCropTest {
   @Rule public final KeyTester keyTester = new KeyTester();
   @Mock private Resource<Bitmap> resource;
@@ -101,9 +100,9 @@ public void testDoesNotRecycleGivenResource() {
     verify(resource, never()).recycle();
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testAsksBitmapPoolForArgb8888IfInConfigIsNull() {
-    Shadows.shadowOf(bitmap).setConfig(null);
+    bitmap.setConfig(null);
 
     centerCrop.transform(context, resource, 10, 10);
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
index effaae7bf..dd1a06168 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
@@ -32,7 +32,7 @@
 import org.robolectric.shadows.ShadowBitmap;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = Config.NONE, sdk = 18, shadows = {
+@Config(manifest = Config.NONE, sdk = 28, shadows = {
     TransformationUtilsTest.AlphaShadowBitmap.class })
 public class TransformationUtilsTest {
 
@@ -162,10 +162,10 @@ public void testCenterCropReturnsGivenBitmapIfGivenBitmapExactlyMatchesGivenDime
     assertTrue(toCrop == transformed);
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testFitCenterHandlesBitmapsWithNullConfigs() {
     Bitmap toFit = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
-    Shadows.shadowOf(toFit).setConfig(null);
+    toFit.setConfig(null);
     Bitmap transformed = TransformationUtils.fitCenter(bitmapPool, toFit, 50, 50);
     assertEquals(Bitmap.Config.ARGB_8888, transformed.getConfig());
   }
@@ -220,10 +220,10 @@ public void testCenterCropSetsOutBitmapToHaveAlphaIfInBitmapHasAlpha() {
     assertTrue(result.hasAlpha());
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testCenterCropHandlesBitmapsWithNullConfigs() {
     Bitmap toTransform = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
-    Shadows.shadowOf(toTransform).setConfig(null);
+    toTransform.setConfig(null);
 
     Bitmap transformed = TransformationUtils.centerCrop(bitmapPool, toTransform, 50, 50);
 
@@ -383,10 +383,10 @@ public void testRotateImageExifReturnsGivenBitmapIfOrientationIsInvalid() {
     assertTrue(toRotate == rotated);
   }
 
-  @Test
+  @Test @Config(sdk = 19)
   public void testRotateImageExifHandlesBitmapsWithNullConfigs() {
     Bitmap toRotate = Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565);
-    Shadows.shadowOf(toRotate).setConfig(null);
+    toRotate.setConfig(null);
     Bitmap rotated = TransformationUtils.rotateImageExif(bitmapPool, toRotate,
         ExifInterface.ORIENTATION_ROTATE_180);
     assertEquals(Bitmap.Config.ARGB_8888, rotated.getConfig());
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
index 866b3ff70..dd71053bb 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/transcode/BitmapBytesTranscoderTest.java
@@ -10,6 +10,7 @@
 import com.bumptech.glide.load.engine.Resource;
 import java.nio.charset.Charset;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
@@ -18,6 +19,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
+@Ignore
 public class BitmapBytesTranscoderTest {
   private BitmapBytesTranscoderHarness harness;
 
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
index 930a9f34e..386c842de 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/DefaultConnectivityMonitorTest.java
@@ -178,7 +178,7 @@ void connect() {
 
     void broadcast() {
       Intent connected = new Intent(ConnectivityManager.CONNECTIVITY_ACTION);
-      ShadowApplication.getInstance().sendBroadcast(connected);
+      RuntimeEnvironment.application.sendBroadcast(connected);
     }
   }
 
diff --git a/samples/contacturi/lint.xml b/samples/contacturi/lint.xml
index bd2bae772..a78a6dd3b 100644
--- a/samples/contacturi/lint.xml
+++ b/samples/contacturi/lint.xml
@@ -2,4 +2,5 @@
 <lint>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
     <issue id="GradleDependency" severity="ignore"/>
+    <issue id="Autofill" severity="ignore" />
 </lint>
diff --git a/samples/flickr/lint.xml b/samples/flickr/lint.xml
index 0808ec2c6..948353b6b 100644
--- a/samples/flickr/lint.xml
+++ b/samples/flickr/lint.xml
@@ -5,4 +5,5 @@
     <issue id="IconMissingDensityFolder" severity="ignore"/>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
     <issue id="GradleDependency" severity="ignore" />
+    <issue id="Autofill" severity="ignore" />
 </lint>
diff --git a/samples/gallery/lint.xml b/samples/gallery/lint.xml
index 0808ec2c6..948353b6b 100644
--- a/samples/gallery/lint.xml
+++ b/samples/gallery/lint.xml
@@ -5,4 +5,5 @@
     <issue id="IconMissingDensityFolder" severity="ignore"/>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
     <issue id="GradleDependency" severity="ignore" />
+    <issue id="Autofill" severity="ignore" />
 </lint>
diff --git a/samples/giphy/lint.xml b/samples/giphy/lint.xml
index c02d95c38..1b9db4caa 100644
--- a/samples/giphy/lint.xml
+++ b/samples/giphy/lint.xml
@@ -4,4 +4,5 @@
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
     <issue id="GradleDependency" severity="ignore" />
+    <issue id="Autofill" severity="ignore" />
 </lint>
diff --git a/samples/imgur/lint.xml b/samples/imgur/lint.xml
index 0808ec2c6..948353b6b 100644
--- a/samples/imgur/lint.xml
+++ b/samples/imgur/lint.xml
@@ -5,4 +5,5 @@
     <issue id="IconMissingDensityFolder" severity="ignore"/>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
     <issue id="GradleDependency" severity="ignore" />
+    <issue id="Autofill" severity="ignore" />
 </lint>
diff --git a/samples/svg/lint.xml b/samples/svg/lint.xml
index 11fca2666..bc99b5604 100644
--- a/samples/svg/lint.xml
+++ b/samples/svg/lint.xml
@@ -4,4 +4,5 @@
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
     <issue id="GradleDependency" severity="ignore"/>
+    <issue id="Autofill" severity="ignore" />
 </lint>
diff --git a/scripts/upload.gradle b/scripts/upload.gradle
index 8f8d18b7b..f6425ca63 100644
--- a/scripts/upload.gradle
+++ b/scripts/upload.gradle
@@ -218,7 +218,7 @@ afterEvaluate { project ->
             // includes the release aar in archives. Since we've disabled our release variants and
             // want to include an aar, we need to manually specify the task that produces the aar
             // here.
-            archives project.tasks.bundleDebug
+            archives project.tasks.bundleDebugAar
         }
     } else if (project.plugins.hasPlugin('java')) {
         task sourcesJar(type: Jar, dependsOn: classes) {
