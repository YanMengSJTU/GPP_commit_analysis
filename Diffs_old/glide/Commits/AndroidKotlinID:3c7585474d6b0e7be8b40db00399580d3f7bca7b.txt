diff --git a/annotation/compiler/build.gradle b/annotation/compiler/build.gradle
index c579d9784..656534bf7 100644
--- a/annotation/compiler/build.gradle
+++ b/annotation/compiler/build.gradle
@@ -1,6 +1,5 @@
 import org.gradle.internal.jvm.Jvm
-import java.nio.file.Files
-import static java.nio.file.StandardCopyOption.*
+import proguard.gradle.ProGuardTask
 
 apply plugin: 'java'
 
@@ -23,73 +22,59 @@ dependencies {
     compile files(Jvm.current().getToolsJar())
 }
 
-afterEvaluate {
-    // generate file names for each step
-    def resultingClassesJar = tasks.jar.archivePath
-    def originalClassifier = tasks.jar.classifier
-    tasks.jar.classifier = 'compiled'
-    def compiledClassesJar = tasks.jar.archivePath
-    tasks.jar.classifier = 'repackaged'
-    def repackagedClassesJar = tasks.jar.archivePath
-    tasks.jar.classifier = 'proguarded'
-    def proguardedClassesJar = tasks.jar.archivePath
-    tasks.jar.classifier = originalClassifier
+def repackagedJar = file("$buildDir/intermediates/repackaged.jar")
+def proguardedJar = file("$buildDir/intermediates/proguarded.jar")
 
-    tasks.jar.doLast {
-        Files.copy(resultingClassesJar.toPath(), compiledClassesJar.toPath(), REPLACE_EXISTING)
-    }
-    // Inject a jarjar task after jar into the assemble chain.
-    // afterEvaluate is needed to get the resolved version name for the jar artifact.
-    task jarjar(dependsOn: [tasks.jar, configurations.compileOnly]) {
-        tasks.assemble.dependsOn it
+task compiledJar(type: Jar, dependsOn: classes) {
+    from sourceSets.main.output
+}
+
+// Repackage compileOnly dependencies to avoid namespace collisions.
+task jarjar(dependsOn: [tasks.compiledJar, configurations.compileOnly]) {
+    // Set up inputs and outputs to only rebuild when necessary (code change, dependency change).
+    inputs.file compiledJar
+    inputs.files configurations.compileOnly
+    outputs.file repackagedJar
 
-        // Set up inputs and outputs to only rebuild when necessary (code change, dependency change).
-        inputs.file compiledClassesJar
-        inputs.files configurations.compileOnly
-        outputs.file repackagedClassesJar
+    doFirst {
+        ant {
+            taskdef name: 'jarjar',
+                    classname: 'com.tonicsystems.jarjar.JarJarTask',
+                    classpath: configurations.jarjar.asPath
 
-        doFirst {
-            ant {
-                taskdef name: 'jarjar',
-                        classname: 'com.tonicsystems.jarjar.JarJarTask',
-                        classpath: configurations.jarjar.asPath
-                // Generate the original JAR output where it was originally expected.
-                jarjar(jarfile: repackagedClassesJar) {
-                    configurations.compileOnly.resolve().each {
-                        zipfileset(src: it.absolutePath, excludes: [
-                            'META-INF/maven/**',
-                            'META-INF/services/javax.annotation.processing.Processor'
-                        ].join(','))
-                    }
-                    zipfileset(src: tasks.jar.archivePath)
-                    def repackageIntoGlide = 'com.bumptech.glide.repackaged.@0'
-                    rule result: repackageIntoGlide, pattern: 'com.squareup.javapoet.**'
-                    rule result: repackageIntoGlide, pattern: 'com.google.auto.**'
-                    rule result: repackageIntoGlide, pattern: 'com.google.common.**'
-                    rule result: repackageIntoGlide, pattern: 'com.google.thirdparty.publicsuffix.**'
+            jarjar(jarfile: repackagedJar) {
+                configurations.compileOnly.resolve().each {
+                    zipfileset(src: it.absolutePath, excludes: [
+                        'META-INF/maven/**',
+                        'META-INF/services/javax.annotation.processing.Processor'
+                    ].join(','))
                 }
+                zipfileset(src: tasks.jar.archivePath)
+                def repackageIntoGlide = 'com.bumptech.glide.repackaged.@0'
+                rule result: repackageIntoGlide, pattern: 'com.squareup.javapoet.**'
+                rule result: repackageIntoGlide, pattern: 'com.google.auto.**'
+                rule result: repackageIntoGlide, pattern: 'com.google.common.**'
+                rule result: repackageIntoGlide, pattern: 'com.google.thirdparty.publicsuffix.**'
             }
         }
-
-        doLast {
-            Files.copy(repackagedClassesJar.toPath(), resultingClassesJar.toPath(), REPLACE_EXISTING)
-        }
     }
+}
 
-    task proguard(type: proguard.gradle.ProGuardTask, dependsOn: tasks.jarjar) {
-        tasks.assemble.dependsOn it
-        configuration 'proguard.pro'
+// Proguard repackaged dependencies to reduce the binary size.
+task proguard(type: ProGuardTask, dependsOn: tasks.jarjar) {
+    configuration 'proguard.pro'
 
-        injars repackagedClassesJar
-        outjars proguardedClassesJar
+    injars repackagedJar
+    outjars proguardedJar
 
-        libraryjars files(configurations.compile.collect())
-        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
+    libraryjars files(configurations.compile.collect())
+    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
+}
 
-        doLast {
-            Files.copy(proguardedClassesJar.toPath(), resultingClassesJar.toPath(), REPLACE_EXISTING)
-        }
-    }
+// Create the standard jar artifact based on our repackaged and proguarded jar.
+jar {
+    dependsOn proguard
+    from zipTree(proguardedJar)
 }
 
 apply from: "${rootProject.projectDir}/scripts/upload.gradle"
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 85be60dc7..372d5b005 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -24,6 +24,7 @@
 import java.util.List;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
@@ -102,6 +103,8 @@
   /** A set of method names to avoid overriding from RequestOptions. */
   private static final ImmutableSet<String> EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS =
       ImmutableSet.of("clone", "apply", "autoLock", "lock", "autoClone");
+  private static final ClassName CHECK_RESULT_CLASS_NAME =
+      ClassName.get("android.support.annotation", "CheckResult");
 
   private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
@@ -204,7 +207,7 @@ private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOver
     ParameterizedTypeName generatedRequestBuilderOfType =
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
-    return MethodSpec.overriding(methodToOverride)
+    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride)
         .returns(generatedRequestBuilderOfType)
         .addCode(CodeBlock.builder()
             .add("return ($T) super.$N(",
@@ -218,8 +221,13 @@ public String apply(VariableElement input) {
                 })
                 .join(Joiner.on(", ")))
             .add(");\n")
-            .build())
-        .build();
+            .build());
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      builder.addAnnotation(AnnotationSpec.get(mirror));
+    }
+
+    return builder.build();
   }
 
   /**
@@ -298,7 +306,10 @@ public boolean apply(AnnotationSpec input) {
                     return !input.type.equals(TypeName.get(Override.class))
                         // SafeVarargs can only be applied to final methods. GlideRequest is
                         // non-final to allow for mocking.
-                        && !input.type.equals(TypeName.get(SafeVarargs.class));
+                        && !input.type.equals(TypeName.get(SafeVarargs.class))
+                        // @CheckResult isn't applicable for RequestBuilder because there is no
+                        // autoClone() in RequestBuilder.
+                        && !input.type.equals(CHECK_RESULT_CLASS_NAME);
                   }
                 })
                 .toList()
@@ -366,6 +377,7 @@ private MethodSpec generateDownloadOnlyRequestMethod() {
         = ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(File.class));
     return MethodSpec.methodBuilder("getDownloadOnlyRequest")
         .addAnnotation(Override.class)
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .returns(generatedRequestBuilderOfFile)
         .addModifiers(Modifier.PROTECTED)
         .addStatement("return new $T<>($T.class, $N).apply($N)",
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 14aa9c5e1..209b7715b 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -28,6 +28,7 @@
 import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
@@ -75,6 +76,8 @@
   private static final String REQUEST_OPTIONS_SIMPLE_NAME = "RequestOptions";
   static final String REQUEST_OPTIONS_QUALIFIED_NAME =
       REQUEST_OPTIONS_PACKAGE_NAME + "." + REQUEST_OPTIONS_SIMPLE_NAME;
+  private static final ClassName CHECK_RESULT_CLASS_NAME =
+      ClassName.get("android.support.annotation", "CheckResult");
 
   private final ProcessingEnvironment processingEnvironment;
   private final ClassName requestOptionsName;
@@ -213,6 +216,10 @@ public String apply(VariableElement input) {
               .build());
     }
 
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      result.addAnnotation(AnnotationSpec.get(mirror));
+    }
+
     return result.build();
   }
 
@@ -291,6 +298,8 @@ public String apply(VariableElement input) {
 
     List<MethodAndStaticVar> result = new ArrayList<>();
 
+    builder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
     result.add(new MethodAndStaticVar(builder.build()));
     result.add(generateStaticMethodEquivalentForExtensionMethod(element));
 
@@ -405,6 +414,8 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
           TypeVariableName.get(typeParameterElement.getSimpleName().toString()));
     }
 
+    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
 
@@ -495,6 +506,8 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
           TypeVariableName.get(typeParameterElement.getSimpleName().toString()));
     }
 
+    methodSpecBuilder.addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build());
+
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index f31bf05f6..97ef93a87 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -23,7 +23,6 @@
 import com.bumptech.glide.provider.ResourceDecoderRegistry;
 import com.bumptech.glide.provider.ResourceEncoderRegistry;
 import com.bumptech.glide.util.pool.FactoryPools;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index d03a59c76..55b044f0a 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 
 import android.net.Uri;
+import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
@@ -329,6 +330,7 @@ protected RequestOptions getMutableOptions() {
    * builders. </p>
    */
   @SuppressWarnings("unchecked")
+  @CheckResult
   @Override
   public RequestBuilder<TranscodeType> clone() {
     try {
@@ -407,18 +409,18 @@ protected RequestOptions getMutableOptions() {
       // View's scale type.
       switch (view.getScaleType()) {
         case CENTER_CROP:
-          requestOptions.clone().optionalCenterCrop();
+          requestOptions = requestOptions.clone().optionalCenterCrop();
           break;
         case CENTER_INSIDE:
-          requestOptions.clone().optionalCenterInside();
+          requestOptions = requestOptions.clone().optionalCenterInside();
           break;
         case FIT_CENTER:
         case FIT_START:
         case FIT_END:
-          requestOptions.clone().optionalFitCenter();
+          requestOptions = requestOptions.clone().optionalFitCenter();
           break;
         case FIT_XY:
-          requestOptions.clone().optionalCenterInside();
+          requestOptions = requestOptions.clone().optionalCenterInside();
           break;
         case CENTER:
         case MATRIX:
@@ -545,6 +547,7 @@ public void run() {
    * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(Target)}.
    */
   @Deprecated
+  @CheckResult
   public <Y extends Target<File>> Y downloadOnly(Y target) {
     return getDownloadOnlyRequest().into(target);
   }
@@ -562,10 +565,12 @@ public void run() {
    * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}.
    */
   @Deprecated
+  @CheckResult
   public FutureTarget<File> downloadOnly(int width, int height) {
     return getDownloadOnlyRequest().submit(width, height);
   }
 
+  @CheckResult
   protected RequestBuilder<File> getDownloadOnlyRequest() {
     return new RequestBuilder<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
   }
@@ -633,7 +638,7 @@ private Request buildRequestRecursive(Target<TranscodeType> target,
               thumbPriority,
               thumbOverrideWidth,
               thumbOverrideHeight,
-              requestOptions);
+              thumbnailBuilder.requestOptions);
       isThumbnailBuilt = false;
       coordinator.setRequests(fullRequest, thumbRequest);
       return coordinator;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
index 6198bc5f0..921b998fe 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
@@ -66,7 +66,9 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
           data = rewinder.rewindAndGet();
           result = decoder.decode(data, width, height, options);
         }
-      } catch (IOException e) {
+        // Some decoders throw unexpectedly. If they do, we shouldn't fail the entire load path, but
+        // instead log and continue. See #2406 for an example.
+      } catch (IOException | RuntimeException e) {
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
           Log.v(TAG, "Failed to decode data for " + decoder, e);
         }
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
index fa58e81e8..a0e9e32d2 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
@@ -1,10 +1,8 @@
 package com.bumptech.glide.provider;
 
 import android.support.annotation.Nullable;
-
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.util.Synthetic;
-
 import java.util.ArrayList;
 import java.util.List;
 
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index dd565fa75..a5cbcc053 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -4,6 +4,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.Priority;
@@ -117,6 +118,7 @@
    * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions sizeMultiplierOf(float sizeMultiplier) {
     return new RequestOptions().sizeMultiplier(sizeMultiplier);
   }
@@ -124,6 +126,7 @@ public static RequestOptions sizeMultiplierOf(float sizeMultiplier) {
   /**
    * Returns a {@link RequestOptions} object with {@link #diskCacheStrategy(DiskCacheStrategy)} set.
    */
+  @CheckResult
   public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy diskCacheStrategy) {
     return new RequestOptions().diskCacheStrategy(diskCacheStrategy);
   }
@@ -132,6 +135,7 @@ public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy disk
    * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions priorityOf(@NonNull Priority priority) {
     return new RequestOptions().priority(priority);
   }
@@ -139,6 +143,7 @@ public static RequestOptions priorityOf(@NonNull Priority priority) {
   /**
    * Returns a {@link RequestOptions} object with {@link #placeholder(Drawable)} set.
    */
+  @CheckResult
   public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
     return new RequestOptions().placeholder(placeholder);
   }
@@ -146,6 +151,7 @@ public static RequestOptions placeholderOf(@Nullable Drawable placeholder) {
   /**
    * Returns a {@link RequestOptions} object with {@link #placeholder(int)} set.
    */
+  @CheckResult
   public static RequestOptions placeholderOf(int placeholderId) {
     return new RequestOptions().placeholder(placeholderId);
   }
@@ -153,6 +159,7 @@ public static RequestOptions placeholderOf(int placeholderId) {
   /**
    * Returns a {@link RequestOptions} object with {@link #error(Drawable)} set.
    */
+  @CheckResult
   public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
     return new RequestOptions().error(errorDrawable);
   }
@@ -160,6 +167,7 @@ public static RequestOptions errorOf(@Nullable Drawable errorDrawable) {
   /**
    * Returns a {@link RequestOptions} object with {@link #error(int)}} set.
    */
+  @CheckResult
   public static RequestOptions errorOf(int errorId) {
     return new RequestOptions().error(errorId);
   }
@@ -167,6 +175,7 @@ public static RequestOptions errorOf(int errorId) {
   /**
    * Returns a {@link RequestOptions} object with {@link #skipMemoryCache(boolean)} set.
    */
+  @CheckResult
   public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
     if (skipMemoryCache) {
       if (skipMemoryCacheTrueOptions == null) {
@@ -185,6 +194,7 @@ public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    * Returns a {@link RequestOptions} object with {@link #override(int, int)}} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions overrideOf(int width, int height) {
     return new RequestOptions().override(width, height);
   }
@@ -194,6 +204,7 @@ public static RequestOptions overrideOf(int width, int height) {
    * height are the given size.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions overrideOf(int size) {
     return overrideOf(size, size);
   }
@@ -201,6 +212,7 @@ public static RequestOptions overrideOf(int size) {
   /**
    * Returns a {@link RequestOptions} object with {@link #signature} set.
    */
+  @CheckResult
   public static RequestOptions signatureOf(@NonNull Key signature) {
     return new RequestOptions().signature(signature);
   }
@@ -208,6 +220,7 @@ public static RequestOptions signatureOf(@NonNull Key signature) {
   /**
    * Returns a {@link RequestOptions} object with {@link #fitCenter()} set.
    */
+  @CheckResult
   public static RequestOptions fitCenterTransform() {
     if (fitCenterOptions == null) {
       fitCenterOptions = new RequestOptions()
@@ -221,6 +234,7 @@ public static RequestOptions fitCenterTransform() {
    * Returns a {@link RequestOptions} object with {@link #centerInside()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions centerInsideTransform() {
     if (centerInsideOptions == null) {
       centerInsideOptions = new RequestOptions()
@@ -234,6 +248,7 @@ public static RequestOptions centerInsideTransform() {
    * Returns a {@link RequestOptions} object with {@link #centerCrop()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions centerCropTransform() {
     if (centerCropOptions == null) {
       centerCropOptions = new RequestOptions()
@@ -247,6 +262,7 @@ public static RequestOptions centerCropTransform() {
    * Returns a {@link RequestOptions} object with {@link RequestOptions#circleCrop()} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions circleCropTransform() {
     if (circleCropOptions == null) {
       circleCropOptions = new RequestOptions()
@@ -260,6 +276,7 @@ public static RequestOptions circleCropTransform() {
    * Returns a {@link RequestOptions} object with {@link #transform(Transformation)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
     return new RequestOptions().transform(transformation);
   }
@@ -268,6 +285,7 @@ public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> tra
    * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
    */
   @SuppressWarnings("WeakerAccess")
+  @CheckResult
   public static RequestOptions noTransformation() {
     if (noTransformOptions == null) {
       noTransformOptions = new RequestOptions()
@@ -281,6 +299,7 @@ public static RequestOptions noTransformation() {
    * Returns a {@link RequestOptions} object with the given {@link Option} set via
    * {@link #set(Option, Object)}.
    */
+  @CheckResult
   public static <T> RequestOptions option(@NonNull Option<T> option, @NonNull T value) {
     return new RequestOptions().set(option, value);
   }
@@ -288,6 +307,7 @@ public static RequestOptions noTransformation() {
   /**
    * Returns a {@link RequestOptions} object with {@link #decode(Class)} set.
    */
+  @CheckResult
   public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
     return new RequestOptions().decode(resourceClass);
   }
@@ -296,6 +316,7 @@ public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
    * Returns a {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions formatOf(@NonNull DecodeFormat format) {
     return new RequestOptions().format(format);
   }
@@ -304,6 +325,7 @@ public static RequestOptions formatOf(@NonNull DecodeFormat format) {
    * Returns a {@link RequestOptions} object with {@link #frame(long)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions frameOf(long frameTimeMicros) {
     return new RequestOptions().frame(frameTimeMicros);
   }
@@ -312,6 +334,7 @@ public static RequestOptions frameOf(long frameTimeMicros) {
    * Returns a {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
     return new RequestOptions().downsample(strategy);
   }
@@ -319,6 +342,7 @@ public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy)
   /**
    * Returns a {@link RequestOptions} object with {@link #timeout(int)} set.
    */
+  @CheckResult
   public static RequestOptions timeoutOf(int timeout) {
     return new RequestOptions().timeout(timeout);
   }
@@ -328,6 +352,7 @@ public static RequestOptions timeoutOf(int timeout) {
    * #encodeQuality(int)} called with the given quality.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions encodeQualityOf(int quality) {
     return new RequestOptions().encodeQuality(quality);
   }
@@ -337,6 +362,7 @@ public static RequestOptions encodeQualityOf(int quality) {
    * #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
     return new RequestOptions().encodeFormat(format);
   }
@@ -346,6 +372,7 @@ public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat forma
    * called.
    */
   @SuppressWarnings("WeakerAccess") // Public API
+  @CheckResult
   public static RequestOptions noAnimation() {
     if (noAnimationOptions == null) {
       noAnimationOptions = new RequestOptions()
@@ -369,6 +396,7 @@ private static boolean isSet(int fields, int flag) {
    *                       loading the resource.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions sizeMultiplier(float sizeMultiplier) {
     if (isAutoCloneEnabled) {
       return clone().sizeMultiplier(sizeMultiplier);
@@ -383,6 +411,7 @@ public RequestOptions sizeMultiplier(float sizeMultiplier) {
     return selfOrThrowIfLocked();
   }
 
+  @CheckResult
   public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     if (isAutoCloneEnabled) {
       return clone().useUnlimitedSourceGeneratorsPool(flag);
@@ -397,6 +426,7 @@ public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
   /**
    * If set to true, will only load an item if found in the cache, and will not fetch from source.
    */
+  @CheckResult
   public RequestOptions onlyRetrieveFromCache(boolean flag) {
     if (isAutoCloneEnabled) {
       return clone().onlyRetrieveFromCache(flag);
@@ -422,6 +452,7 @@ public RequestOptions onlyRetrieveFromCache(boolean flag) {
    * @param strategy The strategy to use.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (isAutoCloneEnabled) {
       return clone().diskCacheStrategy(strategy);
@@ -438,6 +469,7 @@ public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
    * @param priority A priority.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions priority(@NonNull Priority priority) {
     if (isAutoCloneEnabled) {
       return clone().priority(priority);
@@ -455,6 +487,7 @@ public RequestOptions priority(@NonNull Priority priority) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions placeholder(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
       return clone().placeholder(drawable);
@@ -473,6 +506,7 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a placeholder
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions placeholder(int resourceId) {
     if (isAutoCloneEnabled) {
       return clone().placeholder(resourceId);
@@ -497,6 +531,7 @@ public RequestOptions placeholder(int resourceId) {
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions fallback(Drawable drawable) {
     if (isAutoCloneEnabled) {
       return clone().fallback(drawable);
@@ -521,6 +556,7 @@ public RequestOptions fallback(Drawable drawable) {
    * @param resourceId The id of the resource to use as a fallback.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions fallback(int resourceId) {
     if (isAutoCloneEnabled) {
       return clone().fallback(resourceId);
@@ -538,6 +574,7 @@ public RequestOptions fallback(int resourceId) {
    * @param drawable The drawable to display.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions error(@Nullable Drawable drawable) {
     if (isAutoCloneEnabled) {
       return clone().error(drawable);
@@ -555,6 +592,7 @@ public RequestOptions error(@Nullable Drawable drawable) {
    * @param resourceId The id of the resource to use as a placeholder.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions error(int resourceId) {
     if (isAutoCloneEnabled) {
       return clone().error(resourceId);
@@ -573,6 +611,7 @@ public RequestOptions error(int resourceId) {
    * @param theme The theme to use when loading Drawables.
    * @return this request builder.
    */
+  @CheckResult
   public RequestOptions theme(Resources.Theme theme) {
     if (isAutoCloneEnabled) {
       return clone().theme(theme);
@@ -593,6 +632,7 @@ public RequestOptions theme(Resources.Theme theme) {
    * @param skip True to allow the resource to skip the memory cache.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions skipMemoryCache(boolean skip) {
     if (isAutoCloneEnabled) {
       return clone().skipMemoryCache(true);
@@ -613,6 +653,7 @@ public RequestOptions skipMemoryCache(boolean skip) {
    * @param height The height in pixels to use to load the resource.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions override(int width, int height) {
     if (isAutoCloneEnabled) {
       return clone().override(width, height);
@@ -633,6 +674,7 @@ public RequestOptions override(int width, int height) {
    * @param size The width and height to use.
    * @return This request builder.
    */
+  @CheckResult
   public RequestOptions override(int size) {
     return override(size, size);
   }
@@ -648,6 +690,7 @@ public RequestOptions override(int size) {
    * @return This request builder.
    * @see com.bumptech.glide.signature.ObjectKey
    */
+  @CheckResult
   public RequestOptions signature(@NonNull Key signature) {
     if (isAutoCloneEnabled) {
       return clone().signature(signature);
@@ -670,6 +713,7 @@ public RequestOptions signature(@NonNull Key signature) {
    * locked. </p>
    */
   @SuppressWarnings("unchecked")
+  @CheckResult
   @Override
   public RequestOptions clone() {
     try {
@@ -686,6 +730,7 @@ public RequestOptions clone() {
     }
   }
 
+  @CheckResult
   public <T> RequestOptions set(@NonNull Option<T> option, @NonNull T value) {
     if (isAutoCloneEnabled) {
       return clone().set(option, value);
@@ -697,6 +742,7 @@ public RequestOptions clone() {
     return selfOrThrowIfLocked();
   }
 
+  @CheckResult
   public RequestOptions decode(@NonNull Class<?> resourceClass) {
     if (isAutoCloneEnabled) {
       return clone().decode(resourceClass);
@@ -723,6 +769,7 @@ public final boolean isLocked() {
    * Sets the value for key
    * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
    */
+  @CheckResult
   public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
   }
@@ -731,6 +778,7 @@ public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
    * Sets the value for key
    * {@link BitmapEncoder#COMPRESSION_QUALITY}.
    */
+  @CheckResult
   public RequestOptions encodeQuality(int quality) {
     return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
   }
@@ -745,6 +793,7 @@ public RequestOptions encodeQuality(int quality) {
    * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
    *                        Android framework implementation return a representative frame.
    */
+  @CheckResult
   public RequestOptions frame(long frameTimeMicros) {
     return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);
   }
@@ -764,6 +813,7 @@ public RequestOptions frame(long frameTimeMicros) {
    *
    * @see Downsampler#DECODE_FORMAT
    */
+  @CheckResult
   public RequestOptions format(@NonNull DecodeFormat format) {
     return set(Downsampler.DECODE_FORMAT, Preconditions.checkNotNull(format));
   }
@@ -785,6 +835,7 @@ public RequestOptions format(@NonNull DecodeFormat format) {
    * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
    * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
    */
+  @CheckResult
   public RequestOptions disallowHardwareConfig() {
     return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
   }
@@ -796,6 +847,7 @@ public RequestOptions disallowHardwareConfig() {
    * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
    * is replaced or skipped because of your configuration, this option may be ignored.
    */
+  @CheckResult
   public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
     return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));
   }
@@ -811,6 +863,7 @@ public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
    * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
    * @param timeoutMs The read and write timeout in milliseconds.
    */
+  @CheckResult
   public RequestOptions timeout(int timeoutMs) {
     return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
   }
@@ -824,6 +877,7 @@ public RequestOptions timeout(int timeoutMs) {
    * @see #optionalTransform(Class, Transformation)
    * @see #centerCrop()
    */
+  @CheckResult
   public RequestOptions optionalCenterCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
   }
@@ -837,6 +891,7 @@ public RequestOptions optionalCenterCrop() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterCrop()
    */
+  @CheckResult
   public RequestOptions centerCrop() {
     return transform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
   }
@@ -852,6 +907,7 @@ public RequestOptions centerCrop() {
    * @see #optionalTransform(Class, Transformation)
    * @see #fitCenter()
    */
+  @CheckResult
   public RequestOptions optionalFitCenter() {
     return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
   }
@@ -867,6 +923,7 @@ public RequestOptions optionalFitCenter() {
    * @see #transform(Class, Transformation)
    * @see #optionalFitCenter()
    */
+  @CheckResult
   public RequestOptions fitCenter() {
     return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
   }
@@ -881,6 +938,7 @@ public RequestOptions fitCenter() {
    * @see #optionalTransform(Class, Transformation)
    * @see #centerInside()
    */
+  @CheckResult
   public RequestOptions optionalCenterInside() {
     return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
   }
@@ -895,6 +953,7 @@ public RequestOptions optionalCenterInside() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterInside()
    */
+  @CheckResult
   public RequestOptions centerInside() {
     return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
   }
@@ -907,6 +966,7 @@ public RequestOptions centerInside() {
    * @see #optionalTransform(Transformation)
    * @see #circleCrop()
    */
+  @CheckResult
   public RequestOptions optionalCircleCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
   }
@@ -920,12 +980,14 @@ public RequestOptions optionalCircleCrop() {
    * @see #transform(Class, Transformation)
    * @see #optionalCenterCrop()
    */
+  @CheckResult
   public RequestOptions circleCrop() {
     return transform(DownsampleStrategy.CENTER_INSIDE, new CircleCrop());
   }
 
   // calling optionalTransform() on the result of clone() requires greater access.
-  @SuppressWarnings("WeakerAccess")
+  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"WeakerAccess", "CheckResult"})
   final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
       Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
@@ -937,7 +999,9 @@ final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
   }
 
   // calling transform() on the result of clone() requires greater access.
-  @SuppressWarnings("WeakerAccess")
+  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"WeakerAccess", "CheckResult"})
+  @CheckResult
   final RequestOptions transform(DownsampleStrategy downsampleStrategy,
       Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
@@ -981,6 +1045,9 @@ private RequestOptions scaleOnlyTransform(
    * @see #optionalTransform(Transformation)
    * @see #optionalTransform(Class, Transformation)
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public RequestOptions transform(@NonNull Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
       return clone().transform(transformation);
@@ -1005,7 +1072,9 @@ public RequestOptions transform(@NonNull Transformation<Bitmap> transformation)
    * @see #optionalTransform(Transformation)
    * @see #optionalTransform(Class, Transformation)
    */
-  @SuppressWarnings({"unchecked", "varargs"})
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"unchecked", "varargs", "CheckResult"})
+  @CheckResult
   public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (isAutoCloneEnabled) {
       return clone().transforms(transformations);
@@ -1029,6 +1098,9 @@ public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformati
    * @see #transform(Transformation)
    * @see #transform(Class, Transformation)
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
     if (isAutoCloneEnabled) {
       return clone().optionalTransform(transformation);
@@ -1036,8 +1108,7 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
 
     optionalTransform(Bitmap.class, transformation);
     // TODO: remove BitmapDrawable decoder and this transformation.
-    optionalTransform(BitmapDrawable.class,
-        new BitmapDrawableTransformation(transformation));
+    optionalTransform(BitmapDrawable.class, new BitmapDrawableTransformation(transformation));
     optionalTransform(GifDrawable.class, new GifDrawableTransformation(transformation));
     return selfOrThrowIfLocked();
   }
@@ -1059,6 +1130,7 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
    * @param resourceClass  The type of resource to transform.
    * @param transformation The {@link Transformation} to apply.
    */
+  @CheckResult
   public <T> RequestOptions optionalTransform(Class<T> resourceClass,
       Transformation<T> transformation) {
     if (isAutoCloneEnabled) {
@@ -1087,6 +1159,9 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
    * @param transformation The {@link Transformation} to apply.
    * @see #optionalTransform(Class, Transformation)
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public <T> RequestOptions transform(
       Class<T> resourceClass, Transformation<T> transformation) {
     if (isAutoCloneEnabled) {
@@ -1104,6 +1179,7 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
    * resource classes and allows unknown resource types to be transformed without throwing an
    * exception.
    */
+  @CheckResult
   public RequestOptions dontTransform() {
     if (isAutoCloneEnabled) {
       return clone().dontTransform();
@@ -1126,6 +1202,9 @@ public RequestOptions dontTransform() {
    * <p> To disable transitions (fades etc) use
    * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
    */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @CheckResult
   public RequestOptions dontAnimate() {
     if (isAutoCloneEnabled) {
       return clone().dontAnimate();
@@ -1136,6 +1215,7 @@ public RequestOptions dontAnimate() {
     return selfOrThrowIfLocked();
   }
 
+  @CheckResult
   public RequestOptions apply(RequestOptions other) {
     if (isAutoCloneEnabled) {
       return clone().apply(other);
@@ -1338,8 +1418,8 @@ public final DiskCacheStrategy getDiskCacheStrategy() {
     return diskCacheStrategy;
   }
 
-  @Nullable
   @SuppressWarnings("WeakerAccess")
+  @Nullable
   public final Drawable getErrorPlaceholder() {
     return errorPlaceholder;
   }
@@ -1354,8 +1434,8 @@ public final int getPlaceholderId() {
     return placeholderId;
   }
 
-  @Nullable
   @SuppressWarnings("WeakerAccess")
+  @Nullable
   public final Drawable getPlaceholderDrawable() {
     return placeholderDrawable;
   }
@@ -1365,8 +1445,8 @@ public final int getFallbackId() {
     return fallbackId;
   }
 
-  @Nullable
   @SuppressWarnings("WeakerAccess")
+  @Nullable
   public final Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
diff --git a/library/src/main/java/com/bumptech/glide/util/Util.java b/library/src/main/java/com/bumptech/glide/util/Util.java
index 1f4d568e3..ed5224809 100644
--- a/library/src/main/java/com/bumptech/glide/util/Util.java
+++ b/library/src/main/java/com/bumptech/glide/util/Util.java
@@ -4,7 +4,6 @@
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.os.Looper;
-
 import com.bumptech.glide.load.model.Model;
 import com.bumptech.glide.request.target.Target;
 import java.util.ArrayDeque;
