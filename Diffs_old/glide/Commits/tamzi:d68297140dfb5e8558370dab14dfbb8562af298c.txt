diff --git a/.travis.yml b/.travis.yml
index 8e655e0f8..cb517689d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -24,8 +24,6 @@ env:
     - COMPONENT=instrumentation ANDROID_TARGET=17
     - COMPONENT=instrumentation ANDROID_TARGET=18
     - COMPONENT=instrumentation ANDROID_TARGET=19
-    - COMPONENT=instrumentation ANDROID_TARGET=21
-    - COMPONENT=instrumentation ANDROID_TARGET=22
     - COMPONENT=samples
 
 before_script:
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index 7b49f092c..000000000
--- a/CHANGELOG.md
+++ /dev/null
@@ -1,53 +0,0 @@
-# Change Log
-
-## [v4.5.0](https://github.com/bumptech/glide/tree/HEAD)
-
-[Full Changelog](https://github.com/bumptech/glide/compare/v4.4.0...v4.5.0)
-
-## Features
-* Add an API to pause all requests for a given `Activity` or `Fragment` to allow callers to manually reduce memory when their Fragment or Application is backgrounded (@kurtisnelson, 09e33a2133eb1d4005b227439c0c53c9c4e8c89b) 
-* Fully support Bitmap re-use for `RGBA_F16` `Bitmap`s. Previously Glide supported decoding `RGBA_F16` `Bitmap`s, but would not re-use any stored in the `BitmapPool` when doing so (cc0288c3b4bfb82a109a3f279af52c57fc5e1499)
-* Support decoding Videos from resources as `AssetFileDescriptor`s (6e9866b5a19d06625006a9a8c605db21047df74b)
-* Added support for the [`MediaMetadataRetriever#getScaledFrameAtTime`][2] method added in OMR1 to marginally reduce memory usage when decoding video frames (ded8f77c9f2471e3c3413aa234656df8cf72dd2f)
-* Support transcoding `BitmapDrawable`s to `byte[]`s (015d2659a9ea7438ab72b94500a0921f8ff35aa3)
-
-## Bugs
-* Cleaned up old and incorrect `@TargetApi` annoatations (@SUPERCILEX, 67783961c71639871cc3687894976e6caeb6609e)
-* Added `@Nullable` and `@NonNull` annotations to many of Glide's APIs (@SUPERCILEX, dc12b60c8f0a21eb9b3ab2164471c93d2e20ae25, c3dafde00a061bafcd43a739336ca3503af13a7d, 0cffd1da977e9ca334032ebc1d798213a177aab7, f541b65e596a49d252ba6b80d3b05a111ce93461, 36e0b802c3a1e564caf230b351a6438fa32100ac, 650bb7770d08b279c2a7f00e25337618da54f7f3, bd2f21595d3404e6aadf1f4333bef369509c4a56, e35a73b4e78f2f05dc5c1163b8083ac1b662b02f, f37ced1512f7eabf37f6c93b1b7ffb32c3629b72, bb96b633174184965cd1bdf9027ef3843f59c54f, 276d4ff4bdce85763c985c90a87ea5e858a1ffe4, c3107801dab8ccbe121157bee7dba29b7d9723e6, )
-* Fixed a case where restarting an identical request with `skipMemoryCache(true)` would complete the load from the memory cache (#2663, 3dc1d18da75b44d8d97f4161fe0d330e4993e537)
-* Fixed decoding interlaced and downsampled GIFs as static images (#2698, b64f23de2a7ba38fceac1cda85f05158e80132f9)
-* Added more models to the list of devices requiring a lock when decoding or drawing Bitmaps (@strooooke, #738, c809f7ec03bbfc2c529f2c211cfc644c2073aab0, e923554b10fa9625f4fa6fe706f3d5a553843ab9)
-* Fixed a race condition where starting multiple loads simultaneously the first time any request is made for a given model and resource could lead to NPEs (#2708, d427cbd33206cbcc88ac4a0f0c29ef831d4bb5b5)
-* Make the annotation processor tests pass on Windows (@SUPERCILEX, #2709, 2b4be8b8c210abb34740f0778434679b644a6525)
-* Fix NPE and RuntimeExceptions thrown in `DefaultConnectivityMonitor` on some devices (c902730b75085cecdd40cd5817453d8af0eff4e9)
-* Only trim to half of the memory cache maximum size, not the current size, when background the app (@kurtisnelson, 429b7e2d9854da549eb0b852e2e08de176f05fbf)
-* Fix a `StateVerifier` exception thrown when `ResourceEncoder` implementations unexpectedly throw exceptions while writing resources to Glide's disk cache (6c7cf3f8cae998469a7e7df8c70c459311479a38)
-* Fix an NPE error message when `ResourceDrawableDecoder` fails to decode an image (d522ac7249ca1bf71f6de30e62d71a1faa8d4c4c)
-* Fix an `IllegalStateException` if a request using [`.error()`][3] is cleared while the error request is running (#2767, 9c70aa5f92f523c6bac29628554fdde5428e0cdd)
-* Cleaned up a number of accessor classes generated by unnecessarily strict visibility in inner classes (@TWiStErRob, e02969417a75048af0fcb61c5fbf6ea94bd2c4aa)
-* Updated OkHttp and removed a no longer necessary workaround for `ClassCastException`s thrown by the Android framework on O (#2355, 642b2dc431e54cb677088e934743d78f1ad84810)
-* Added missing annotations to overrides on some of Glide's generated classes (@TWiStErRob, 62d7464fb4f874897121591815ecb7503f7bc01b, 9fde00628f223e96372aeceadcb3e35a0635cb6d, d7bb6f956b34dd00ad0dbcb64f15f4b9c2fb0538)
-* Avoid throwing exceptions when `LruBitmapPool` was asked to provide `Bitmap`s with a `null` config (c1036c1cdc3c85827bf566e104a12ca880e26411)
-
-
-## Behavior Changes
-* Default to `aar` packaging in POMs, so `@aar` should no longer be required to avoid warnings about jars depending on aars (06ba3442fd8d25c943e986c2bd6c138aa4b390e3)
-* Default active resource retention to false (73759b9eb1d3b186c4deb6412137b0b1193fbd5d), but leave the option in `GlideBuilder` to manually enable it. Enabling active resource retention can lead to recycled `Bitmap` errors or `Bitmap` re-use bugs if applications call `Bitmap.recycle()` on any images loaded by Glide or mutate the contents of `Bitmap`s loaded by Glide. 
-* Treat devices with API < 19 as having `ActivityManager.isLowRam` set to `true` (#2650, b221d4bbec138efcdb1aabd07600b7df713f9e40)
-
-## Breaking Changes
-* Removed deprecated constructors requiring `Context`s in most of Glide's default `Transformation` (23975d933bcda7d136340b9988f2bd575065b667, 733b2e0f25a6d3ddbb4942172e92a9fe01c87363, 9bedc2b5fe5b1b2e05203af173c73f0e599a0177, 55594baf791ccb49dd5cdc256662360717b409bb, d8f6224d127b984c3ac1356d44f62126e4843d07, d840533448fd7bde528e0af7ce10c49653430c12, 2f76842b8ef9ac15c43a2c5175f23496b5a13f37, 144ac5374eb0bd11a8f8e92d7346dafac1426621, 150ebabbd7d5e8751c8678fa01418d1b1f1259da, 92d761d002da25320f2c504267f56d73b889b2d4, a6f1b1c1bef5b4e8be736c564792715266b07463) 
-
-## Deprecations
-* Deprecated [`VideoBitmapDecoder`][4], use [`VideoDecoder`][5] instead.
-
-## Build Changes
-* Glide must be compiled against API 27 (@SUPERCILEX, #2730, 75c2a8b6d216013e7fbf797231839a8f4c82757a)
-* Glide uses v27 of the support libraries (though v26 should work as well, to use v26 of the support library, see [Glide's Android SDK requirements docs page][1])
-* Updated to PMD 6.0.0 (@TWiStErRob, f16aef4c6ad583bafe796c7a952a0d10920c4dcd)
-* Fix a PMD failure when building with --profile or any other way in which class files didn't happen to have already been compiled (@TWiStErRob, #2776, fd73179166b15af246769c9b1ae205c65c584e5b)
-
-[1]: http://bumptech.github.io/glide/doc/download-setup.html#android-sdk-requirements
-[2]: https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getScaledFrameAtTime(long,%20int,%20int,%20int)
-[3]: http://bumptech.github.io/glide/javadocs/440/com/bumptech/glide/RequestBuilder.html#error-com.bumptech.glide.RequestBuilder-
-[4]: http://bumptech.github.io/glide/javadocs/450/com/bumptech/glide/load/resource/bitmap/VideoBitmapDecoder.html
diff --git a/README.md b/README.md
index bdd2ac91b..e6cad510b 100644
--- a/README.md
+++ b/README.md
@@ -31,8 +31,8 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.github.bumptech.glide:glide:4.6.1'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'
+  implementation 'com.github.bumptech.glide:glide:4.7.1'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
 }
 ```
 
@@ -42,12 +42,12 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.6.1</version>
+  <version>4.7.1</version>
 </dependency>
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.6.1</version>
+  <version>4.7.1</version>
   <optional>true</optional>
 </dependency>
 ```
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
index 512fc42a7..e5220abaf 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
@@ -8,6 +8,7 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.MethodSpec.Builder;
+import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeSpec;
 import java.util.ArrayList;
 import java.util.List;
@@ -16,7 +17,6 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
 import javax.lang.model.util.Elements;
 
 /**
@@ -138,7 +138,7 @@ public MethodSpec apply(ExecutableElement input) {
   }
 
   private MethodSpec overrideGlideStaticMethod(ExecutableElement methodToOverride) {
-    List<? extends VariableElement> parameters = methodToOverride.getParameters();
+    List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);
 
     TypeElement element =
         (TypeElement) processingEnv.getTypeUtils().asElement(methodToOverride.getReturnType());
@@ -147,7 +147,7 @@ private MethodSpec overrideGlideStaticMethod(ExecutableElement methodToOverride)
         MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString())
             .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
             .addJavadoc(processorUtil.generateSeeMethodJavadoc(methodToOverride))
-            .addParameters(ProcessorUtil.getParameters(methodToOverride));
+            .addParameters(parameters);
 
     addReturnAnnotations(builder, methodToOverride);
 
@@ -162,9 +162,9 @@ private MethodSpec overrideGlideStaticMethod(ExecutableElement methodToOverride)
     args.add(ClassName.get(glideType));
     args.add(methodToOverride.getSimpleName());
     if (!parameters.isEmpty()) {
-      for (VariableElement param : parameters) {
+      for (ParameterSpec param : parameters) {
         code.append("$L, ");
-        args.add(param.getSimpleName());
+        args.add(param.name);
       }
       code = new StringBuilder(code.substring(0, code.length() - 2));
     }
@@ -210,20 +210,20 @@ private MethodSpec overrideGlideWithMethod(
       String packageName, TypeSpec generatedRequestManager, ExecutableElement methodToOverride) {
     ClassName generatedRequestManagerClassName =
         ClassName.get(packageName, generatedRequestManager.name);
-    List<? extends VariableElement> parameters = methodToOverride.getParameters();
+    List<ParameterSpec> parameters = ProcessorUtil.getParameters(methodToOverride);
     Preconditions.checkArgument(
         parameters.size() == 1, "Expected size of 1, but got %s", methodToOverride);
-    VariableElement parameter = parameters.iterator().next();
+    ParameterSpec parameter = parameters.iterator().next();
 
     Builder builder = MethodSpec.methodBuilder(methodToOverride.getSimpleName().toString())
         .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
         .addJavadoc(processorUtil.generateSeeMethodJavadoc(methodToOverride))
-        .addParameters(ProcessorUtil.getParameters(methodToOverride))
+        .addParameters(parameters)
         .returns(generatedRequestManagerClassName)
         .addStatement("return ($T) $T.$N($L)",
             generatedRequestManagerClassName, glideType,
             methodToOverride.getSimpleName().toString(),
-            parameter.getSimpleName());
+            parameter.name);
 
     return addReturnAnnotations(builder, methodToOverride).build();
   }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index 459be7ad4..b7051e295 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -256,15 +256,15 @@ void warnLog(String toLog) {
     processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, toLog);
   }
 
-  static CodeBlock generateCastingSuperCall(TypeName toReturn, ExecutableElement method) {
+  static CodeBlock generateCastingSuperCall(TypeName toReturn, MethodSpec method) {
     return CodeBlock.builder()
-        .add("return ($T) super.$N(", toReturn, method.getSimpleName())
+        .add("return ($T) super.$N(", toReturn, method.name)
         .add(
-            FluentIterable.from(method.getParameters())
-                .transform(new Function<VariableElement, String>() {
+            FluentIterable.from(method.parameters)
+                .transform(new Function<ParameterSpec, String>() {
                   @Override
-                  public String apply(VariableElement input) {
-                    return input.getSimpleName().toString();
+                  public String apply(ParameterSpec input) {
+                    return input.name;
                   }
                 })
                 .join(Joiner.on(",")))
@@ -317,18 +317,119 @@ public String apply(VariableElement input) {
     for (VariableElement parameter : parameters) {
       result.add(getParameter(parameter));
     }
-    return result;
+    return dedupedParameters(result);
+  }
+
+  private static List<ParameterSpec> dedupedParameters(List<ParameterSpec> parameters) {
+    boolean hasDupes = false;
+    Set<String> names = new HashSet<>();
+    for (ParameterSpec parameter : parameters) {
+      String name = parameter.name;
+      if (names.contains(name)) {
+        hasDupes = true;
+      } else {
+        names.add(name);
+      }
+    }
+
+    if (hasDupes) {
+      List<ParameterSpec> copy = parameters;
+      parameters = new ArrayList<>();
+      for (int i = 0; i < copy.size(); i++) {
+        ParameterSpec parameter = copy.get(i);
+        parameters.add(ParameterSpec.builder(parameter.type, parameter.name + i)
+            .addModifiers(parameter.modifiers)
+            .addAnnotations(parameter.annotations)
+            .build());
+      }
+    }
+
+    return parameters;
   }
 
-  private static ParameterSpec getParameter(VariableElement method) {
-    TypeName type = TypeName.get(method.asType());
-    String name = method.getSimpleName().toString();
-    return ParameterSpec.builder(type, name)
-        .addModifiers(method.getModifiers())
-        .addAnnotations(getAnnotations(method))
+  private static ParameterSpec getParameter(VariableElement parameter) {
+    TypeName type = TypeName.get(parameter.asType());
+    return ParameterSpec.builder(type, computeParameterName(parameter, type))
+        .addModifiers(parameter.getModifiers())
+        .addAnnotations(getAnnotations(parameter))
         .build();
   }
 
+  private static String computeParameterName(VariableElement parameter, TypeName type) {
+    String rawClassName = type.withoutAnnotations().toString();
+
+    String name;
+
+    if (type.isPrimitive() || type.isBoxedPrimitive()) {
+      name = getSmartPrimitiveParameterName(parameter);
+    } else {
+      if (rawClassName.contains("<") && rawClassName.contains(">")) {
+        String[] preGenericSplit = rawClassName.split("<");
+        String preGeneric = preGenericSplit[0];
+        String[] postGenericSplit = rawClassName.split(">");
+        String postGeneric = postGenericSplit[postGenericSplit.length - 1];
+        if (postGenericSplit.length > 1) {
+          rawClassName = preGeneric + postGeneric;
+        } else {
+          rawClassName = preGeneric;
+        }
+      }
+
+      String[] qualifiers = rawClassName.split("\\.");
+      rawClassName = qualifiers[qualifiers.length - 1];
+
+      rawClassName = applySmartParameterNameReplacements(rawClassName);
+
+      boolean allCaps = true;
+      for (char c : rawClassName.toCharArray()) {
+        if (Character.isLowerCase(c)) {
+          allCaps = false;
+          break;
+        }
+      }
+      if (allCaps) {
+        name = rawClassName.toLowerCase();
+      } else {
+        int indexOfLastWordStart = 0;
+        char[] chars = rawClassName.toCharArray();
+        for (int i = 0, charArrayLength = chars.length; i < charArrayLength; i++) {
+          char c = chars[i];
+          if (Character.isUpperCase(c)) {
+            indexOfLastWordStart = i;
+          }
+        }
+        rawClassName = rawClassName.substring(indexOfLastWordStart, rawClassName.length());
+
+        name = Character.toLowerCase(rawClassName.charAt(0))
+            + rawClassName.substring(1, rawClassName.length());
+      }
+    }
+
+    return name;
+  }
+
+  private static String getSmartPrimitiveParameterName(VariableElement parameter) {
+    for (AnnotationMirror annotation : parameter.getAnnotationMirrors()) {
+      String annotationName = annotation.getAnnotationType().toString().toUpperCase();
+      if (annotationName.endsWith("RES")) {
+        // Catch annotations like StringRes
+        return "id";
+      } else if (annotationName.endsWith("RANGE")) {
+        // Catch annotations like IntRange
+        return "value";
+      }
+    }
+
+    return parameter.getSimpleName().toString();
+  }
+
+  private static String applySmartParameterNameReplacements(String name) {
+    name = name.replace("[]", "s");
+    name = name.replace(Class.class.getSimpleName(), "clazz");
+    name = name.replace(Object.class.getSimpleName(), "o");
+    return name;
+  }
+
   private static List<AnnotationSpec> getAnnotations(VariableElement element) {
     List<AnnotationSpec> result = new ArrayList<>();
     for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 2486c8226..5610dcd25 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -33,7 +33,6 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 
@@ -214,20 +213,20 @@ private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOver
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
     MethodSpec.Builder builder = ProcessorUtil.overriding(methodToOverride)
-        .returns(generatedRequestBuilderOfType)
-        .addCode(CodeBlock.builder()
-            .add("return ($T) super.$N(",
-                generatedRequestBuilderOfType, methodToOverride.getSimpleName())
-            .add(FluentIterable.from(methodToOverride.getParameters())
-                .transform(new Function<VariableElement, String>() {
-                  @Override
-                  public String apply(VariableElement input) {
-                    return input.getSimpleName().toString();
-                  }
-                })
-                .join(Joiner.on(", ")))
-            .add(");\n")
-            .build());
+        .returns(generatedRequestBuilderOfType);
+    builder.addCode(CodeBlock.builder()
+        .add("return ($T) super.$N(",
+            generatedRequestBuilderOfType, methodToOverride.getSimpleName())
+        .add(FluentIterable.from(builder.build().parameters)
+            .transform(new Function<ParameterSpec, String>() {
+              @Override
+              public String apply(ParameterSpec input) {
+                return input.name;
+              }
+            })
+            .join(Joiner.on(", ")))
+        .add(");\n")
+        .build());
 
     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
       builder = builder.addAnnotation(AnnotationSpec.get(mirror));
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index 31e646ddc..23e791350 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -12,6 +12,7 @@
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.MethodSpec.Builder;
 import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeSpec;
@@ -192,10 +193,12 @@ private MethodSpec generateRequestManagerRequestManagerMethodOverride(
       String generatedPackageName, ExecutableElement method) {
     ClassName generatedRequestManagerName =
         ClassName.get(generatedPackageName, GENERATED_REQUEST_MANAGER_SIMPLE_NAME);
-    return ProcessorUtil.overriding(method)
+    Builder returns = ProcessorUtil.overriding(method)
         .addAnnotation(nonNull())
-        .returns(generatedRequestManagerName)
-        .addCode(ProcessorUtil.generateCastingSuperCall(generatedRequestManagerName, method))
+        .returns(generatedRequestManagerName);
+    return returns
+        .addCode(ProcessorUtil.generateCastingSuperCall(
+            generatedRequestManagerName, returns.build()))
         .build();
   }
 
@@ -240,10 +243,9 @@ private MethodSpec generateRequestManagerRequestBuilderMethodOverride(
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
     MethodSpec.Builder builder = ProcessorUtil.overriding(methodToOverride)
-        .returns(generatedRequestBuilderOfType)
-        .addCode(
-            ProcessorUtil.generateCastingSuperCall(
-                generatedRequestBuilderOfType, methodToOverride));
+        .returns(generatedRequestBuilderOfType);
+    builder.addCode(
+        ProcessorUtil.generateCastingSuperCall(generatedRequestBuilderOfType, builder.build()));
 
     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
       builder.addAnnotation(AnnotationSpec.get(mirror));
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 852ebc5c0..16cb0fe70 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -30,7 +30,6 @@
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
@@ -197,19 +196,19 @@ public MethodSpec apply(ExecutableElement input) {
   private MethodSpec generateRequestOptionOverride(ExecutableElement methodToOverride) {
     MethodSpec.Builder result = ProcessorUtil.overriding(methodToOverride)
         .returns(glideOptionsName)
-        .addModifiers(Modifier.FINAL)
-        .addCode(CodeBlock.builder()
-            .add("return ($T) super.$N(", glideOptionsName, methodToOverride.getSimpleName())
-            .add(FluentIterable.from(methodToOverride.getParameters())
-                .transform(new Function<VariableElement, String>() {
-                  @Override
-                  public String apply(VariableElement input) {
-                    return input.getSimpleName().toString();
-                  }
-                })
-                .join(Joiner.on(", ")))
-            .add(");\n")
-            .build());
+        .addModifiers(Modifier.FINAL);
+    result.addCode(CodeBlock.builder()
+        .add("return ($T) super.$N(", glideOptionsName, methodToOverride.getSimpleName())
+        .add(FluentIterable.from(result.build().parameters)
+            .transform(new Function<ParameterSpec, String>() {
+              @Override
+              public String apply(ParameterSpec input) {
+                return input.name;
+              }
+            })
+            .join(Joiner.on(", ")))
+        .add(");\n")
+        .build());
 
     if (methodToOverride.getSimpleName().toString().equals("transforms")) {
       result
@@ -254,24 +253,25 @@ public String apply(VariableElement input) {
         .returns(glideOptionsName);
 
     // The 0th element is expected to be a RequestOptions object.
-    List<? extends VariableElement> parameters =
+    List<? extends VariableElement> paramElements =
         element.getParameters().subList(1, element.getParameters().size());
-    builder.addParameters(ProcessorUtil.getParameters(parameters));
+    List<ParameterSpec> parameters = ProcessorUtil.getParameters(paramElements);
+    builder.addParameters(parameters);
 
     String extensionRequestOptionsArgument;
     if (overrideType == OVERRIDE_EXTEND) {
       builder
           .addJavadoc(
-              processorUtil.generateSeeMethodJavadoc(requestOptionsName, methodName, parameters))
+              processorUtil.generateSeeMethodJavadoc(requestOptionsName, methodName, paramElements))
           .addAnnotation(Override.class);
 
       List<Object> methodArgs = new ArrayList<>();
       methodArgs.add(element.getSimpleName().toString());
       StringBuilder methodLiterals = new StringBuilder();
       if (!parameters.isEmpty()) {
-        for (VariableElement variable : parameters) {
+        for (ParameterSpec parameter : parameters) {
           methodLiterals.append("$L, ");
-          methodArgs.add(variable.getSimpleName().toString());
+          methodArgs.add(parameter.name);
         }
         methodLiterals = new StringBuilder(
             methodLiterals.substring(0, methodLiterals.length() - 2));
@@ -291,9 +291,9 @@ public String apply(VariableElement input) {
     args.add(element.getSimpleName().toString());
     args.add(extensionRequestOptionsArgument);
     if (!parameters.isEmpty()) {
-      for (VariableElement variable : parameters) {
+      for (ParameterSpec parameter : parameters) {
         code.append("$L, ");
-        args.add(variable.getSimpleName().toString());
+        args.add(parameter.name);
       }
     }
     code = new StringBuilder(code.substring(0, code.length() - 2));
@@ -326,9 +326,10 @@ public String apply(VariableElement input) {
         .returns(glideOptionsName);
 
     // The 0th element is expected to be a RequestOptions object.
-    List<? extends VariableElement> parameters =
+    List<? extends VariableElement> paramElements =
         element.getParameters().subList(1, element.getParameters().size());
-    builder.addParameters(ProcessorUtil.getParameters(parameters));
+    List<ParameterSpec> parameters = ProcessorUtil.getParameters(paramElements);
+    builder.addParameters(parameters);
 
     // Generates the String and list of arguments to pass in when calling this method or super.
     // IE centerCrop(context) creates methodLiterals="%L" and methodArgs=[centerCrop, context].
@@ -336,9 +337,9 @@ public String apply(VariableElement input) {
     methodArgs.add(element.getSimpleName().toString());
     StringBuilder methodLiterals = new StringBuilder();
     if (!parameters.isEmpty()) {
-      for (VariableElement variable : parameters) {
+      for (ParameterSpec parameter : parameters) {
         methodLiterals.append("$L, ");
-        methodArgs.add(variable.getSimpleName().toString());
+        methodArgs.add(parameter.name);
       }
       methodLiterals = new StringBuilder(methodLiterals.substring(0, methodLiterals.length() - 2));
     }
@@ -353,7 +354,7 @@ public String apply(VariableElement input) {
       String callSuper = "super.$L(" + methodLiterals + ")";
       builder.addStatement(callSuper, methodArgs.toArray(new Object[0]))
           .addJavadoc(processorUtil.generateSeeMethodJavadoc(
-              requestOptionsName, methodName, parameters))
+              requestOptionsName, methodName, paramElements))
           .addAnnotation(Override.class);
     }
 
@@ -364,9 +365,9 @@ public String apply(VariableElement input) {
     args.add(element.getSimpleName().toString());
     args.add("this");
     if (!parameters.isEmpty()) {
-      for (VariableElement variable : parameters) {
+      for (ParameterSpec parameter : parameters) {
         code.append("$L, ");
-        args.add(variable.getSimpleName().toString());
+        args.add(parameter.name);
       }
     }
     code = new StringBuilder(code.substring(0, code.length() - 2));
@@ -446,9 +447,8 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
             .addJavadoc(processorUtil.generateSeeMethodJavadoc(staticMethod))
             .returns(glideOptionsName);
 
-    List<? extends VariableElement> parameters = staticMethod.getParameters();
     StringBuilder createNewOptionAndCall = createNewOptionAndCall(memoize, methodSpecBuilder,
-        parameters, "new $T().$N(", ProcessorUtil.getParameters(staticMethod));
+        "new $T().$N(", ProcessorUtil.getParameters(staticMethod));
 
     FieldSpec requiredStaticField = null;
     if (memoize) {
@@ -535,7 +535,7 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
     parameters = parameters.subList(1, parameters.size());
 
     StringBuilder createNewOptionAndCall = createNewOptionAndCall(memoize, methodSpecBuilder,
-        parameters, "new $T().$L(", ProcessorUtil.getParameters(parameters));
+        "new $T().$L(", ProcessorUtil.getParameters(parameters));
 
     FieldSpec requiredStaticField = null;
     if (memoize) {
@@ -576,12 +576,12 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
 
   private StringBuilder createNewOptionAndCall(boolean memoize,
       MethodSpec.Builder methodSpecBuilder,
-      List<? extends VariableElement> parameters, String start, List<ParameterSpec> specs) {
+      String start, List<ParameterSpec> specs) {
     StringBuilder createNewOptionAndCall = new StringBuilder(start);
-    if (!parameters.isEmpty()) {
+    if (!specs.isEmpty()) {
       methodSpecBuilder.addParameters(specs);
-      for (VariableElement parameter : parameters) {
-        createNewOptionAndCall.append(parameter.getSimpleName().toString());
+      for (ParameterSpec parameter : specs) {
+        createNewOptionAndCall.append(parameter.name);
         // use the Application Context to avoid memory leaks.
         if (memoize && isAndroidContext(parameter)) {
           createNewOptionAndCall.append(".getApplicationContext()");
@@ -595,9 +595,8 @@ private StringBuilder createNewOptionAndCall(boolean memoize,
     return createNewOptionAndCall;
   }
 
-  private boolean isAndroidContext(VariableElement variableElement) {
-    Element element = processingEnvironment.getTypeUtils().asElement(variableElement.asType());
-    return element.toString().equals("android.content.Context");
+  private boolean isAndroidContext(ParameterSpec parameter) {
+    return parameter.type.toString().equals("android.content.Context");
   }
 
   @Nullable
diff --git a/annotation/compiler/test/build.gradle b/annotation/compiler/test/build.gradle
index 5bb534de3..e4573f90a 100644
--- a/annotation/compiler/test/build.gradle
+++ b/annotation/compiler/test/build.gradle
@@ -13,6 +13,7 @@ dependencies {
     // build.gradle file.
     testImplementation project(':glide')
     testImplementation project(':annotation:compiler')
+    testImplementation "junit:junit:${JUNIT_VERSION}"
     testImplementation "com.squareup:javapoet:${JAVAPOET_VERSION}"
     testImplementation "com.google.auto.service:auto-service:${AUTO_SERVICE_VERSION}"
     testImplementation "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidAppGlideModuleWithExcludesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidAppGlideModuleWithExcludesTest.java
index e99c6160c..a54f7565e 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidAppGlideModuleWithExcludesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidAppGlideModuleWithExcludesTest.java
@@ -2,40 +2,44 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
+import static org.junit.Assert.assertThrows;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 /**
  * Tests AppGlideModules with invalid usages of the @Excludes annotation.
  */
-// Ignore warnings since most methods use ExpectedException
+// Ignore warnings since most methods use assertThrows
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidAppGlideModuleWithExcludesTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
-
   @Test
   public void compilation_withMissingExcludedModuleClass_throws() {
-    expectedException.expect(RuntimeException.class);
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            JavaFileObjects.forSourceLines(
-                "AppModuleWithExcludes",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.Excludes;",
-                "import com.bumptech.glide.annotation.GlideModule;",
-                "import com.bumptech.glide.module.AppGlideModule;",
-                "import com.bumptech.glide.test.EmptyLibraryModule;",
-                "@GlideModule",
-                "@Excludes(EmptyLibraryModule.class)",
-                "public final class AppModuleWithExcludes extends AppGlideModule {}"));
+    assertThrows(
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    JavaFileObjects.forSourceLines(
+                        "AppModuleWithExcludes",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.annotation.Excludes;",
+                        "import com.bumptech.glide.annotation.GlideModule;",
+                        "import com.bumptech.glide.module.AppGlideModule;",
+                        "import com.bumptech.glide.test.EmptyLibraryModule;",
+                        "@GlideModule",
+                        "@Excludes(EmptyLibraryModule.class)",
+                        "public final class AppModuleWithExcludes extends AppGlideModule {}"));
+          }
+        });
   }
 
   @Test
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
index c1a47efa2..2641be120 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
@@ -8,21 +8,17 @@
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
 /**
  * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s themselves.
  */
-// Avoid warnings when using ExpectedException.
+// Avoid warnings when asserting on exceptions.
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidGlideExtensionTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
-
   @Test
   public void compilation_withPublicConstructor_fails() {
     try {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
index a0be89706..d52943739 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
@@ -3,14 +3,14 @@
 import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
+import static org.junit.Assert.assertThrows;
 import static org.junit.Assert.fail;
 
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
@@ -18,30 +18,34 @@
  * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s for methods annotated
  * with {@link com.bumptech.glide.annotation.GlideOption}.
  */
-// Ignore warnings since most methods use ExpectedException
+// Ignore warnings since most methods use assertThrows.
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidGlideOptionsExtensionTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
-
   @Test
   public void compilation_withAnnotatedNonStaticMethod_fails() {
-    expectedException.expect(RuntimeException.class);
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideOption;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideOption",
-                "  public void doSomething() {}",
-                "}"));
+    assertThrows(
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideOption;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideOption",
+                        "  public void doSomething() {}",
+                        "}"));
+          }
+        });
   }
 
   @Test
@@ -118,44 +122,57 @@ public void compilation_withAnnotatedStaticMethod_withRequestOptionsArgAndOtherA
 
   @Test
   public void compilation_overridingOptionWithoutAnnotationType_fails() {
-    expectedException.expect(RuntimeException.class);
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideOption",
-                "  public static void centerCrop(RequestOptions options) {}",
-                "}"));
+    assertThrows(
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                emptyAppModule(),
+                JavaFileObjects.forSourceLines(
+                    "Extension",
+                    "package com.bumptech.glide.test;",
+                    "import com.bumptech.glide.annotation.GlideExtension;",
+                    "import com.bumptech.glide.annotation.GlideOption;",
+                    "import com.bumptech.glide.request.RequestOptions;",
+                    "@GlideExtension",
+                    "public class Extension {",
+                    "  private Extension() {}",
+                    "  @GlideOption",
+                    "  public static void centerCrop(RequestOptions options) {}",
+                    "}"));
+
+          }
+        });
   }
 
   @Test
   public void compilation_withOverrideExtend_butNotOverridingMethod_fails() {
-    expectedException.expect(RuntimeException.class);
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)",
-                "  public static void something(RequestOptions options) {}",
-                "}"));
+    assertThrows(
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideOption;",
+                        "import com.bumptech.glide.request.RequestOptions;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)",
+                        "  public static void something(RequestOptions options) {}",
+                        "}"));
+          }
+        });
   }
 
   @Test
@@ -182,23 +199,29 @@ public void compilation_withOverrideExtend_andOverridingMethod_succeeds() {
 
   @Test
   public void compilation_withOverrideReplace_butNotOverridingMethod_fails() {
-    expectedException.expect(RuntimeException.class);
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)",
-                "  public static void something(RequestOptions options) {}",
-                "}"));
+    assertThrows(
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideOption;",
+                        "import com.bumptech.glide.request.RequestOptions;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)",
+                        "  public static void something(RequestOptions options) {}",
+                        "}"));
+          }
+        });
   }
 
   @Test
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
index 9076f806e..020149fda 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
@@ -5,15 +5,15 @@
 import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
+import static org.junit.Assert.assertThrows;
 import static org.junit.Assert.fail;
 
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import java.io.IOException;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
@@ -21,54 +21,64 @@
  * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s for methods annotated
  * with {@link com.bumptech.glide.annotation.GlideType}.
  */
-// Ignore warnings since most methods use ExpectedException
+// Ignore warnings since most methods use assertThrows.
 @SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(JUnit4.class)
 public class InvalidGlideTypeExtensionTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
-
   @Test
   public void compilation_withAnnotatedNonStaticMethod_fails() {
-    expectedException.expectMessage("@GlideType methods must be static");
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideType;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideType(Number.class)",
-                "  public void doSomething() {}",
-                "}"));
+    assertThrows(
+        "@GlideType methods must be static",
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideType;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideType(Number.class)",
+                        "  public void doSomething() {}",
+                        "}"));
+          }
+        });
   }
 
   @Test
   public void compilation_withAnnotatedStaticMethod_withoutRequestBuilderArg_fails() {
-    expectedException
-        .expectMessage(
-            "@GlideType methods must take a RequestBuilder object as their first and only"
-                + " parameter, but given multiple for:"
-                + " com.bumptech.glide.test.Extension#doSomething()");
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideType;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideType(Number.class)",
-                "  public static void doSomething() {}",
-                "}"));
+    assertThrows(
+        "@GlideType methods must take a RequestBuilder object as their first and only"
+            + " parameter, but given multiple for:"
+            + " com.bumptech.glide.test.Extension#doSomething()",
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideType;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideType(Number.class)",
+                        "  public static void doSomething() {}",
+                        "}"));
+          }
+        });
   }
 
   @Test
@@ -121,35 +131,40 @@ public void compilation_withAnnotatedStaticMethod_withNonRequestBuilderArg_fails
 
   @Test
   public void compilation_withAnnotatedStaticMethod_withRequestBuilderArgAndOtherArg_fails() {
-    expectedException
-        .expectMessage(
-            "@GlideType methods must take a RequestBuilder object as their first and only"
-                + " parameter, but given multiple for:"
-                + " com.bumptech.glide.test.Extension#type("
-                + "com.bumptech.glide.RequestBuilder<java.lang.Number>,"
-                + "java.lang.Object)");
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.RequestBuilder;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideType;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideType(Number.class)",
-                "  public static void type(RequestBuilder<Number> builder, Object arg2) {}",
-                "}"));
+    assertThrows(
+        "@GlideType methods must take a RequestBuilder object as their first and only"
+            + " parameter, but given multiple for:"
+            + " com.bumptech.glide.test.Extension#type("
+            + "com.bumptech.glide.RequestBuilder<java.lang.Number>,"
+            + "java.lang.Object)",
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.RequestBuilder;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideType;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideType(Number.class)",
+                        "  public static void type(RequestBuilder<Number> builder, Object arg2) {}",
+                        "}"));
+          }
+        });
   }
 
   @Test
   public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails()
       throws IOException {
-    Compilation compilation =
+    final Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
             .compile(
@@ -167,11 +182,17 @@ public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails()
                     "  @GlideType(Drawable.class)",
                     "  public static void asDrawable(RequestBuilder<Drawable> builder) {}",
                     "}"));
-    expectedException
-        .expectMessage(
-            "error: method asDrawable() is already defined in class"
-                + " com.bumptech.glide.test.GlideRequests");
-    compilation.generatedSourceFile(subpackage("GlideRequests"));
+
+    assertThrows(
+        "error: method asDrawable() is already defined in class"
+            + " com.bumptech.glide.test.GlideRequests",
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            compilation.generatedSourceFile(subpackage("GlideRequests"));
+          }
+        });
   }
 
   @Test
@@ -266,30 +287,36 @@ public void compilation_withAnnotatedStaticMethod_returningBuilderWithIncorrectT
 
   @Test
   public void compilation_withAnnotatedStaticMethod_returningBuilder_andMultipleParams_fails() {
-    expectedException.expectMessage(
+    assertThrows(
         "@GlideType methods must take a RequestBuilder object as their first and only parameter,"
             + " but given multiple for:"
             + " com.bumptech.glide.test.Extension#asNumber("
-            + "com.bumptech.glide.RequestBuilder<java.lang.Number>,java.lang.Object)");
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(
-            emptyAppModule(),
-            JavaFileObjects.forSourceLines(
-                "Extension",
-                "package com.bumptech.glide.test;",
-                "import com.bumptech.glide.RequestBuilder;",
-                "import com.bumptech.glide.annotation.GlideExtension;",
-                "import com.bumptech.glide.annotation.GlideType;",
-                "@GlideExtension",
-                "public class Extension {",
-                "  private Extension() {}",
-                "  @GlideType(Number.class)",
-                "  public static RequestBuilder<Number> asNumber(",
-                "      RequestBuilder<Number> builder, Object arg1) {",
-                "    return builder;",
-                "  }",
-                "}"));
+            + "com.bumptech.glide.RequestBuilder<java.lang.Number>,java.lang.Object)",
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(
+                    emptyAppModule(),
+                    JavaFileObjects.forSourceLines(
+                        "Extension",
+                        "package com.bumptech.glide.test;",
+                        "import com.bumptech.glide.RequestBuilder;",
+                        "import com.bumptech.glide.annotation.GlideExtension;",
+                        "import com.bumptech.glide.annotation.GlideType;",
+                        "@GlideExtension",
+                        "public class Extension {",
+                        "  private Extension() {}",
+                        "  @GlideType(Number.class)",
+                        "  public static RequestBuilder<Number> asNumber(",
+                        "      RequestBuilder<Number> builder, Object arg1) {",
+                        "    return builder;",
+                        "  }",
+                        "}"));
+          }
+        });
   }
 
   @Test
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
index cecf9f748..a80590d83 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
@@ -2,6 +2,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
+import static org.junit.Assert.assertThrows;
 
 import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
 import com.bumptech.glide.annotation.compiler.test.Util;
@@ -9,7 +10,7 @@
 import javax.tools.JavaFileObject;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
@@ -23,16 +24,21 @@
   private static final String SECOND_MODULE = "EmptyAppModule2.java";
   @Rule public final RegenerateResourcesRule regenerateResourcesRule =
       new RegenerateResourcesRule(getClass());
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   // Throws.
   @SuppressWarnings("ResultOfMethodCallIgnored")
   @Test
   public void compilation_withTwoAppModules_fails() {
-    expectedException.expect(RuntimeException.class);
-    javac()
-        .withProcessors(new GlideAnnotationProcessor())
-        .compile(forResource(FIRST_MODULE), forResource(SECOND_MODULE));
+    assertThrows(
+        RuntimeException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            javac()
+                .withProcessors(new GlideAnnotationProcessor())
+                .compile(forResource(FIRST_MODULE), forResource(SECOND_MODULE));
+          }
+        });
   }
 
   @Test
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
index 94e1c27b7..b576c08a7 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
@@ -14,7 +14,6 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
@@ -25,7 +24,6 @@
 public class MultipleEmptyLibraryGlideModuleTest {
   @Rule public final RegenerateResourcesRule regenerateResourcesRule =
       new RegenerateResourcesRule(getClass());
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
   private Compilation compilation;
 
   @Before
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
index a6b2b8941..881e98c1b 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
@@ -32,24 +32,24 @@ private GlideApp() {
    * @see Glide#getPhotoCacheDir(Context)
    */
   @Nullable
-  public static File getPhotoCacheDir(@NonNull Context arg0) {
-    return Glide.getPhotoCacheDir(arg0);
+  public static File getPhotoCacheDir(@NonNull Context context) {
+    return Glide.getPhotoCacheDir(context);
   }
 
   /**
    * @see Glide#getPhotoCacheDir(Context, String)
    */
   @Nullable
-  public static File getPhotoCacheDir(@NonNull Context arg0, @NonNull String arg1) {
-    return Glide.getPhotoCacheDir(arg0, arg1);
+  public static File getPhotoCacheDir(@NonNull Context context, @NonNull String string) {
+    return Glide.getPhotoCacheDir(context, string);
   }
 
   /**
    * @see Glide#get(Context)
    */
   @NonNull
-  public static Glide get(@NonNull Context arg0) {
-    return Glide.get(arg0);
+  public static Glide get(@NonNull Context context) {
+    return Glide.get(context);
   }
 
   /**
@@ -67,8 +67,8 @@ public static void init(Glide glide) {
    */
   @VisibleForTesting
   @SuppressLint("VisibleForTests")
-  public static void init(@NonNull Context arg0, @NonNull GlideBuilder arg1) {
-    Glide.init(arg0, arg1);
+  public static void init(@NonNull Context context, @NonNull GlideBuilder builder) {
+    Glide.init(context, builder);
   }
 
   /**
@@ -84,32 +84,32 @@ public static void tearDown() {
    * @see Glide#with(Context)
    */
   @NonNull
-  public static GlideRequests with(@NonNull Context arg0) {
-    return (GlideRequests) Glide.with(arg0);
+  public static GlideRequests with(@NonNull Context context) {
+    return (GlideRequests) Glide.with(context);
   }
 
   /**
    * @see Glide#with(Activity)
    */
   @NonNull
-  public static GlideRequests with(@NonNull Activity arg0) {
-    return (GlideRequests) Glide.with(arg0);
+  public static GlideRequests with(@NonNull Activity activity) {
+    return (GlideRequests) Glide.with(activity);
   }
 
   /**
    * @see Glide#with(FragmentActivity)
    */
   @NonNull
-  public static GlideRequests with(@NonNull FragmentActivity arg0) {
-    return (GlideRequests) Glide.with(arg0);
+  public static GlideRequests with(@NonNull FragmentActivity activity) {
+    return (GlideRequests) Glide.with(activity);
   }
 
   /**
    * @see Glide#with(Fragment)
    */
   @NonNull
-  public static GlideRequests with(@NonNull Fragment arg0) {
-    return (GlideRequests) Glide.with(arg0);
+  public static GlideRequests with(@NonNull Fragment fragment) {
+    return (GlideRequests) Glide.with(fragment);
   }
 
   /**
@@ -117,15 +117,15 @@ public static GlideRequests with(@NonNull Fragment arg0) {
    */
   @Deprecated
   @NonNull
-  public static GlideRequests with(@NonNull android.app.Fragment arg0) {
-    return (GlideRequests) Glide.with(arg0);
+  public static GlideRequests with(@NonNull android.app.Fragment fragment) {
+    return (GlideRequests) Glide.with(fragment);
   }
 
   /**
    * @see Glide#with(View)
    */
   @NonNull
-  public static GlideRequests with(@NonNull View arg0) {
-    return (GlideRequests) Glide.with(arg0);
+  public static GlideRequests with(@NonNull View view) {
+    return (GlideRequests) Glide.with(view);
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index 9b92b8ab4..6c2f592f1 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -47,8 +47,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -56,8 +56,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -65,8 +65,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -74,8 +74,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -83,8 +83,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -92,8 +92,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -101,8 +101,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -119,9 +119,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -129,8 +129,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -138,8 +138,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -199,8 +199,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -221,8 +221,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -230,8 +230,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -239,8 +239,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -248,8 +248,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -257,8 +257,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -266,8 +266,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -275,8 +275,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -284,8 +284,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -304,8 +304,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -332,64 +332,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -416,8 +416,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -429,43 +429,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -478,15 +478,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -548,8 +548,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -557,30 +557,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -600,8 +601,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
index 00c6c5d7a..9536fe230 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -652,35 +652,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -688,8 +695,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -702,64 +709,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
index 7824b67f9..2756555af 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
@@ -5,8 +5,10 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -45,14 +47,14 @@ public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
 
   @Override
   @NonNull
-  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions arg0) {
-    return (GlideRequests) super.applyDefaultRequestOptions(arg0);
+  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.applyDefaultRequestOptions(options);
   }
 
   @Override
   @NonNull
-  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
-    return (GlideRequests) super.setDefaultRequestOptions(arg0);
+  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.setDefaultRequestOptions(options);
   }
 
   @Override
@@ -79,64 +81,64 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<Drawable>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Drawable arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Drawable drawable) {
+    return (GlideRequest<Drawable>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable String arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable String string) {
+    return (GlideRequest<Drawable>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Uri arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Uri uri) {
+    return (GlideRequest<Drawable>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable File arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable File file) {
+    return (GlideRequest<Drawable>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Integer arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<Drawable>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable URL arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable URL url) {
+    return (GlideRequest<Drawable>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable byte[] arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable byte[] bytes) {
+    return (GlideRequest<Drawable>) super.load(bytes);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Object arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Object o) {
+    return (GlideRequest<Drawable>) super.load(o);
   }
 
   @Override
@@ -149,8 +151,8 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<File> download(@Nullable Object arg0) {
-    return (GlideRequest<File>) super.download(arg0);
+  public GlideRequest<File> download(@Nullable Object o) {
+    return (GlideRequest<File>) super.download(o);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index bd161674f..90fe262f3 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -50,8 +50,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -59,8 +59,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -68,8 +68,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -77,8 +77,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -86,8 +86,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -95,8 +95,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -104,8 +104,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -122,9 +122,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -132,8 +132,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -141,8 +141,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -202,8 +202,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -224,8 +224,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -233,8 +233,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -242,8 +242,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -251,8 +251,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -260,8 +260,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -269,8 +269,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -278,8 +278,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -287,8 +287,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -307,8 +307,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -335,64 +335,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -419,8 +419,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -432,43 +432,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -481,15 +481,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -551,8 +551,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -560,30 +560,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -603,8 +604,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index ca9ea8813..f0377a0a7 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index 5043b0d98..dc6c873f8 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -542,8 +542,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -551,30 +551,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -594,8 +595,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index 6179c1263..ee391f551 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -536,11 +536,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -554,11 +554,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -568,11 +568,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -582,12 +582,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -597,12 +597,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -652,35 +652,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -688,8 +695,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -702,64 +709,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index be6e957ad..9fca6bfb5 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,8 +120,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -129,8 +129,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -190,8 +190,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -212,8 +212,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -221,8 +221,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -230,8 +230,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -239,8 +239,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -248,8 +248,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -257,8 +257,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -266,8 +266,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -275,8 +275,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -295,8 +295,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -323,64 +323,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -400,8 +400,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -413,43 +413,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -462,15 +462,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -532,8 +532,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -541,30 +541,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -584,8 +585,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
index ff1366641..e6e2e5380 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -284,11 +284,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -396,11 +396,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -536,11 +536,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -554,11 +554,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -568,11 +568,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -582,12 +582,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -597,12 +597,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -652,35 +652,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -688,8 +695,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -702,64 +709,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 8d0696027..39689658e 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -542,8 +542,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -551,30 +551,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -594,8 +595,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index 6179c1263..ee391f551 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -536,11 +536,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -554,11 +554,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -568,11 +568,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -582,12 +582,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -597,12 +597,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -652,35 +652,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -688,8 +695,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -702,64 +709,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index 74b45424d..f89ddbc67 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index ca9ea8813..f0377a0a7 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 14f17549b..3484cb188 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index ca9ea8813..f0377a0a7 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index 377c83922..ea3991d19 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
index fb9e7f7c3..05b6b7d5c 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index 0b3fbfea0..558dc9f8c 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
index 87d740099..bed0a7227 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
@@ -5,8 +5,10 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -55,14 +57,14 @@ public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
 
   @Override
   @NonNull
-  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions arg0) {
-    return (GlideRequests) super.applyDefaultRequestOptions(arg0);
+  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.applyDefaultRequestOptions(options);
   }
 
   @Override
   @NonNull
-  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
-    return (GlideRequests) super.setDefaultRequestOptions(arg0);
+  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.setDefaultRequestOptions(options);
   }
 
   @Override
@@ -89,64 +91,64 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<Drawable>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Drawable arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Drawable drawable) {
+    return (GlideRequest<Drawable>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable String arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable String string) {
+    return (GlideRequest<Drawable>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Uri arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Uri uri) {
+    return (GlideRequest<Drawable>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable File arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable File file) {
+    return (GlideRequest<Drawable>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Integer arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<Drawable>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable URL arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable URL url) {
+    return (GlideRequest<Drawable>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable byte[] arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable byte[] bytes) {
+    return (GlideRequest<Drawable>) super.load(bytes);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Object arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Object o) {
+    return (GlideRequest<Drawable>) super.load(o);
   }
 
   @Override
@@ -159,8 +161,8 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<File> download(@Nullable Object arg0) {
-    return (GlideRequest<File>) super.download(arg0);
+  public GlideRequest<File> download(@Nullable Object o) {
+    return (GlideRequest<File>) super.download(o);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index 6c0100161..76a59cadd 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -50,8 +50,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -59,8 +59,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -68,8 +68,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -77,8 +77,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -86,8 +86,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -95,8 +95,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -104,8 +104,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -122,9 +122,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -132,8 +132,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -141,8 +141,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -202,8 +202,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -224,8 +224,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -233,8 +233,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -242,8 +242,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -251,8 +251,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -260,8 +260,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -269,8 +269,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -278,8 +278,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -287,8 +287,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -307,8 +307,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -335,64 +335,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -419,8 +419,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -432,43 +432,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -481,15 +481,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -551,8 +551,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -560,30 +560,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -603,8 +604,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index ca9ea8813..f0377a0a7 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index ebeb08175..e7bfc9733 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -542,8 +542,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -551,30 +551,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -594,8 +595,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index 6179c1263..ee391f551 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -536,11 +536,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -554,11 +554,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -568,11 +568,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -582,12 +582,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -597,12 +597,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -652,35 +652,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -688,8 +695,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -702,64 +709,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 8604712ba..5474f2008 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -542,8 +542,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -551,30 +551,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -594,8 +595,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index 6179c1263..ee391f551 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -536,11 +536,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -554,11 +554,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -568,11 +568,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -582,12 +582,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -597,12 +597,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -652,35 +652,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -688,8 +695,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -702,64 +709,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index 58fb322a4..3e78d0ad4 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index ca9ea8813..f0377a0a7 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 970b5fb0a..27dae5637 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index ca9ea8813..f0377a0a7 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
index a7f63dd7c..c4cef3aa9 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
index fb9e7f7c3..05b6b7d5c 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
@@ -74,11 +74,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
+  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
     }
     return this;
   }
@@ -130,11 +130,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
+  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
     }
     return this;
   }
@@ -144,11 +144,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority arg0) {
+  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
     }
     return this;
   }
@@ -158,11 +158,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
     }
     return this;
   }
@@ -172,11 +172,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
     }
     return this;
   }
@@ -186,11 +186,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
     }
     return this;
   }
@@ -200,11 +200,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
     }
     return this;
   }
@@ -214,11 +214,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable arg0) {
+  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
     }
     return this;
   }
@@ -228,11 +228,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int arg0) {
+  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
     }
     return this;
   }
@@ -242,11 +242,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme arg0) {
+  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
     }
     return this;
   }
@@ -298,11 +298,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key arg0) {
+  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
     }
     return this;
   }
@@ -312,11 +312,11 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> arg0, @NonNull T arg1) {
+  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
     }
     return this;
   }
@@ -326,11 +326,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> arg0) {
+  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
     }
     return this;
   }
@@ -340,11 +340,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
+  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
     }
     return this;
   }
@@ -354,11 +354,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
+  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
     }
     return this;
   }
@@ -368,11 +368,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long arg0) {
+  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
     }
     return this;
   }
@@ -382,11 +382,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat arg0) {
+  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
     }
     return this;
   }
@@ -410,11 +410,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy arg0) {
+  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
     }
     return this;
   }
@@ -424,11 +424,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int arg0) {
+  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
     }
     return this;
   }
@@ -550,11 +550,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
     }
     return this;
   }
@@ -568,11 +568,11 @@
       "unchecked",
       "varargs"
   })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... arg0) {
+  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
     }
     return this;
   }
@@ -582,11 +582,11 @@
    */
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> arg0) {
+  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
     }
     return this;
   }
@@ -596,12 +596,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
     }
     return this;
   }
@@ -611,12 +611,12 @@
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
+  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
     if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(arg0, arg1);
+      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
     } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(arg0, arg1);
+      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
     }
     return this;
   }
@@ -666,35 +666,42 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions arg0) {
-    return (GlideRequest<TranscodeType>) super.apply(arg0);
+  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+    return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.transition(arg0);
+  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
+    return (GlideRequest<TranscodeType>) super.transition(options);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.listener(arg0);
+  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.listener(listener);
   }
 
   @Override
   @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.error(arg0);
+  @CheckResult
+  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
+    return (GlideRequest<TranscodeType>) super.addListener(listener);
+  }
+
+  @Override
+  @NonNull
+  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.error(builder);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
   }
 
   @Override
@@ -702,8 +709,8 @@
   @CheckResult
   @SafeVarargs
   @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... arg0) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(arg0);
+  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
+    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
   }
 
   @Override
@@ -716,64 +723,64 @@
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Object o) {
+    return (GlideRequest<TranscodeType>) super.load(o);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<TranscodeType>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
+    return (GlideRequest<TranscodeType>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable String string) {
+    return (GlideRequest<TranscodeType>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
+    return (GlideRequest<TranscodeType>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable File file) {
+    return (GlideRequest<TranscodeType>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<TranscodeType>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable URL url) {
+    return (GlideRequest<TranscodeType>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] arg0) {
-    return (GlideRequest<TranscodeType>) super.load(arg0);
+  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
+    return (GlideRequest<TranscodeType>) super.load(bytes);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
index 0b3fbfea0..558dc9f8c 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
@@ -48,8 +48,8 @@
    */
   @CheckResult
   @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return new GlideOptions().sizeMultiplier(arg0);
+  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return new GlideOptions().sizeMultiplier(value);
   }
 
   /**
@@ -57,8 +57,8 @@ public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) fl
    */
   @CheckResult
   @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0) {
-    return new GlideOptions().diskCacheStrategy(arg0);
+  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
+    return new GlideOptions().diskCacheStrategy(strategy);
   }
 
   /**
@@ -66,8 +66,8 @@ public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy arg0)
    */
   @CheckResult
   @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority arg0) {
-    return new GlideOptions().priority(arg0);
+  public static GlideOptions priorityOf(@NonNull Priority priority) {
+    return new GlideOptions().priority(priority);
   }
 
   /**
@@ -75,8 +75,8 @@ public static GlideOptions priorityOf(@NonNull Priority arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
+    return new GlideOptions().placeholder(drawable);
   }
 
   /**
@@ -84,8 +84,8 @@ public static GlideOptions placeholderOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int arg0) {
-    return new GlideOptions().placeholder(arg0);
+  public static GlideOptions placeholderOf(@DrawableRes int id) {
+    return new GlideOptions().placeholder(id);
   }
 
   /**
@@ -93,8 +93,8 @@ public static GlideOptions placeholderOf(@DrawableRes int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@Nullable Drawable drawable) {
+    return new GlideOptions().error(drawable);
   }
 
   /**
@@ -102,8 +102,8 @@ public static GlideOptions errorOf(@Nullable Drawable arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions errorOf(@DrawableRes int arg0) {
-    return new GlideOptions().error(arg0);
+  public static GlideOptions errorOf(@DrawableRes int id) {
+    return new GlideOptions().error(id);
   }
 
   /**
@@ -120,9 +120,9 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
-      @IntRange(from = 0) int arg1) {
-    return new GlideOptions().override(arg0, arg1);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
+      @IntRange(from = 0) int value1) {
+    return new GlideOptions().override(value0, value1);
   }
 
   /**
@@ -130,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().override(arg0);
+  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().override(value);
   }
 
   /**
@@ -139,8 +139,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions signatureOf(@NonNull Key arg0) {
-    return new GlideOptions().signature(arg0);
+  public static GlideOptions signatureOf(@NonNull Key key) {
+    return new GlideOptions().signature(key);
   }
 
   /**
@@ -200,8 +200,8 @@ public static GlideOptions circleCropTransform() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> arg0) {
-    return new GlideOptions().transform(arg0);
+  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
+    return new GlideOptions().transform(transformation);
   }
 
   /**
@@ -222,8 +222,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return new GlideOptions().set(arg0, arg1);
+  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
+    return new GlideOptions().set(option, t);
   }
 
   /**
@@ -231,8 +231,8 @@ public static GlideOptions noTransformation() {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
-    return new GlideOptions().decode(arg0);
+  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
+    return new GlideOptions().decode(clazz);
   }
 
   /**
@@ -240,8 +240,8 @@ public static GlideOptions decodeTypeOf(@NonNull Class<?> arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
-    return new GlideOptions().format(arg0);
+  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
+    return new GlideOptions().format(format);
   }
 
   /**
@@ -249,8 +249,8 @@ public static GlideOptions formatOf(@NonNull DecodeFormat arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
-    return new GlideOptions().frame(arg0);
+  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
+    return new GlideOptions().frame(value);
   }
 
   /**
@@ -258,8 +258,8 @@ public static GlideOptions frameOf(@IntRange(from = 0) long arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
-    return new GlideOptions().downsample(arg0);
+  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
+    return new GlideOptions().downsample(strategy);
   }
 
   /**
@@ -267,8 +267,8 @@ public static GlideOptions downsampleOf(@NonNull DownsampleStrategy arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
-    return new GlideOptions().timeout(arg0);
+  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
+    return new GlideOptions().timeout(value);
   }
 
   /**
@@ -276,8 +276,8 @@ public static GlideOptions timeoutOf(@IntRange(from = 0) int arg0) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg0) {
-    return new GlideOptions().encodeQuality(arg0);
+  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
+    return new GlideOptions().encodeQuality(value);
   }
 
   /**
@@ -285,8 +285,8 @@ public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int arg
    */
   @CheckResult
   @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat arg0) {
-    return new GlideOptions().encodeFormat(arg0);
+  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
+    return new GlideOptions().encodeFormat(format);
   }
 
   /**
@@ -305,8 +305,8 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float arg0) {
-    return (GlideOptions) super.sizeMultiplier(arg0);
+  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+    return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
@@ -333,64 +333,64 @@ public final GlideOptions onlyRetrieveFromCache(boolean flag) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy arg0) {
-    return (GlideOptions) super.diskCacheStrategy(arg0);
+  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority arg0) {
-    return (GlideOptions) super.priority(arg0);
+  public final GlideOptions priority(@NonNull Priority priority) {
+    return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+    return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int arg0) {
-    return (GlideOptions) super.placeholder(arg0);
+  public final GlideOptions placeholder(@DrawableRes int id) {
+    return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@Nullable Drawable drawable) {
+    return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int arg0) {
-    return (GlideOptions) super.fallback(arg0);
+  public final GlideOptions fallback(@DrawableRes int id) {
+    return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@Nullable Drawable drawable) {
+    return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int arg0) {
-    return (GlideOptions) super.error(arg0);
+  public final GlideOptions error(@DrawableRes int id) {
+    return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme arg0) {
-    return (GlideOptions) super.theme(arg0);
+  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+    return (GlideOptions) super.theme(theme);
   }
 
   @Override
@@ -417,8 +417,8 @@ public final GlideOptions override(int size) {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key arg0) {
-    return (GlideOptions) super.signature(arg0);
+  public final GlideOptions signature(@NonNull Key key) {
+    return (GlideOptions) super.signature(key);
   }
 
   @Override
@@ -430,43 +430,43 @@ public final GlideOptions clone() {
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> arg0, @NonNull T arg1) {
-    return (GlideOptions) super.set(arg0, arg1);
+  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
+    return (GlideOptions) super.set(option, t);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> arg0) {
-    return (GlideOptions) super.decode(arg0);
+  public final GlideOptions decode(@NonNull Class<?> clazz) {
+    return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat arg0) {
-    return (GlideOptions) super.encodeFormat(arg0);
+  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int arg0) {
-    return (GlideOptions) super.encodeQuality(arg0);
+  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+    return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long arg0) {
-    return (GlideOptions) super.frame(arg0);
+  public final GlideOptions frame(@IntRange(from = 0) long value) {
+    return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat arg0) {
-    return (GlideOptions) super.format(arg0);
+  public final GlideOptions format(@NonNull DecodeFormat format) {
+    return (GlideOptions) super.format(format);
   }
 
   @Override
@@ -479,15 +479,15 @@ public final GlideOptions disallowHardwareConfig() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy arg0) {
-    return (GlideOptions) super.downsample(arg0);
+  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+    return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int arg0) {
-    return (GlideOptions) super.timeout(arg0);
+  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+    return (GlideOptions) super.timeout(value);
   }
 
   @Override
@@ -549,8 +549,8 @@ public final GlideOptions circleCrop() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.transform(arg0);
+  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.transform(transformation);
   }
 
   @Override
@@ -558,30 +558,31 @@ public final GlideOptions transform(@NonNull Transformation<Bitmap> arg0) {
   @SuppressWarnings("varargs")
   @NonNull
   @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... arg0) {
-    return (GlideOptions) super.transforms(arg0);
+  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return (GlideOptions) super.transforms(transformations);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> arg0) {
-    return (GlideOptions) super.optionalTransform(arg0);
+  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> arg0,
-      @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.optionalTransform(arg0, arg1);
+  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> arg0, @NonNull Transformation<T> arg1) {
-    return (GlideOptions) super.transform(arg0, arg1);
+  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
+      @NonNull Transformation<T> transformation) {
+    return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
@@ -601,8 +602,8 @@ public final GlideOptions dontAnimate() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions arg0) {
-    return (GlideOptions) super.apply(arg0);
+  public final GlideOptions apply(@NonNull RequestOptions options) {
+    return (GlideOptions) super.apply(options);
   }
 
   @Override
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
index be9b074e6..69707f838 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
@@ -5,8 +5,10 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -57,14 +59,14 @@ public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
 
   @Override
   @NonNull
-  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions arg0) {
-    return (GlideRequests) super.applyDefaultRequestOptions(arg0);
+  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.applyDefaultRequestOptions(options);
   }
 
   @Override
   @NonNull
-  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
-    return (GlideRequests) super.setDefaultRequestOptions(arg0);
+  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
+    return (GlideRequests) super.setDefaultRequestOptions(options);
   }
 
   @Override
@@ -91,64 +93,64 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Bitmap arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Bitmap bitmap) {
+    return (GlideRequest<Drawable>) super.load(bitmap);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Drawable arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Drawable drawable) {
+    return (GlideRequest<Drawable>) super.load(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable String arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable String string) {
+    return (GlideRequest<Drawable>) super.load(string);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Uri arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Uri uri) {
+    return (GlideRequest<Drawable>) super.load(uri);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable File arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable File file) {
+    return (GlideRequest<Drawable>) super.load(file);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Integer arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@RawRes @DrawableRes @Nullable Integer id) {
+    return (GlideRequest<Drawable>) super.load(id);
   }
 
   @Override
   @Deprecated
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable URL arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable URL url) {
+    return (GlideRequest<Drawable>) super.load(url);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable byte[] arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable byte[] bytes) {
+    return (GlideRequest<Drawable>) super.load(bytes);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Object arg0) {
-    return (GlideRequest<Drawable>) super.load(arg0);
+  public GlideRequest<Drawable> load(@Nullable Object o) {
+    return (GlideRequest<Drawable>) super.load(o);
   }
 
   @Override
@@ -161,8 +163,8 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions arg0) {
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<File> download(@Nullable Object arg0) {
-    return (GlideRequest<File>) super.download(arg0);
+  public GlideRequest<File> download(@Nullable Object o) {
+    return (GlideRequest<File>) super.download(o);
   }
 
   @Override
diff --git a/gradle.properties b/gradle.properties
index 7b9e0f9a6..3b2e684c4 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,10 +1,10 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=true
 
-VERSION_NAME=4.6.1
+VERSION_NAME=4.8.0-SNAPSHOT
 VERSION_MAJOR=4
-VERSION_MINOR=6
-VERSION_PATCH=1
+VERSION_MINOR=8
+VERSION_PATCH=0
 GROUP=com.github.bumptech.glide
 
 POM_DESCRIPTION=A fast and efficient image loading library for Android focused on smooth scrolling.
@@ -15,7 +15,7 @@ POM_SCM_DEV_CONNECTION=scm:git@github.com:bumptech/glide.git
 POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
-ANDROID_SUPPORT_VERSION=27.1.0
+ANDROID_SUPPORT_VERSION=27.1.1
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.1
 ANDROID_GRADLE_VERSION=3.0.1
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java
index 5643c3b73..9f8947a90 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CenterInsideRegressionTest.java
@@ -17,7 +17,6 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 
@@ -27,7 +26,6 @@
 @RegressionTest
 public class CenterInsideRegressionTest {
   @Rule public final TestName testName = new TestName();
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
   @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   private BitmapRegressionTester bitmapRegressionTester;
   private Context context;
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/CircleCropRegressionTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/CircleCropRegressionTest.java
index d64c521e9..9d52425d6 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/CircleCropRegressionTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CircleCropRegressionTest.java
@@ -17,7 +17,6 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 
@@ -27,7 +26,6 @@
 @RegressionTest
 public class CircleCropRegressionTest {
   @Rule public final TestName testName = new TestName();
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
   @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   private BitmapRegressionTester bitmapRegressionTester;
   private Context context;
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
index 370805966..c71ba9e34 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -22,15 +23,12 @@
 import java.util.concurrent.ExecutionException;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 
 @RunWith(AndroidJUnit4.class)
 public class DrawableTransformationTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
-
   private Context context;
 
   @Before
@@ -117,15 +115,21 @@ public void load_withColorDrawable_fixedSize_nonUnitRequiredTransform_returnsBit
   @Test
   public void load_withColorDrawable_sizeOriginal_requiredTransform_fails()
       throws ExecutionException, InterruptedException {
-    Drawable colorDrawable = new ColorDrawable(Color.RED);
-
-    expectedException.expect(ExecutionException.class);
-    Glide.with(context)
-        .load(colorDrawable)
-        .apply(new RequestOptions()
-            .centerCrop())
-        .submit()
-        .get();
+    final Drawable colorDrawable = new ColorDrawable(Color.RED);
+
+    assertThrows(
+        ExecutionException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            Glide.with(context)
+                .load(colorDrawable)
+                .apply(new RequestOptions()
+                    .centerCrop())
+                .submit()
+                .get();
+          }
+        });
   }
 
   @Test
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
index b78a20779..d4f749822 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -17,7 +18,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 
@@ -27,7 +28,6 @@
 @RegressionTest
 public class FitCenterRegressionTest {
   @Rule public final TestName testName = new TestName();
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
   @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
   private BitmapRegressionTester bitmapRegressionTester;
   private Context context;
@@ -108,16 +108,23 @@ public void fitCenter_withShortRectangle_fitsWithinMaintainingAspectRatio()
   public void fitCenter_withHugeRectangle_throwsOOM()
       throws ExecutionException, InterruptedException {
     float multiplier = Integer.MAX_VALUE / (canonical.getWidth() * canonical.getHeight() * 2);
-    int overrideWidth = (int) multiplier * canonical.getWidth();
-    int overrideHeight = (int) multiplier * canonical.getHeight();
-    expectedException.expect(ExecutionException.class);
-    GlideApp
-        .with(context)
-        .asBitmap()
-        .load(canonical.getBitmap())
-        .fitCenter()
-        .override(overrideWidth, overrideHeight)
-        .submit()
-        .get();
+    final int overrideWidth = (int) multiplier * canonical.getWidth();
+    final int overrideHeight = (int) multiplier * canonical.getHeight();
+
+    assertThrows(
+        ExecutionException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            GlideApp
+                .with(context)
+                .asBitmap()
+                .load(canonical.getBitmap())
+                .fitCenter()
+                .override(overrideWidth, overrideHeight)
+                .submit()
+                .get();
+          }
+        });
   }
 }
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
index e41db5705..96c983ae0 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
@@ -3,6 +3,7 @@
 import static com.bumptech.glide.request.RequestOptions.bitmapTransform;
 import static com.bumptech.glide.request.RequestOptions.centerCropTransform;
 import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
 
 import android.content.ContentResolver;
 import android.content.Context;
@@ -27,7 +28,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 import org.mockito.MockitoAnnotations;
@@ -36,7 +37,6 @@
 public class NonBitmapDrawableResourcesTest {
   @Rule public final TestName testName = new TestName();
   @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
 
   private Context context;
 
@@ -123,12 +123,19 @@ public void load_withShapeDrawableResourceId_asDrawable_producesNonNullDrawable(
   @Test
   public void load_withShapeDrawableResourceId_asDrawable_withTransformation_sizeOriginal_fails()
       throws ExecutionException, InterruptedException {
-    expectedException.expect(ExecutionException.class);
-    Glide.with(context)
-        .load(ResourceIds.drawable.shape_drawable)
-        .apply(centerCropTransform())
-        .submit()
-        .get();
+    assertThrows(
+        ExecutionException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            Glide.with(context)
+                .load(ResourceIds.drawable.shape_drawable)
+                .apply(centerCropTransform())
+                .submit()
+                .get();
+
+          }
+        });
   }
 
   @Test
@@ -147,12 +154,18 @@ public void load_withShapeDrawableResourceId_asDrawable_withTransformation_valid
   @Test
   public void load_withShapeDrawableResourceId_asBitmap_withSizeOriginal_fails()
       throws ExecutionException, InterruptedException {
-    expectedException.expect(ExecutionException.class);
-    Glide.with(context)
-        .asBitmap()
-        .load(ResourceIds.drawable.shape_drawable)
-        .submit()
-        .get();
+    assertThrows(
+        ExecutionException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            Glide.with(context)
+                .asBitmap()
+                .load(ResourceIds.drawable.shape_drawable)
+                .submit()
+                .get();
+          }
+        });
   }
 
   @Test
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index ea9fcea8f..f200fa96c 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -11,6 +11,7 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
+import android.os.Build;
 import android.os.ParcelFileDescriptor;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -54,6 +55,7 @@
 import com.bumptech.glide.load.resource.bitmap.ByteBufferBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.DefaultImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.Downsampler;
+import com.bumptech.glide.load.resource.bitmap.ExifInterfaceImageHeaderParser;
 import com.bumptech.glide.load.resource.bitmap.ResourceBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.UnitBitmapDecoder;
@@ -331,6 +333,13 @@ private static void throwIncorrectGlideModule(Exception e) {
     final Resources resources = context.getResources();
 
     registry = new Registry();
+    // Right now we're only using this parser for HEIF images, which are only supported on OMR1+.
+    // If we need this for other file types, we should consider removing this restriction.
+    // Note that order here matters. We want to check the ExifInterface parser first for orientation
+    // and then fall back to DefaultImageHeaderParser for other fields.
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
+      registry.register(new ExifInterfaceImageHeaderParser());
+    }
     registry.register(new DefaultImageHeaderParser());
 
     Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),
diff --git a/library/src/main/java/com/bumptech/glide/ListPreloader.java b/library/src/main/java/com/bumptech/glide/ListPreloader.java
index a6f5835f8..e82125729 100644
--- a/library/src/main/java/com/bumptech/glide/ListPreloader.java
+++ b/library/src/main/java/com/bumptech/glide/ListPreloader.java
@@ -33,7 +33,7 @@
 
   private int lastEnd;
   private int lastStart;
-  private int lastFirstVisible;
+  private int lastFirstVisible = -1;
   private int totalItemCount;
 
   private boolean isIncreasing = true;
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 5e523276f..6b6a385a9 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -34,6 +34,8 @@
 import com.bumptech.glide.util.Util;
 import java.io.File;
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * A generic class that can handle setting options and staring loads for generic resource types.
@@ -66,7 +68,7 @@
   @Nullable private Object model;
   // model may occasionally be null, so to enforce that load() was called, put a boolean rather
   // than relying on model not to be null.
-  @Nullable private RequestListener<TranscodeType> requestListener;
+  @Nullable private List<RequestListener<TranscodeType>> requestListeners;
   @Nullable private RequestBuilder<TranscodeType> thumbnailBuilder;
   @Nullable private RequestBuilder<TranscodeType> errorBuilder;
   @Nullable private Float thumbSizeMultiplier;
@@ -144,6 +146,9 @@ protected RequestOptions getMutableOptions() {
    * instance of an exception handler per type of request (usually activity/fragment) rather than
    * pass one in per request to avoid some redundant object allocation.
    *
+   * <p>Subsequent calls to this method will replace previously set listeners. To set multiple
+   * listeners, use {@link #addListener} instead.
+   *
    * @param requestListener The request listener to use.
    * @return This request builder.
    */
@@ -152,8 +157,27 @@ protected RequestOptions getMutableOptions() {
   @SuppressWarnings("unchecked")
   public RequestBuilder<TranscodeType> listener(
       @Nullable RequestListener<TranscodeType> requestListener) {
-    this.requestListener = requestListener;
+    this.requestListeners = null;
+    return addListener(requestListener);
+  }
 
+  /**
+   * Adds a {@link RequestListener}. If called multiple times, all passed
+   * {@link RequestListener listeners} will be called in order.
+   *
+   * @param requestListener The request listener to use. If {@code null}, this method is a noop.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public RequestBuilder<TranscodeType> addListener(
+      @Nullable RequestListener<TranscodeType> requestListener) {
+    if (requestListener != null) {
+      if (this.requestListeners == null) {
+        this.requestListeners = new ArrayList<>();
+      }
+      this.requestListeners.add(requestListener);
+    }
     return this;
   }
 
@@ -1041,7 +1065,7 @@ private Request obtainRequest(
         priority,
         target,
         targetListener,
-        requestListener,
+        requestListeners,
         requestCoordinator,
         glideContext.getEngine(),
         transitionOptions.getTransitionFactory());
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 567757f45..139df6f43 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -11,8 +11,10 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.RawRes;
 import android.view.View;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -424,7 +426,7 @@ public void onDestroy() {
   @NonNull
   @CheckResult
   @Override
-  public RequestBuilder<Drawable> load(@Nullable Integer resourceId) {
+  public RequestBuilder<Drawable> load(@RawRes @DrawableRes @Nullable Integer resourceId) {
     return asDrawable().load(resourceId);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
index 9f5d79e62..85df91b5f 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/ExifOrientationStream.java
@@ -123,7 +123,7 @@ public int read(@NonNull byte[] buffer, int byteOffset, int byteCount) throws IO
   public long skip(long byteCount) throws IOException {
     long skipped = super.skip(byteCount);
     if (skipped > 0) {
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       position = (int) (position + skipped);
     }
     return skipped;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 4e427b920..86cdfb506 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -37,6 +37,8 @@
     this.cb = cb;
   }
 
+  // See TODO below.
+  @SuppressWarnings("PMD.CollapsibleIfStatements")
   @Override
   public boolean startNext() {
     List<Key> sourceIds = helper.getCacheKeys();
@@ -48,9 +50,12 @@ public boolean startNext() {
       if (File.class.equals(helper.getTranscodeClass())) {
         return false;
       }
-      throw new IllegalStateException(
-          "Failed to find any load path from " + helper.getModelClass() + " to "
-              + helper.getTranscodeClass());
+      // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes
+      // all loads to fail. Without this assertion it causes loads to miss the disk cache
+      // unnecessarily
+      // throw new IllegalStateException(
+      //    "Failed to find any load path from " + helper.getModelClass() + " to "
+      //        + helper.getTranscodeClass());
     }
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
index 321077144..921d4c488 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderFactory.java
@@ -2,12 +2,18 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.Registry;
 
 /**
- * An interface for creating a {@link ModelLoader} for a given model type. Will be retained
- * statically so should not retain {@link Context} or any other objects that cannot be retained for
- * the life of the application. ModelLoaders will not be retained statically so it is safe for any
- * ModelLoader built by this factory to retain a reference to a {@link Context}.
+ * An interface for creating a {@link ModelLoader} for a given model type.
+ *
+ * <p>The application {@link android.content.Context} can be passed in to the constructor of the
+ * factory when necessary. It's unsafe to retain {@link android.app.Activity}
+ * {@link android.content.Context}s in factories. The {@link android.content.Context} can be
+ * obtained from
+ * {@link com.bumptech.glide.module.LibraryGlideModule#registerComponents(Context, Glide, Registry)}
+ * in most cases.
  *
  * @param <T> The type of the model the {@link com.bumptech.glide.load.model.ModelLoader}s built by
  *            this factory can handle
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index 5b0dafe49..bbe616a76 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -80,7 +80,6 @@ public String toString() {
     private DataCallback<? super Data> callback;
     @Nullable
     private List<Throwable> exceptions;
-    private boolean isCancelled;
 
     MultiFetcher(
         @NonNull List<DataFetcher<Data>> fetchers,
@@ -113,7 +112,6 @@ public void cleanup() {
 
     @Override
     public void cancel() {
-      isCancelled = true;
       for (DataFetcher<Data> fetcher : fetchers) {
         fetcher.cancel();
       }
@@ -133,10 +131,6 @@ public DataSource getDataSource() {
 
     @Override
     public void onDataReady(@Nullable Data data) {
-      if (isCancelled) {
-        return;
-      }
-
       if (data != null) {
         callback.onDataReady(data);
       } else {
@@ -146,19 +140,11 @@ public void onDataReady(@Nullable Data data) {
 
     @Override
     public void onLoadFailed(@NonNull Exception e) {
-      if (isCancelled) {
-        return;
-      }
-
       Preconditions.checkNotNull(exceptions).add(e);
       startNextOrFail();
     }
 
     private void startNextOrFail() {
-      if (isCancelled) {
-        return;
-      }
-
       if (currentIndex < fetchers.size() - 1) {
         currentIndex++;
         loadData(priority, callback);
diff --git a/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java b/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
index 16bb6cfde..c00fac18e 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/StringLoader.java
@@ -29,11 +29,16 @@ public StringLoader(ModelLoader<Uri, Data> uriLoader) {
   public LoadData<Data> buildLoadData(@NonNull String model, int width, int height,
       @NonNull Options options) {
     Uri uri = parseUri(model);
-    return uri == null ? null : uriLoader.buildLoadData(uri, width, height, options);
+    if (uri == null || !uriLoader.handles(uri)) {
+      return null;
+    }
+    return uriLoader.buildLoadData(uri, width, height, options);
   }
 
   @Override
   public boolean handles(@NonNull String model) {
+    // Avoid parsing the Uri twice and simply return null from buildLoadData if we don't handle this
+    // particular Uri type.
     return true;
   }
 
@@ -66,7 +71,8 @@ private static Uri toFileUri(String path) {
 
     @NonNull
     @Override
-    public ModelLoader<String, InputStream> build(MultiModelLoaderFactory multiFactory) {
+    public ModelLoader<String, InputStream> build(
+        @NonNull MultiModelLoaderFactory multiFactory) {
       return new StringLoader<>(multiFactory.build(Uri.class, InputStream.class));
     }
 
@@ -84,7 +90,8 @@ public void teardown() {
 
     @NonNull
     @Override
-    public ModelLoader<String, ParcelFileDescriptor> build(MultiModelLoaderFactory multiFactory) {
+    public ModelLoader<String, ParcelFileDescriptor> build(
+        @NonNull MultiModelLoaderFactory multiFactory) {
       return new StringLoader<>(multiFactory.build(Uri.class, ParcelFileDescriptor.class));
     }
 
@@ -101,7 +108,8 @@ public void teardown() {
       implements ModelLoaderFactory<String, AssetFileDescriptor> {
 
     @Override
-    public ModelLoader<String, AssetFileDescriptor> build(MultiModelLoaderFactory multiFactory) {
+    public ModelLoader<String, AssetFileDescriptor> build(
+        @NonNull MultiModelLoaderFactory multiFactory) {
       return new StringLoader<>(multiFactory.build(Uri.class, AssetFileDescriptor.class));
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
index a76b0e983..44bc67066 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
@@ -22,7 +22,7 @@
  * <code>
  * public class FillSpace extends BitmapTransformation {
  *     private static final String ID = "com.bumptech.glide.transformations.FillSpace";
- *     private static final String ID_BYTES = ID.getBytes(STRING_CHARSET_NAME);
+ *     private static final byte[] ID_BYTES = ID.getBytes(Charset.forName("UTF-8"));
  *
  *     {@literal @Override}
  *     public Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) {
@@ -34,7 +34,7 @@
  *     }
  *
  *     {@literal @Override}
- *     public void equals(Object o) {
+ *     public boolean equals(Object o) {
  *       return o instanceof FillSpace;
  *     }
  *
@@ -44,8 +44,7 @@
  *     }
  *
  *     {@literal @Override}
- *     public void updateDiskCacheKey(MessageDigest messageDigest)
- *         throws UnsupportedEncodingException {
+ *     public void updateDiskCacheKey(MessageDigest messageDigest) {
  *       messageDigest.update(ID_BYTES);
  *     }
  * }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java
new file mode 100644
index 000000000..92152d778
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ExifInterfaceImageHeaderParser.java
@@ -0,0 +1,54 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.media.ExifInterface;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.RequiresApi;
+import com.bumptech.glide.load.ImageHeaderParser;
+import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.util.ByteBufferUtil;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+
+/**
+ * Uses {@link ExifInterface} to parse orientation data.
+ *
+ * <p>ExifInterface supports the HEIF format on OMR1+. Glide's {@link DefaultImageHeaderParser}
+ * doesn't currently support HEIF. In the future we should reconcile these two classes, but for
+ * now this is a simple way to ensure that HEIF files are oriented correctly on platforms where
+ * they're supported.
+ */
+@RequiresApi(Build.VERSION_CODES.O_MR1)
+public final class ExifInterfaceImageHeaderParser implements ImageHeaderParser {
+
+  @NonNull
+  @Override
+  public ImageType getType(@NonNull InputStream is) throws IOException {
+    return ImageType.UNKNOWN;
+  }
+
+  @NonNull
+  @Override
+  public ImageType getType(@NonNull ByteBuffer byteBuffer) throws IOException {
+    return ImageType.UNKNOWN;
+  }
+
+  @Override
+  public int getOrientation(@NonNull InputStream is, @NonNull ArrayPool byteArrayPool)
+      throws IOException {
+    ExifInterface exifInterface = new ExifInterface(is);
+    int result = exifInterface.getAttributeInt(
+            ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
+    if (result == ExifInterface.ORIENTATION_UNDEFINED) {
+      return ImageHeaderParser.UNKNOWN_ORIENTATION;
+    }
+    return result;
+  }
+
+  @Override
+  public int getOrientation(@NonNull ByteBuffer byteBuffer, @NonNull ArrayPool byteArrayPool)
+      throws IOException {
+    return getOrientation(ByteBufferUtil.toStream(byteBuffer), byteArrayPool);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
index c8139383f..88ecc15a3 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream.java
@@ -385,7 +385,7 @@ public synchronized long skip(long byteCount) throws IOException {
       pos = (int) (pos + byteCount);
       return byteCount;
     }
-    // See http://errorprone.info/bugpattern/IntLongMath.
+    // See https://errorprone.info/bugpattern/IntLongMath.
     long read = (long) count - pos;
     pos = count;
 
@@ -394,7 +394,7 @@ public synchronized long skip(long byteCount) throws IOException {
         return read;
       }
       if (count - pos >= byteCount - read) {
-        // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+        // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
         pos = (int) (pos + byteCount - read);
         return byteCount;
       }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
index 2f90275c7..68f81bd84 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
@@ -6,8 +6,10 @@
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.content.res.ResourcesCompat;
 import android.support.v7.content.res.AppCompatResources;
+import android.support.v7.view.ContextThemeWrapper;
 
 /**
  * Handles decoding Drawables with the v7 support library if present and falling back to the v4
@@ -22,8 +24,9 @@ private DrawableDecoderCompat() {
   /**
    * See {@code getDrawable(Context, int, Theme)}.
    */
-  public static Drawable getDrawable(Context context, @DrawableRes int id) {
-    return getDrawable(context, id, /*theme=*/ null);
+  public static Drawable getDrawable(
+      Context ourContext, Context targetContext, @DrawableRes int id) {
+    return getDrawable(ourContext, targetContext, id, /*theme=*/ null);
   }
 
   /**
@@ -33,25 +36,38 @@ public static Drawable getDrawable(Context context, @DrawableRes int id) {
    * @param theme Used instead of the {@link Theme} returned from the given {@link Context} if
    * non-null when loading the {@link Drawable}.
    */
-  public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullable Theme theme) {
+  public static Drawable getDrawable(
+      Context ourContext, @DrawableRes int id, @Nullable Theme theme) {
+    return getDrawable(ourContext, ourContext, id, theme);
+  }
+
+  private static Drawable getDrawable(
+      Context ourContext, Context targetContext, @DrawableRes int id, @Nullable Theme theme) {
     try {
       // Race conditions may cause us to attempt to load using v7 more than once. That's ok since
       // this check is a modest optimization and the output will be correct anyway.
       if (shouldCallAppCompatResources) {
-        return loadDrawableV7(context, id);
+        return loadDrawableV7(targetContext, id, theme);
       }
     } catch (NoClassDefFoundError error) {
       shouldCallAppCompatResources = false;
+    } catch (IllegalStateException e) {
+      if (ourContext.getPackageName().equals(targetContext.getPackageName())) {
+        throw e;
+      }
+      return ContextCompat.getDrawable(targetContext, id);
     } catch (Resources.NotFoundException e) {
       // Ignored, this can be thrown when drawable compat attempts to decode a canary resource. If
       // that decode attempt fails, we still want to try with the v4 ResourcesCompat below.
     }
 
-    return loadDrawableV4(context, id, theme != null ? theme : context.getTheme());
+    return loadDrawableV4(targetContext, id, theme != null ? theme : targetContext.getTheme());
   }
 
-  private static Drawable loadDrawableV7(Context context, @DrawableRes int id) {
-    return AppCompatResources.getDrawable(context, id);
+  private static Drawable loadDrawableV7(Context context, @DrawableRes int id,
+      @Nullable Theme theme) {
+    Context resourceContext = theme != null ? new ContextThemeWrapper(context, theme) : context;
+    return AppCompatResources.getDrawable(resourceContext, id);
   }
 
   private static Drawable loadDrawableV4(
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
index 1550ef519..f37045c7f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
@@ -47,10 +47,10 @@ public boolean handles(@NonNull Uri source, @NonNull Options options) {
       @NonNull Options options) {
     @DrawableRes int resId = loadResourceIdFromUri(source);
     String packageName = source.getAuthority();
-    Context toUse = packageName.equals(context.getPackageName())
+    Context targetContext = packageName.equals(context.getPackageName())
         ? context : getContextForPackage(source, packageName);
     // We can't get a theme from another application.
-    Drawable drawable = DrawableDecoderCompat.getDrawable(toUse, resId);
+    Drawable drawable = DrawableDecoderCompat.getDrawable(context, targetContext, resId);
     return NonOwnedDrawableResource.newInstance(drawable);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index e46188c9e..75d3a2325 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -561,6 +561,8 @@ public RequestOptions priority(@NonNull Priority priority) {
   /**
    * Sets an {@link Drawable} to display while a resource is loading.
    *
+   * <p>Replaces any previous calls to this method or {@link #placeholder(int)}.
+   *
    * @param drawable The drawable to display as a placeholder.
    * @return This request builder.
    */
@@ -574,6 +576,9 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
     this.placeholderDrawable = drawable;
     fields |= PLACEHOLDER;
 
+    placeholderId = 0;
+    fields &= ~PLACEHOLDER_ID;
+
     return selfOrThrowIfLocked();
   }
 
@@ -581,6 +586,8 @@ public RequestOptions placeholder(@Nullable Drawable drawable) {
    * Sets an Android resource id for a {@link Drawable} resource to
    * display while a resource is loading.
    *
+   * <p>Replaces any previous calls to this method or {@link #placeholder(Drawable)}
+   *
    * @param resourceId The id of the resource to use as a placeholder
    * @return This request builder.
    */
@@ -594,6 +601,9 @@ public RequestOptions placeholder(@DrawableRes int resourceId) {
     this.placeholderId = resourceId;
     fields |= PLACEHOLDER_ID;
 
+    placeholderDrawable = null;
+    fields &= ~PLACEHOLDER;
+
     return selfOrThrowIfLocked();
   }
 
@@ -604,6 +614,8 @@ public RequestOptions placeholder(@DrawableRes int resourceId) {
    * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the
    * error drawable is not set, the placeholder will be displayed.
    *
+   * <p>Replaces any previous calls to this method or {@link #fallback(int)}.
+   *
    * @see #placeholder(Drawable)
    * @see #placeholder(int)
    *
@@ -620,6 +632,9 @@ public RequestOptions fallback(@Nullable Drawable drawable) {
     this.fallbackDrawable = drawable;
     fields |= FALLBACK;
 
+    fallbackId = 0;
+    fields &= ~FALLBACK_ID;
+
     return selfOrThrowIfLocked();
   }
 
@@ -630,6 +645,8 @@ public RequestOptions fallback(@Nullable Drawable drawable) {
    * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If
    * the error drawable is not set, the placeholder will be displayed.
    *
+   * <p>Replaces any previous calls to this method or {@link #fallback(Drawable)}.
+   *
    * @see #placeholder(Drawable)
    * @see #placeholder(int)
    *
@@ -646,12 +663,17 @@ public RequestOptions fallback(@DrawableRes int resourceId) {
     this.fallbackId = resourceId;
     fields |= FALLBACK_ID;
 
+    fallbackDrawable = null;
+    fields &= ~FALLBACK;
+
     return selfOrThrowIfLocked();
   }
 
   /**
    * Sets a {@link Drawable} to display if a load fails.
    *
+   * <p>Replaces any previous calls to this method or {@link #error(int)}
+   *
    * @param drawable The drawable to display.
    * @return This request builder.
    */
@@ -665,12 +687,17 @@ public RequestOptions error(@Nullable Drawable drawable) {
     this.errorPlaceholder = drawable;
     fields |= ERROR_PLACEHOLDER;
 
+    this.errorId = 0;
+    fields &= ~ERROR_ID;
+
     return selfOrThrowIfLocked();
   }
 
   /**
    * Sets a resource to display if a load fails.
    *
+   * <p>Replaces any previous calls to this method or {@link #error(Drawable)}
+   *
    * @param resourceId The id of the resource to use as a placeholder.
    * @return This request builder.
    */
@@ -683,6 +710,9 @@ public RequestOptions error(@DrawableRes int resourceId) {
     this.errorId = resourceId;
     fields |= ERROR_ID;
 
+    this.errorPlaceholder = null;
+    fields &= ~ERROR_PLACEHOLDER;
+
     return selfOrThrowIfLocked();
   }
 
@@ -1391,15 +1421,23 @@ public RequestOptions apply(@NonNull RequestOptions other) {
     }
     if (isSet(other.fields, ERROR_PLACEHOLDER)) {
       errorPlaceholder = other.errorPlaceholder;
+      errorId = 0;
+      fields &= ~ERROR_ID;
     }
     if (isSet(other.fields, ERROR_ID)) {
       errorId = other.errorId;
+      errorPlaceholder = null;
+      fields &= ~ERROR_PLACEHOLDER;
     }
     if (isSet(other.fields, PLACEHOLDER)) {
       placeholderDrawable = other.placeholderDrawable;
+      placeholderId = 0;
+      fields &= ~PLACEHOLDER_ID;
     }
     if (isSet(other.fields, PLACEHOLDER_ID)) {
       placeholderId = other.placeholderId;
+      placeholderDrawable = null;
+      fields &= ~PLACEHOLDER;
     }
     if (isSet(other.fields, IS_CACHEABLE)) {
       isCacheable = other.isCacheable;
@@ -1416,9 +1454,13 @@ public RequestOptions apply(@NonNull RequestOptions other) {
     }
     if (isSet(other.fields, FALLBACK)) {
       fallbackDrawable = other.fallbackDrawable;
+      fallbackId = 0;
+      fields &= ~FALLBACK_ID;
     }
     if (isSet(other.fields, FALLBACK_ID)) {
       fallbackId = other.fallbackId;
+      fallbackDrawable = null;
+      fields &= ~FALLBACK;
     }
     if (isSet(other.fields, THEME)) {
       theme = other.theme;
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 1cc122df3..eee923aa3 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -24,6 +24,7 @@
 import com.bumptech.glide.util.Util;
 import com.bumptech.glide.util.pool.FactoryPools;
 import com.bumptech.glide.util.pool.StateVerifier;
+import java.util.List;
 
 /**
  * A {@link Request} that loads a {@link com.bumptech.glide.load.engine.Resource} into a given
@@ -103,7 +104,7 @@
   private int overrideHeight;
   private Priority priority;
   private Target<R> target;
-  private RequestListener<R> requestListener;
+  @Nullable private List<RequestListener<R>> requestListeners;
   private Engine engine;
   private TransitionFactory<? super R> animationFactory;
   private Resource<R> resource;
@@ -127,7 +128,7 @@
       Priority priority,
       Target<R> target,
       RequestListener<R> targetListener,
-      RequestListener<R> requestListener,
+      @Nullable List<RequestListener<R>> requestListeners,
       RequestCoordinator requestCoordinator,
       Engine engine,
       TransitionFactory<? super R> animationFactory) {
@@ -147,7 +148,7 @@
         priority,
         target,
         targetListener,
-        requestListener,
+        requestListeners,
         requestCoordinator,
         engine,
         animationFactory);
@@ -171,7 +172,7 @@ private void init(
       Priority priority,
       Target<R> target,
       RequestListener<R> targetListener,
-      RequestListener<R> requestListener,
+      @Nullable List<RequestListener<R>> requestListeners,
       RequestCoordinator requestCoordinator,
       Engine engine,
       TransitionFactory<? super R> animationFactory) {
@@ -185,7 +186,7 @@ private void init(
     this.priority = priority;
     this.target = target;
     this.targetListener = targetListener;
-    this.requestListener = requestListener;
+    this.requestListeners = requestListeners;
     this.requestCoordinator = requestCoordinator;
     this.engine = engine;
     this.animationFactory = animationFactory;
@@ -209,7 +210,7 @@ public void recycle() {
     overrideWidth = -1;
     overrideHeight = -1;
     target = null;
-    requestListener = null;
+    requestListeners = null;
     targetListener = null;
     requestCoordinator = null;
     animationFactory = null;
@@ -570,10 +571,18 @@ private void onResourceReady(Resource<R> resource, R result, DataSource dataSour
 
     isCallingCallbacks = true;
     try {
-      if ((requestListener == null
-          || !requestListener.onResourceReady(result, model, target, dataSource, isFirstResource))
-          && (targetListener == null
-          || !targetListener.onResourceReady(result, model, target, dataSource, isFirstResource))) {
+      boolean anyListenerHandledUpdatingTarget = false;
+      if (requestListeners != null) {
+        for (RequestListener<R> listener : requestListeners) {
+          anyListenerHandledUpdatingTarget |=
+              listener.onResourceReady(result, model, target, dataSource, isFirstResource);
+        }
+      }
+      anyListenerHandledUpdatingTarget |=
+          targetListener != null
+              && targetListener.onResourceReady(result, model, target, dataSource, isFirstResource);
+
+      if (!anyListenerHandledUpdatingTarget) {
         Transition<? super R> animation =
             animationFactory.build(dataSource, isFirstResource);
         target.onResourceReady(result, animation);
@@ -609,10 +618,18 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
     isCallingCallbacks = true;
     try {
       //TODO: what if this is a thumbnail request?
-      if ((requestListener == null
-          || !requestListener.onLoadFailed(e, model, target, isFirstReadyResource()))
-          && (targetListener == null
-          || !targetListener.onLoadFailed(e, model, target, isFirstReadyResource()))) {
+      boolean anyListenerHandledUpdatingTarget = false;
+      if (requestListeners != null) {
+        for (RequestListener<R> listener : requestListeners) {
+          anyListenerHandledUpdatingTarget |=
+              listener.onLoadFailed(e, model, target, isFirstReadyResource());
+        }
+      }
+      anyListenerHandledUpdatingTarget |=
+          targetListener != null
+              && targetListener.onLoadFailed(e, model, target, isFirstReadyResource());
+
+      if (!anyListenerHandledUpdatingTarget) {
         setErrorPlaceholder();
       }
     } finally {
@@ -633,14 +650,19 @@ public boolean isEquivalentTo(Request o) {
           && requestOptions.equals(that.requestOptions)
           && priority == that.priority
           // We do not want to require that RequestListeners implement equals/hashcode, so we don't
-          // compare them using equals(). We can however, at least assert that the request listener
-          // is either present or not present in both requests.
-          && (requestListener != null
-          ? that.requestListener != null : that.requestListener == null);
+          // compare them using equals(). We can however, at least assert that the same amount of
+          // request listeners are present in both requests
+          && listenerCountEquals(this, that);
     }
     return false;
   }
 
+  private static boolean listenerCountEquals(SingleRequest<?> first, SingleRequest<?> second) {
+    int firstListenerCount = first.requestListeners == null ? 0 : first.requestListeners.size();
+    int secondListenerCount = second.requestListeners == null ? 0 : second.requestListeners.size();
+    return firstListenerCount == secondListenerCount;
+  }
+
   private void logV(String message) {
     Log.v(TAG, message + " this: " + tag);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 635b6b5d0..58f001b97 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -33,8 +33,8 @@
  *
  * <p> Any calls to {@link View#setTag(Object)}} on a View given to this class will result in
  * excessive allocations and and/or {@link IllegalArgumentException}s. If you must call {@link
- * View#setTag(Object)} on a view, consider using {@link BaseTarget} or {@link SimpleTarget}
- * instead. </p>
+ * View#setTag(Object)} on a view, use {@link #setTagId(int)} to specify a custom tag for Glide to
+ * use.
  *
  * <p> Subclasses must call super in {@link #onLoadCleared(Drawable)} </p>
  *
diff --git a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
index bf8cee9a1..d2ce2841d 100644
--- a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
@@ -84,7 +84,7 @@ private long getBytesToRead(long targetByteCount) {
 
   private void updateAvailableBytesAfterRead(long bytesRead) {
     if (availableBytes != UNSET && bytesRead != END_OF_STREAM) {
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       availableBytes = (int) (availableBytes - bytesRead);
     }
   }
diff --git a/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java b/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
index 10a6bc568..140bf5b92 100644
--- a/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
@@ -2,16 +2,22 @@
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import android.app.Application;
 import android.widget.ImageView;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.resource.SimpleResource;
 import com.bumptech.glide.request.Request;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.SingleRequest;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.tests.BackgroundUtil.BackgroundTester;
@@ -20,6 +26,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
@@ -32,8 +40,12 @@
 public class RequestBuilderTest {
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 
+  @Mock private RequestListener<Object> listener1;
+  @Mock private RequestListener<Object> listener2;
+  @Mock private Target<Object> target;
   @Mock private GlideContext glideContext;
   @Mock private RequestManager requestManager;
+  @Captor private ArgumentCaptor<SingleRequest<Object>> requestCaptor;
   private Glide glide;
   private Application context;
 
@@ -57,12 +69,11 @@ public void testThrowsWhenTransitionsOptionsIsNull() {
 
   @Test
   public void testDoesNotThrowWithNullModelWhenRequestIsBuilt() {
-    getNullModelRequest().into(mock(Target.class));
+    getNullModelRequest().into(target);
   }
 
   @Test
   public void testAddsNewRequestToRequestTracker() {
-    Target<Object> target = mock(Target.class);
     getNullModelRequest().into(target);
 
     verify(requestManager).track(eq(target), isA(Request.class));
@@ -71,7 +82,6 @@ public void testAddsNewRequestToRequestTracker() {
   @Test
   public void testRemovesPreviousRequestFromRequestTracker() {
     Request previous = mock(Request.class);
-    Target<Object> target = mock(Target.class);
     when(target.getRequest()).thenReturn(previous);
 
     getNullModelRequest().into(target);
@@ -112,6 +122,35 @@ public void runTest() {
     });
   }
 
+  @Test
+  public void testMultipleRequestListeners() {
+    getNullModelRequest().addListener(listener1).addListener(listener2).into(target);
+    verify(requestManager).track(any(Target.class), requestCaptor.capture());
+    requestCaptor.getValue().onResourceReady(new SimpleResource<>(new Object()), DataSource.LOCAL);
+
+    verify(listener1)
+        .onResourceReady(
+            any(), any(), isA(Target.class), isA(DataSource.class), anyBoolean());
+    verify(listener2)
+        .onResourceReady(
+            any(), any(), isA(Target.class), isA(DataSource.class), anyBoolean());
+  }
+
+  @Test
+  public void testListenerApiOverridesListeners() {
+    getNullModelRequest().addListener(listener1).listener(listener2).into(target);
+    verify(requestManager).track(any(Target.class), requestCaptor.capture());
+    requestCaptor.getValue().onResourceReady(new SimpleResource<>(new Object()), DataSource.LOCAL);
+
+    // The #listener API removes any previous listeners, so the first listener should not be called.
+    verify(listener1, never())
+        .onResourceReady(
+            any(), any(), isA(Target.class), isA(DataSource.class), anyBoolean());
+    verify(listener2)
+        .onResourceReady(
+            any(), any(), isA(Target.class), isA(DataSource.class), anyBoolean());
+  }
+
   private RequestBuilder<Object> getNullModelRequest() {
     when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class)))
         .thenReturn(mock(ViewTarget.class));
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
index f18a30289..b6a469d8b 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineKeyTest.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine;
 
+import static org.junit.Assert.assertThrows;
+
 import android.support.annotation.NonNull;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.Option;
@@ -12,9 +14,8 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.Collections;
 import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
@@ -24,7 +25,6 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class EngineKeyTest {
-  @Rule public final ExpectedException expectedException = ExpectedException.none();
   @Mock private Transformation<Object> transformation;
 
   @Before
@@ -35,7 +35,7 @@ public void setUp() {
   @Test
   public void updateDiskCacheKey_throwsException() throws NoSuchAlgorithmException {
     // If this test fails, update testEqualsAndHashcode to use KeyTester including regression tests.
-    EngineKey key = new EngineKey(
+    final EngineKey key = new EngineKey(
         "id",
         new ObjectKey("signature"),
         100,
@@ -44,8 +44,14 @@ public void updateDiskCacheKey_throwsException() throws NoSuchAlgorithmException
         Object.class,
         Object.class,
         new Options());
-    expectedException.expect(UnsupportedOperationException.class);
-    key.updateDiskCacheKey(MessageDigest.getInstance("SHA-1"));
+    assertThrows(
+        UnsupportedOperationException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws NoSuchAlgorithmException {
+            key.updateDiskCacheKey(MessageDigest.getInstance("SHA-1"));
+          }
+        });
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 87d0395d3..15bf84671 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -94,7 +94,7 @@ public void testAllocationOrderThatDoesNotFitExactlyIntoGivenSizeRoundsDown() {
     for (PreFillType current : sizes) {
       int currentSize =
           Util.getBitmapByteSize(current.getWidth(), current.getHeight(), current.getConfig());
-      // See http://errorprone.info/bugpattern/NarrowingCompoundAssignment.
+      // See https://errorprone.info/bugpattern/NarrowingCompoundAssignment.
       expectedSize = (int) (expectedSize + (currentSize * (maxSize / (3 * currentSize))));
     }
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
index f80441cfb..36f3f3480 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -13,9 +14,8 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
@@ -28,8 +28,6 @@
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
 public class MultiModelLoaderFactoryTest {
-  @Rule public final ExpectedException exception = ExpectedException.none();
-
   @Mock private ModelLoaderFactory<String, String> firstFactory;
   @Mock private ModelLoader<String, String> firstModelLoader;
   @Mock private MultiModelLoaderFactory.Factory multiModelLoaderFactory;
@@ -183,16 +181,28 @@ public void testBuild_withModelClass_excludesModelLoadersForOtherModelClasses()
   public void testBuild_withModelAndDataClasses_excludesModelLoadersForOtherDataClasses() {
     multiFactory.append(String.class, String.class, firstFactory);
 
-    exception.expect(NoModelLoaderAvailableException.class);
-    multiFactory.build(String.class, Integer.class);
+    assertThrows(
+        NoModelLoaderAvailableException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            multiFactory.build(String.class, Integer.class);
+          }
+        });
   }
 
   @Test
   public void testBuild_withModelAndDataClasses_excludesModelLoadersForOtherModelClasses() {
     multiFactory.append(String.class, String.class, firstFactory);
 
-    exception.expect(NoModelLoaderAvailableException.class);
-    multiFactory.build(Integer.class, String.class);
+    assertThrows(
+        NoModelLoaderAvailableException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            multiFactory.build(Integer.class, String.class);
+          }
+        });
   }
 
   @Test
@@ -212,15 +222,28 @@ public void testBuild_withModelClass_matchesSuperclassesOfModelClass() {
   @Test
   public void testBuild_withModelAndDataClass_doesNotMatchSubclassesOfModelClass() {
     appendFactoryFor(String.class, Object.class);
-    exception.expect(NoModelLoaderAvailableException.class);
-    multiFactory.build(Object.class, Object.class);
+
+    assertThrows(
+        NoModelLoaderAvailableException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            multiFactory.build(Object.class, Object.class);
+          }
+        });
   }
 
   @Test
   public void testBuild_withModelAndDataClass_doesNotMatchSubclassesOfDataClass() {
     appendFactoryFor(Object.class, String.class);
-    exception.expect(NoModelLoaderAvailableException.class);
-    multiFactory.build(Object.class, Object.class);
+    assertThrows(
+        NoModelLoaderAvailableException.class,
+        new ThrowingRunnable() {
+          @Override
+          public void run() throws Throwable {
+            multiFactory.build(Object.class, Object.class);
+          }
+        });
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
index aa61bc883..c894ded76 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
@@ -294,6 +294,321 @@ public void isDiskCacheStrategySet_withDiskCacheStrategyNonDefault_isTrue() {
         .isTrue();
   }
 
+  @Test
+  public void getPlaceholder_afterSettingPlaceholderId_returnsNul() {
+    assertThat(
+        options
+            .placeholder(new ColorDrawable(Color.RED))
+            .placeholder(android.R.drawable.star_on)
+            .getPlaceholderDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getPlaceholder_afterApplyingOptionsWithPlaceholderId_returnsNull() {
+    RequestOptions toApply = new RequestOptions().placeholder(android.R.drawable.star_on);
+
+    assertThat(
+        options
+            .placeholder(new ColorDrawable(Color.RED))
+            .apply(toApply)
+            .getPlaceholderDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getPlaceholder_afterApplyingOptionsWithPlaceholderDrawable_returnsNewDrawable() {
+    Drawable expected = new ColorDrawable(Color.GREEN);
+    RequestOptions toApply = new RequestOptions().placeholder(expected);
+
+    assertThat(
+        options
+          .placeholder(new ColorDrawable(Color.RED))
+          .apply(toApply)
+          .getPlaceholderDrawable())
+        .isEqualTo(expected);
+  }
+
+  /**
+   * Verifies that we set the flags for placeholder id correctly when applying a placeholder id via
+   * another RequestOptions.
+   */
+  @Test
+  public void placeholderIdFlag_afterApplyingIdViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .placeholder(new ColorDrawable(Color.RED))
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .placeholder(android.R.drawable.star_on)))
+            .getPlaceholderDrawable())
+        .isNull();
+  }
+
+
+  @Test
+  public void getPlaceholderId_afterSettingPlaceholderDrawable_returnsZero() {
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .placeholder(new ColorDrawable(Color.RED))
+            .getPlaceholderId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getPlaceholderId_afterApplyingOptionsWithPlaceholderDrawable_returnsZero() {
+    RequestOptions toApply = new RequestOptions().placeholder(new ColorDrawable(Color.RED));
+
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .apply(toApply)
+            .getPlaceholderId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getPlaceholderId_afterApplyingOptionsWithId_returnsNewId() {
+    int expectedId = android.R.drawable.star_off;
+    RequestOptions toApply = new RequestOptions().placeholder(expectedId);
+
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .apply(toApply)
+            .getPlaceholderId())
+        .isEqualTo(expectedId);
+  }
+
+  /**
+   * Verifies that we set the flags for placeholder correctly when applying a placeholder via
+   * another RequestOptions.
+   */
+  @Test
+  public void placeholderFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .placeholder(android.R.drawable.star_on)
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .placeholder(new ColorDrawable(Color.RED))))
+            .getPlaceholderId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallback_afterSettingFallbackId_returnsNull() {
+    assertThat(
+        options
+            .fallback(new ColorDrawable(Color.RED))
+            .fallback(android.R.drawable.star_on)
+            .getFallbackDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getFallback_afterApplyingOptionsWithFallbackId_returnsNull() {
+    RequestOptions toApply = new RequestOptions().fallback(android.R.drawable.star_on);
+
+    assertThat(
+        options
+            .fallback(new ColorDrawable(Color.RED))
+            .apply(toApply)
+            .getFallbackDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getFallback_afterApplyingOptionsWithFallbackDrawable_returnsNewDrawable() {
+    Drawable expected = new ColorDrawable(Color.GREEN);
+    RequestOptions toApply = new RequestOptions();
+
+    assertThat(
+        options
+          .fallback(new ColorDrawable(Color.RED))
+          .apply(toApply)
+          .getFallbackDrawable())
+        .isEqualTo(expected);
+  }
+
+  /**
+   * Verifies that we set the flags for fallback correctly when applying a fallback via
+   * another RequestOptions.
+   */
+  @Test
+  public void fallbackFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .fallback(android.R.drawable.star_on)
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .fallback(new ColorDrawable(Color.RED))))
+            .getFallbackId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallbackId_afterSettingFallbackDrawable_returnsZero() {
+    assertThat(
+        options
+            .fallback(android.R.drawable.star_on)
+            .fallback(new ColorDrawable(Color.RED))
+            .getFallbackId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallbackId_afterApplyingOptionsWithFallbackDrawable_returnsZero() {
+    RequestOptions toApply = new RequestOptions().fallback(new ColorDrawable(Color.RED));
+
+    assertThat(
+        options
+            .fallback(android.R.drawable.star_on)
+            .apply(toApply)
+            .getFallbackId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getFallbackId_afterApplyingOptionsWithFallbackId_returnsNewFallbackId() {
+    RequestOptions toApply = new RequestOptions().fallback(android.R.drawable.star_off);
+
+    assertThat(
+        options
+          .fallback(android.R.drawable.star_on)
+          .apply(toApply)
+          .getFallbackId())
+        .isEqualTo(android.R.drawable.star_off);
+  }
+
+  /**
+   * Verifies that we set the flags for fallback id correctly when applying a fallback id via
+   * another RequestOptions.
+   */
+  @Test
+  public void fallbackIdFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .fallback(new ColorDrawable(Color.RED))
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .fallback(android.R.drawable.star_on)))
+            .getFallbackDrawable())
+        .isNull();
+  }
+
+  @Test
+  public void getError_afterSettingErrorId_returnsNull() {
+    assertThat(
+        options
+            .error(new ColorDrawable(Color.RED))
+            .error(android.R.drawable.star_on)
+            .getErrorPlaceholder())
+        .isNull();
+  }
+
+  @Test
+  public void getError_afterApplyingOptionsWithErrorId_returnsNull() {
+    RequestOptions toApply = new RequestOptions().error(android.R.drawable.star_on);
+
+    assertThat(
+        options
+            .error(new ColorDrawable(Color.RED))
+            .apply(toApply)
+            .getErrorPlaceholder())
+        .isNull();
+  }
+
+  @Test
+  public void getError_afterApplyingOptionsWithErrorDrawable_returnsNewErrorDrawable() {
+    Drawable expected = new ColorDrawable(Color.GREEN);
+    RequestOptions toApply = new RequestOptions().error(expected);
+
+    assertThat(
+        options
+          .error(new ColorDrawable(Color.RED))
+          .apply(toApply)
+          .getErrorPlaceholder())
+        .isEqualTo(expected);
+  }
+
+  /**
+   * Verifies that we set the flags for error correctly when applying an error via
+   * another RequestOptions.
+   */
+  @Test
+  public void errorFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .error(android.R.drawable.star_on)
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .error(new ColorDrawable(Color.RED))))
+            .getErrorId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getErrorId_afterSettingErrorDrawable_returnsZero() {
+    assertThat(
+        options
+            .error(android.R.drawable.star_on)
+            .error(new ColorDrawable(Color.RED))
+            .getErrorId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getErrorId_afterApplyingOptionsWithErrorDrawable_returnsZero() {
+    RequestOptions toApply = new RequestOptions().error(new ColorDrawable(Color.RED));
+
+    assertThat(
+        options.error(android.R.drawable.star_on)
+            .apply(toApply)
+            .getErrorId())
+        .isEqualTo(0);
+  }
+
+  @Test
+  public void getErrorId_afterApplyingOptionsWithErrorId_returnsNewErrorId() {
+    RequestOptions toApply = new RequestOptions().error(android.R.drawable.star_off);
+
+    assertThat(
+        options.error(android.R.drawable.star_on)
+            .apply(toApply)
+            .getErrorId())
+        .isEqualTo(android.R.drawable.star_off);
+  }
+
+  /**
+   * Verifies that we set the flags for error id correctly when applying a fallback id via
+   * another RequestOptions.
+   */
+  @Test
+  public void errorIdFlag_afterApplyingViaOtherRequestOptions_isSet() {
+    assertThat(
+        options
+            .error(new ColorDrawable(Color.RED))
+            .apply(
+                new RequestOptions()
+                    .apply(
+                        new RequestOptions()
+                            .error(android.R.drawable.star_on)))
+            .getErrorPlaceholder())
+        .isNull();
+  }
+
   @Test
   public void testEqualsHashCode() {
     Drawable first = new ColorDrawable(Color.RED);
diff --git a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index b41596250..9622bba65 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -46,6 +46,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.RobolectricTestRunner;
@@ -57,9 +59,12 @@
 public class SingleRequestTest {
 
   private SingleRequestBuilder builder;
+  @Mock private RequestListener<List> listener1;
+  @Mock private RequestListener<List> listener2;
 
   @Before
   public void setUp() {
+    MockitoAnnotations.initMocks(this);
     builder = new SingleRequestBuilder();
   }
 
@@ -72,31 +77,31 @@ public void testIsNotCompleteBeforeReceivingResource() {
 
   @Test
   public void testCanHandleNullResources() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
 
     request.onResourceReady(null, DataSource.LOCAL);
 
     assertTrue(request.isFailed());
-    verify(builder.requestListener).onLoadFailed(isAGlideException(), isA(Number.class),
+    verify(listener1).onLoadFailed(isAGlideException(), isA(Number.class),
         eq(builder.target), anyBoolean());
   }
 
   @Test
   public void testCanHandleEmptyResources() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     when(builder.resource.get()).thenReturn(null);
 
     request.onResourceReady(builder.resource, DataSource.REMOTE);
 
     assertTrue(request.isFailed());
     verify(builder.engine).release(eq(builder.resource));
-    verify(builder.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
+    verify(listener1).onLoadFailed(isAGlideException(), any(Number.class),
         eq(builder.target), anyBoolean());
   }
 
   @Test
   public void testCanHandleNonConformingResources() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     when(((Resource) (builder.resource)).get())
         .thenReturn("Invalid mocked String, this should be a List");
 
@@ -104,7 +109,7 @@ public void testCanHandleNonConformingResources() {
 
     assertTrue(request.isFailed());
     verify(builder.engine).release(eq(builder.resource));
-    verify(builder.requestListener).onLoadFailed(isAGlideException(), any(Number.class),
+    verify(listener1).onLoadFailed(isAGlideException(), any(Number.class),
         eq(builder.target), anyBoolean());
   }
 
@@ -453,18 +458,21 @@ public void testIsNotRunningAfterClear() {
 
   @Test
   public void testCallsTargetOnResourceReadyIfNoRequestListener() {
-    SingleRequest<List> request = builder
-        .setRequestListener(null)
-        .build();
+    SingleRequest<List> request = builder.build();
     request.onResourceReady(builder.resource, DataSource.LOCAL);
 
     verify(builder.target).onResourceReady(eq(builder.result), anyTransition());
   }
 
   @Test
-  public void testCallsTargetOnResourceReadyIfRequestListenerReturnsFalse() {
-    SingleRequest<List> request = builder.build();
-    when(builder.requestListener
+  public void testCallsTargetOnResourceReadyIfAllRequestListenersReturnFalse() {
+    SingleRequest<List> request =
+        builder.addRequestListener(listener1).addRequestListener(listener2).build();
+
+    when(listener1
+        .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
+            anyBoolean())).thenReturn(false);
+    when(listener2
         .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
             anyBoolean())).thenReturn(false);
     request.onResourceReady(builder.resource, DataSource.LOCAL);
@@ -473,9 +481,14 @@ public void testCallsTargetOnResourceReadyIfRequestListenerReturnsFalse() {
   }
 
   @Test
-  public void testDoesNotCallTargetOnResourceReadyIfRequestListenerReturnsTrue() {
-    SingleRequest<List> request = builder.build();
-    when(builder.requestListener
+  public void testDoesNotCallTargetOnResourceReadyIfAnyRequestListenerReturnsTrue() {
+    SingleRequest<List> request =
+        builder.addRequestListener(listener1).addRequestListener(listener2).build();
+
+    when(listener1
+        .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
+            anyBoolean())).thenReturn(false);
+    when(listener1
         .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
             anyBoolean())).thenReturn(true);
     request.onResourceReady(builder.resource, DataSource.REMOTE);
@@ -485,18 +498,21 @@ public void testDoesNotCallTargetOnResourceReadyIfRequestListenerReturnsTrue() {
 
   @Test
   public void testCallsTargetOnExceptionIfNoRequestListener() {
-    SingleRequest<List> request = builder
-        .setRequestListener(null)
-        .build();
+    SingleRequest<List> request = builder.build();
     request.onLoadFailed(new GlideException("test"));
 
     verify(builder.target).onLoadFailed(eq(builder.errorDrawable));
   }
 
   @Test
-  public void testCallsTargetOnExceptionIfRequestListenerReturnsFalse() {
-    SingleRequest<List> request = builder.build();
-    when(builder.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
+  public void testCallsTargetOnExceptionIfAllRequestListenersReturnFalse() {
+    SingleRequest<List> request =
+        builder.addRequestListener(listener1).addRequestListener(listener2).build();
+
+    when(listener1.onLoadFailed(isAGlideException(), any(Number.class),
+        eq(builder.target), anyBoolean()))
+        .thenReturn(false);
+    when(listener2.onLoadFailed(isAGlideException(), any(Number.class),
         eq(builder.target), anyBoolean()))
         .thenReturn(false);
     request.onLoadFailed(new GlideException("test"));
@@ -505,9 +521,14 @@ public void testCallsTargetOnExceptionIfRequestListenerReturnsFalse() {
   }
 
   @Test
-  public void testDoesNotCallTargetOnExceptionIfRequestListenerReturnsTrue() {
-    SingleRequest<List> request = builder.build();
-    when(builder.requestListener.onLoadFailed(isAGlideException(), any(Number.class),
+  public void testDoesNotCallTargetOnExceptionIfAnyRequestListenerReturnsTrue() {
+    SingleRequest<List> request =
+        builder.addRequestListener(listener1).addRequestListener(listener2).build();
+
+    when(listener1.onLoadFailed(isAGlideException(), any(Number.class),
+        eq(builder.target), anyBoolean()))
+        .thenReturn(false);
+    when(listener2.onLoadFailed(isAGlideException(), any(Number.class),
         eq(builder.target), anyBoolean()))
         .thenReturn(true);
 
@@ -518,37 +539,37 @@ public void testDoesNotCallTargetOnExceptionIfRequestListenerReturnsTrue() {
 
   @Test
   public void testRequestListenerIsCalledWithResourceResult() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithModel() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(any(List.class), eq(builder.model), isAListTarget(), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithTarget() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(any(List.class), any(Number.class), eq(builder.target), isADataSource(),
             anyBoolean());
   }
 
   @Test
   public void testRequestListenerIsCalledWithLoadedFromMemoryIfLoadCompletesSynchronously() {
-    final SingleRequest<List> request = builder.build();
+    final SingleRequest<List> request = builder.addRequestListener(listener1).build();
 
     when(builder.engine
         .load(
@@ -580,7 +601,7 @@ public Object answer(InvocationOnMock invocation) {
 
     request.begin();
     request.onSizeReady(100, 100);
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(),
             eq(DataSource.MEMORY_CACHE), anyBoolean());
   }
@@ -588,11 +609,11 @@ public Object answer(InvocationOnMock invocation) {
   @Test
   public void
   testRequestListenerIsCalledWithNotLoadedFromMemoryCacheIfLoadCompletesAsynchronously() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     request.onSizeReady(100, 100);
     request.onResourceReady(builder.resource, DataSource.LOCAL);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(),
             eq(DataSource.LOCAL), anyBoolean());
   }
@@ -601,21 +622,22 @@ public Object answer(InvocationOnMock invocation) {
   public void testRequestListenerIsCalledWithIsFirstResourceIfNoRequestCoordinator() {
     SingleRequest<List> request = builder
         .setRequestCoordinator(null)
+        .addRequestListener(listener1)
         .build();
     request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(), isADataSource(),
             eq(true));
   }
 
   @Test
   public void testRequestListenerIsCalledWithFirstImageIfRequestCoordinatorReturnsNoResourceSet() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     when(builder.requestCoordinator.isAnyResourceSet()).thenReturn(false);
     request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(), isADataSource(),
             eq(true));
   }
@@ -623,11 +645,11 @@ public void testRequestListenerIsCalledWithFirstImageIfRequestCoordinatorReturns
   @Test
   public void
   testRequestListenerIsCalledWithNotIsFirstRequestIfRequestCoordinatorReturnsResourceSet() {
-    SingleRequest<List> request = builder.build();
+    SingleRequest<List> request = builder.addRequestListener(listener1).build();
     when(builder.requestCoordinator.isAnyResourceSet()).thenReturn(true);
     request.onResourceReady(builder.resource, DataSource.DATA_DISK_CACHE);
 
-    verify(builder.requestListener)
+    verify(listener1)
         .onResourceReady(eq(builder.result), any(Number.class), isAListTarget(),
             isADataSource(), eq(false));
   }
@@ -872,13 +894,9 @@ protected int doHash(@NonNull SingleRequestBuilder listSingleRequest) {
         });
     tester
         .addEquivalenceGroup(
-            new SingleRequestBuilder(),
-            new SingleRequestBuilder(),
             // Non-null request listeners are treated as equivalent, even if they're not equal.
-            new SingleRequestBuilder().setRequestListener(mock(RequestListener.class)))
-        .addEquivalenceGroup(
-            new SingleRequestBuilder().setRequestListener(null),
-            new SingleRequestBuilder().setRequestListener(null))
+            new SingleRequestBuilder().addRequestListener(listener1),
+            new SingleRequestBuilder().addRequestListener(listener2))
         .addEquivalenceGroup(
             new SingleRequestBuilder().setOverrideHeight(500),
             new SingleRequestBuilder().setOverrideHeight(500))
@@ -911,7 +929,7 @@ protected int doHash(@NonNull SingleRequestBuilder listSingleRequest) {
     private Drawable errorDrawable = null;
     private Drawable fallbackDrawable = null;
     @SuppressWarnings("unchecked")
-    private RequestListener<List> requestListener = mock(RequestListener.class);
+    private List<RequestListener<List>> requestListeners = new ArrayList<>();
     @SuppressWarnings("unchecked")
     private final TransitionFactory<List> transitionFactory = mock(TransitionFactory.class);
     private int overrideWidth = -1;
@@ -971,8 +989,8 @@ SingleRequestBuilder setFallbackDrawable(Drawable fallbackDrawable) {
       return this;
     }
 
-    SingleRequestBuilder setRequestListener(RequestListener<List> requestListener) {
-      this.requestListener = requestListener;
+    SingleRequestBuilder addRequestListener(RequestListener<List> requestListener) {
+      this.requestListeners.add(requestListener);
       return this;
     }
 
@@ -1022,7 +1040,7 @@ SingleRequestBuilder setUseUnlimitedSourceGeneratorsPool(
           priority,
           target,
           /*targetListener=*/ null,
-          requestListener,
+          requestListeners,
           requestCoordinator,
           engine,
           transitionFactory);
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
index 4ce8a73c3..9256943d9 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
@@ -766,8 +766,9 @@ private void decodeBitmapData(GifFrame frame) {
         } else if (code == endOfInformation) {
           break;
         } else if (oldCode == NULL_CODE) {
-          pixelStack[top] = suffix[code];
-          ++top;
+          mainPixels[pi] = suffix[code];
+          ++pi;
+          ++i;
           oldCode = code;
           first = code;
           continue;
diff --git a/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
index cc25027e0..9e19f98ab 100644
--- a/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
+++ b/third_party/gif_decoder/src/test/java/com/bumptech/glide/gifdecoder/GifDecoderTest.java
@@ -34,6 +34,21 @@ public void setUp() {
     provider = new MockProvider();
   }
 
+  @Test
+  public void testCorrectPixelsDecoded() throws IOException {
+    byte[] data = TestUtil.resourceToBytes(getClass(), "white_black_row.gif");
+    GifHeaderParser headerParser = new GifHeaderParser();
+    headerParser.setData(data);
+    GifHeader header = headerParser.parseHeader();
+    GifDecoder decoder = new StandardGifDecoder(provider);
+    decoder.setData(header, data);
+    decoder.advance();
+    Bitmap bitmap = decoder.getNextFrame();
+    assertNotNull(bitmap);
+    assertEquals(bitmap.getPixel(2, 0), bitmap.getPixel(0, 0));
+    assertEquals(bitmap.getPixel(3, 0), bitmap.getPixel(1, 0));
+  }
+
   @Test
   public void testCanDecodeFramesFromTestGif() throws IOException {
     byte[] data = TestUtil.resourceToBytes(getClass(), "partial_gif_decode.gif");
diff --git a/third_party/gif_decoder/src/test/resources/white_black_row.gif b/third_party/gif_decoder/src/test/resources/white_black_row.gif
new file mode 100644
index 000000000..ca7f1cb96
Binary files /dev/null and b/third_party/gif_decoder/src/test/resources/white_black_row.gif differ
