diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java
index ac3ed6a2f..402984f1c 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ErrorHandlingTest.java
@@ -23,10 +23,13 @@
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy;
+import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.TearDownGlide;
+import com.bumptech.glide.test.WaitModelLoader;
+import com.bumptech.glide.test.WaitModelLoader.WaitModel;
 import java.io.File;
 import java.util.concurrent.CountDownLatch;
 import org.junit.Before;
@@ -106,6 +109,30 @@ public void load_whenLoadSucceeds_butEncoderFails_doesNotCallOnLoadFailed()
         .onLoadFailed(any(GlideException.class), any(), anyDrawableTarget(), anyBoolean());
   }
 
+  @Test
+  public void clearRequest_withError_afterPrimaryFails_clearsErrorRequest()
+      throws InterruptedException {
+    WaitModel<Integer> errorModel = WaitModelLoader.Factory.waitOn(ResourceIds.raw.canonical);
+
+    FutureTarget<Drawable> target =
+        Glide.with(context)
+            .load((Object) null)
+            .error(
+                Glide.with(context)
+                    .load(errorModel)
+                    .listener(requestListener))
+            .submit();
+
+    Glide.with(context).clear(target);
+    errorModel.countDown();
+
+    // Make sure any pending requests run.
+    concurrency.pokeMainThread();
+    Glide.tearDown();
+    // Make sure that any callbacks posted back to the main thread run.
+    concurrency.pokeMainThread();
+  }
+
   private static final class WaitForErrorStrategy implements UncaughtThrowableStrategy {
     final CountDownLatch latch = new CountDownLatch(1);
     @Nullable Throwable error = null;
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
index ce9b7663f..edca18631 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
@@ -299,12 +299,12 @@ private static void wait(Waiter waiter) {
         try {
           isFinished = waiter.await(TIMEOUT_SECONDS, TIMEOUT_UNIT);
           if (!isFinished) {
-            throw new RuntimeException("Timed out while waiting");
+            throw new WaiterException("Timed out while waiting");
           }
         } catch (InterruptedException e) {
-          throw new RuntimeException(e);
+          throw new WaiterException(e);
         }
-      } catch (RuntimeException e) {
+      } catch (WaiterException e) {
         if (Debug.isDebuggerConnected()) {
           continue;
         }
@@ -312,4 +312,16 @@ private static void wait(Waiter waiter) {
       }
     } while (Debug.isDebuggerConnected() && !isFinished);
   }
+
+  private static final class WaiterException extends RuntimeException {
+    private static final long serialVersionUID = -627297254223169728L;
+
+    WaiterException(String message) {
+      super(message);
+    }
+
+    WaiterException(Throwable cause) {
+      super(cause);
+    }
+  }
 }
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index 627e957bb..a8cd599a1 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -4,7 +4,7 @@ dependencies {
     implementation project(':library')
     annotationProcessor project(':annotation:compiler')
 
-    api "com.squareup.okhttp:okhttp:2.7.2"
+    api "com.squareup.okhttp:okhttp:2.7.5"
     api "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
index 85617654e..cd6a43151 100644
--- a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
@@ -43,7 +43,9 @@ public void pause() {
   @Override
   public void clear() {
     primary.clear();
-    if (primary.isFailed()) {
+    // Don't check primary.isFailed() here because it will have been reset by the clear call
+    // immediately before this.
+    if (error.isRunning()) {
       error.clear();
     }
   }
diff --git a/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java b/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
index 0bce9056d..931579037 100644
--- a/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
@@ -80,8 +80,9 @@ public void clear_whenPrimaryHasNotFailed_doesNotClearError() {
   }
 
   @Test
-  public void clear_whenPrimaryHasFailed_clearsError() {
+  public void clear_whenPrimaryHasFailed_errorIsRunning_clearsError() {
     when(primary.isFailed()).thenReturn(true);
+    when(error.isRunning()).thenReturn(true);
     coordinator.clear();
     verify(error).clear();
   }
@@ -93,6 +94,14 @@ public void clear_whenPrimaryHasFailed_clearsPrimary() {
     verify(primary).clear();
   }
 
+  @Test
+  public void clear_whenErrorIsRunning_clearsError() {
+    when(error.isRunning()).thenReturn(true);
+    coordinator.clear();
+
+    verify(error).clear();
+  }
+
   @Test
   public void isPaused_primaryNotFailed_primaryNotPaused_returnsFalse() {
     assertThat(coordinator.isPaused()).isFalse();
