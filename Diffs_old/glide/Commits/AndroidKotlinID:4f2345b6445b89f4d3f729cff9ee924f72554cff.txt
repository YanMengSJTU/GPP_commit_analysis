diff --git a/gradle.properties b/gradle.properties
index 290f70204..c8c1dc88d 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -25,7 +25,7 @@ DAGGER_VERSION=2.15
 
 JUNIT_VERSION=4.13-SNAPSHOT
 # Matches the version in Google.
-MOCKITO_VERSION=1.9.5
+MOCKITO_VERSION=2.23.4
 MOCKITO_ANDROID_VERSION=2.24.0
 ROBOLECTRIC_VERSION=4.3-beta-1
 MOCKWEBSERVER_VERSION=3.0.0-RC1
diff --git a/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
index 42bcafa54..cbe4f30db 100644
--- a/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
+++ b/integration/gifencoder/src/test/java/com/bumptech/glide/integration/gifencoder/ReEncodingGifResourceEncoderTest.java
@@ -71,7 +71,7 @@ public void setUp() {
     when(factory.buildDecoder(any(GifDecoder.BitmapProvider.class))).thenReturn(decoder);
     when(factory.buildParser()).thenReturn(parser);
     when(factory.buildEncoder()).thenReturn(gifEncoder);
-    when(factory.buildFrameResource(any(Bitmap.class), any(BitmapPool.class)))
+    when(factory.buildFrameResource(anyBitmapOrNull(), any(BitmapPool.class)))
         .thenReturn(frameResource);
 
     // TODO Util.anyResource once Util is moved to testutil module (remove unchecked above!)
@@ -178,7 +178,7 @@ public void testAdvancesDecoderBeforeAttemptingToGetFirstFrame() {
   @Test
   public void testSetsDelayOnEncoderAfterAddingFrame() {
     when(gifEncoder.start(any(OutputStream.class))).thenReturn(true);
-    when(gifEncoder.addFrame(any(Bitmap.class))).thenReturn(true);
+    when(gifEncoder.addFrame(anyBitmapOrNull())).thenReturn(true);
 
     when(decoder.getFrameCount()).thenReturn(1);
     when(decoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.RGB_565));
@@ -191,7 +191,7 @@ public void testSetsDelayOnEncoderAfterAddingFrame() {
 
     InOrder order = inOrder(gifEncoder, decoder);
     order.verify(decoder).advance();
-    order.verify(gifEncoder).addFrame(any(Bitmap.class));
+    order.verify(gifEncoder).addFrame(anyBitmapOrNull());
     order.verify(gifEncoder).setDelay(eq(expectedDelay));
     order.verify(decoder).advance();
   }
@@ -218,7 +218,7 @@ public void testReturnsFalseIfAddingFrameFails() {
     when(decoder.getNextFrame()).thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));
 
     when(gifEncoder.start(any(OutputStream.class))).thenReturn(true);
-    when(gifEncoder.addFrame(any(Bitmap.class))).thenReturn(false);
+    when(gifEncoder.addFrame(anyBitmapOrNull())).thenReturn(false);
 
     assertFalse(encoder.encode(resource, file, options));
   }
@@ -333,4 +333,8 @@ private String getEncodedData() {
   private static Context anyContext() {
     return any(Context.class);
   }
+
+  private static Bitmap anyBitmapOrNull() {
+    return any();
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index cd5ed1372..252edddaa 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -769,7 +769,7 @@ public static RequestManager with(@NonNull FragmentActivity activity) {
    */
   @NonNull
   public static RequestManager with(@NonNull Fragment fragment) {
-    return getRetriever(fragment.getActivity()).get(fragment);
+    return getRetriever(fragment.getContext()).get(fragment);
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 57449a054..109322257 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -859,6 +859,9 @@ private static void resetOptions(BitmapFactory.Options decodeBitmapOptions) {
     decodeBitmapOptions.inJustDecodeBounds = false;
     decodeBitmapOptions.inDensity = 0;
     decodeBitmapOptions.inTargetDensity = 0;
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+      decodeBitmapOptions.outConfig = null;
+    }
     decodeBitmapOptions.outWidth = 0;
     decodeBitmapOptions.outHeight = 0;
     decodeBitmapOptions.outMimeType = null;
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index d1b6cffeb..bdf863fca 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -108,7 +108,11 @@ public RequestManager get(@NonNull Context context) {
         return get((FragmentActivity) context);
       } else if (context instanceof Activity) {
         return get((Activity) context);
-      } else if (context instanceof ContextWrapper) {
+      } else if (context instanceof ContextWrapper
+          // Only unwrap a ContextWrapper if the baseContext has a non-null application context.
+          // Context#createPackageContext may return a Context without an Application instance,
+          // in which case a ContextWrapper may be used to attach one.
+          && ((ContextWrapper) context).getBaseContext().getApplicationContext() != null) {
         return get(((ContextWrapper) context).getBaseContext());
       }
     }
@@ -130,13 +134,13 @@ public RequestManager get(@NonNull FragmentActivity activity) {
   @NonNull
   public RequestManager get(@NonNull Fragment fragment) {
     Preconditions.checkNotNull(
-        fragment.getActivity(),
+        fragment.getContext(),
         "You cannot start a load on a fragment before it is attached or after it is destroyed");
     if (Util.isOnBackgroundThread()) {
-      return get(fragment.getActivity().getApplicationContext());
+      return get(fragment.getContext().getApplicationContext());
     } else {
       FragmentManager fm = fragment.getChildFragmentManager();
-      return supportFragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());
+      return supportFragmentGet(fragment.getContext(), fm, fragment, fragment.isVisible());
     }
   }
 
@@ -297,7 +301,7 @@ private void findAllFragmentsWithViewsPreO(
   }
 
   @Nullable
-  private Activity findActivity(@NonNull Context context) {
+  private static Activity findActivity(@NonNull Context context) {
     if (context instanceof Activity) {
       return (Activity) context;
     } else if (context instanceof ContextWrapper) {
@@ -384,15 +388,17 @@ private RequestManager fragmentGet(
   }
 
   @NonNull
-  SupportRequestManagerFragment getSupportRequestManagerFragment(FragmentActivity activity) {
+  SupportRequestManagerFragment getSupportRequestManagerFragment(
+      Context context, FragmentManager fragmentManager) {
     return getSupportRequestManagerFragment(
-        activity.getSupportFragmentManager(), /*parentHint=*/ null, isActivityVisible(activity));
+        fragmentManager, /*parentHint=*/ null, isActivityVisible(context));
   }
 
-  private static boolean isActivityVisible(Activity activity) {
+  private static boolean isActivityVisible(Context context) {
     // This is a poor heuristic, but it's about all we have. We'd rather err on the side of visible
     // and start requests than on the side of invisible and ignore valid requests.
-    return !activity.isFinishing();
+    Activity activity = findActivity(context);
+    return activity == null || !activity.isFinishing();
   }
 
   @NonNull
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index 3db0c1246..f702355b3 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -7,7 +7,7 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentActivity;
+import androidx.fragment.app.FragmentManager;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.util.Synthetic;
@@ -111,9 +111,22 @@ private void removeChildRequestManagerFragment(SupportRequestManagerFragment chi
    */
   void setParentFragmentHint(@Nullable Fragment parentFragmentHint) {
     this.parentFragmentHint = parentFragmentHint;
-    if (parentFragmentHint != null && parentFragmentHint.getActivity() != null) {
-      registerFragmentWithRoot(parentFragmentHint.getActivity());
+    if (parentFragmentHint == null || parentFragmentHint.getContext() == null) {
+      return;
     }
+    FragmentManager rootFragmentManager = getRootFragmentManager(parentFragmentHint);
+    if (rootFragmentManager == null) {
+      return;
+    }
+    registerFragmentWithRoot(parentFragmentHint.getContext(), rootFragmentManager);
+  }
+
+  @Nullable
+  private static FragmentManager getRootFragmentManager(@NonNull Fragment fragment) {
+    while (fragment.getParentFragment() != null) {
+      fragment = fragment.getParentFragment();
+    }
+    return fragment.getFragmentManager();
   }
 
   @Nullable
@@ -135,10 +148,13 @@ private boolean isDescendant(@NonNull Fragment fragment) {
     return false;
   }
 
-  private void registerFragmentWithRoot(@NonNull FragmentActivity activity) {
+  private void registerFragmentWithRoot(
+      @NonNull Context context, @NonNull FragmentManager fragmentManager) {
     unregisterFragmentWithRoot();
     rootRequestManagerFragment =
-        Glide.get(activity).getRequestManagerRetriever().getSupportRequestManagerFragment(activity);
+        Glide.get(context)
+            .getRequestManagerRetriever()
+            .getSupportRequestManagerFragment(context, fragmentManager);
     if (!equals(rootRequestManagerFragment)) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
@@ -154,8 +170,18 @@ private void unregisterFragmentWithRoot() {
   @Override
   public void onAttach(Context context) {
     super.onAttach(context);
+
+    FragmentManager rootFragmentManager = getRootFragmentManager(this);
+    if (rootFragmentManager == null) {
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        // Not expected to occur; ancestor fragments should be attached before descendants.
+        Log.w(TAG, "Unable to register fragment with root, ancestor detached");
+      }
+      return;
+    }
+
     try {
-      registerFragmentWithRoot(getActivity());
+      registerFragmentWithRoot(getContext(), rootFragmentManager);
     } catch (IllegalStateException e) {
       // OnAttach can be called after the activity is destroyed, see #497.
       if (Log.isLoggable(TAG, Log.WARN)) {
diff --git a/library/test/build.gradle b/library/test/build.gradle
index 47e87df5b..41f86f441 100644
--- a/library/test/build.gradle
+++ b/library/test/build.gradle
@@ -11,6 +11,7 @@ dependencies {
     testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
     testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
     testImplementation "androidx.legacy:legacy-support-v4:${ANDROID_X_VERSION}"
+    testImplementation "androidx.test:core:${ANDROID_X_VERSION}"
 }
 
 tasks.withType(JavaCompile) {
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 9a652df3b..5e57eb5c4 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -142,7 +142,7 @@ public void testNewLoadIsNotStartedIfResourceIsActive() {
 
     harness.doLoad();
 
-    verify(harness.job, never()).start(any(DecodeJob.class));
+    verify(harness.job, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -250,7 +250,7 @@ public void testNewLoadIsNotStartedIfResourceIsCached() {
 
     harness.doLoad();
 
-    verify(harness.job, never()).start(any(DecodeJob.class));
+    verify(harness.job, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -460,7 +460,7 @@ public Object answer(InvocationOnMock invocationOnMock) {
               }
             })
         .when(harness.job)
-        .start(any(DecodeJob.class));
+        .start(anyDecodeJobOrNull());
     harness.doLoad();
     harness.doLoad();
     verify(harness.cb).onResourceReady(any(Resource.class), eq(DataSource.MEMORY_CACHE));
@@ -479,7 +479,7 @@ public Object answer(InvocationOnMock invocationOnMock) {
               }
             })
         .when(harness.job)
-        .start(any(DecodeJob.class));
+        .start(anyDecodeJobOrNull());
     harness.doLoad();
     harness.getEngine().onResourceReleased(harness.cacheKey, harness.resource);
     harness.doLoad();
@@ -495,8 +495,8 @@ public void load_withOnlyRetrieveFromCache_andPreviousNormalLoad_startsNewLoad()
     harness.onlyRetrieveFromCache = true;
     harness.doLoad();
 
-    verify(first).start(any(DecodeJob.class));
-    verify(second).start(any(DecodeJob.class));
+    verify(first).start(anyDecodeJobOrNull());
+    verify(second).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -509,8 +509,8 @@ public void load_withNormalLoad_afterPreviousRetrieveFromCache_startsNewLoad() {
     harness.onlyRetrieveFromCache = false;
     harness.doLoad();
 
-    verify(first).start(any(DecodeJob.class));
-    verify(second).start(any(DecodeJob.class));
+    verify(first).start(anyDecodeJobOrNull());
+    verify(second).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -528,8 +528,8 @@ public void load_afterFinishedOnlyRetrieveFromCache_withPendingNormal_doesNotSta
     harness.onlyRetrieveFromCache = false;
     harness.doLoad();
 
-    verify(firstNormal).start(any(DecodeJob.class));
-    verify(secondNormal, never()).start(any(DecodeJob.class));
+    verify(firstNormal).start(anyDecodeJobOrNull());
+    verify(secondNormal, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -547,8 +547,8 @@ public void load_afterCancelledOnlyRetrieveFromCache_withPendingNormal_doesNotSt
     harness.onlyRetrieveFromCache = false;
     harness.doLoad();
 
-    verify(firstNormal).start(any(DecodeJob.class));
-    verify(secondNormal, never()).start(any(DecodeJob.class));
+    verify(firstNormal).start(anyDecodeJobOrNull());
+    verify(secondNormal, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -560,7 +560,7 @@ public void load_withOnlyRetrieveFromCache_withOtherRetrieveFromCachePending_doe
     harness.job = second;
     harness.doLoad();
 
-    verify(second, never()).start(any(DecodeJob.class));
+    verify(second, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -573,7 +573,7 @@ public void load_withOnlyRetrieveFromCache_afterPreviousFinishedOnlyFromCacheLoa
     harness.job = second;
     harness.doLoad();
 
-    verify(second).start(any(DecodeJob.class));
+    verify(second).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -586,7 +586,7 @@ public void load_withOnlyRetrieveFromCache_afterPreviousCancelledOnlyFromCacheLo
     harness.job = second;
     harness.doLoad();
 
-    verify(second).start(any(DecodeJob.class));
+    verify(second).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -599,7 +599,7 @@ public void onEngineJobComplete_withOldJobForKey_doesNotRemoveJob() {
     harness.job = mock(EngineJob.class);
     harness.doLoad();
 
-    verify(harness.job, never()).start(any(DecodeJob.class));
+    verify(harness.job, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -610,7 +610,7 @@ public void onEngineJobCancelled_withOldJobForKey_doesNotRemoveJob() {
     harness.job = mock(EngineJob.class);
     harness.doLoad();
 
-    verify(harness.job, never()).start(any(DecodeJob.class));
+    verify(harness.job, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -624,7 +624,7 @@ public void onEngineJobComplete_withOnlyRetrieveFromCacheAndOldJobForKey_doesNot
     harness.job = mock(EngineJob.class);
     harness.doLoad();
 
-    verify(harness.job, never()).start(any(DecodeJob.class));
+    verify(harness.job, never()).start(anyDecodeJobOrNull());
   }
 
   @Test
@@ -636,7 +636,12 @@ public void onEngineJobCancelled_withOnlyRetrieveFromCacheAndOldJobForKey_doesNo
     harness.job = mock(EngineJob.class);
     harness.doLoad();
 
-    verify(harness.job, never()).start(any(DecodeJob.class));
+    verify(harness.job, never()).start(anyDecodeJobOrNull());
+  }
+
+  @SuppressWarnings({"unchecked", "rawtypes"})
+  private static DecodeJob anyDecodeJobOrNull() {
+    return any();
   }
 
   private static class EngineTestHarness {
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
index 565679b2d..0d1b40e24 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
@@ -13,10 +13,16 @@
 import android.content.Context;
 import android.content.ContextWrapper;
 import android.os.Build;
+import android.os.Handler;
 import android.os.Looper;
+import android.view.LayoutInflater;
+import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentActivity;
+import androidx.fragment.app.FragmentController;
+import androidx.fragment.app.FragmentHostCallback;
+import androidx.test.core.app.ApplicationProvider;
 import com.bumptech.glide.RequestManager;
 import com.bumptech.glide.tests.BackgroundUtil.BackgroundTester;
 import com.bumptech.glide.tests.GlideShadowLooper;
@@ -30,7 +36,6 @@
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
@@ -41,13 +46,16 @@
   @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
 
   private static final String PARENT_TAG = "parent";
+  private Context appContext;
   private RetrieverHarness[] harnesses;
   private RequestManagerRetriever retriever;
   private int initialSdkVersion;
 
   @Before
   public void setUp() {
-    retriever = new RequestManagerRetriever(null /*factory*/);
+    appContext = ApplicationProvider.getApplicationContext();
+
+    retriever = new RequestManagerRetriever(/*factory=*/ null);
 
     harnesses =
         new RetrieverHarness[] {new DefaultRetrieverHarness(), new SupportRetrieverHarness()};
@@ -158,6 +166,23 @@ public void testSupportCanGetRequestManagerFromFragment() {
     assertEquals(manager, retriever.get(fragment));
   }
 
+  @Test
+  public void testSupportCanGetRequestManagerFromFragment_nonActivityController() {
+    FragmentController controller =
+        FragmentController.createController(new NonActivityHostCallback(appContext));
+    controller.attachHost(/*fragment=*/ null);
+    controller.dispatchCreate();
+    controller.dispatchStart();
+    controller.dispatchResume();
+
+    Fragment fragment = new Fragment();
+    controller.getSupportFragmentManager().beginTransaction().add(fragment, PARENT_TAG).commit();
+    controller.getSupportFragmentManager().executePendingTransactions();
+
+    RequestManager manager = retriever.get(fragment);
+    assertEquals(manager, retriever.get(fragment));
+  }
+
   @Test
   public void testCanGetRequestManagerFromDetachedFragment() {
     helpTestCanGetRequestManagerFromDetachedFragment();
@@ -271,28 +296,53 @@ public void testHandlesContextWrappersForActivities() {
 
   @Test
   public void testHandlesContextWrappersForApplication() {
-    ContextWrapper contextWrapper = new ContextWrapper(RuntimeEnvironment.application);
-    RequestManager requestManager = retriever.get(RuntimeEnvironment.application);
+    ContextWrapper contextWrapper = new ContextWrapper(appContext);
+    RequestManager requestManager = retriever.get(appContext);
 
     assertEquals(requestManager, retriever.get(contextWrapper));
   }
 
+  @Test
+  public void testHandlesContextWrapperWithoutApplication() throws Exception {
+    // Create a Context which is not associated with an Application instance.
+    Context baseContext =
+        appContext.createPackageContext(appContext.getPackageName(), /*flags=*/ 0);
+
+    // Sanity-check that Robolectric behaves the same as the framework.
+    assertThat(baseContext.getApplicationContext()).isNull();
+
+    // If a wrapper provides a non-null application Context, unwrapping should terminate at this
+    // wrapper so that the returned Context has a non-null #getApplicationContext.
+    Context contextWithApplicationContext =
+        new ContextWrapper(baseContext) {
+          @Override
+          public Context getApplicationContext() {
+            return this;
+          }
+        };
+
+    Context wrappedContext = new ContextWrapper(contextWithApplicationContext);
+    RequestManager requestManager = retriever.get(appContext);
+
+    assertEquals(requestManager, retriever.get(wrappedContext));
+  }
+
   @Test
   public void testReturnsNonNullManagerIfGivenApplicationContext() {
-    assertNotNull(retriever.get(RuntimeEnvironment.application));
+    assertNotNull(retriever.get(appContext));
   }
 
   @Test
   public void testApplicationRequestManagerIsNotPausedWhenRetrieved() {
-    RequestManager manager = retriever.get(RuntimeEnvironment.application);
+    RequestManager manager = retriever.get(appContext);
     assertFalse(manager.isPaused());
   }
 
   @Test
   public void testApplicationRequestManagerIsNotReResumedAfterFirstRetrieval() {
-    RequestManager manager = retriever.get(RuntimeEnvironment.application);
+    RequestManager manager = retriever.get(appContext);
     manager.pauseRequests();
-    manager = retriever.get(RuntimeEnvironment.application);
+    manager = retriever.get(appContext);
     assertTrue(manager.isPaused());
   }
 
@@ -303,7 +353,7 @@ public void testDoesNotThrowWhenGetWithContextCalledFromBackgroundThread()
         new BackgroundTester() {
           @Override
           public void runTest() {
-            retriever.get(RuntimeEnvironment.application);
+            retriever.get(appContext);
           }
         });
   }
@@ -460,4 +510,27 @@ public void addFragmentWithTag(String tag, RequestManager manager) {
       controller.get().getSupportFragmentManager().executePendingTransactions();
     }
   }
+
+  /** Simple callback for creating an Activity-less Fragment host. */
+  private final class NonActivityHostCallback
+      extends FragmentHostCallback<RequestManagerRetrieverTest> {
+
+    private final Context context;
+
+    NonActivityHostCallback(Context context) {
+      super(context, new Handler(Looper.getMainLooper()), /*windowAnimations=*/ 0);
+      this.context = context;
+    }
+
+    @Override
+    public LayoutInflater onGetLayoutInflater() {
+      return LayoutInflater.from(context).cloneInContext(context);
+    }
+
+    @Nullable
+    @Override
+    public RequestManagerRetrieverTest onGetHost() {
+      return RequestManagerRetrieverTest.this;
+    }
+  }
 }
diff --git a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index c032fb5a5..e80210edf 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -166,7 +166,7 @@ public void clear_notifiesTarget() {
     SingleRequest<List> request = builder.build();
     request.clear();
 
-    verify(builder.target).onLoadCleared(any(Drawable.class));
+    verify(builder.target).onLoadCleared(anyDrawableOrNull());
   }
 
   @Test
@@ -175,7 +175,7 @@ public void testDoesNotNotifyTargetTwiceIfClearedTwiceInARow() {
     request.clear();
     request.clear();
 
-    verify(builder.target, times(1)).onLoadCleared(any(Drawable.class));
+    verify(builder.target, times(1)).onLoadCleared(anyDrawableOrNull());
   }
 
   @Test
@@ -1015,6 +1015,10 @@ SingleRequestBuilder setUseUnlimitedSourceGeneratorsPool(
     }
   }
 
+  private static Drawable anyDrawableOrNull() {
+    return any();
+  }
+
   // TODO do we want to move these to Util?
   @SuppressWarnings("unchecked")
   private static <T> Transition<T> mockTransition() {
@@ -1032,7 +1036,7 @@ private static GlideException isAGlideException() {
 
   @SuppressWarnings("unchecked")
   private static <T> Transition<T> anyTransition() {
-    return any(Transition.class);
+    return any();
   }
 
   private static Executor anyExecutor() {
diff --git a/library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
index 6dd59c897..6b03eed9a 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewAnimationTest.java
@@ -50,9 +50,13 @@ public void testAlwaysReturnsFalse() {
   @Test
   public void testStartsAnimationOnAnimate() {
     Animation animation = mock(Animation.class);
-    when(viewTransitionAnimationFactory.build(any(Context.class))).thenReturn(animation);
+    when(viewTransitionAnimationFactory.build(anyContextOrNull())).thenReturn(animation);
     viewAnimation.transition(null, adapter);
     verify(view).clearAnimation();
     verify(view).startAnimation(eq(animation));
   }
+
+  private static Context anyContextOrNull() {
+    return any();
+  }
 }
diff --git a/library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
index ff7ec6734..c038f04ae 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/transition/ViewTransitionAnimationFactoryTest.java
@@ -50,7 +50,7 @@ public void testFactoryReturnsActualAnimationIfNotIsFromMemoryCacheAndIsFirstRes
         factory.build(DataSource.DATA_DISK_CACHE, true /*isFirstResource*/);
 
     Animation animation = mock(Animation.class);
-    when(viewTransitionAnimationFactory.build(any(Context.class))).thenReturn(animation);
+    when(viewTransitionAnimationFactory.build(anyContextOrNull())).thenReturn(animation);
 
     Transition.ViewAdapter adapter = mock(Transition.ViewAdapter.class);
     View view = mock(View.class);
@@ -59,4 +59,8 @@ public void testFactoryReturnsActualAnimationIfNotIsFromMemoryCacheAndIsFirstRes
 
     verify(view).startAnimation(eq(animation));
   }
+
+  private static Context anyContextOrNull() {
+    return any();
+  }
 }
