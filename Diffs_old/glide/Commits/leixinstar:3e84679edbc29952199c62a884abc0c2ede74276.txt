diff --git a/README.md b/README.md
index 0247ae4f4..76657cdea 100644
--- a/README.md
+++ b/README.md
@@ -48,6 +48,17 @@ Or Maven:
 </dependency>
 ```
 
+Proguard
+--------
+Depending on your proguard config and usage, you may need to include the following lines in your proguard.cfg:
+```
+-keep public class * implements com.bumptech.glide.module.GlideModule
+-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
+    **[] $VALUES;
+    public *;
+}
+```
+
 How do I use Glide?
 -------------------
 Checkout the [GitHub wiki][2] for pages on a variety of topics, and see the [javadocs][3].
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 1a7f9a6d9..fb02c6794 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -19,6 +19,7 @@
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.engine.cache.DiskLruCacheFactory;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
 import com.bumptech.glide.load.engine.prefill.BitmapPreFiller;
 import com.bumptech.glide.load.engine.prefill.PreFillType;
@@ -79,10 +80,7 @@
  * {@link MemoryCache}.
  */
 public class Glide {
-    /** 250 MB of cache. */
-    static final int DEFAULT_DISK_CACHE_SIZE = 250 * 1024 * 1024;
 
-    private static final String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";
     private static final String TAG = "Glide";
     private static volatile Glide glide;
 
@@ -110,7 +108,7 @@
      * @param context A context.
      */
     public static File getPhotoCacheDir(Context context) {
-        return getPhotoCacheDir(context, DEFAULT_DISK_CACHE_DIR);
+        return getPhotoCacheDir(context, DiskLruCacheFactory.DEFAULT_DISK_CACHE_DIR);
     }
 
     /**
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 31fcc98f4..ee7de9842 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -189,7 +189,7 @@ Glide createGlide() {
         }
 
         if (diskCacheFactory == null) {
-            diskCacheFactory = new InternalCacheDiskCacheFactory(context, Glide.DEFAULT_DISK_CACHE_SIZE);
+            diskCacheFactory = new InternalCacheDiskCacheFactory(context);
         }
 
         if (engine == null) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 43542289f..421279324 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -130,8 +130,8 @@ public DecodeJob(EngineKey resultKey, int width, int height, DataFetcher<A> fetc
     }
 
     public void cancel() {
-        fetcher.cancel();
         isCancelled = true;
+        fetcher.cancel();
     }
 
     private Resource<Z> transformEncodeAndTranscode(Resource<T> decoded) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
index 12ab93d01..629970df8 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCache.java
@@ -13,6 +13,11 @@
      * An interface for lazily creating a disk cache.
      */
     interface Factory {
+
+        /** 250 MB of cache. */
+        int DEFAULT_DISK_CACHE_SIZE = 250 * 1024 * 1024;
+        String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";
+
         /**
          * Returns a new disk cache, or {@code null} if no disk cache could be created.
          */
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java
new file mode 100644
index 000000000..c275a0441
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheFactory.java
@@ -0,0 +1,68 @@
+package com.bumptech.glide.load.engine.cache;
+
+import java.io.File;
+
+/**
+ * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the specified disk cache
+ * directory.
+ * <p/>
+ * If you need to make I/O access before returning the cache directory use
+ * the {@link DiskLruCacheFactory#DiskLruCacheFactory(CacheDirectoryGetter, int)} constructor variant.
+ */
+public class DiskLruCacheFactory implements DiskCache.Factory {
+
+    private final int diskCacheSize;
+    private final CacheDirectoryGetter cacheDirectoryGetter;
+
+    /**
+     * Interface called out of UI thread to get the cache folder.
+     */
+    public interface CacheDirectoryGetter {
+        File getCacheDirectory();
+    }
+
+    public DiskLruCacheFactory(final String diskCacheFolder, int diskCacheSize) {
+        this(new CacheDirectoryGetter() {
+            @Override
+            public File getCacheDirectory() {
+                return new File(diskCacheFolder);
+            }
+        }, diskCacheSize);
+    }
+
+    public DiskLruCacheFactory(final String diskCacheFolder, final String diskCacheName, int diskCacheSize) {
+        this(new CacheDirectoryGetter() {
+            @Override
+            public File getCacheDirectory() {
+                return new File(diskCacheFolder, diskCacheName);
+            }
+        }, diskCacheSize);
+    }
+
+    /**
+     * When using this constructor {@link CacheDirectoryGetter#getCacheDirectory()} will be called out of UI thread,
+     * allowing to do I/O access without performance impacts.
+     *
+     * @param cacheDirectoryGetter Interface called out of UI thread to get the cache folder.
+     * @param diskCacheSize        Desired max bytes size for the LRU disk cache.
+     */
+    public DiskLruCacheFactory(CacheDirectoryGetter cacheDirectoryGetter, int diskCacheSize) {
+        this.diskCacheSize = diskCacheSize;
+        this.cacheDirectoryGetter = cacheDirectoryGetter;
+    }
+
+    @Override
+    public DiskCache build() {
+        File cacheDir = cacheDirectoryGetter.getCacheDirectory();
+
+        if (cacheDir == null) {
+            return null;
+        }
+
+        if (!cacheDir.mkdirs() && (!cacheDir.exists() || !cacheDir.isDirectory())) {
+            return null;
+        }
+
+        return DiskLruCacheWrapper.get(cacheDir, diskCacheSize);
+    }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java
new file mode 100644
index 000000000..5109615d6
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java
@@ -0,0 +1,38 @@
+package com.bumptech.glide.load.engine.cache;
+
+import android.content.Context;
+
+import java.io.File;
+
+/**
+ * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the external disk cache
+ * directory.
+ * <p/>
+ * <b>Images can be read by everyone when using external disk cache.</b>
+ */
+public final class ExternalCacheDiskCacheFactory extends DiskLruCacheFactory {
+
+    public ExternalCacheDiskCacheFactory(Context context) {
+        this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
+    }
+
+    public ExternalCacheDiskCacheFactory(Context context, int diskCacheSize) {
+        this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, diskCacheSize);
+    }
+
+    public ExternalCacheDiskCacheFactory(final Context context, final String diskCacheName, int diskCacheSize) {
+        super(new CacheDirectoryGetter() {
+            @Override
+            public File getCacheDirectory() {
+                File cacheDirectory = context.getExternalCacheDir();
+                if (cacheDirectory == null) {
+                    return null;
+                }
+                if (diskCacheName != null) {
+                    return new File(cacheDirectory, diskCacheName);
+                }
+                return cacheDirectory;
+            }
+        }, diskCacheSize);
+    }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
index 7d58bc7b5..83631376f 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
@@ -2,47 +2,35 @@
 
 import android.content.Context;
 
-import com.bumptech.glide.Glide;
-
 import java.io.File;
 
 /**
  * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the internal disk cache
  * directory.
  */
-public final class InternalCacheDiskCacheFactory implements DiskCache.Factory {
-    private final Context context;
-    private final String diskCacheName;
-    private final int diskCacheSize;
+public final class InternalCacheDiskCacheFactory extends DiskLruCacheFactory {
 
-    public InternalCacheDiskCacheFactory(Context context, int diskCacheSize) {
-        this(context, null /*diskCacheName*/, diskCacheSize);
+    public InternalCacheDiskCacheFactory(Context context) {
+        this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
     }
 
-    public InternalCacheDiskCacheFactory(Context context, String diskCacheName, int diskCacheSize) {
-        this.context = context;
-        this.diskCacheName = diskCacheName;
-        this.diskCacheSize = diskCacheSize;
+    public InternalCacheDiskCacheFactory(Context context, int diskCacheSize) {
+        this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, diskCacheSize);
     }
 
-    @Override
-    public DiskCache build() {
-        DiskCache diskCache = null;
-        final File cacheDir;
-
-        if (diskCacheName != null) {
-            cacheDir = Glide.getPhotoCacheDir(context, diskCacheName);
-        } else {
-            cacheDir = Glide.getPhotoCacheDir(context);
-        }
-
-        if (cacheDir != null) {
-            diskCache = DiskLruCacheWrapper.get(cacheDir, diskCacheSize);
-        }
-
-        if (diskCache == null) {
-            diskCache = new DiskCacheAdapter();
-        }
-        return diskCache;
+    public InternalCacheDiskCacheFactory(final Context context, final String diskCacheName, int diskCacheSize) {
+        super(new CacheDirectoryGetter() {
+            @Override
+            public File getCacheDirectory() {
+                File cacheDirectory = context.getCacheDir();
+                if (cacheDirectory == null) {
+                    return null;
+                }
+                if (diskCacheName != null) {
+                    return new File(cacheDirectory, diskCacheName);
+                }
+                return cacheDirectory;
+            }
+        }, diskCacheSize);
     }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
index 326a50e86..caa72a2b7 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
@@ -68,6 +68,15 @@ public BitmapTransformation(BitmapPool bitmapPool) {
      * result.
      *
      * <p>
+     *   The provided Bitmap, toTransform, should not be recycled or returned to the pool. Glide will automatically
+     *   recycle and/or reuse toTransform if the transformation returns a different Bitmap. Similarly implementations
+     *   should never recycle or return Bitmaps that are returned as the result of this method. Recycling or returning
+     *   the provided and/or the returned Bitmap to the pool will lead to a variety of runtime exceptions and drawing
+     *   errors. See #408 for an example. If the implementation obtains and discards intermediate Bitmaps, they may
+     *   safely be returned to the BitmapPool and/or recycled.
+     * </p>
+     *
+     * <p>
      *     outWidth and outHeight will never be {@link com.bumptech.glide.request.target.Target#SIZE_ORIGINAL}, this
      *     class converts them to be the size of the Bitmap we're going to transform before calling this method.
      * </p>
