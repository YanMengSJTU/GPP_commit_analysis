diff --git a/glide/build.gradle b/glide/build.gradle
index ac0ec536a..0f9c95aab 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -4,12 +4,7 @@ apply plugin: 'java'
 
 // The paths of Android projects that should be included in the jar and javadoc.
 static def getAndroidPathsForJar() {
-    [':third_party:gif_decoder', ':library']
-}
-
-// The paths of Java projects that should be included in the jar and javadoc.
-static def getJavaPathsForJar() {
-    [':third_party:disklrucache']
+    [':third_party:gif_decoder', ':library', ':third_party:disklrucache' ]
 }
 
 // The paths of Android projects that should be included only in Javadoc, not in the jar.
@@ -19,7 +14,7 @@ static def getAndroidPathsForJavadoc() {
             ':integration:okhttp3',
             ':integration:volley',
             ':integration:gifencoder',
-            ':integration:recyclerview'
+            ':integration:recyclerview',
     ]
 }
 
@@ -28,8 +23,7 @@ static def getJavaPathsForJavadoc() {
     [':annotation']
 }
 
-(getAndroidPathsForJavadoc() + getAndroidPathsForJar() +
-        getJavaPathsForJar() + getJavaPathsForJavadoc()).each {
+(getAndroidPathsForJavadoc() + getAndroidPathsForJar() + getJavaPathsForJavadoc()).each {
     evaluationDependsOn(it)
 }
 
@@ -49,18 +43,10 @@ def getInternalAndroidProjectsForJar() {
     asProjects(getAndroidPathsForJar())
 }
 
-def getInternalJavaProjectsForJar() {
-    asProjects(getJavaPathsForJar())
-}
-
 def getInternalAndroidProjectsForJavadoc() {
     asProjects(getAndroidPathsForJavadoc())
 }
 
-def getInternalJavaProjectsForJavadoc() {
-    asProjects(getJavaPathsForJavadoc())
-}
-
 def getAndroidProjectsForJar() {
     getAndroidLibraryVariantsForJar('debug')
 }
@@ -82,16 +68,15 @@ static def getAndroidLibraryVariants(projects, variantName) {
 }
 
 def getSourceFilesForVariantJar(variantName) {
-    getAndroidLibraryVariantsForJar(variantName).collect {
-        it.getJavaCompiler().source.findAll {
+    getAndroidLibraryVariantsForJar(variantName).collect { variant -> 
+        variant.getJavaCompiler().source.findAll { 
             return !it.getName().equals("R.java") && !it.getName().equals("BuildConfig.java")
         }
-    } + getInternalJavaProjectsForJar().collect { it.sourceSets.main.allJava }
+    }
 }
 
 def getSourceFilesForVariantJavadoc(variantName) {
-    getAndroidLibraryVariantsForJavadoc(variantName).collect { it.getJavaCompiler().source } +
-            getInternalJavaProjectsForJavadoc().collect { it.sourceSets.main.allJava }
+    getAndroidLibraryVariantsForJavadoc(variantName).collect { it.getJavaCompiler().source }
 }
 
 def getAndroidJar() {
@@ -104,14 +89,10 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 // projects.
 ['debug'].each { variantName ->
 
-    task("${variantName}SourceJar", type: Jar) {
-        from getSourceFilesForVariantJar(variantName)
-    }
-
     def javadocTask = tasks.create("${variantName}Javadoc", Javadoc) {
         source = getSourceFilesForVariantJar(variantName)
         source += getSourceFilesForVariantJavadoc(variantName)
-
+      
         doFirst {
             it.classpath =
                     project.files(
@@ -122,12 +103,6 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
                             getAndroidLibraryVariantsForJavadoc(variantName).collect {
                                 LibraryVariant lib -> lib.getJavaCompiler().classpath.files
                             },
-                            getInternalJavaProjectsForJavadoc().collect { Project project ->
-                                project.sourceSets.main.compileClasspath.files
-                            },
-                            getInternalJavaProjectsForJar().collect { Project project ->
-                                project.sourceSets.main.compileClasspath.files
-                            },
                             // Finds dependencies of Android packages that would otherwise be
                             // ignored (Volley in particular)
                             getInternalAndroidProjectsForJavadoc().collect { Project project ->
@@ -165,7 +140,6 @@ jar {
                 variant.getJavaCompiler().destinationDir
             }
     )
-    from files(getInternalJavaProjectsForJar().collect { it.sourceSets.main.output })
     exclude "**/R.class"
     exclude "**/BuildConfig.class"
     exclude "**/R\$*.class"
@@ -178,17 +152,9 @@ jar {
         jar.dependsOn(project.tasks.compileDebugSources)
 }
 
-(getInternalJavaProjectsForJar() + getInternalJavaProjectsForJavadoc()).each {
-    project ->
-        debugJavadoc.dependsOn(project.tasks.compileJava)
-        jar.dependsOn(project.tasks.compileJava)
-}
-
 artifacts {
     archives debugJavadocJar {
         classifier 'javadoc'
     }
-    archives debugSourceJar {
-        classifier 'sources'
-    }
 }
+
diff --git a/library/src/main/AndroidManifest.xml b/library/src/main/AndroidManifest.xml
index 705db20aa..cdae5bd7b 100644
--- a/library/src/main/AndroidManifest.xml
+++ b/library/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest package="com.bumptech.glide">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.bumptech.glide">
   <application/>
 </manifest>
diff --git a/third_party/disklrucache/build.gradle b/third_party/disklrucache/build.gradle
index 800293655..8621df7dc 100644
--- a/third_party/disklrucache/build.gradle
+++ b/third_party/disklrucache/build.gradle
@@ -1,5 +1,4 @@
-apply plugin: 'java'
-apply plugin: 'checkstyle'
+apply plugin: 'com.android.library'
 
 repositories {
   jcenter()
@@ -16,10 +15,26 @@ checkstyle {
 dependencies {
     def junitVersion = hasProperty('JUNIT_VERSION') ? JUNIT_VERSION : '4.11';
     testCompile "junit:junit:${junitVersion}"
-    testCompile 'commons-io:commons-io:2.1'
+    testCompile 'commons-io:commons-io:2.4'
     testCompile 'org.easytesting:fest-assert-core:2.0M10'
 }
 
+android {
+    compileSdkVersion COMPILE_SDK_VERSION as int
+
+    defaultConfig {
+        minSdkVersion MIN_SDK_VERSION as int
+        targetSdkVersion TARGET_SDK_VERSION as int
+        versionName VERSION_NAME as String
+        consumerProguardFiles 'proguard-rules.txt'
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+}
+
 def uploaderScript = "${rootProject.projectDir}/scripts/upload.gradle"
 if (file(uploaderScript).exists()) {
 	apply from: uploaderScript
diff --git a/third_party/disklrucache/src/main/AndroidManifest.xml b/third_party/disklrucache/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..20eaad4e7
--- /dev/null
+++ b/third_party/disklrucache/src/main/AndroidManifest.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.bumptech.glide.disklrucache">
+
+    <application/>
+</manifest>
diff --git a/third_party/disklrucache/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java b/third_party/disklrucache/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java
index f3f80431e..2ca2e8bff 100644
--- a/third_party/disklrucache/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java
+++ b/third_party/disklrucache/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java
@@ -16,6 +16,7 @@
 
 package com.bumptech.glide.disklrucache;
 
+import android.annotation.TargetApi;
 import android.os.Build.VERSION;
 import android.os.Build.VERSION_CODES;
 import android.os.StrictMode;
@@ -672,6 +673,7 @@ private static String inputStreamToString(InputStream in) throws IOException {
    *
    * <p>Analogous to b/71520172.
    */
+  @TargetApi(VERSION_CODES.O)
   private static void closeWriter(Writer writer) throws IOException {
     // If API is less than 26, we don't need to whitelist with StrictMode.
     if (VERSION.SDK_INT < VERSION_CODES.O) {
@@ -695,6 +697,7 @@ private static void closeWriter(Writer writer) throws IOException {
    *
    * <p>See b/71520172.
    */
+  @TargetApi(VERSION_CODES.O)
   private static void flushWriter(Writer writer) throws IOException {
     // If API is less than 26, we don't need to whitelist with StrictMode.
     if (VERSION.SDK_INT < VERSION_CODES.O) {
