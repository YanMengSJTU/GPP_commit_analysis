diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 4a0bb21c5..43922a153 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -8,6 +8,7 @@
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
 import android.os.ParcelFileDescriptor;
@@ -54,6 +55,7 @@
 import com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder;
 import com.bumptech.glide.load.resource.bitmap.VideoBitmapDecoder;
 import com.bumptech.glide.load.resource.bytes.ByteBufferRewinder;
+import com.bumptech.glide.load.resource.drawable.ResourceDrawableDecoder;
 import com.bumptech.glide.load.resource.file.FileDecoder;
 import com.bumptech.glide.load.resource.gif.ByteBufferGifDecoder;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
@@ -329,6 +331,8 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
         .append(GifDecoder.class, GifDecoder.class, new UnitModelLoader.Factory<GifDecoder>())
         .append(Registry.BUCKET_BITMAP, GifDecoder.class, Bitmap.class,
             new GifFrameResourceDecoder(bitmapPool))
+        /* Drawables */
+        .append(Uri.class, Drawable.class, new ResourceDrawableDecoder(context))
         /* Files */
         .register(new ByteBufferRewinder.Factory())
         .append(File.class, ByteBuffer.class, new ByteBufferFileLoader.Factory())
@@ -349,6 +353,8 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
                 Integer.class,
                 ParcelFileDescriptor.class,
                 new ResourceLoader.FileDescriptorFactory(resources))
+        .append(Integer.class, Uri.class, new ResourceLoader.UriFactory(resources))
+        .append(int.class, Uri.class, new ResourceLoader.UriFactory(resources))
         .append(String.class, InputStream.class, new DataUrlLoader.StreamFactory())
         .append(String.class, InputStream.class, new StringLoader.StreamFactory())
         .append(String.class, ParcelFileDescriptor.class, new StringLoader.FileDescriptorFactory())
@@ -362,8 +368,8 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
         .append(Uri.class, InputStream.class, new MediaStoreVideoThumbLoader.Factory(context))
         .append(
             Uri.class,
-             InputStream.class,
-             new UriLoader.StreamFactory(context.getContentResolver()))
+            InputStream.class,
+            new UriLoader.StreamFactory(context.getContentResolver()))
         .append(Uri.class, ParcelFileDescriptor.class,
              new UriLoader.FileDescriptorFactory(context.getContentResolver()))
         .append(Uri.class, InputStream.class, new UrlUriLoader.StreamFactory())
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 6ac3518b6..37650c3f1 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -8,6 +8,7 @@
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.request.ErrorRequestCoordinator;
 import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestCoordinator;
@@ -55,6 +56,7 @@
   // than relying on model not to be null.
   @Nullable private RequestListener<TranscodeType> requestListener;
   @Nullable private RequestBuilder<TranscodeType> thumbnailBuilder;
+  @Nullable private RequestBuilder<TranscodeType> errorBuilder;
   @Nullable private Float thumbSizeMultiplier;
   private boolean isDefaultTransitionOptionsSet = true;
   private boolean isModelSet;
@@ -115,7 +117,7 @@ protected RequestOptions getMutableOptions() {
   }
 
   /**
-   * Sets a RequestBuilder listener to monitor the resource load. It's best to create a single
+   * Sets a {@link RequestListener} to monitor the resource load. It's best to create a single
    * instance of an exception handler per type of request (usually activity/fragment) rather than
    * pass one in per request to avoid some redundant object allocation.
    *
@@ -131,6 +133,34 @@ protected RequestOptions getMutableOptions() {
     return this;
   }
 
+  /**
+   * Sets a {@link RequestBuilder} that is built and run iff the load started by this
+   * {@link RequestBuilder} fails.
+   *
+   * <p>If this {@link RequestBuilder} uses a thumbnail that succeeds the given error
+   * {@link RequestBuilder} will be started anyway if the non-thumbnail request fails.
+   *
+   * <p>Recursive calls to {@link #error(RequestBuilder)} as well as calls to
+   * {@link #thumbnail(float)} and {@link #thumbnail(RequestBuilder)} are supported for the given
+   * error {@link RequestBuilder}.
+   *
+   * <p>Unlike {@link #thumbnail(RequestBuilder)} and {@link #thumbnail(float)}, no options from
+   * this primary {@link RequestBuilder} are propagated to the given error {@link RequestBuilder}.
+   * Options like priority, override widths and heights and transitions must be applied
+   * independently to the error builder.
+   *
+   * <p>The given {@link RequestBuilder} will start and potentially override a fallback drawable
+   * if it's set on this {@link RequestBuilder} via
+   * {@link RequestOptions#fallback(android.graphics.drawable.Drawable)} or
+   * {@link RequestOptions#fallback(int)}.
+   *
+   * @return This {@link RequestBuilder}.
+   */
+  public RequestBuilder<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> errorBuilder) {
+    this.errorBuilder = errorBuilder;
+    return this;
+  }
+
   /**
    * Loads and displays the resource retrieved by the given thumbnail request if it finishes before
    * this request. Best used for loading thumbnail resources that are smaller and will be loaded
@@ -607,9 +637,55 @@ private Request buildRequest(Target<TranscodeType> target, RequestOptions reques
   }
 
   private Request buildRequestRecursive(Target<TranscodeType> target,
-      @Nullable ThumbnailRequestCoordinator parentCoordinator,
+      @Nullable RequestCoordinator parentCoordinator,
       TransitionOptions<?, ? super TranscodeType> transitionOptions,
       Priority priority, int overrideWidth, int overrideHeight, RequestOptions requestOptions) {
+
+    // Build the ErrorRequestCoordinator first if necessary so we can update parentCoordinator.
+    ErrorRequestCoordinator errorRequestCoordinator = null;
+    if (errorBuilder != null) {
+      errorRequestCoordinator = new ErrorRequestCoordinator(parentCoordinator);
+      parentCoordinator = errorRequestCoordinator;
+    }
+
+    Request mainRequest =
+        buildThumbnailRequestRecursive(
+            target,
+            parentCoordinator,
+            transitionOptions,
+            priority,
+            overrideWidth,
+            overrideHeight,
+            requestOptions);
+
+    if (errorRequestCoordinator == null) {
+      return mainRequest;
+    }
+
+    int errorOverrideWidth = errorBuilder.requestOptions.getOverrideWidth();
+    int errorOverrideHeight = errorBuilder.requestOptions.getOverrideHeight();
+    if (Util.isValidDimensions(overrideWidth, overrideHeight)
+        && !errorBuilder.requestOptions.isValidOverride()) {
+      errorOverrideWidth = requestOptions.getOverrideWidth();
+      errorOverrideHeight = requestOptions.getOverrideHeight();
+    }
+
+    Request errorRequest = errorBuilder.buildRequestRecursive(
+        target,
+        errorRequestCoordinator,
+        errorBuilder.transitionOptions,
+        errorBuilder.requestOptions.getPriority(),
+        errorOverrideWidth,
+        errorOverrideHeight,
+        errorBuilder.requestOptions);
+    errorRequestCoordinator.setRequests(mainRequest, errorRequest);
+    return errorRequestCoordinator;
+  }
+
+  private Request buildThumbnailRequestRecursive(Target<TranscodeType> target,
+        @Nullable RequestCoordinator parentCoordinator,
+        TransitionOptions<?, ? super TranscodeType> transitionOptions,
+        Priority priority, int overrideWidth, int overrideHeight, RequestOptions requestOptions) {
     if (thumbnailBuilder != null) {
       // Recursive case: contains a potentially recursive thumbnail request builder.
       if (isThumbnailBuilt) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
index 24fc4b6ef..602fac513 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ResourceLoader.java
@@ -27,7 +27,6 @@ public ResourceLoader(Resources resources, ModelLoader<Uri, Data> uriLoader) {
 
   @Override
   public LoadData<Data> buildLoadData(Integer model, int width, int height, Options options) {
-
     Uri uri = getResourceUri(model);
     return uri == null ? null : uriLoader.buildLoadData(uri, width, height, options);
   }
@@ -98,4 +97,26 @@ public void teardown() {
       // Do nothing.
     }
   }
+
+  /**
+   * Factory for loading resource {@link Uri}s from Android resource ids.
+   */
+  public static class UriFactory implements ModelLoaderFactory<Integer, Uri> {
+
+    private final Resources resources;
+
+    public UriFactory(Resources resources) {
+      this.resources = resources;
+    }
+
+    @Override
+    public ModelLoader<Integer, Uri> build(MultiModelLoaderFactory multiFactory) {
+      return new ResourceLoader<>(resources, new UnitModelLoader<Uri>());
+    }
+
+    @Override
+    public void teardown() {
+      // Do nothing.
+    }
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
new file mode 100644
index 000000000..3718eafc1
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
@@ -0,0 +1,49 @@
+package com.bumptech.glide.load.resource.drawable;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.content.res.Resources.Theme;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.Nullable;
+import android.support.v4.content.res.ResourcesCompat;
+import android.support.v7.content.res.AppCompatResources;
+
+/**
+ * Handles decoding Drawables with the v7 support library if present and falling back to the v4
+ * support library otherwise.
+ */
+public final class DrawableDecoderCompat {
+  private static volatile boolean shouldCallAppCompatResources = true;
+  private DrawableDecoderCompat() {
+    // Utility class.
+  }
+
+  /**
+   * Loads a Drawable using {@link AppCompatResources} if available and {@link ResourcesCompat}
+   * otherwise, depending on whether or not the v7 support library is included in the application.
+   */
+  public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullable Theme theme) {
+    try {
+      // Race conditions may cause us to attempt to load using v7 more than once. That's ok since
+      // this check is a modest optimization and the output will be correct anyway.
+      if (shouldCallAppCompatResources) {
+        return loadDrawableV7(context, id);
+      }
+    } catch (NoClassDefFoundError error) {
+      shouldCallAppCompatResources = false;
+    }
+
+    return loadDrawableV4(context, id, theme != null ? theme : context.getTheme());
+  }
+
+  private static Drawable loadDrawableV7(Context context, @DrawableRes int id) {
+    return AppCompatResources.getDrawable(context, id);
+  }
+
+  private static Drawable loadDrawableV4(
+      Context context, @DrawableRes int id, @Nullable Theme theme) {
+    Resources resources = context.getResources();
+    return ResourcesCompat.getDrawable(resources, id, theme);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
new file mode 100644
index 000000000..c76cf0f57
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
@@ -0,0 +1,70 @@
+package com.bumptech.glide.load.resource.drawable;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.engine.Resource;
+import java.io.IOException;
+import java.util.List;
+
+/**
+ * Decodes {@link Drawable}s given resource {@link Uri}s in the form
+ * android.resource://<package_name>/<type>/<name>.
+ */
+public class ResourceDrawableDecoder implements ResourceDecoder<Uri, Drawable> {
+  private static final int EXPECTED_PATH_SEGMENTS = 2;
+  private static final int TYPE_PATH_SEGMENT_INDEX = 0;
+  private static final int NAME_PATH_SEGMENT_INDEX = 1;
+
+  private final Context context;
+
+  public ResourceDrawableDecoder(Context context) {
+    this.context = context.getApplicationContext();
+  }
+
+  @Override
+  public boolean handles(Uri source, Options options) throws IOException {
+    return source.getScheme().equals(ContentResolver.SCHEME_ANDROID_RESOURCE);
+  }
+
+  @Nullable
+  @Override
+  public Resource<Drawable> decode(Uri source, int width, int height, Options options)
+      throws IOException {
+    // Parsing is based on the logic in ResourceLoader/the android framework that constructs
+    // resource Uris.
+    List<String> segments = source.getPathSegments();
+    if (segments.size() != EXPECTED_PATH_SEGMENTS) {
+      throw new IOException("Unexpected path segments for: " + source + " segments: " + segments);
+    }
+    String packageName = source.getAuthority();
+    String typeName = segments.get(TYPE_PATH_SEGMENT_INDEX);
+    String resourceName = segments.get(NAME_PATH_SEGMENT_INDEX);
+    int id = context.getResources().getIdentifier(resourceName, typeName, packageName);
+    Drawable drawable = DrawableDecoderCompat.getDrawable(context, id, null /*theme*/);
+    if (drawable == null) {
+      throw new IOException("ContextCompat#getDrawable returned null for: " + source);
+    }
+    return new DrawableResource<Drawable>(drawable) {
+      @SuppressWarnings("unchecked")
+      @Override
+      public Class<Drawable> getResourceClass() {
+        return (Class<Drawable>) drawable.getClass();
+      }
+
+      @Override
+      public int getSize() {
+        return 1;
+      }
+
+      @Override
+      public void recycle() {
+        // Do nothing.
+      }
+    };
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
new file mode 100644
index 000000000..e1037656b
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
@@ -0,0 +1,145 @@
+package com.bumptech.glide.request;
+
+/**
+ * Runs a single primary {@link Request} until it completes and then a fallback error request only
+ * if the single primary request fails.
+ */
+public final class ErrorRequestCoordinator implements RequestCoordinator,
+    Request {
+
+  private final RequestCoordinator coordinator;
+  private Request primary;
+  private Request error;
+
+  public ErrorRequestCoordinator(RequestCoordinator coordinator) {
+    this.coordinator = coordinator;
+  }
+
+  public void setRequests(Request primary, Request error) {
+    this.primary = primary;
+    this.error = error;
+  }
+
+  @Override
+  public void begin() {
+    if (!primary.isRunning()) {
+      primary.begin();
+    }
+  }
+
+  @Override
+  public void pause() {
+    if (!primary.isFailed()) {
+      primary.pause();
+    }
+    if (error.isRunning()) {
+      error.pause();
+    }
+  }
+
+  @Override
+  public void clear() {
+    if (primary.isFailed()) {
+      error.clear();
+    } else {
+      primary.clear();
+    }
+  }
+
+  @Override
+  public boolean isPaused() {
+    return primary.isFailed() ? error.isPaused() : primary.isPaused();
+  }
+
+  @Override
+  public boolean isRunning() {
+    return primary.isFailed() ? error.isRunning() : primary.isRunning();
+  }
+
+  @Override
+  public boolean isComplete() {
+    return primary.isFailed() ? error.isComplete() : primary.isComplete();
+  }
+
+  @Override
+  public boolean isResourceSet() {
+    return primary.isFailed() ? error.isResourceSet() : primary.isResourceSet();
+  }
+
+  @Override
+  public boolean isCancelled() {
+    return primary.isFailed() ? error.isCancelled() : primary.isCancelled();
+  }
+
+  @Override
+  public boolean isFailed() {
+    return primary.isFailed() && error.isFailed();
+  }
+
+  @Override
+  public void recycle() {
+    primary.recycle();
+    error.recycle();
+  }
+
+  @Override
+  public boolean isEquivalentTo(Request o) {
+    if (o instanceof ErrorRequestCoordinator) {
+      ErrorRequestCoordinator other = (ErrorRequestCoordinator) o;
+      return primary.isEquivalentTo(other.primary) && error.isEquivalentTo(other.error);
+    }
+    return false;
+  }
+
+  @Override
+  public boolean canSetImage(Request request) {
+    return parentCanSetImage() && isValidRequest(request);
+  }
+
+  private boolean parentCanSetImage() {
+    return coordinator == null || coordinator.canSetImage(this);
+  }
+
+  @Override
+  public boolean canNotifyStatusChanged(Request request) {
+    return parentCanNotifyStatusChanged() && isValidRequest(request);
+  }
+
+  private boolean parentCanNotifyStatusChanged() {
+    return coordinator == null || coordinator.canNotifyStatusChanged(this);
+  }
+
+  private boolean isValidRequest(Request request) {
+    return request.equals(primary) || (primary.isFailed() && request.equals(error));
+  }
+
+  @Override
+  public boolean isAnyResourceSet() {
+    return parentIsAnyResourceSet() || isResourceSet();
+  }
+
+  private boolean parentIsAnyResourceSet() {
+    return coordinator != null && coordinator.isAnyResourceSet();
+  }
+
+  @Override
+  public void onRequestSuccess(Request request) {
+    if (coordinator != null) {
+      coordinator.onRequestSuccess(this);
+    }
+  }
+
+  @Override
+  public void onRequestFailed(Request request) {
+    if (!request.equals(error)) {
+      if (!error.isRunning()) {
+        error.begin();
+      }
+      return;
+    }
+
+    if (coordinator != null) {
+      coordinator.onRequestFailed(error);
+    }
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
index 2143366eb..36f3915e9 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestCoordinator.java
@@ -28,7 +28,10 @@
   boolean isAnyResourceSet();
 
   /**
-   * Must be called when a request coordinated by this object completes successfully.
+   * Must be called when a {@link Request} coordinated by this object completes successfully.
    */
   void onRequestSuccess(Request request);
+
+  /** Must be called when a {@link Request} coordinated by this object fails. */
+  void onRequestFailed(Request request);
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index e5a1ec152..2c6125674 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -130,9 +130,6 @@ public void removeCallback(SizeReadyCallback cb) {
     // Do nothing because we do not retain references to SizeReadyCallbacks.
   }
 
-  /**
-   * {@inheritDoc}
-   */
   @Override
   public void setRequest(@Nullable Request request) {
     this.request = request;
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 6951e10d6..2d7951351 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -1,12 +1,9 @@
 package com.bumptech.glide.request;
 
-import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.Nullable;
-import android.support.v4.content.res.ResourcesCompat;
 import android.support.v4.util.Pools;
-import android.support.v7.content.res.AppCompatResources;
 import android.util.Log;
 import com.bumptech.glide.GlideContext;
 import com.bumptech.glide.Priority;
@@ -14,6 +11,7 @@
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.Resource;
+import com.bumptech.glide.load.resource.drawable.DrawableDecoderCompat;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.transition.Transition;
@@ -107,7 +105,6 @@
   private Drawable fallbackDrawable;
   private int width;
   private int height;
-  private static boolean shouldCallAppCompatResources = true;
 
   public static <R> SingleRequest<R> obtain(
       GlideContext glideContext,
@@ -277,8 +274,9 @@ void cancel() {
   private void assertNotCallingCallbacks() {
     if (isCallingCallbacks) {
       throw new IllegalStateException("You can't start or clear loads in RequestListener or"
-          + " Target callbacks. If you must do so, consider posting your into() or clear() calls"
-          + " to the main thread using a Handler instead.");
+          + " Target callbacks. If you're trying to start a fallback request when a load fails, use"
+          + " RequestBuilder#error(RequestBuilder). Otherwise consider posting your into() or"
+          + " clear() calls to the main thread using a Handler instead.");
     }
   }
 
@@ -381,29 +379,7 @@ private Drawable getFallbackDrawable() {
   }
 
   private Drawable loadDrawable(@DrawableRes int resourceId) {
-    if (shouldCallAppCompatResources) {
-      return loadDrawableV7(resourceId);
-    } else {
-      return loadDrawableBase(resourceId);
-    }
-  }
-
-  /**
-   * Tries to load the drawable thanks to AppCompatResources.<br>
-   * This allows to parse VectorDrawables on legacy devices if the appcompat v7 is in the classpath.
-   */
-  private Drawable loadDrawableV7(@DrawableRes int resourceId) {
-    try {
-      return AppCompatResources.getDrawable(glideContext, resourceId);
-    } catch (NoClassDefFoundError error) {
-      shouldCallAppCompatResources = false;
-      return loadDrawableBase(resourceId);
-    }
-  }
-
-  private Drawable loadDrawableBase(@DrawableRes int resourceId) {
-    Resources resources = glideContext.getResources();
-    return ResourcesCompat.getDrawable(resources, resourceId, requestOptions.getTheme());
+    return DrawableDecoderCompat.getDrawable(glideContext, resourceId, requestOptions.getTheme());
   }
 
   private void setErrorPlaceholder() {
@@ -492,6 +468,12 @@ private void notifyLoadSuccess() {
     }
   }
 
+  private void notifyLoadFailed() {
+    if (requestCoordinator != null) {
+      requestCoordinator.onRequestFailed(this);
+    }
+  }
+
   /**
    * A callback method that should never be invoked directly.
    */
@@ -595,6 +577,8 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
     } finally {
       isCallingCallbacks = false;
     }
+
+    notifyLoadFailed();
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
index 6b62270e2..8bee19db7 100644
--- a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
@@ -77,6 +77,17 @@ public void onRequestSuccess(Request request) {
     }
   }
 
+  @Override
+  public void onRequestFailed(Request request) {
+    if (!request.equals(full)) {
+      return;
+    }
+
+    if (coordinator != null) {
+      coordinator.onRequestFailed(this);
+    }
+  }
+
   private boolean parentIsAnyResourceSet() {
     return coordinator != null && coordinator.isAnyResourceSet();
   }
@@ -102,9 +113,6 @@ public void pause() {
     thumb.pause();
   }
 
-  /**
-   * {@inheritDoc}
-   */
   @Override
   public void clear() {
     isRunning = false;
@@ -151,9 +159,6 @@ public boolean isFailed() {
     return full.isFailed();
   }
 
-  /**
-   * {@inheritDoc}.
-   */
   @Override
   public void recycle() {
     full.recycle();
