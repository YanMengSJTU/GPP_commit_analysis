diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
index 0dfb13a94..61c24216b 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawable.java
@@ -134,6 +134,13 @@ public int getFrameCount() {
     return state.frameLoader.getFrameCount();
   }
 
+  /**
+   * Returns the current frame index, or -1 if no frame is displayed.
+   */
+  public int getFrameIndex() {
+    return state.frameLoader.getCurrentIndex();
+  }
+
   private void resetLoopCount() {
     loopCount = 0;
   }
@@ -254,7 +261,7 @@ public int getOpacity() {
 
   @TargetApi(Build.VERSION_CODES.HONEYCOMB)
   @Override
-  public void onFrameReady(int frameIndex) {
+  public void onFrameReady() {
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && getCallback() == null) {
       stop();
       invalidateSelf();
@@ -263,7 +270,7 @@ public void onFrameReady(int frameIndex) {
 
     invalidateSelf();
 
-    if (frameIndex == state.frameLoader.getFrameCount() - 1) {
+    if (getFrameIndex() == getFrameCount() - 1) {
       loopCount++;
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
index 1eb928d18..bc4a01613 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifFrameLoader.java
@@ -46,7 +46,7 @@
   private Transformation<Bitmap> transformation;
 
   public interface FrameCallback {
-    void onFrameReady(int index);
+    void onFrameReady();
   }
 
   public GifFrameLoader(Context context, GifDecoder gifDecoder, int width, int height,
@@ -121,6 +121,10 @@ int getSize() {
     return gifDecoder.getByteSize() + getFrameSize();
   }
 
+  int getCurrentIndex() {
+    return current != null ? current.index : -1;
+  }
+
   private int getFrameSize() {
     return Util.getBitmapByteSize(getCurrentFrame().getWidth(), getCurrentFrame().getHeight(),
         getCurrentFrame().getConfig());
@@ -208,7 +212,7 @@ void onFrameReady(DelayTarget delayTarget) {
       // concurrent modifications.
       for (int i = callbacks.size() - 1; i >= 0; i--) {
         FrameCallback cb = callbacks.get(i);
-        cb.onFrameReady(delayTarget.index);
+        cb.onFrameReady();
       }
       if (previous != null) {
         handler.obtainMessage(FrameLoaderCallback.MSG_CLEAR, previous).sendToTarget();
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 56e3b27d6..d838b7efa 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -81,6 +81,7 @@ public void setUp() {
     when(frameLoader.getWidth()).thenReturn(frameWidth);
     when(frameLoader.getHeight()).thenReturn(frameHeight);
     when(frameLoader.getCurrentFrame()).thenReturn(firstFrame);
+    when(frameLoader.getCurrentIndex()).thenReturn(0);
     drawable.setCallback(cb);
     initialSdkVersion = Build.VERSION.SDK_INT;
   }
@@ -185,7 +186,7 @@ public void testReturnsTrueFromIsRunningWhenRunning() {
   @Test
   public void testInvalidatesSelfWhenFrameReady() {
     drawable.setIsRunning(true);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     verify(cb).invalidateDrawable(eq(drawable));
   }
@@ -194,7 +195,7 @@ public void testInvalidatesSelfWhenFrameReady() {
   public void testDoesNotStartLoadingNextFrameWhenCurrentFinishesIfHasNoCallback() {
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     verify(frameLoader).unsubscribe(eq(drawable));
   }
@@ -203,7 +204,7 @@ public void testDoesNotStartLoadingNextFrameWhenCurrentFinishesIfHasNoCallback()
   public void testStopsWhenCurrentFrameFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     assertFalse(drawable.isRunning());
   }
@@ -214,7 +215,7 @@ public void testDoesNotStopWhenCurrentFrameFinishesIfHasNoCallbackAndIsPreHoneyc
 
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     assertTrue(drawable.isRunning());
   }
@@ -223,7 +224,7 @@ public void testDoesNotStopWhenCurrentFrameFinishesIfHasNoCallbackAndIsPreHoneyc
   public void testUnsubscribesWhenCurrentFinishesIfHasNoCallbackAndIsAtLeastAtHoneycomb() {
     drawable.setIsRunning(true);
     drawable.setCallback(null);
-    drawable.onFrameReady(0);
+    drawable.onFrameReady();
 
     verify(frameLoader).unsubscribe(eq(drawable));
   }
@@ -291,6 +292,24 @@ public void testReturnsFrameCountFromDecoder() {
     assertEquals(expected, drawable.getFrameCount());
   }
 
+  @Test
+  public void testReturnsDefaultFrameIndex() {
+    final int expected = -1;
+
+    when(frameLoader.getCurrentIndex()).thenReturn(expected);
+
+    assertEquals(expected, drawable.getFrameIndex());
+  }
+
+  @Test
+  public void testReturnsNonDefaultFrameIndex() {
+    final int expected = 100;
+
+    when(frameLoader.getCurrentIndex()).thenReturn(expected);
+
+    assertEquals(expected, drawable.getFrameIndex());
+  }
+
   @Test
   public void testRecycleCallsClearOnFrameManager() {
     drawable.recycle();
@@ -410,13 +429,16 @@ public void testCallingStartResetsLoopCounter() {
     drawable.setVisible(true, true);
     drawable.start();
 
-    drawable.onFrameReady(0);
-    drawable.onFrameReady(1);
+    drawable.onFrameReady();
+    when(frameLoader.getCurrentIndex()).thenReturn(1);
+    drawable.onFrameReady();
 
     drawable.start();
 
-    drawable.onFrameReady(0);
-    drawable.onFrameReady(1);
+    when(frameLoader.getCurrentIndex()).thenReturn(0);
+    drawable.onFrameReady();
+    when(frameLoader.getCurrentIndex()).thenReturn(1);
+    drawable.onFrameReady();
 
     // 4 onFrameReady(), 2 start()
     verify(cb, times(4 + 2)).invalidateDrawable(eq(drawable));
@@ -473,7 +495,7 @@ public void testDoesNotDrawFrameAfterRecycle() {
     drawable.setVisible(true, true);
     drawable.start();
     when(frameLoader.getCurrentFrame()).thenReturn(bitmap);
-    drawable.onFrameReady(1);
+    drawable.onFrameReady();
     drawable.recycle();
     Canvas canvas = mock(Canvas.class);
     drawable.draw(canvas);
@@ -541,7 +563,8 @@ private void verifyRanLoops(int loopCount, int frameCount) {
   private void runLoops(int loopCount, int frameCount) {
     for (int loop = 0; loop < loopCount; loop++) {
       for (int frame = 0; frame < frameCount; frame++) {
-        drawable.onFrameReady(frame);
+        when(frameLoader.getCurrentIndex()).thenReturn(frame);
+        drawable.onFrameReady();
       }
     }
   }
