diff --git a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
index 8cf2058f5..3fac0791c 100644
--- a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
@@ -27,17 +27,6 @@
    */
   PREFER_ARGB_8888,
 
-  /**
-   * Identical to {@link #PREFER_ARGB_8888} but prevents Glide from using {@link
-   * android.graphics.Bitmap.Config#HARDWARE} on Android O+.
-   *
-   * @deprecated If you must disable hardware bitmaps, set
-   * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false
-   * instead.
-   */
-  @Deprecated
-  PREFER_ARGB_8888_DISALLOW_HARDWARE,
-
   /**
    * Bitmaps decoded from image formats that support and/or use alpha (some types of PNGs, GIFs etc)
    * should return {@link android.graphics.Bitmap.Config#ARGB_8888} for
@@ -53,5 +42,5 @@
   /**
    * The default value for DecodeFormat.
    */
-  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;
+  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
index 9ddc221ed..09d00876d 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
@@ -43,7 +43,6 @@ public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
       if (builder.getConfig() == null) {
         builder.setConfig(
             defaultFormat == DecodeFormat.PREFER_ARGB_8888
-                || defaultFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
             ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
       }
       bitmapAttributes[i] = builder.build();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 8fdb96859..53e7d25f4 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -89,7 +89,7 @@
    */
   public static final Option<Boolean> ALLOW_HARDWARE_CONFIG =
       Option.memory(
-          "com.bumtpech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
+          "com.bumptech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", false);
 
   private static final String WBMP_MIME_TYPE = "image/vnd.wap.wbmp";
   private static final String ICO_MIME_TYPE = "image/x-ico";
@@ -201,9 +201,6 @@ public boolean handles(@SuppressWarnings("unused") ByteBuffer byteBuffer) {
     boolean fixBitmapToRequestedDimensions = options.get(FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS);
     boolean isHardwareConfigAllowed =
       options.get(ALLOW_HARDWARE_CONFIG) != null && options.get(ALLOW_HARDWARE_CONFIG);
-    if (decodeFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE) {
-      isHardwareConfigAllowed = false;
-    }
 
     try {
       Bitmap result = decodeFromWrappedStreams(is, bitmapFactoryOptions,
@@ -525,7 +522,6 @@ private void calculateConfig(
 
     // Changing configs can cause skewing on 4.1, see issue #128.
     if (format == DecodeFormat.PREFER_ARGB_8888
-        || format == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
         || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN) {
       optionsWithScaling.inPreferredConfig = Bitmap.Config.ARGB_8888;
       return;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
index fe7c0357d..1991d205f 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
@@ -82,7 +82,6 @@ boolean setHardwareConfigIfAllowed(
       boolean isExifOrientationRequired) {
     if (!isHardwareConfigAllowed
         || Build.VERSION.SDK_INT < Build.VERSION_CODES.O
-        || decodeFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
         || isExifOrientationRequired) {
       return false;
     }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
index 034a66067..97567671b 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
@@ -43,7 +43,7 @@ public void runRequest(@NonNull Request request) {
     if (!isPaused) {
       request.begin();
     } else {
-      request.pause();
+      request.clear();
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "Paused, delaying request");
       }
@@ -98,7 +98,7 @@ public void pauseRequests() {
     isPaused = true;
     for (Request request : Util.getSnapshot(requests)) {
       if (request.isRunning()) {
-        request.pause();
+        request.clear();
         pendingRequests.add(request);
       }
     }
@@ -109,7 +109,7 @@ public void pauseAllRequests() {
     isPaused = true;
     for (Request request : Util.getSnapshot(requests)) {
       if (request.isRunning() || request.isComplete()) {
-        request.pause();
+        request.clear();
         pendingRequests.add(request);
       }
     }
@@ -121,7 +121,10 @@ public void pauseAllRequests() {
   public void resumeRequests() {
     isPaused = false;
     for (Request request : Util.getSnapshot(requests)) {
-      if (!request.isComplete() && !request.isCancelled() && !request.isRunning()) {
+      // We don't need to check for cleared here. Any explicit clear by a user will remove the
+      // Request from the tracker, so the only way we'd find a cleared request here is if we cleared
+      // it. As a result it should be safe for us to resume cleared requests.
+      if (!request.isComplete() && !request.isRunning()) {
         request.begin();
       }
     }
@@ -147,12 +150,12 @@ public void clearRequests() {
    */
   public void restartRequests() {
     for (Request request : Util.getSnapshot(requests)) {
-      if (!request.isComplete() && !request.isCancelled()) {
-        // Ensure the request will be restarted in onResume.
-        request.pause();
+      if (!request.isComplete() && !request.isCleared()) {
+        request.clear();
         if (!isPaused) {
           request.begin();
         } else {
+          // Ensure the request will be restarted in onResume.
           pendingRequests.add(request);
         }
       }
diff --git a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
index cd6a43151..93b662d8f 100644
--- a/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ErrorRequestCoordinator.java
@@ -30,16 +30,6 @@ public void begin() {
     }
   }
 
-  @Override
-  public void pause() {
-    if (!primary.isFailed()) {
-      primary.pause();
-    }
-    if (error.isRunning()) {
-      error.pause();
-    }
-  }
-
   @Override
   public void clear() {
     primary.clear();
@@ -50,11 +40,6 @@ public void clear() {
     }
   }
 
-  @Override
-  public boolean isPaused() {
-    return primary.isFailed() ? error.isPaused() : primary.isPaused();
-  }
-
   @Override
   public boolean isRunning() {
     return primary.isFailed() ? error.isRunning() : primary.isRunning();
@@ -71,8 +56,8 @@ public boolean isResourceSet() {
   }
 
   @Override
-  public boolean isCancelled() {
-    return primary.isFailed() ? error.isCancelled() : primary.isCancelled();
+  public boolean isCleared() {
+    return primary.isFailed() ? error.isCleared() : primary.isCleared();
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/request/Request.java b/library/src/main/java/com/bumptech/glide/request/Request.java
index ad89792fb..f60198184 100644
--- a/library/src/main/java/com/bumptech/glide/request/Request.java
+++ b/library/src/main/java/com/bumptech/glide/request/Request.java
@@ -10,11 +10,6 @@
    */
   void begin();
 
-  /**
-   * Identical to {@link #clear()} except that the request may later be restarted.
-   */
-  void pause();
-
   /**
    * Prevents any bitmaps being loaded from previous requests, releases any resources held by this
    * request, displays the current placeholder if one was provided, and marks the request as having
@@ -22,11 +17,6 @@
    */
   void clear();
 
-  /**
-   * Returns true if this request is paused and may be restarted.
-   */
-  boolean isPaused();
-
   /**
    * Returns true if this request is running and has not completed or failed.
    */
@@ -44,9 +34,9 @@
   boolean isResourceSet();
 
   /**
-   * Returns true if the request has been cancelled.
+   * Returns true if the request has been cleared.
    */
-  boolean isCancelled();
+  boolean isCleared();
 
   /**
    * Returns true if the request has failed.
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index eee923aa3..d04890c11 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -74,17 +74,9 @@
      */
     FAILED,
     /**
-     * Cancelled by the user, may not be restarted.
-     */
-    CANCELLED,
-    /**
-     * Cleared by the user with a placeholder set, may not be restarted.
+     * Cleared by the user with a placeholder set, may be restarted.
      */
     CLEARED,
-    /**
-     * Temporarily paused by the system, may be restarted.
-     */
-    PAUSED,
   }
 
   @Nullable
@@ -282,11 +274,10 @@ public void begin() {
    *
    * @see #clear()
    */
-  void cancel() {
+  private void cancel() {
     assertNotCallingCallbacks();
     stateVerifier.throwIfRecycled();
     target.removeCallback(this);
-    status = Status.CANCELLED;
     if (loadStatus != null) {
       loadStatus.cancel();
       loadStatus = null;
@@ -327,19 +318,8 @@ public void clear() {
     if (canNotifyCleared()) {
       target.onLoadCleared(getPlaceholderDrawable());
     }
-    // Must be after cancel().
-    status = Status.CLEARED;
-  }
 
-  @Override
-  public boolean isPaused() {
-    return status == Status.PAUSED;
-  }
-
-  @Override
-  public void pause() {
-    clear();
-    status = Status.PAUSED;
+    status = Status.CLEARED;
   }
 
   private void releaseResource(Resource<?> resource) {
@@ -363,8 +343,8 @@ public boolean isResourceSet() {
   }
 
   @Override
-  public boolean isCancelled() {
-    return status == Status.CANCELLED || status == Status.CLEARED;
+  public boolean isCleared() {
+    return status == Status.CLEARED;
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
index ec172f848..eaa4ba5a0 100644
--- a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
@@ -120,13 +120,6 @@ public void begin() {
     }
   }
 
-  @Override
-  public void pause() {
-    isRunning = false;
-    full.pause();
-    thumb.pause();
-  }
-
   @Override
   public void clear() {
     isRunning = false;
@@ -134,11 +127,6 @@ public void clear() {
     full.clear();
   }
 
-  @Override
-  public boolean isPaused() {
-    return full.isPaused();
-  }
-
   /**
    * Returns true if the full request is still running.
    */
@@ -161,8 +149,8 @@ public boolean isResourceSet() {
   }
 
   @Override
-  public boolean isCancelled() {
-    return full.isCancelled();
+  public boolean isCleared() {
+    return full.isCleared();
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/request/target/Target.java b/library/src/main/java/com/bumptech/glide/request/target/Target.java
index 3aa385ce5..e9eb1a538 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/Target.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/Target.java
@@ -37,10 +37,6 @@
    * called. Loads can be paused and restarted due to lifecycle or connectivity events and each
    * restart may cause a call here.
    *
-   * <p>You must ensure that any current Drawable received in {@link #onResourceReady(Object,
-   * Transition)} is no longer displayed before redrawing the container (usually a View) or
-   * changing its visibility.
-   *
    * @param placeholder The placeholder drawable to optionally show, or null.
    */
   void onLoadStarted(@Nullable Drawable placeholder);
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 58f001b97..8df9ef60d 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -126,7 +126,7 @@ public void onViewDetachedFromWindow(View v) {
   @SuppressWarnings("WeakerAccess")
   @Synthetic void resumeMyRequest() {
     Request request = getRequest();
-    if (request != null && request.isPaused()) {
+    if (request != null && request.isCleared()) {
       request.begin();
     }
   }
@@ -134,9 +134,11 @@ public void onViewDetachedFromWindow(View v) {
   @SuppressWarnings("WeakerAccess")
   @Synthetic void pauseMyRequest() {
     Request request = getRequest();
-    if (request != null && !request.isCancelled() && !request.isPaused()) {
+    // If the Request were cleared by the developer, it would be null here. The only way it's
+    // present is if the developer hasn't previously cleared this Target.
+    if (request != null) {
       isClearedByUs = true;
-      request.pause();
+      request.clear();
       isClearedByUs = false;
     }
   }
diff --git a/library/test/src/test/java/com/bumptech/glide/GlideTest.java b/library/test/src/test/java/com/bumptech/glide/GlideTest.java
index 68ee3870f..24b43b552 100644
--- a/library/test/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/GlideTest.java
@@ -698,7 +698,7 @@ public void onResourceReady(@NonNull Drawable resource,
     requestManager.clear(target);
 
     assertThat(target.getRequest()).isNull();
-    assertThat(request.isCancelled()).isTrue();
+    assertThat(request.isCleared()).isTrue();
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
index e199738c9..f83e4be00 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
@@ -192,7 +192,7 @@ public void testCanResetSizeDynamically() {
 
     pool.setSizeMultiplier(1);
 
-    assertEquals(Math.round(MAX_SIZE * sizeMultiplier) - MAX_SIZE, strategy.numRemoves);
+    assertEquals(MAX_SIZE * sizeMultiplier - MAX_SIZE, strategy.numRemoves);
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 15bf84671..d5a777f69 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -269,8 +269,8 @@ public void testSetsConfigOnBuildersToDefaultIfNotSet() {
     bitmapPreFiller.preFill(builder);
 
     InOrder order = inOrder(builder);
-    order.verify(builder).setConfig(DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888
-        || DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
+    order.verify(builder).setConfig(
+        DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888
         ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
     order.verify(builder).build();
   }
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
index b39d3d8c8..605683c8a 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
@@ -5,9 +5,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import com.bumptech.glide.request.Request;
@@ -33,25 +30,25 @@ public void setUp() {
 
   @Test
   public void clearRequests_doesNotRecycleRequests() {
-    Request request = mock(Request.class);
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
 
     tracker.clearRequests();
 
-    verify(request).clear();
-    verify(request, never()).recycle();
+    assertThat(request.isCleared()).isTrue();
+    assertThat(request.isRecycled()).isFalse();
   }
 
   @Test
   public void clearRemoveAndRecycle_withRequestPreviouslyClearedInClearRequests_doesNothing() {
-    Request request = mock(Request.class);
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
 
     tracker.clearRequests();
     tracker.clearRemoveAndRecycle(request);
 
-    verify(request).clear();
-    verify(request, never()).recycle();
+    assertThat(request.isCleared()).isTrue();
+    assertThat(request.isRecycled()).isFalse();
   }
 
   @Test
@@ -61,164 +58,173 @@ public void clearRemoveAndRecycle_withNullRequest_doesNothingAndReturnsTrue() {
 
   @Test
   public void clearRemoveAndRecycle_withUnTrackedRequest_doesNothingAndReturnsFalse() {
-    Request request = mock(Request.class);
+    FakeRequest request = new FakeRequest();
 
     assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();
 
-    verify(request, never()).clear();
-    verify(request, never()).recycle();
+    assertThat(request.isCleared()).isFalse();
+    assertThat(request.isRecycled()).isFalse();
   }
 
   @Test
   public void clearRemoveAndRecycle_withTrackedRequest_clearsRecyclesAndReturnsTrue() {
-    Request request = mock(Request.class);
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
 
     assertThat(tracker.clearRemoveAndRecycle(request)).isTrue();
-    verify(request).clear();
-    verify(request).recycle();
+    assertThat(request.isCleared()).isTrue();
+    assertThat(request.isRecycled()).isTrue();
   }
 
   @Test
   public void clearRemoveAndRecycle_withAlreadyRemovedRequest_doesNothingAndReturnsFalse() {
-    Request request = mock(Request.class);
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);
     assertThat(tracker.clearRemoveAndRecycle(request)).isFalse();
 
-    verify(request, times(1)).clear();
-    verify(request, times(1)).recycle();
+    assertThat(request.isCleared()).isTrue();
+    assertThat(request.isRecycled()).isTrue();
   }
 
   @Test
-  public void testCanAddAndRemoveRequest() {
-    Request request = mock(Request.class);
+  public void clearRequests_withPreviouslyClearedRequest_doesNotClearRequestAgain() {
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
     tracker.clearRemoveAndRecycle(request);
 
     tracker.clearRequests();
 
-    verify(request, times(1)).clear();
+    assertThat(request.isCleared()).isTrue();
   }
 
   @Test
-  public void testCanAddMultipleRequests() {
-    Request first = mock(Request.class);
-    Request second = mock(Request.class);
+  public void clearRequests_withMultipleRequests_clearsAllRequests() {
+    FakeRequest first = new FakeRequest();
+    FakeRequest second = new FakeRequest();
     tracker.addRequest(first);
     tracker.addRequest(second);
 
     tracker.clearRequests();
 
-    verify(first).clear();
-    verify(second).clear();
+    assertThat(first.isCleared()).isTrue();
+    assertThat(second.isCleared()).isTrue();
   }
 
   @Test
-  public void testPausesInProgressRequestsWhenPaused() {
-    Request request = mock(Request.class);
-    when(request.isRunning()).thenReturn(true);
+  public void pauseRequest_withRunningRequest_pausesRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsRunning();
     tracker.addRequest(request);
 
     tracker.pauseRequests();
 
-    verify(request).pause();
+    assertThat(request.isCleared()).isTrue();
   }
 
   @Test
-  public void testDoesNotClearCompleteRequestsWhenPaused() {
-    Request request = mock(Request.class);
+  public void pauseRequests_withCompletedRequest_doesNotClearRequest() {
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
 
-    when(request.isComplete()).thenReturn(true);
+    request.setIsComplete();
     tracker.pauseRequests();
 
-    verify(request, never()).clear();
+    assertThat(request.isCleared()).isFalse();
   }
 
   @Test
-  public void testStartsRequestOnRun() {
-    Request request = mock(Request.class);
+  public void runRequest_startsRequest() {
+    FakeRequest request = new FakeRequest();
     tracker.runRequest(request);
 
-    verify(request).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testDoesNotStartRequestOnRunIfPaused() {
-    Request request = mock(Request.class);
+  public void runRequest_whenPaused_doesNotStartRequest() {
+    FakeRequest request = new FakeRequest();
     tracker.pauseRequests();
     tracker.runRequest(request);
 
-    verify(request, never()).begin();
+    assertThat(request.isRunning()).isFalse();
+  }
+
+  @Test
+  public void runRequest_withAllRequestsPaused_doesNotStartRequest() {
+    FakeRequest request = new FakeRequest();
+    tracker.pauseAllRequests();
+    tracker.runRequest(request);
+
+    assertThat(request.isRunning()).isFalse();
   }
 
   @Test
-  public void testStartsRequestAddedWhenPausedWhenResumed() {
-    Request request = mock(Request.class);
+  public void runRequest_afterPausingAndResuming_startsRequest() {
+    FakeRequest request = new FakeRequest();
     tracker.pauseRequests();
     tracker.runRequest(request);
     tracker.resumeRequests();
 
-    verify(request).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testDoesNotClearFailedRequestsWhenPaused() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(true);
+  public void pauseRequests_withFailedRequest_doesNotClearRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsFailed();
     tracker.addRequest(request);
 
     tracker.pauseRequests();
 
-    verify(request, never()).clear();
+    assertThat(request.isCleared()).isFalse();
   }
 
   @Test
-  public void testRestartsStoppedRequestWhenResumed() {
-    Request request = mock(Request.class);
+  public void resumeRequests_withRequestAddedWhilePaused_startsRequest() {
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
 
     tracker.resumeRequests();
 
-    verify(request).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testDoesNotRestartCompletedRequestsWhenResumed() {
-    Request request = mock(Request.class);
-    when(request.isComplete()).thenReturn(true);
+  public void resumeRequests_withCompletedRequest_doesNotRestartCompletedRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsComplete();
     tracker.addRequest(request);
 
     tracker.resumeRequests();
 
-    verify(request, never()).begin();
+    assertThat(request.isRunning()).isFalse();
   }
 
   @Test
-  public void testDoesRestartFailedRequestsWhenResumed() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(true);
+  public void resumeRequests_withFailedRequest_restartsRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsFailed();
     tracker.addRequest(request);
 
     tracker.resumeRequests();
 
-    verify(request).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testDoesNotStartStartedRequestsWhenResumed() {
-    Request request = mock(Request.class);
-    when(request.isRunning()).thenReturn(true);
+  public void addRequest_withRunningRequest_doesNotRestartRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsRunning();
     tracker.addRequest(request);
 
     tracker.resumeRequests();
 
-    verify(request, never()).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testAvoidsConcurrentModificationWhenResuming() {
+  public void resumeRequests_withRequestThatClearsAnotherRequest_avoidsConcurrentModifications() {
     Request first = mock(Request.class);
     Request second = mock(Request.class);
 
@@ -232,12 +238,12 @@ public void testAvoidsConcurrentModificationWhenResuming() {
   }
 
   @Test
-  public void testAvoidsConcurrentModificationWhenPausing() {
+  public void pauseRequests_withRequestThatClearsAnother_avoidsConcurrentModifications() {
     Request first = mock(Request.class);
     Request second = mock(Request.class);
 
     when(first.isRunning()).thenReturn(true);
-    doAnswer(new ClearAndRemoveRequest(second)).when(first).pause();
+    doAnswer(new ClearAndRemoveRequest(second)).when(first).clear();
 
     tracker.addRequest(mock(Request.class));
     tracker.addRequest(first);
@@ -247,7 +253,7 @@ public void testAvoidsConcurrentModificationWhenPausing() {
   }
 
   @Test
-  public void testAvoidsConcurrentModificationWhenClearing() {
+  public void clearRequests_withRequestThatClearsAnother_avoidsConcurrentModifications() {
     Request first = mock(Request.class);
     Request second = mock(Request.class);
 
@@ -261,11 +267,11 @@ public void testAvoidsConcurrentModificationWhenClearing() {
   }
 
   @Test
-  public void testAvoidsConcurrentModificationWhenRestarting() {
+  public void restartRequests_withRequestThatClearsAnother_avoidsConcurrentModifications() {
     Request first = mock(Request.class);
     Request second = mock(Request.class);
 
-    doAnswer(new ClearAndRemoveRequest(second)).when(first).pause();
+    doAnswer(new ClearAndRemoveRequest(second)).when(first).clear();
 
     tracker.addRequest(mock(Request.class));
     tracker.addRequest(first);
@@ -275,73 +281,70 @@ public void testAvoidsConcurrentModificationWhenRestarting() {
   }
 
   @Test
-  public void testRestartsFailedRequestRestart() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(true);
+  public void restartRequests_withFailedRequest_restartsRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsFailed();
     tracker.addRequest(request);
 
     tracker.restartRequests();
 
-    verify(request).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testPausesAndRestartsNotYetFinishedRequestsOnRestart() {
-    Request request = mock(Request.class);
-    when(request.isComplete()).thenReturn(false);
+  public void restartRequests_withIncompleteRequest_restartsRequest() {
+    FakeRequest request = new FakeRequest();
     tracker.addRequest(request);
 
     tracker.restartRequests();
 
-    verify(request).pause();
-    verify(request).begin();
+    assertThat(request.isRunning()).isTrue();
   }
 
   @Test
-  public void testDoesNotBeginFailedRequestOnRestartIfPaused() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(true);
+  public void restartRequests_whenPaused_doesNotRestartRequests() {
+    FakeRequest request = new FakeRequest();
+    request.setIsFailed();
     tracker.pauseRequests();
     tracker.addRequest(request);
 
     tracker.restartRequests();
 
-    verify(request, never()).begin();
+    assertThat(request.isRunning()).isFalse();
   }
 
   @Test
-  public void testPausesFailedRequestOnRestartIfPaused() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(true);
+  public void restartRequests_withFailedRequestAddedWhilePaused_clearsFailedRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsFailed();
+
     tracker.pauseRequests();
     tracker.addRequest(request);
 
     tracker.restartRequests();
-    verify(request).pause();
+    assertThat(request.isCleared()).isTrue();
   }
 
   @Test
-  public void testDoesNotBeginIncompleteRequestsOnRestartIfPaused() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(false);
-    when(request.isComplete()).thenReturn(false);
+  public void restartRequests_withIncompleteRequestAddedWhilePaused_doesNotRestartRequest() {
+    FakeRequest request = new FakeRequest();
+
     tracker.pauseRequests();
     tracker.addRequest(request);
     tracker.restartRequests();
 
-    verify(request, never()).begin();
+    assertThat(request.isRunning()).isFalse();
   }
 
   @Test
-  public void testPausesIncompleteRequestsOnRestartIfPaused() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(false);
-    when(request.isComplete()).thenReturn(false);
+  public void restartRequests_withIncompleteRequestAddedWhilePaused_clearsRequestOnRestart() {
+    FakeRequest request = new FakeRequest();
+
     tracker.pauseRequests();
     tracker.addRequest(request);
     tracker.restartRequests();
 
-    verify(request).pause();
+    assertThat(request.isCleared()).isTrue();
   }
 
   @Test
@@ -363,35 +366,104 @@ public void testPauseAllRequests_returnsTrueFromIsPaused() {
   }
 
   @Test
-  public void testPauseAllRequests_whenRequestComplete_pausesRequest() {
-    Request request = mock(Request.class);
-    when(request.isFailed()).thenReturn(false);
-    when(request.isComplete()).thenReturn(true);
+  public void resumeRequests_afterRequestIsPausedViaPauseAllRequests_resumesRequest() {
+    FakeRequest request = new FakeRequest();
+    request.setIsComplete();
+
     tracker.addRequest(request);
     tracker.pauseAllRequests();
-    verify(request).pause();
 
-    when(request.isComplete()).thenReturn(false);
+    assertThat(request.isCleared()).isTrue();
+
+    // reset complete status.
+    request.setIsComplete(false);
     tracker.resumeRequests();
-    verify(request).begin();
+
+    assertThat(request.isRunning()).isTrue();
   }
 
-  @Test
-  public void runRequest_withAllRequestsPaused_pausesNewRequest() {
-    Request request = mock(Request.class);
-    tracker.pauseAllRequests();
-    tracker.runRequest(request);
+  private static final class FakeRequest implements Request {
+    private boolean isRunning;
+    private boolean isFailed;
+    private boolean isCleared;
+    private boolean isComplete;
+    private boolean isRecycled;
 
-    verify(request).pause();
-  }
+    void setIsComplete() {
+      setIsComplete(true);
+    }
 
-  @Test
-  public void runRequest_withRequestsPaused_pausesNewRequest() {
-    Request request = mock(Request.class);
-    tracker.pauseRequests();
-    tracker.runRequest(request);
+    void setIsComplete(boolean isComplete) {
+      this.isComplete = isComplete;
+    }
+
+    void setIsFailed() {
+      isFailed = true;
+    }
+
+    void setIsRunning() {
+      isRunning = true;
+    }
 
-    verify(request).pause();
+    boolean isRecycled() {
+      return isRecycled;
+    }
+
+    @Override
+    public void begin() {
+      if (isRunning) {
+        throw new IllegalStateException();
+      }
+      isRunning = true;
+    }
+
+    @Override
+    public void clear() {
+      if (isCleared) {
+        throw new IllegalStateException();
+      }
+      isRunning = false;
+      isFailed = false;
+      isCleared = true;
+    }
+
+    @Override
+    public boolean isRunning() {
+      return isRunning;
+    }
+
+    @Override
+    public boolean isComplete() {
+      return isComplete;
+    }
+
+    @Override
+    public boolean isResourceSet() {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean isCleared() {
+      return isCleared;
+    }
+
+    @Override
+    public boolean isFailed() {
+      return isFailed;
+    }
+
+    @Override
+    public void recycle() {
+      if (isRecycled) {
+        throw new IllegalStateException();
+      }
+      isRecycled = true;
+    }
+
+    @Override
+    public boolean isEquivalentTo(Request other) {
+      throw new UnsupportedOperationException();
+    }
   }
 
   private class ClearAndRemoveRequest implements Answer<Void> {
diff --git a/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java b/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
index 931579037..1c8602fad 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/ErrorRequestCoordinatorTest.java
@@ -41,32 +41,6 @@ public void begin_whenPrimaryIsAlreadyRunning_doesNotStartPrimaryAgain() {
     verify(primary, never()).begin();
   }
 
-  @Test
-  public void pause_whenPrimaryHasNotFailed_pausesPrimary() {
-    coordinator.pause();
-    verify(primary).pause();
-  }
-
-  @Test
-  public void pause_whenPrimaryHasFailed_doesNotPausePrimary() {
-    when(primary.isFailed()).thenReturn(true);
-    coordinator.pause();
-    verify(primary, never()).pause();
-  }
-
-  @Test
-  public void pause_whenErrorIsRunning_pausesError() {
-    when(error.isRunning()).thenReturn(true);
-    coordinator.pause();
-    verify(error).pause();
-  }
-
-  @Test
-  public void pause_whenErrorIsNotRunning_doesNotPauseError() {
-    coordinator.pause();
-    verify(error, never()).pause();
-  }
-
   @Test
   public void clear_whenPrimaryHasNotFailed_clearsPrimary() {
     coordinator.clear();
@@ -102,30 +76,6 @@ public void clear_whenErrorIsRunning_clearsError() {
     verify(error).clear();
   }
 
-  @Test
-  public void isPaused_primaryNotFailed_primaryNotPaused_returnsFalse() {
-    assertThat(coordinator.isPaused()).isFalse();
-  }
-
-  @Test
-  public void isPaused_primaryNotFailed_primaryPaused_returnsTrue() {
-    when(primary.isPaused()).thenReturn(true);
-    assertThat(coordinator.isPaused()).isTrue();
-  }
-
-  @Test
-  public void isPaused_primaryFailed_errorNotPaused_returnsFalse() {
-    when(primary.isFailed()).thenReturn(true);
-    assertThat(coordinator.isPaused()).isFalse();
-  }
-
-  @Test
-  public void isPaused_primaryFailed_errorPaused_returnsTrue() {
-    when(primary.isFailed()).thenReturn(true);
-    when(error.isPaused()).thenReturn(true);
-    assertThat(coordinator.isPaused()).isTrue();
-  }
-
   @Test
   public void isRunning_primaryNotFailed_primaryNotRunning_returnsFalse() {
     assertThat(coordinator.isRunning()).isFalse();
@@ -200,26 +150,26 @@ public void isResourceSet_primaryFailed_errorResourceSet_returnsTrue() {
 
   @Test
   public void isCancelled_primaryNotFailed_primaryNotCancelled_returnsFalse() {
-    assertThat(coordinator.isCancelled()).isFalse();
+    assertThat(coordinator.isCleared()).isFalse();
   }
 
   @Test
   public void isCancelled_primaryNotFailed_primaryCancelled_returnsTrue() {
-    when(primary.isCancelled()).thenReturn(true);
-    assertThat(coordinator.isCancelled()).isTrue();
+    when(primary.isCleared()).thenReturn(true);
+    assertThat(coordinator.isCleared()).isTrue();
   }
 
   @Test
   public void isCancelled_primaryFailed_errorNotCancelled_returnsFalse() {
     when(primary.isFailed()).thenReturn(true);
-    assertThat(coordinator.isCancelled()).isFalse();
+    assertThat(coordinator.isCleared()).isFalse();
   }
 
   @Test
   public void isCancelled_primaryFailed_errorCancelled_returnsTrue() {
     when(primary.isFailed()).thenReturn(true);
-    when(error.isCancelled()).thenReturn(true);
-    assertThat(coordinator.isCancelled()).isTrue();
+    when(error.isCleared()).thenReturn(true);
+    assertThat(coordinator.isCleared()).isTrue();
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index 9622bba65..1327af04d 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -123,32 +123,6 @@ public void testIsNotFailedAfterClear() {
     assertFalse(request.isFailed());
   }
 
-  @Test
-  public void testIsPausedAfterPause() {
-    SingleRequest<List> request = builder.build();
-    request.pause();
-
-    assertTrue(request.isPaused());
-  }
-
-  @Test
-  public void testIsNotCancelledAfterPause() {
-    SingleRequest<List> request = builder.build();
-    request.pause();
-
-    assertFalse(request.isCancelled());
-  }
-
-  @Test
-  public void testIsNotPausedAfterBeginningWhilePaused() {
-    SingleRequest<List> request = builder.build();
-    request.pause();
-    request.begin();
-
-    assertFalse(request.isPaused());
-    assertTrue(request.isRunning());
-  }
-
   @Test
   public void testIsNotFailedAfterBegin() {
     SingleRequest<List> request = builder.build();
@@ -182,7 +156,7 @@ public void testIsCancelledAfterClear() {
     SingleRequest<List> request = builder.build();
     request.clear();
 
-    assertTrue(request.isCancelled());
+    assertTrue(request.isCleared());
   }
 
   @Test
@@ -314,7 +288,7 @@ public void testEngineLoadCancelledOnCancel() {
     request.begin();
 
     request.onSizeReady(100, 100);
-    request.cancel();
+    request.clear();
 
     verify(loadStatus).cancel();
   }
@@ -740,7 +714,7 @@ public void testDoesNotSetErrorDrawableIfRequestCoordinatorDoesntAllowIt() {
   }
 
   @Test
-  public void testCanReRunCancelledRequests() {
+  public void testCanReRunClearedRequests() {
     doAnswer(new CallSizeReady(100, 100)).when(builder.target)
         .getSize(any(SizeReadyCallback.class));
 
@@ -768,7 +742,7 @@ public void testCanReRunCancelledRequests() {
     SingleRequest<List> request = builder.build();
 
     request.begin();
-    request.cancel();
+    request.clear();
     request.begin();
 
     verify(builder.target, times(2)).onResourceReady(eq(builder.result), anyTransition());
@@ -783,9 +757,9 @@ public void testResourceOnlyReceivesOneGetOnResourceReady() {
   }
 
   @Test
-  public void testDoesNotStartALoadIfOnSizeReadyIsCalledAfterCancel() {
+  public void testDoesNotStartALoadIfOnSizeReadyIsCalledAfterClear() {
     SingleRequest<List> request = builder.build();
-    request.cancel();
+    request.clear();
     request.onSizeReady(100, 100);
 
     verify(builder.engine, never())
diff --git a/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java b/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
index 4850a2d01..5bab9738a 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
@@ -143,19 +143,6 @@ public void testRecyclesRequestsWhenRecycled() {
     verify(full).recycle();
   }
 
-  @Test
-  public void testIsPausedWhenFullIsPaused() {
-    when(full.isPaused()).thenReturn(true);
-    assertTrue(coordinator.isPaused());
-  }
-
-  @Test
-  public void testPausesBothRequestsWhenPaused() {
-    coordinator.pause();
-    verify(full).pause();
-    verify(thumb).pause();
-  }
-
   @Test
   public void testCanSetImageReturnsTrueForFullRequestIfCoordinatorIsNull() {
     coordinator = new ThumbnailRequestCoordinator();
diff --git a/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
index 69b694138..0ea32764e 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
@@ -488,26 +488,16 @@ public void clearOnDetach_onDetach_withNullRequest_doesNothing() {
     shadowView.callOnAttachedToWindow();
   }
 
+  // This behavior isn't clearly correct, but it doesn't seem like there's any harm to clear an
+  // already cleared request, so we might as well avoid the extra check/complexity in the code.
   @Test
-  public void clearOnDetach_onDetach_withCancelledRequest_doesNotPauseRequest() {
+  public void clearOnDetach_onDetach_withClearedRequest_clearsRequest() {
     attachStateTarget.clearOnDetach();
     attachStateTarget.setRequest(request);
-    when(request.isCancelled()).thenReturn(true);
+    when(request.isCleared()).thenReturn(true);
     shadowView.callOnDetachedFromWindow();
 
-    verify(request, never()).pause();
-    verify(request, never()).clear();
-  }
-
-  @Test
-  public void clearOnDetach_onDetach_withPausedRequest_doesNotPauseRequest() {
-    attachStateTarget.clearOnDetach();
-    attachStateTarget.setRequest(request);
-    when(request.isPaused()).thenReturn(true);
-    shadowView.callOnDetachedFromWindow();
-
-    verify(request, never()).pause();
-    verify(request, never()).clear();
+    verify(request).clear();
   }
 
   @Test
@@ -516,7 +506,7 @@ public void clearOnDetach_onDetach_withRunningRequest_pausesRequestOnce() {
     attachStateTarget.setRequest(request);
     shadowView.callOnDetachedFromWindow();
 
-    verify(request).pause();
+    verify(request).clear();
   }
 
   @Test
@@ -526,7 +516,6 @@ public void clearOnDetach_onDetach_afterOnLoadCleared_removesListener() {
     attachStateTarget.setRequest(request);
     shadowView.callOnDetachedFromWindow();
 
-    verify(request, never()).pause();
     verify(request, never()).clear();
   }
 
@@ -549,18 +538,19 @@ public void clearOnDetach_onDetach_afterMultipleClearOnDetaches_removesListener(
     attachStateTarget.setRequest(request);
     shadowView.callOnDetachedFromWindow();
 
-    verify(request, never()).pause();
     verify(request, never()).clear();
   }
 
+  // This behavior isn't clearly correct, but it doesn't seem like there's any harm to clear an
+  // already cleared request, so we might as well avoid the extra check/complexity in the code.
   @Test
-  public void clearOnDetach_onDetach_afterLoadCleared_doesNotPauseRequest() {
+  public void clearOnDetach_onDetach_afterLoadCleared_clearsRequest() {
     attachStateTarget.clearOnDetach();
     attachStateTarget.setRequest(request);
-    attachStateTarget.onLoadCleared(/*placeholder=*/ null);
+    when(request.isCleared()).thenReturn(true);
     shadowView.callOnDetachedFromWindow();
 
-    verify(request, never()).pause();
+    verify(request).clear();
   }
 
   @Test
@@ -574,27 +564,27 @@ public void clearOnDetach_onAttach_withNullRequest_doesNothing() {
   public void clearOnDetach_onAttach_withRunningRequest_doesNotBeginRequest() {
     attachStateTarget.clearOnDetach();
     attachStateTarget.setRequest(request);
-    when(request.isPaused()).thenReturn(false);
+    when(request.isCleared()).thenReturn(false);
     shadowView.callOnAttachedToWindow();
 
     verify(request, never()).begin();
   }
 
   @Test
-  public void clearOnDetach_onAttach_withPausedRequest_beginsRequest() {
+  public void clearOnDetach_onAttach_withClearedRequest_beginsRequest() {
     attachStateTarget.clearOnDetach();
     attachStateTarget.setRequest(request);
-    when(request.isPaused()).thenReturn(true);
+    when(request.isCleared()).thenReturn(true);
     shadowView.callOnAttachedToWindow();
 
     verify(request).begin();
   }
 
   @Test
-  public void clearOnDetach_afterLoadClearedAndRestarted_onAttach_beingsREquest() {
+  public void clearOnDetach_afterLoadClearedAndRestarted_onAttach_beingsRequest() {
     attachStateTarget.clearOnDetach();
     attachStateTarget.setRequest(request);
-    when(request.isPaused()).thenReturn(true);
+    when(request.isCleared()).thenReturn(true);
     attachStateTarget.onLoadCleared(/*placeholder=*/ null);
     attachStateTarget.onLoadStarted(/*placeholder=*/ null);
     shadowView.callOnAttachedToWindow();
@@ -606,7 +596,7 @@ public void clearOnDetach_afterLoadClearedAndRestarted_onAttach_beingsREquest()
   public void clearOnDetach_onAttach_afterLoadCleared_doesNotBeingRequest() {
     attachStateTarget.clearOnDetach();
     attachStateTarget.setRequest(request);
-    when(request.isPaused()).thenReturn(true);
+    when(request.isCleared()).thenReturn(true);
     attachStateTarget.onLoadCleared(/*placeholder=*/ null);
     shadowView.callOnAttachedToWindow();
 
