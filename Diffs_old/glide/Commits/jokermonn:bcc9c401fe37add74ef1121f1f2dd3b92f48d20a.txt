diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 98338cfcd..f73e13034 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -32,6 +32,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ExecutorService;
 
 /**
  * A builder class for setting default structural classes for Glide to use.
@@ -42,8 +43,8 @@
   private BitmapPool bitmapPool;
   private ArrayPool arrayPool;
   private MemoryCache memoryCache;
-  private GlideExecutor sourceExecutor;
-  private GlideExecutor diskCacheExecutor;
+  private ExecutorService sourceExecutor;
+  private ExecutorService diskCacheExecutor;
   private DiskCache.Factory diskCacheFactory;
   private MemorySizeCalculator memorySizeCalculator;
   private ConnectivityMonitorFactory connectivityMonitorFactory;
@@ -51,7 +52,7 @@
   private RequestOptions defaultRequestOptions = new RequestOptions();
   @Nullable
   private RequestManagerFactory requestManagerFactory;
-  private GlideExecutor animationExecutor;
+  private ExecutorService animationExecutor;
   private boolean isActiveResourceRetentionAllowed;
   @Nullable
   private List<RequestListener<Object>> defaultRequestListeners;
@@ -115,7 +116,7 @@ public GlideBuilder setDiskCache(@Nullable DiskCache.Factory diskCacheFactory) {
   }
 
   /**
-   * Sets the {@link GlideExecutor} to use when retrieving
+   * Sets the {@link ExecutorService} to use when retrieving
    * {@link com.bumptech.glide.load.engine.Resource}s that are not already in the cache.
    *
    * <p>The thread count defaults to the number of cores available on the device, with a maximum of
@@ -126,18 +127,16 @@ public GlideBuilder setDiskCache(@Nullable DiskCache.Factory diskCacheFactory) {
    *
    * @param service The ExecutorService to use.
    * @return This builder.
-   * @see #setDiskCacheExecutor(GlideExecutor)
-   * @see GlideExecutor
-   *
-   * @deprecated Use {@link #setSourceExecutor(GlideExecutor)}
+   * @see #setDiskCacheExecutor(ExecutorService)
+   * @deprecated Use {@link #setSourceExecutor(ExecutorService)}
    */
   @Deprecated
-  public GlideBuilder setResizeExecutor(@Nullable GlideExecutor service) {
+  public GlideBuilder setResizeExecutor(@Nullable ExecutorService service) {
     return setSourceExecutor(service);
   }
 
   /**
-   * Sets the {@link GlideExecutor} to use when retrieving
+   * Sets the {@link ExecutorService} to use when retrieving
    * {@link com.bumptech.glide.load.engine.Resource}s that are not already in the cache.
    *
    * <p>The thread count defaults to the number of cores available on the device, with a maximum of
@@ -148,19 +147,18 @@ public GlideBuilder setResizeExecutor(@Nullable GlideExecutor service) {
    *
    * @param service The ExecutorService to use.
    * @return This builder.
-   * @see #setDiskCacheExecutor(GlideExecutor)
-   * @see GlideExecutor
+   * @see #setDiskCacheExecutor(ExecutorService)
    */
   // Public API.
   @SuppressWarnings("WeakerAccess")
   @NonNull
-  public GlideBuilder setSourceExecutor(@Nullable GlideExecutor service) {
+  public GlideBuilder setSourceExecutor(@Nullable ExecutorService service) {
     this.sourceExecutor = service;
     return this;
   }
 
   /**
-   * Sets the {@link GlideExecutor} to use when retrieving
+   * Sets the {@link ExecutorService} to use when retrieving
    * {@link com.bumptech.glide.load.engine.Resource}s that are currently in Glide's disk caches.
    *
    * <p>Defaults to a single thread which is usually the best combination of memory usage,
@@ -169,15 +167,14 @@ public GlideBuilder setSourceExecutor(@Nullable GlideExecutor service) {
    * <p>Use the {@link GlideExecutor#newDiskCacheExecutor()} if you'd like to specify options
    * for the disk cache executor.
    *
-   * @param service The {@link GlideExecutor} to use.
+   * @param service The ExecutorService to use.
    * @return This builder.
-   * @see #setSourceExecutor(GlideExecutor)
-   * @see GlideExecutor
+   * @see #setSourceExecutor(ExecutorService)
    */
   // Public API.
   @SuppressWarnings("WeakerAccess")
   @NonNull
-  public GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service) {
+  public GlideBuilder setDiskCacheExecutor(@Nullable ExecutorService service) {
     this.diskCacheExecutor = service;
     return this;
   }
@@ -191,13 +188,13 @@ public GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service) {
    * <p>Use the {@link GlideExecutor#newAnimationExecutor()} methods  if you'd like to specify
    * options for the animation executor.
    *
-   * @param service The {@link GlideExecutor} to use.
+   * @param service The ExecutorService to use.
    * @return This builder.
    */
   // Public API.
   @SuppressWarnings("WeakerAccess")
   @NonNull
-  public GlideBuilder setAnimationExecutor(@Nullable GlideExecutor service) {
+  public GlideBuilder setAnimationExecutor(@Nullable ExecutorService service) {
     this.animationExecutor = service;
     return this;
   }
@@ -247,10 +244,9 @@ public GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOpt
    * Sets the {@link MemorySizeCalculator} to use to calculate maximum sizes for default
    * {@link MemoryCache MemoryCaches} and/or default {@link BitmapPool BitmapPools}.
    *
-   * @see #setMemorySizeCalculator(MemorySizeCalculator)
-   *
    * @param builder The builder to use (will not be modified).
    * @return This builder.
+   * @see #setMemorySizeCalculator(MemorySizeCalculator)
    */
   // Public API.
   @SuppressWarnings("unused")
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index f3050c8b7..0ca09615a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -14,7 +14,6 @@
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.DiskCacheAdapter;
 import com.bumptech.glide.load.engine.cache.MemoryCache;
-import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.util.Executors;
 import com.bumptech.glide.util.LogTime;
@@ -23,6 +22,7 @@
 import com.bumptech.glide.util.pool.FactoryPools;
 import java.util.Map;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
 
 /**
  * Responsible for starting loads and managing active and cached resources.
@@ -45,10 +45,10 @@
   public Engine(
       MemoryCache memoryCache,
       DiskCache.Factory diskCacheFactory,
-      GlideExecutor diskCacheExecutor,
-      GlideExecutor sourceExecutor,
-      GlideExecutor sourceUnlimitedExecutor,
-      GlideExecutor animationExecutor,
+      ExecutorService diskCacheExecutor,
+      ExecutorService sourceExecutor,
+      ExecutorService sourceUnlimitedExecutor,
+      ExecutorService animationExecutor,
       boolean isActiveResourceRetentionAllowed) {
     this(
         memoryCache,
@@ -69,10 +69,10 @@ public Engine(
   @VisibleForTesting
   Engine(MemoryCache cache,
       DiskCache.Factory diskCacheFactory,
-      GlideExecutor diskCacheExecutor,
-      GlideExecutor sourceExecutor,
-      GlideExecutor sourceUnlimitedExecutor,
-      GlideExecutor animationExecutor,
+      ExecutorService diskCacheExecutor,
+      ExecutorService sourceExecutor,
+      ExecutorService sourceUnlimitedExecutor,
+      ExecutorService animationExecutor,
       Jobs jobs,
       EngineKeyFactory keyFactory,
       ActiveResources activeResources,
@@ -452,10 +452,10 @@ public DiskCache getDiskCache() {
 
   @VisibleForTesting
   static class EngineJobFactory {
-    @Synthetic final GlideExecutor diskCacheExecutor;
-    @Synthetic final GlideExecutor sourceExecutor;
-    @Synthetic final GlideExecutor sourceUnlimitedExecutor;
-    @Synthetic final GlideExecutor animationExecutor;
+    @Synthetic final ExecutorService diskCacheExecutor;
+    @Synthetic final ExecutorService sourceExecutor;
+    @Synthetic final ExecutorService sourceUnlimitedExecutor;
+    @Synthetic final ExecutorService animationExecutor;
     @Synthetic final EngineJobListener listener;
     @Synthetic final Pools.Pool<EngineJob<?>> pool =
         FactoryPools.threadSafe(
@@ -474,10 +474,10 @@ public DiskCache getDiskCache() {
             });
 
     EngineJobFactory(
-        GlideExecutor diskCacheExecutor,
-        GlideExecutor sourceExecutor,
-        GlideExecutor sourceUnlimitedExecutor,
-        GlideExecutor animationExecutor,
+        ExecutorService diskCacheExecutor,
+        ExecutorService sourceExecutor,
+        ExecutorService sourceUnlimitedExecutor,
+        ExecutorService animationExecutor,
         EngineJobListener listener) {
       this.diskCacheExecutor = diskCacheExecutor;
       this.sourceExecutor = sourceExecutor;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index c3bd7358e..4f56b5e10 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -5,7 +5,6 @@
 import android.support.v4.util.Pools;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.request.ResourceCallback;
 import com.bumptech.glide.util.Executors;
 import com.bumptech.glide.util.Preconditions;
@@ -16,6 +15,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -34,10 +34,10 @@
   private final Pools.Pool<EngineJob<?>> pool;
   private final EngineResourceFactory engineResourceFactory;
   private final EngineJobListener listener;
-  private final GlideExecutor diskCacheExecutor;
-  private final GlideExecutor sourceExecutor;
-  private final GlideExecutor sourceUnlimitedExecutor;
-  private final GlideExecutor animationExecutor;
+  private final ExecutorService diskCacheExecutor;
+  private final ExecutorService sourceExecutor;
+  private final ExecutorService sourceUnlimitedExecutor;
+  private final ExecutorService animationExecutor;
   private final AtomicInteger pendingCallbacks = new AtomicInteger();
 
   private Key key;
@@ -69,10 +69,10 @@
   private volatile boolean isCancelled;
 
   EngineJob(
-      GlideExecutor diskCacheExecutor,
-      GlideExecutor sourceExecutor,
-      GlideExecutor sourceUnlimitedExecutor,
-      GlideExecutor animationExecutor,
+      ExecutorService diskCacheExecutor,
+      ExecutorService sourceExecutor,
+      ExecutorService sourceUnlimitedExecutor,
+      ExecutorService animationExecutor,
       EngineJobListener listener,
       Pools.Pool<EngineJob<?>> pool) {
     this(
@@ -87,10 +87,10 @@
 
   @VisibleForTesting
   EngineJob(
-      GlideExecutor diskCacheExecutor,
-      GlideExecutor sourceExecutor,
-      GlideExecutor sourceUnlimitedExecutor,
-      GlideExecutor animationExecutor,
+      ExecutorService diskCacheExecutor,
+      ExecutorService sourceExecutor,
+      ExecutorService sourceUnlimitedExecutor,
+      ExecutorService animationExecutor,
       EngineJobListener listener,
       Pools.Pool<EngineJob<?>> pool,
       EngineResourceFactory engineResourceFactory) {
@@ -120,7 +120,7 @@
 
   public synchronized void start(DecodeJob<R> decodeJob) {
     this.decodeJob = decodeJob;
-    GlideExecutor executor = decodeJob.willDecodeFromCache()
+    ExecutorService executor = decodeJob.willDecodeFromCache()
         ? diskCacheExecutor
         : getActiveSourceExecutor();
     executor.execute(decodeJob);
@@ -184,7 +184,7 @@ boolean onlyRetrieveFromCache() {
     return onlyRetrieveFromCache;
   }
 
-  private GlideExecutor getActiveSourceExecutor() {
+  private ExecutorService getActiveSourceExecutor() {
     return useUnlimitedSourceGeneratorPool
         ? sourceUnlimitedExecutor : (useAnimationPool ? animationExecutor : sourceExecutor);
   }
