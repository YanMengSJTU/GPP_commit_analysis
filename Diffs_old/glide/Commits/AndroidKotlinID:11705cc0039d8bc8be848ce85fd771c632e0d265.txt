diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index 32352561b..1bfebbe01 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -5,6 +5,7 @@
     "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
 
 <suppressions>
+    <suppress files=".*[/\\]library[/\\]src[/\\]main[/\\]java[/\\]com[/\\]bumptech[/\\]glide[/\\]util[/\\]CachedHashCodeArrayMap.java" checks="EqualsHashCodeCheck"/>
     <suppress files=".*[/\\]library[/\\]test[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]annotation[/\\]compiler[/\\]test[/\\]src[/\\]test[/\\]resources[/\\].*" checks=".*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>
diff --git a/library/findbugs-exclude.xml b/library/findbugs-exclude.xml
index bd1e9afd3..f27b2c382 100644
--- a/library/findbugs-exclude.xml
+++ b/library/findbugs-exclude.xml
@@ -48,4 +48,10 @@
       <Bug pattern="EI_EXPOSE_REP" />
     </Match>
 
+    <!-- We just cache the value of hashcode, no need to also override equals. -->
+    <Match>
+      <Class name="com.bumptech.glide.util.CachedHashCodeArrayMap" />
+      <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS" />
+    </Match>
+
 </FindBugsFilter>
diff --git a/library/src/main/java/com/bumptech/glide/load/Options.java b/library/src/main/java/com/bumptech/glide/load/Options.java
index bf2685323..6609a080f 100644
--- a/library/src/main/java/com/bumptech/glide/load/Options.java
+++ b/library/src/main/java/com/bumptech/glide/load/Options.java
@@ -4,13 +4,14 @@
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 import android.support.v4.util.SimpleArrayMap;
+import com.bumptech.glide.util.CachedHashCodeArrayMap;
 import java.security.MessageDigest;
 
 /**
  * A set of {@link Option Options} to apply to in memory and disk cache keys.
  */
 public final class Options implements Key {
-  private final ArrayMap<Option<?>, Object> values = new ArrayMap<>();
+  private final ArrayMap<Option<?>, Object> values = new CachedHashCodeArrayMap<>();
 
   public void putAll(@NonNull Options other) {
     values.putAll((SimpleArrayMap<Option<?>, Object>) other.values);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
index f6838dd26..596e15574 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
@@ -140,7 +140,8 @@ public synchronized void clearMemory() {
   public synchronized void trimMemory(int level) {
     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN
+        || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {
       evictToSize(maxSize / 2);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index 0540e469e..d233c9130 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -219,8 +219,9 @@ public void trimMemory(int level) {
     }
     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
-      trimToSize(maxSize / 2);
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN
+        || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {
+      trimToSize(getMaxSize() / 2);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
index 9c26b83df..75c5329e1 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
@@ -47,11 +47,13 @@ protected int getSize(@Nullable Resource<?> item) {
   @Override
   public void trimMemory(int level) {
     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
-      // Nearing middle of list of cached background apps
+      // Entering list of cached background apps
       // Evict our entire bitmap cache
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
-      // Entering list of cached background apps
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN
+        || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {
+      // The app's UI is no longer visible, or app is in the foreground but system is running
+      // critically low on memory
       // Evict oldest half of our bitmap cache
       trimToSize(getMaxSize() / 2);
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
index a783e616c..2b3bdc574 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
@@ -7,7 +7,6 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.util.Preconditions;
 import java.security.MessageDigest;
 
@@ -28,26 +27,6 @@ public BitmapDrawableTransformation(Transformation<Bitmap> wrapped) {
         Preconditions.checkNotNull(new DrawableTransformation(wrapped, /*isRequired=*/ false));
   }
 
-  /**
-   * @deprecated use {@link #BitmapDrawableTransformation(Transformation)}}
-   */
-  @Deprecated
-  public BitmapDrawableTransformation(
-      @SuppressWarnings("unused") Context context, Transformation<Bitmap> wrapped) {
-    this(wrapped);
-  }
-
-  /**
-   * @deprecated use {@link #BitmapDrawableTransformation(Transformation)}}
-   */
-  @Deprecated
-  public BitmapDrawableTransformation(
-      @SuppressWarnings("unused") Context context,
-      @SuppressWarnings("unused") BitmapPool bitmapPool,
-      Transformation<Bitmap> wrapped) {
-    this(wrapped);
-  }
-
   @NonNull
   @Override
   public Resource<BitmapDrawable> transform(
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
index 8dd0827ba..a76b0e983 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
@@ -66,21 +66,6 @@
  */
 public abstract class BitmapTransformation implements Transformation<Bitmap> {
 
-  // Public API.
-  @SuppressWarnings("WeakerAccess")
-  public BitmapTransformation() {
-    // Intentionally empty.
-  }
-
-  /**
-   * @deprecated Use {@link #BitmapTransformation()}.
-   * @param context Ignored.
-   */
-  @Deprecated
-  public BitmapTransformation(@SuppressWarnings("unused") Context context) {
-    this();
-  }
-
   @NonNull
   @Override
   public final Resource<Bitmap> transform(
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
index 8c39e60cb..392661b1b 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
@@ -23,24 +23,6 @@ public GifDrawableTransformation(Transformation<Bitmap> wrapped) {
     this.wrapped = Preconditions.checkNotNull(wrapped);
   }
 
-  /**
-   * @deprecated Use {@link #GifDrawableTransformation(Transformation)}.
-   */
-  @Deprecated
-  public GifDrawableTransformation(
-      @SuppressWarnings("unused") Context context, Transformation<Bitmap> wrapped) {
-    this(wrapped);
-  }
-
-  /**
-   * @deprecated Use {@link #GifDrawableTransformation(Transformation)}
-   */
-  @Deprecated
-  public GifDrawableTransformation(
-      Transformation<Bitmap> wrapped, @SuppressWarnings("unused") BitmapPool bitmapPool) {
-    this(wrapped);
-  }
-
   @NonNull
   @Override
   public Resource<GifDrawable> transform(
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index 4e416b649..81da8c75c 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -32,9 +32,9 @@
 import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;
 import com.bumptech.glide.load.resource.gif.GifOptions;
 import com.bumptech.glide.signature.EmptySignature;
+import com.bumptech.glide.util.CachedHashCodeArrayMap;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
-import java.util.HashMap;
 import java.util.Map;
 
 /**
@@ -106,7 +106,7 @@
   @NonNull
   private Options options = new Options();
   @NonNull
-  private Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
+  private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();
   @NonNull
   private Class<?> resourceClass = Object.class;
   private boolean isLocked;
@@ -822,7 +822,7 @@ public RequestOptions clone() {
       RequestOptions result = (RequestOptions) super.clone();
       result.options = new Options();
       result.options.putAll(options);
-      result.transformations = new HashMap<>();
+      result.transformations = new CachedHashCodeArrayMap<>();
       result.transformations.putAll(transformations);
       result.isLocked = false;
       result.isAutoCloneEnabled = false;
diff --git a/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java b/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java
new file mode 100644
index 000000000..ff9573a84
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java
@@ -0,0 +1,56 @@
+package com.bumptech.glide.util;
+
+import android.support.v4.util.ArrayMap;
+import android.support.v4.util.SimpleArrayMap;
+
+/**
+ * An {@link ArrayMap} that caches its hashCode to support efficient lookup.
+ *
+ * @param <K> the key type.
+ * @param <V> the value type.
+ */
+// We're overriding hashcode, but not in a way that changes the output, so we don't need to
+// override equals.
+@SuppressWarnings("PMD.OverrideBothEqualsAndHashcode")
+public final class CachedHashCodeArrayMap<K, V> extends ArrayMap<K, V> {
+
+  private int hashCode;
+
+  @Override
+  public void clear() {
+    hashCode = 0;
+    super.clear();
+  }
+
+  @Override
+  public V setValueAt(int index, V value) {
+    hashCode = 0;
+    return super.setValueAt(index, value);
+  }
+
+  @Override
+  public V put(K key, V value) {
+    hashCode = 0;
+    return super.put(key, value);
+  }
+
+  @Override
+  public void putAll(SimpleArrayMap<? extends K, ? extends V> simpleArrayMap) {
+    hashCode = 0;
+    super.putAll(simpleArrayMap);
+  }
+
+  @Override
+  public V removeAt(int index) {
+    hashCode = 0;
+    return super.removeAt(index);
+  }
+
+  @Override
+  public int hashCode() {
+    if (hashCode == 0) {
+      hashCode = super.hashCode();
+    }
+    return hashCode;
+  }
+}
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
index 1c037b2f5..6b7be90f6 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
@@ -2,6 +2,7 @@
 
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -74,6 +75,11 @@ public void testTrimMemoryUiHiddenOrLessRemovesHalfOfArrays() {
     testTrimMemory(MAX_SIZE, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
   }
 
+  @Test
+  public void testTrimMemoryRunningCriticalRemovesHalfOfBitmaps() {
+    testTrimMemory(MAX_SIZE, TRIM_MEMORY_RUNNING_CRITICAL, MAX_SIZE / 2);
+  }
+
   @Test
   public void testTrimMemoryUiHiddenOrLessRemovesNoArraysIfPoolLessThanHalfFull() {
     testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
index 0b452c214..e199738c9 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
@@ -2,6 +2,7 @@
 
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -102,6 +103,11 @@ public void testTrimMemoryUiHiddenOrLessRemovesHalfOfBitmaps() {
     testTrimMemory(MAX_SIZE, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
   }
 
+  @Test
+  public void testTrimMemoryRunningCriticalRemovesHalfOfBitmaps() {
+    testTrimMemory(MAX_SIZE, TRIM_MEMORY_RUNNING_CRITICAL, MAX_SIZE / 2);
+  }
+
   @Test
   public void testTrimMemoryUiHiddenOrLessRemovesNoBitmapsIfPoolLessThanHalfFull() {
     testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_UI_HIDDEN, 0);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
index 8d8e43b1f..22b76cfc1 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
@@ -105,6 +105,16 @@ public void testTrimMemoryUiHidden() {
     verify(harness.listener, never()).onResourceRemoved(harness.second);
   }
 
+  @Test
+  public void testTrimMemoryRunningCritical() {
+    TrimClearMemoryCacheHarness harness = new TrimClearMemoryCacheHarness();
+
+    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL);
+
+    verify(harness.listener).onResourceRemoved(harness.first);
+    verify(harness.listener, never()).onResourceRemoved(harness.second);
+  }
+
   @Test
   public void testResourceRemovedListenerIsNotifiedWhenResourceIsRemoved() {
     LruResourceCache resourceCache = new LruResourceCache(100);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 1a2187ed6..1fae53bbc 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -42,6 +42,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
@@ -563,7 +564,12 @@ public void testSetAlphaSetsAlphaOnPaint() {
   public void testSetColorFilterSetsColorFilterOnPaint() {
     ColorFilter colorFilter = new PorterDuffColorFilter(Color.RED, Mode.ADD);
     drawable.setColorFilter(colorFilter);
-    verify(paint).setColorFilter(eq(colorFilter));
+
+    // Use ArgumentCaptor instead of eq() due to b/73121412 where ShadowPorterDuffColorFilter.equals
+    // uses a method that can't be found (PorterDuffColorFilter.getColor).
+    ArgumentCaptor<ColorFilter> captor = ArgumentCaptor.forClass(ColorFilter.class);
+    verify(paint).setColorFilter(captor.capture());
+    assertThat(captor.getValue()).isSameAs(colorFilter);
   }
 
   @Test
