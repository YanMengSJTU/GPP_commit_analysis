diff --git a/.travis.yml b/.travis.yml
index a980a467d..1f9859851 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,12 +21,14 @@ env:
     - COMPONENT=unit
     - COMPONENT=firebase
     - COMPONENT=instrumentation ANDROID_TARGET=16
+    - COMPONENT=instrumentation ANDROID_TARGET=17
+    - COMPONENT=instrumentation ANDROID_TARGET=18
+    - COMPONENT=instrumentation ANDROID_TARGET=19
+    - COMPONENT=instrumentation ANDROID_TARGET=20
+    - COMPONENT=instrumentation ANDROID_TARGET=21
     - COMPONENT=instrumentation ANDROID_TARGET=22
     - COMPONENT=samples
 
-before_script:
-  - ./scripts/travis_before_script.sh
-
 script:
   - ./scripts/travis_script.sh
 
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
new file mode 100644
index 000000000..b84fa37a4
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
@@ -0,0 +1,128 @@
+package com.bumptech.glide;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.resource.bitmap.TransformationUtils;
+import com.bumptech.glide.request.RequestOptions;
+import java.util.concurrent.ExecutionException;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public class DrawableTransformationTest {
+  @Rule public ExpectedException expectedException = ExpectedException.none();
+
+  private Context context;
+
+  @Before
+  public void setUp() {
+    context = InstrumentationRegistry.getTargetContext();
+  }
+
+  @After
+  public void tearDown() {
+    Glide.get(context).clearDiskCache();
+    Glide.tearDown();
+  }
+
+  @Test
+  public void load_withColorDrawable_sizeOriginal_optionalTransform_returnsColorDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable colorDrawable = new ColorDrawable(Color.RED);
+    Drawable result = Glide.with(context)
+        .load(colorDrawable)
+        .apply(new RequestOptions()
+            .optionalCenterCrop())
+        .submit()
+        .get();
+
+    assertThat(result).isInstanceOf(ColorDrawable.class);
+    assertThat(((ColorDrawable) result).getColor()).isEqualTo(Color.RED);
+  }
+
+  /**
+   * Transformations that do nothing can simply return the original Bitmap.
+   */
+  @Test
+  public void load_withColorDrawable_fixedSize_requiredUnitTransform_returnsOriginalDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable colorDrawable = new ColorDrawable(Color.RED);
+
+    Drawable result = Glide.with(context)
+        .load(colorDrawable)
+        .apply(new RequestOptions()
+            .centerCrop())
+        .submit(100, 100)
+        .get();
+
+    assertThat(result).isInstanceOf(ColorDrawable.class);
+    assertThat(((ColorDrawable) result).getColor()).isEqualTo(Color.RED);
+  }
+
+  /**
+   * Transformations that produce a different output color/shape/image etc will end up returning
+   * a {@link Bitmap} based on the original {@link Drawable} but with the transformation applied.
+   */
+  @Test
+  public void load_withColorDrawable_fixedSize_nonUnitRequiredTransform_returnsBitmapDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable colorDrawable = new ColorDrawable(Color.RED);
+
+    Drawable result = Glide.with(context)
+        .load(colorDrawable)
+        .apply(new RequestOptions()
+            .circleCrop())
+        .submit(100, 100)
+        .get();
+
+    Bitmap redSquare = Bitmap.createBitmap(100, 100, Config.ARGB_8888);
+    Canvas canvas = new Canvas(redSquare);
+    canvas.drawColor(Color.RED);
+
+    BitmapPool bitmapPool = mock(BitmapPool.class);
+    when(bitmapPool.get(100, 100, Bitmap.Config.ARGB_8888))
+        .thenReturn(Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888));
+    Bitmap expected = TransformationUtils.circleCrop(bitmapPool, redSquare, 100, 100);
+
+    assertThat(result).isInstanceOf(BitmapDrawable.class);
+    Bitmap bitmap = ((BitmapDrawable) result).getBitmap();
+    assertThat(bitmap.getWidth()).isEqualTo(100);
+    assertThat(bitmap.getHeight()).isEqualTo(100);
+    for (int x = 0; x < bitmap.getWidth(); x++) {
+      for (int y = 0; y < bitmap.getHeight(); y++) {
+        assertThat(bitmap.getPixel(x, y)).isEqualTo(expected.getPixel(x, y));
+      }
+    }
+  }
+
+  @Test
+  public void load_withColorDrawable_sizeOriginal_requiredTransform_fails()
+      throws ExecutionException, InterruptedException {
+    Drawable colorDrawable = new ColorDrawable(Color.RED);
+
+    expectedException.expect(ExecutionException.class);
+    Glide.with(context)
+        .load(colorDrawable)
+        .apply(new RequestOptions()
+            .centerCrop())
+        .submit()
+        .get();
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
index 41ea33a35..959b69766 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
@@ -21,7 +21,8 @@
   private final Transformation<Drawable> wrapped;
 
   public BitmapDrawableTransformation(Transformation<Bitmap> wrapped) {
-    this.wrapped = Preconditions.checkNotNull(new DrawableTransformation(wrapped));
+    this.wrapped =
+        Preconditions.checkNotNull(new DrawableTransformation(wrapped, /*isRequired=*/ false));
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableToBitmapConverter.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableToBitmapConverter.java
index a8027610e..9f6257193 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableToBitmapConverter.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableToBitmapConverter.java
@@ -6,6 +6,7 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.Nullable;
+import android.util.Log;
 import com.bumptech.glide.load.engine.Resource;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
@@ -13,6 +14,7 @@
 import java.util.concurrent.locks.Lock;
 
 final class DrawableToBitmapConverter {
+  private static final String TAG = "DrawableToBitmap";
   private static final BitmapPool NO_BITMAP_POOL = new BitmapPoolAdapter();
   private DrawableToBitmapConverter() {
     // Utility class.
@@ -36,15 +38,22 @@ private DrawableToBitmapConverter() {
     return BitmapResource.obtain(result, toUse);
   }
 
+  @Nullable
   private static Bitmap drawToBitmap(
       BitmapPool bitmapPool, Drawable drawable, int width, int height) {
     if (width == Target.SIZE_ORIGINAL && drawable.getIntrinsicWidth() <= 0) {
-      throw new IllegalArgumentException("Unable to draw " + drawable + " to Bitmap with "
-          + "Target.SIZE_ORIGINAL because the Drawable has no intrinsic width");
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Unable to draw " + drawable + " to Bitmap with Target.SIZE_ORIGINAL because the"
+            + " Drawable has no intrinsic width");
+      }
+      return null;
     }
     if (height == Target.SIZE_ORIGINAL && drawable.getIntrinsicHeight() <= 0) {
-      throw new IllegalArgumentException("Unable to draw " + drawable + " to Bitmap with "
-          + "Target.SIZE_ORIGINAL because the Drawable has no intrinsic height");
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Unable to draw " + drawable + " to Bitmap with Target.SIZE_ORIGINAL because the"
+            + " Drawable has no intrinsic height");
+      }
+      return null;
     }
     int targetWidth = drawable.getIntrinsicWidth() > 0 ? drawable.getIntrinsicWidth() : width;
     int targetHeight = drawable.getIntrinsicHeight() > 0 ? drawable.getIntrinsicHeight() : height;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
index c06b78d01..2038ac3c0 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformation.java
@@ -30,9 +30,11 @@
 public class DrawableTransformation implements Transformation<Drawable> {
 
   private final Transformation<Bitmap> wrapped;
+  private final boolean isRequired;
 
-  public DrawableTransformation(Transformation<Bitmap> wrapped) {
+  public DrawableTransformation(Transformation<Bitmap> wrapped, boolean isRequired) {
     this.wrapped = wrapped;
+    this.isRequired = isRequired;
   }
 
   @SuppressWarnings("unchecked")
@@ -48,7 +50,11 @@ public DrawableTransformation(Transformation<Bitmap> wrapped) {
     Resource<Bitmap> bitmapResourceToTransform =
         DrawableToBitmapConverter.convert(bitmapPool, drawable, outWidth, outHeight);
     if (bitmapResourceToTransform == null) {
-      throw new IllegalArgumentException("Unable to convert " + drawable + " to a Bitmap");
+      if (isRequired) {
+        throw new IllegalArgumentException("Unable to convert " + drawable + " to a Bitmap");
+      } else {
+        return resource;
+      }
     }
     Resource<Bitmap> transformedBitmapResource =
         wrapped.transform(context, bitmapResourceToTransform, outWidth, outHeight);
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
index 0c85fbd1c..20af5e2e1 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/ByteBufferGifDecoder.java
@@ -8,6 +8,7 @@
 import com.bumptech.glide.gifdecoder.GifHeader;
 import com.bumptech.glide.gifdecoder.GifHeaderParser;
 import com.bumptech.glide.gifdecoder.StandardGifDecoder;
+import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.ImageHeaderParser;
 import com.bumptech.glide.load.ImageHeaderParser.ImageType;
 import com.bumptech.glide.load.ImageHeaderParserUtils;
@@ -77,14 +78,14 @@ public boolean handles(ByteBuffer source, Options options) throws IOException {
   public GifDrawableResource decode(ByteBuffer source, int width, int height, Options options) {
     final GifHeaderParser parser = parserPool.obtain(source);
     try {
-      return decode(source, width, height, parser);
+      return decode(source, width, height, parser, options);
     } finally {
       parserPool.release(parser);
     }
   }
 
-  private GifDrawableResource decode(ByteBuffer byteBuffer, int width, int height,
-      GifHeaderParser parser) {
+  private GifDrawableResource decode(
+      ByteBuffer byteBuffer, int width, int height, GifHeaderParser parser, Options options) {
     long startTime = LogTime.getLogTime();
     final GifHeader header = parser.parseHeader();
     if (header.getNumFrames() <= 0 || header.getStatus() != GifDecoder.STATUS_OK) {
@@ -92,8 +93,12 @@ private GifDrawableResource decode(ByteBuffer byteBuffer, int width, int height,
       return null;
     }
 
+    Bitmap.Config config = options.get(GifOptions.DECODE_FORMAT) == DecodeFormat.PREFER_RGB_565
+        ? Bitmap.Config.RGB_565 : Bitmap.Config.ARGB_8888;
+
     int sampleSize = getSampleSize(header, width, height);
     GifDecoder gifDecoder = gifDecoderFactory.build(provider, header, byteBuffer, sampleSize);
+    gifDecoder.setDefaultBitmapConfig(config);
     gifDecoder.advance();
     Bitmap firstFrame = gifDecoder.getNextFrame();
     if (firstFrame == null) {
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index cf322bcdb..9c63cb022 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -1059,7 +1059,7 @@ final RequestOptions optionalTransform(DownsampleStrategy downsampleStrategy,
     }
 
     downsample(downsampleStrategy);
-    return optionalTransform(transformation);
+    return transform(transformation, /*isRequired=*/ false);
   }
 
   // calling transform() on the result of clone() requires greater access.
@@ -1113,14 +1113,7 @@ private RequestOptions scaleOnlyTransform(
   @SuppressWarnings("CheckResult")
   @CheckResult
   public RequestOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    if (isAutoCloneEnabled) {
-      return clone().transform(transformation);
-    }
-
-    optionalTransform(transformation);
-    isTransformationRequired = true;
-    fields |= TRANSFORMATION_REQUIRED;
-    return selfOrThrowIfLocked();
+    return transform(transformation, /*isRequired=*/ true);
   }
 
   /**
@@ -1140,14 +1133,7 @@ public RequestOptions transform(@NonNull Transformation<Bitmap> transformation)
   @SuppressWarnings({"unchecked", "varargs", "CheckResult"})
   @CheckResult
   public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (isAutoCloneEnabled) {
-      return clone().transforms(transformations);
-    }
-
-    optionalTransform(new MultiTransformation<>(transformations));
-    isTransformationRequired = true;
-    fields |= TRANSFORMATION_REQUIRED;
-    return selfOrThrowIfLocked();
+    return transform(new MultiTransformation<>(transformations), /*isRequired=*/ true);
   }
 
   /**
@@ -1166,19 +1152,25 @@ public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformati
   @SuppressWarnings("CheckResult")
   @CheckResult
   public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return transform(transformation, /*isRequired=*/ false);
+  }
+
+  private RequestOptions transform(
+      @NonNull Transformation<Bitmap> transformation, boolean isRequired) {
     if (isAutoCloneEnabled) {
-      return clone().optionalTransform(transformation);
+      return clone().transform(transformation, isRequired);
     }
 
-    DrawableTransformation drawableTransformation = new DrawableTransformation(transformation);
-    optionalTransform(Bitmap.class, transformation);
-    optionalTransform(Drawable.class, drawableTransformation);
+    DrawableTransformation drawableTransformation =
+        new DrawableTransformation(transformation, isRequired);
+    transform(Bitmap.class, transformation, isRequired);
+    transform(Drawable.class, drawableTransformation, isRequired);
     // TODO: remove BitmapDrawable decoder and this transformation.
     // Registering as BitmapDrawable is simply an optimization to avoid some iteration and
     // isAssignableFrom checks when obtaining the transformation later on. It can be removed without
     // affecting the functionality.
-    optionalTransform(BitmapDrawable.class, drawableTransformation.asBitmapDrawable());
-    optionalTransform(GifDrawable.class, new GifDrawableTransformation(transformation));
+    transform(BitmapDrawable.class, drawableTransformation.asBitmapDrawable(), isRequired);
+    transform(GifDrawable.class, new GifDrawableTransformation(transformation), isRequired);
     return selfOrThrowIfLocked();
   }
 
@@ -1202,8 +1194,15 @@ public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transfor
   @CheckResult
   public <T> RequestOptions optionalTransform(
       @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
+    return transform(resourceClass, transformation, /*isRequired=*/ false);
+  }
+
+  private <T> RequestOptions transform(
+      @NonNull Class<T> resourceClass,
+      @NonNull Transformation<T> transformation,
+      boolean isRequired) {
     if (isAutoCloneEnabled) {
-      return clone().optionalTransform(resourceClass, transformation);
+      return clone().transform(resourceClass, transformation, isRequired);
     }
 
     Preconditions.checkNotNull(resourceClass);
@@ -1215,6 +1214,10 @@ public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transfor
     // Always set to false here. Known scale only transformations will call this method and then
     // set isScaleOnlyOrNoTransform to true immediately after.
     isScaleOnlyOrNoTransform = false;
+    if (isRequired) {
+      fields |= TRANSFORMATION_REQUIRED;
+      isTransformationRequired = true;
+    }
     return selfOrThrowIfLocked();
   }
 
@@ -1233,14 +1236,7 @@ public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transfor
   @CheckResult
   public <T> RequestOptions transform(
       @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
-    if (isAutoCloneEnabled) {
-      return clone().transform(resourceClass, transformation);
-    }
-
-    optionalTransform(resourceClass, transformation);
-    isTransformationRequired = true;
-    fields |= TRANSFORMATION_REQUIRED;
-    return selfOrThrowIfLocked();
+    return transform(resourceClass, transformation, /*isRequired=*/ true);
   }
 
   /**
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index 1406a02f7..830fc2b5b 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -53,6 +53,7 @@
 import com.bumptech.glide.manager.RequestManagerTreeNode;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.SizeReadyCallback;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.transition.Transition;
@@ -295,6 +296,46 @@ public void testToBytesOption() {
     verify(target).onResourceReady(isA(byte[].class), isA(Transition.class));
   }
 
+  @Test
+  public void testLoadColorDrawable_withUnitBitmapTransformation_returnsColorDrawable() {
+    ColorDrawable colorDrawable = new ColorDrawable(Color.RED);
+    requestManager
+        .load(colorDrawable)
+        .apply(new RequestOptions()
+            .override(100, 100)
+            .centerCrop())
+        .into(target);
+
+    ArgumentCaptor<Object> argumentCaptor = ArgumentCaptor.forClass(Object.class);
+    verify(target).onResourceReady(argumentCaptor.capture(), isA(Transition.class));
+
+    Object result = argumentCaptor.getValue();
+
+    assertThat(result).isInstanceOf(ColorDrawable.class);
+    assertThat(((ColorDrawable) result).getColor()).isEqualTo(Color.RED);
+  }
+
+  @Test
+  public void testLoadColorDrawable_withNonUnitBitmapTransformation_returnsBitmapDrawable() {
+    ColorDrawable colorDrawable = new ColorDrawable(Color.RED);
+    requestManager
+        .load(colorDrawable)
+        .apply(new RequestOptions()
+            .override(100, 100)
+            .circleCrop())
+        .into(target);
+
+    ArgumentCaptor<Object> argumentCaptor = ArgumentCaptor.forClass(Object.class);
+    verify(target).onResourceReady(argumentCaptor.capture(), isA(Transition.class));
+
+    Object result = argumentCaptor.getValue();
+
+    assertThat(result).isInstanceOf(BitmapDrawable.class);
+    Bitmap bitmap = ((BitmapDrawable) result).getBitmap();
+    assertThat(bitmap.getWidth()).isEqualTo(100);
+    assertThat(bitmap.getHeight()).isEqualTo(100);
+  }
+
   @Test
   public void testUriDefaultLoaderWithInputStream() throws Exception {
     registerFailFactory(Uri.class, ParcelFileDescriptor.class);
diff --git a/samples/giphy/src/main/res/drawable-xxxhdpi/googlelogo_color_120x44dp.9.png b/samples/giphy/src/main/res/drawable-xxxhdpi/googlelogo_color_120x44dp.9.png
deleted file mode 100755
index 1ab50e6cf..000000000
Binary files a/samples/giphy/src/main/res/drawable-xxxhdpi/googlelogo_color_120x44dp.9.png and /dev/null differ
diff --git a/scripts/install_firebase.sh b/scripts/install_firebase.sh
new file mode 100755
index 000000000..594d16e87
--- /dev/null
+++ b/scripts/install_firebase.sh
@@ -0,0 +1,10 @@
+#!/usr/bin/env bash
+
+set -e
+
+openssl aes-256-cbc -K $encrypted_ad2664a1c4dd_key -iv $encrypted_ad2664a1c4dd_iv -in $GCLOUD_FILE -out gcloud.json -d
+
+wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-176.0.0-linux-x86_64.tar.gz
+tar xf google-cloud-sdk-176.0.0-linux-x86_64.tar.gz
+echo "y" | ./google-cloud-sdk/bin/gcloud components update beta
+./google-cloud-sdk/bin/gcloud auth activate-service-account --key-file gcloud.json
diff --git a/scripts/run_sample_robo_tests.sh b/scripts/run_sample_robo_tests.sh
new file mode 100755
index 000000000..d7c9cc23d
--- /dev/null
+++ b/scripts/run_sample_robo_tests.sh
@@ -0,0 +1,44 @@
+#!/usr/bin/env bash
+# Runs Firebases' robo tests (monkeyrunner) on Glide's sample apps
+#
+# Usage: 
+# ./scripts/run_sample_robo_tests.sh
+
+set -e
+
+./gradlew :samples:flickr:build \
+  :samples:giphy:build \
+  :samples:contacturi:build \
+  :samples:gallery:build \
+  :samples:imgur:build \
+  :samples:svg:build \
+  --parallel
+
+declare -a samples=("flickr" 
+                "giphy" 
+                "contacturi"
+                "gallery"
+                "imgur"
+                "svg")
+pids=()
+
+for sample in "${samples[@]}"
+do
+  sample_dir="samples/${sample}/build/outputs/apk/"
+  sample_apk="${sample_dir}/${sample}-debug.apk"
+  gcloud firebase test android run \
+    --type robo \
+    --app $sample_apk \
+    --device model=Nexus6P,version=26,locale=en,orientation=portrait  \
+    --project android-glide \
+    --no-auto-google-login &
+  pids+=("$!")
+done
+
+for current in "${pids[@]}"
+do
+  wait $current
+done
+       
+
+
diff --git a/scripts/travis_before_script.sh b/scripts/travis_before_script.sh
deleted file mode 100755
index 14048c2d7..000000000
--- a/scripts/travis_before_script.sh
+++ /dev/null
@@ -1,10 +0,0 @@
-#!/usr/bin/env bash
-
-set -e
-
-if [ "$COMPONENT" == "instrumentation" ]; then
-  echo "Starting emulator for $COMPONENT tests"
-  ./scripts/travis_create_emulator.sh &
-
-fi
-
diff --git a/scripts/travis_firebase.sh b/scripts/travis_firebase.sh
index 932d0c9ab..95f084720 100755
--- a/scripts/travis_firebase.sh
+++ b/scripts/travis_firebase.sh
@@ -9,14 +9,7 @@ fi
 
 ./gradlew :instrumentation:assembleDebug :instrumentation:assembleDebugAndroidTest --parallel &
 pid=$!
-
-openssl aes-256-cbc -K $encrypted_ad2664a1c4dd_key -iv $encrypted_ad2664a1c4dd_iv -in $GCLOUD_FILE -out gcloud.json -d
-
-wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-176.0.0-linux-x86_64.tar.gz
-tar xf google-cloud-sdk-176.0.0-linux-x86_64.tar.gz
-echo "y" | ./google-cloud-sdk/bin/gcloud components update beta
-./google-cloud-sdk/bin/gcloud auth activate-service-account --key-file gcloud.json
-
+./scripts/install_firebase.sh
 wait $pid
 
 apk_dir=instrumentation/build/outputs/apk
@@ -25,5 +18,9 @@ apk_dir=instrumentation/build/outputs/apk
   --app $apk_dir/instrumentation-debug.apk \
   --test $apk_dir/instrumentation-debug-androidTest.apk \
   --device model=Nexus6P,version=26,locale=en,orientation=portrait  \
+  --device model=Nexus6P,version=25,locale=en,orientation=portrait \
+  --device model=Nexus6P,version=23,locale=en,orientation=portrait \
+  --device model=Nexus6,version=22,locale=en,orientation=portrait \
+  --device model=Nexus5,version=19,locale=en,orientation=portrait \
   --project android-glide \
   --no-auto-google-login \
diff --git a/scripts/travis_instrumentation.sh b/scripts/travis_instrumentation.sh
index 929dde0cd..66155b286 100755
--- a/scripts/travis_instrumentation.sh
+++ b/scripts/travis_instrumentation.sh
@@ -2,6 +2,14 @@
 
 set -e
 
+if [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ $ANDROID_TARGET -gt 18 ]; then
+  echo "Emulator tests >= 19 are run on Firebase ignoring"
+  exit 0
+fi
+
+echo "Starting emulator for $COMPONENT tests"
+./scripts/travis_create_emulator.sh &
+
 ./gradlew :instrumentation:assembleDebug :instrumentation:assembleDebugAndroidTest --parallel
 
 echo "Waiting for emulator..."
diff --git a/scripts/travis_samples.sh b/scripts/travis_samples.sh
index 4ab3f1451..72c4e2860 100755
--- a/scripts/travis_samples.sh
+++ b/scripts/travis_samples.sh
@@ -8,4 +8,38 @@ set -e
   :samples:gallery:build \
   :samples:imgur:build \
   :samples:svg:build \
-  --parallel
+  --parallel &
+pid=$!
+
+./scripts/install_firebase.sh
+
+wait $pid
+
+declare -a samples=("flickr" 
+                "giphy" 
+                "contacturi"
+                "gallery"
+                "imgur"
+                "svg")
+pids=()
+
+for sample in "${samples[@]}"
+do
+  sample_dir="samples/${sample}/build/outputs/apk/"
+  sample_apk="${sample_dir}/${sample}-debug.apk"
+  ./google-cloud-sdk/bin/gcloud firebase test android run \
+    --type robo \
+    --app $sample_apk \
+    --device model=Nexus6P,version=26,locale=en,orientation=portrait  \
+    --project android-glide \
+    --no-auto-google-login &
+  pids+=("$!")
+done
+
+for current in "${pids[@]}"
+do
+  wait $current
+done
+       
+
+
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
index 24d965aef..ce5812f17 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/GifDecoder.java
@@ -233,5 +233,5 @@
    * {@link android.graphics.Bitmap.Config#ARGB_8888} will be used anyway to support the
    * transparency.
    */
-  void setDefaultBitmapFormat(Bitmap.Config format);
+  void setDefaultBitmapConfig(Bitmap.Config format);
 }
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
index 1c5eacf7d..f04694583 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
@@ -401,7 +401,7 @@ public synchronized int read(byte[] data) {
   }
 
   @Override
-  public void setDefaultBitmapFormat(Bitmap.Config config) {
+  public void setDefaultBitmapConfig(Bitmap.Config config) {
     if (config != Bitmap.Config.ARGB_8888 && config != Bitmap.Config.RGB_565) {
       throw new IllegalArgumentException("Unsupported format: " + config
           + ", must be one of " + Bitmap.Config.ARGB_8888 + " or " + Bitmap.Config.RGB_565);
