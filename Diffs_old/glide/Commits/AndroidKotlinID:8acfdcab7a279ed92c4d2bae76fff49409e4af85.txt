diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 63d72a61e..7154a83f0 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -20,6 +20,7 @@
 import com.squareup.javapoet.TypeVariableName;
 import com.squareup.javapoet.WildcardTypeName;
 import java.io.File;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
@@ -375,9 +376,13 @@ public String apply(CodeBlock input) {
     if (suppressions.isEmpty()) {
       return null;
     }
+    // Enforce ordering across compilers (Internal and External compilers end up disagreeing on the
+    // order produced by the Set additions above.)
+    ArrayList<String> suppressionsList = new ArrayList<>(suppressions);
+    Collections.sort(suppressionsList);
 
     AnnotationSpec.Builder builder = AnnotationSpec.builder(SuppressWarnings.class);
-    for (String suppression : suppressions) {
+    for (String suppression : suppressionsList) {
       builder.addMember("value", "$S", suppression);
     }
 
diff --git a/gradle.properties b/gradle.properties
index 4174d64da..7000caab0 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -15,14 +15,14 @@ POM_SCM_DEV_CONNECTION=scm:git@github.com:bumptech/glide.git
 POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
-ANDROID_SUPPORT_VERSION=27.0.1
+ANDROID_SUPPORT_VERSION=27.0.2
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.0
 ANDROID_GRADLE_VERSION=3.0.0
 DAGGER_VERSION=2.11
 
 COVERALLS_GRADLE_VERSION=2.4.0
-JUNIT_VERSION=4.12
+JUNIT_VERSION=4.13-SNAPSHOT
 # Matches the version in Google.
 MOCKITO_VERSION=1.9.5
 MOCKITO_ANDROID_VERSION=2.11.0
diff --git a/instrumentation/build.gradle b/instrumentation/build.gradle
index 5a1d201cb..35a3c813c 100644
--- a/instrumentation/build.gradle
+++ b/instrumentation/build.gradle
@@ -22,6 +22,7 @@ dependencies {
     androidTestImplementation 'com.android.support.test:runner:1.0.1'
     androidTestImplementation 'com.android.support.test:rules:1.0.1'
     androidTestImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    androidTestImplementation "junit:junit:${JUNIT_VERSION}"
     // Not totally clear why this is required, but it seems to be missing when tests are run on
     // 4.1.2 and 4.2.0 emulators.
     androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
index 0ce9b6e28..0b115225a 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/CachingTest.java
@@ -3,6 +3,8 @@
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static com.google.common.truth.Truth.assertThat;
+import static org.junit.Assert.assertThrows;
+import static org.junit.Assert.fail;
 import static org.mockito.AdditionalMatchers.not;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyBoolean;
@@ -22,6 +24,7 @@
 import com.bumptech.glide.load.engine.cache.MemoryCacheAdapter;
 import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.BitmapSubject;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
@@ -32,11 +35,13 @@
 import com.bumptech.glide.test.WaitModelLoader.WaitModel;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
@@ -120,7 +125,7 @@ public void run() {
         // Loading again here won't shuffle our resource around because it only changes our
         // reference count from 1 to 2 and back. The reference we're waiting for will only be
         // decremented when the target is GCed.
-        FutureTarget<Drawable> target =
+        Target<Drawable> target =
             concurrency.wait(
                 GlideApp.with(context)
                     .load(ResourceIds.raw.canonical)
@@ -283,7 +288,7 @@ public void clearDiskCache_doesNotPreventFutureLoads()
   public void onlyRetrieveFromCache_withPreviousRequestLoadingFromSource_doesNotBlock() {
     final WaitModel<Integer> waitModel = WaitModelLoader.Factory.waitOn(ResourceIds.raw.canonical);
 
-    GlideApp.with(context)
+    FutureTarget<Drawable> loadFromSourceFuture = GlideApp.with(context)
         .load(waitModel)
         .submit();
 
@@ -293,13 +298,15 @@ public void onlyRetrieveFromCache_withPreviousRequestLoadingFromSource_doesNotBl
         .submit();
     try {
       onlyFromCacheFuture.get(1000, TimeUnit.MILLISECONDS);
-      throw new IllegalStateException();
+      fail("Expected only from cache Future to time out");
     } catch (InterruptedException | TimeoutException e) {
       throw new RuntimeException(e);
     } catch (ExecutionException e) {
       // Expected.
     }
     waitModel.countDown();
+
+    assertThat(concurrency.get(loadFromSourceFuture)).isNotNull();
   }
 
   // Tests #2428.
@@ -320,7 +327,7 @@ public void run() {
     });
 
     // Queue the retrieve from cache request first.
-    GlideApp.with(context)
+    final Future<Drawable> firstQueuedFuture = GlideApp.with(context)
         .load(ResourceIds.raw.canonical)
         .onlyRetrieveFromCache(true)
         .submit();
@@ -334,6 +341,13 @@ public void run() {
 
     // Verify that the request that didn't have retrieve from cache succeeds
     assertThat(concurrency.get(expectedFuture)).isNotNull();
+    // The first request only from cache should fail because the item is not in cache.
+    assertThrows(RuntimeException.class, new ThrowingRunnable() {
+      @Override
+      public void run() throws Throwable {
+        concurrency.get(firstQueuedFuture);
+      }
+    });
   }
 
   private void clearMemoryCacheOnMainThread() throws InterruptedException {
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ExternallyClearedDiskCacheTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/ExternallyClearedDiskCacheTest.java
similarity index 95%
rename from instrumentation/src/androidTest/java/com/bumptech/glide/test/ExternallyClearedDiskCacheTest.java
rename to instrumentation/src/androidTest/java/com/bumptech/glide/ExternallyClearedDiskCacheTest.java
index 34f9b4a79..bdda5fed0 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ExternallyClearedDiskCacheTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/ExternallyClearedDiskCacheTest.java
@@ -1,4 +1,4 @@
-package com.bumptech.glide.test;
+package com.bumptech.glide;
 
 import static com.google.common.truth.Truth.assertThat;
 import static org.mockito.Mockito.mock;
@@ -7,13 +7,14 @@
 import android.graphics.drawable.Drawable;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.load.Key;
 import com.bumptech.glide.load.engine.cache.DiskCache;
 import com.bumptech.glide.load.engine.cache.DiskCache.Factory;
 import com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;
+import com.bumptech.glide.test.ConcurrencyHelper;
+import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.ResourceIds.raw;
+import com.bumptech.glide.test.TearDownGlide;
 import java.io.File;
 import org.junit.After;
 import org.junit.Before;
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java
index fef214394..4e9ff73da 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBitmapTest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;
 import com.bumptech.glide.load.engine.cache.LruResourceCache;
 import com.bumptech.glide.load.engine.cache.MemoryCacheAdapter;
-import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
 import com.bumptech.glide.test.ResourceIds;
@@ -58,7 +58,7 @@ public void clearFromRequestBuilder_asDrawable_withLoadedBitmap_doesNotRecycleBi
         .setMemoryCache(new MemoryCacheAdapter())
         .setBitmapPool(new BitmapPoolAdapter()));
     Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), ResourceIds.raw.canonical);
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asDrawable()
@@ -94,7 +94,7 @@ public void clearFromRequestManager_withLoadedBitmap_doesNotRecycleBitmap() {
         .setMemoryCache(new MemoryCacheAdapter())
         .setBitmapPool(new BitmapPoolAdapter()));
     Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), ResourceIds.raw.canonical);
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .load(bitmap)
@@ -128,7 +128,7 @@ public void clearFromRequestBuilder_withLoadedBitmap_asBitmap_doesNotRecycleBitm
         .setMemoryCache(new MemoryCacheAdapter())
         .setBitmapPool(new BitmapPoolAdapter()));
     Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), ResourceIds.raw.canonical);
-    FutureTarget<Bitmap> target =
+    Target<Bitmap> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asBitmap()
@@ -164,7 +164,7 @@ public void loadFromRequestManager_withBitmap_doesNotLoadFromDiskCache() {
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .load(bitmap)
@@ -203,7 +203,7 @@ public void loadFromRequestBuilder_asDrawable_withBitmap_doesNotLoadFromDiskCach
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asDrawable()
@@ -243,7 +243,7 @@ public void loadFromRequestBuilder_asDrawable_withBitmapAndStrategyBeforeLoad_no
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asDrawable()
@@ -284,7 +284,7 @@ public void loadFromRequestBuilder_asBitmap_withBitmap_doesNotLoadFromDiskCache(
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Bitmap> target =
+    Target<Bitmap> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asBitmap()
@@ -325,7 +325,7 @@ public void loadFromRequestBuilder_asBitmap_withBitmapAndStrategyBeforeLoad_notF
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Bitmap> target =
+    Target<Bitmap> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asBitmap()
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
index 052329f70..fb9a20545 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadBytesTest.java
@@ -25,8 +25,8 @@
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.engine.executor.GlideExecutor;
 import com.bumptech.glide.load.engine.executor.MockGlideExecutor;
-import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.BitmapSubject;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
@@ -190,7 +190,7 @@ public void requestBuilder_intoImageView_withSameByteArrayAndMemoryCacheEnabled_
   public void loadFromRequestManager_withSameByteArray_validDiskCacheStrategy_returnsFromDiskCache()
       throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .load(data)
             .diskCacheStrategy(DiskCacheStrategy.RESOURCE)
@@ -224,7 +224,7 @@ public void run() {
   public void loadFromRequestBuilder_withSameByteArray_validDiskCacheStrategy_returnsFromDiskCache()
       throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .asDrawable()
             .load(data)
@@ -260,7 +260,7 @@ public void run() {
   public void loadFromRequestManager_withSameByteArray_memoryCacheEnabled_returnsFromCache()
       throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .load(data)
             .skipMemoryCache(false)
@@ -282,7 +282,7 @@ public void loadFromRequestManager_withSameByteArray_memoryCacheEnabled_returnsF
   public void loadFromRequestBuilder_withSameByteArray_memoryCacheEnabled_returnsFromCache()
       throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .asDrawable()
             .load(data)
@@ -305,7 +305,7 @@ public void loadFromRequestBuilder_withSameByteArray_memoryCacheEnabled_returnsF
   @Test
   public void loadFromRequestManager_withSameByteArray_returnsFromLocal() throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .load(data)
             .submit());
@@ -324,7 +324,7 @@ public void loadFromRequestManager_withSameByteArray_returnsFromLocal() throws I
   @Test
   public void loadFromRequestBuilder_withSameByteArray_returnsFromLocal() throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .asDrawable()
             .load(data)
@@ -346,7 +346,7 @@ public void loadFromRequestBuilder_withSameByteArray_returnsFromLocal() throws I
   public void loadFromRequestManager_withSameByteArrayAndMissingFromMemory_returnsFromLocal()
        throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .load(data)
             .submit());
@@ -373,7 +373,7 @@ public void run() {
   public void loadFromRequestBuilder_withSameByteArrayAndMissingFromMemory_returnsFromLocal()
        throws IOException {
     byte[] data = getCanonicalBytes();
-    FutureTarget<Drawable> target = concurrency.wait(
+    Target<Drawable> target = concurrency.wait(
         GlideApp.with(context)
             .asDrawable()
             .load(data)
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadDrawableTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadDrawableTest.java
index 5a73caa3a..de411130c 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/LoadDrawableTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/LoadDrawableTest.java
@@ -1,6 +1,5 @@
 package com.bumptech.glide;
 
-
 import static com.bumptech.glide.test.Matchers.anyDrawable;
 import static com.bumptech.glide.test.Matchers.anyDrawableTarget;
 import static com.google.common.truth.Truth.assertThat;
@@ -22,8 +21,8 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;
 import com.bumptech.glide.load.engine.cache.LruResourceCache;
 import com.bumptech.glide.load.engine.cache.MemoryCacheAdapter;
-import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
 import com.bumptech.glide.test.ResourceIds;
@@ -59,7 +58,7 @@ public void clear_withLoadedBitmapDrawable_doesNotRecycleBitmap() {
         .setBitmapPool(new BitmapPoolAdapter()));
     Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), ResourceIds.raw.canonical);
     BitmapDrawable drawable = new BitmapDrawable(context.getResources(), bitmap);
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .load(drawable)
@@ -95,7 +94,7 @@ public void loadFromRequestManager_withBitmap_doesNotLoadFromDiskCache() {
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .load(drawable)
@@ -135,7 +134,7 @@ public void loadFromRequestBuilder_asDrawable_withBitmap_doesNotLoadFromDiskCach
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asDrawable()
@@ -176,7 +175,7 @@ public void loadFromRequestBuilder_asDrawable_withBitmapAndStrategyBeforeLoad_no
     Glide.init(context, new GlideBuilder()
         .setMemoryCache(new LruResourceCache(Util.getBitmapByteSize(bitmap) * 10))
         .setBitmapPool(new LruBitmapPool(Util.getBitmapByteSize(bitmap) * 10)));
-    FutureTarget<Drawable> target =
+    Target<Drawable> target =
         concurrency.wait(
             GlideApp.with(context)
                 .asDrawable()
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
index f208b837f..539a956bd 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RequestManagerTest.java
@@ -8,7 +8,7 @@
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.LifecycleListener;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
-import com.bumptech.glide.request.FutureTarget;
+import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.ResourceIds.raw;
@@ -82,7 +82,7 @@ public void run() {
       }
     });
 
-    final FutureTarget<Drawable> target =
+    final Target<Drawable> target =
         concurrency.wait(requestManager.load(raw.canonical).submit());
 
     concurrency.runOnMainThread(new Runnable() {
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
index 0e3df5e57..c95bc6a4e 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
@@ -9,6 +9,7 @@
 import android.widget.ImageView;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
+import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.target.DrawableImageViewTarget;
 import com.bumptech.glide.request.target.SizeReadyCallback;
@@ -50,7 +51,7 @@ public boolean await(long timeout, TimeUnit timeUnit) throws InterruptedExceptio
     return reference.get();
   }
 
-  public <T, Y extends Future<T>> Y wait(Y future) {
+  public <T> Target<T> wait(FutureTarget<T> future) {
     get(future);
     return future;
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java b/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
index 136c9f779..8f69875f7 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/ActiveResourcesTest.java
@@ -4,6 +4,7 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 
 import android.os.MessageQueue.IdleHandler;
@@ -35,6 +36,8 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     resources = new ActiveResources();
     resources.setListener(listener);
+
+    reset(GlideShadowLooper.queue);
   }
 
   @Test
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 928be9497..9beed462e 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -14,6 +14,7 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -472,6 +473,8 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
   @Test
   public void load_afterResourceIsGcedFromActive_returnsFromMemoryCache() {
+    // clear previous calls to addIdleHandler
+    reset(GlideShadowLooper.queue);
     when(harness.resource.getResource()).thenReturn(mock(Resource.class));
     when(harness.resource.isCacheable()).thenReturn(true);
     harness.cache = new LruResourceCache(100);
