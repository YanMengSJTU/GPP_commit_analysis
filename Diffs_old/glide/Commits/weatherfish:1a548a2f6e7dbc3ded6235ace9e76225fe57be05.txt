diff --git a/.idea/codeStyleSettings.xml b/.idea/codeStyleSettings.xml
new file mode 100644
index 000000000..fe060621a
--- /dev/null
+++ b/.idea/codeStyleSettings.xml
@@ -0,0 +1,354 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectCodeStyleSettingsManager">
+    <option name="PER_PROJECT_SETTINGS">
+      <value>
+        <option name="OTHER_INDENT_OPTIONS">
+          <value>
+            <option name="INDENT_SIZE" value="2" />
+            <option name="CONTINUATION_INDENT_SIZE" value="4" />
+            <option name="TAB_SIZE" value="2" />
+            <option name="USE_TAB_CHARACTER" value="false" />
+            <option name="SMART_TABS" value="false" />
+            <option name="LABEL_INDENT_SIZE" value="0" />
+            <option name="LABEL_INDENT_ABSOLUTE" value="false" />
+            <option name="USE_RELATIVE_INDENTS" value="false" />
+          </value>
+        </option>
+        <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="99" />
+        <option name="NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND" value="99" />
+        <option name="IMPORT_LAYOUT_TABLE">
+          <value>
+            <package name="" withSubpackages="true" static="true" />
+            <emptyLine />
+            <package name="com.google" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="android" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="antenna" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="antlr" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ar" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="asposewobfuscated" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="asquare" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="atg" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="au" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="beaver" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="bibtex" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="bmsi" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="bsh" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ccl" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="cern" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ChartDirector" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="checkers" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="com" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="COM" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="common" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="contribs" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="corejava" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="cryptix" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="cybervillains" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="dalvik" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="danbikel" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="de" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="EDU" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="eg" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="eu" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="examples" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="fat" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="fit" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="fitlibrary" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="fmpp" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="freemarker" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="gnu" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="groovy" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="groovyjarjarantlr" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="groovyjarjarasm" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="hak" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="hep" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ie" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="imageinfo" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="info" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="it" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jal" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="Jama" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="japa" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="japacheckers" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jas" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jasmin" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="javancss" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="javanet" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="javassist" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="javazoom" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="java_cup" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jcifs" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jetty" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="JFlex" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jj2000" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jline" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jp" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="JSci" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jsr166y" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="junit" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jxl" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="jxxload_help" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="kawa" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="kea" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="libcore" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="libsvm" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="lti" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="memetic" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="mt" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="mx4j" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="net" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="netscape" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="nl" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="nu" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="oauth" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ognl" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="opennlp" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="oracle" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="org" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="penn2dg" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="pennconverter" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="pl" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="prefuse" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="proguard" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="repackage" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="scm" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="se" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="serp" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="simple" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="soot" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="sqlj" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="src" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ssa" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="sun" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="sunlabs" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="tcl" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="testdata" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="testshell" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="testsuite" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="twitter4j" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="uk" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="ViolinStrings" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="weka" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="wet" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="winstone" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="woolfel" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="wowza" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="java" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="javax" withSubpackages="true" static="false" />
+            <emptyLine />
+            <package name="" withSubpackages="true" static="false" />
+            <emptyLine />
+            <emptyLine />
+          </value>
+        </option>
+        <option name="RIGHT_MARGIN" value="100" />
+        <option name="JD_P_AT_EMPTY_LINES" value="false" />
+        <option name="JD_KEEP_EMPTY_PARAMETER" value="false" />
+        <option name="JD_KEEP_EMPTY_EXCEPTION" value="false" />
+        <option name="JD_KEEP_EMPTY_RETURN" value="false" />
+        <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
+        <option name="KEEP_BLANK_LINES_IN_CODE" value="1" />
+        <option name="BLANK_LINES_AFTER_CLASS_HEADER" value="1" />
+        <option name="ALIGN_MULTILINE_PARAMETERS_IN_CALLS" value="true" />
+        <option name="ALIGN_MULTILINE_BINARY_OPERATION" value="true" />
+        <option name="ALIGN_MULTILINE_ASSIGNMENT" value="true" />
+        <option name="ALIGN_MULTILINE_TERNARY_OPERATION" value="true" />
+        <option name="ALIGN_MULTILINE_THROWS_LIST" value="true" />
+        <option name="ALIGN_MULTILINE_EXTENDS_LIST" value="true" />
+        <option name="ALIGN_MULTILINE_PARENTHESIZED_EXPRESSION" value="true" />
+        <option name="ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION" value="true" />
+        <option name="CALL_PARAMETERS_WRAP" value="1" />
+        <option name="METHOD_PARAMETERS_WRAP" value="1" />
+        <option name="EXTENDS_LIST_WRAP" value="1" />
+        <option name="THROWS_LIST_WRAP" value="1" />
+        <option name="EXTENDS_KEYWORD_WRAP" value="1" />
+        <option name="THROWS_KEYWORD_WRAP" value="1" />
+        <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
+        <option name="BINARY_OPERATION_WRAP" value="1" />
+        <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
+        <option name="TERNARY_OPERATION_WRAP" value="1" />
+        <option name="TERNARY_OPERATION_SIGNS_ON_NEXT_LINE" value="true" />
+        <option name="FOR_STATEMENT_WRAP" value="1" />
+        <option name="ARRAY_INITIALIZER_WRAP" value="1" />
+        <option name="ASSIGNMENT_WRAP" value="5" />
+        <option name="WRAP_COMMENTS" value="true" />
+        <option name="IF_BRACE_FORCE" value="3" />
+        <option name="DOWHILE_BRACE_FORCE" value="3" />
+        <option name="WHILE_BRACE_FORCE" value="3" />
+        <option name="FOR_BRACE_FORCE" value="3" />
+        <Objective-C-extensions>
+          <option name="GENERATE_INSTANCE_VARIABLES_FOR_PROPERTIES" value="ASK" />
+          <option name="RELEASE_STYLE" value="IVAR" />
+          <option name="TYPE_QUALIFIERS_PLACEMENT" value="BEFORE" />
+          <file>
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />
+          </file>
+          <class>
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />
+            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod" />
+          </class>
+          <extensions>
+            <pair source="cpp" header="h" />
+            <pair source="c" header="h" />
+          </extensions>
+        </Objective-C-extensions>
+        <XML>
+          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />
+        </XML>
+        <ADDITIONAL_INDENT_OPTIONS fileType="haml">
+          <option name="INDENT_SIZE" value="2" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="java">
+          <option name="INDENT_SIZE" value="2" />
+          <option name="CONTINUATION_INDENT_SIZE" value="4" />
+          <option name="TAB_SIZE" value="8" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="js">
+          <option name="CONTINUATION_INDENT_SIZE" value="4" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="sass">
+          <option name="INDENT_SIZE" value="2" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <ADDITIONAL_INDENT_OPTIONS fileType="yml">
+          <option name="INDENT_SIZE" value="2" />
+        </ADDITIONAL_INDENT_OPTIONS>
+        <codeStyleSettings language="JAVA">
+          <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
+          <indentOptions>
+            <option name="INDENT_SIZE" value="2" />
+            <option name="CONTINUATION_INDENT_SIZE" value="4" />
+            <option name="TAB_SIZE" value="2" />
+          </indentOptions>
+        </codeStyleSettings>
+      </value>
+    </option>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="GoogleStyle" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/annotation/.gitignore b/annotation/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/annotation/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/annotation/build.gradle b/annotation/build.gradle
new file mode 100644
index 000000000..d6a7f76df
--- /dev/null
+++ b/annotation/build.gradle
@@ -0,0 +1,3 @@
+apply plugin: 'java'
+
+apply from: "${rootProject.projectDir}/scripts/upload.gradle"
\ No newline at end of file
diff --git a/annotation/compiler/.gitignore b/annotation/compiler/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/annotation/compiler/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/annotation/compiler/build.gradle b/annotation/compiler/build.gradle
new file mode 100644
index 000000000..619a616c6
--- /dev/null
+++ b/annotation/compiler/build.gradle
@@ -0,0 +1,16 @@
+import org.gradle.internal.jvm.Jvm
+
+apply plugin: 'java'
+
+dependencies {
+    compile 'com.squareup:javapoet:1.8.0'
+    compile 'com.google.auto.service:auto-service:1.0-rc3'
+    compile project(':annotation')
+    // This is to support com.sun.tootls.javac.util.List, currently used in RootModuleGenerator.
+    compile files(Jvm.current().getToolsJar())
+
+    testCompile "junit:junit:${JUNIT_VERSION}"
+    testCompile 'com.google.testing.compile:compile-testing:0.10'
+}
+
+apply from: "${rootProject.projectDir}/scripts/upload.gradle"
diff --git a/annotation/compiler/gradle.properties b/annotation/compiler/gradle.properties
new file mode 100644
index 000000000..e94849d79
--- /dev/null
+++ b/annotation/compiler/gradle.properties
@@ -0,0 +1,10 @@
+POM_NAME=Glide Annotation processor
+POM_ARTIFACT_ID=compiler
+POM_PACKAGING=jar
+
+VERSION_NAME=1.0.0-SNAPSHOT
+VERSION_MAJOR=1
+VERSION_MINOR=0
+VERSION_PATCH=0
+
+POM_DESCRIPTION=Glide's anntation processor. Should be included in all Applications and in all libraries that use Glide's modules for configuration.
\ No newline at end of file
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideIndexerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideIndexerGenerator.java
new file mode 100644
index 000000000..224c6ae8b
--- /dev/null
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideIndexerGenerator.java
@@ -0,0 +1,54 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.ModuleAnnotationProcessor.INDEXER_NAME_PREFIX;
+
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.TypeSpec;
+import java.util.List;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+
+/**
+ * Generates an empty class with an annotation containing the class names of one or more
+ * ChildGlideModules.
+ *
+ * <p>We use a separate class so that ChildGlideModules written in libraries can be bundled into an
+ * AAR and later retrieved by the annotation processor when it processes the RootGlideModule in an
+ * application.
+ *
+ * <p>The output of this file looks like this:
+ * <pre>
+ * <code>
+ *  {@literal @com.bumptech.glide.annotation.compiler.ModuleIndex(}
+ *      glideModules = "com.bumptech.glide.integration.okhttp3.OkHttpChildGlideModule"
+ *  )
+ *  public class GlideIndexer_com_bumptech_glide_integration_okhttp3_OkHttpChildGlideModule {
+ *  }
+ * </code>
+ * </pre>
+ */
+final class GlideIndexerGenerator {
+
+  private GlideIndexerGenerator() { }
+
+  static TypeSpec generate(List<TypeElement> childModules) {
+    AnnotationSpec.Builder annotationBuilder =
+        AnnotationSpec.builder(ModuleIndex.class);
+    for (TypeElement childModule : childModules) {
+      annotationBuilder.addMember("glideModules", "$S", ClassName.get(childModule).toString());
+    }
+
+    String indexerName = INDEXER_NAME_PREFIX;
+    for (TypeElement element : childModules) {
+      indexerName += element.getQualifiedName().toString().replace(".", "_");
+      indexerName += "_";
+    }
+    indexerName = indexerName.substring(0, indexerName.length() - 1);
+
+    return TypeSpec.classBuilder(indexerName)
+        .addAnnotation(annotationBuilder.build())
+        .addModifiers(Modifier.PUBLIC)
+        .build();
+  }
+}
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ModuleAnnotationProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ModuleAnnotationProcessor.java
new file mode 100644
index 000000000..9604f3fd7
--- /dev/null
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ModuleAnnotationProcessor.java
@@ -0,0 +1,239 @@
+package com.bumptech.glide.annotation.compiler;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.google.auto.service.AutoService;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeSpec;
+import java.lang.annotation.Annotation;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.PackageElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.util.ElementFilter;
+import javax.tools.Diagnostic;
+
+// Links in Javadoc will work due to build setup, even though there is no direct dependency here.
+/**
+ * Generates classes to allow Glide to discover and call all
+ * {@link com.bumptech.glide.module.ChildGlideModule}s in an application and any dependent libraries
+ * of the application and the RootGlideModule included in the application itself.
+ *
+ * <p>This processor discovers all {@link com.bumptech.glide.module.RootGlideModule} and
+ * {@link com.bumptech.glide.module.ChildGlideModule} implementations that are
+ * annotated with {@link com.bumptech.glide.annotation.GlideModule}. Any implementations missing the
+ * annotation will be ignored.
+ *
+ * <p>Two classes are generated by this processor:
+ * <ul>
+ *   <li>For {@link com.bumptech.glide.module.ChildGlideModule}s - A GlideIndexer class in a
+ *      specific package that will later be used by the processor to discover all
+ *      {@link com.bumptech.glide.module.ChildGlideModule} classes.
+ *   <li>For {@link com.bumptech.glide.module.RootGlideModule}s - A single
+ *      {@link com.bumptech.glide.module.RootGlideModule} implementation
+ *     ({@link com.bumptech.glide.GeneratedRootGlideModule}) that calls all
+ *     {@link com.bumptech.glide.module.ChildGlideModule}s and the
+ *     original {@link com.bumptech.glide.module.RootGlideModule} in the correct order when Glide is
+ *     initialized.
+ * </ul>
+ *
+ * <p>{@link com.bumptech.glide.module.RootGlideModule} implementations must only be included in
+ * applications, not in libraries. There must be exactly one
+ * {@link com.bumptech.glide.module.RootGlideModule} implementation per
+ * Application. The {@link com.bumptech.glide.module.RootGlideModule} class is
+ * used as a signal that all modules have been found and that the final merged
+ * {@link com.bumptech.glide.GeneratedRootGlideModule} impl can be created.
+ */
+@AutoService(Processor.class)
+public final class ModuleAnnotationProcessor extends AbstractProcessor {
+  static final String INDEXER_NAME_PREFIX = "GlideIndexer_";
+
+  private static final String GLIDE_MODULE_PACKAGE_NAME = "com.bumptech.glide.module";
+  private static final String ROOT_GLIDE_MODULE_SIMPLE_NAME = "RootGlideModule";
+  private static final String CHILD_GLIDE_MODULE_SIMPLE_NAME = "ChildGlideModule";
+  private static final String COMPILER_PACKAGE_NAME =
+      ModuleAnnotationProcessor.class.getPackage().getName();
+  private static final String GENERATED_ROOT_MODULE_PACKAGE_NAME = "com.bumptech.glide";
+  private static final String CHILD_GLIDE_MODULE_QUALIFIED_NAME =
+      GLIDE_MODULE_PACKAGE_NAME + "." + CHILD_GLIDE_MODULE_SIMPLE_NAME;
+  private static final String ROOT_GLIDE_MODULE_QUALIFIED_NAME =
+      GLIDE_MODULE_PACKAGE_NAME + "." + ROOT_GLIDE_MODULE_SIMPLE_NAME;
+  private static final boolean DEBUG = false;
+
+  private final List<TypeElement> rootGlideModules = new ArrayList<>();
+  private final Set<String> glideModuleClassNames = new HashSet<>();
+  private boolean isGeneratedRootGlideModuleWritten;
+  private TypeElement childGlideModuleType;
+  private TypeElement rootGlideModuleType;
+  private int round;
+
+  @Override
+  public synchronized void init(ProcessingEnvironment processingEnvironment) {
+    super.init(processingEnvironment);
+    childGlideModuleType =
+        processingEnv.getElementUtils().getTypeElement(CHILD_GLIDE_MODULE_QUALIFIED_NAME);
+    rootGlideModuleType =
+        processingEnv.getElementUtils().getTypeElement(ROOT_GLIDE_MODULE_QUALIFIED_NAME);
+  }
+
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    return new HashSet<>(
+        Arrays.asList(
+            ModuleIndex.class.getName(),
+            GlideModule.class.getName()
+        )
+    );
+  }
+
+  @Override
+  public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.RELEASE_7;
+  }
+
+  /**
+   * Each round we do the following:
+   * <ol>
+   *   <li>Find all RootGlideModules and save them to an instance variable (throw if > 1).
+   *   <li>Find all ChildGlideModules
+   *   <li>For each ChildGlideModule, write an Indexer with an Annotation with the class name.
+   *   <li>If we wrote any Indexers, return and wait for the next round.
+   *   <li>If we didn't write any Indexers and there is a RootGlideModule, write the
+   *   GeneratedRootGlideModule. Once the GeneratedRootGlideModule is written, we expect to be
+   *   finished. Any further generation of related classes will result in errors.
+   * </ol>
+   */
+  @Override
+  public boolean process(Set<? extends TypeElement> set, RoundEnvironment env) {
+    round++;
+    // Order matters here, if we find an Indexer below, we return before writing the root module. If
+    // we fail to add to rootModules before then, we might accidentally skip a valid RootModule.
+    List<TypeElement> childGlideModules = new ArrayList<>();
+    for (TypeElement element : getElementsFor(GlideModule.class, env)) {
+      if (processingEnv.getTypeUtils().isAssignable(element.asType(),
+          rootGlideModuleType.asType())) {
+        rootGlideModules.add(element);
+      } else if (processingEnv.getTypeUtils().isAssignable(element.asType(),
+          childGlideModuleType.asType())) {
+        childGlideModules.add(element);
+      } else {
+        throw new IllegalStateException("@GlideModule can only be applied to ChildGlideModule"
+            + " and RootGlideModule implementations, not: " + element);
+      }
+    }
+
+    debugLog("got child modules: " + childGlideModules);
+    debugLog("got root modules: " + rootGlideModules);
+
+    if (rootGlideModules.size() > 1) {
+      throw new IllegalStateException(
+          "You cannot have more than one RootGlideModule, found: " + rootGlideModules);
+    }
+
+    if (!childGlideModules.isEmpty()) {
+      if (isGeneratedRootGlideModuleWritten) {
+        throw new IllegalStateException("Cannot process ChildModules after writing RootModules: "
+            + childGlideModules);
+      }
+      TypeSpec indexer = GlideIndexerGenerator.generate(childGlideModules);
+      writeIndexer(indexer);
+
+      debugLog("Wrote an Indexer this round, skipping the root module to ensure all indexers are"
+          + " found");
+       // If I write an Indexer in a round in the target package, then try to find all classes in
+      // the target package, my newly written Indexer won't be found. Since we wrote a class with
+      // an Annotation handled by this processor, we know we will be called again in the next round
+      // and we can safely wait to write our RootModule until then.
+      return true;
+    }
+
+    // rootGlideModules is added to in order to catch errors where multiple RootGlideModules may be
+    // present for a single application or library. Because we only add to rootGlideModules, we use
+    // isGeneratedRootGlideModuleWritten to make sure the GeneratedRootGlideModule is written at
+    // most once.
+    if (isGeneratedRootGlideModuleWritten || rootGlideModules.isEmpty()) {
+      return false;
+    }
+
+    debugLog("Processing root module: " + rootGlideModules.iterator().next());
+    // If this package is null, it means there are no classes with this package name. One way this
+    // could happen is if we process an annotation and reach this point without writing something
+    // to the package. We do not error check here because that shouldn't happen with the
+    // current implementation.
+    PackageElement glideGenPackage =
+        processingEnv.getElementUtils().getPackageElement(COMPILER_PACKAGE_NAME);
+    glideModuleClassNames.addAll(getGlideModuleClassNames(glideGenPackage));
+
+    TypeSpec generatedRootGlideModule =
+        RootModuleGenerator.generate(
+            processingEnv, rootGlideModules.get(0).getQualifiedName().toString(),
+            glideModuleClassNames);
+    writeRootModule(generatedRootGlideModule);
+    isGeneratedRootGlideModuleWritten = true;
+
+    infoLog("Wrote GeneratedRootGlideModule with: " + glideModuleClassNames);
+
+    return true;
+  }
+
+  @SuppressWarnings("unchecked")
+  private Set<String> getGlideModuleClassNames(PackageElement glideGenPackage) {
+    Set<String> glideModules = new HashSet<>();
+    List<? extends Element> glideGeneratedElements = glideGenPackage.getEnclosedElements();
+    for (Element indexer : glideGeneratedElements) {
+      ModuleIndex annotation = indexer.getAnnotation(ModuleIndex.class);
+      // If the annotation is null, it means we've come across another class in the same package
+      // that we can safely ignore.
+      if (annotation != null) {
+        Collections.addAll(glideModules, annotation.glideModules());
+      }
+    }
+
+    debugLog("Found GlideModules: " + glideModules);
+    return glideModules;
+  }
+
+
+  private void writeIndexer(TypeSpec indexer) {
+    writeClass(COMPILER_PACKAGE_NAME, indexer);
+  }
+
+  private void writeRootModule(TypeSpec rootModule) {
+    writeClass(GENERATED_ROOT_MODULE_PACKAGE_NAME, rootModule);
+  }
+
+  private void writeClass(String packageName, TypeSpec clazz) {
+    try {
+      debugLog("Writing class:\n" + clazz);
+      JavaFile.builder(packageName, clazz).build().writeTo(processingEnv.getFiler());
+    } catch (Throwable e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private List<TypeElement> getElementsFor(
+      Class<? extends Annotation> clazz, RoundEnvironment env) {
+    Collection<? extends Element> annotatedElements = env.getElementsAnnotatedWith(clazz);
+    return ElementFilter.typesIn(annotatedElements);
+  }
+
+  private void debugLog(String toLog) {
+    if (DEBUG) {
+      infoLog(toLog);
+    }
+  }
+
+  private void infoLog(String toLog) {
+    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "[" + round + "] " + toLog);
+  }
+}
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RootModuleGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RootModuleGenerator.java
new file mode 100644
index 000000000..07d492607
--- /dev/null
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RootModuleGenerator.java
@@ -0,0 +1,257 @@
+package com.bumptech.glide.annotation.compiler;
+
+import com.bumptech.glide.annotation.Excludes;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.WildcardTypeName;
+import com.sun.tools.javac.code.Attribute;
+import com.sun.tools.javac.util.List;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+
+/**
+ * Generates a new implementation of a RootGlideModule that calls all included ChildGlideModules and
+ * the original RootGlideModule.
+ *
+ * <p>The generated class will always call the RootGlideModule last to give it priority over choices
+ * made or classes registered in ChildGlideModules.
+ *
+ * <p>Android logging is included to allow developers to see exactly which modules are included at
+ * runtime.
+ *
+ * <p>The generated class looks something like this:
+ * <pre>
+ * <code>
+ *  final class GeneratedRootGlideModuleImpl extends com.bumptech.glide.GeneratedRootGlideModule {
+ *    private final com.bumptech.glide.samples.giphy.GiphyGlideModule rootGlideModule;
+ *
+ *    GeneratedRootGlideModule() {
+ *      rootGlideModule = new com.bumptech.glide.samples.giphy.GiphyGlideModule();
+ *      if (android.util.Log.isLoggable("Glide", android.util.Log.DEBUG)) {
+ *        android.util.Log.d("Glide", "Discovered RootGlideModule from annotation:"
+ *            + " com.bumptech.glide.samples.giphy.GiphyGlideModule");
+ *        android.util.Log.d("Glide", "Discovered ChildGlideModule from annotation:"
+ *            + "com.bumptech.glide.integration.okhttp3.OkHttpChildGlideModule");
+ *      }
+ *    }
+ *
+ *    {@literal @java.lang.Override}
+ *    public void applyOptions(android.content.Context context,
+ *        com.bumptech.glide.GlideBuilder builder) {
+ *      rootGlideModule.applyOptions(context, builder);
+ *    }
+ *
+ *    {@literal @java.lang.Override}
+ *    public void registerComponents(android.content.Context context,
+ *        com.bumptech.glide.Registry registry) {
+ *      new com.bumptech.glide.integration.okhttp3.OkHttpChildGlideModule()
+ *          .registerComponents(context, registry);
+ *      rootGlideModule.registerComponents(context, registry);
+ *    }
+ *
+ *    {@literal @java.lang.Override}
+ *    public boolean isManifestParsingEnabled() {
+ *      return rootGlideModule.isManifestParsingEnabled();
+ *    }
+ *
+ *    {@literal @java.lang.Override}
+ *    public java.util.Set<java.lang.Class<?>> getExcludedModuleClasses() {
+ *      return rootGlideModule.getExcludedModuleClasses();
+ *    }
+ *  }
+ * </code>
+ * </pre>
+ */
+final class RootModuleGenerator {
+  private static final String GLIDE_LOG_TAG = "Glide";
+  private static final String GENERATED_ROOT_MODULE_IMPL_SIMPLE_NAME =
+      "GeneratedRootGlideModuleImpl";
+  // TODO: When manifest parsing is no longer supported, just use RootGlideModule directly.
+  private static final String GENERATED_ROOT_MODULE_PACKAGE_NAME = "com.bumptech.glide";
+  private static final String GENERATED_ROOT_MODULE_SIMPLE_NAME = "GeneratedRootGlideModule";
+
+  private RootModuleGenerator() { }
+
+  static TypeSpec generate(ProcessingEnvironment processingEnv,
+      String rootGlideModuleClassName, Set<String> childGlideModuleClassNames) {
+    ClassName rootGlideModule = ClassName.bestGuess(rootGlideModuleClassName);
+    Set<String> excludedGlideModuleClassNames =
+        getExcludedGlideModuleClassNames(processingEnv, rootGlideModuleClassName);
+
+    MethodSpec constructor =
+        generateConstructor(
+            rootGlideModule, childGlideModuleClassNames, excludedGlideModuleClassNames);
+
+    MethodSpec registerComponents =
+        generateRegisterComponents(childGlideModuleClassNames, excludedGlideModuleClassNames);
+
+    MethodSpec getExcludedModuleClasses =
+        generateGetExcludedModuleClasses(excludedGlideModuleClassNames);
+
+    MethodSpec applyOptions =
+        MethodSpec.methodBuilder("applyOptions")
+            .addModifiers(Modifier.PUBLIC)
+            .addAnnotation(Override.class)
+            .addParameter(ClassName.get("android.content", "Context"), "context")
+            .addParameter(ClassName.get("com.bumptech.glide", "GlideBuilder"), "builder")
+            .addStatement("rootGlideModule.applyOptions(context, builder)", rootGlideModule)
+            .build();
+
+    MethodSpec isManifestParsingEnabled =
+        MethodSpec.methodBuilder("isManifestParsingEnabled")
+            .addModifiers(Modifier.PUBLIC)
+            .addAnnotation(Override.class)
+            .returns(boolean.class)
+            .addStatement("return rootGlideModule.isManifestParsingEnabled()", rootGlideModule)
+            .build();
+
+    return TypeSpec.classBuilder(GENERATED_ROOT_MODULE_IMPL_SIMPLE_NAME)
+        .addModifiers(Modifier.FINAL)
+        .addAnnotation(
+            AnnotationSpec.builder(SuppressWarnings.class)
+                .addMember("value", "$S", "deprecation")
+                .build()
+        )
+        .superclass(
+            ClassName.get(GENERATED_ROOT_MODULE_PACKAGE_NAME, GENERATED_ROOT_MODULE_SIMPLE_NAME))
+        .addField(rootGlideModule, "rootGlideModule", Modifier.PRIVATE, Modifier.FINAL)
+        .addMethod(constructor)
+        .addMethod(applyOptions)
+        .addMethod(registerComponents)
+        .addMethod(isManifestParsingEnabled)
+        .addMethod(getExcludedModuleClasses)
+        .build();
+  }
+
+  // TODO: When we drop support for parsing GlideModules from AndroidManifests, remove this method.
+  private static MethodSpec generateGetExcludedModuleClasses(Set<String> excludedClassNames) {
+    TypeName wildCardOfObject = WildcardTypeName.subtypeOf(Object.class);
+    ParameterizedTypeName classOfWildcardOfObjet =
+        ParameterizedTypeName.get(ClassName.get(Class.class), wildCardOfObject);
+    ParameterizedTypeName setOfClassOfWildcardOfObject =
+        ParameterizedTypeName.get(ClassName.get(Set.class), classOfWildcardOfObjet);
+    ParameterizedTypeName hashSetOfClassOfWildcardOfObject =
+        ParameterizedTypeName.get(ClassName.get(HashSet.class), classOfWildcardOfObjet);
+    MethodSpec.Builder builder = MethodSpec.methodBuilder("getExcludedModuleClasses")
+        .addModifiers(Modifier.PUBLIC)
+        .addAnnotation(Override.class)
+        .returns(setOfClassOfWildcardOfObject);
+
+    if (excludedClassNames.isEmpty()) {
+      builder.addStatement("return $T.emptySet()", Collections.class);
+    } else {
+      builder.addStatement(
+          "$T excludedClasses = new $T()", setOfClassOfWildcardOfObject,
+          hashSetOfClassOfWildcardOfObject);
+      for (String excludedClassName : excludedClassNames) {
+        // TODO: Remove this when we no longer support manifest parsing.
+        // Using a Literal ($L) instead of a type ($T) to get a fully qualified import that allows
+        // us to suppress deprecation warnings. Aimed at deprecated GlideModules.
+        builder.addStatement("excludedClasses.add($L.class)", excludedClassName);
+      }
+      builder.addStatement("return excludedClasses");
+    }
+
+    return builder.build();
+  }
+
+  private static MethodSpec generateRegisterComponents(Set<String> childGlideModuleClassNames,
+      Set<String> excludedGlideModuleClassNames) {
+    MethodSpec.Builder registerComponents =
+        MethodSpec.methodBuilder("registerComponents")
+            .addModifiers(Modifier.PUBLIC)
+            .addAnnotation(Override.class)
+            .addParameter(ClassName.get("android.content", "Context"), "context")
+            .addParameter(ClassName.get("com.bumptech.glide", "Registry"), "registry");
+
+    for (String glideModule : childGlideModuleClassNames) {
+      if (excludedGlideModuleClassNames.contains(glideModule)) {
+        continue;
+      }
+      ClassName moduleClassName = ClassName.bestGuess(glideModule);
+      registerComponents.addStatement(
+          "new $T().registerComponents(context, registry)", moduleClassName);
+    }
+    // Order matters here. The RootGlideModule must be called last.
+    registerComponents.addStatement("rootGlideModule.registerComponents(context, registry)");
+    return registerComponents.build();
+  }
+
+  private static MethodSpec generateConstructor(ClassName rootGlideModule,
+      Set<String> childGlideModuleClassNames, Set<String> excludedGlideModuleClassNames) {
+    MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
+    constructorBuilder.addStatement("rootGlideModule = new $T()", rootGlideModule);
+
+    ClassName androidLogName = ClassName.get("android.util", "Log");
+
+    // Add some log lines to indicate to developers which modules where discovered.
+    constructorBuilder.beginControlFlow("if ($T.isLoggable($S, $T.DEBUG))",
+        androidLogName, GLIDE_LOG_TAG, androidLogName);
+    constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
+        "Discovered RootGlideModule from annotation: " + rootGlideModule);
+    // Excluded GlideModule classes from the manifest are logged in Glide's singleton.
+    for (String glideModule : childGlideModuleClassNames) {
+      ClassName moduleClassName = ClassName.bestGuess(glideModule);
+      if (excludedGlideModuleClassNames.contains(glideModule)) {
+        constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
+            "RootGlideModule excludes ChildGlideModule from annotation: " + moduleClassName);
+      } else {
+        constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
+            "Discovered ChildGlideModule from annotation: " + moduleClassName);
+      }
+    }
+    constructorBuilder.endControlFlow();
+    return constructorBuilder.build();
+  }
+
+  private static Set<String> getExcludedGlideModuleClassNames(ProcessingEnvironment processingEnv,
+      String rootGlideModuleClassName) {
+    TypeElement rootGlideModule = processingEnv
+        .getElementUtils()
+        .getTypeElement(rootGlideModuleClassName);
+    String excludedModulesName = Excludes.class.getName();
+    AnnotationValue excludedModuleAnnotationValue = null;
+    for (AnnotationMirror annotationMirror : rootGlideModule.getAnnotationMirrors()) {
+      // Two different AnnotationMirrors the same class might not be equal, so compare Strings
+      // instead. This check is necessary because a given class may have multiple Annotations.
+      if (!excludedModulesName.equals(annotationMirror.getAnnotationType().toString())) {
+        continue;
+      }
+      Set<? extends Map.Entry<? extends ExecutableElement, ? extends AnnotationValue>> values =
+          annotationMirror.getElementValues().entrySet();
+      // Excludes has only one value. If we ever change that, we'd need to iterate over all
+      // values in the entry set and compare the keys to whatever our Annotation's attribute is
+      // (usually value).
+      if (values.size() != 1) {
+        throw new IllegalArgumentException("Expected single value, but found: " + values);
+      }
+      excludedModuleAnnotationValue = values.iterator().next().getValue();
+      if (excludedModuleAnnotationValue == null) {
+        throw new NullPointerException("Failed to find Excludes#value");
+      }
+    }
+    // If the RootGlideModule class is not annotated, then there are no classes to exclude.
+    if (excludedModuleAnnotationValue == null) {
+      return Collections.emptySet();
+    }
+    List values = (List) excludedModuleAnnotationValue.getValue();
+    Set<String> result = new HashSet<>(values.size());
+    for (Object value : values) {
+      Attribute.Class clazz = (Attribute.Class) value;
+      result.add(clazz.getValue().toString());
+    }
+    return result;
+  }
+}
diff --git a/annotation/gradle.properties b/annotation/gradle.properties
new file mode 100644
index 000000000..32a1b8cd5
--- /dev/null
+++ b/annotation/gradle.properties
@@ -0,0 +1,10 @@
+POM_NAME=Glide Annotations
+POM_ARTIFACT_ID=annotations
+POM_PACKAGING=jar
+
+VERSION_NAME=1.0.0-SNAPSHOT
+VERSION_MAJOR=1
+VERSION_MINOR=0
+VERSION_PATCH=0
+
+POM_DESCRIPTION=A set of annotations for configuring Glide.
\ No newline at end of file
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java b/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java
new file mode 100644
index 000000000..21e9d3049
--- /dev/null
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/Excludes.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies a set of GlideModule and/or ChildGlideModule classes that should be excluded
+ * from an application.
+ *
+ * <p>Used only on RootGlideModules. Adding this annotation to other classes will have no affect.
+ *
+ * <p>Cannot be used to exclude RootGlideModules (there must be at most one per Application anyway).
+ */
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Excludes {
+  Class[] value();
+}
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
new file mode 100644
index 000000000..06cde1819
--- /dev/null
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
@@ -0,0 +1,16 @@
+package com.bumptech.glide.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Identifies RootGlideModules and ChildeGlideModules for Glide's annotation processor to merge at
+ * compile time.
+ *
+ * <p>Replaces <meta-data /> tags in AndroidManifest.xml.
+ */
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.SOURCE)
+public @interface GlideModule { }
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/compiler/ModuleIndex.java b/annotation/src/main/java/com/bumptech/glide/annotation/compiler/ModuleIndex.java
new file mode 100644
index 000000000..8a6d68fc6
--- /dev/null
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/compiler/ModuleIndex.java
@@ -0,0 +1,19 @@
+package com.bumptech.glide.annotation.compiler;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Used to retrieve ChildGlideModule classes in our annotation processor from libraries
+ * and applications.
+ *
+ * <p>Part of the internals of Glide's annotation processor and not for public use.
+ */
+@Target(ElementType.TYPE)
+// Needs to be parsed from class files in JAR.
+@Retention(RetentionPolicy.CLASS)
+@interface ModuleIndex {
+  String[] glideModules();
+}
diff --git a/build.gradle b/build.gradle
index c5ba1c44c..198072938 100644
--- a/build.gradle
+++ b/build.gradle
@@ -67,6 +67,11 @@ subprojects { project ->
             options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
         }
     }
+
+    // We generate a combined javadoc, no need to create javadocs for each library independently.
+    if (!project.name.equals('glide')) {
+        tasks.withType(Javadoc).all { enabled = false }
+    }
 }
 
 task wrapper(type: Wrapper) {
diff --git a/glide/build.gradle b/glide/build.gradle
index 698f9c7ed..657291780 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -1,69 +1,141 @@
 apply plugin: 'java'
 
-evaluationDependsOn(':third_party:gif_decoder')
-evaluationDependsOn(':third_party:disklrucache')
-evaluationDependsOn(':library')
+// The paths of Android projects that should be included in the jar and javadoc.
+static def getAndroidPathsForJar() {
+    [':third_party:gif_decoder', ':library']
+}
+
+// The paths of Java projects that should be included in the jar and javadoc.
+static def getJavaPathsForJar() {
+    [':third_party:disklrucache']
+}
+
+// The paths of Android projects that should be included only in Javadoc, not in the jar.
+static def getAndroidPathsForJavadoc() {
+    [
+            ':integration:okhttp',
+            ':integration:okhttp3',
+            ':integration:volley',
+            ':integration:gifencoder'
+    ]
+}
+
+// The paths of Java projects that should be included only in Javadoc, not in the jar.
+static def getJavaPathsForJavadoc() {
+    [':annotation', ':annotation:compiler']
+}
+
+(getAndroidPathsForJavadoc() + getAndroidPathsForJar() +
+        getJavaPathsForJar() + getJavaPathsForJavadoc()).forEach {
+    evaluationDependsOn(it)
+}
+
+def asProjects(paths) {
+    paths.collect { project(it) }
+}
 
 def getAndroidSdkDirectory() {
-  project(':library').android.sdkDirectory
+    project(':library').android.sdkDirectory
 }
 
 def getAndroidCompileSdkVersion() {
-  project(':library').android.compileSdkVersion
+    project(':library').android.compileSdkVersion
+}
+
+def getInternalAndroidProjectsForJar() {
+    asProjects(getAndroidPathsForJar())
+}
+
+def getInternalJavaProjectsForJar() {
+    asProjects(getJavaPathsForJar())
+}
+
+def getInternalAndroidProjectsForJavadoc() {
+    asProjects(getAndroidPathsForJavadoc())
 }
 
-def getInternalAndroidProjects() {
-    [':third_party:gif_decoder', ':library'].collect { project(it) }
+def getInternalJavaProjectsForJavadoc() {
+    asProjects(getJavaPathsForJavadoc())
 }
-def getInternalJavaProjects() {
-    [':third_party:disklrucache'].collect { project(it) }
+
+def getReleaseVariantAndroidProjectsForJar() {
+    getAndroidLibraryVariantsForJar('release')
 }
 
-def getAllInternalProjects() {
-    getInternalAndroidProjects() + getInternalJavaProjects()
+def getAndroidLibraryVariantsForJar(variantName) {
+    getAndroidLibraryVariants(getInternalAndroidProjectsForJar(), variantName)
 }
 
-def getReleaseVariantAndroidProjects() {
-    getAndroidLibraryVariants('release')
+def getAndroidLibraryVariantsForJavadoc(variantName) {
+    getAndroidLibraryVariants(getInternalAndroidProjectsForJavadoc(), variantName)
 }
 
-def getAndroidLibraryVariants(variantName) {
-    getInternalAndroidProjects().collect { project ->
+static def getAndroidLibraryVariants(projects, variantName) {
+    projects.collect { project ->
         project.android.libraryVariants.findAll { type ->
             type.buildType.name.equalsIgnoreCase(variantName)
         }
     }.sum()
 }
 
-def getSourceFilesForVariant(variantName) {
-    getAndroidLibraryVariants(variantName).collect { it.javaCompile.source } +
-            getInternalJavaProjects().collect { it.sourceSets.main.allJava }
+def getSourceFilesForVariantJar(variantName) {
+    getAndroidLibraryVariantsForJar(variantName).collect { it.javaCompile.source } +
+            getInternalJavaProjectsForJar().collect { it.sourceSets.main.allJava }
+}
+
+def getSourceFilesForVariantJavadoc(variantName) {
+    getAndroidLibraryVariantsForJavadoc(variantName).collect { it.javaCompile.source } +
+            getInternalJavaProjectsForJavadoc().collect { it.sourceSets.main.allJava }
 }
 
 def getAndroidJar() {
     "${getAndroidSdkDirectory()}/platforms/${getAndroidCompileSdkVersion()}/android.jar"
 }
 
+def getSupportJar() {
+    "${getAndroidSdkDirectory()}/extras/android/support/v4/android-support-v4.jar"
+}
+
 project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
 
-// Generate javadocs and sources containing batched documentation and sources for all internal projects.
+// Generate javadocs and sources containing batched documentation and sources for all internal
+// projects.
 ['release', 'debug'].each { variantName ->
 
     task("${variantName}SourceJar", type: Jar) {
-      from getSourceFilesForVariant(variantName)
+      from getSourceFilesForVariantJar(variantName)
     }
 
     def javadocTask = task("${variantName}Javadoc", type: Javadoc) {
-        source = getSourceFilesForVariant(variantName)
+        source = getSourceFilesForVariantJar(variantName)
+        source += getSourceFilesForVariantJavadoc(variantName)
 
-        classpath = files(getAndroidLibraryVariants(variantName).collect {
-            files(it.javaCompile.classpath.files, getAndroidJar())
+        classpath = files(getAndroidLibraryVariantsForJar(variantName).collect {
+            files(it.javaCompile.classpath.files, getAndroidJar(), getSupportJar())
+        })
+        classpath += files(getAndroidLibraryVariantsForJavadoc(variantName).collect {
+            files(it.javaCompile.classpath.files, getAndroidJar(), getSupportJar())
         })
-        classpath += getInternalJavaProjects().collect { files(it.configurations.compile) }.sum()
+        classpath += getInternalJavaProjectsForJavadoc().collect {
+            it.sourceSets.main.compileClasspath
+        }
+        classpath += getInternalJavaProjectsForJar().collect {
+            it.sourceSets.main.compileClasspath
+        }
+        // Finds dependencies of Android packages that would otherwise be ignored (Volley in
+        // particular)
+        classpath += getInternalAndroidProjectsForJavadoc().collect {
+            files("${it.projectDir}/build/intermediates/classes/release")
+        }
 
         options {
             links("http://docs.oracle.com/javase/7/docs/api/")
-            linksOffline("http://d.android.com/reference", "${getAndroidSdkDirectory()}/docs/reference")
+            links("https://square.github.io/okhttp/3.x/okhttp/")
+            links("https://square.github.io/okhttp/2.x/okhttp/")
+            // TODO: Ideally this would point to something hosted by Android.
+            links("http://afzaln.com/volley/")
+            linksOffline("http://d.android.com/reference",
+                    "${getAndroidSdkDirectory()}/docs/reference")
         }
 
         exclude '**/BuildConfig.java'
@@ -76,23 +148,30 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
     clean.dependsOn(cleanJavadocTask)
 
     def javadocJarTask = task("${variantName}JavadocJar", type: Jar) {
-      from javadocTask.destinationDir
+        from javadocTask.destinationDir
     } as Task
     javadocJarTask.dependsOn(javadocTask)
 }
 
 jar {
     from files(
-            getReleaseVariantAndroidProjects().collect { variant ->
+            getReleaseVariantAndroidProjectsForJar().collect { variant ->
                 variant.javaCompile.destinationDir
             }
     )
     exclude "**/R.class"
     exclude "**/BuildConfig.class"
-    from files(getInternalJavaProjects().collect { it.sourceSets.main.output })
+    from files(getInternalJavaProjectsForJar().collect { it.sourceSets.main.output })
+}
+
+def getAllInternalProjectBuildDeps() {
+    getInternalAndroidProjectsForJar() + getInternalJavaProjectsForJar() +
+            getInternalJavaProjectsForJavadoc() + getInternalAndroidProjectsForJavadoc()
 }
 
-getAllInternalProjects().each { project ->
+getAllInternalProjectBuildDeps().each { project ->
+    releaseJavadoc.dependsOn(project.tasks.assemble)
+    debugJavadoc.dependsOn(project.tasks.assemble)
     jar.dependsOn(project.tasks.build)
 }
 
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index 2a48a7443..c01164e2e 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -2,6 +2,7 @@ apply plugin: 'com.android.library'
 
 dependencies {
     compile project(':library')
+    annotationProcessor project(':annotation:compiler')
 
     compile "com.squareup.okhttp:okhttp:2.7.1"
 }
diff --git a/integration/okhttp/src/main/AndroidManifest.xml b/integration/okhttp/src/main/AndroidManifest.xml
index c11d7167d..738e5c900 100644
--- a/integration/okhttp/src/main/AndroidManifest.xml
+++ b/integration/okhttp/src/main/AndroidManifest.xml
@@ -1,9 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
           package="com.bumptech.glide.integration.okhttp">
 
-    <application>
-        <meta-data
-            android:name="com.bumptech.glide.integration.okhttp.OkHttpGlideModule"
-            android:value="GlideModule"/>
-    </application>
+    <application />
 </manifest>
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpChildGlideModule.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpChildGlideModule.java
new file mode 100644
index 000000000..1eabe09e5
--- /dev/null
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpChildGlideModule.java
@@ -0,0 +1,23 @@
+package com.bumptech.glide.integration.okhttp;
+
+import android.content.Context;
+import com.bumptech.glide.Registry;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.module.ChildGlideModule;
+import java.io.InputStream;
+
+/**
+ * Registers OkHttp related classes via Glide's annotation processor.
+ *
+ * <p>For Applications that depend on this library and include an
+ * {@link com.bumptech.glide.module.RootGlideModule} and Glide's annotation processor, this class
+ * will be automatically included.
+ */
+@GlideModule
+public class OkHttpChildGlideModule extends ChildGlideModule {
+  @Override
+  public void registerComponents(Context context, Registry registry) {
+    registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
+  }
+}
diff --git a/integration/okhttp3/build.gradle b/integration/okhttp3/build.gradle
index 6ef7599ff..59a222795 100644
--- a/integration/okhttp3/build.gradle
+++ b/integration/okhttp3/build.gradle
@@ -2,6 +2,7 @@ apply plugin: 'com.android.library'
 
 dependencies {
     compile project(':library')
+    annotationProcessor project(':annotation:compiler')
 
     compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
 }
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpChildGlideModule.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpChildGlideModule.java
new file mode 100644
index 000000000..41f6216c5
--- /dev/null
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpChildGlideModule.java
@@ -0,0 +1,23 @@
+package com.bumptech.glide.integration.okhttp3;
+
+import android.content.Context;
+import com.bumptech.glide.Registry;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.module.ChildGlideModule;
+import java.io.InputStream;
+
+/**
+ * Registers OkHttp related classes via Glide's annotation processor.
+ *
+ * <p>For Applications that depend on this library and include an
+ * {@link com.bumptech.glide.module.RootGlideModule} and Glide's annotation processor, this class
+ * will be automatically included.
+ */
+@GlideModule
+public final class OkHttpChildGlideModule extends ChildGlideModule {
+  @Override
+  public void registerComponents(Context context, Registry registry) {
+    registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
+  }
+}
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
index 4179455e3..cede13791 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
@@ -15,7 +15,11 @@
  * <p> If you're using gradle, you can include this module simply by depending on the aar, the
  * module will be merged in by manifest merger. For other build systems or for more more
  * information, see {@link com.bumptech.glide.module.GlideModule}. </p>
+ *
+ * @deprecated Replaced by {@link OkHttpChildGlideModule} for Applications that use Glide's
+ * annotations.
  */
+@Deprecated
 public class OkHttpGlideModule implements GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
diff --git a/integration/volley/build.gradle b/integration/volley/build.gradle
index caebd67f9..8f04a9b1a 100644
--- a/integration/volley/build.gradle
+++ b/integration/volley/build.gradle
@@ -3,6 +3,7 @@ apply plugin: 'com.android.library'
 dependencies {
     compile project(':library')
     compile "com.android.volley:volley:${VOLLEY_VERSION}"
+    annotationProcessor project(':annotation:compiler')
 
     testCompile project(":testutil")
     testCompile "com.google.truth:truth:${TRUTH_VERSION}"
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyChildGlideModule.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyChildGlideModule.java
new file mode 100644
index 000000000..996f33ddf
--- /dev/null
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyChildGlideModule.java
@@ -0,0 +1,25 @@
+package com.bumptech.glide.integration.volley;
+
+import android.content.Context;
+import com.bumptech.glide.Registry;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.load.model.GlideUrl;
+import com.bumptech.glide.module.ChildGlideModule;
+import java.io.InputStream;
+
+/**
+ * A {@link com.bumptech.glide.module.GlideModule} implementation to replace Glide's default
+ * {@link java.net.HttpURLConnection} based {@link com.bumptech.glide.load.model.ModelLoader} with a
+ * Volley based {@link com.bumptech.glide.load.model.ModelLoader}.
+ *
+ * <p>For Applications that depend on this library and include an
+ * {@link com.bumptech.glide.module.RootGlideModule} and Glide's annotation processor, this class
+ * will be automatically included.
+ */
+@GlideModule
+public class VolleyChildGlideModule extends ChildGlideModule {
+  @Override
+  public void registerComponents(Context context, Registry registry) {
+    registry.replace(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(context));
+  }
+}
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
index 2a86867c9..9347fecf4 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
@@ -14,8 +14,11 @@
  *
  * <p> If you're using gradle, you can include this module simply by depending on the aar, the
  * module will be merged in by manifest merger. For other build systems or for more more
- * information, see {@link com.bumptech.glide.module.GlideModule}. </p>
+ * information, see {@link com.bumptech.glide.module.GlideModule}.
+ *
+ * @deprecated Replaced with {@link VolleyChildGlideModule}.
  */
+@Deprecated
 public class VolleyGlideModule implements GlideModule {
   @Override
   public void applyOptions(Context context, GlideBuilder builder) {
diff --git a/library/build.gradle b/library/build.gradle
index e26156b70..bcef2c2bb 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -18,6 +18,7 @@ coveralls {
 dependencies {
     compile project(':third_party:gif_decoder')
     compile project(':third_party:disklrucache')
+    compile project(':annotation')
     compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
 
     testCompile project(':testutil')
@@ -140,8 +141,9 @@ afterEvaluate {
 apply from: "${rootProject.projectDir}/scripts/upload.gradle"
 // exclude <dependency> tag for android support-v4 library from :glide's pom
 // this will ensure that this warning will not prevent the build from completing:
-// Module 'com.github.bumptech.glide:glide:4.0.0-SNAPSHOT' depends on one or more Android Libraries but is a jar
-// most users will need to override support-v4 version anyway if a newer version is available
+// Module 'com.github.bumptech.glide:glide:4.0.0-SNAPSHOT' depends on one or more Android Libraries
+// but is a jar. Most users will need to override support-v4 version anyway if a newer version is
+// available
 // TODO make support-v4 a <scope>runtime</scope> dependency in pom.xml
 afterEvaluate {
     uploadArchives.repositories.mavenDeployer.pom.whenConfigured { p ->
diff --git a/library/proguard-rules.txt b/library/proguard-rules.txt
index 0432be6d2..003e648b3 100644
--- a/library/proguard-rules.txt
+++ b/library/proguard-rules.txt
@@ -1,4 +1,5 @@
 -keep public class * implements com.bumptech.glide.module.GlideModule
+-keep public class * extends com.bumptech.glide.GeneratedRootGlideModule
 -keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
     **[] $VALUES;
     public *;
diff --git a/library/src/main/java/com/bumptech/glide/GeneratedRootGlideModule.java b/library/src/main/java/com/bumptech/glide/GeneratedRootGlideModule.java
new file mode 100644
index 000000000..278dbc445
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/GeneratedRootGlideModule.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide;
+
+import android.support.annotation.NonNull;
+import com.bumptech.glide.module.RootGlideModule;
+import java.util.Set;
+
+/**
+ * A temporary interface to allow {@link RootGlideModule}s to exclude
+ * {@link com.bumptech.glide.annotation.GlideModule}s to ease the migration from
+ * {@link com.bumptech.glide.annotation.GlideModule}s to Glide's annotation processing system.
+ */
+@Deprecated
+abstract class GeneratedRootGlideModule extends RootGlideModule {
+  /**
+   * This method can be removed when manifest parsing is no longer supported.
+   */
+  @Deprecated
+  @NonNull
+  abstract Set<Class<?>> getExcludedModuleClasses();
+}
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index a68bfe6c2..aaeeec743 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -75,7 +75,10 @@
 import java.net.URL;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 /**
  * A singleton to present a simple static interface for building requests with
@@ -145,17 +148,7 @@ public static Glide get(Context context) {
     if (glide == null) {
       synchronized (Glide.class) {
         if (glide == null) {
-          Context applicationContext = context.getApplicationContext();
-          List<GlideModule> modules = new ManifestParser(applicationContext).parse();
-
-          GlideBuilder builder = new GlideBuilder(applicationContext);
-          for (GlideModule module : modules) {
-            module.applyOptions(applicationContext, builder);
-          }
-          glide = builder.createGlide();
-          for (GlideModule module : modules) {
-            module.registerComponents(applicationContext, glide.registry);
-          }
+          initGlide(context);
         }
       }
     }
@@ -163,6 +156,82 @@ public static Glide get(Context context) {
     return glide;
   }
 
+  @SuppressWarnings("deprecation")
+  private static void initGlide(Context context) {
+    Context applicationContext = context.getApplicationContext();
+
+    GeneratedRootGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
+    List<GlideModule> manifestModules = Collections.emptyList();
+    if (annotationGeneratedModule == null || annotationGeneratedModule.isManifestParsingEnabled()) {
+      manifestModules = new ManifestParser(applicationContext).parse();
+    }
+
+    if (annotationGeneratedModule != null
+        && !annotationGeneratedModule.getExcludedModuleClasses().isEmpty()) {
+      Set<Class<?>> excludedModuleClasses =
+          annotationGeneratedModule.getExcludedModuleClasses();
+      for (Iterator<GlideModule> iterator = manifestModules.iterator(); iterator.hasNext();) {
+        GlideModule current = iterator.next();
+        if (!excludedModuleClasses.contains(current.getClass())) {
+          continue;
+        }
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "RootGlideModule excludes manifest GlideModule: " + current);
+        }
+        iterator.remove();
+      }
+    }
+
+    if (Log.isLoggable(TAG, Log.DEBUG)) {
+      for (GlideModule glideModule : manifestModules) {
+        Log.d(TAG, "Discovered GlideModule from manifest: " + glideModule.getClass());
+      }
+    }
+
+    GlideBuilder builder = new GlideBuilder();
+    for (GlideModule module : manifestModules) {
+      module.applyOptions(applicationContext, builder);
+    }
+    if (annotationGeneratedModule != null) {
+      annotationGeneratedModule.applyOptions(applicationContext, builder);
+    }
+    glide = builder.createGlide(applicationContext);
+    for (GlideModule module : manifestModules) {
+      module.registerComponents(applicationContext, glide.registry);
+    }
+    if (annotationGeneratedModule != null) {
+      annotationGeneratedModule.registerComponents(applicationContext, glide.registry);
+    }
+  }
+
+  @Nullable
+  @SuppressWarnings({"unchecked", "deprecation"})
+  private static GeneratedRootGlideModule getAnnotationGeneratedGlideModules() {
+    GeneratedRootGlideModule result = null;
+    try {
+      Class<GeneratedRootGlideModule> clazz =
+          (Class<GeneratedRootGlideModule>)
+              Class.forName("com.bumptech.glide.GeneratedRootGlideModuleImpl");
+      result = clazz.newInstance();
+    } catch (ClassNotFoundException e) {
+      if (Log.isLoggable(TAG, Log.WARN)) {
+        Log.w(TAG, "Failed to find GeneratedRootGlideModule. You should include an"
+            + " annotationProcessor compile dependency on com.github.bumptech.glide:glide:compiler"
+            + " in your application and a @GlideModule annotated RootGlideModule implementation or"
+            + " ChildGlideModules will be silently ignored");
+      }
+    } catch (InstantiationException e) {
+      throw new IllegalStateException("GeneratedRootGlideModuleImpl is implemented incorrectly."
+          + " If you've manually implemented this class, remove your implementation. The Annotation"
+          + " processor will generate a correct implementation.", e);
+    } catch (IllegalAccessException e) {
+      throw new IllegalStateException("GeneratedRootGlideModuleImpl is implemented incorrectly."
+          + " If you've manually implemented this class, remove your implementation. The Annotation"
+          + " processor will generate a correct implementation.", e);
+    }
+    return result;
+  }
+
   @VisibleForTesting
   public static void tearDown() {
     glide = null;
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 2ebaf8b0f..a572cb323 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -24,8 +24,6 @@
  * A builder class for setting default structural classes for Glide to use.
  */
 public final class GlideBuilder {
-  private final Context context;
-
   private Engine engine;
   private BitmapPool bitmapPool;
   private ArrayPool arrayPool;
@@ -38,8 +36,8 @@
   private int logLevel = Log.INFO;
   private RequestOptions defaultRequestOptions = new RequestOptions();
 
-  GlideBuilder(Context context) {
-    this.context = context.getApplicationContext();
+  GlideBuilder() {
+    // Package private visibility.
   }
 
   /**
@@ -260,7 +258,7 @@ GlideBuilder setEngine(Engine engine) {
     return this;
   }
 
-  Glide createGlide() {
+  Glide createGlide(Context context) {
     if (sourceExecutor == null) {
       sourceExecutor = GlideExecutor.newSourceExecutor();
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
index a57b64541..323f02e17 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
@@ -48,7 +48,8 @@ public int getOrientation(Uri uri) {
     try {
       is = contentResolver.openInputStream(uri);
       return ImageHeaderParserUtils.getOrientation(parsers, is, byteArrayPool);
-    } catch (IOException e) {
+      // openInputStream can throw NPEs.
+    } catch (IOException | NullPointerException e) {
       if (Log.isLoggable(TAG, Log.DEBUG)) {
         Log.d(TAG, "Failed to open uri: " + uri, e);
       }
@@ -88,7 +89,13 @@ public InputStream open(Uri uri) throws FileNotFoundException {
       }
     }
     if (thumbnailUri != null) {
-      inputStream = contentResolver.openInputStream(thumbnailUri);
+      try {
+        inputStream = contentResolver.openInputStream(thumbnailUri);
+        // openInputStream can throw NPEs.
+      } catch (NullPointerException e) {
+        throw (FileNotFoundException)
+          new FileNotFoundException("NPE opening uri: " + thumbnailUri).initCause(e);
+      }
     }
     return inputStream;
   }
diff --git a/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java b/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java
new file mode 100644
index 000000000..923d364f7
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/module/AppliesOptions.java
@@ -0,0 +1,20 @@
+package com.bumptech.glide.module;
+
+import android.content.Context;
+import com.bumptech.glide.GlideBuilder;
+
+/**
+ * An internal interface, to be removed when {@link GlideModule}s are removed.
+ */
+interface AppliesOptions {
+  /**
+   * Lazily apply options to a {@link com.bumptech.glide.GlideBuilder} immediately before the Glide
+   * singleton is created.
+   *
+   * <p> This method will be called once and only once per implementation. </p>
+   *
+   * @param context An Application {@link android.content.Context}.
+   * @param builder The {@link com.bumptech.glide.GlideBuilder} that will be used to create Glide.
+   */
+  void applyOptions(Context context, GlideBuilder builder);
+}
diff --git a/library/src/main/java/com/bumptech/glide/module/ChildGlideModule.java b/library/src/main/java/com/bumptech/glide/module/ChildGlideModule.java
new file mode 100644
index 000000000..e4bc390b3
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/module/ChildGlideModule.java
@@ -0,0 +1,21 @@
+package com.bumptech.glide.module;
+
+import android.content.Context;
+import com.bumptech.glide.Registry;
+
+/**
+ * Registers a set of components to use when initializing Glide within an app when
+ * Glide's annotation processor is used.
+ *
+ * <p>Any number of ChildGlideModules can be contained within any library or application.
+ *
+ * <p>ChildGlideModules are called in no defined order. If ChildGlideModules within an application
+ * conflict, {@link RootGlideModule}s can use the {@link com.bumptech.glide.annotation.Excludes}
+ * annotation to selectively remove one or more of the conflicting modules.
+ */
+public abstract class ChildGlideModule implements RegistersComponents {
+  @Override
+  public void registerComponents(Context context, Registry registry) {
+    // Default empty impl.
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/module/GlideModule.java b/library/src/main/java/com/bumptech/glide/module/GlideModule.java
index d587b74c1..23b1ea6af 100644
--- a/library/src/main/java/com/bumptech/glide/module/GlideModule.java
+++ b/library/src/main/java/com/bumptech/glide/module/GlideModule.java
@@ -1,7 +1,5 @@
 package com.bumptech.glide.module;
 
-import android.content.Context;
-import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 
 /**
@@ -52,28 +50,9 @@
  * applying conflicting settings in different modules. If an application depends on libraries that
  * have conflicting modules, the application should consider avoiding the library modules and
  * instead providing their required dependencies in a single application module. </p>
+ *
+ * @deprecated Libraries should use {@link ChildGlideModule} and Applications should use
+ * {@link RootGlideModule}.
  */
-public interface GlideModule {
-
-  /**
-   * Lazily apply options to a {@link com.bumptech.glide.GlideBuilder} immediately before the Glide
-   * singleton is created.
-   *
-   * <p> This method will be called once and only once per implementation. </p>
-   *
-   * @param context An Application {@link android.content.Context}.
-   * @param builder The {@link com.bumptech.glide.GlideBuilder} that will be used to create Glide.
-   */
-  void applyOptions(Context context, GlideBuilder builder);
-
-  /**
-   * Lazily register components immediately after the Glide singleton is created but before any
-   * requests can be started.
-   *
-   * <p> This method will be called once and only once per implementation. </p>
-   *
-   * @param context  An Application {@link android.content.Context}.
-   * @param registry An {@link com.bumptech.glide.Registry} to use to register components.
-   */
-  void registerComponents(Context context, Registry registry);
-}
+@Deprecated
+public interface GlideModule extends RegistersComponents, AppliesOptions { }
diff --git a/library/src/main/java/com/bumptech/glide/module/ManifestParser.java b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java
index b8eee084f..9b0eb69a8 100644
--- a/library/src/main/java/com/bumptech/glide/module/ManifestParser.java
+++ b/library/src/main/java/com/bumptech/glide/module/ManifestParser.java
@@ -20,6 +20,7 @@ public ManifestParser(Context context) {
     this.context = context;
   }
 
+  @SuppressWarnings("deprecation")
   public List<GlideModule> parse() {
     if (Log.isLoggable(TAG, Log.DEBUG)) {
       Log.d(TAG, "Loading Glide modules");
@@ -29,8 +30,14 @@ public ManifestParser(Context context) {
       ApplicationInfo appInfo = context.getPackageManager()
           .getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
       if (appInfo.metaData == null) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "Got null app info metadata");
+        }
         return modules;
       }
+      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        Log.v(TAG, "Got app info metadata: " + appInfo.metaData);
+      }
       for (String key : appInfo.metaData.keySet()) {
         if (GLIDE_MODULE_VALUE.equals(appInfo.metaData.get(key))) {
           modules.add(parseModule(key));
@@ -49,6 +56,7 @@ public ManifestParser(Context context) {
     return modules;
   }
 
+  @SuppressWarnings("deprecation")
   private static GlideModule parseModule(String className) {
     Class<?> clazz;
     try {
diff --git a/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
new file mode 100644
index 000000000..1c6d8c9b8
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
@@ -0,0 +1,21 @@
+package com.bumptech.glide.module;
+
+import android.content.Context;
+import com.bumptech.glide.Registry;
+
+/**
+ * An internal interface, to be removed when {@link GlideModule}s are removed.
+ */
+interface RegistersComponents {
+
+  /**
+   * Lazily register components immediately after the Glide singleton is created but before any
+   * requests can be started.
+   *
+   * <p> This method will be called once and only once per implementation. </p>
+   *
+   * @param context  An Application {@link android.content.Context}.
+   * @param registry An {@link com.bumptech.glide.Registry} to use to register components.
+   */
+  void registerComponents(Context context, Registry registry);
+}
diff --git a/library/src/main/java/com/bumptech/glide/module/RootGlideModule.java b/library/src/main/java/com/bumptech/glide/module/RootGlideModule.java
new file mode 100644
index 000000000..d59cc72d7
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/module/RootGlideModule.java
@@ -0,0 +1,40 @@
+package com.bumptech.glide.module;
+
+import android.content.Context;
+import com.bumptech.glide.GlideBuilder;
+
+/**
+ * Defines a set of dependencies and options to use when initializing Glide within an application.
+ *
+ * <p>There can be at most one RootGlideModule in an application. Only Applications can include a
+ * RootGlideModule. Libraries must use {@link ChildGlideModule}.
+ *
+ * <p>Classes that extend RootGlideModule must be annotated with
+ * {@link com.bumptech.glide.annotation.GlideModule} to be processed correctly.
+ *
+ * <p>Classes that extend RootGlideModule can optionally be annotated with
+ * {@link com.bumptech.glide.annotation.Excludes} to optionally exclude one or more
+ * {@link ChildGlideModule} and/or {@link GlideModule} classes.
+ *
+ * <p>Once an application has migrated itself and all libraries it depends on to use Glide's
+ * annotation processor, RootGlideModule implementations should override
+ * {@link #isManifestParsingEnabled()} and return {@code false}.
+ */
+public abstract class RootGlideModule extends ChildGlideModule implements AppliesOptions {
+  /**
+   * Returns {@code true} if Glide should check the AndroidManifest for {@link GlideModule}s.
+   *
+   * <p>Implementations should return {@code false} after they and their dependencies have migrated
+   * to Glide's annotation processor.
+   *
+   * <p>Returns {@code true} by default.
+   */
+  public boolean isManifestParsingEnabled() {
+    return true;
+  }
+
+  @Override
+  public void applyOptions(Context context, GlideBuilder builder) {
+    // Default empty impl.
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index 5292c24ab..3280c9249 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -81,17 +81,15 @@ public RequestFutureTarget(Handler mainHandler, int width, int height) {
 
   @Override
   public synchronized boolean cancel(boolean mayInterruptIfRunning) {
-    if (isCancelled) {
-      return true;
+    if (isDone()) {
+      return false;
     }
-
-    final boolean result = !isDone();
-    if (result) {
-      isCancelled = true;
-      waiter.notifyAll(this);
+    isCancelled = true;
+    waiter.notifyAll(this);
+    if (mayInterruptIfRunning) {
+      clearOnMainThread();
     }
-    clearOnMainThread();
-    return result;
+    return true;
   }
 
   @Override
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index 22e9d4beb..8d76173a2 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -89,7 +89,7 @@
     GlideTest.ShadowFileDescriptorContentResolver.class,
     GlideTest.ShadowMediaMetadataRetriever.class, GlideShadowLooper.class,
     GlideTest.MutableShadowBitmap.class })
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked", "deprecation"})
 public class GlideTest {
   @SuppressWarnings("rawtypes")
   private Target target = null;
@@ -100,8 +100,7 @@
   public void setUp() throws Exception {
     Glide.tearDown();
 
-    RobolectricPackageManager pm =
-        (RobolectricPackageManager) RuntimeEnvironment.application.getPackageManager();
+    RobolectricPackageManager pm = RuntimeEnvironment.getRobolectricPackageManager();
     ApplicationInfo info =
         pm.getApplicationInfo(RuntimeEnvironment.application.getPackageName(), 0);
     info.metaData = new Bundle();
@@ -141,8 +140,8 @@ public void testCanSetMemoryCategory() {
 
     MemoryCategory memoryCategory = MemoryCategory.NORMAL;
     Glide glide =
-        new GlideBuilder(getContext()).setMemoryCache(memoryCache).setBitmapPool(bitmapPool)
-            .createGlide();
+        new GlideBuilder().setMemoryCache(memoryCache).setBitmapPool(bitmapPool)
+            .createGlide(getContext());
     glide.setMemoryCategory(memoryCategory);
 
     verify(memoryCache).setSizeMultiplier(eq(memoryCategory.getMultiplier()));
@@ -155,8 +154,8 @@ public void testClearMemory() {
     MemoryCache memoryCache = mock(MemoryCache.class);
 
     Glide glide =
-        new GlideBuilder(getContext()).setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
-            .createGlide();
+        new GlideBuilder().setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
+            .createGlide(getContext());
 
     glide.clearMemory();
 
@@ -170,8 +169,8 @@ public void testTrimMemory() {
     MemoryCache memoryCache = mock(MemoryCache.class);
 
     Glide glide =
-        new GlideBuilder(getContext()).setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
-            .createGlide();
+        new GlideBuilder().setBitmapPool(bitmapPool).setMemoryCache(memoryCache)
+            .createGlide(getContext());
 
     final int level = 123;
 
diff --git a/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java b/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
index 3f6eed8d0..3c7648274 100644
--- a/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
+++ b/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
@@ -22,6 +22,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE, sdk = 18)
+@SuppressWarnings("deprecation")
 public class ManifestParserTest {
   private static final String MODULE_VALUE = "GlideModule";
 
diff --git a/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java b/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
index 792a81c06..cc3c11cd0 100644
--- a/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/RequestFutureTargetTest.java
@@ -76,17 +76,17 @@ public void testReturnsTrueFromCancelIfNotYetDone() {
   }
 
   @Test
-  public void testClearsRequestOnMainThreadIfNotYetDoneOnCancel() {
+  public void cancel_withMayInterruptIfRunningTrueAndNotFinishedRequest_clearsFutureOnMainThread() {
     future.cancel(true);
 
     verify(handler).post(eq(future));
   }
 
   @Test
-  public void testClearsOnMainThreadWhenClearCalled() {
+  public void cancel_withInterruptFalseAndNotFinishedRequest_doesNotclearFutureOnMainThread() {
     future.cancel(false);
 
-    verify(handler).post(eq(future));
+    verify(handler, never()).post(eq(future));
   }
 
   @Test
diff --git a/samples/flickr/build.gradle b/samples/flickr/build.gradle
index 3be1ccab8..8604407c7 100644
--- a/samples/flickr/build.gradle
+++ b/samples/flickr/build.gradle
@@ -5,6 +5,8 @@ dependencies {
     compile(project(':integration:recyclerview')) {
         transitive = false
     }
+    annotationProcessor project(':annotation:compiler')
+
     compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
     compile "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
     compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
diff --git a/samples/flickr/src/main/AndroidManifest.xml b/samples/flickr/src/main/AndroidManifest.xml
index 0068f2ebf..9be7824f6 100644
--- a/samples/flickr/src/main/AndroidManifest.xml
+++ b/samples/flickr/src/main/AndroidManifest.xml
@@ -24,10 +24,5 @@
         </activity>
 
         <activity android:name=".FullscreenActivity"/>
-
-        <meta-data
-            android:name="com.bumptech.glide.samples.flickr.FlickrGlideModule"
-            android:value="GlideModule"/>
     </application>
-
 </manifest>
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
index f3e0558ec..9e6b0fdf7 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
@@ -1,23 +1,25 @@
 package com.bumptech.glide.samples.flickr;
 
 import android.content.Context;
-import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
-import com.bumptech.glide.module.GlideModule;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.RootGlideModule;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import java.io.InputStream;
 
 /**
- * {@link com.bumptech.glide.module.GlideModule} for the Flickr sample app.
+ * Register {@link FlickrModelLoader} for the Flickr sample app.
  */
-public class FlickrGlideModule implements GlideModule {
+@GlideModule
+public class FlickrGlideModule extends RootGlideModule {
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
-    // Do nothing.
+  public void registerComponents(Context context, Registry registry) {
+    registry.append(Photo.class, InputStream.class, new FlickrModelLoader.Factory());
   }
 
+  // Disable manifest parsing to avoid adding similar modules twice.
   @Override
-  public void registerComponents(Context context, Registry registry) {
-    registry.append(Photo.class, InputStream.class, new FlickrModelLoader.Factory());
+  public boolean isManifestParsingEnabled() {
+    return false;
   }
 }
diff --git a/samples/gallery/build.gradle b/samples/gallery/build.gradle
index 481e13026..9f1cce8bc 100644
--- a/samples/gallery/build.gradle
+++ b/samples/gallery/build.gradle
@@ -7,6 +7,7 @@ dependencies {
     }
     compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
     compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
+    annotationProcessor project(':annotation:compiler')
 }
 
 android {
diff --git a/samples/giphy/build.gradle b/samples/giphy/build.gradle
index fc5b166fc..d9b74f159 100644
--- a/samples/giphy/build.gradle
+++ b/samples/giphy/build.gradle
@@ -5,8 +5,9 @@ dependencies {
     compile(project(':integration:recyclerview')) {
         transitive = false
     }
-    compile 'com.google.code.gson:gson:2.3'
+    compile 'com.google.code.gson:gson:2.4'
     compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
+    annotationProcessor project(':annotation:compiler')
 }
 
 android {
diff --git a/samples/giphy/src/main/AndroidManifest.xml b/samples/giphy/src/main/AndroidManifest.xml
index 509f10a58..8d3ac29ac 100644
--- a/samples/giphy/src/main/AndroidManifest.xml
+++ b/samples/giphy/src/main/AndroidManifest.xml
@@ -20,10 +20,5 @@
             </intent-filter>
         </activity>
         <activity android:name=".FullscreenActivity"/>
-
-        <meta-data
-            android:name="com.bumptech.glide.samples.giphy.GiphyGlideModule"
-            android:value="GlideModule"/>
     </application>
-
 </manifest>
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java
index a8c1152d7..fe481922a 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java
@@ -1,22 +1,24 @@
 package com.bumptech.glide.samples.giphy;
 
 import android.content.Context;
-import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
-import com.bumptech.glide.module.GlideModule;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.RootGlideModule;
 import java.io.InputStream;
 
 /**
- * {@link com.bumptech.glide.module.GlideModule} implementation for the Giphy sample app.
+ * Configures Glide for the Giphy sample app.
  */
-public class GiphyGlideModule implements GlideModule {
+@GlideModule
+public class GiphyGlideModule extends RootGlideModule {
   @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
-    // Do nothing.
+  public void registerComponents(Context context, Registry registry) {
+    registry.append(Api.GifResult.class, InputStream.class, new GiphyModelLoader.Factory());
   }
 
+  // Disable manifest parsing to avoid adding similar modules twice.
   @Override
-  public void registerComponents(Context context, Registry registry) {
-    registry.append(Api.GifResult.class, InputStream.class, new GiphyModelLoader.Factory());
+  public boolean isManifestParsingEnabled() {
+    return false;
   }
 }
diff --git a/samples/svg/build.gradle b/samples/svg/build.gradle
index 58a4e9f06..e244935ea 100644
--- a/samples/svg/build.gradle
+++ b/samples/svg/build.gradle
@@ -2,6 +2,7 @@ apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':library')
+    annotationProcessor project(':annotation:compiler')
     compile 'com.caverock:androidsvg:1.2.1'
 }
 
diff --git a/samples/svg/src/main/AndroidManifest.xml b/samples/svg/src/main/AndroidManifest.xml
index 9eb410d93..7328e723d 100644
--- a/samples/svg/src/main/AndroidManifest.xml
+++ b/samples/svg/src/main/AndroidManifest.xml
@@ -8,9 +8,6 @@
         android:allowBackup="true"
         android:icon="@android:drawable/sym_def_app_icon"
         android:label="@string/app_name">
-        <meta-data
-            android:name="com.bumptech.glide.samples.svg.SvgModule"
-            android:value="GlideModule"/>
         <activity
             android:name=".MainActivity"
             android:label="@string/app_name">
diff --git a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
index b3cfcbfe0..a6e1de6fe 100644
--- a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
@@ -2,26 +2,26 @@
 
 import android.content.Context;
 import android.graphics.drawable.PictureDrawable;
-
-import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
-import com.bumptech.glide.module.GlideModule;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.RootGlideModule;
 import com.caverock.androidsvg.SVG;
-
 import java.io.InputStream;
 
 /**
  * Module for the SVG sample app.
  */
-public class SvgModule implements GlideModule {
-  @Override
-  public void applyOptions(Context context, GlideBuilder builder) {
-    // Do nothing.
-  }
-
+@GlideModule
+public class SvgModule extends RootGlideModule {
   @Override
   public void registerComponents(Context context, Registry registry) {
     registry.register(SVG.class, PictureDrawable.class, new SvgDrawableTranscoder())
         .append(InputStream.class, SVG.class, new SvgDecoder());
   }
+
+  // Disable manifest parsing to avoid adding similar modules twice.
+  @Override
+  public boolean isManifestParsingEnabled() {
+    return false;
+  }
 }
diff --git a/scripts/update_javadocs.sh b/scripts/update_javadocs.sh
new file mode 100755
index 000000000..ffd61032f
--- /dev/null
+++ b/scripts/update_javadocs.sh
@@ -0,0 +1,54 @@
+#!/bin/bash
+set -e
+set -o pipefail
+
+TEMP_DIR="/tmp/tmp_glide_javadoc"
+JAVADOC_GH_PAGES_DIR="javadocs"
+
+if [[ -z "$1" ]]; 
+then
+  echo "You must supply a target version"
+  echo "Usage ./scripts/update_javadocs.sh <400>"
+  exit 1
+fi
+
+if [[ $(git status -uno --porcelain) ]];
+then 
+  echo "One or more changes, commit or revert first."
+  git status -uno --porcelain
+  exit 1
+fi
+
+if [ -e "$JAVADOC_GH_PAGES_DIR" ];
+then 
+  echo "javadocs directory exists locally, remove first."
+  exit 1
+fi
+
+if [[ $(git rev-list master...origin/master --count) -ne 0 ]]; 
+then 
+  echo "Origin and master are not up to date"
+  git rev-list master...origin/master --pretty
+  exit 1
+fi
+if [[ $(git rev-list gh-pages...origin/master --count) -ne 0 ]]; 
+then 
+  echo "Origin and gh-pages are not up to date"
+  git rev-list gh-pages...origin/gh-pages --pretty
+  exit 1
+fi
+
+git checkout master
+GIT_COMMIT_SHA="$(git rev-parse HEAD)"   
+./gradlew javadoc
+rm -rf $TEMP_DIR
+cp -r glide/build/docs/javadoc $TEMP_DIR
+git checkout gh-pages
+rm -rf "${JAVADOC_GH_PAGES_DIR}/${1}"
+cp -r $TEMP_DIR $JAVADOC_GH_PAGES_DIR/$1
+rm -rf $TEMP_DIR
+git add "${JAVADOC_GH_PAGES_DIR}/$1" 
+git commit -m "Update javadocs for version $1" -m "Generated from commit on master branch: ${GIT_COMMIT_SHA}"
+echo "Copied javadoc into ${JAVADOC_GH_PAGES_DIR}/${1} and committed"
+git log -1 --pretty=%B
+echo "Ready to push"
diff --git a/settings.gradle b/settings.gradle
index a936e3039..650b0e229 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,7 +1,9 @@
 exec {
-  commandLine "git", "submodule", "update", "--init", "--recursive"
+    commandLine "git", "submodule", "update", "--init", "--recursive"
 }
 include ':library'
+include ':annotation'
+include ':annotation:compiler'
 include ':glide'
 include ':third_party:gif_decoder'
 include ':third_party:disklrucache'
