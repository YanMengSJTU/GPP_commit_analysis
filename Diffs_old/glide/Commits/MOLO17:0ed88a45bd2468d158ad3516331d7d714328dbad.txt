diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
index 2b6a69b38..58674361a 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp3;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -13,6 +14,7 @@
 import java.io.InputStream;
 import java.util.Map;
 import okhttp3.Call;
+import okhttp3.Call.Factory;
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.ResponseBody;
@@ -31,11 +33,21 @@
   // accesses to variables may occur on different threads, but only one at a time.
   private volatile Call call;
 
+  private final int width;
+  private final int height;
+  @Nullable private final RequestBuilderInterceptor interceptor;
+
   // Public API.
   @SuppressWarnings("WeakerAccess")
-  public OkHttpStreamFetcher(Call.Factory client, GlideUrl url) {
+  public OkHttpStreamFetcher(
+      Factory client, GlideUrl url, int width, int height,
+      @Nullable RequestBuilderInterceptor interceptor
+  ) {
     this.client = client;
     this.url = url;
+    this.width = width;
+    this.height = height;
+    this.interceptor = interceptor;
   }
 
   @Override
@@ -46,6 +58,9 @@ public void loadData(@NonNull Priority priority,
       String key = headerEntry.getKey();
       requestBuilder.addHeader(key, headerEntry.getValue());
     }
+    if (interceptor != null) {
+      interceptor.interceptBuilder(requestBuilder, width, height);
+    }
     Request request = requestBuilder.build();
     this.callback = callback;
 
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java
index 8f8f9066c..28448e72c 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpUrlLoader.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp3;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.load.model.ModelLoader;
@@ -16,11 +17,13 @@
 public class OkHttpUrlLoader implements ModelLoader<GlideUrl, InputStream> {
 
   private final Call.Factory client;
+  @Nullable private final RequestBuilderInterceptor interceptor;
 
   // Public API.
   @SuppressWarnings("WeakerAccess")
-  public OkHttpUrlLoader(@NonNull Call.Factory client) {
+  public OkHttpUrlLoader(@NonNull Call.Factory client, @Nullable RequestBuilderInterceptor interceptor) {
     this.client = client;
+    this.interceptor = interceptor;
   }
 
   @Override
@@ -31,7 +34,7 @@ public boolean handles(@NonNull GlideUrl url) {
   @Override
   public LoadData<InputStream> buildLoadData(@NonNull GlideUrl model, int width, int height,
       @NonNull Options options) {
-    return new LoadData<>(model, new OkHttpStreamFetcher(client, model));
+    return new LoadData<>(model, new OkHttpStreamFetcher(client, model, width, height, interceptor));
   }
 
   /**
@@ -42,6 +45,7 @@ public boolean handles(@NonNull GlideUrl url) {
   public static class Factory implements ModelLoaderFactory<GlideUrl, InputStream> {
     private static volatile Call.Factory internalClient;
     private final Call.Factory client;
+    @Nullable private final RequestBuilderInterceptor interceptor;
 
     private static Call.Factory getInternalClient() {
       if (internalClient == null) {
@@ -58,7 +62,7 @@ public boolean handles(@NonNull GlideUrl url) {
      * Constructor for a new Factory that runs requests using a static singleton client.
      */
     public Factory() {
-      this(getInternalClient());
+      this(getInternalClient(), null);
     }
 
     /**
@@ -66,14 +70,15 @@ public Factory() {
      *
      * @param client this is typically an instance of {@code OkHttpClient}.
      */
-    public Factory(@NonNull Call.Factory client) {
+    public Factory(@NonNull Call.Factory client, @Nullable RequestBuilderInterceptor interceptor) {
       this.client = client;
+      this.interceptor = interceptor;
     }
 
     @NonNull
     @Override
     public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
-      return new OkHttpUrlLoader(client);
+      return new OkHttpUrlLoader(client, interceptor);
     }
 
     @Override
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/RequestBuilderInterceptor.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/RequestBuilderInterceptor.java
new file mode 100644
index 000000000..a7b745bf9
--- /dev/null
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/RequestBuilderInterceptor.java
@@ -0,0 +1,12 @@
+package com.bumptech.glide.integration.okhttp3;
+
+import android.support.annotation.NonNull;
+import okhttp3.Request;
+
+/**
+ * Created by Damiano Giusti on 2019-05-20.
+ */
+public interface RequestBuilderInterceptor {
+
+  @NonNull Request.Builder interceptBuilder(@NonNull Request.Builder builder, int width, int height);
+}
