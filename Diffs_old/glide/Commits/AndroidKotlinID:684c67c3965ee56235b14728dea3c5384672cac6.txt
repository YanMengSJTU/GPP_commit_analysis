diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index 9faf18dc8..cda0ec425 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -6,6 +6,7 @@
 
 <suppressions>
     <suppress files=".*[/\\]library[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
+    <suppress files=".*[/\\]library[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>
     <suppress files=".*RequestBuilder.java|ChildLoadProvider.java|TransitionOptions.java|BaseDecodeOptions.java|RequestOptions.java" checks="NoClone" />
 </suppressions>
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 7a3265ee9..ed88a042a 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 26b61d748..c583957d2 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -2,4 +2,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.2-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.2.1-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index b501d800a..5ac346e41 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -19,6 +19,11 @@ dependencies {
     testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
     testCompile "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
     testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
+    androidTestCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    androidTestCompile 'com.android.support.test:runner:0.5'
+    androidTestCompile 'com.android.support.test:rules:0.5'
+    androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}"
+    androidTestCompile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
 }
 
 android.testOptions.unitTests.all { Test testTask ->
@@ -37,10 +42,9 @@ android {
     defaultConfig {
         minSdkVersion MIN_SDK_VERSION as int
         targetSdkVersion TARGET_SDK_VERSION as int
-
         versionName VERSION_NAME as String
-
         consumerProguardFiles 'proguard-rules.txt'
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }
 
     buildTypes {
diff --git a/library/src/androidTest/java/com/bumptech/glide/test/TestNonBitmapResources.java b/library/src/androidTest/java/com/bumptech/glide/test/TestNonBitmapResources.java
new file mode 100644
index 000000000..8f8acd531
--- /dev/null
+++ b/library/src/androidTest/java/com/bumptech/glide/test/TestNonBitmapResources.java
@@ -0,0 +1,167 @@
+package com.bumptech.glide.test;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import com.bumptech.glide.Glide;
+import com.google.common.collect.ImmutableList;
+import java.util.concurrent.ExecutionException;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public class TestNonBitmapResources {
+
+  private Context context;
+
+  @Before
+  public void setUp() {
+    context = InstrumentationRegistry.getTargetContext();
+  }
+
+  @After
+  public void tearDown() {
+    Glide.tearDown();
+  }
+
+  @Test
+  public void load_withBitmapResourceId_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable drawable = Glide.with(context)
+        .load(android.R.drawable.star_big_off)
+        .submit()
+        .get();
+    assertThat(drawable).isNotNull();
+  }
+
+  @Test
+  public void load_withBitmapResourceId_asBitmap_producesNonNullBitmap()
+      throws ExecutionException, InterruptedException {
+    Bitmap bitmap = Glide.with(context)
+        .asBitmap()
+        .load(android.R.drawable.star_big_off)
+        .submit()
+        .get();
+    assertThat(bitmap).isNotNull();
+  }
+
+  @Test
+  public void load_withBitmapAliasResourceId_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable drawable = Glide.with(context)
+        .load(R.drawable.bitmap_alias)
+        .submit()
+        .get();
+    assertThat(drawable).isNotNull();
+  }
+
+  @Test
+  public void load_withShapeDrawableResourceId_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable drawable = Glide.with(context)
+        .load(R.drawable.shape_drawable)
+        .submit()
+        .get();
+    assertThat(drawable).isNotNull();
+  }
+
+  @Test
+  public void load_withStateListDrawableResourceId_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable drawable = Glide.with(context)
+        .load(R.drawable.state_list_drawable)
+        .submit()
+        .get();
+    assertThat(drawable).isNotNull();
+  }
+
+  @Test
+  public void load_withVectorDrawableResourceId_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable drawable = Glide.with(context)
+        .load(R.drawable.vector_drawable)
+        .submit()
+        .get();
+    assertThat(drawable).isNotNull();
+  }
+
+  @Test
+  public void load_withApplicationIconResourceIdUri_asDrawable_producesNonNullDrawable()
+      throws NameNotFoundException, ExecutionException, InterruptedException {
+    ImmutableList<String> packages = ImmutableList.of(
+        "com.google.android.apps.photos",
+        "com.google.android.apps.messaging"
+    );
+    PackageManager packageManager = context.getPackageManager();
+    for (String packageName : packages) {
+      PackageInfo packageInfo =
+          packageManager.getPackageInfo(packageName, /*flags=*/ 0);
+      int iconResourceId = packageInfo.applicationInfo.icon;
+      Uri uri = new Uri.Builder()
+          .scheme(ContentResolver.SCHEME_ANDROID_RESOURCE)
+          .authority(packageName)
+          .path(String.valueOf(iconResourceId))
+          .build();
+
+      Drawable drawable = Glide.with(context)
+          .load(uri)
+          .submit()
+          .get();
+      assertThat(drawable).isNotNull();
+    }
+  }
+
+  @Test
+  public void load_withNinePatchResourceId_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException {
+    Drawable drawable = Glide.with(context)
+        .load(R.drawable.googlelogo_color_120x44dp)
+        .submit()
+        .get();
+
+    assertThat(drawable).isNotNull();
+  }
+
+  @Test
+  public void load_withApplicationIconResourceNameUri_asDrawable_producesNonNullDrawable()
+      throws ExecutionException, InterruptedException, NameNotFoundException {
+     ImmutableList<String> packages = ImmutableList.of(
+        "com.google.android.apps.photos",
+        "com.google.android.apps.messaging"
+    );
+    PackageManager packageManager = context.getPackageManager();
+    for (String packageName : packages) {
+      PackageInfo packageInfo =
+          packageManager.getPackageInfo(packageName, /*flags=*/ 0);
+      int iconResourceId = packageInfo.applicationInfo.icon;
+
+      Context toUse = context.createPackageContext(packageName, /*flags=*/ 0);
+      Resources resources = toUse.getResources();
+      Uri uri = new Uri.Builder()
+          .scheme(ContentResolver.SCHEME_ANDROID_RESOURCE)
+          .authority(packageName)
+          .path(resources.getResourceTypeName(iconResourceId))
+          .path(resources.getResourceEntryName(iconResourceId))
+          .path(String.valueOf(iconResourceId))
+          .build();
+
+      Drawable drawable = Glide.with(context)
+          .load(uri)
+          .submit()
+          .get();
+      assertThat(drawable).isNotNull();
+    }
+  }
+}
diff --git a/library/src/androidTest/res/drawable/bitmap_alias.xml b/library/src/androidTest/res/drawable/bitmap_alias.xml
new file mode 100644
index 000000000..7dc0bb70a
--- /dev/null
+++ b/library/src/androidTest/res/drawable/bitmap_alias.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<bitmap xmlns:android="http://schemas.android.com/apk/res/android"
+  android:src="@android:drawable/star_big_off" />
diff --git a/library/src/androidTest/res/drawable/googlelogo_color_120x44dp.9.png b/library/src/androidTest/res/drawable/googlelogo_color_120x44dp.9.png
new file mode 100755
index 000000000..1ab50e6cf
Binary files /dev/null and b/library/src/androidTest/res/drawable/googlelogo_color_120x44dp.9.png differ
diff --git a/library/src/androidTest/res/drawable/shape_drawable.xml b/library/src/androidTest/res/drawable/shape_drawable.xml
new file mode 100644
index 000000000..3b19d1445
--- /dev/null
+++ b/library/src/androidTest/res/drawable/shape_drawable.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+  android:shape="rectangle">
+  <solid android:color="#ffabcdef"/>
+</shape>
diff --git a/library/src/androidTest/res/drawable/state_list_drawable.xml b/library/src/androidTest/res/drawable/state_list_drawable.xml
new file mode 100644
index 000000000..d43039f86
--- /dev/null
+++ b/library/src/androidTest/res/drawable/state_list_drawable.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+  <item android:drawable="@android:drawable/checkbox_on_background"
+    android:state_pressed="true" />
+  <item android:drawable="@android:drawable/checkbox_on_background"
+    android:state_checked="true" />
+  <item android:drawable="@android:drawable/checkbox_off_background" />
+
+</selector>
diff --git a/library/src/androidTest/res/drawable/vector_drawable.xml b/library/src/androidTest/res/drawable/vector_drawable.xml
new file mode 100644
index 000000000..1732bb9ba
--- /dev/null
+++ b/library/src/androidTest/res/drawable/vector_drawable.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+  android:width="64dp"
+  android:height="64dp"
+  android:viewportHeight="24.0"
+  android:viewportWidth="24.0">
+  <path
+    android:fillColor="#f9b840"
+    android:pathData="M15.5,5.5c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9
+        -2,2 0.9,2 2,2zM5,12c-2.8,0 -5,2.2 -5,5s2.2,5 5,5 5,-2.2 5,-5 -2.2,
+        -5 -5,-5zM5,20.5c-1.9,0 -3.5,-1.6 -3.5,-3.5s1.6,-3.5 3.5,-3.5 3.5,
+        1.6 3.5,3.5 -1.6,3.5 -3.5,3.5zM10.8,10.5l2.4,-2.4 0.8,0.8c1.3,1.3
+        3,2.1 5.1,2.1L19.1,9c-1.5,0 -2.7,-0.6 -3.6,-1.5l-1.9,-1.9c-0.5,-0.4
+        -1,-0.6 -1.6,-0.6s-1.1,0.2 -1.4,0.6L7.8,8.4c-0.4,0.4 -0.6,0.9 -0.6,
+        1.4 0,0.6 0.2,1.1 0.6,1.4L11,14v5h2v-6.2l-2.2,-2.3zM19,12c-2.8,0 -5,
+        2.2 -5,5s2.2,5 5,5 5,-2.2 5,-5 -2.2,-5 -5,-5zM19,20.5c-1.9,0 -3.5,-1.6
+         -3.5,-3.5s1.6,-3.5 3.5,-3.5 3.5,1.6 3.5,3.5 -1.6,3.5 -3.5,3.5z" />
+</vector>
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index a06d14109..c1251eab7 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -378,6 +378,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
         .append(GlideUrl.class, InputStream.class, new HttpGlideUrlLoader.Factory())
         .append(byte[].class, ByteBuffer.class, new ByteArrayLoader.ByteBufferFactory())
         .append(byte[].class, InputStream.class, new ByteArrayLoader.StreamFactory())
+        .append(Uri.class, Uri.class, new UnitModelLoader.Factory<Uri>())
         /* Transcoders */
         .register(Bitmap.class, BitmapDrawable.class,
             new BitmapDrawableTranscoder(resources, bitmapPool))
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
index 3718eafc1..48d06dc15 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
@@ -19,9 +19,19 @@ private DrawableDecoderCompat() {
     // Utility class.
   }
 
+  /**
+   * @see #getDrawable(Context, int, Theme)
+   */
+  public static Drawable getDrawable(Context context, @DrawableRes int id) {
+    return getDrawable(context, id, /*theme=*/ null);
+  }
+
   /**
    * Loads a Drawable using {@link AppCompatResources} if available and {@link ResourcesCompat}
    * otherwise, depending on whether or not the v7 support library is included in the application.
+   *
+   * @param theme Used instead of the {@link Theme} returned from the given {@link Context} if
+   * non-null when loading the {@link Drawable}.
    */
   public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullable Theme theme) {
     try {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
index c76cf0f57..2f81607f9 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/ResourceDrawableDecoder.java
@@ -2,8 +2,11 @@
 
 import android.content.ContentResolver;
 import android.content.Context;
+import android.content.pm.PackageManager.NameNotFoundException;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -12,13 +15,21 @@
 import java.util.List;
 
 /**
- * Decodes {@link Drawable}s given resource {@link Uri}s in the form
- * android.resource://<package_name>/<type>/<name>.
+ * Decodes {@link Drawable}s given resource {@link Uri}s.
+ *
+ * <p>This is typically used as a fallback for resource types that either aren't Bitmaps (see #350)
+ * or for resource types that we can't obtain an {@link java.io.InputStream} for using a standard
+ * {@link ContentResolver}, including some types of application icons and resources loaded from
+ * other packages.
  */
 public class ResourceDrawableDecoder implements ResourceDecoder<Uri, Drawable> {
-  private static final int EXPECTED_PATH_SEGMENTS = 2;
+  // android.resource://<package_name>/<type>/<name>.
+  private static final int NAME_URI_PATH_SEGMENTS = 2;
   private static final int TYPE_PATH_SEGMENT_INDEX = 0;
   private static final int NAME_PATH_SEGMENT_INDEX = 1;
+  // android.resource://<package_name>/<resource_id>
+  private static final int ID_PATH_SEGMENTS = 1;
+  private static final int RESOURCE_ID_SEGMENT_INDEX = 0;
 
   private final Context context;
 
@@ -35,36 +46,72 @@ public boolean handles(Uri source, Options options) throws IOException {
   @Override
   public Resource<Drawable> decode(Uri source, int width, int height, Options options)
       throws IOException {
-    // Parsing is based on the logic in ResourceLoader/the android framework that constructs
-    // resource Uris.
+    @DrawableRes int resId = loadResourceIdFromUri(source);
+    String packageName = source.getAuthority();
+    Context toUse = packageName.equals(context.getPackageName())
+        ? context : getContextForPackage(source, packageName);
+    // We can't get a theme from another application.
+    Drawable drawable = DrawableDecoderCompat.getDrawable(toUse, resId);
+    return new InternalDrawableResource(drawable);
+  }
+
+  @NonNull
+  private Context getContextForPackage(Uri source, String packageName) {
+    try {
+      return context.createPackageContext(packageName, /*flags=*/ 0);
+    } catch (NameNotFoundException e) {
+      throw new IllegalArgumentException(
+          "Failed to obtain context or unrecognized Uri format for: " + source, e);
+    }
+  }
+
+  @DrawableRes
+  private int loadResourceIdFromUri(Uri source) {
     List<String> segments = source.getPathSegments();
-    if (segments.size() != EXPECTED_PATH_SEGMENTS) {
-      throw new IOException("Unexpected path segments for: " + source + " segments: " + segments);
+    @DrawableRes Integer result = null;
+    if (segments.size() == NAME_URI_PATH_SEGMENTS) {
+       String packageName = source.getAuthority();
+       String typeName = segments.get(TYPE_PATH_SEGMENT_INDEX);
+       String resourceName = segments.get(NAME_PATH_SEGMENT_INDEX);
+       result = context.getResources().getIdentifier(resourceName, typeName, packageName);
+    } else if (segments.size() == ID_PATH_SEGMENTS) {
+       try {
+         result = Integer.valueOf(segments.get(RESOURCE_ID_SEGMENT_INDEX));
+       } catch (NumberFormatException e) {
+         // Ignored.
+       }
+     }
+
+     if (result == null) {
+       throw new IllegalArgumentException("Unrecognized Uri format: " + source);
+     } else if (result == 0) {
+       throw new IllegalArgumentException("Failed to obtain resource id for: " + source);
+     }
+     return result;
+  }
+
+  private static final class InternalDrawableResource extends DrawableResource<Drawable> {
+
+    InternalDrawableResource(Drawable drawable) {
+      super(drawable);
     }
-    String packageName = source.getAuthority();
-    String typeName = segments.get(TYPE_PATH_SEGMENT_INDEX);
-    String resourceName = segments.get(NAME_PATH_SEGMENT_INDEX);
-    int id = context.getResources().getIdentifier(resourceName, typeName, packageName);
-    Drawable drawable = DrawableDecoderCompat.getDrawable(context, id, null /*theme*/);
-    if (drawable == null) {
-      throw new IOException("ContextCompat#getDrawable returned null for: " + source);
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Class<Drawable> getResourceClass() {
+      return (Class<Drawable>) drawable.getClass();
     }
-    return new DrawableResource<Drawable>(drawable) {
-      @SuppressWarnings("unchecked")
-      @Override
-      public Class<Drawable> getResourceClass() {
-        return (Class<Drawable>) drawable.getClass();
-      }
 
-      @Override
-      public int getSize() {
-        return 1;
-      }
+    @Override
+    public int getSize() {
+      // 4 bytes per pixel for ARGB_8888 Bitmaps is something of a reasonable approximation. If
+      // there are no intrinsic bounds, we can fall back just to 1.
+      return Math.max(1, drawable.getIntrinsicWidth() * drawable.getIntrinsicHeight() * 4);
+    }
 
-      @Override
-      public void recycle() {
-        // Do nothing.
-      }
-    };
+    @Override
+    public void recycle() {
+      // Do nothing.
+    }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
index fca34c71a..003a10592 100644
--- a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
+++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
@@ -31,6 +31,11 @@ public static ByteBuffer fromFile(File file) throws IOException {
       if (fileLength > Integer.MAX_VALUE) {
         throw new IOException("File too large to map into memory");
       }
+      // See b/67710449.
+      if (fileLength == 0) {
+        throw new IOException("File unsuitable for memory mapping");
+      }
+
       raf = new RandomAccessFile(file, "r");
       channel = raf.getChannel();
       return channel.map(FileChannel.MapMode.READ_ONLY, 0, fileLength).load();
diff --git a/samples/giphy/src/main/res/drawable-xxxhdpi/googlelogo_color_120x44dp.9.png b/samples/giphy/src/main/res/drawable-xxxhdpi/googlelogo_color_120x44dp.9.png
new file mode 100755
index 000000000..1ab50e6cf
Binary files /dev/null and b/samples/giphy/src/main/res/drawable-xxxhdpi/googlelogo_color_120x44dp.9.png differ
