diff --git a/README.md b/README.md
index f1445f0d3..bdd2ac91b 100644
--- a/README.md
+++ b/README.md
@@ -61,7 +61,7 @@ Depending on your ProGuard (DexGuard) config and usage, you may need to include
 ```pro
 -keep public class * implements com.bumptech.glide.module.GlideModule
 -keep public class * extends com.bumptech.glide.module.AppGlideModule
--keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
+-keep public enum com.bumptech.glide.load.ImageHeaderParser$** {
   **[] $VALUES;
   public *;
 }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
index 291f594ae..5c5475f08 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
@@ -250,13 +250,12 @@ private MethodSpec generateConstructor(ClassName appGlideModule,
         "Discovered AppGlideModule from annotation: " + appGlideModule);
     // Excluded GlideModule classes from the manifest are logged in Glide's singleton.
     for (String glideModule : libraryGlideModuleClassNames) {
-      ClassName moduleClassName = ClassName.bestGuess(glideModule);
       if (excludedGlideModuleClassNames.contains(glideModule)) {
         constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
-            "AppGlideModule excludes LibraryGlideModule from annotation: " + moduleClassName);
+            "AppGlideModule excludes LibraryGlideModule from annotation: " + glideModule);
       } else {
         constructorBuilder.addStatement("$T.d($S, $S)", androidLogName, GLIDE_LOG_TAG,
-            "Discovered LibraryGlideModule from annotation: " + moduleClassName);
+            "Discovered LibraryGlideModule from annotation: " + glideModule);
       }
     }
     constructorBuilder.endControlFlow();
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
index 051cc4be6..b69b2ac37 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
@@ -1,11 +1,13 @@
 package com.bumptech.glide.annotation.compiler;
 
 import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNulls;
 
 import com.bumptech.glide.annotation.GlideOption;
 import com.bumptech.glide.annotation.GlideType;
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
+import com.squareup.javapoet.ClassName;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
@@ -273,7 +275,14 @@ public String apply(AnnotationMirror input) {
               }
             })
             .toSet();
-    if (!annotationNames.contains(nonNull().reflectionName())) {
+    boolean noNonNull = true;
+    for (ClassName nonNull : nonNulls()) {
+      if (annotationNames.contains(nonNull.reflectionName())) {
+        noNonNull = false;
+        break;
+      }
+    }
+    if (noNonNull) {
       processingEnvironment.getMessager().printMessage(
           Kind.WARNING,
           getQualifiedMethodName(executableElement)
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index 201dd604a..459be7ad4 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -24,6 +24,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
@@ -65,6 +66,8 @@
       GlideAnnotationProcessor.class.getPackage().getName();
   private static final ClassName NONNULL_ANNOTATION =
       ClassName.get("android.support.annotation", "NonNull");
+  private static final ClassName JETBRAINS_NOTNULL_ANNOTATION =
+      ClassName.get("org.jetbrains.annotations", "NotNull");
 
   private final ProcessingEnvironment processingEnv;
   private final TypeElement appGlideModuleType;
@@ -338,6 +341,10 @@ static ClassName nonNull() {
     return NONNULL_ANNOTATION;
   }
 
+  static List<ClassName> nonNulls() {
+    return Arrays.asList(NONNULL_ANNOTATION, JETBRAINS_NOTNULL_ANNOTATION);
+  }
+
   List<ExecutableElement> findInstanceMethodsReturning(TypeElement clazz, TypeMirror returnType) {
     return FluentIterable.from(clazz.getEnclosedElements())
         .filter(new FilterPublicMethods(returnType, MethodType.INSTANCE))
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithLibraryInPackageTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithLibraryInPackageTest.java
new file mode 100644
index 000000000..d8090cf2c
--- /dev/null
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/AppGlideModuleWithLibraryInPackageTest.java
@@ -0,0 +1,101 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
+import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
+import static com.bumptech.glide.annotation.compiler.test.Util.glide;
+import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
+import static com.google.testing.compile.CompilationSubject.assertThat;
+import static com.google.testing.compile.Compiler.javac;
+
+import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
+import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
+import com.bumptech.glide.annotation.compiler.test.Util;
+import com.google.testing.compile.Compilation;
+import java.io.IOException;
+import javax.tools.JavaFileObject;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/**
+ * Tests AppGlideModules that use the @Excludes annotation
+ * with a single excluded Module class in a strangely named subpackage.
+ */
+@RunWith(JUnit4.class)
+public class AppGlideModuleWithLibraryInPackageTest {
+  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
+      new RegenerateResourcesRule(getClass());
+  private Compilation compilation;
+
+  @Before
+  public void setUp() {
+    compilation =
+        javac()
+            .withProcessors(new GlideAnnotationProcessor())
+            .compile(
+                forResource("AppModuleWithLibraryInPackage.java"),
+                forResource("LibraryModuleInPackage.java"));
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
+  @Test
+  @ReferencedResource
+  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideOptions"))
+        .contentsAsUtf8String()
+        .isEqualTo(asUnixChars(appResource("GlideOptions.java").getCharContent(true)));
+  }
+
+  @Test
+  @ReferencedResource
+  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequest"))
+        .contentsAsUtf8String()
+        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
+  }
+
+  @Test
+  @ReferencedResource
+  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideRequests"))
+        .contentsAsUtf8String()
+        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
+  }
+
+  @Test
+  @ReferencedResource
+  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(subpackage("GlideApp"))
+        .contentsAsUtf8String()
+        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
+  }
+
+  @Test
+  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
+        .contentsAsUtf8String()
+        .isEqualTo(
+            asUnixChars(forResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
+  }
+
+  @Test
+  @ReferencedResource
+  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
+    assertThat(compilation)
+        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
+        .contentsAsUtf8String()
+        .isEqualTo(
+            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
+  }
+
+  private JavaFileObject forResource(String name) {
+    return Util.forResource(getClass().getSimpleName(), name);
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/AppModuleWithLibraryInPackage.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/AppModuleWithLibraryInPackage.java
new file mode 100644
index 000000000..78dd983d2
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/AppModuleWithLibraryInPackage.java
@@ -0,0 +1,10 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.Excludes;
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+import com.bumptech.glide.test._package.LibraryModuleInPackage;
+
+@GlideModule
+@Excludes(LibraryModuleInPackage.class)
+public final class AppModuleWithLibraryInPackage extends AppGlideModule {}
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
new file mode 100644
index 000000000..7ab08a74a
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/GeneratedAppGlideModuleImpl.java
@@ -0,0 +1,54 @@
+package com.bumptech.glide;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import com.bumptech.glide.test.AppModuleWithLibraryInPackage;
+import java.lang.Class;
+import java.lang.Override;
+import java.lang.SuppressWarnings;
+import java.util.HashSet;
+import java.util.Set;
+
+@SuppressWarnings("deprecation")
+final class GeneratedAppGlideModuleImpl extends GeneratedAppGlideModule {
+  private final AppModuleWithLibraryInPackage appGlideModule;
+
+  GeneratedAppGlideModuleImpl() {
+    appGlideModule = new AppModuleWithLibraryInPackage();
+    if (Log.isLoggable("Glide", Log.DEBUG)) {
+      Log.d("Glide", "Discovered AppGlideModule from annotation: com.bumptech.glide.test.AppModuleWithLibraryInPackage");
+      Log.d("Glide", "AppGlideModule excludes LibraryGlideModule from annotation: com.bumptech.glide.test._package.LibraryModuleInPackage");
+    }
+  }
+
+  @Override
+  public void applyOptions(@NonNull Context context, @NonNull GlideBuilder builder) {
+    appGlideModule.applyOptions(context, builder);
+  }
+
+  @Override
+  public void registerComponents(@NonNull Context context, @NonNull Glide glide,
+      @NonNull Registry registry) {
+    appGlideModule.registerComponents(context, glide, registry);
+  }
+
+  @Override
+  public boolean isManifestParsingEnabled() {
+    return appGlideModule.isManifestParsingEnabled();
+  }
+
+  @Override
+  @NonNull
+  public Set<Class<?>> getExcludedModuleClasses() {
+    Set<Class<?>> excludedClasses = new HashSet<Class<?>>();
+    excludedClasses.add(com.bumptech.glide.test._package.LibraryModuleInPackage.class);
+    return excludedClasses;
+  }
+
+  @Override
+  @NonNull
+  GeneratedRequestManagerFactory getRequestManagerFactory() {
+    return new GeneratedRequestManagerFactory();
+  }
+}
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/LibraryModuleInPackage.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/LibraryModuleInPackage.java
new file mode 100644
index 000000000..88f305b24
--- /dev/null
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithLibraryInPackageTest/LibraryModuleInPackage.java
@@ -0,0 +1,8 @@
+// _ in the name is important otherwise everything would work
+package com.bumptech.glide.test._package;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.LibraryGlideModule;
+
+@GlideModule
+public final class LibraryModuleInPackage extends LibraryGlideModule {}
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
index 4a1e8e108..a6b2b8941 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
@@ -2,11 +2,11 @@
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.app.Fragment;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
+import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.view.View;
 import com.bumptech.glide.Glide;
@@ -115,8 +115,9 @@ public static GlideRequests with(@NonNull Fragment arg0) {
   /**
    * @see Glide#with(Fragment)
    */
+  @Deprecated
   @NonNull
-  public static GlideRequests with(@NonNull android.support.v4.app.Fragment arg0) {
+  public static GlideRequests with(@NonNull android.app.Fragment arg0) {
     return (GlideRequests) Glide.with(arg0);
   }
 
diff --git a/build.gradle b/build.gradle
index d54f9c4e5..d9423ea2d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -50,6 +50,13 @@ subprojects { project ->
         // modified, so we're not going to worry about cleaning it up.
         if ("gifencoder" != project.getName()) {
           options.compilerArgs \
+                /*
+                 * Treat all warnings as errors.
+                 */ \
+                << "-Werror" \
+                /*
+                 * Enable all warnings.
+                 */ \
                 << "-Xlint:all" \
                 /*
                  * Java expects every annotation to have a processor, but we use
diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index 32352561b..1bfebbe01 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -5,6 +5,7 @@
     "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
 
 <suppressions>
+    <suppress files=".*[/\\]library[/\\]src[/\\]main[/\\]java[/\\]com[/\\]bumptech[/\\]glide[/\\]util[/\\]CachedHashCodeArrayMap.java" checks="EqualsHashCodeCheck"/>
     <suppress files=".*[/\\]library[/\\]test[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]annotation[/\\]compiler[/\\]test[/\\]src[/\\]test[/\\]resources[/\\].*" checks=".*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>
diff --git a/gradle.properties b/gradle.properties
index 6e13ac59c..7b9e0f9a6 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -15,7 +15,7 @@ POM_SCM_DEV_CONNECTION=scm:git@github.com:bumptech/glide.git
 POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
-ANDROID_SUPPORT_VERSION=27.0.2
+ANDROID_SUPPORT_VERSION=27.1.0
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.1
 ANDROID_GRADLE_VERSION=3.0.1
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 6b6ea3ab4..f6b961fd5 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 702c4b68b..9a4163a4f 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
index 0b46ad79d..87ae694a7 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DataUriTest.java
@@ -10,10 +10,12 @@
 import android.net.Uri;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
+import android.support.v4.content.ContextCompat;
 import android.util.Base64;
 import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.TearDownGlide;
+import com.bumptech.glide.util.Preconditions;
 import java.io.ByteArrayOutputStream;
 import org.junit.Rule;
 import org.junit.Test;
@@ -94,9 +96,11 @@ private String getDataUriString(CompressFormat format) {
     return "data:" + mimeType + ";base64," + bytes;
   }
 
+  @SuppressWarnings("deprecation")
   private String getBase64BitmapBytes(CompressFormat format) {
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
-    Drawable drawable = context.getResources().getDrawable(ResourceIds.raw.canonical);
+    Drawable drawable =
+        Preconditions.checkNotNull(ContextCompat.getDrawable(context, ResourceIds.raw.canonical));
     Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
     bitmap.compress(format, 100, bos);
     byte[] data = bos.toByteArray();
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DownsampleVideoTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DownsampleVideoTest.java
new file mode 100644
index 000000000..0035a04a6
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DownsampleVideoTest.java
@@ -0,0 +1,207 @@
+package com.bumptech.glide;
+
+import static com.bumptech.glide.test.BitmapSubject.assertThat;
+import static org.junit.Assume.assumeTrue;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Build;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.test.ConcurrencyHelper;
+import com.bumptech.glide.test.GlideApp;
+import com.bumptech.glide.test.ResourceIds;
+import com.bumptech.glide.test.TearDownGlide;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+public class DownsampleVideoTest {
+  // The dimensions of the test video.
+  private static final int WIDTH = 1080;
+  private static final int HEIGHT = 1920;
+
+  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
+  private final ConcurrencyHelper concurrency = new ConcurrencyHelper();
+  private final Context context = InstrumentationRegistry.getTargetContext();
+
+  @Before
+  public void setUp() {
+    assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1);
+  }
+
+  @Test
+  public void loadVideo_downsampleStrategyNone_returnsOriginalVideoDimensions() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .load(ResourceIds.raw.video)
+                .downsample(DownsampleStrategy.NONE)
+                .submit(10, 10));
+
+    assertThat(bitmap).hasDimensions(WIDTH, HEIGHT);
+  }
+
+  @Test
+  public void loadVideo_downsampleStrategyNone_doesNotUpscale() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .load(ResourceIds.raw.video)
+                .downsample(DownsampleStrategy.NONE)
+                .submit(WIDTH * 2, HEIGHT * 2));
+
+    assertThat(bitmap).hasDimensions(WIDTH, HEIGHT);
+  }
+
+  @Test
+  public void loadVideo_downsampleDefault_downsamplesVideo() {
+     Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .load(ResourceIds.raw.video)
+                .submit(10, 10));
+
+    assertThat(bitmap).hasDimensions(10, 18);
+  }
+
+  @Test
+  public void loadVideo_downsampleAtMost_downsamplesToSmallerSize() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.AT_MOST)
+                .load(ResourceIds.raw.video)
+                .submit(540, 959));
+    assertThat(bitmap).hasDimensions(270, 480);
+  }
+
+  @Test
+  public void loadVideo_downsampleAtMost_doesNotUpscale() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.AT_MOST)
+                .load(ResourceIds.raw.video)
+                .submit(WIDTH * 2, HEIGHT * 2));
+    assertThat(bitmap).hasDimensions(WIDTH, HEIGHT);
+  }
+
+  @Test
+  public void loadVideo_downsampleAtLeast_downsamplesToLargerSize() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.AT_LEAST)
+                .load(ResourceIds.raw.video)
+                .submit(270, 481));
+    assertThat(bitmap).hasDimensions(540, 960);
+  }
+
+    @Test
+  public void loadVideo_downsampleAtLeast_doesNotUpscale() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.AT_LEAST)
+                .load(ResourceIds.raw.video)
+                .submit(WIDTH * 2, HEIGHT * 2));
+    assertThat(bitmap).hasDimensions(WIDTH, HEIGHT);
+  }
+
+  @Test
+  public void loadVideo_downsampleCenterInside_downsamplesWithinBox() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.CENTER_INSIDE)
+                .load(ResourceIds.raw.video)
+                .submit(270, 481));
+    assertThat(bitmap).hasDimensions(270, 480);
+  }
+
+  @Test
+  public void loadVideo_downsampleCenterInside_doesNotUpscale() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.CENTER_INSIDE)
+                .load(ResourceIds.raw.video)
+                .submit(WIDTH * 2, HEIGHT * 2));
+    assertThat(bitmap).hasDimensions(WIDTH, HEIGHT);
+  }
+
+  @Test
+  public void loadVideo_downsampleCenterOutside_downsamplesOutsideBox() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.CENTER_OUTSIDE)
+                .load(ResourceIds.raw.video)
+                .submit(270, 481));
+    assertThat(bitmap).hasDimensions(271, 481);
+  }
+
+  @Test
+  public void loadVideo_downsampleCenterOutside_upsacles() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.CENTER_OUTSIDE)
+                .load(ResourceIds.raw.video)
+                .submit(WIDTH * 2, HEIGHT * 2));
+    assertThat(bitmap).hasDimensions(WIDTH * 2, HEIGHT * 2);
+  }
+
+  @Test
+  public void loadVideo_downsampleFitCenter_downsamplesInsideBox() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.FIT_CENTER)
+                .load(ResourceIds.raw.video)
+                .submit(270, 481));
+    assertThat(bitmap).hasDimensions(270, 480);
+  }
+
+  @Test
+  public void loadVideo_downsampleFitCenter_upscales() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.FIT_CENTER)
+                .load(ResourceIds.raw.video)
+                .submit(WIDTH * 2, HEIGHT * 2));
+    assertThat(bitmap).hasDimensions(WIDTH * 2, HEIGHT * 2);
+  }
+
+  @Test
+  public void loadVideo_withSizeOriginal_ignoresDownsampleStrategy() {
+    Bitmap bitmap =
+        concurrency.get(
+            GlideApp.with(context)
+                .asBitmap()
+                .downsample(DownsampleStrategy.AT_MOST)
+                .load(ResourceIds.raw.video)
+                .submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL));
+
+    assertThat(bitmap).hasDimensions(WIDTH, HEIGHT);
+  }
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java
index 4aac56188..764032c3f 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/DownsamplerEmulatorTest.java
@@ -377,8 +377,7 @@ private static String runScaleTest(
     Downsampler downsampler = buildDownsampler();
 
     InputStream is = openBitmapStream(format, initialWidth, initialHeight);
-    Options options = new Options()
-        .set(Downsampler.DOWNSAMPLE_STRATEGY, strategy);
+    Options options = new Options().set(DownsampleStrategy.OPTION, strategy);
     Bitmap bitmap = downsampler.decode(is, targetWidth, targetHeight, options).get();
     try {
       if (bitmap.getWidth() != expectedWidth || bitmap.getHeight() != expectedHeight) {
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
index fede0a765..050dee021 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
@@ -63,6 +63,25 @@ public void sameAs(@DrawableRes int resourceId) {
     sameAs(drawable);
   }
 
+  public void hasDimensions(int expectedWidth, int expectedHeight) {
+    int actualWidth = actual().getWidth();
+    int actualHeight = actual().getHeight();
+    String message;
+    if (expectedWidth != actualWidth && expectedHeight != actualHeight) {
+      message = "has dimensions of [" + expectedWidth + "x" + expectedHeight + "]";
+    } else if (expectedWidth != actualWidth) {
+      message = "has width of " + expectedWidth;
+    } else if (expectedHeight != actualHeight) {
+      message = "has height of " + expectedHeight;
+    } else {
+      message = null;
+    }
+
+    if (message != null) {
+      fail(message);
+    }
+  }
+
   public void isMutable()  {
     if (!actual().isMutable()) {
       fail("is mutable");
diff --git a/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java
index fb2294780..988561eac 100644
--- a/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java
+++ b/integration/recyclerview/src/main/java/com/bumptech/glide/integration/recyclerview/RecyclerViewPreloader.java
@@ -1,8 +1,8 @@
 package com.bumptech.glide.integration.recyclerview;
 
 import android.app.Activity;
-import android.app.Fragment;
 import android.support.annotation.NonNull;
+import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v7.widget.RecyclerView;
 import com.bumptech.glide.Glide;
@@ -62,9 +62,12 @@ public RecyclerViewPreloader(@NonNull Fragment fragment,
   }
 
   /**
-   * Helper constructor that accepts an {@link android.support.v4.app.Fragment}.
+   * Helper constructor that accepts an {@link android.app.Fragment}.
+   * @deprecated Use constructor <code>RecyclerViewPreloader(Fragment, PreloadModelProvider<T>,
+   * PreloadSizeProvider<T>)</code> instead.
    */
-  public RecyclerViewPreloader(@NonNull android.support.v4.app.Fragment fragment,
+  @Deprecated
+  public RecyclerViewPreloader(@NonNull android.app.Fragment fragment,
       @NonNull PreloadModelProvider<T> preloadModelProvider,
       @NonNull PreloadSizeProvider<T> preloadDimensionProvider,
       int maxPreload) {
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
index 97348ecc6..3137fdcdb 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
@@ -133,13 +133,17 @@ protected VolleyError parseNetworkError(VolleyError volleyError) {
       if (Log.isLoggable(TAG, Log.DEBUG)) {
         Log.d(TAG, "Volley failed to retrieve response", volleyError);
       }
-      callback.onLoadFailed(volleyError);
+      if (!isCanceled()) {
+        callback.onLoadFailed(volleyError);
+      }
       return super.parseNetworkError(volleyError);
     }
 
     @Override
     protected Response<byte[]> parseNetworkResponse(NetworkResponse response) {
-      callback.onDataReady(new ByteArrayInputStream(response.data));
+      if (!isCanceled()) {
+        callback.onDataReady(new ByteArrayInputStream(response.data));
+      }
       return Response.success(response.data, HttpHeaderParser.parseCacheHeaders(response));
     }
 
diff --git a/library/findbugs-exclude.xml b/library/findbugs-exclude.xml
index bd1e9afd3..f27b2c382 100644
--- a/library/findbugs-exclude.xml
+++ b/library/findbugs-exclude.xml
@@ -48,4 +48,10 @@
       <Bug pattern="EI_EXPOSE_REP" />
     </Match>
 
+    <!-- We just cache the value of hashcode, no need to also override equals. -->
+    <Match>
+      <Class name="com.bumptech.glide.util.CachedHashCodeArrayMap" />
+      <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS" />
+    </Match>
+
 </FindBugsFilter>
diff --git a/library/proguard-rules.txt b/library/proguard-rules.txt
index bfb14d052..39e209882 100644
--- a/library/proguard-rules.txt
+++ b/library/proguard-rules.txt
@@ -1,6 +1,6 @@
 -keep public class * implements com.bumptech.glide.module.GlideModule
 -keep public class * extends com.bumptech.glide.module.AppGlideModule
--keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
+-keep public enum com.bumptech.glide.load.ImageHeaderParser$** {
   **[] $VALUES;
   public *;
 }
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index c7f7e4562..ea9fcea8f 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -724,27 +724,32 @@ public static RequestManager with(@NonNull FragmentActivity activity) {
   }
 
   /**
-   * Begin a load with Glide that will be tied to the given {@link android.app.Fragment}'s lifecycle
-   * and that uses the given {@link android.app.Fragment}'s default options.
+   * Begin a load with Glide that will be tied to the given
+   * {@link android.support.v4.app.Fragment}'s lifecycle and that uses the given
+   * {@link android.support.v4.app.Fragment}'s default options.
    *
    * @param fragment The fragment to use.
    * @return A RequestManager for the given Fragment that can be used to start a load.
    */
   @NonNull
-  public static RequestManager with(@NonNull android.app.Fragment fragment) {
+  public static RequestManager with(@NonNull Fragment fragment) {
     return getRetriever(fragment.getActivity()).get(fragment);
   }
 
   /**
-   * Begin a load with Glide that will be tied to the given
-   * {@link android.support.v4.app.Fragment}'s lifecycle and that uses the given
-   * {@link android.support.v4.app.Fragment}'s default options.
+   * Begin a load with Glide that will be tied to the given {@link android.app.Fragment}'s lifecycle
+   * and that uses the given {@link android.app.Fragment}'s default options.
    *
    * @param fragment The fragment to use.
    * @return A RequestManager for the given Fragment that can be used to start a load.
+   * @deprecated Prefer support Fragments and {@link #with(Fragment)} instead,
+   * {@link android.app.Fragment} will be deprecated. See
+   * https://github.com/android/android-ktx/pull/161#issuecomment-363270555.
    */
+  @SuppressWarnings("deprecation")
+  @Deprecated
   @NonNull
-  public static RequestManager with(@NonNull Fragment fragment) {
+  public static RequestManager with(@NonNull android.app.Fragment fragment) {
     return getRetriever(fragment.getActivity()).get(fragment);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 2a336aa82..311258207 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -6,7 +6,6 @@
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 import android.util.Log;
-import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
@@ -30,8 +29,6 @@
 /**
  * A builder class for setting default structural classes for Glide to use.
  */
-// Public API.
-@SuppressWarnings({"unused", "WeakerAccess"})
 public final class GlideBuilder {
   private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions = new ArrayMap<>();
   private Engine engine;
@@ -83,32 +80,14 @@ public GlideBuilder setArrayPool(@Nullable ArrayPool arrayPool) {
    * @param memoryCache The cache to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setMemoryCache(@Nullable MemoryCache memoryCache) {
     this.memoryCache = memoryCache;
     return this;
   }
 
-  /**
-   * Sets the {@link com.bumptech.glide.load.engine.cache.DiskCache} implementation to use to store
-   * {@link com.bumptech.glide.load.engine.Resource} data and thumbnails.
-   *
-   * @param diskCache The disk cache to use.
-   * @return This builder.
-   * @deprecated Creating a disk cache directory on the main thread causes strict mode violations,
-   * use {@link #setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache.Factory)} instead.
-   * Scheduled to be removed in Glide 4.0.
-   */
-  @Deprecated
-  public GlideBuilder setDiskCache(final DiskCache diskCache) {
-    return setDiskCache(new DiskCache.Factory() {
-      @Override
-      public DiskCache build() {
-        return diskCache;
-      }
-    });
-  }
-
   /**
    * Sets the {@link com.bumptech.glide.load.engine.cache.DiskCache.Factory} implementation to use
    * to construct the {@link com.bumptech.glide.load.engine.cache.DiskCache} to use to store {@link
@@ -117,6 +96,8 @@ public DiskCache build() {
    * @param diskCacheFactory The disk cache factory to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setDiskCache(@Nullable DiskCache.Factory diskCacheFactory) {
     this.diskCacheFactory = diskCacheFactory;
@@ -160,6 +141,8 @@ public GlideBuilder setResizeExecutor(@Nullable GlideExecutor service) {
    * @see #setDiskCacheExecutor(GlideExecutor)
    * @see GlideExecutor
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setSourceExecutor(@Nullable GlideExecutor service) {
     this.sourceExecutor = service;
@@ -181,6 +164,8 @@ public GlideBuilder setSourceExecutor(@Nullable GlideExecutor service) {
    * @see #setSourceExecutor(GlideExecutor)
    * @see GlideExecutor
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service) {
     this.diskCacheExecutor = service;
@@ -199,6 +184,8 @@ public GlideBuilder setDiskCacheExecutor(@Nullable GlideExecutor service) {
    * @param service The {@link GlideExecutor} to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setAnimationExecutor(@Nullable GlideExecutor service) {
     this.animationExecutor = service;
@@ -237,6 +224,8 @@ public GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOpt
    * {@link android.graphics.drawable.BitmapDrawable}s, the transition you registered for
    * {@link android.graphics.drawable.BitmapDrawable}s will be used.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public <T> GlideBuilder setDefaultTransitionOptions(
       @NonNull Class<T> clazz, @Nullable TransitionOptions<?, T> options) {
@@ -244,25 +233,6 @@ public GlideBuilder setDefaultRequestOptions(@Nullable RequestOptions requestOpt
     return this;
   }
 
-  /**
-   * Sets the {@link com.bumptech.glide.load.DecodeFormat} that will be the default format for all
-   * the default decoders that can change the {@link android.graphics.Bitmap.Config} of the {@link
-   * android.graphics.Bitmap}s they decode.
-   *
-   * <p> Decode format is always a suggestion, not a requirement. See {@link
-   * com.bumptech.glide.load.DecodeFormat} for more details. </p>
-   *
-   * @param decodeFormat The format to use.
-   * @return This builder.
-   *
-   * @deprecated Use {@link #setDefaultRequestOptions(RequestOptions)} instead.
-   */
-  @Deprecated
-  public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
-    defaultRequestOptions = defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
-    return this;
-  }
-
   /**
    * Sets the {@link MemorySizeCalculator} to use to calculate maximum sizes for default
    * {@link MemoryCache MemoryCaches} and/or default {@link BitmapPool BitmapPools}.
@@ -272,6 +242,8 @@ public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
    * @param builder The builder to use (will not be modified).
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setMemorySizeCalculator(@NonNull MemorySizeCalculator.Builder builder) {
     return setMemorySizeCalculator(builder.build());
@@ -287,6 +259,8 @@ public GlideBuilder setMemorySizeCalculator(@NonNull MemorySizeCalculator.Builde
    * @param calculator The calculator to use.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("WeakerAccess")
   @NonNull
   public GlideBuilder setMemorySizeCalculator(@Nullable MemorySizeCalculator calculator) {
     this.memorySizeCalculator = calculator;
@@ -301,6 +275,8 @@ public GlideBuilder setMemorySizeCalculator(@Nullable MemorySizeCalculator calcu
    * @param factory The factory to use
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setConnectivityMonitorFactory(@Nullable ConnectivityMonitorFactory factory) {
     this.connectivityMonitorFactory = factory;
@@ -332,6 +308,8 @@ public GlideBuilder setConnectivityMonitorFactory(@Nullable ConnectivityMonitorF
    * @param logLevel The log level to use from {@link Log}.
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setLogLevel(int logLevel) {
     if (logLevel < Log.VERBOSE || logLevel > Log.ERROR) {
@@ -385,6 +363,8 @@ public GlideBuilder setLogLevel(int logLevel) {
    *
    * @return This builder.
    */
+  // Public API.
+  @SuppressWarnings("unused")
   @NonNull
   public GlideBuilder setIsActiveResourceRetentionAllowed(
       boolean isActiveResourceRetentionAllowed) {
@@ -403,7 +383,7 @@ GlideBuilder setEngine(Engine engine) {
   }
 
   @NonNull
-  public Glide build(@NonNull Context context) {
+  Glide build(@NonNull Context context) {
     if (sourceExecutor == null) {
       sourceExecutor = GlideExecutor.newSourceExecutor();
     }
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 3f8056407..5e523276f 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -819,7 +819,7 @@ public void run() {
    * @return A {@link java.util.concurrent.Future} that can be used to retrieve the cache File
    * containing the data.
    *
-   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #into(int, int)}.
+   * @deprecated Use {@link RequestManager#downloadOnly()} and {@link #submit(int, int)}.
    */
   @Deprecated
   @CheckResult
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index f05ad0d83..567757f45 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -172,28 +172,6 @@ public RequestManager setDefaultRequestOptions(@NonNull RequestOptions requestOp
     return this;
   }
 
-  /**
-   * @see android.content.ComponentCallbacks2#onTrimMemory(int)
-   *
-   * @deprecated This method is called automatically by Glide's internals and shouldn't be called
-   * externally.
-   */
-  @Deprecated
-  public void onTrimMemory(int level) {
-    glide.onTrimMemory(level);
-  }
-
-  /**
-   * @see android.content.ComponentCallbacks2#onLowMemory()
-   *
-   * @deprecated This method is called automatically by Glide's internals and shouldn't be called
-   * externally.
-   */
-  @Deprecated
-  public void onLowMemory() {
-    glide.onLowMemory();
-  }
-
   /**
    * Returns true if loads for this {@link RequestManager} are currently paused.
    *
diff --git a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
index 4837ec515..8cf2058f5 100644
--- a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
@@ -16,7 +16,9 @@
    * {@link android.graphics.Bitmap#getConfig()} when possible.
    *
    * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use
-   * {@link android.graphics.Bitmap.Config#HARDWARE}.
+   * {@link android.graphics.Bitmap.Config#HARDWARE}. More information is available about hardware
+   * Bitmaps here: https://goo.gl/tn2A6k. If you need to disable hardware Bitmaps for a particular
+   * request, use {@link com.bumptech.glide.request.RequestOptions#disallowHardwareConfig()}.
    *
    * <p> GIF images decoded by {@link android.graphics.BitmapFactory} currently use an internal
    * hidden format that is returned as null from {@link android.graphics.Bitmap#getConfig()}. Since
diff --git a/library/src/main/java/com/bumptech/glide/load/Options.java b/library/src/main/java/com/bumptech/glide/load/Options.java
index bf2685323..6609a080f 100644
--- a/library/src/main/java/com/bumptech/glide/load/Options.java
+++ b/library/src/main/java/com/bumptech/glide/load/Options.java
@@ -4,13 +4,14 @@
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 import android.support.v4.util.SimpleArrayMap;
+import com.bumptech.glide.util.CachedHashCodeArrayMap;
 import java.security.MessageDigest;
 
 /**
  * A set of {@link Option Options} to apply to in memory and disk cache keys.
  */
 public final class Options implements Key {
-  private final ArrayMap<Option<?>, Object> values = new ArrayMap<>();
+  private final ArrayMap<Option<?>, Object> values = new CachedHashCodeArrayMap<>();
 
   public void putAll(@NonNull Options other) {
     values.putAll((SimpleArrayMap<Option<?>, Object>) other.values);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 3fe0bb3d5..12641a9dc 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -2,7 +2,6 @@
 
 import android.os.Build;
 import android.support.annotation.NonNull;
-import android.support.v4.os.TraceCompat;
 import android.support.v4.util.Pools;
 import android.util.Log;
 import com.bumptech.glide.GlideContext;
@@ -21,6 +20,7 @@
 import com.bumptech.glide.util.LogTime;
 import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.pool.FactoryPools.Poolable;
+import com.bumptech.glide.util.pool.GlideTrace;
 import com.bumptech.glide.util.pool.StateVerifier;
 import java.util.ArrayList;
 import java.util.List;
@@ -63,6 +63,7 @@
   private RunReason runReason;
   private long startFetchTime;
   private boolean onlyRetrieveFromCache;
+  private Object model;
 
   private Thread currentThread;
   private Key currentSourceKey;
@@ -125,6 +126,7 @@
     this.callback = callback;
     this.order = order;
     this.runReason = RunReason.INITIALIZE;
+    this.model = model;
     return this;
   }
 
@@ -188,6 +190,7 @@ private void releaseInternal() {
     currentFetcher = null;
     startFetchTime = 0L;
     isCancelled = false;
+    model = null;
     throwables.clear();
     pool.release(this);
   }
@@ -218,7 +221,7 @@ public void run() {
     // This should be much more fine grained, but since Java's thread pool implementation silently
     // swallows all otherwise fatal exceptions, this will at least make it obvious to developers
     // that something is failing.
-    TraceCompat.beginSection("DecodeJob#run");
+    GlideTrace.beginSectionFormat("DecodeJob#run(model=%s)", model);
     // Methods in the try statement can invalidate currentFetcher, so set a local variable here to
     // ensure that the fetcher is cleaned up either way.
     DataFetcher<?> localFetcher = currentFetcher;
@@ -254,7 +257,7 @@ public void run() {
       if (localFetcher != null) {
         localFetcher.cleanup();
       }
-      TraceCompat.endSection();
+      GlideTrace.endSection();
     }
   }
 
@@ -371,11 +374,11 @@ public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetche
       runReason = RunReason.DECODE_DATA;
       callback.reschedule(this);
     } else {
-      TraceCompat.beginSection("DecodeJob.decodeFromRetrievedData");
+      GlideTrace.beginSection("DecodeJob.decodeFromRetrievedData");
       try {
         decodeFromRetrievedData();
       } finally {
-        TraceCompat.endSection();
+        GlideTrace.endSection();
       }
     }
   }
@@ -654,13 +657,13 @@ private boolean isComplete(boolean isRemovedFromQueue) {
     }
 
     void encode(DiskCacheProvider diskCacheProvider, Options options) {
-      TraceCompat.beginSection("DecodeJob.encode");
+      GlideTrace.beginSection("DecodeJob.encode");
       try {
         diskCacheProvider.getDiskCache().put(key,
             new DataCacheWriter<>(encoder, toEncode, options));
       } finally {
         toEncode.unlock();
-        TraceCompat.endSection();
+        GlideTrace.endSection();
       }
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index dcb320c2d..dbeb547cf 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -33,6 +33,7 @@
     EngineResource.ResourceListener {
   private static final String TAG = "Engine";
   private static final int JOB_POOL_SIZE = 150;
+  private static final boolean VERBOSE_IS_LOGGABLE = Log.isLoggable(TAG, Log.VERBOSE);
   private final Jobs jobs;
   private final EngineKeyFactory keyFactory;
   private final MemoryCache cache;
@@ -165,7 +166,7 @@ public Engine(
       boolean onlyRetrieveFromCache,
       ResourceCallback cb) {
     Util.assertMainThread();
-    long startTime = LogTime.getLogTime();
+    long startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : 0;
 
     EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,
         resourceClass, transcodeClass, options);
@@ -173,7 +174,7 @@ public Engine(
     EngineResource<?> active = loadFromActiveResources(key, isMemoryCacheable);
     if (active != null) {
       cb.onResourceReady(active, DataSource.MEMORY_CACHE);
-      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+      if (VERBOSE_IS_LOGGABLE) {
         logWithTimeAndKey("Loaded resource from active resources", startTime, key);
       }
       return null;
@@ -182,7 +183,7 @@ public Engine(
     EngineResource<?> cached = loadFromCache(key, isMemoryCacheable);
     if (cached != null) {
       cb.onResourceReady(cached, DataSource.MEMORY_CACHE);
-      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+      if (VERBOSE_IS_LOGGABLE) {
         logWithTimeAndKey("Loaded resource from cache", startTime, key);
       }
       return null;
@@ -191,7 +192,7 @@ public Engine(
     EngineJob<?> current = jobs.get(key, onlyRetrieveFromCache);
     if (current != null) {
       current.addCallback(cb);
-      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+      if (VERBOSE_IS_LOGGABLE) {
         logWithTimeAndKey("Added to existing load", startTime, key);
       }
       return new LoadStatus(cb, current);
@@ -229,7 +230,7 @@ public Engine(
     engineJob.addCallback(cb);
     engineJob.start(decodeJob);
 
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
+    if (VERBOSE_IS_LOGGABLE) {
       logWithTimeAndKey("Started new load", startTime, key);
     }
     return new LoadStatus(cb, engineJob);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 4e427b920..86cdfb506 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -37,6 +37,8 @@
     this.cb = cb;
   }
 
+  // See TODO below.
+  @SuppressWarnings("PMD.CollapsibleIfStatements")
   @Override
   public boolean startNext() {
     List<Key> sourceIds = helper.getCacheKeys();
@@ -48,9 +50,12 @@ public boolean startNext() {
       if (File.class.equals(helper.getTranscodeClass())) {
         return false;
       }
-      throw new IllegalStateException(
-          "Failed to find any load path from " + helper.getModelClass() + " to "
-              + helper.getTranscodeClass());
+      // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes
+      // all loads to fail. Without this assertion it causes loads to miss the disk cache
+      // unnecessarily
+      // throw new IllegalStateException(
+      //    "Failed to find any load path from " + helper.getModelClass() + " to "
+      //        + helper.getTranscodeClass());
     }
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
index f6838dd26..596e15574 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPool.java
@@ -140,7 +140,8 @@ public synchronized void clearMemory() {
   public synchronized void trimMemory(int level) {
     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN
+        || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {
       evictToSize(maxSize / 2);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index 0540e469e..d233c9130 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -219,8 +219,9 @@ public void trimMemory(int level) {
     }
     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
-      trimToSize(maxSize / 2);
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN
+        || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {
+      trimToSize(getMaxSize() / 2);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheAdapter.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheAdapter.java
index d551af16a..8642d5275 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheAdapter.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheAdapter.java
@@ -27,4 +27,14 @@ public void delete(Key key) {
   public void clear() {
       // no op, default for overriders
   }
+
+  /**
+   * Default factory for {@link DiskCacheAdapter}.
+   */
+  public static final class Factory implements DiskCache.Factory {
+    @Override
+    public DiskCache build() {
+      return new DiskCacheAdapter();
+    }
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
index 9c26b83df..75c5329e1 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/LruResourceCache.java
@@ -47,11 +47,13 @@ protected int getSize(@Nullable Resource<?> item) {
   @Override
   public void trimMemory(int level) {
     if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND) {
-      // Nearing middle of list of cached background apps
+      // Entering list of cached background apps
       // Evict our entire bitmap cache
       clearMemory();
-    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
-      // Entering list of cached background apps
+    } else if (level >= android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN
+        || level == android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL) {
+      // The app's UI is no longer visible, or app is in the foreground but system is running
+      // critically low on memory
       // Evict oldest half of our bitmap cache
       trimToSize(getMaxSize() / 2);
     }
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index 443304fcc..bbe616a76 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -52,7 +52,7 @@
         }
       }
     }
-    return !fetchers.isEmpty()
+    return !fetchers.isEmpty() && sourceKey != null
         ? new LoadData<>(sourceKey, new MultiFetcher<>(fetchers, exceptionListPool)) : null;
   }
 
@@ -81,7 +81,8 @@ public String toString() {
     @Nullable
     private List<Throwable> exceptions;
 
-    MultiFetcher(@NonNull List<DataFetcher<Data>> fetchers,
+    MultiFetcher(
+        @NonNull List<DataFetcher<Data>> fetchers,
         @NonNull Pool<List<Throwable>> throwableListPool) {
       this.throwableListPool = throwableListPool;
       Preconditions.checkNotEmpty(fetchers);
@@ -90,7 +91,8 @@ public String toString() {
     }
 
     @Override
-    public void loadData(@NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
+    public void loadData(
+        @NonNull Priority priority, @NonNull DataCallback<? super Data> callback) {
       this.priority = priority;
       this.callback = callback;
       exceptions = throwableListPool.acquire();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
index a783e616c..2b3bdc574 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformation.java
@@ -7,7 +7,6 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.Resource;
-import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.util.Preconditions;
 import java.security.MessageDigest;
 
@@ -28,26 +27,6 @@ public BitmapDrawableTransformation(Transformation<Bitmap> wrapped) {
         Preconditions.checkNotNull(new DrawableTransformation(wrapped, /*isRequired=*/ false));
   }
 
-  /**
-   * @deprecated use {@link #BitmapDrawableTransformation(Transformation)}}
-   */
-  @Deprecated
-  public BitmapDrawableTransformation(
-      @SuppressWarnings("unused") Context context, Transformation<Bitmap> wrapped) {
-    this(wrapped);
-  }
-
-  /**
-   * @deprecated use {@link #BitmapDrawableTransformation(Transformation)}}
-   */
-  @Deprecated
-  public BitmapDrawableTransformation(
-      @SuppressWarnings("unused") Context context,
-      @SuppressWarnings("unused") BitmapPool bitmapPool,
-      Transformation<Bitmap> wrapped) {
-    this(wrapped);
-  }
-
   @NonNull
   @Override
   public Resource<BitmapDrawable> transform(
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
index 5c949e6e3..8dcd98372 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.os.TraceCompat;
 import android.util.Log;
 import com.bumptech.glide.load.EncodeStrategy;
 import com.bumptech.glide.load.Option;
@@ -14,6 +13,7 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.util.LogTime;
 import com.bumptech.glide.util.Util;
+import com.bumptech.glide.util.pool.GlideTrace;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -72,8 +72,8 @@ public boolean encode(@NonNull Resource<Bitmap> resource, @NonNull File file,
       @NonNull Options options) {
     final Bitmap bitmap = resource.get();
     Bitmap.CompressFormat format = getFormat(bitmap, options);
-    TraceCompat.beginSection(
-        "encode: [" + bitmap.getWidth() + "x" + bitmap.getHeight() + "] " + format);
+    GlideTrace.
+        beginSectionFormat("encode: [%dx%d] %s", bitmap.getWidth(), bitmap.getHeight(), format);
     try {
       long start = LogTime.getLogTime();
       int quality = options.get(COMPRESSION_QUALITY);
@@ -110,7 +110,7 @@ public boolean encode(@NonNull Resource<Bitmap> resource, @NonNull File file,
       }
       return success;
     } finally {
-      TraceCompat.endSection();
+      GlideTrace.endSection();
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
index 8dd0827ba..a76b0e983 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformation.java
@@ -66,21 +66,6 @@
  */
 public abstract class BitmapTransformation implements Transformation<Bitmap> {
 
-  // Public API.
-  @SuppressWarnings("WeakerAccess")
-  public BitmapTransformation() {
-    // Intentionally empty.
-  }
-
-  /**
-   * @deprecated Use {@link #BitmapTransformation()}.
-   * @param context Ignored.
-   */
-  @Deprecated
-  public BitmapTransformation(@SuppressWarnings("unused") Context context) {
-    this();
-  }
-
   @NonNull
   @Override
   public final Resource<Bitmap> transform(
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
index c60666adf..e2fb472d5 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java
@@ -1,9 +1,22 @@
 package com.bumptech.glide.load.resource.bitmap;
 
+import com.bumptech.glide.load.Option;
 import com.bumptech.glide.util.Synthetic;
 
 /**
  * Indicates the algorithm to use when downsampling images.
+ *
+ * <p>{@code DownsampleStrategy} does not provide any guarantees about output sizes. Behavior will
+ * differ depending on the {@link com.bumptech.glide.load.ResourceDecoder} using the strategy and
+ * the version of Android the code runs on. Use {@code DownsampleStrategy} as an optimization to
+ * improve memory efficiency only. If you need a particular size or shape output, use an
+ * {@link com.bumptech.glide.load.Transformation} either instead or in addition to a
+ * {@code DownsampleStrategy}.
+ *
+ * <p>Some differences between versions of Android and
+ * {@link com.bumptech.glide.load.ResourceDecoder}s are listed below, but the list is not
+ * comprehensive because {@link DownsampleStrategy} only controls it's output scale value, not
+ * how that output value is used.
  */
 // Public API.
 @SuppressWarnings("WeakerAccess")
@@ -18,8 +31,8 @@
    * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST} or
    * {@link #CENTER_INSIDE}.
    *
-   * <p>On pre-KitKat devices, this is equivalent to {@link #AT_MOST} because only power of
-   * two downsampling can be used.
+   * <p>On pre-KitKat devices, {@link Downsampler} treats this as equivalent to {@link #AT_MOST}
+   * because only power of two downsampling can be used.
    */
   public static final DownsampleStrategy FIT_CENTER = new FitCenter();
 
@@ -32,20 +45,24 @@
    * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST},
    * or {@link #CENTER_INSIDE}.
    *
-   * <p>On pre-KitKat devices, this is equivalent to {@link #AT_LEAST} because only power of
-   * two downsampling can be used.
+   * <p>On pre-KitKat devices, {@link Downsampler} treats this as equivalent to
+   * {@link #AT_LEAST} because only power of two downsampling can be used.
    */
   public static final DownsampleStrategy CENTER_OUTSIDE = new CenterOutside();
 
   /**
    * Downsamples so the image's smallest dimension is between the given dimensions and 2x the given
    * dimensions, with no size restrictions on the image's largest dimension.
+   *
+   * <p>Does not upscale if the requested dimensions are larger than the original dimensions.
    */
   public static final DownsampleStrategy AT_LEAST = new AtLeast();
 
   /**
    * Downsamples so the image's largest dimension is between 1/2 the given dimensions and the given
    * dimensions, with no restrictions on the image's smallest dimension.
+   *
+   * <p>Does not upscale if the requested dimensions are larger than the original dimensions.
    */
   public static final DownsampleStrategy AT_MOST = new AtMost();
 
@@ -54,7 +71,7 @@
    * maintaining its original aspect ratio, so that one of the image's dimensions is exactly equal
    * to the requested size and the other is less or equal than the requested size.
    *
-   * <p>This method will not upscale.</p>
+   * <p>Does not upscale if the requested dimensions are larger than the original dimensions.
    */
   public static final DownsampleStrategy CENTER_INSIDE = new CenterInside();
 
@@ -68,6 +85,17 @@
    */
   public static final DownsampleStrategy DEFAULT = CENTER_OUTSIDE;
 
+  /**
+   * Indicates the {@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy} option that
+   * will be used to calculate the sample size to use to downsample an image given the original
+   * and target dimensions of the image.
+   */
+  // The exact String value here is retained to avoid breaking cache keys for images that were
+  // loaded with older versions of Glide.
+  public static final Option<DownsampleStrategy> OPTION =
+      Option.memory(
+          "com.bumptech.glide.load.resource.bitmap.Downsampler.DownsampleStrategy", DEFAULT);
+
   /**
    * Returns a float (0, +infinity) indicating a scale factor to apply to the source
    * width and height when displayed in the requested width and height.
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 51e9be79a..9abf4f177 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -50,10 +50,11 @@
    * Indicates the {@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy} option that
    * will be used to calculate the sample size to use to downsample an image given the original
    * and target dimensions of the image.
+   *
+   * @deprecated Use {@link DownsampleStrategy#OPTION} directly instead.
    */
-  public static final Option<DownsampleStrategy> DOWNSAMPLE_STRATEGY =
-      Option.memory("com.bumptech.glide.load.resource.bitmap.Downsampler.DownsampleStrategy",
-          DownsampleStrategy.DEFAULT);
+  @Deprecated
+  public static final Option<DownsampleStrategy> DOWNSAMPLE_STRATEGY = DownsampleStrategy.OPTION;
   /**
    * Ensure that the size of the bitmap is fixed to the requested width and height of the
    * resource from the caller.  The final resource dimensions may differ from the requested
@@ -195,7 +196,7 @@ public boolean handles(@SuppressWarnings("unused") ByteBuffer byteBuffer) {
     bitmapFactoryOptions.inTempStorage = bytesForOptions;
 
     DecodeFormat decodeFormat = options.get(DECODE_FORMAT);
-    DownsampleStrategy downsampleStrategy = options.get(DOWNSAMPLE_STRATEGY);
+    DownsampleStrategy downsampleStrategy = options.get(DownsampleStrategy.OPTION);
     boolean fixBitmapToRequestedDimensions = options.get(FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS);
     boolean isHardwareConfigAllowed =
       options.get(ALLOW_HARDWARE_CONFIG) != null && options.get(ALLOW_HARDWARE_CONFIG);
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
index 509e83e10..19f192417 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/VideoDecoder.java
@@ -10,6 +10,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
+import android.util.Log;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
@@ -28,6 +29,7 @@
  * {@link AssetFileDescriptor}.
  */
 public class VideoDecoder<T> implements ResourceDecoder<T, Bitmap> {
+  private static final String TAG = "VideoDecoder";
 
   /**
    * A constant indicating we should use whatever frame we consider best, frequently not the first
@@ -148,13 +150,24 @@ public boolean handles(@NonNull T data, @NonNull Options options) {
     if (frameOption == null) {
       frameOption = DEFAULT_FRAME_OPTION;
     }
+    DownsampleStrategy downsampleStrategy = options.get(DownsampleStrategy.OPTION);
+    if (downsampleStrategy == null) {
+      downsampleStrategy = DownsampleStrategy.DEFAULT;
+    }
 
     final Bitmap result;
     MediaMetadataRetriever mediaMetadataRetriever = factory.build();
     try {
       initializer.initialize(mediaMetadataRetriever, resource);
       result =
-          decodeFrame(mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight);
+          decodeFrame(
+              mediaMetadataRetriever,
+              frameTimeMicros,
+              frameOption,
+              outWidth,
+              outHeight,
+              downsampleStrategy);
+
     } catch (RuntimeException e) {
       // MediaMetadataRetriever APIs throw generic runtime exceptions when given invalid data.
       throw new IOException(e);
@@ -165,14 +178,15 @@ public boolean handles(@NonNull T data, @NonNull Options options) {
     return BitmapResource.obtain(result, bitmapPool);
   }
 
-  @TargetApi(Build.VERSION_CODES.O_MR1)
   @Nullable
   private static Bitmap decodeFrame(
       MediaMetadataRetriever mediaMetadataRetriever,
       long frameTimeMicros,
       int frameOption,
       int outWidth,
-      int outHeight) {
+      int outHeight,
+      DownsampleStrategy strategy) {
+    Bitmap result = null;
     // Arguably we should handle the case where just width or just height is set to
     // Target.SIZE_ORIGINAL. Up to and including OMR1, MediaMetadataRetriever defaults to setting
     // the dimensions to the display width and height if they aren't specified (ie
@@ -181,14 +195,77 @@ private static Bitmap decodeFrame(
     // behavior of Glide in all versions of Android prior to OMR1, it's probably fine for now.
     if (Build.VERSION.SDK_INT >= VERSION_CODES.O_MR1
         && outWidth != Target.SIZE_ORIGINAL
-        && outHeight != Target.SIZE_ORIGINAL) {
+        && outHeight != Target.SIZE_ORIGINAL
+        && strategy != DownsampleStrategy.NONE) {
+      result =
+          decodeScaledFrame(
+              mediaMetadataRetriever, frameTimeMicros, frameOption, outWidth, outHeight, strategy);
+    }
+
+    if (result == null) {
+      result = decodeOriginalFrame(mediaMetadataRetriever, frameTimeMicros, frameOption);
+    }
+
+    return result;
+  }
+
+  @TargetApi(Build.VERSION_CODES.O_MR1)
+  private static Bitmap decodeScaledFrame(
+      MediaMetadataRetriever mediaMetadataRetriever,
+      long frameTimeMicros,
+      int frameOption,
+      int outWidth,
+      int outHeight,
+      DownsampleStrategy strategy) {
+    try {
+      int originalWidth =
+          Integer.parseInt(
+              mediaMetadataRetriever.extractMetadata(
+                  MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH));
+      int originalHeight =
+          Integer.parseInt(
+              mediaMetadataRetriever.extractMetadata(
+                  MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT));
+      int orientation =
+          Integer.parseInt(
+              mediaMetadataRetriever.extractMetadata(
+                  MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION));
+
+      if (orientation == 90 || orientation == 270) {
+        int temp = originalWidth;
+        //noinspection SuspiciousNameCombination
+        originalWidth = originalHeight;
+        originalHeight = temp;
+      }
+
+      float scaleFactor =
+          strategy.getScaleFactor(originalWidth, originalHeight, outWidth, outHeight);
+
+      int decodeWidth = Math.round(scaleFactor * originalWidth);
+      int decodeHeight = Math.round(scaleFactor * originalHeight);
+
       return mediaMetadataRetriever.getScaledFrameAtTime(
-          frameTimeMicros, frameOption, outWidth, outHeight);
-    } else {
-      return mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);
+          frameTimeMicros, frameOption, decodeWidth, decodeHeight);
+     } catch (Throwable t) {
+      // This is aggressive, but we'd rather catch errors caused by reading and/or parsing metadata
+      // here and fall back to just decoding the frame whenever possible. If the exception is thrown
+      // just from decoding the frame, then it will be thrown and exposed to callers by the method
+      // below.
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Exception trying to decode frame on oreo+", t);
+      }
+
+      return null;
     }
   }
 
+  private static Bitmap decodeOriginalFrame(
+      MediaMetadataRetriever mediaMetadataRetriever,
+      long frameTimeMicros,
+      int frameOption) {
+    return mediaMetadataRetriever.getFrameAtTime(frameTimeMicros, frameOption);
+  }
+
   @VisibleForTesting
   static class MediaMetadataRetrieverFactory {
     public MediaMetadataRetriever build() {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
index 8c39e60cb..392661b1b 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformation.java
@@ -23,24 +23,6 @@ public GifDrawableTransformation(Transformation<Bitmap> wrapped) {
     this.wrapped = Preconditions.checkNotNull(wrapped);
   }
 
-  /**
-   * @deprecated Use {@link #GifDrawableTransformation(Transformation)}.
-   */
-  @Deprecated
-  public GifDrawableTransformation(
-      @SuppressWarnings("unused") Context context, Transformation<Bitmap> wrapped) {
-    this(wrapped);
-  }
-
-  /**
-   * @deprecated Use {@link #GifDrawableTransformation(Transformation)}
-   */
-  @Deprecated
-  public GifDrawableTransformation(
-      Transformation<Bitmap> wrapped, @SuppressWarnings("unused") BitmapPool bitmapPool) {
-    this(wrapped);
-  }
-
   @NonNull
   @Override
   public Resource<GifDrawable> transform(
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index 272064fa4..14215377a 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -25,15 +25,20 @@
  * @see com.bumptech.glide.manager.RequestManagerRetriever
  * @see com.bumptech.glide.RequestManager
  */
+@SuppressWarnings("DeprecatedIsStillUsed")
+@Deprecated
 public class RequestManagerFragment extends Fragment {
   private static final String TAG = "RMFragment";
   private final ActivityFragmentLifecycle lifecycle;
   private final RequestManagerTreeNode requestManagerTreeNode =
       new FragmentRequestManagerTreeNode();
+  @SuppressWarnings("deprecation")
   private final Set<RequestManagerFragment> childRequestManagerFragments = new HashSet<>();
 
   @Nullable private RequestManager requestManager;
-  @Nullable private RequestManagerFragment rootRequestManagerFragment;
+  @SuppressWarnings("deprecation")
+  @Nullable
+  private RequestManagerFragment rootRequestManagerFragment;
   @Nullable private Fragment parentFragmentHint;
 
   public RequestManagerFragment() {
@@ -76,10 +81,12 @@ public RequestManagerTreeNode getRequestManagerTreeNode() {
     return requestManagerTreeNode;
   }
 
+  @SuppressWarnings("deprecation")
   private void addChildRequestManagerFragment(RequestManagerFragment child) {
     childRequestManagerFragments.add(child);
   }
 
+  @SuppressWarnings("deprecation")
   private void removeChildRequestManagerFragment(RequestManagerFragment child) {
     childRequestManagerFragments.remove(child);
   }
@@ -88,6 +95,7 @@ private void removeChildRequestManagerFragment(RequestManagerFragment child) {
    * Returns the set of fragments that this RequestManagerFragment's parent is a parent to. (i.e.
    * our parent is the fragment that we are annotating).
    */
+  @SuppressWarnings("deprecation")
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
   @Synthetic
   @NonNull
@@ -150,10 +158,11 @@ private boolean isDescendant(@NonNull Fragment fragment) {
     return false;
   }
 
+  @SuppressWarnings("deprecation")
   private void registerFragmentWithRoot(@NonNull Activity activity) {
     unregisterFragmentWithRoot();
-    rootRequestManagerFragment = Glide.get(activity).getRequestManagerRetriever()
-        .getRequestManagerFragment(activity.getFragmentManager(), null);
+    rootRequestManagerFragment =
+        Glide.get(activity).getRequestManagerRetriever().getRequestManagerFragment(activity);
     if (!equals(rootRequestManagerFragment)) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
@@ -215,6 +224,7 @@ public String toString() {
     @Synthetic
     FragmentRequestManagerTreeNode() { }
 
+    @SuppressWarnings("deprecation")
     @NonNull
     @Override
     public Set<RequestManager> getDescendants() {
@@ -228,6 +238,7 @@ public String toString() {
       return descendants;
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public String toString() {
       return super.toString() + "{fragment=" + RequestManagerFragment.this + "}";
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index 7d25d760b..a8260fa81 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -53,6 +53,7 @@
   /**
    * Pending adds for RequestManagerFragments.
    */
+  @SuppressWarnings("deprecation")
   @VisibleForTesting
   final Map<android.app.FragmentManager, RequestManagerFragment> pendingRequestManagerFragments =
       new HashMap<>();
@@ -130,7 +131,8 @@ public RequestManager get(@NonNull FragmentActivity activity) {
     } else {
       assertNotDestroyed(activity);
       FragmentManager fm = activity.getSupportFragmentManager();
-      return supportFragmentGet(activity, fm, null /*parentHint*/);
+      return supportFragmentGet(
+          activity, fm, /*parentHint=*/ null, isActivityVisible(activity));
     }
   }
 
@@ -142,10 +144,11 @@ public RequestManager get(@NonNull Fragment fragment) {
       return get(fragment.getActivity().getApplicationContext());
     } else {
       FragmentManager fm = fragment.getChildFragmentManager();
-      return supportFragmentGet(fragment.getActivity(), fm, fragment);
+      return supportFragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());
     }
   }
 
+  @SuppressWarnings("deprecation")
   @NonNull
   public RequestManager get(@NonNull Activity activity) {
     if (Util.isOnBackgroundThread()) {
@@ -153,10 +156,12 @@ public RequestManager get(@NonNull Activity activity) {
     } else {
       assertNotDestroyed(activity);
       android.app.FragmentManager fm = activity.getFragmentManager();
-      return fragmentGet(activity, fm, null /*parentHint*/);
+      return fragmentGet(
+          activity, fm, /*parentHint=*/ null, isActivityVisible(activity));
     }
   }
 
+  @SuppressWarnings("deprecation")
   @NonNull
   public RequestManager get(@NonNull View view) {
     if (Util.isOnBackgroundThread()) {
@@ -229,6 +234,8 @@ private Fragment findSupportFragment(@NonNull View target, @NonNull FragmentActi
     return result;
   }
 
+  @SuppressWarnings({"deprecation", "DeprecatedIsStillUsed"})
+  @Deprecated
   @Nullable
   private android.app.Fragment findFragment(@NonNull View target, @NonNull Activity activity) {
     tempViewToFragment.clear();
@@ -255,6 +262,8 @@ private Fragment findSupportFragment(@NonNull View target, @NonNull FragmentActi
 
   // TODO: Consider using an accessor class in the support library package to more directly retrieve
   // non-support Fragments.
+  @SuppressWarnings("deprecation")
+  @Deprecated
   @TargetApi(Build.VERSION_CODES.O)
   private void findAllFragmentsWithViews(
       @NonNull android.app.FragmentManager fragmentManager,
@@ -271,6 +280,8 @@ private void findAllFragmentsWithViews(
     }
   }
 
+  @SuppressWarnings("deprecation")
+  @Deprecated
   private void findAllFragmentsWithViewsPreO(
       @NonNull android.app.FragmentManager fragmentManager,
       @NonNull ArrayMap<View, android.app.Fragment> result) {
@@ -313,6 +324,8 @@ private static void assertNotDestroyed(@NonNull Activity activity) {
     }
   }
 
+  @SuppressWarnings("deprecation")
+  @Deprecated
   @NonNull
   @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
   public RequestManager get(@NonNull android.app.Fragment fragment) {
@@ -324,19 +337,33 @@ public RequestManager get(@NonNull android.app.Fragment fragment) {
       return get(fragment.getActivity().getApplicationContext());
     } else {
       android.app.FragmentManager fm = fragment.getChildFragmentManager();
-      return fragmentGet(fragment.getActivity(), fm, fragment);
+      return fragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());
     }
   }
 
+  @SuppressWarnings("deprecation")
+  @Deprecated
   @NonNull
-  RequestManagerFragment getRequestManagerFragment(
-      @NonNull final android.app.FragmentManager fm, @Nullable android.app.Fragment parentHint) {
+  RequestManagerFragment getRequestManagerFragment(Activity activity) {
+    return getRequestManagerFragment(
+        activity.getFragmentManager(), /*parentHint=*/ null, isActivityVisible(activity));
+  }
+
+  @SuppressWarnings("deprecation")
+  @NonNull
+  private RequestManagerFragment getRequestManagerFragment(
+      @NonNull final android.app.FragmentManager fm,
+      @Nullable android.app.Fragment parentHint,
+      boolean isParentVisible) {
     RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);
     if (current == null) {
       current = pendingRequestManagerFragments.get(fm);
       if (current == null) {
         current = new RequestManagerFragment();
         current.setParentFragmentHint(parentHint);
+        if (isParentVisible) {
+          current.getGlideLifecycle().onStart();
+        }
         pendingRequestManagerFragments.put(fm, current);
         fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();
         handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();
@@ -345,11 +372,14 @@ RequestManagerFragment getRequestManagerFragment(
     return current;
   }
 
+  @SuppressWarnings({"deprecation", "DeprecatedIsStillUsed"})
+  @Deprecated
   @NonNull
   private RequestManager fragmentGet(@NonNull Context context,
       @NonNull android.app.FragmentManager fm,
-      @Nullable android.app.Fragment parentHint) {
-    RequestManagerFragment current = getRequestManagerFragment(fm, parentHint);
+      @Nullable android.app.Fragment parentHint,
+      boolean isParentVisible) {
+    RequestManagerFragment current = getRequestManagerFragment(fm, parentHint, isParentVisible);
     RequestManager requestManager = current.getRequestManager();
     if (requestManager == null) {
       // TODO(b/27524013): Factor out this Glide.get() call.
@@ -363,8 +393,20 @@ private RequestManager fragmentGet(@NonNull Context context,
   }
 
   @NonNull
-  SupportRequestManagerFragment getSupportRequestManagerFragment(
-      @NonNull final FragmentManager fm, @Nullable Fragment parentHint) {
+  SupportRequestManagerFragment getSupportRequestManagerFragment(FragmentActivity activity) {
+    return getSupportRequestManagerFragment(
+        activity.getSupportFragmentManager(), /*parentHint=*/ null, isActivityVisible(activity));
+  }
+
+  private static boolean isActivityVisible(Activity activity) {
+    // This is a poor heuristic, but it's about all we have. We'd rather err on the side of visible
+    // and start requests than on the side of invisible and ignore valid requests.
+    return !activity.isFinishing();
+  }
+
+  @NonNull
+  private SupportRequestManagerFragment getSupportRequestManagerFragment(
+      @NonNull final FragmentManager fm, @Nullable Fragment parentHint, boolean isParentVisible) {
     SupportRequestManagerFragment current =
         (SupportRequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);
     if (current == null) {
@@ -372,6 +414,9 @@ SupportRequestManagerFragment getSupportRequestManagerFragment(
       if (current == null) {
         current = new SupportRequestManagerFragment();
         current.setParentFragmentHint(parentHint);
+        if (isParentVisible) {
+          current.getGlideLifecycle().onStart();
+        }
         pendingSupportRequestManagerFragments.put(fm, current);
         fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();
         handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget();
@@ -381,9 +426,13 @@ SupportRequestManagerFragment getSupportRequestManagerFragment(
   }
 
   @NonNull
-  private RequestManager supportFragmentGet(@NonNull Context context, @NonNull FragmentManager fm,
-      @Nullable Fragment parentHint) {
-    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm, parentHint);
+  private RequestManager supportFragmentGet(
+      @NonNull Context context,
+      @NonNull FragmentManager fm,
+      @Nullable Fragment parentHint,
+      boolean isParentVisible) {
+    SupportRequestManagerFragment current =
+        getSupportRequestManagerFragment(fm, parentHint, isParentVisible);
     RequestManager requestManager = current.getRequestManager();
     if (requestManager == null) {
       // TODO(b/27524013): Factor out this Glide.get() call.
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
index 45fa25c17..d654f2a1c 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
@@ -3,6 +3,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
+import android.util.Log;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.util.Util;
 import java.util.ArrayList;
@@ -17,6 +18,7 @@
  * <p>This class is not thread safe and must be accessed on the main thread.
  */
 public class RequestTracker {
+  private static final String TAG = "RequestTracker";
   // Most requests will be for views and will therefore be held strongly (and safely) by the view
   // via the tag. However, a user can always pass in a different type of target which may end up not
   // being strongly referenced even though the user still would like the request to finish. Weak
@@ -41,6 +43,9 @@ public void runRequest(@NonNull Request request) {
     if (!isPaused) {
       request.begin();
     } else {
+      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        Log.v(TAG, "Paused, delaying request");
+      }
       pendingRequests.add(request);
     }
   }
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index b6b2f28dc..7c764cbbc 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -142,8 +142,8 @@ private boolean isDescendant(@NonNull Fragment fragment) {
 
   private void registerFragmentWithRoot(@NonNull FragmentActivity activity) {
     unregisterFragmentWithRoot();
-    rootRequestManagerFragment = Glide.get(activity).getRequestManagerRetriever()
-        .getSupportRequestManagerFragment(activity.getSupportFragmentManager(), null);
+    rootRequestManagerFragment =
+        Glide.get(activity).getRequestManagerRetriever().getSupportRequestManagerFragment(activity);
     if (!equals(rootRequestManagerFragment)) {
       rootRequestManagerFragment.addChildRequestManagerFragment(this);
     }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index 4e416b649..e46188c9e 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -32,9 +32,9 @@
 import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;
 import com.bumptech.glide.load.resource.gif.GifOptions;
 import com.bumptech.glide.signature.EmptySignature;
+import com.bumptech.glide.util.CachedHashCodeArrayMap;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
-import java.util.HashMap;
 import java.util.Map;
 
 /**
@@ -106,7 +106,7 @@
   @NonNull
   private Options options = new Options();
   @NonNull
-  private Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
+  private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();
   @NonNull
   private Class<?> resourceClass = Object.class;
   private boolean isLocked;
@@ -822,7 +822,7 @@ public RequestOptions clone() {
       RequestOptions result = (RequestOptions) super.clone();
       result.options = new Options();
       result.options.putAll(options);
-      result.transformations = new HashMap<>();
+      result.transformations = new CachedHashCodeArrayMap<>();
       result.transformations.putAll(transformations);
       result.isLocked = false;
       result.isAutoCloneEnabled = false;
@@ -968,7 +968,7 @@ public RequestOptions disallowHardwareConfig() {
   @NonNull
   @CheckResult
   public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));
+    return set(DownsampleStrategy.OPTION, Preconditions.checkNotNull(strategy));
   }
 
   /**
diff --git a/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java b/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java
new file mode 100644
index 000000000..ff9573a84
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/CachedHashCodeArrayMap.java
@@ -0,0 +1,56 @@
+package com.bumptech.glide.util;
+
+import android.support.v4.util.ArrayMap;
+import android.support.v4.util.SimpleArrayMap;
+
+/**
+ * An {@link ArrayMap} that caches its hashCode to support efficient lookup.
+ *
+ * @param <K> the key type.
+ * @param <V> the value type.
+ */
+// We're overriding hashcode, but not in a way that changes the output, so we don't need to
+// override equals.
+@SuppressWarnings("PMD.OverrideBothEqualsAndHashcode")
+public final class CachedHashCodeArrayMap<K, V> extends ArrayMap<K, V> {
+
+  private int hashCode;
+
+  @Override
+  public void clear() {
+    hashCode = 0;
+    super.clear();
+  }
+
+  @Override
+  public V setValueAt(int index, V value) {
+    hashCode = 0;
+    return super.setValueAt(index, value);
+  }
+
+  @Override
+  public V put(K key, V value) {
+    hashCode = 0;
+    return super.put(key, value);
+  }
+
+  @Override
+  public void putAll(SimpleArrayMap<? extends K, ? extends V> simpleArrayMap) {
+    hashCode = 0;
+    super.putAll(simpleArrayMap);
+  }
+
+  @Override
+  public V removeAt(int index) {
+    hashCode = 0;
+    return super.removeAt(index);
+  }
+
+  @Override
+  public int hashCode() {
+    if (hashCode == 0) {
+      hashCode = super.hashCode();
+    }
+    return hashCode;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/util/pool/GlideTrace.java b/library/src/main/java/com/bumptech/glide/util/pool/GlideTrace.java
new file mode 100644
index 000000000..78c4f0fa3
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/util/pool/GlideTrace.java
@@ -0,0 +1,56 @@
+package com.bumptech.glide.util.pool;
+
+import android.support.v4.os.TraceCompat;
+
+/**
+ * Systracing utilities for Glide.
+ */
+public final class GlideTrace {
+
+  // Enable this locally to see tracing statements.
+  private static final boolean TRACING_ENABLED = false;
+
+  /** Maximum length of a systrace tag. */
+  private static final int MAX_LENGTH = 127;
+
+  private GlideTrace() {
+    // Utility class.
+  }
+
+  private static String truncateTag(String tag) {
+    if (tag.length() > MAX_LENGTH) {
+      return tag.substring(0, MAX_LENGTH - 1);
+    }
+    return tag;
+  }
+
+  public static void beginSection(String tag) {
+    if (TRACING_ENABLED) {
+      TraceCompat.beginSection(truncateTag(tag));
+    }
+  }
+
+  public static void beginSectionFormat(String format, Object arg1) {
+    if (TRACING_ENABLED) {
+      TraceCompat.beginSection(truncateTag(String.format(format, arg1)));
+    }
+  }
+
+  public static void beginSectionFormat(String format, Object arg1, Object arg2) {
+    if (TRACING_ENABLED) {
+      TraceCompat.beginSection(truncateTag(String.format(format, arg1, arg2)));
+    }
+  }
+
+  public static void beginSectionFormat(String format, Object arg1, Object arg2, Object arg3) {
+    if (TRACING_ENABLED) {
+      TraceCompat.beginSection(truncateTag(String.format(format, arg1, arg2, arg3)));
+    }
+  }
+
+  public static void endSection() {
+    if (TRACING_ENABLED) {
+      TraceCompat.endSection();
+    }
+  }
+}
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
index 1c037b2f5..6b7be90f6 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruArrayPoolTest.java
@@ -2,6 +2,7 @@
 
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -74,6 +75,11 @@ public void testTrimMemoryUiHiddenOrLessRemovesHalfOfArrays() {
     testTrimMemory(MAX_SIZE, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
   }
 
+  @Test
+  public void testTrimMemoryRunningCriticalRemovesHalfOfBitmaps() {
+    testTrimMemory(MAX_SIZE, TRIM_MEMORY_RUNNING_CRITICAL, MAX_SIZE / 2);
+  }
+
   @Test
   public void testTrimMemoryUiHiddenOrLessRemovesNoArraysIfPoolLessThanHalfFull() {
     testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
index 0b452c214..e199738c9 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPoolTest.java
@@ -2,6 +2,7 @@
 
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
+import static android.content.ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
 import static android.content.ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -102,6 +103,11 @@ public void testTrimMemoryUiHiddenOrLessRemovesHalfOfBitmaps() {
     testTrimMemory(MAX_SIZE, TRIM_MEMORY_UI_HIDDEN, MAX_SIZE / 2);
   }
 
+  @Test
+  public void testTrimMemoryRunningCriticalRemovesHalfOfBitmaps() {
+    testTrimMemory(MAX_SIZE, TRIM_MEMORY_RUNNING_CRITICAL, MAX_SIZE / 2);
+  }
+
   @Test
   public void testTrimMemoryUiHiddenOrLessRemovesNoBitmapsIfPoolLessThanHalfFull() {
     testTrimMemory(MAX_SIZE / 2, TRIM_MEMORY_UI_HIDDEN, 0);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
index 8d8e43b1f..22b76cfc1 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/engine/cache/LruResourceCacheTest.java
@@ -105,6 +105,16 @@ public void testTrimMemoryUiHidden() {
     verify(harness.listener, never()).onResourceRemoved(harness.second);
   }
 
+  @Test
+  public void testTrimMemoryRunningCritical() {
+    TrimClearMemoryCacheHarness harness = new TrimClearMemoryCacheHarness();
+
+    harness.resourceCache.trimMemory(ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL);
+
+    verify(harness.listener).onResourceRemoved(harness.first);
+    verify(harness.listener, never()).onResourceRemoved(harness.second);
+  }
+
   @Test
   public void testResourceRemovedListenerIsNotifiedWhenResourceIsRemoved() {
     LruResourceCache resourceCache = new LruResourceCache(100);
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
index ab3ebc56a..58b6557f6 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/bitmap/VideoDecoderTest.java
@@ -107,7 +107,16 @@ public void testDoesNotSpecifyThumbnailFrameIfCalledWithoutFrameNumber() throws
 
   @Test
   public void getScaledFrameAtTime() throws IOException {
+    // Anything other than NONE.
+    options.set(DownsampleStrategy.OPTION, DownsampleStrategy.AT_LEAST);
+
     Bitmap expected = Bitmap.createBitmap(100, 100, Bitmap.Config.ARGB_8888);
+    when(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH))
+        .thenReturn("100");
+    when(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT))
+        .thenReturn("100");
+    when(retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION))
+        .thenReturn("0");
     when(retriever.getScaledFrameAtTime(-1, MediaMetadataRetriever.OPTION_CLOSEST_SYNC, 100, 100))
         .thenReturn(expected);
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 1a2187ed6..1fae53bbc 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -42,6 +42,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
@@ -563,7 +564,12 @@ public void testSetAlphaSetsAlphaOnPaint() {
   public void testSetColorFilterSetsColorFilterOnPaint() {
     ColorFilter colorFilter = new PorterDuffColorFilter(Color.RED, Mode.ADD);
     drawable.setColorFilter(colorFilter);
-    verify(paint).setColorFilter(eq(colorFilter));
+
+    // Use ArgumentCaptor instead of eq() due to b/73121412 where ShadowPorterDuffColorFilter.equals
+    // uses a method that can't be found (PorterDuffColorFilter.getColor).
+    ArgumentCaptor<ColorFilter> captor = ArgumentCaptor.forClass(ColorFilter.class);
+    verify(paint).setColorFilter(captor.capture());
+    assertThat(captor.getValue()).isSameAs(colorFilter);
   }
 
   @Test
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
index 65b63694e..191f02309 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
@@ -148,6 +148,7 @@ private void runTest(TestCase testCase) {
     void onTrimMemory(@SuppressWarnings("SameParameterValue") int level);
   }
 
+  @SuppressWarnings("deprecation")
   private static class RequestManagerHarness implements Harness {
     private final ActivityController<Activity> controller;
     private final RequestManagerFragment fragment;
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
index 79c5bd9f8..dd07da813 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestManagerRetrieverTest.java
@@ -134,6 +134,7 @@ public void testSupportCanGetRequestManagerFromActivity() {
     assertEquals(manager, retriever.get(fragmentActivity));
   }
 
+  @SuppressWarnings("deprecation")
   @Test
   public void testCanGetRequestManagerFromFragment() {
     Activity activity = Robolectric.buildActivity(Activity.class).create().start().resume().get();
@@ -168,6 +169,7 @@ public void testCanGetRequestManagerFromDetachedFragment_PreJellyBeanMr1() {
     helpTestCanGetRequestManagerFromDetachedFragment();
   }
 
+  @SuppressWarnings("deprecation")
   private void helpTestCanGetRequestManagerFromDetachedFragment() {
     Activity activity = Robolectric.buildActivity(Activity.class).create().start().resume().get();
     android.app.Fragment fragment = new android.app.Fragment();
@@ -202,6 +204,7 @@ private void helpTestSupportCanGetRequestManagerFromDetachedFragment() {
     retriever.get(fragment);
   }
 
+  @SuppressWarnings("deprecation")
   @Test(expected = IllegalArgumentException.class)
   public void testThrowsIfFragmentNotAttached() {
     android.app.Fragment fragment = new android.app.Fragment();
@@ -319,6 +322,7 @@ public void testDoesNotThrowIfAskedToGetManagerForActivityPreJellYBeanMr1() {
     assertNotNull(retriever.get(spyActivity));
   }
 
+  @SuppressWarnings("deprecation")
   @Test
   @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
   public void testDoesNotThrowIfAskedToGetManagerForFragmentPreJellyBeanMr1() {
@@ -376,6 +380,7 @@ public boolean hasFragmentWithTag(String tag) {
           .findFragmentByTag(RequestManagerRetriever.FRAGMENT_TAG);
     }
 
+    @SuppressWarnings("deprecation")
     @Override
     public void addFragmentWithTag(String tag, RequestManager requestManager) {
       RequestManagerFragment fragment = new RequestManagerFragment();
diff --git a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
index afff35212..825ac1bce 100644
--- a/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/manager/RequestTrackerTest.java
@@ -14,12 +14,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 
-@RunWith(JUnit4.class)
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
 public class RequestTrackerTest {
   private RequestTracker tracker;
 
diff --git a/settings.gradle b/settings.gradle
index 464936b4e..360b59b47 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,5 +1,6 @@
 exec {
     commandLine "git", "submodule", "update", "--init", "--recursive"
+    ignoreExitValue true
 }
 include ':library'
 include ':library:pmd'
