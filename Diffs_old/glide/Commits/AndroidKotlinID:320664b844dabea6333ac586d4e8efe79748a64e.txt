diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index dea6e476f..41b9eb986 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -121,9 +121,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -131,8 +130,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index 24e38fddb..5cdd03bec 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -124,9 +124,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -134,8 +133,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index 48a2d8bd4..10605ac8e 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index 0fe0aa379..0fa5e1aa2 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -122,8 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index bd338d637..41baaf8ff 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index 1baed9ffa..9e4a0f16c 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 32c1ab8b8..872ab87ed 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index 25d649038..311b65c3a 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index bedefc889..74ffc0dc0 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -122,9 +122,8 @@ public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
+  public static GlideOptions overrideOf(int width, int height) {
+    return new GlideOptions().override(width, height);
   }
 
   /**
@@ -132,8 +131,8 @@ public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
    */
   @CheckResult
   @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
+  public static GlideOptions overrideOf(int size) {
+    return new GlideOptions().override(size);
   }
 
   /**
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
index 033aecfec..9292a7ec8 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/DrawableTransformationTest.java
@@ -13,6 +13,8 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.os.Looper;
 import androidx.test.InstrumentationRegistry;
 import androidx.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
@@ -20,7 +22,9 @@
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.test.BitmapSubject;
 import com.bumptech.glide.test.GlideApp;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -117,6 +121,26 @@ public void load_withColorDrawable_sizeOriginal_requiredTransform_fails()
       throws ExecutionException, InterruptedException {
     final Drawable colorDrawable = new ColorDrawable(Color.RED);
 
+    // The following section is a hack to workaround a weird behavior where a post in RequestManager
+    // can cause a failed request to be started twice in a row if the first attempt happens before.
+    // the post. This seems rather unlikely to happen in real applications and it only occurs when
+    // the request fails unexpectedly, so we're working around this weird behavior in this test.
+    // See #3551.
+
+    // Trigger the Glide application RequestManager to be created.
+    Glide.get(context).getRequestManagerRetriever().get(context);
+    // Wait until it's added as a lifecycle observer.
+    final CountDownLatch latch = new CountDownLatch(1);
+    new Handler(Looper.getMainLooper()).post(new Runnable() {
+      @Override
+      public void run() {
+        latch.countDown();
+      }
+    });
+    latch.await(5, TimeUnit.SECONDS);
+
+    // End hacks.
+
     assertThrows(
         ExecutionException.class,
         new ThrowingRunnable() {
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 8691928f6..a4ceab042 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -267,7 +267,15 @@ private static void initializeGlide(@NonNull Context context, @NonNull GlideBuil
     }
     Glide glide = builder.build(applicationContext);
     for (com.bumptech.glide.module.GlideModule module : manifestModules) {
-      module.registerComponents(applicationContext, glide, glide.registry);
+      try {
+        module.registerComponents(applicationContext, glide, glide.registry);
+      } catch (AbstractMethodError e) {
+        throw new IllegalStateException(
+            "Attempting to register a Glide v3 module. If you see this, you or one of your"
+                + " dependencies may be including Glide v3 even though you're using Glide v4."
+                + " You'll need to find and remove (or update) the offending dependency."
+                + " The v3 module name is: " + module.getClass().getName(), e);
+      }
     }
     if (annotationGeneratedModule != null) {
       annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry);
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
index 7749477ac..ed01c158d 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpener.java
@@ -90,13 +90,19 @@ public InputStream open(Uri uri) throws FileNotFoundException {
 
   @Nullable
   private String getPath(@NonNull Uri uri) {
-    final Cursor cursor = query.query(uri);
+    Cursor cursor = null;
     try {
+      cursor = query.query(uri);
       if (cursor != null && cursor.moveToFirst()) {
         return cursor.getString(0);
       } else {
         return null;
       }
+    } catch (SecurityException e) {
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to query for thumbnail for Uri: " + uri, e);
+      }
+      return null;
     } finally {
       if (cursor != null) {
         cursor.close();
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index f712ce726..8a255d412 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -135,9 +135,7 @@ public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
   @SuppressWarnings("WeakerAccess") // Public API
   @NonNull
   @CheckResult
-  public static RequestOptions overrideOf(
-      @IntRange(from = 0) int width,
-      @IntRange(from = 0) int height) {
+  public static RequestOptions overrideOf(int width, int height) {
     return new RequestOptions().override(width, height);
   }
 
@@ -148,7 +146,7 @@ public static RequestOptions overrideOf(
   @SuppressWarnings("WeakerAccess") // Public API
   @NonNull
   @CheckResult
-  public static RequestOptions overrideOf(@IntRange(from = 0) int size) {
+  public static RequestOptions overrideOf(int size) {
     return overrideOf(size, size);
   }
 
diff --git a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
index 7c25a0580..903ebeea6 100644
--- a/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/load/data/mediastore/ThumbnailStreamOpenerTest.java
@@ -1,8 +1,10 @@
 package com.bumptech.glide.load.data.mediastore;
 
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -89,6 +91,12 @@ public void testReturnsOpenedInputStreamWhenFileFound() throws FileNotFoundExcep
     assertEquals(expected, harness.get().open(harness.uri));
   }
 
+  @Test
+  public void open_returnsNull_whenQueryThrowsSecurityException() throws FileNotFoundException {
+    when(harness.query.query(any(Uri.class))).thenThrow(new SecurityException());
+    assertThat(harness.get().open(harness.uri)).isNull();
+  }
+
   @Test
   public void testVideoQueryReturnsVideoCursor() {
     Uri queryUri = MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI;
@@ -123,7 +131,7 @@ private static ContentResolver getContentResolver() {
     final FileService service = mock(FileService.class);
     final ArrayPool byteArrayPool = new LruArrayPool();
 
-    public Harness() {
+    Harness() {
       cursor.addRow(new String[] { file.getAbsolutePath() });
       when(query.query(eq(uri))).thenReturn(cursor);
       when(service.get(eq(file.getAbsolutePath()))).thenReturn(file);
