diff --git a/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
index e7f446ca5..3a03d37b1 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
 import android.text.TextUtils;
 import java.util.ArrayList;
@@ -132,7 +133,7 @@ public int hashCode() {
      *
      * @see #addHeader(String, LazyHeaderFactory)
      */
-    public Builder addHeader(String key, String value) {
+    public Builder addHeader(@NonNull String key, @NonNull String value) {
       return addHeader(key, new StringHeaderFactory(value));
     }
 
@@ -146,7 +147,7 @@ public Builder addHeader(String key, String value) {
      * <p> This class does not prevent you from adding the same value to a given key multiple
      * times </p>
      */
-    public Builder addHeader(String key, LazyHeaderFactory factory) {
+    public Builder addHeader(@NonNull String key, @NonNull LazyHeaderFactory factory) {
       if (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key)) {
         return setHeader(key, factory);
       }
@@ -166,7 +167,7 @@ public Builder addHeader(String key, LazyHeaderFactory factory) {
      * (i.e. an OAuth token). </p>
      */
     @SuppressWarnings({"UnusedReturnValue", "WeakerAccess"}) // Public API
-    public Builder setHeader(String key, String value) {
+    public Builder setHeader(@NonNull String key, @Nullable String value) {
       return setHeader(key, value == null ? null : new StringHeaderFactory(value));
     }
 
@@ -176,7 +177,7 @@ public Builder setHeader(String key, String value) {
      *
      * <p> If the given value is {@code null}, the header at the given key will be removed. </p>
      */
-    public Builder setHeader(String key, LazyHeaderFactory factory) {
+    public Builder setHeader(@NonNull String key, @Nullable LazyHeaderFactory factory) {
       copyIfNecessary();
       if (factory == null) {
         headers.remove(key);
@@ -255,9 +256,10 @@ static String getSanitizedUserAgent() {
 
   static final class StringHeaderFactory implements LazyHeaderFactory {
 
+    @NonNull
     private final String value;
 
-    StringHeaderFactory(String value) {
+    StringHeaderFactory(@NonNull String value) {
       this.value = value;
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Rotate.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Rotate.java
new file mode 100644
index 000000000..e732f48dc
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Rotate.java
@@ -0,0 +1,55 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.util.Util;
+import java.nio.ByteBuffer;
+import java.security.MessageDigest;
+
+/**
+ * A {@link BitmapTransformation} which rotates the bitmap.
+ */
+public class Rotate extends BitmapTransformation {
+  private static final String ID = "com.bumptech.glide.load.resource.bitmap.Rotate";
+  private static final byte[] ID_BYTES = ID.getBytes(CHARSET);
+
+  private final int degreesToRotate;
+
+  /**
+    * @param degreesToRotate number of degrees to rotate the image by. If zero the original image is
+    *                        not modified.
+   */
+  public Rotate(int degreesToRotate) {
+    this.degreesToRotate = degreesToRotate;
+  }
+
+  @Override
+  protected Bitmap transform(
+      @NonNull BitmapPool pool, @NonNull Bitmap toTransform, int outWidth, int outHeight) {
+    return TransformationUtils.rotateImage(toTransform, degreesToRotate);
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (o instanceof Rotate) {
+      Rotate other = (Rotate) o;
+      return degreesToRotate == other.degreesToRotate;
+    }
+    return false;
+  }
+
+  @Override
+  public int hashCode() {
+    return Util.hashCode(ID.hashCode(),
+            Util.hashCode(degreesToRotate));
+  }
+
+  @Override
+  public void updateDiskCacheKey(@NonNull MessageDigest messageDigest) {
+    messageDigest.update(ID_BYTES);
+
+    byte[] degreesData = ByteBuffer.allocate(4).putInt(degreesToRotate).array();
+    messageDigest.update(degreesData);
+  }
+}
