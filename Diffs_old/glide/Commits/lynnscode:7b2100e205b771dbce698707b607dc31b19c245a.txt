diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 311258207..b6001b7a6 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -428,7 +428,9 @@ Glide build(@NonNull Context context) {
     if (engine == null) {
       engine =
           new Engine(
+              //内存缓存
               memoryCache,
+              //本地缓存
               diskCacheFactory,
               diskCacheExecutor,
               sourceExecutor,
@@ -442,7 +444,9 @@ Glide build(@NonNull Context context) {
 
     return new Glide(
         context,
+        //引擎类
         engine,
+        //内存缓存
         memoryCache,
         bitmapPool,
         arrayPool,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
index 18afb52f0..e12b09ba5 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/InternalCacheDiskCacheFactory.java
@@ -12,19 +12,26 @@
 public final class InternalCacheDiskCacheFactory extends DiskLruCacheFactory {
 
   public InternalCacheDiskCacheFactory(Context context) {
-    this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR,
-        DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
+
+    this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
   }
 
   public InternalCacheDiskCacheFactory(Context context, long diskCacheSize) {
     this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, diskCacheSize);
   }
 
+  /**
+   * 初始化sd卡缓存
+   * @param context
+   * @param diskCacheName 缓存文件夹名称 默认缓存文件夹名称 image_manager_disk_cache
+   * @param diskCacheSize 缓存大小 默认大小为250M
+   */
   public InternalCacheDiskCacheFactory(final Context context, final String diskCacheName,
                                        long diskCacheSize) {
     super(new CacheDirectoryGetter() {
       @Override
       public File getCacheDirectory() {
+        //缓存路径
         File cacheDirectory = context.getCacheDir();
         if (cacheDirectory == null) {
           return null;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
index 1418c466b..870cb704a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
@@ -105,8 +105,11 @@ public int getArrayPoolSizeInBytes() {
 
   private static int getMaxSize(ActivityManager activityManager, float maxSizeMultiplier,
       float lowMemoryMaxSizeMultiplier) {
+    //每个进程的最大可用内存
     final int memoryClassBytes = activityManager.getMemoryClass() * 1024 * 1024;
+    //判断是否是低内存设备,低版本系统(低于4.4)的手机默认是true
     final boolean isLowMemoryDevice = isLowMemoryDevice(activityManager);
+    //如果是低内存设备则最多使用内存的33% 否则可以使用40%
     return Math.round(memoryClassBytes * (isLowMemoryDevice ? lowMemoryMaxSizeMultiplier
         : maxSizeMultiplier));
   }
@@ -115,6 +118,7 @@ private String toMb(int bytes) {
     return Formatter.formatFileSize(context, bytes);
   }
 
+  //是否是低内存设备
   @TargetApi(Build.VERSION_CODES.KITKAT)
   @Synthetic static boolean isLowMemoryDevice(ActivityManager activityManager) {
     // Explicitly check with an if statement, on some devices both parts of boolean expressions
