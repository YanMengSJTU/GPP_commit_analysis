diff --git a/.gitignore b/.gitignore
index 6a64b1779..fc8c263ba 100644
--- a/.gitignore
+++ b/.gitignore
@@ -19,6 +19,9 @@ docs/**/*
 *.swp
 *.swo
 
+# sed
+*.bak
+
 # Intellij 
 *.ipr
 *.iml
diff --git a/.travis.yml b/.travis.yml
index 1f9859851..0eee13f28 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -24,7 +24,6 @@ env:
     - COMPONENT=instrumentation ANDROID_TARGET=17
     - COMPONENT=instrumentation ANDROID_TARGET=18
     - COMPONENT=instrumentation ANDROID_TARGET=19
-    - COMPONENT=instrumentation ANDROID_TARGET=20
     - COMPONENT=instrumentation ANDROID_TARGET=21
     - COMPONENT=instrumentation ANDROID_TARGET=22
     - COMPONENT=samples
diff --git a/checkstyle_suppressions.xml b/checkstyle_suppressions.xml
index 0293de43a..e9fb1ebcb 100644
--- a/checkstyle_suppressions.xml
+++ b/checkstyle_suppressions.xml
@@ -6,6 +6,7 @@
 
 <suppressions>
     <suppress files=".*[/\\]library[/\\]src[/\\]test[/\\].*" checks="Javadoc.*"/>
+    <suppress files=".*[/\\]instrumentation[/\\]src[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*" checks="Javadoc.*"/>
     <suppress files=".*[/\\]instrumentation[/\\]src[/\\]androidTest[/\\].*[/\\]ResourceIds" checks=".*"/>
     <suppress files=".*[/\\]gif_encoder[/\\].*" checks=".*"/>
diff --git a/instrumentation/build.gradle b/instrumentation/build.gradle
index 6f2fc3073..0c123b439 100644
--- a/instrumentation/build.gradle
+++ b/instrumentation/build.gradle
@@ -1,3 +1,8 @@
+tasks.whenTaskAdded { task ->
+    if (task.name.equals("lint")) {
+        task.enabled = false
+    }
+}
 apply plugin: 'com.android.application'
 
 dependencies {
@@ -5,6 +10,7 @@ dependencies {
     // loading classes functions. It's not clear why androidTestCompile isn't sufficient, but for
     // whatever reason, compile is the only dependency that seems to work.
     compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    androidTestCompile project(":annotation:compiler")
     androidTestCompile project(':library')
     androidTestCompile "org.mockito:mockito-android:${MOCKITO_ANDROID_VERSION}"
     androidTestCompile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
diff --git a/instrumentation/src/androidTest/AndroidManifest.xml b/instrumentation/src/androidTest/AndroidManifest.xml
new file mode 100644
index 000000000..f9088f24f
--- /dev/null
+++ b/instrumentation/src/androidTest/AndroidManifest.xml
@@ -0,0 +1,6 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  package="com.bumptech.glide.instrumentation.test">
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+  <application>
+  </application>
+</manifest>
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
new file mode 100644
index 000000000..b7bedc067
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java
@@ -0,0 +1,121 @@
+package com.bumptech.glide;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import com.bumptech.glide.test.BitmapRegressionTester;
+import com.bumptech.glide.test.CanonicalBitmap;
+import com.bumptech.glide.test.GlideApp;
+import com.bumptech.glide.test.RegressionTest;
+import com.bumptech.glide.test.SplitByCpu;
+import com.bumptech.glide.test.SplitBySdk;
+import java.util.concurrent.ExecutionException;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.rules.TestName;
+import org.junit.runner.RunWith;
+
+@RunWith(AndroidJUnit4.class)
+@SplitByCpu
+@SplitBySdk({24, 23, 21, 19, 18, 16})
+@RegressionTest
+public class FitCenterRegressionTest {
+  @Rule public TestName testName = new TestName();
+  @Rule public ExpectedException expectedException = ExpectedException.none();
+  private BitmapRegressionTester bitmapRegressionTester;
+  private Context context;
+  private CanonicalBitmap canonical;
+
+  @Before
+  public void setUp() {
+    context = InstrumentationRegistry.getTargetContext();
+    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    canonical = new CanonicalBitmap();
+  }
+
+  @Test
+  public void fitCenter_withSquareSmallerThanImage_returnsSquareImage()
+      throws ExecutionException, InterruptedException {
+
+    Bitmap result =
+        bitmapRegressionTester.test(
+            GlideApp.with(context)
+                .asBitmap()
+                .load(canonical.getBitmap())
+                .fitCenter()
+                .override(50));
+
+    assertThat(result.getWidth()).isEqualTo(50);
+    assertThat(result.getHeight()).isEqualTo(37);
+  }
+
+  @Test
+  public void fitCenter_withSquareLargerThanImage_returnsUpscaledSquare()
+      throws ExecutionException, InterruptedException {
+    float multiplier = 1.1f;
+    int multipliedWidth = (int) (canonical.getWidth() * multiplier);
+    int multipliedHeight = (int) (canonical.getHeight() * multiplier);
+    Bitmap result =
+        bitmapRegressionTester.test(
+            GlideApp.with(context)
+              .asBitmap()
+              .load(canonical.getBitmap())
+              .fitCenter()
+              .override(multipliedWidth));
+
+    assertThat(result.getWidth()).isEqualTo(multipliedWidth);
+    assertThat(result.getHeight()).isEqualTo(multipliedHeight);
+  }
+
+  @Test
+  public void fitCenter_withNarrowRectangle_fitsWithinMaintainingAspectRatio()
+      throws ExecutionException, InterruptedException {
+    Bitmap result =
+        bitmapRegressionTester.test(
+            GlideApp.with(context)
+              .asBitmap()
+              .load(canonical.getBitmap())
+              .fitCenter()
+              .override(canonical.getWidth() / 10, canonical.getHeight()));
+
+    assertThat(result.getWidth()).isEqualTo(canonical.getWidth() / 10);
+    assertThat(result.getHeight()).isEqualTo(canonical.getHeight() / 10);
+  }
+
+  @Test
+  public void fitCenter_withShortRectangle_fitsWithinMaintainingAspectRatio()
+      throws ExecutionException, InterruptedException {
+     Bitmap result =
+        bitmapRegressionTester.test(
+            GlideApp.with(context)
+              .asBitmap()
+              .load(canonical.getBitmap())
+              .fitCenter()
+              .override(canonical.getWidth(), canonical.getHeight() / 2));
+
+    assertThat(result.getWidth()).isEqualTo(canonical.getWidth() / 2);
+    assertThat(result.getHeight()).isEqualTo(canonical.getHeight() / 2);
+  }
+
+  @Test
+  public void fitCenter_withHugeRectangle_throwsOOM()
+      throws ExecutionException, InterruptedException {
+    expectedException.expect(ExecutionException.class);
+    float multiplier = Integer.MAX_VALUE / (canonical.getWidth() * canonical.getHeight() * 2);
+    int overrideWidth = (int) multiplier * canonical.getWidth();
+    int overrideHeight = (int) multiplier * canonical.getHeight();
+    GlideApp
+        .with(context)
+        .asBitmap()
+        .load(canonical.getBitmap())
+        .fitCenter()
+        .override(overrideWidth, overrideHeight)
+        .submit()
+        .get();
+  }
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
index d7153958f..d4739bb18 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/NonBitmapDrawableResourcesTest.java
@@ -19,35 +19,30 @@
 import android.support.test.runner.AndroidJUnit4;
 import com.bumptech.glide.load.resource.bitmap.RoundedCorners;
 import com.bumptech.glide.test.ResourceIds;
+import com.bumptech.glide.test.TearDownGlide;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.rules.TestName;
 import org.junit.runner.RunWith;
 
 @RunWith(AndroidJUnit4.class)
 public class NonBitmapDrawableResourcesTest {
+  @Rule public TestName testName = new TestName();
+  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public ExpectedException expectedException = ExpectedException.none();
   private Context context;
 
-  @Rule
-  public ExpectedException expectedException = ExpectedException.none();
-
   @Before
   public void setUp() {
     context = InstrumentationRegistry.getTargetContext();
   }
 
-  @After
-  public void tearDown() {
-    Glide.get(context).clearDiskCache();
-    Glide.tearDown();
-  }
-
   @Test
   public void load_withBitmapResourceId_asDrawable_producesNonNullDrawable()
       throws ExecutionException, InterruptedException {
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/RoundedCornersRegressionTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/RoundedCornersRegressionTest.java
new file mode 100644
index 000000000..af7a58e3b
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/RoundedCornersRegressionTest.java
@@ -0,0 +1,97 @@
+package com.bumptech.glide;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import com.bumptech.glide.load.resource.bitmap.RoundedCorners;
+import com.bumptech.glide.test.BitmapRegressionTester;
+import com.bumptech.glide.test.CanonicalBitmap;
+import com.bumptech.glide.test.GlideApp;
+import com.bumptech.glide.test.RegressionTest;
+import com.bumptech.glide.test.SplitByCpu;
+import com.bumptech.glide.test.SplitBySdk;
+import com.bumptech.glide.test.TearDownGlide;
+import java.util.concurrent.ExecutionException;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestName;
+import org.junit.rules.TestRule;
+import org.junit.runner.RunWith;
+
+/**
+ * Compares the output of RoundedCorners with canonical resource files for all SDKs Glide supports
+ * and fails on deltas.
+ */
+@RunWith(AndroidJUnit4.class)
+@SplitByCpu
+@SplitBySdk({26, 24, 23, 21, 19, 18, 16})
+@RegressionTest
+public class RoundedCornersRegressionTest {
+  @Rule public TestRule tearDownGlide = new TearDownGlide();
+  @Rule public TestName testName = new TestName();
+
+  private Context context;
+  private BitmapRegressionTester bitmapRegressionTester;
+  private CanonicalBitmap canonicalBitmap;
+
+  @Before
+  public void setUp() throws Exception {
+    context = InstrumentationRegistry.getTargetContext();
+    bitmapRegressionTester = new BitmapRegressionTester(getClass(), testName);
+    canonicalBitmap = new CanonicalBitmap();
+  }
+
+  @Test
+  public void testRoundedCorners() throws ExecutionException, InterruptedException {
+    bitmapRegressionTester.test(
+        GlideApp.with(context)
+            .asBitmap()
+            .load(canonicalBitmap.getBitmap())
+            .transform(new RoundedCorners(5)));
+  }
+
+  @Test
+  public void testRoundedCorners_usePool() throws ExecutionException, InterruptedException {
+    canonicalBitmap = canonicalBitmap.scale(0.1f);
+
+    Bitmap redRect =
+        createRect(
+            Color.RED,
+            canonicalBitmap.getWidth(),
+            canonicalBitmap.getHeight(),
+            Bitmap.Config.ARGB_8888);
+
+    Glide.get(context).getBitmapPool().put(redRect);
+
+    Bitmap roundedRect = bitmapRegressionTester.test(
+        GlideApp.with(context)
+            .asBitmap()
+            .load(canonicalBitmap.getBitmap())
+            .override(canonicalBitmap.getWidth(), canonicalBitmap.getHeight())
+            .transform(new RoundedCorners(5)));
+
+    assertThat(roundedRect).isEqualTo(redRect);
+  }
+
+  @Test
+  public void testRoundedCorners_overRounded() throws ExecutionException, InterruptedException {
+    bitmapRegressionTester.test(
+        GlideApp.with(context)
+            .asBitmap()
+            .load(canonicalBitmap.getBitmap())
+            .transform(new RoundedCorners(20)));
+  }
+
+  private Bitmap createRect(int color, int width, int height, Bitmap.Config config) {
+    final Bitmap result = Bitmap.createBitmap(width, height, config);
+    Canvas canvas = new Canvas(result);
+    canvas.drawColor(color);
+    return result;
+  }
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
deleted file mode 100644
index 85a97967b..000000000
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/bitmap/TransformationUtilsTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package com.bumptech.glide.load.resource.bitmap;
-
-import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assume.assumeTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.Bitmap.Config;
-import android.graphics.BitmapFactory;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.os.Build;
-import android.os.Build.VERSION_CODES;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
-import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
-import com.bumptech.glide.test.ResourceIds;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-/**
- * Emulator tests for Glide transformation utilities.
- */
-@RunWith(AndroidJUnit4.class)
-public class TransformationUtilsTest {
-  private BitmapPool bitmapPool;
-  private Context context;
-
-  @Before
-  public void setUp() throws Exception {
-    bitmapPool = new BitmapPoolAdapter();
-    context = InstrumentationRegistry.getTargetContext();
-    // TODO: Add Android API specific resources that work > API 16.
-    assumeTrue(Build.VERSION.SDK_INT <= VERSION_CODES.JELLY_BEAN);
-  }
-
-  @Test
-  public void testRoundedCorners() {
-    int width = 20;
-    int height = 30;
-    Bitmap blueRect = createRect(Color.BLUE, width, height, Bitmap.Config.ARGB_8888);
-    Bitmap roundedBlueRect =
-        TransformationUtils.roundedCorners(bitmapPool, blueRect, 5);
-    assertBitmapMatches(ResourceIds.raw.blue_rect_rounded, roundedBlueRect);
-  }
-
-  @Test
-  public void testRoundedCorners_usePool() {
-    int width = 20;
-    int height = 30;
-
-    Bitmap blueRect = createRect(Color.BLUE, width, height, Bitmap.Config.ARGB_8888);
-    Bitmap redRect = createRect(Color.RED, width, height, Bitmap.Config.ARGB_8888);
-    BitmapPool mockBitmapPool = mock(BitmapPool.class);
-    when(mockBitmapPool.get(width, height, Config.ARGB_8888)).thenReturn(redRect);
-
-    Bitmap roundedBlueRect =
-        TransformationUtils.roundedCorners(mockBitmapPool, blueRect, 5);
-    assertBitmapMatches(ResourceIds.raw.blue_rect_rounded, roundedBlueRect);
-    assertThat(roundedBlueRect).isEqualTo(redRect);
-  }
-
-  @Test
-  public void testRoundedCorners_overRounded() {
-    int width = 40;
-    int height = 20;
-    Bitmap blueRect = createRect(Color.BLUE, width, height, Bitmap.Config.RGB_565);
-    Bitmap roundedBlueRect =
-        TransformationUtils.roundedCorners(bitmapPool, blueRect, 20);
-    assertBitmapMatches(ResourceIds.raw.blue_rect_over_rounded, roundedBlueRect);
-  }
-
-  private Bitmap createRect(int color, int width, int height, Bitmap.Config config) {
-    final Bitmap result = Bitmap.createBitmap(width, height, config);
-    Canvas canvas = new Canvas(result);
-    canvas.drawColor(color);
-    return result;
-  }
-
-  private void assertBitmapMatches(int resId, Bitmap actual) {
-    Resources res = context.getResources();
-    // Avoid default density scaling when decoding the expected Bitmap.
-    BitmapFactory.Options options = new BitmapFactory.Options();
-    options.inScaled = false;
-    Bitmap expected = BitmapFactory.decodeResource(res, resId, options);
-    assertPixelDataMatches(expected, actual);
-  }
-
-  /**
-   * TODO(user): Pull this out into a helper library and add tests for it. Would also be good
-   * to get a tool for updating expected bitmaps on functionality changes and new tests.
-   */
-  private void assertPixelDataMatches(Bitmap expected, Bitmap actual) {
-    assertEquals(expected.getWidth(), actual.getWidth());
-    assertEquals(expected.getHeight(), actual.getHeight());
-
-    for (int y = 0; y < expected.getHeight(); y++) {
-      for (int x = 0; x < expected.getWidth(); x++) {
-        assertEquals(expected.getPixel(x, y), actual.getPixel(x, y));
-      }
-    }
-  }
-}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
new file mode 100644
index 000000000..7121b17f9
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapRegressionTester.java
@@ -0,0 +1,186 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Bitmap.CompressFormat;
+import android.graphics.BitmapFactory;
+import android.os.Build;
+import android.os.Environment;
+import android.support.annotation.Nullable;
+import android.support.test.InstrumentationRegistry;
+import com.bumptech.glide.RequestBuilder;
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.concurrent.ExecutionException;
+import org.junit.rules.TestName;
+
+/**
+ * Checks for regressions for a given Glide load by comparing the result of a load to a previously
+ * saved Bitmap.
+ *
+ * <p>Can be used to generate or re-generate expected {@link Bitmap}s by placing a file named
+ * "regenerate" in /sdcard/DCIM/test_files. The apks containing this tester will need to have
+ * {@link android.Manifest.permission#WRITE_EXTERNAL_STORAGE}. Resources can be split by apk
+ * by adding {@link SplitBySdk} to test methods or classes. If {@link SplitBySdk} is added to both
+ * a test class and a particular method, the values from the method will be used.
+ *
+ * <p>This class only handles exactly one Bitmap comparison per test method because the resource
+ * names it expects and generates are based on the method name.
+ */
+public final class BitmapRegressionTester {
+  private static final String RESOURCE_TYPE = "raw";
+  private static final String EXTENSION = ".png";
+  private static final String REGENERATE_SIGNAL_FILE_NAME = "regenerate";
+  private static final String GENERATED_FILES_DIR = "test_files";
+  private static final String SEPARATOR = "_";
+
+  private Class<?> testClass;
+  private final TestName testName;
+  private final Context context = InstrumentationRegistry.getTargetContext();
+
+  public BitmapRegressionTester(Class<?> testClass, TestName testName) {
+    this.testClass = testClass;
+    this.testName = testName;
+
+    if (testClass.getAnnotation(RegressionTest.class) == null) {
+      throw new IllegalArgumentException(
+          testClass + " must be annotated with " + RegressionTest.class);
+    }
+  }
+
+  public Bitmap test(RequestBuilder<Bitmap> request)
+      throws ExecutionException, InterruptedException {
+    Bitmap result = request
+        .submit()
+        .get();
+    if (writeNewExpected()) {
+      writeBitmap(result);
+    }
+    Bitmap expected = decodeExpected();
+    BitmapSubject.assertThat(result).sameAs(expected);
+    return result;
+  }
+
+  private String getResourceName() {
+    return getClassNameString()
+        + SEPARATOR + testName.getMethodName().toLowerCase()
+        + getSdkIntString()
+        + getCpuString();
+  }
+
+  private String getClassNameString() {
+    StringBuilder result = new StringBuilder();
+    for (char c : testClass.getSimpleName().toCharArray()) {
+      if (Character.isUpperCase(c)) {
+        result.append(Character.toLowerCase(c));
+      }
+    }
+    return result.toString();
+  }
+
+  @Nullable
+  private SplitBySdk getSplitBySdkValues() {
+    SplitBySdk result;
+    try {
+      Method method =
+          testClass.getMethod(testName.getMethodName(), /*parameterTypes=*/ (Class[]) null);
+      result = method.getAnnotation(SplitBySdk.class);
+    } catch (NoSuchMethodException e) {
+      throw new RuntimeException(e);
+    }
+
+    if (result == null) {
+      result = testClass.getAnnotation(SplitBySdk.class);
+    }
+    return result;
+  }
+
+  @SuppressWarnings("deprecation")
+  private String getCpuString() {
+    return splitByCpu() ? SEPARATOR + Build.CPU_ABI.replace("-", "_") : "";
+  }
+
+  private boolean splitByCpu() {
+    return testClass.getAnnotation(SplitByCpu.class) != null;
+  }
+
+  private String getSdkIntString() {
+    SplitBySdk splitBySdk = getSplitBySdkValues();
+    if (splitBySdk == null) {
+      return "";
+    }
+    int targetSdk = -1;
+    int[] values = splitBySdk.value();
+    Arrays.sort(values);
+    for (int value : values) {
+      if (value > Build.VERSION.SDK_INT) {
+        break;
+      }
+      targetSdk = value;
+    }
+
+    if (targetSdk == -1) {
+      return "";
+    }
+
+    return SEPARATOR + targetSdk;
+  }
+
+  private File getTestFilesDir() {
+    File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
+    return new File(dir, GENERATED_FILES_DIR);
+  }
+
+  private void writeBitmap(Bitmap bitmap) {
+    File testFilesDir = getTestFilesDir();
+    File subdirectory = new File(testFilesDir, RESOURCE_TYPE);
+    if (!subdirectory.exists() && !subdirectory.mkdirs()) {
+      throw new IllegalArgumentException("Failed to make directory: " + subdirectory);
+    }
+
+    File file = new File(subdirectory, getResourceName() + EXTENSION);
+    if (file.exists() && !file.delete()) {
+      throw new IllegalStateException("Failed to remove existing file: " + file);
+    }
+
+    OutputStream os = null;
+    try {
+      os = new BufferedOutputStream(new FileOutputStream(file));
+      bitmap.compress(CompressFormat.PNG, /*quality=*/100, os);
+      os.close();
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    } finally {
+      if (os != null) {
+        try {
+          os.close();
+        } catch (IOException e) {
+          // Ignored.
+        }
+      }
+    }
+  }
+
+  private boolean writeNewExpected() {
+    File testFiles = getTestFilesDir();
+    return new File(testFiles, REGENERATE_SIGNAL_FILE_NAME).exists();
+  }
+
+  private Bitmap decodeExpected() {
+    int resourceId =
+        context.getResources()
+            .getIdentifier(getResourceName(), RESOURCE_TYPE, context.getPackageName());
+    if (resourceId == 0) {
+      throw new IllegalArgumentException("Failed to find resource for: " + getResourceName()
+       + " with type: " + RESOURCE_TYPE + " and package: " + context.getPackageName());
+    }
+    BitmapFactory.Options options = new BitmapFactory.Options();
+    options.inScaled = false;
+    return BitmapFactory.decodeResource(context.getResources(), resourceId, options);
+  }
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
new file mode 100644
index 000000000..6128cbff7
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/BitmapSubject.java
@@ -0,0 +1,89 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.DrawableRes;
+import android.support.test.InstrumentationRegistry;
+import android.support.v4.content.res.ResourcesCompat;
+import com.google.common.truth.FailureStrategy;
+import com.google.common.truth.Subject;
+import com.google.common.truth.SubjectFactory;
+import com.google.common.truth.Truth;
+
+/**
+ * Truth assertions for comparing {@link Bitmap}s.
+ */
+final class BitmapSubject extends Subject<BitmapSubject, Bitmap> {
+
+  private static final SubjectFactory<BitmapSubject, Bitmap> FACTORY =
+      new SubjectFactory<BitmapSubject, Bitmap>() {
+        @Override
+        public BitmapSubject getSubject(FailureStrategy fs, Bitmap that) {
+          return new BitmapSubject(fs, that);
+        }
+      };
+
+  private BitmapSubject(FailureStrategy failureStrategy,
+      Bitmap subject) {
+    super(failureStrategy, subject);
+  }
+
+  static BitmapSubject assertThat(Drawable drawable) {
+    if (!(drawable instanceof BitmapDrawable)) {
+      throw new IllegalArgumentException("Not a BitmapDrawable: " + drawable);
+    }
+    return assertThat(((BitmapDrawable) drawable).getBitmap());
+  }
+
+  static BitmapSubject assertThat(Bitmap bitmap) {
+    return Truth.assertAbout(FACTORY).that(bitmap);
+  }
+
+  @Override
+  protected String getDisplaySubject() {
+    return getDisplayString(getSubject());
+  }
+
+  private static String getDisplayString(Bitmap bitmap) {
+     return "<"
+        + "[" + bitmap.getWidth() + "x" + bitmap.getHeight() + "]"
+        + " "
+        + bitmap.getConfig()
+        + ">";
+  }
+
+  void sameAs(@DrawableRes int resourceId) {
+    Context context = InstrumentationRegistry.getTargetContext();
+    Drawable drawable =
+        ResourcesCompat.getDrawable(context.getResources(), resourceId, context.getTheme());
+    sameAs(drawable);
+  }
+
+  void isMutable()  {
+    if (!getSubject().isMutable()) {
+      fail("is mutable");
+    }
+  }
+
+  void isImmutable() {
+    if (getSubject().isMutable()) {
+      fail("is immutable");
+    }
+  }
+
+  @SuppressWarnings("unchecked")
+  void sameAs(Drawable other) {
+    if (!(other instanceof BitmapDrawable)) {
+      fail("Not a BitmapDrawable");
+    }
+    sameAs(((BitmapDrawable) other).getBitmap());
+  }
+
+  void sameAs(Bitmap other) {
+    if (!getSubject().sameAs(other)) {
+      fail("is the same as " + getDisplayString(other));
+    }
+  }
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java
new file mode 100644
index 000000000..c83bcc1af
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/CanonicalBitmap.java
@@ -0,0 +1,55 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.test.InstrumentationRegistry;
+import com.bumptech.glide.instrumentation.R;
+import com.bumptech.glide.util.Preconditions;
+
+public final class CanonicalBitmap {
+  @Nullable
+  private Bitmap bitmap;
+  @Nullable
+  private Float scaleFactor;
+
+  @NonNull
+  public synchronized Bitmap getBitmap() {
+    if (bitmap == null) {
+      bitmap = decodeBitmap();
+    }
+    return bitmap;
+  }
+
+  public CanonicalBitmap scale(float scaleFactor) {
+    Preconditions.checkArgument(bitmap == null, "Can't set scale factor after decoding image");
+    this.scaleFactor = scaleFactor;
+    return this;
+  }
+
+  public int getWidth() {
+    return getBitmap().getWidth();
+  }
+
+  public int getHeight() {
+    return getBitmap().getHeight();
+  }
+
+  private Bitmap decodeBitmap() {
+    Context context = InstrumentationRegistry.getTargetContext();
+    BitmapFactory.Options options = new BitmapFactory.Options();
+    options.inScaled = false;
+    Bitmap result = BitmapFactory.decodeResource(context.getResources(), R.raw.canonical, options);
+    if (scaleFactor != null) {
+      result = Bitmap.createScaledBitmap(
+          result,
+          (int) (result.getWidth() * scaleFactor),
+          (int) (result.getHeight() * scaleFactor),
+          /*filter=*/false);
+    }
+    // Make sure the Bitmap is immutable.
+    return result;
+  }
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/InstrumentationAppGlideModule.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/InstrumentationAppGlideModule.java
new file mode 100644
index 000000000..056d6140a
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/InstrumentationAppGlideModule.java
@@ -0,0 +1,9 @@
+package com.bumptech.glide.test;
+
+import com.bumptech.glide.annotation.GlideModule;
+import com.bumptech.glide.module.AppGlideModule;
+
+@GlideModule
+public class InstrumentationAppGlideModule extends AppGlideModule {
+  // Intentionally empty.
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/RegressionTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/RegressionTest.java
new file mode 100644
index 000000000..a6dd3629e
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/RegressionTest.java
@@ -0,0 +1,17 @@
+package com.bumptech.glide.test;
+
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Indicates that a test is a regression test that relies on comparing a newly transformed image to
+ * a previously generated copy of the same image to detect changes.
+ */
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface RegressionTest {
+  // Intentionally empty.
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
index 50e9cff05..047e983c9 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
@@ -13,11 +13,6 @@ private ResourceIds() {
     // Utility class.
   }
 
-  public interface raw {
-    int blue_rect_over_rounded = getResourceId("raw", "blue_rect_over_rounded");
-    int blue_rect_rounded = getResourceId("raw", "blue_rect_rounded");
-  }
-
   public interface drawable {
     int bitmap_alias = getResourceId("drawable", "bitmap_alias");
     int googlelogo_color_120x44dp= getResourceId("drawable", "googlelogo_color_120x44dp");
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/SplitByCpu.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/SplitByCpu.java
new file mode 100644
index 000000000..05fc9cc50
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/SplitByCpu.java
@@ -0,0 +1,15 @@
+package com.bumptech.glide.test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Indicates that the test relies on transformations or operations that may produce different
+ * outputs on different CPUs.
+ */
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface SplitByCpu {
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/SplitBySdk.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/SplitBySdk.java
new file mode 100644
index 000000000..bc882430a
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/SplitBySdk.java
@@ -0,0 +1,16 @@
+package com.bumptech.glide.test;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Used by {@link BitmapRegressionTester} to generate SDK specific resources to account for
+ * differences in Android's image decoding APIs across versions.
+ */
+@Target({ ElementType.METHOD, ElementType.TYPE })
+@Retention(RetentionPolicy.RUNTIME)
+public @interface SplitBySdk {
+  int[] value();
+}
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
new file mode 100644
index 000000000..a7abb5fc2
--- /dev/null
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
@@ -0,0 +1,31 @@
+package com.bumptech.glide.test;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import com.bumptech.glide.Glide;
+import org.junit.rules.TestRule;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
+
+/**
+ * Clears out Glide's disk cache and the Glide singleton after every test method.
+ */
+public final class TearDownGlide implements TestRule {
+
+  @Override
+  public Statement apply(final Statement base, Description description) {
+    return new Statement() {
+      @Override
+      public void evaluate() throws Throwable {
+        base.evaluate();
+        tearDownGlide();
+      }
+    };
+  }
+
+  private void tearDownGlide() {
+    Context context = InstrumentationRegistry.getTargetContext();
+    Glide.get(context).clearDiskCache();
+    Glide.tearDown();
+  }
+}
diff --git a/instrumentation/src/main/AndroidManifest.xml b/instrumentation/src/main/AndroidManifest.xml
index 706827159..d9857b303 100644
--- a/instrumentation/src/main/AndroidManifest.xml
+++ b/instrumentation/src/main/AndroidManifest.xml
@@ -1,4 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
   package="com.bumptech.glide.instrumentation">
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
   <application />
 </manifest>
diff --git a/instrumentation/src/main/res/raw/blue_rect_over_rounded.png b/instrumentation/src/main/res/raw/blue_rect_over_rounded.png
deleted file mode 100644
index c4cc26a1e..000000000
Binary files a/instrumentation/src/main/res/raw/blue_rect_over_rounded.png and /dev/null differ
diff --git a/instrumentation/src/main/res/raw/blue_rect_rounded.png b/instrumentation/src/main/res/raw/blue_rect_rounded.png
deleted file mode 100644
index 86229d517..000000000
Binary files a/instrumentation/src/main/res/raw/blue_rect_rounded.png and /dev/null differ
diff --git a/instrumentation/src/main/res/raw/canonical.jpg b/instrumentation/src/main/res/raw/canonical.jpg
new file mode 100644
index 000000000..889ba2762
Binary files /dev/null and b/instrumentation/src/main/res/raw/canonical.jpg differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_16_armeabi_v7a.png
new file mode 100644
index 000000000..b83034ff1
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_16_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_16_x86.png
new file mode 100644
index 000000000..1262ce7c0
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_18_armeabi_v7a.png
new file mode 100644
index 000000000..b83034ff1
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_18_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_18_x86.png
new file mode 100644
index 000000000..1262ce7c0
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_19_armeabi_v7a.png
new file mode 100644
index 000000000..b83034ff1
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_19_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_19_x86.png
new file mode 100644
index 000000000..1262ce7c0
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_21_armeabi_v7a.png
new file mode 100644
index 000000000..b83034ff1
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_21_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_21_x86.png
new file mode 100644
index 000000000..5a64e7e63
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_23_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_23_x86.png
new file mode 100644
index 000000000..5a64e7e63
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_24_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_24_x86.png
new file mode 100644
index 000000000..396837460
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withnarrowrectangle_fitswithinmaintainingaspectratio_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_16_armeabi_v7a.png
new file mode 100644
index 000000000..31351c2ac
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_16_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_16_x86.png
new file mode 100644
index 000000000..1a6a857c7
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_18_armeabi_v7a.png
new file mode 100644
index 000000000..31351c2ac
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_18_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_18_x86.png
new file mode 100644
index 000000000..1a6a857c7
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_19_armeabi_v7a.png
new file mode 100644
index 000000000..31351c2ac
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_19_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_19_x86.png
new file mode 100644
index 000000000..1a6a857c7
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_21_armeabi_v7a.png
new file mode 100644
index 000000000..31351c2ac
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_21_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_21_x86.png
new file mode 100644
index 000000000..9320e9f76
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_23_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_23_x86.png
new file mode 100644
index 000000000..9320e9f76
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_24_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_24_x86.png
new file mode 100644
index 000000000..fb6a40f75
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withshortrectangle_fitswithinmaintainingaspectratio_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_16_armeabi_v7a.png
new file mode 100644
index 000000000..e1abe0fae
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_16_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_16_x86.png
new file mode 100644
index 000000000..6834ef69e
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_18_armeabi_v7a.png
new file mode 100644
index 000000000..e1abe0fae
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_18_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_18_x86.png
new file mode 100644
index 000000000..6834ef69e
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_19_armeabi_v7a.png
new file mode 100644
index 000000000..e1abe0fae
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_19_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_19_x86.png
new file mode 100644
index 000000000..6834ef69e
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_21_armeabi_v7a.png
new file mode 100644
index 000000000..e1abe0fae
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_21_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_21_x86.png
new file mode 100644
index 000000000..cbf40ecec
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_23_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_23_x86.png
new file mode 100644
index 000000000..cbf40ecec
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_24_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_24_x86.png
new file mode 100644
index 000000000..a2a03bfe4
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquarelargerthanimage_returnsupscaledsquare_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_16_armeabi_v7a.png
new file mode 100644
index 000000000..fe7204f45
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_16_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_16_x86.png
new file mode 100644
index 000000000..7e45a3dc9
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_18_armeabi_v7a.png
new file mode 100644
index 000000000..fe7204f45
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_18_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_18_x86.png
new file mode 100644
index 000000000..7e45a3dc9
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_19_armeabi_v7a.png
new file mode 100644
index 000000000..fe7204f45
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_19_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_19_x86.png
new file mode 100644
index 000000000..7e45a3dc9
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_21_armeabi_v7a.png
new file mode 100644
index 000000000..fe7204f45
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_21_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_21_x86.png
new file mode 100644
index 000000000..c1e4e13fc
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_23_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_23_x86.png
new file mode 100644
index 000000000..c1e4e13fc
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_24_x86.png b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_24_x86.png
new file mode 100644
index 000000000..e7eb65010
Binary files /dev/null and b/instrumentation/src/main/res/raw/fcrt_fitcenter_withsquaresmallerthanimage_returnssquareimage_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_16_armeabi_v7a.png
new file mode 100644
index 000000000..caa7c5963
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_16_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_16_x86.png
new file mode 100644
index 000000000..45956c505
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_18_armeabi_v7a.png
new file mode 100644
index 000000000..669269f2b
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_18_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_18_x86.png
new file mode 100644
index 000000000..3e4aab0a0
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_19_armeabi_v7a.png
new file mode 100644
index 000000000..669269f2b
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_19_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_19_x86.png
new file mode 100644
index 000000000..3e4aab0a0
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_21_armeabi_v7a.png
new file mode 100644
index 000000000..6c4dab5b5
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_21_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_21_x86.png
new file mode 100644
index 000000000..28cfaf4bf
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_23_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_23_x86.png
new file mode 100644
index 000000000..28cfaf4bf
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_24_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_24_x86.png
new file mode 100644
index 000000000..cd56aa644
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_26_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_26_x86.png
new file mode 100644
index 000000000..e68bc997c
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_26_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_16_armeabi_v7a.png
new file mode 100644
index 000000000..e1eda26d6
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_16_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_16_x86.png
new file mode 100644
index 000000000..6a53e1dd8
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_18_armeabi_v7a.png
new file mode 100644
index 000000000..683d55fe4
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_18_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_18_x86.png
new file mode 100644
index 000000000..c70fdea57
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_19_armeabi_v7a.png
new file mode 100644
index 000000000..683d55fe4
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_19_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_19_x86.png
new file mode 100644
index 000000000..c70fdea57
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_21_armeabi_v7a.png
new file mode 100644
index 000000000..ecbff14cb
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_21_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_21_x86.png
new file mode 100644
index 000000000..cbb3895b0
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_23_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_23_x86.png
new file mode 100644
index 000000000..843b78f9b
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_24_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_24_x86.png
new file mode 100644
index 000000000..fd26de305
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_26_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_26_x86.png
new file mode 100644
index 000000000..098a5da5e
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_overrounded_26_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_16_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_16_armeabi_v7a.png
new file mode 100644
index 000000000..c8bc48aa4
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_16_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_16_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_16_x86.png
new file mode 100644
index 000000000..e42fb5cf8
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_16_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_18_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_18_armeabi_v7a.png
new file mode 100644
index 000000000..a5cda420f
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_18_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_18_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_18_x86.png
new file mode 100644
index 000000000..42229a13f
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_18_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_19_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_19_armeabi_v7a.png
new file mode 100644
index 000000000..a5cda420f
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_19_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_19_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_19_x86.png
new file mode 100644
index 000000000..42229a13f
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_19_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_21_armeabi_v7a.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_21_armeabi_v7a.png
new file mode 100644
index 000000000..b29b0da31
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_21_armeabi_v7a.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_21_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_21_x86.png
new file mode 100644
index 000000000..0f4b78b5d
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_21_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_23_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_23_x86.png
new file mode 100644
index 000000000..0f4b78b5d
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_23_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_24_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_24_x86.png
new file mode 100644
index 000000000..2295f8881
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_24_x86.png differ
diff --git a/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_26_x86.png b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_26_x86.png
new file mode 100644
index 000000000..2295f8881
Binary files /dev/null and b/instrumentation/src/main/res/raw/rcrt_testroundedcorners_usepool_26_x86.png differ
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index 97ef93a87..2f51117e1 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -50,10 +50,10 @@
   private final ModelToResourceClassCache modelToResourceClassCache =
       new ModelToResourceClassCache();
   private final LoadPathCache loadPathCache = new LoadPathCache();
-  private final Pool<List<Exception>> exceptionListPool = FactoryPools.threadSafeList();
+  private final Pool<List<Throwable>> throwableListPool = FactoryPools.threadSafeList();
 
   public Registry() {
-    this.modelLoaderRegistry = new ModelLoaderRegistry(exceptionListPool);
+    this.modelLoaderRegistry = new ModelLoaderRegistry(throwableListPool);
     this.encoderRegistry = new EncoderRegistry();
     this.decoderRegistry = new ResourceDecoderRegistry();
     this.resourceEncoderRegistry = new ResourceEncoderRegistry();
@@ -454,8 +454,9 @@ public Registry register(ImageHeaderParser parser) {
       if (decodePaths.isEmpty()) {
         result = null;
       } else {
-        result = new LoadPath<>(dataClass, resourceClass, transcodeClass, decodePaths,
-            exceptionListPool);
+        result =
+            new LoadPath<>(
+                dataClass, resourceClass, transcodeClass, decodePaths, throwableListPool);
       }
       loadPathCache.put(dataClass, resourceClass, transcodeClass, result);
     }
@@ -480,7 +481,7 @@ public Registry register(ImageHeaderParser parser) {
         ResourceTranscoder<TResource, Transcode> transcoder =
             transcoderRegistry.get(registeredResourceClass, registeredTranscodeClass);
         decodePaths.add(new DecodePath<>(dataClass, registeredResourceClass,
-            registeredTranscodeClass, decoders, transcoder, exceptionListPool));
+            registeredTranscodeClass, decoders, transcoder, throwableListPool));
       }
     }
     return decodePaths;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 9bc35e27b..4e7d1c38f 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -41,7 +41,7 @@
   private static final String TAG = "DecodeJob";
 
   @Synthetic final DecodeHelper<R> decodeHelper = new DecodeHelper<>();
-  private final List<Exception> exceptions = new ArrayList<>();
+  private final List<Throwable> throwables = new ArrayList<>();
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
   private final DiskCacheProvider diskCacheProvider;
   private final Pools.Pool<DecodeJob<?>> pool;
@@ -187,7 +187,7 @@ private void releaseInternal() {
     currentFetcher = null;
     startFetchTime = 0L;
     isCancelled = false;
-    exceptions.clear();
+    throwables.clear();
     pool.release(this);
   }
 
@@ -227,19 +227,25 @@ public void run() {
         return;
       }
       runWrapped();
-    } catch (RuntimeException e) {
+    } catch (Throwable t) {
+      // Catch Throwable and not Exception to handle OOMs. Throwables are swallowed by our
+      // usage of .submit() in GlideExecutor so we're not silently hiding crashes by doing this. We
+      // are however ensuring that our callbacks are always notified when a load fails. Without this
+      // notification, uncaught throwables never notify the corresponding callbacks, which can cause
+      // loads to silently hang forever, a case that's especially bad for users using Futures on
+      // background threads.
       if (Log.isLoggable(TAG, Log.DEBUG)) {
         Log.d(TAG, "DecodeJob threw unexpectedly"
             + ", isCancelled: " + isCancelled
-            + ", stage: " + stage, e);
+            + ", stage: " + stage, t);
       }
       // When we're encoding we've already notified our callback and it isn't safe to do so again.
       if (stage != Stage.ENCODE) {
-        exceptions.add(e);
+        throwables.add(t);
         notifyFailed();
       }
       if (!isCancelled) {
-        throw e;
+        throw t;
       }
     } finally {
       // Keeping track of the fetcher here and calling cleanup is excessively paranoid, we call
@@ -309,7 +315,7 @@ private void runGenerators() {
 
   private void notifyFailed() {
     setNotifiedOrThrow();
-    GlideException e = new GlideException("Failed to load resource", new ArrayList<>(exceptions));
+    GlideException e = new GlideException("Failed to load resource", new ArrayList<>(throwables));
     callback.onLoadFailed(e);
     onLoadFailed();
   }
@@ -379,7 +385,7 @@ public void onDataFetcherFailed(Key attemptedKey, Exception e, DataFetcher<?> fe
     fetcher.cleanup();
     GlideException exception = new GlideException("Fetching data failed", e);
     exception.setLoggingDetails(attemptedKey, dataSource, fetcher.getDataClass());
-    exceptions.add(exception);
+    throwables.add(exception);
     if (Thread.currentThread() != currentThread) {
       runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;
       callback.reschedule(this);
@@ -400,7 +406,7 @@ private void decodeFromRetrievedData() {
       resource = decodeFromData(currentFetcher, currentData, currentDataSource);
     } catch (GlideException e) {
       e.setLoggingDetails(currentAttemptingKey, currentDataSource);
-      exceptions.add(e);
+      throwables.add(e);
     }
     if (resource != null) {
       notifyEncodeAndRelease(resource, currentDataSource);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
index e74320bf0..a65eccdcd 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodePath.java
@@ -23,13 +23,13 @@
   private final Class<DataType> dataClass;
   private final List<? extends ResourceDecoder<DataType, ResourceType>> decoders;
   private final ResourceTranscoder<ResourceType, Transcode> transcoder;
-  private final Pool<List<Exception>> listPool;
+  private final Pool<List<Throwable>> listPool;
   private final String failureMessage;
 
   public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
       Class<Transcode> transcodeClass,
       List<? extends ResourceDecoder<DataType, ResourceType>> decoders,
-      ResourceTranscoder<ResourceType, Transcode> transcoder, Pool<List<Exception>> listPool) {
+      ResourceTranscoder<ResourceType, Transcode> transcoder, Pool<List<Throwable>> listPool) {
     this.dataClass = dataClass;
     this.decoders = decoders;
     this.transcoder = transcoder;
@@ -47,7 +47,7 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
 
   private Resource<ResourceType> decodeResource(DataRewinder<DataType> rewinder, int width,
       int height, Options options) throws GlideException {
-    List<Exception> exceptions = listPool.acquire();
+    List<Throwable> exceptions = listPool.acquire();
     try {
       return decodeResourceWithList(rewinder, width, height, options, exceptions);
     } finally {
@@ -56,7 +56,7 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
   }
 
   private Resource<ResourceType> decodeResourceWithList(DataRewinder<DataType> rewinder, int width,
-      int height, Options options, List<Exception> exceptions) throws GlideException {
+      int height, Options options, List<Throwable> exceptions) throws GlideException {
     Resource<ResourceType> result = null;
     for (int i = 0, size = decoders.size(); i < size; i++) {
       ResourceDecoder<DataType, ResourceType> decoder = decoders.get(i);
@@ -68,7 +68,7 @@ public DecodePath(Class<DataType> dataClass, Class<ResourceType> resourceClass,
         }
         // Some decoders throw unexpectedly. If they do, we shouldn't fail the entire load path, but
         // instead log and continue. See #2406 for an example.
-      } catch (IOException | RuntimeException e) {
+      } catch (IOException | RuntimeException | OutOfMemoryError e) {
         if (Log.isLoggable(TAG, Log.VERBOSE)) {
           Log.v(TAG, "Failed to decode data for " + decoder, e);
         }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
index f932aac27..059e5f0e2 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
@@ -18,20 +18,20 @@
 public final class GlideException extends Exception {
   private static final StackTraceElement[] EMPTY_ELEMENTS = new StackTraceElement[0];
 
-  private final List<Exception> causes;
+  private final List<Throwable> causes;
   private Key key;
   private DataSource dataSource;
   private Class<?> dataClass;
 
   public GlideException(String message) {
-    this(message, Collections.<Exception>emptyList());
+    this(message, Collections.<Throwable>emptyList());
   }
 
-  public GlideException(String detailMessage, Exception cause) {
+  public GlideException(String detailMessage, Throwable cause) {
     this(detailMessage, Collections.singletonList(cause));
   }
 
-  public GlideException(String detailMessage, List<Exception> causes) {
+  public GlideException(String detailMessage, List<Throwable> causes) {
     super(detailMessage);
     setStackTrace(EMPTY_ELEMENTS);
     this.causes = causes;
@@ -62,7 +62,7 @@ public Throwable fillInStackTrace() {
    *
    * @see #getRootCauses()
    */
-  public List<Exception> getCauses() {
+  public List<Throwable> getCauses() {
     return causes;
   }
 
@@ -74,8 +74,8 @@ public Throwable fillInStackTrace() {
    * a given model using multiple different pathways, there may be multiple related or unrelated
    * reasons for a load to fail.
    */
-  public List<Exception> getRootCauses() {
-    List<Exception> rootCauses = new ArrayList<>();
+  public List<Throwable> getRootCauses() {
+    List<Throwable> rootCauses = new ArrayList<>();
     addRootCauses(this, rootCauses);
     return rootCauses;
   }
@@ -88,20 +88,20 @@ public Throwable fillInStackTrace() {
    * complete stack traces.
    */
   public void logRootCauses(String tag) {
-    List<Exception> causes = getRootCauses();
+    List<Throwable> causes = getRootCauses();
     for (int i = 0, size = causes.size(); i < size; i++) {
       Log.i(tag, "Root cause (" + (i + 1) + " of " + size + ")", causes.get(i));
     }
   }
 
-  private void addRootCauses(Exception exception, List<Exception> rootCauses) {
-    if (exception instanceof GlideException) {
-      GlideException glideException = (GlideException) exception;
-      for (Exception e : glideException.getCauses()) {
-        addRootCauses(e, rootCauses);
+  private void addRootCauses(Throwable throwable, List<Throwable> rootCauses) {
+    if (throwable instanceof GlideException) {
+      GlideException glideException = (GlideException) throwable;
+      for (Throwable t : glideException.getCauses()) {
+        addRootCauses(t, rootCauses);
       }
     } else {
-      rootCauses.add(exception);
+      rootCauses.add(throwable);
     }
   }
 
@@ -136,18 +136,18 @@ public String getMessage() {
   // Appendable throws, PrintWriter, PrintStream, and IndentedAppendable do not, so this should
   // never happen.
   @SuppressWarnings("PMD.PreserveStackTrace")
-  private static void appendExceptionMessage(Exception e, Appendable appendable) {
+  private static void appendExceptionMessage(Throwable t, Appendable appendable) {
     try {
-      appendable.append(e.getClass().toString()).append(": ").append(e.getMessage()).append('\n');
+      appendable.append(t.getClass().toString()).append(": ").append(t.getMessage()).append('\n');
     } catch (IOException e1) {
-      throw new RuntimeException(e);
+      throw new RuntimeException(t);
     }
   }
 
   // Appendable throws, PrintWriter, PrintStream, and IndentedAppendable do not, so this should
   // never happen.
   @SuppressWarnings("PMD.PreserveStackTrace")
-  private static void appendCauses(List<Exception> causes, Appendable appendable) {
+  private static void appendCauses(List<Throwable> causes, Appendable appendable) {
     try {
       appendCausesWrapped(causes, appendable);
     } catch (IOException e) {
@@ -156,7 +156,7 @@ private static void appendCauses(List<Exception> causes, Appendable appendable)
   }
 
   @SuppressWarnings("ThrowableResultOfMethodCallIgnored")
-  private static void appendCausesWrapped(List<Exception> causes, Appendable appendable)
+  private static void appendCausesWrapped(List<Throwable> causes, Appendable appendable)
       throws IOException {
     int size = causes.size();
     for (int i = 0; i < size; i++) {
@@ -166,7 +166,7 @@ private static void appendCausesWrapped(List<Exception> causes, Appendable appen
           .append(String.valueOf(size))
           .append("): ");
 
-      Exception cause = causes.get(i);
+      Throwable cause = causes.get(i);
       if (cause instanceof GlideException) {
         GlideException glideCause = (GlideException) cause;
         glideCause.printStackTrace(appendable);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java b/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
index d182da6ea..b747da7aa 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/LoadPath.java
@@ -21,13 +21,13 @@
  */
 public class LoadPath<Data, ResourceType, Transcode> {
   private final Class<Data> dataClass;
-  private final Pool<List<Exception>> listPool;
+  private final Pool<List<Throwable>> listPool;
   private final List<? extends DecodePath<Data, ResourceType, Transcode>> decodePaths;
   private final String failureMessage;
 
   public LoadPath(Class<Data> dataClass, Class<ResourceType> resourceClass,
       Class<Transcode> transcodeClass,
-      List<DecodePath<Data, ResourceType, Transcode>> decodePaths, Pool<List<Exception>> listPool) {
+      List<DecodePath<Data, ResourceType, Transcode>> decodePaths, Pool<List<Throwable>> listPool) {
     this.dataClass = dataClass;
     this.listPool = listPool;
     this.decodePaths = Preconditions.checkNotEmpty(decodePaths);
@@ -37,17 +37,17 @@ public LoadPath(Class<Data> dataClass, Class<ResourceType> resourceClass,
 
   public Resource<Transcode> load(DataRewinder<Data> rewinder, Options options, int width,
       int height, DecodePath.DecodeCallback<ResourceType> decodeCallback) throws GlideException {
-    List<Exception> exceptions = listPool.acquire();
+    List<Throwable> throwables = listPool.acquire();
     try {
-      return loadWithExceptionList(rewinder, options, width, height, decodeCallback, exceptions);
+      return loadWithExceptionList(rewinder, options, width, height, decodeCallback, throwables);
     } finally {
-      listPool.release(exceptions);
+      listPool.release(throwables);
     }
   }
 
   private Resource<Transcode> loadWithExceptionList(DataRewinder<Data> rewinder, Options options,
       int width, int height, DecodePath.DecodeCallback<ResourceType> decodeCallback,
-      List<Exception> exceptions) throws GlideException {
+      List<Throwable> exceptions) throws GlideException {
     int size = decodePaths.size();
     Resource<Transcode> result = null;
     for (int i = 0; i < size; i++) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
index 77923f2c4..87cb135ef 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ModelLoaderRegistry.java
@@ -17,8 +17,8 @@
   private final MultiModelLoaderFactory multiModelLoaderFactory;
   private final ModelLoaderCache cache = new ModelLoaderCache();
 
-  public ModelLoaderRegistry(Pool<List<Exception>> exceptionListPool) {
-    this(new MultiModelLoaderFactory(exceptionListPool));
+  public ModelLoaderRegistry(Pool<List<Throwable>> throwableListPool) {
+    this(new MultiModelLoaderFactory(throwableListPool));
   }
 
   // Visible for testing.
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index d18d12e46..bae38759f 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -27,10 +27,10 @@
 class MultiModelLoader<Model, Data> implements ModelLoader<Model, Data> {
 
   private final List<ModelLoader<Model, Data>> modelLoaders;
-  private final Pool<List<Exception>> exceptionListPool;
+  private final Pool<List<Throwable>> exceptionListPool;
 
   MultiModelLoader(List<ModelLoader<Model, Data>> modelLoaders,
-      Pool<List<Exception>> exceptionListPool) {
+      Pool<List<Throwable>> exceptionListPool) {
     this.modelLoaders = modelLoaders;
     this.exceptionListPool = exceptionListPool;
   }
@@ -74,15 +74,15 @@ public String toString() {
   static class MultiFetcher<Data> implements DataFetcher<Data>, DataCallback<Data> {
 
     private final List<DataFetcher<Data>> fetchers;
-    private final Pool<List<Exception>> exceptionListPool;
+    private final Pool<List<Throwable>> throwableListPool;
     private int currentIndex;
     private Priority priority;
     private DataCallback<? super Data> callback;
     @Nullable
-    private List<Exception> exceptions;
+    private List<Throwable> exceptions;
 
-    MultiFetcher(List<DataFetcher<Data>> fetchers, Pool<List<Exception>> exceptionListPool) {
-      this.exceptionListPool = exceptionListPool;
+    MultiFetcher(List<DataFetcher<Data>> fetchers, Pool<List<Throwable>> throwableListPool) {
+      this.throwableListPool = throwableListPool;
       Preconditions.checkNotEmpty(fetchers);
       this.fetchers = fetchers;
       currentIndex = 0;
@@ -92,14 +92,14 @@ public String toString() {
     public void loadData(Priority priority, DataCallback<? super Data> callback) {
       this.priority = priority;
       this.callback = callback;
-      exceptions = exceptionListPool.acquire();
+      exceptions = throwableListPool.acquire();
       fetchers.get(currentIndex).loadData(priority, this);
     }
 
     @Override
     public void cleanup() {
       if (exceptions != null) {
-        exceptionListPool.release(exceptions);
+        throwableListPool.release(exceptions);
       }
       exceptions = null;
       for (DataFetcher<Data> fetcher : fetchers) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
index 4c63136a5..56e586f58 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoaderFactory.java
@@ -22,16 +22,16 @@
   private final List<Entry<?, ?>> entries = new ArrayList<>();
   private final Factory factory;
   private final Set<Entry<?, ?>> alreadyUsedEntries = new HashSet<>();
-  private final Pool<List<Exception>> exceptionListPool;
+  private final Pool<List<Throwable>> throwableListPool;
 
-  public MultiModelLoaderFactory(Pool<List<Exception>> exceptionListPool) {
-    this(exceptionListPool, DEFAULT_FACTORY);
+  public MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool) {
+    this(throwableListPool, DEFAULT_FACTORY);
   }
 
   // Visible for testing.
-  MultiModelLoaderFactory(Pool<List<Exception>> exceptionListPool,
+  MultiModelLoaderFactory(Pool<List<Throwable>> throwableListPool,
       Factory factory) {
-    this.exceptionListPool = exceptionListPool;
+    this.throwableListPool = throwableListPool;
     this.factory = factory;
   }
 
@@ -128,7 +128,7 @@ public MultiModelLoaderFactory(Pool<List<Exception>> exceptionListPool) {
         }
       }
       if (loaders.size() > 1) {
-        return factory.build(loaders, exceptionListPool);
+        return factory.build(loaders, throwableListPool);
       } else if (loaders.size() == 1) {
         return loaders.get(0);
       } else {
@@ -185,8 +185,8 @@ public boolean handles(Class<?> modelClass) {
 
   static class Factory {
     public <Model, Data> MultiModelLoader<Model, Data> build(
-        List<ModelLoader<Model, Data>> modelLoaders, Pool<List<Exception>> exceptionListPool) {
-      return new MultiModelLoader<>(modelLoaders, exceptionListPool);
+        List<ModelLoader<Model, Data>> modelLoaders, Pool<List<Throwable>> throwableListPool) {
+      return new MultiModelLoader<>(modelLoaders, throwableListPool);
     }
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java b/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
index b6acd775c..8e9c6c46c 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/MultiModelLoaderFactoryTest.java
@@ -35,16 +35,16 @@
 
   @Rule public ExpectedException exception = ExpectedException.none();
 
-  private Pool<List<Exception>> exceptionListPool;
+  private Pool<List<Throwable>> throwableListPool;
   private MultiModelLoaderFactory multiFactory;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    exceptionListPool = FactoryPools.threadSafeList();
+    throwableListPool = FactoryPools.threadSafeList();
 
-    multiFactory = new MultiModelLoaderFactory(exceptionListPool,
-        multiModelLoaderFactory);
+    multiFactory =
+        new MultiModelLoaderFactory(throwableListPool, multiModelLoaderFactory);
     when(firstFactory.build(eq(multiFactory))).thenReturn(firstModelLoader);
     when(secondFactory.build(eq(multiFactory))).thenReturn(secondModelLoader);
   }
@@ -268,7 +268,7 @@ public void testBuild_respectsPrependOrder() {
       Class<Y> dataClass) {
     ArgumentCaptor<List<ModelLoader<X, Y>>> captor = Util.cast(ArgumentCaptor.forClass(List.class));
     multiFactory.build(modelClass, dataClass);
-    verify(multiModelLoaderFactory).build(captor.capture(), eq(exceptionListPool));
+    verify(multiModelLoaderFactory).build(captor.capture(), eq(throwableListPool));
 
     List<ModelLoader<X, Y>> captured = captor.getValue();
     List<ModelLoader<X, Y>> result = new ArrayList<>(captured.size());
diff --git a/scripts/android-wait-for-emulator.sh b/scripts/android-wait-for-emulator.sh
new file mode 100755
index 000000000..aa6345d8b
--- /dev/null
+++ b/scripts/android-wait-for-emulator.sh
@@ -0,0 +1,25 @@
+#!/bin/bash
+
+# Originally written by Ralf Kistner <ralf@embarkmobile.com>, but placed in the public domain
+
+set +e
+
+bootanim=""
+failcounter=0
+timeout_in_sec=360
+
+until [[ "$bootanim" =~ "stopped" ]]; do
+  bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
+  if [[ "$bootanim" =~ "device not found" || "$bootanim" =~ "device offline"
+    || "$bootanim" =~ "running" ]]; then
+    let "failcounter += 1"
+    echo "Waiting for emulator to start"
+    if [[ $failcounter -gt timeout_in_sec ]]; then
+      echo "Timeout ($timeout_in_sec seconds) reached; failed to start emulator"
+      exit 1
+    fi
+  fi
+  sleep 1
+done
+
+echo "Emulator is ready"
diff --git a/scripts/regenerate_resources.sh b/scripts/regenerate_resources.sh
new file mode 100755
index 000000000..4536c8da9
--- /dev/null
+++ b/scripts/regenerate_resources.sh
@@ -0,0 +1,76 @@
+#!/usr/bin/env bash
+#
+# Generates or regenerates canonical resources for Glide's emulator tests with the cooperation
+# of the BitmapRegressionTester class.
+#
+# Usage:
+# ./scripts/regenerate_resources.sh <com.bumptech.glide.instrumentation.class_name>
+#
+# The class name is optional. If not specified all tests will be run (including those that
+# do not generate resources).
+
+# The signal file that tells BitmapRegressionTester to generate the resource files.
+REGENERATE_FILE_NAME="regenerate"
+# The name of the subfolder on the sdcard where resources are stored on the device/emulator.
+DIRECTORY_NAME="test_files"
+# The full path to a place where the app is able to write resources and we're able to read them.
+DIRECTORY="/sdcard/DCIM/${DIRECTORY_NAME}"
+
+set -e
+
+if [ "$#" -eq 1 ]; then
+  test_restriction="-Pandroid.testInstrumentationRunnerArguments.class=${1}"
+fi
+
+exec 3>&1
+exec 4>&2
+if !(($VERBOSE)); then
+  exec 1>/dev/null
+  exec 2>/dev/null
+fi
+
+echo "Setting up environment..."  1>&3 2>&4
+adb devices | grep -v "List of devices" | grep device \
+  || echo "No devices found, try starting an emulator" 1>&3 2>&4
+
+adb root || true 
+# In case there are any old artifacts from an old or failed test, clean them up.
+adb shell rm -r $DIRECTORY || true
+# Create the signal file.
+# On some emulators touch fails if the directory isn't created first.
+adb shell mkdir /sdcard/DCIM || true
+adb shell mkdir $DIRECTORY || true
+# This actually has to work, previous steps may fail if the directories already exist.
+adb shell touch "${DIRECTORY}/${REGENERATE_FILE_NAME}"
+
+# On APIs > 22 we need to grant the appropriate runtime permissions so our test APK can write
+# resource files to the public sdcard. Cache and internal cache directories aren't consistently
+# available across all versions of Android. So far this is the best cross SDK solution I've 
+# found
+sdk_version=`adb shell getprop ro.build.version.sdk`
+sdk_version=`echo $sdk_version | tr -d '\r'`
+if [[ $sdk_version -gt 22 ]]; then
+  echo "Installing apks and granting runtime permissions..." 1>&3 2>&4
+  ./gradlew :instrumentation:installDebug :instrumentation:installDebugAndroidTest 
+  adb shell pm grant com.bumptech.glide.instrumentation android.permission.WRITE_EXTERNAL_STORAGE
+  adb shell pm grant com.bumptech.glide.instrumentation android.permission.READ_EXTERNAL_STORAGE
+  adb shell pm grant com.bumptech.glide.instrumentation.test android.permission.WRITE_EXTERNAL_STORAGE
+  adb shell pm grant com.bumptech.glide.instrumentation.test android.permission.READ_EXTERNAL_STORAGE
+fi
+
+echo "Generating updated resource files..." 1>&3 2>&4
+./gradlew :instrumentation:connectedDebugAndroidTest $test_restriction --parallel || true 
+
+echo "Copying updated resource files to res directory..." 1>&3 2>&4
+adb pull $DIRECTORY
+rm "${DIRECTORY_NAME}/${REGENERATE_FILE_NAME}" 
+cp $DIRECTORY_NAME/raw/* instrumentation/src/main/res/raw 
+rm -rf $DIRECTORY_NAME
+adb shell rm -r $DIRECTORY
+ 
+echo "Verifying all tests pass..." 1>&3 2>&4
+
+./gradlew :instrumentation:clean
+./gradlew :instrumentation:connectedDebugAndroidTest $test_restriction --parallel
+
+echo "Complete!" 1>&3 2>&4
diff --git a/scripts/run_instrumentation_tests.sh b/scripts/run_instrumentation_tests.sh
new file mode 100755
index 000000000..412690a8a
--- /dev/null
+++ b/scripts/run_instrumentation_tests.sh
@@ -0,0 +1,20 @@
+#!/usr/bin/env bash
+# Runs instrumentation tests on firebase. Must be run locally, not on travis.
+#
+# Usage: 
+# ./scripts/run_instrumentation_test.sh
+
+./gradlew :instrumentation:assembleDebug :instrumentation:assembleDebugAndroidTest --parallel
+
+apk_dir=instrumentation/build/outputs/apk
+gcloud firebase test android run \
+  --type instrumentation \
+  --app $apk_dir/instrumentation-debug.apk \
+  --test $apk_dir/instrumentation-debug-androidTest.apk \
+  --device model=Nexus6P,version=26,locale=en,orientation=portrait  \
+  --device model=Nexus6P,version=25,locale=en,orientation=portrait \
+  --device model=Nexus6P,version=23,locale=en,orientation=portrait \
+  --device model=Nexus6,version=22,locale=en,orientation=portrait \
+  --device model=Nexus5,version=19,locale=en,orientation=portrait \
+  --project android-glide \
+  --no-auto-google-login \
diff --git a/scripts/split_by_sdk.sh b/scripts/split_by_sdk.sh
new file mode 100755
index 000000000..0ace5280d
--- /dev/null
+++ b/scripts/split_by_sdk.sh
@@ -0,0 +1,173 @@
+#!/usr/bin/env bash
+#
+# Loops through all Android API levels that Glide supports (and that 
+# functioning emulators exist for) and runs a particular emulator test file
+# to generate canonical assets. If assets start to fail on a particular sdk
+# level, the test file is updated with the new API level to split on and 
+# assets for that particular api level are added to the test resources 
+# directory.
+#
+# Usage:
+#   ./scripts/split_by_sdk.sh <test_path> <test_name>
+#
+# where test_path is the test file path:
+#   instrumentation/src/androidTest/java/com/bumptech/glide/Test.java
+# and test_name is the package qualified class name:
+#   com.bumptech.glide.Test
+# 
+# For example:
+#  ./scripts/split_by_sdk.sh \
+#    instrumentation/src/androidTest/java/com/bumptech/glide/FitCenterRegressionTest.java \
+#    com.bumptech.glide.FitCenterRegressionTest
+
+POSITIONAL=()
+while [[ $# -gt 0 ]]
+do
+key="$1"
+
+case $key in
+    --tests)
+    test_classes_string="$2"
+    shift # past argument
+    shift # past value
+    ;;
+    --apis)
+    apis_string="$2"
+    shift # past argument
+    shift # past value
+    ;;
+    --abis)
+    abis_string="$2"
+    shift # past argument
+    shift # past value
+    ;;
+    -v|--verbose)
+    verbose="1"
+    shift # past argument
+    ;;
+    *)    # unknown option
+    POSITIONAL+=("$1") # save it in an array for later
+    shift # past argument
+    ;;
+esac
+done
+set -- "${POSITIONAL[@]}" # restore positional parameters
+
+if [ -z "$test_classes_string" ]; then
+  test_classes_string=`grep -rwl instrumentation/src/androidTest -e RegressionTest \
+    | grep -v "/test/" \
+    | grep -v ".bak" \
+    | tr '\n' ',' \
+    | sed 's/instrumentation\/src\/androidTest\/java\///g' \
+    | sed 's/\//\./g' \
+    | sed 's/\.java//g' \
+    | sed 's/,*$//g'` 
+fi
+
+if [ -z "$apis_string" ]; then
+  declare -a apis=(
+                  "16" 
+                  #"17" API 17 emulator seems to have trouble starting and I haven't yet found a case where behaviors changed at that API level.
+                  "18"
+                  "19"
+                  # "20" Android Wear, missing x86 emulators.
+                  "21"
+                  "22"
+                  "23"
+                  "24"
+                  "25"
+                  "26")
+else 
+  IFS=',' read -ra apis <<< "$apis_string"
+fi
+
+if [ -z "$abis_string" ]; then
+  declare -a abis=(
+  "x86"
+  "armeabi-v7a"
+  )
+else 
+  IFS=',' read -ra abis <<< "$abis_string"
+fi
+
+IFS=',' read -ra test_classes <<< "$test_classes_string"
+for test_class in "${test_classes[@]}"
+do
+  test_path=`echo $test_class | sed 's/\./\//g' | sed -e 's/^/instrumentation\/src\/androidTest\/java\//' | sed -e 's/$/\.java/'`
+  if [ ! -f "${test_path}" ]; then
+    echo "Missing test $test_class at expected path: $test_path"
+    exit 1
+  fi
+done
+
+if (($verbose)); then
+  printf "tests: "
+  printf '%s,' "${test_classes[@]}"
+  printf "\nabis:"
+  printf '%s,' "${abis[@]}"
+  printf "\napis:"
+  printf '%s,' "${apis[@]}"
+  printf "\n"
+fi
+
+adb devices | grep -v "List of devices" | grep device > /dev/null 2>&1 \
+  && \
+  { \
+    echo "Emulators are already running, kill them before running this script: "; \
+    echo "e.g.: adb -s emulator-5554 emu kill"; \
+    adb devices; \
+    exit 1; \
+  }
+
+exec 3>&1
+exec 4>&2
+if !(($verbose)); then
+  exec 1>/dev/null
+  exec 2>/dev/null
+fi
+
+for abi in "${abis[@]}"
+do
+  if [ "${abi}" == "armeabi-v7a" ]; then
+    emulator_type="default"
+    emulator_script=$ANDROID_HOME/emulator/emulator
+  else 
+    emulator_type="google_apis"
+    emulator_script=$ANDROID_HOME/tools/emulator
+  fi
+
+  for api in "${apis[@]}"
+  do
+    if [ "${abi}" == "armeabi-v7a" ] && [ "${api}" -gt 22 ]; then
+      echo "armeabi-v7a emulators beyond API 22 are unreliable, ignoring ${api}"
+      continue
+    fi
+
+    echo "Checking on API ${api} and ${abi}" 1>&3 2>&4
+    target="system-images;android-${api};${emulator_type};${abi}"
+    sdkmanager --install $target
+    avdmanager create avd --force -n test -k $target --device "Nexus 5X" -c 2000M 
+    QEMU_AUDIO_DRV=none $emulator_script -avd test -no-window &
+    pid=$!
+    ./scripts/android-wait-for-emulator.sh
+    for test_class in "${test_classes[@]}"
+    do
+      test_path=`echo $test_class | sed 's/\./\//g' | sed -e 's/^/instrumentation\/src\/androidTest\/java\//' | sed -e 's/$/\.java/'`
+      ./gradlew :instrumentation:connectedCheck \
+        -Pandroid.testInstrumentationRunnerArguments.class=$test_class
+      if [ $? -ne 0 ]; then
+        echo "Tests for API ${api} failed, updating SplitBySdk and generating resources..." 1>&3 2>&4
+        if [ -z $(grep "@SplitBySdk" $test_path | grep "${api}") ]; then
+          sed -i.bak s/@SplitBySdk\(\{/@SplitBySdk\(\{$api,/ $test_path
+          rm "${test_path}.bak"
+        fi
+        ./scripts/regenerate_resources.sh $test_class #|| { echo "Tests still fail with new resources, aborting";  exit 1; }
+      fi
+    done
+    adb -s emulator-5554 emu kill
+    sleep 1
+    pkill emulator64-crash-service
+    pkill emulator-crash-service
+    echo "Finished API ${api}" 1>&3 2>&4
+  done
+done
diff --git a/scripts/travis_create_emulator.sh b/scripts/travis_create_emulator.sh
index fd39b3264..05ac06c8a 100755
--- a/scripts/travis_create_emulator.sh
+++ b/scripts/travis_create_emulator.sh
@@ -2,9 +2,10 @@
 
 set -e
 
-echo y | android --silent update sdk --no-ui --all --filter android-$ANDROID_TARGET
-echo y | android --silent update sdk --no-ui --all --filter sys-img-armeabi-v7a-android-$ANDROID_TARGET
-echo no | android create avd --force -n test -t android-$ANDROID_TARGET --abi armeabi-v7a
-QEMU_AUDIO_DRV=none emulator -engine classic -avd test -no-window &
+target="system-images;android-${ANDROID_TARGET};default;armeabi-v7a"
+echo y | sdkmanager --update
+echo y | sdkmanager --install $target
+avdmanager create avd --force -n test -k $target --device "Nexus 5X" -c 2000M 
+QEMU_AUDIO_DRV=none $ANDROID_HOME/emulator/emulator -avd test -no-window &
 
 exit 0
diff --git a/scripts/travis_firebase.sh b/scripts/travis_firebase.sh
index 95f084720..6815797a8 100755
--- a/scripts/travis_firebase.sh
+++ b/scripts/travis_firebase.sh
@@ -17,10 +17,12 @@ apk_dir=instrumentation/build/outputs/apk
   --type instrumentation \
   --app $apk_dir/instrumentation-debug.apk \
   --test $apk_dir/instrumentation-debug-androidTest.apk \
-  --device model=Nexus6P,version=26,locale=en,orientation=portrait  \
+  --device model=Nexus6P,version=26,locale=en,orientation=portrait \
   --device model=Nexus6P,version=25,locale=en,orientation=portrait \
+  --device model=Nexus6P,version=24,locale=en,orientation=portrait \
   --device model=Nexus6P,version=23,locale=en,orientation=portrait \
   --device model=Nexus6,version=22,locale=en,orientation=portrait \
+  --device model=Nexus5,version=21,locale=en,orientation=portrait \
   --device model=Nexus5,version=19,locale=en,orientation=portrait \
   --project android-glide \
   --no-auto-google-login \
diff --git a/scripts/travis_instrumentation.sh b/scripts/travis_instrumentation.sh
index 66155b286..da1c9b851 100755
--- a/scripts/travis_instrumentation.sh
+++ b/scripts/travis_instrumentation.sh
@@ -2,11 +2,6 @@
 
 set -e
 
-if [ "$TRAVIS_PULL_REQUEST" == "false" ] && [ $ANDROID_TARGET -gt 18 ]; then
-  echo "Emulator tests >= 19 are run on Firebase ignoring"
-  exit 0
-fi
-
 echo "Starting emulator for $COMPONENT tests"
 ./scripts/travis_create_emulator.sh &
 
diff --git a/scripts/travis_samples.sh b/scripts/travis_samples.sh
index 72c4e2860..3e7764750 100755
--- a/scripts/travis_samples.sh
+++ b/scripts/travis_samples.sh
@@ -11,9 +11,15 @@ set -e
   --parallel &
 pid=$!
 
-./scripts/install_firebase.sh
+if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
+  wait $pid
+  echo "Unable to run Firebase tests for pull requests, exiting"
+  exit 0
+else 
+  ./scripts/install_firebase.sh
+  wait $pid
+fi
 
-wait $pid
 
 declare -a samples=("flickr" 
                 "giphy" 
@@ -32,7 +38,9 @@ do
     --app $sample_apk \
     --device model=Nexus6P,version=26,locale=en,orientation=portrait  \
     --project android-glide \
-    --no-auto-google-login &
+    --no-auto-google-login \
+    --timeout 2m \
+    &
   pids+=("$!")
 done
 
