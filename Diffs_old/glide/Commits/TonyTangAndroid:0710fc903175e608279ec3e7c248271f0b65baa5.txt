diff --git a/.travis.yml b/.travis.yml
index e3dc14645..4bd84ebda 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,10 +3,8 @@ android:
   components:
   - tools
   - platform-tools
-  - build-tools-25.0.2
-  - android-25
-  - extra-android-m2repository
-  - extra-android-support
+  - build-tools-26.0.1
+  - android-26
 
   licenses:
   - 'android-sdk-license.*'
@@ -24,7 +22,10 @@ after_success:
 
 before_cache:
   - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock
+  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
 cache:
   directories:
     - $HOME/.gradle/caches/
     - $HOME/.gradle/wrapper/
+    - $HOME/.android/build-cache
+
diff --git a/README.md b/README.md
index 495fd8877..6e9981912 100644
--- a/README.md
+++ b/README.md
@@ -2,7 +2,7 @@ Glide
 =====
 
 [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide) [![Build Status](https://travis-ci.org/bumptech/glide.svg?branch=master)](https://travis-ci.org/bumptech/glide)
-[Report an issue with Glide][5]
+| [View Glide's documentation][20] | [Report an issue with Glide][5]
 
 Glide is a fast and efficient open source media management and image loading framework for Android that wraps media
 decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.
@@ -24,13 +24,13 @@ Or use Gradle:
 
 ```gradle
 repositories {
-  mavenCentral() // jcenter() works as well because it pulls from Maven Central
+  mavenCentral()
+  maven { url 'https://maven.google.com' }
 }
 
 dependencies {
-  compile 'com.github.bumptech.glide:glide:4.0.0-RC0'
-  compile 'com.android.support:support-v4:25.3.1'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0-RC0'
+  compile 'com.github.bumptech.glide:glide:4.1.1'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.1.1'
 }
 ```
 
@@ -40,7 +40,7 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.0.0-RC0</version>
+  <version>4.1.1</version>
 </dependency>
 <dependency>
   <groupId>com.google.android</groupId>
@@ -48,9 +48,9 @@ Or Maven:
   <version>r7</version>
 </dependency>
 <dependency>
-  <groupdId>com.github.bumptech.glide</groupId>
+  <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.0.0-RC0</version>
+  <version>4.1.1</version>
   <optional>true</optional>
 </dependency>
 ```
@@ -63,6 +63,7 @@ Depending on your ProGuard (DexGuard) config and usage, you may need to include
 
 ```pro
 -keep public class * implements com.bumptech.glide.module.GlideModule
+-keep public class * extends com.bumptech.glide.AppGlideModule
 -keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
   **[] $VALUES;
   public *;
@@ -74,7 +75,7 @@ Depending on your ProGuard (DexGuard) config and usage, you may need to include
 
 How do I use Glide?
 -------------------
-Checkout the [documentation][20] for pages on a variety of topics, and see the [javadocs][3].
+Check out the [documentation][20] for pages on a variety of topics, and see the [javadocs][3].
 
 For Glide v3, see the [wiki][2].
 
@@ -113,15 +114,15 @@ Simple use cases with Glide's [generated API][21] will look something like this:
 
 Status
 ------
-[*Version 3* on the `3.0` branch][14] is a stable public release used in multiple open source projects at Google including in the Android Camera
-app and in the 2014 Google IO app. *Version 4* is currently under development on the `master` branch.
+Version 4 is now released and stable. Updates are currently released at least monthly with new features and bug fixes.
 
 Comments/bugs/questions/pull requests are always welcome! Please read [CONTRIBUTING.md][5] on how to report issues.
 
 Compatibility
 -------------
 
- * **Android SDK**: Glide requires a minimum API level of 10.
+ * **Android SDK**: Glide requires a minimum API level of 14.  
+ If you need to support older versions, consider staying on [Glide v3][14], which works on API 10, but not actively maintained.
  * **OkHttp 2.x**: there are optional dependencies available called `okhttp-integration`, see [Integration Libraries][12] wiki page.
  * **OkHttp 3.x**: there are optional dependencies available called `okhttp3-integration`, see [Integration Libraries][12] wiki page.
  * **Volley**: there are optional dependencies available called `volley-integration`, see [Integration Libraries][12] wiki page.
@@ -144,12 +145,13 @@ variable is pointing at the SDK or add a `local.properties` file in the root pro
 
 Samples
 -------
-Follow the steps in the [Build](#build) section to setup the project and then:
+Follow the steps in the [Build](#build) section to set up the project and then:
 
 ```shell
 ./gradlew :samples:flickr:run
 ./gradlew :samples:giphy:run
 ./gradlew :samples:svg:run
+./gradlew :samples:contacturi:run
 ```
 You may also find precompiled APKs on the [releases page][1].
 
diff --git a/annotation/compiler/build.gradle b/annotation/compiler/build.gradle
index 0b51f2584..adff4ea2e 100644
--- a/annotation/compiler/build.gradle
+++ b/annotation/compiler/build.gradle
@@ -3,7 +3,7 @@ import org.gradle.internal.jvm.Jvm
 apply plugin: 'java'
 
 dependencies {
-    compile 'com.squareup:javapoet:1.8.0'
+    compile 'com.squareup:javapoet:1.9.0'
     compile 'com.google.auto.service:auto-service:1.0-rc3'
     compile 'com.google.code.findbugs:jsr305:3.0.1'
     compile project(':annotation')
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
index 6e45b850a..3e62fb816 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleGenerator.java
@@ -181,6 +181,7 @@ private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClas
             .addModifiers(Modifier.PUBLIC)
             .addAnnotation(Override.class)
             .addParameter(ClassName.get("android.content", "Context"), "context")
+            .addParameter(ClassName.get("com.bumptech.glide", "Glide"), "glide")
             .addParameter(ClassName.get("com.bumptech.glide", "Registry"), "registry");
 
     for (String glideModule : libraryGlideModuleClassNames) {
@@ -189,10 +190,10 @@ private MethodSpec generateRegisterComponents(Set<String> libraryGlideModuleClas
       }
       ClassName moduleClassName = ClassName.bestGuess(glideModule);
       registerComponents.addStatement(
-          "new $T().registerComponents(context, registry)", moduleClassName);
+          "new $T().registerComponents(context, glide, registry)", moduleClassName);
     }
     // Order matters here. The AppGlideModule must be called last.
-    registerComponents.addStatement("appGlideModule.registerComponents(context, registry)");
+    registerComponents.addStatement("appGlideModule.registerComponents(context, glide, registry)");
     return registerComponents.build();
   }
 
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
index 34cfdf645..99805e9b0 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideGenerator.java
@@ -76,6 +76,14 @@
   private static final String REQUEST_MANAGER_QUALIFIED_NAME =
       "com.bumptech.glide.RequestManager";
 
+  private static final String VISIBLE_FOR_TESTING_QUALIFIED_NAME =
+      "android.support.annotation.VisibleForTesting";
+
+  private static final String SUPPRESS_LINT_PACKAGE_NAME =
+      "android.annotation";
+  private static final String SUPPRESS_LINT_CLASS_NAME =
+      "SuppressLint";
+
   private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
   private final TypeElement glideType;
@@ -147,9 +155,22 @@ public ParameterSpec apply(VariableElement input) {
                   }
             }));
 
-
+    TypeElement visibleForTestingType =
+        processingEnv
+            .getElementUtils()
+            .getTypeElement(VISIBLE_FOR_TESTING_QUALIFIED_NAME);
     for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
       builder.addAnnotation(AnnotationSpec.get(mirror));
+
+      // Suppress a lint warning if we're overriding a VisibleForTesting method.
+      // See #1977.
+      if (mirror.getAnnotationType().asElement().equals(visibleForTestingType)) {
+        builder.addAnnotation(
+            AnnotationSpec.builder(
+                ClassName.get(SUPPRESS_LINT_PACKAGE_NAME, SUPPRESS_LINT_CLASS_NAME))
+                .addMember("value", "$S", "VisibleForTests")
+                .build());
+      }
     }
 
     boolean returnsValue = element != null;
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index 21c147ddc..aa2618b83 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -162,7 +162,7 @@ TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedO
                 .addMember("value", "$S", "unused")
                 .addMember("value", "$S", "deprecation")
                 .build())
-        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
+        .addModifiers(Modifier.PUBLIC)
         .addTypeVariable(transcodeTypeName)
         .superclass(requestBuilderOfTranscodeType)
         .addMethods(generateConstructors())
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index 920d439f6..1c20fe858 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -108,7 +108,7 @@ TypeSpec generate(
             AnnotationSpec.builder(SuppressWarnings.class)
                 .addMember("value", "$S", "deprecation")
                 .build())
-         .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
+         .addModifiers(Modifier.PUBLIC)
          .addMethod(generateAsMethod(generatedCodePackageName, requestBuilder))
          .addMethod(generateCallSuperConstructor())
          .addMethods(generateAdditionalRequestManagerMethods(glideExtensions))
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index b9d7e913d..8099489d4 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -231,21 +231,28 @@ public String apply(VariableElement input) {
     List<? extends VariableElement> parameters =
         element.getParameters().subList(1, element.getParameters().size());
 
-    // Add the correct super() call.
-    if (overrideType == OVERRIDE_EXTEND) {
-      String callSuper = "super.$L(";
-      List<Object> args = new ArrayList<>();
-      args.add(element.getSimpleName().toString());
-      if (!parameters.isEmpty()) {
-        for (VariableElement variable : parameters) {
-          callSuper += "$L, ";
-          args.add(variable.getSimpleName().toString());
-        }
-        callSuper = callSuper.substring(0, callSuper.length() - 2);
+    // Generates the String and list of arguments to pass in when calling this method or super.
+    // IE centerCrop(context) creates methodLiterals="%L" and methodArgs=[centerCrop, context].
+    List<Object> methodArgs = new ArrayList<>();
+    methodArgs.add(element.getSimpleName().toString());
+    String methodLiterals = "";
+    if (!parameters.isEmpty()) {
+      for (VariableElement variable : parameters) {
+        methodLiterals += "$L, ";
+        methodArgs.add(variable.getSimpleName().toString());
       }
-      callSuper += ")";
+      methodLiterals = methodLiterals.substring(0, methodLiterals.length() - 2);
+    }
+
+    builder.beginControlFlow("if (isAutoCloneEnabled())")
+        .addStatement(
+            "return clone().$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
+        .endControlFlow();
 
-      builder.addStatement(callSuper, args.toArray(new Object[0]))
+    // Add the correct super() call.
+    if (overrideType == OVERRIDE_EXTEND) {
+      String callSuper = "super.$L(" + methodLiterals + ")";
+      builder.addStatement(callSuper, methodArgs.toArray(new Object[0]))
           .addJavadoc(processorUtil.generateSeeMethodJavadoc(
               requestOptionsName, methodName, parameters))
           .addAnnotation(Override.class);
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
index 690b8f727..679eb8bce 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideModule.java
@@ -6,7 +6,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Identifies AppGlideModules and ChildeGlideModules for Glide's annotation processor to merge at
+ * Identifies AppGlideModules and LibraryGlideModules for Glide's annotation processor to merge at
  * compile time.
  *
  * <p>Replaces <meta-data /> tags in AndroidManifest.xml.
diff --git a/build.gradle b/build.gradle
index de9f3c9d1..3d157c29f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -34,6 +34,9 @@ subprojects { project ->
         maven {
             url "https://oss.sonatype.org/content/repositories/snapshots"
         }
+        maven {
+            url "https://maven.google.com"
+        }
     }
 
     apply plugin: 'checkstyle'
@@ -67,14 +70,10 @@ subprojects { project ->
             options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
         }
     }
-
-    // We generate a combined javadoc, no need to create javadocs for each library independently.
-    if (!project.name.equals('glide')) {
-        tasks.withType(Javadoc).all { enabled = false }
-    }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.9'
-    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
+    gradleVersion = '4.1'
+    distributionType = Wrapper.DistributionType.ALL
 }
+
diff --git a/checkstyle.xml b/checkstyle.xml
index b5285c17f..55273de62 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -69,7 +69,10 @@
         <module name="StaticVariableName" />
         <module name="TypeName" />
 
-        <module name="TrailingComment" />
+        <!-- Allow common trailing comments used to describe suppressions -->
+        <module name="TrailingComment">
+          <property name="legalComment" value="Public API" />
+        </module>
 
         <!-- Checks for imports. -->
         <!-- See http://checkstyle.sourceforge.net/config_imports.html -->
diff --git a/gradle.properties b/gradle.properties
index d8cd6407d..63ca735ce 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,9 +1,9 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=true
 
-VERSION_NAME=4.0.0-SNAPSHOT
+VERSION_NAME=4.2.0-SNAPSHOT
 VERSION_MAJOR=4
-VERSION_MINOR=0
+VERSION_MINOR=2
 VERSION_PATCH=0
 GROUP=com.github.bumptech.glide
 
@@ -15,10 +15,9 @@ POM_SCM_DEV_CONNECTION=scm:git@github.com:bumptech/glide.git
 POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
-SUPPORT_V4_VERSION=25.3.1
-SUPPORT_V7_VERSION=25.3.1
+ANDROID_SUPPORT_VERSION=26.0.2
 VOLLEY_VERSION=1.0.0
-OK_HTTP_VERSION=3.0.1
+OK_HTTP_VERSION=3.9.0
 ANDROID_GRADLE_VERSION=2.3.0
 
 COVERALLS_GRADLE_VERSION=2.4.0
@@ -31,9 +30,9 @@ TRUTH_VERSION=0.26
 FINDBUGS_VERSION=3.0.0
 JACOCO_VERSION=0.7.1.201405082137
 
-COMPILE_SDK_VERSION=25
-BUILD_TOOLS_VERSION=25.0.2
-TARGET_SDK_VERSION=25
+COMPILE_SDK_VERSION=26
+BUILD_TOOLS_VERSION=26.0.1
+TARGET_SDK_VERSION=26
 MIN_SDK_VERSION=14
 
 org.gradle.jvmargs=-Xmx2048M
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 941144813..7a3265ee9 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 06cc66097..bf1b63c34 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Fri Mar 31 22:27:21 PDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradlew b/gradlew
index 9d82f7891..cccdd3d51 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -6,20 +6,38 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
-warn ( ) {
+warn () {
     echo "$*"
 }
 
-die ( ) {
+die () {
     echo
     echo "$*"
     echo
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,26 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >/dev/null
-APP_HOME="`pwd -P`"
-cd "$SAVED" >/dev/null
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -85,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -150,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index aec99730b..e95643d6a 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,10 +46,9 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/integration/gifencoder/build.gradle b/integration/gifencoder/build.gradle
index 7219f4ffa..3ef29e0f6 100644
--- a/integration/gifencoder/build.gradle
+++ b/integration/gifencoder/build.gradle
@@ -8,7 +8,7 @@ dependencies {
     testCompile "junit:junit:${JUNIT_VERSION}"
     testCompile "org.mockito:mockito-all:${MOCKITO_VERSION}"
     testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    testCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index c01164e2e..dcce0013f 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -5,6 +5,7 @@ dependencies {
     annotationProcessor project(':annotation:compiler')
 
     compile "com.squareup.okhttp:okhttp:2.7.1"
+    compile "com.android.support:support-annotations:{$ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
index 9301703b6..fa45bb6c9 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
@@ -26,7 +27,7 @@ public void applyOptions(Context context, GlideBuilder builder) {
   }
 
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
   }
 }
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
index 5a46639f9..dd4bbfb27 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpLibraryGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.load.model.GlideUrl;
@@ -18,7 +19,7 @@
 @GlideModule
 public class OkHttpLibraryGlideModule extends LibraryGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
   }
 }
diff --git a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
index 2b1f90a78..936f95f81 100644
--- a/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
+++ b/integration/okhttp/src/main/java/com/bumptech/glide/integration/okhttp/OkHttpStreamFetcher.java
@@ -1,8 +1,10 @@
 package com.bumptech.glide.integration.okhttp;
 
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.HttpException;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
@@ -57,10 +59,10 @@ public void onResponse(Response response) throws IOException {
         if (response.isSuccessful()) {
           long contentLength = responseBody.contentLength();
           stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
-        } else if (Log.isLoggable(TAG, Log.DEBUG)) {
-          Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());
+          callback.onDataReady(stream);
+        } else {
+          callback.onLoadFailed(new HttpException(response.message(), response.code()));
         }
-        callback.onDataReady(stream);
       }
     });
   }
@@ -88,11 +90,13 @@ public void cancel() {
     // TODO: call cancel on the client when this method is called on a background thread. See #257
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.REMOTE;
diff --git a/integration/okhttp3/build.gradle b/integration/okhttp3/build.gradle
index 59a222795..5290c6a42 100644
--- a/integration/okhttp3/build.gradle
+++ b/integration/okhttp3/build.gradle
@@ -5,6 +5,7 @@ dependencies {
     annotationProcessor project(':annotation:compiler')
 
     compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
+    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
index 1c05bf678..dc6b7b545 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp3;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
@@ -27,7 +28,7 @@ public void applyOptions(Context context, GlideBuilder builder) {
   }
 
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
   }
 }
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java
index 911b5acac..74eace9eb 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpLibraryGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.okhttp3;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.load.model.GlideUrl;
@@ -18,7 +19,7 @@
 @GlideModule
 public final class OkHttpLibraryGlideModule extends LibraryGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
   }
 }
diff --git a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
index 61adb97b1..a0b0faaef 100644
--- a/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
+++ b/integration/okhttp3/src/main/java/com/bumptech/glide/integration/okhttp3/OkHttpStreamFetcher.java
@@ -1,8 +1,11 @@
 package com.bumptech.glide.integration.okhttp3;
 
+import android.os.Build;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.HttpException;
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.model.GlideUrl;
 import com.bumptech.glide.util.ContentLengthInputStream;
@@ -18,13 +21,15 @@
 /**
  * Fetches an {@link InputStream} using the okhttp library.
  */
-public class OkHttpStreamFetcher implements DataFetcher<InputStream> {
+public class OkHttpStreamFetcher implements DataFetcher<InputStream>,
+ okhttp3.Callback {
   private static final String TAG = "OkHttpFetcher";
   private final Call.Factory client;
   private final GlideUrl url;
   @Synthetic InputStream stream;
   @Synthetic ResponseBody responseBody;
   private volatile Call call;
+  private DataCallback<? super InputStream> callback;
 
   public OkHttpStreamFetcher(Call.Factory client, GlideUrl url) {
     this.client = client;
@@ -39,29 +44,45 @@ public void loadData(Priority priority, final DataCallback<? super InputStream>
       requestBuilder.addHeader(key, headerEntry.getValue());
     }
     Request request = requestBuilder.build();
+    this.callback = callback;
 
     call = client.newCall(request);
-    call.enqueue(new okhttp3.Callback() {
-      @Override
-      public void onFailure(Call call, IOException e) {
-        if (Log.isLoggable(TAG, Log.DEBUG)) {
-          Log.d(TAG, "OkHttp failed to obtain result", e);
-        }
-        callback.onLoadFailed(e);
+    if (Build.VERSION.SDK_INT != Build.VERSION_CODES.O) {
+      call.enqueue(this);
+    } else {
+      try {
+        // Calling execute instead of enqueue is a workaround for #2355, where okhttp throws a
+        // ClassCastException on O.
+        onResponse(call, call.execute());
+      } catch (IOException e) {
+        onFailure(call, e);
+      } catch (ClassCastException e) {
+        // It's not clear that this catch is necessary, the error may only occur even on O if
+        // enqueue is used.
+        onFailure(call, new IOException("Workaround for framework bug on O", e));
       }
+    }
+  }
 
-      @Override
-      public void onResponse(Call call, Response response) throws IOException {
-        responseBody = response.body();
-        if (response.isSuccessful()) {
-          long contentLength = responseBody.contentLength();
-          stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
-        } else if (Log.isLoggable(TAG, Log.DEBUG)) {
-          Log.d(TAG, "OkHttp got error response: " + response.code() + ", " + response.message());
-        }
-        callback.onDataReady(stream);
-      }
-    });
+  @Override
+  public void onFailure(Call call, IOException e) {
+    if (Log.isLoggable(TAG, Log.DEBUG)) {
+      Log.d(TAG, "OkHttp failed to obtain result", e);
+    }
+
+    callback.onLoadFailed(e);
+  }
+
+  @Override
+  public void onResponse(Call call, Response response) throws IOException {
+    responseBody = response.body();
+    if (response.isSuccessful()) {
+      long contentLength = responseBody.contentLength();
+      stream = ContentLengthInputStream.obtain(responseBody.byteStream(), contentLength);
+      callback.onDataReady(stream);
+    } else {
+      callback.onLoadFailed(new HttpException(response.message(), response.code()));
+    }
   }
 
   @Override
@@ -76,6 +97,7 @@ public void cleanup() {
     if (responseBody != null) {
       responseBody.close();
     }
+    callback = null;
   }
 
   @Override
@@ -86,11 +108,13 @@ public void cancel() {
     }
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.REMOTE;
diff --git a/integration/recyclerview/build.gradle b/integration/recyclerview/build.gradle
index 498808a55..24eb09e46 100644
--- a/integration/recyclerview/build.gradle
+++ b/integration/recyclerview/build.gradle
@@ -2,8 +2,8 @@ apply plugin: 'com.android.library'
 
 dependencies {
     compile project(':library')
-    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
-    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    provided "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/volley/build.gradle b/integration/volley/build.gradle
index 8f04a9b1a..b4c5a53ff 100644
--- a/integration/volley/build.gradle
+++ b/integration/volley/build.gradle
@@ -3,6 +3,7 @@ apply plugin: 'com.android.library'
 dependencies {
     compile project(':library')
     compile "com.android.volley:volley:${VOLLEY_VERSION}"
+    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 
     testCompile project(":testutil")
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
index 669e7b732..3a4d273ae 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.volley;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.load.model.GlideUrl;
@@ -26,7 +27,7 @@ public void applyOptions(Context context, GlideBuilder builder) {
   }
 
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.replace(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(context));
   }
 }
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyLibraryGlideModule.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyLibraryGlideModule.java
index 22f12df4e..6fa56468c 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyLibraryGlideModule.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyLibraryGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.integration.volley;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.load.model.GlideUrl;
@@ -20,7 +21,7 @@
 @GlideModule
 public class VolleyLibraryGlideModule extends LibraryGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.replace(GlideUrl.class, InputStream.class, new VolleyUrlLoader.Factory(context));
   }
 }
diff --git a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
index f0b4340fa..3a4e17415 100644
--- a/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
+++ b/integration/volley/src/main/java/com/bumptech/glide/integration/volley/VolleyStreamFetcher.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.integration.volley;
 
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.android.volley.AuthFailureError;
 import com.android.volley.NetworkResponse;
@@ -67,11 +68,13 @@ public void cancel() {
     }
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.REMOTE;
diff --git a/library/build.gradle b/library/build.gradle
index fc59f7a8b..d71386050 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -19,8 +19,8 @@ dependencies {
     compile project(':third_party:gif_decoder')
     compile project(':third_party:disklrucache')
     compile project(':annotation')
-    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    provided "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
+    provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    provided "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
     testCompile project(':testutil')
     testCompile 'com.google.guava:guava-testlib:18.0'
     testCompile "com.google.truth:truth:${TRUTH_VERSION}"
@@ -28,7 +28,7 @@ dependencies {
     testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
     testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
     testCompile "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
-    testCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
 }
 
 android.testOptions.unitTests.all {
@@ -66,6 +66,9 @@ android {
 }
 
 afterEvaluate {
+    if (tasks.findByName("assembleDebug") == null) {
+        return
+    }
     task findbugs(type: FindBugs, dependsOn: assembleDebug) {
 
         description 'Run findbugs'
@@ -111,9 +114,9 @@ afterEvaluate {
 
     check.dependsOn('pmd')
 
-   task jacocoTestReport(type: JacocoReport, dependsOn: testDebugUnitTest) {
-       def coverageSourceDirs = ['src/main/java']
-       group = "Reporting"
+    task jacocoTestReport(type: JacocoReport, dependsOn: testDebugUnitTest) {
+        def coverageSourceDirs = ['src/main/java']
+        group = "Reporting"
         description = "Generate Jacoco coverage reports"
 
         classDirectories = fileTree(
diff --git a/library/src/main/java/com/bumptech/glide/GeneratedAppGlideModule.java b/library/src/main/java/com/bumptech/glide/GeneratedAppGlideModule.java
index 1c852b961..853990ec2 100644
--- a/library/src/main/java/com/bumptech/glide/GeneratedAppGlideModule.java
+++ b/library/src/main/java/com/bumptech/glide/GeneratedAppGlideModule.java
@@ -7,11 +7,11 @@
 import java.util.Set;
 
 /**
- * A temporary interface to allow {@link AppGlideModule}s to exclude
- * {@link com.bumptech.glide.annotation.GlideModule}s to ease the migration from
- * {@link com.bumptech.glide.annotation.GlideModule}s to Glide's annotation processing system.
+ * Allows {@link AppGlideModule}s to exclude {@link com.bumptech.glide.annotation.GlideModule}s to
+ * ease the migration from {@link com.bumptech.glide.annotation.GlideModule}s to Glide's annotation
+ * processing system and optionally provides a
+ * {@link com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory} impl.
  */
-@Deprecated
 abstract class GeneratedAppGlideModule extends AppGlideModule {
   /**
    * This method can be removed when manifest parsing is no longer supported.
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index a6ef96c89..f8e9cfd80 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -80,6 +80,7 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 /**
@@ -92,6 +93,7 @@
   private static final String DEFAULT_DISK_CACHE_DIR = "image_manager_disk_cache";
   private static final String TAG = "Glide";
   private static volatile Glide glide;
+  private static volatile boolean isInitializing;
 
   private final Engine engine;
   private final BitmapPool bitmapPool;
@@ -151,7 +153,7 @@ public static Glide get(Context context) {
     if (glide == null) {
       synchronized (Glide.class) {
         if (glide == null) {
-          initGlide(context);
+          checkAndInitializeGlide(context);
         }
       }
     }
@@ -159,18 +161,30 @@ public static Glide get(Context context) {
     return glide;
   }
 
+  private static void checkAndInitializeGlide(Context context) {
+    // In the thread running initGlide(), one or more classes may call Glide.get(context).
+    // Without this check, those calls could trigger infinite recursion.
+    if (isInitializing) {
+      throw new IllegalStateException("You cannot call Glide.get() in registerComponents(),"
+          + " use the provided Glide instance instead");
+    }
+    isInitializing = true;
+    initializeGlide(context);
+    isInitializing = false;
+  }
+
   @VisibleForTesting
-  public static void init(Glide glide) {
+  public static synchronized void init(Glide glide) {
     Glide.glide = glide;
   }
 
   @VisibleForTesting
-  public static void tearDown() {
+  public static synchronized void tearDown() {
     glide = null;
   }
 
   @SuppressWarnings("deprecation")
-  private static void initGlide(Context context) {
+  private static void initializeGlide(Context context) {
     Context applicationContext = context.getApplicationContext();
 
     GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
@@ -212,17 +226,19 @@ private static void initGlide(Context context) {
     if (annotationGeneratedModule != null) {
       annotationGeneratedModule.applyOptions(applicationContext, builder);
     }
-    glide = builder.build(applicationContext);
+    Glide glide = builder.build(applicationContext);
     for (GlideModule module : manifestModules) {
-      module.registerComponents(applicationContext, glide.registry);
+      module.registerComponents(applicationContext, glide, glide.registry);
     }
     if (annotationGeneratedModule != null) {
-      annotationGeneratedModule.registerComponents(applicationContext, glide.registry);
+      annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry);
     }
+    context.getApplicationContext().registerComponentCallbacks(glide);
+    Glide.glide = glide;
   }
 
   @Nullable
-  @SuppressWarnings({"unchecked", "deprecation"})
+  @SuppressWarnings({"unchecked", "deprecation", "TryWithIdenticalCatches"})
   private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
     GeneratedAppGlideModule result = null;
     try {
@@ -241,6 +257,7 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
       throw new IllegalStateException("GeneratedAppGlideModuleImpl is implemented incorrectly."
           + " If you've manually implemented this class, remove your implementation. The Annotation"
           + " processor will generate a correct implementation.", e);
+      // These exceptions can't be squashed across all versions of Android.
     } catch (IllegalAccessException e) {
       throw new IllegalStateException("GeneratedAppGlideModuleImpl is implemented incorrectly."
           + " If you've manually implemented this class, remove your implementation. The Annotation"
@@ -259,7 +276,8 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
       RequestManagerRetriever requestManagerRetriever,
       ConnectivityMonitorFactory connectivityMonitorFactory,
       int logLevel,
-      RequestOptions defaultRequestOptions) {
+      RequestOptions defaultRequestOptions,
+      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {
     this.engine = engine;
     this.bitmapPool = bitmapPool;
     this.arrayPool = arrayPool;
@@ -356,8 +374,10 @@ private static GeneratedAppGlideModule getAnnotationGeneratedGlideModules() {
         .register(GifDrawable.class, byte[].class, new GifDrawableBytesTranscoder());
 
     ImageViewTargetFactory imageViewTargetFactory = new ImageViewTargetFactory();
-    glideContext = new GlideContext(context, registry, imageViewTargetFactory,
-        defaultRequestOptions, engine, this, logLevel);
+    glideContext =
+        new GlideContext(
+            context, registry, imageViewTargetFactory, defaultRequestOptions,
+            defaultTransitionOptions, engine, logLevel);
   }
 
   /**
@@ -467,6 +487,7 @@ public void trimMemory(int level) {
    *     This method should always be called on a background thread, since it is a blocking call.
    * </p>
    */
+  @SuppressWarnings("unused") // Public API
   public void clearDiskCache() {
     Util.assertBackgroundThread();
     engine.clearDiskCache();
@@ -507,6 +528,7 @@ private static RequestManagerRetriever getRetriever(@Nullable Context context) {
     // Context could be null for other reasons (ie the user passes in null), but in practice it will
     // only occur due to errors with the Fragment lifecycle.
     Preconditions.checkNotNull(
+        context,
         "You cannot start a load on a not yet attached View or a  Fragment where getActivity() "
             + "returns null (which usually occurs when getActivity() is called before the Fragment "
             + "is attached or after the Fragment is destroyed).");
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 784aa08b9..e77742fcb 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -1,12 +1,15 @@
 package com.bumptech.glide;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v4.util.ArrayMap;
 import android.util.Log;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
+import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;
 import com.bumptech.glide.load.engine.cache.DiskCache;
@@ -20,11 +23,13 @@
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory;
 import com.bumptech.glide.request.RequestOptions;
+import java.util.Map;
 
 /**
  * A builder class for setting default structural classes for Glide to use.
  */
 public final class GlideBuilder {
+  private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions = new ArrayMap<>();
   private Engine engine;
   private BitmapPool bitmapPool;
   private ArrayPool arrayPool;
@@ -157,6 +162,28 @@ public GlideBuilder setDefaultRequestOptions(RequestOptions requestOptions) {
     return this;
   }
 
+  /**
+   * Sets the default {@link TransitionOptions} to use when starting a request that will load a
+   * resource with the given {@link Class}.
+   *
+   * <p>It's preferable but not required for the requested resource class to match the resource
+   * class applied here as long as the resource class applied here is assignable from the requested
+   * resource class. For example you can set a default transition for
+   * {@link android.graphics.drawable.Drawable} and that default transition will be used if you
+   * subsequently start requests for specific {@link android.graphics.drawable.Drawable} types like
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} or
+   * {@link android.graphics.drawable.BitmapDrawable}. Specific types are always preferred so if you
+   * register a default transition for both {@link android.graphics.drawable.Drawable} and
+   * {@link android.graphics.drawable.BitmapDrawable} and then start a request for
+   * {@link android.graphics.drawable.BitmapDrawable}s, the transition you registered for
+   * {@link android.graphics.drawable.BitmapDrawable}s will be used.
+   */
+  public <T> GlideBuilder setDefaultTransitionOptions(
+      @NonNull Class<T> clazz, @Nullable TransitionOptions<?, T> options) {
+    defaultTransitionOptions.put(clazz, options);
+    return this;
+  }
+
   /**
    * Sets the {@link com.bumptech.glide.load.DecodeFormat} that will be the default format for all
    * the default decoders that can change the {@link android.graphics.Bitmap.Config} of the {@link
@@ -172,7 +199,7 @@ public GlideBuilder setDefaultRequestOptions(RequestOptions requestOptions) {
    */
   @Deprecated
   public GlideBuilder setDecodeFormat(DecodeFormat decodeFormat) {
-    defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
+    defaultRequestOptions = defaultRequestOptions.apply(new RequestOptions().format(decodeFormat));
     return this;
   }
 
@@ -282,7 +309,11 @@ public Glide build(Context context) {
 
     if (bitmapPool == null) {
       int size = memorySizeCalculator.getBitmapPoolSize();
-      bitmapPool = new LruBitmapPool(size);
+      if (size > 0) {
+        bitmapPool = new LruBitmapPool(size);
+      } else {
+        bitmapPool = new BitmapPoolAdapter();
+      }
     }
 
     if (arrayPool == null) {
@@ -314,6 +345,7 @@ public Glide build(Context context) {
         requestManagerRetriever,
         connectivityMonitorFactory,
         logLevel,
-        defaultRequestOptions.lock());
+        defaultRequestOptions.lock(),
+        defaultTransitionOptions);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/GlideContext.java b/library/src/main/java/com/bumptech/glide/GlideContext.java
index ebf5f06fd..1e0aa58ab 100644
--- a/library/src/main/java/com/bumptech/glide/GlideContext.java
+++ b/library/src/main/java/com/bumptech/glide/GlideContext.java
@@ -1,42 +1,48 @@
 package com.bumptech.glide;
 
 import android.annotation.TargetApi;
-import android.content.ComponentCallbacks2;
 import android.content.Context;
 import android.content.ContextWrapper;
-import android.content.res.Configuration;
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.VisibleForTesting;
 import android.widget.ImageView;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.Target;
+import java.util.Map;
+import java.util.Map.Entry;
 
 /**
  * Global context for all loads in Glide containing and exposing the various registries and classes
  * required to load resources.
  */
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-public class GlideContext extends ContextWrapper implements ComponentCallbacks2 {
+public class GlideContext extends ContextWrapper {
+  @VisibleForTesting
+  static final TransitionOptions<?, ?> DEFAULT_TRANSITION_OPTIONS =
+      new GenericTransitionOptions<Object>();
   private final Handler mainHandler;
   private final Registry registry;
   private final ImageViewTargetFactory imageViewTargetFactory;
   private final RequestOptions defaultRequestOptions;
+  private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions;
   private final Engine engine;
-  private final ComponentCallbacks2 componentCallbacks;
   private final int logLevel;
 
   public GlideContext(Context context, Registry registry,
       ImageViewTargetFactory imageViewTargetFactory, RequestOptions defaultRequestOptions,
-      Engine engine, ComponentCallbacks2 componentCallbacks, int logLevel) {
+      Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions, Engine engine,
+      int logLevel) {
     super(context.getApplicationContext());
     this.registry = registry;
     this.imageViewTargetFactory = imageViewTargetFactory;
     this.defaultRequestOptions = defaultRequestOptions;
+    this.defaultTransitionOptions = defaultTransitionOptions;
     this.engine = engine;
-    this.componentCallbacks = componentCallbacks;
     this.logLevel = logLevel;
 
     mainHandler = new Handler(Looper.getMainLooper());
@@ -46,6 +52,23 @@ public RequestOptions getDefaultRequestOptions() {
     return defaultRequestOptions;
   }
 
+  @SuppressWarnings("unchecked")
+  @NonNull
+  public <T> TransitionOptions<?, T> getDefaultTransitionOptions(Class<T> transcodeClass) {
+    TransitionOptions<?, ?> result = defaultTransitionOptions.get(transcodeClass);
+    if (result == null) {
+      for (Entry<Class<?>, TransitionOptions<?, ?>> value : defaultTransitionOptions.entrySet()) {
+        if (value.getKey().isAssignableFrom(transcodeClass)) {
+          result = value.getValue();
+        }
+      }
+    }
+    if (result == null) {
+      result = DEFAULT_TRANSITION_OPTIONS;
+    }
+    return (TransitionOptions<?, T>) result;
+  }
+
   public <X> Target<X> buildImageViewTarget(ImageView imageView, Class<X> transcodeClass) {
     return imageViewTargetFactory.buildTarget(imageView, transcodeClass);
   }
@@ -65,19 +88,4 @@ public Registry getRegistry() {
   public int getLogLevel() {
     return logLevel;
   }
-
-  @Override
-  public void onTrimMemory(int level) {
-    componentCallbacks.onTrimMemory(level);
-  }
-
-  @Override
-  public void onConfigurationChanged(Configuration newConfig) {
-    componentCallbacks.onConfigurationChanged(newConfig);
-  }
-
-  @Override
-  public void onLowMemory() {
-    componentCallbacks.onLowMemory();
-  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index 7468be5be..f5b7c0239 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -3,6 +3,7 @@
 import android.support.v4.util.Pools.Pool;
 import com.bumptech.glide.load.Encoder;
 import com.bumptech.glide.load.ImageHeaderParser;
+import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.load.data.DataRewinder;
@@ -22,12 +23,14 @@
 import com.bumptech.glide.provider.ResourceDecoderRegistry;
 import com.bumptech.glide.provider.ResourceEncoderRegistry;
 import com.bumptech.glide.util.pool.FactoryPools;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 /**
- * Manages component registration.
+ * Manages component registration to extend or replace Glide's default loading, decoding, and
+ * encoding logic.
  */
 public class Registry {
   private final ModelLoaderRegistry modelLoaderRegistry;
@@ -53,60 +56,233 @@ public Registry() {
     this.imageHeaderParserRegistry = new ImageHeaderParserRegistry();
   }
 
+  /**
+   * Registers the given {@link Encoder} for the given data class (InputStream, FileDescriptor etc).
+   *
+   * <p>The {@link Encoder} will be used both for the exact data class and any subtypes. For
+   * example, registering an {@link Encoder} for {@link java.io.InputStream} will result in the
+   * {@link Encoder} being used for
+   * {@link android.content.res.AssetFileDescriptor.AutoCloseInputStream},
+   * {@link java.io.FileInputStream} and any other subclass.
+   *
+   * <p>If multiple {@link Encoder}s are registered for the same type or super type, the
+   * {@link Encoder} that is registered first will be used.
+   *
+   * @deprecated Use the equivalent {@link #append(Class, Class, ModelLoaderFactory)} method
+   * instead.
+   */
+  @Deprecated
   public <Data> Registry register(Class<Data> dataClass, Encoder<Data> encoder) {
-    encoderRegistry.add(dataClass, encoder);
+    return append(dataClass, encoder);
+  }
+
+  /**
+   * Appends the given {@link Encoder} onto the list of available {@link Encoder}s so that it is
+   * attempted after all earlier and default {@link Encoder}s for the given data class.
+   *
+   * <p>The {@link Encoder} will be used both for the exact data class and any subtypes. For
+   * example, registering an {@link Encoder} for {@link java.io.InputStream} will result in the
+   * {@link Encoder} being used for
+   * {@link android.content.res.AssetFileDescriptor.AutoCloseInputStream},
+   * {@link java.io.FileInputStream} and any other subclass.
+   *
+   * <p>If multiple {@link Encoder}s are registered for the same type or super type, the
+   * {@link Encoder} that is registered first will be used.
+   *
+   * @see #prepend(Class, Encoder)
+   */
+  public <Data> Registry append(Class<Data> dataClass, Encoder<Data> encoder) {
+    encoderRegistry.append(dataClass, encoder);
     return this;
   }
 
-  public <Data, TResource> Registry append(Class<Data> dataClass, Class<TResource> resourceClass,
+  /**
+   * Prepends the given {@link Encoder} into the list of available {@link Encoder}s
+   * so that it is attempted before all later and default {@link Encoder}s for the given
+   * data class.
+   *
+   * <p>This method allows you to replace the default {@link Encoder} because it ensures
+   * the registered {@link Encoder} will run first. If multiple {@link Encoder}s are registered for
+   * the same type or super type, the {@link Encoder} that is registered first will be used.
+   *
+   * @see #append(Class, Encoder)
+   */
+  public <Data> Registry prepend(Class<Data> dataClass, Encoder<Data> encoder) {
+    encoderRegistry.prepend(dataClass, encoder);
+    return this;
+  }
+
+  /**
+   * Appends the given {@link ResourceDecoder} onto the list of available {@link ResourceDecoder}s
+   * allowing it to be used if all earlier and default {@link ResourceDecoder}s for the given types
+   * fail (or if none are present).
+   *
+   * <p>If you're attempting to replace an existing {@link ResourceDecoder} or would like to ensure
+   * that your {@link ResourceDecoder} gets the chance to run before an existing
+   * {@link ResourceDecoder}, use {@link #prepend(Class, Class, ResourceDecoder)}. This method is
+   * best for new types of resources and data or as a way to add an additional fallback decoder
+   * for an existing type of data.
+   *
+   * @see #prepend(Class, Class, ResourceDecoder)
+   *
+   * @param dataClass The data that will be decoded from
+   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc).
+   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
+   * @param decoder The {@link ResourceDecoder} to register.
+   */
+  public <Data, TResource> Registry append(
+      Class<Data> dataClass,
+      Class<TResource> resourceClass,
       ResourceDecoder<Data, TResource> decoder) {
     decoderRegistry.append(decoder, dataClass, resourceClass);
     return this;
   }
 
-  public <Data, TResource> Registry prepend(Class<Data> dataClass, Class<TResource> resourceClass,
+  /**
+   * Prepends the given {@link ResourceDecoder} into the list of available {@link ResourceDecoder}s
+   * so that it is attempted before all later and default {@link ResourceDecoder}s for the given
+   * types.
+   *
+   * <p>This method allows you to replace the default {@link ResourceDecoder} because it ensures
+   * the registered {@link ResourceDecoder} will run first. You can use the
+   * {@link ResourceDecoder#handles(Object, Options)} to fall back to the default
+   * {@link ResourceDecoder}s if you only want to change the default functionality for certain
+   * types of data.
+   *
+   * @see #append(Class, Class, ResourceDecoder)
+   *
+   * @param dataClass The data that will be decoded from
+   * ({@link java.io.InputStream}, {@link java.io.FileDescriptor} etc).
+   * @param resourceClass The resource that will be decoded to ({@link android.graphics.Bitmap},
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} etc).
+   * @param decoder The {@link ResourceDecoder} to register.
+   */
+  public <Data, TResource> Registry prepend(
+      Class<Data> dataClass,
+      Class<TResource> resourceClass,
       ResourceDecoder<Data, TResource> decoder) {
     decoderRegistry.prepend(decoder, dataClass, resourceClass);
     return this;
   }
 
-  public <TResource> Registry register(Class<TResource> resourceClass,
-      ResourceEncoder<TResource> encoder) {
-    resourceEncoderRegistry.add(resourceClass, encoder);
+  /**
+   * Appends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s
+   * so that it is attempted after all earlier and default {@link ResourceEncoder}s for the given
+   * data type.
+   *
+   * <p>The {@link ResourceEncoder} will be used both for the exact resource class and any subtypes.
+   * For example, registering an {@link ResourceEncoder} for
+   * {@link android.graphics.drawable.Drawable} (not recommended) will result in the
+   * {@link ResourceEncoder} being used for {@link android.graphics.drawable.BitmapDrawable} and
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} and any other subclass.
+   *
+   * <p>If multiple {@link ResourceEncoder}s are registered for the same type or super type, the
+   * {@link ResourceEncoder} that is registered first will be used.
+   *
+   * @deprecated Use the equivalent {@link #append(Class, ResourceEncoder)} method instead.
+   */
+  @Deprecated
+  public <TResource> Registry register(
+      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {
+    return append(resourceClass, encoder);
+  }
+
+  /**
+   * Appends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s
+   * so that it is attempted after all earlier and default {@link ResourceEncoder}s for the given
+   * data type.
+   *
+   * <p>The {@link ResourceEncoder} will be used both for the exact resource class and any subtypes.
+   * For example, registering an {@link ResourceEncoder} for
+   * {@link android.graphics.drawable.Drawable} (not recommended) will result in the
+   * {@link ResourceEncoder} being used for {@link android.graphics.drawable.BitmapDrawable} and
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable} and any other subclass.
+   *
+   * <p>If multiple {@link ResourceEncoder}s are registered for the same type or super type, the
+   * {@link ResourceEncoder} that is registered first will be used.
+   *
+   * @see #prepend(Class, ResourceEncoder)
+   */
+  public <TResource> Registry append(
+      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {
+    resourceEncoderRegistry.append(resourceClass, encoder);
     return this;
   }
 
+  /**
+   * Prepends the given {@link ResourceEncoder} into the list of available {@link ResourceEncoder}s
+   * so that it is attempted before all later and default {@link ResourceEncoder}s for the given
+   * data type.
+   *
+   * <p>This method allows you to replace the default {@link ResourceEncoder} because it ensures
+   * the registered {@link ResourceEncoder} will run first. If multiple {@link ResourceEncoder}s are
+   * registered for the same type or super type, the {@link ResourceEncoder} that is registered
+   * first will be used.
+   *
+   * @see #append(Class, ResourceEncoder)
+   */
+  public <TResource> Registry prepend(
+      Class<TResource> resourceClass, ResourceEncoder<TResource> encoder) {
+    resourceEncoderRegistry.prepend(resourceClass, encoder);
+    return this;
+  }
+
+  /**
+   * Registers a new {@link com.bumptech.glide.load.data.DataRewinder.Factory} to handle a
+   * non-default data type that can be rewind to allow for efficient reads of file headers.
+   */
   public Registry register(DataRewinder.Factory factory) {
     dataRewinderRegistry.register(factory);
     return this;
   }
 
+  /**
+   * Registers the given {@link ResourceTranscoder} to convert from the given resource {@link Class}
+   * to the given transcode {@link Class}.
+   *
+   * @param resourceClass The class that will be transcoded from (e.g.
+   * {@link android.graphics.Bitmap}).
+   * @param transcodeClass The class that will be transcoded to (e.g.
+   * {@link android.graphics.drawable.BitmapDrawable}).
+   * @param transcoder The {@link ResourceTranscoder} to register.
+   */
   public <TResource, Transcode> Registry register(Class<TResource> resourceClass,
       Class<Transcode> transcodeClass, ResourceTranscoder<TResource, Transcode> transcoder) {
     transcoderRegistry.register(resourceClass, transcodeClass, transcoder);
     return this;
   }
 
+  /**
+   * Registers a new {@link ImageHeaderParser} that can obtain some basic metadata from an image
+   * header (orientation, type etc).
+   */
   public Registry register(ImageHeaderParser parser) {
     imageHeaderParserRegistry.add(parser);
     return this;
   }
 
   /**
-   * Use the given factory to build a {@link com.bumptech.glide.load.model.ModelLoader} for models
-   * of the given class. Generally the best use of this method is to replace one of the default
-   * factories or add an implementation for other similar low level models. Any factory replaced by
-   * the given factory will have its {@link ModelLoaderFactory#teardown()}} method called.
+   * Appends a new {@link ModelLoaderFactory} onto the end of the existing set so that the
+   * constructed {@link ModelLoader} will be tried after all default and previously registered
+   * {@link ModelLoader}s for the given model and data classes.
+   *
+   * <p>If you're attempting to replace an existing {@link ModelLoader}, use
+   * {@link #prepend(Class, Class, ModelLoaderFactory)}. This method is best for new types of models
+   * and/or data or as a way to add an additional fallback loader for an existing type of
+   * model/data.
    *
-   * <p> Note - If a factory already exists for the given class, it will be replaced. If that
-   * factory is not being used for any other model class, {@link ModelLoaderFactory#teardown()} will
-   * be called. </p>
+   * <p>If multiple {@link ModelLoaderFactory}s are registered for the same model and/or data
+   * classes, the {@link ModelLoader}s they produce will be attempted in the order the
+   * {@link ModelLoaderFactory}s were registered. Only if all {@link ModelLoader}s fail will the
+   * entire request fail.
    *
-   * <p> Note - The factory must not be an anonymous inner class of an Activity or another object
-   * that cannot be retained statically. </p>
+   * @see #prepend(Class, Class, ModelLoaderFactory)
+   * @see #replace(Class, Class, ModelLoaderFactory)
    *
-   * @param modelClass The model class.
-   * @param dataClass  the data class.
+   * @param modelClass The model class (e.g. URL, file path).
+   * @param dataClass  the data class (e.g. {@link java.io.InputStream},
+   * {@link java.io.FileDescriptor}).
    */
   public <Model, Data> Registry append(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
@@ -114,12 +290,58 @@ public Registry register(ImageHeaderParser parser) {
     return this;
   }
 
+  /**
+   * Prepends a new {@link ModelLoaderFactory} onto the beginning of the existing set so that the
+   * constructed {@link ModelLoader} will be tried before all default and previously registered
+   * {@link ModelLoader}s for the given model and data classes.
+   *
+   * <p>If you're attempting to add additional functionality or add a backup that should run only
+   * after the default {@link ModelLoader}s run, use
+   * {@link #append(Class, Class, ModelLoaderFactory)}. This method is best for adding an additional
+   * case to Glide's existing functionality that should run first. This method will still run
+   * Glide's default {@link ModelLoader}s if the prepended {@link ModelLoader}s fail.
+   *
+   * <p>If multiple {@link ModelLoaderFactory}s are registered for the same model and/or data
+   * classes, the {@link ModelLoader}s they produce will be attempted in the order the
+   * {@link ModelLoaderFactory}s were registered. Only if all {@link ModelLoader}s fail will the
+   * entire request fail.
+   *
+   * @see #append(Class, Class, ModelLoaderFactory)
+   * @see #replace(Class, Class, ModelLoaderFactory)
+   *
+   * @param modelClass The model class (e.g. URL, file path).
+   * @param dataClass  the data class (e.g. {@link java.io.InputStream},
+   * {@link java.io.FileDescriptor}).
+   */
   public <Model, Data> Registry prepend(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
     modelLoaderRegistry.prepend(modelClass, dataClass, factory);
     return this;
   }
 
+  /**
+   * Removes all default and previously registered {@link ModelLoaderFactory}s for the given data
+   * and model class and replaces all of them with the single {@link ModelLoader} provided.
+   *
+   * <p>If you're attempting to add additional functionality or add a backup that should run only
+   * after the default {@link ModelLoader}s run, use
+   * {@link #append(Class, Class, ModelLoaderFactory)}. This method should be used only when you
+   * want to ensure that Glide's default {@link ModelLoader}s do not run.
+   *
+   * <p>One good use case for this method is when you want to replace Glide's default networking
+   * library with your OkHttp, Volley, or your own implementation. Using
+   * {@link #prepend(Class, Class, ModelLoaderFactory)} or
+   * {@link #append(Class, Class, ModelLoaderFactory)} may still allow Glide's default networking
+   * library to run in some cases. Using this method will ensure that only your networking library
+   * will run and that the request will fail otherwise.
+   *
+   * @see #prepend(Class, Class, ModelLoaderFactory)
+   * @see #append(Class, Class, ModelLoaderFactory)
+   *
+   * @param modelClass The model class (e.g. URL, file path).
+   * @param dataClass  the data class (e.g. {@link java.io.InputStream},
+   * {@link java.io.FileDescriptor}).
+   */
   public <Model, Data> Registry replace(Class<Model> modelClass, Class<Data> dataClass,
       ModelLoaderFactory<Model, Data> factory) {
     modelLoaderRegistry.replace(modelClass, dataClass, factory);
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 81fea6e36..192db6e43 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -32,8 +32,6 @@
  * {@link com.bumptech.glide.request.target.Target}.
  */
 public class RequestBuilder<TranscodeType> implements Cloneable {
-  private static final TransitionOptions<?, ?> DEFAULT_ANIMATION_OPTIONS =
-      new GenericTransitionOptions<Object>();
   // Used in generated subclasses
   protected static final RequestOptions DOWNLOAD_ONLY_OPTIONS =
       new RequestOptions().diskCacheStrategy(DiskCacheStrategy.DATA).priority(Priority.LOW)
@@ -46,9 +44,10 @@
   private final Glide glide;
 
   @NonNull protected RequestOptions requestOptions;
+
+  @NonNull
   @SuppressWarnings("unchecked")
-  private TransitionOptions<?, ? super TranscodeType> transitionOptions =
-      (TransitionOptions<?, ? super TranscodeType>) DEFAULT_ANIMATION_OPTIONS;
+  private TransitionOptions<?, ? super TranscodeType> transitionOptions;
 
   @Nullable private Object model;
   // model may occasionally be null, so to enforce that load() was called, put a boolean rather
@@ -56,6 +55,7 @@
   @Nullable private RequestListener<TranscodeType> requestListener;
   @Nullable private RequestBuilder<TranscodeType> thumbnailBuilder;
   @Nullable private Float thumbSizeMultiplier;
+  private boolean isDefaultTransitionOptionsSet = true;
   private boolean isModelSet;
   private boolean isThumbnailBuilt;
 
@@ -66,6 +66,7 @@ protected RequestBuilder(Glide glide, RequestManager requestManager,
     this.context = glide.getGlideContext();
     this.transcodeClass = transcodeClass;
     this.defaultRequestOptions = requestManager.getDefaultRequestOptions();
+    this.transitionOptions = requestManager.getDefaultTransitionOptions(transcodeClass);
     this.requestOptions = defaultRequestOptions;
   }
 
@@ -106,6 +107,7 @@ protected RequestOptions getMutableOptions() {
   public RequestBuilder<TranscodeType> transition(
       @NonNull TransitionOptions<?, ? super TranscodeType> transitionOptions) {
     this.transitionOptions = Preconditions.checkNotNull(transitionOptions);
+    isDefaultTransitionOptionsSet = false;
     return this;
   }
 
@@ -353,14 +355,27 @@ protected RequestOptions getMutableOptions() {
       throw new IllegalArgumentException("You must call #load() before calling #into()");
     }
 
-    Request previous = target.getRequest();
+    requestOptions.lock();
+    Request request = buildRequest(target);
 
-    if (previous != null) {
-      requestManager.clear(target);
+    Request previous = target.getRequest();
+    // When request was failed or cancelled, be sure to use the updated model as it can contains
+    // unexposed data that could help the request to succeed on restart.
+    // See https://github.com/bumptech/glide/issues/2270
+    if (request.isEquivalentTo(previous)
+      && (Preconditions.checkNotNull(previous).isComplete()
+         || Preconditions.checkNotNull(previous).isRunning())) {
+      request.recycle();
+      // If the request is completed, beginning again will ensure the result is re-delivered,
+      // triggering RequestListeners and Targets. If the request is already
+      // running, we can let it continue running without interruption.
+      if (!Preconditions.checkNotNull(previous).isRunning()) {
+        previous.begin();
+      }
+      return target;
     }
 
-    requestOptions.lock();
-    Request request = buildRequest(target);
+    requestManager.clear(target);
     target.setRequest(request);
     requestManager.track(target, request);
 
@@ -585,7 +600,10 @@ private Request buildRequestRecursive(Target<TranscodeType> target,
 
       TransitionOptions<?, ? super TranscodeType> thumbTransitionOptions =
           thumbnailBuilder.transitionOptions;
-      if (DEFAULT_ANIMATION_OPTIONS.equals(thumbTransitionOptions)) {
+
+      // Apply our transition by default to thumbnail requests but avoid overriding custom options
+      // that may have been applied on the thumbnail request explicitly.
+      if (thumbnailBuilder.isDefaultTransitionOptionsSet) {
         thumbTransitionOptions = transitionOptions;
       }
 
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 3a1ecec2a..8275cee2c 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -13,7 +13,6 @@
 import android.support.annotation.Nullable;
 import android.view.View;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.manager.ConnectivityMonitor;
 import com.bumptech.glide.manager.ConnectivityMonitorFactory;
@@ -106,11 +105,11 @@ public RequestManager(Glide glide, Lifecycle lifecycle, RequestManagerTreeNode t
   }
 
   protected void setRequestOptions(@NonNull RequestOptions toSet) {
-    this.requestOptions = toSet.clone().autoClone();
+    requestOptions = toSet.clone().autoClone();
   }
 
   private void updateRequestOptions(RequestOptions toUpdate) {
-    this.requestOptions.apply(toUpdate);
+    requestOptions = requestOptions.apply(toUpdate);
   }
 
   /**
@@ -160,16 +159,24 @@ public RequestManager setDefaultRequestOptions(RequestOptions requestOptions) {
 
   /**
    * @see android.content.ComponentCallbacks2#onTrimMemory(int)
+   *
+   * @deprecated This method is called automatically by Glide's internals and shouldn't be called
+   * externally.
    */
+  @Deprecated
   public void onTrimMemory(int level) {
-    glide.getGlideContext().onTrimMemory(level);
+    glide.onTrimMemory(level);
   }
 
   /**
    * @see android.content.ComponentCallbacks2#onLowMemory()
+   *
+   * @deprecated This method is called automatically by Glide's internals and shouldn't be called
+   * externally.
    */
+  @Deprecated
   public void onLowMemory() {
-    glide.getGlideContext().onLowMemory();
+    glide.onLowMemory();
   }
 
   /**
@@ -286,8 +293,7 @@ public void onDestroy() {
    * @return A new request builder for loading a {@link android.graphics.Bitmap}
    */
   public RequestBuilder<Bitmap> asBitmap() {
-    return as(Bitmap.class).transition(new GenericTransitionOptions<Bitmap>())
-            .apply(DECODE_TYPE_BITMAP);
+    return as(Bitmap.class).apply(DECODE_TYPE_BITMAP);
   }
 
   /**
@@ -304,7 +310,7 @@ public void onDestroy() {
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable}.
    */
   public RequestBuilder<GifDrawable> asGif() {
-    return as(GifDrawable.class).transition(new DrawableTransitionOptions()).apply(DECODE_TYPE_GIF);
+    return as(GifDrawable.class).apply(DECODE_TYPE_GIF);
   }
 
   /**
@@ -318,7 +324,7 @@ public void onDestroy() {
    * @return A new request builder for loading a {@link Drawable}.
    */
   public RequestBuilder<Drawable> asDrawable() {
-    return as(Drawable.class).transition(new DrawableTransitionOptions());
+    return as(Drawable.class);
   }
 
   /**
@@ -452,6 +458,11 @@ RequestOptions getDefaultRequestOptions() {
     return requestOptions;
   }
 
+  @NonNull
+  <T> TransitionOptions<?, T> getDefaultTransitionOptions(Class<T> transcodeClass) {
+    return glide.getGlideContext().getDefaultTransitionOptions(transcodeClass);
+  }
+
   @Override
   public String toString() {
     return super.toString() + "{tracker=" + requestTracker + ", treeNode=" + treeNode + "}";
diff --git a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
index 118d407dd..4837ec515 100644
--- a/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
+++ b/library/src/main/java/com/bumptech/glide/load/DecodeFormat.java
@@ -15,24 +15,41 @@
    * should return {@link android.graphics.Bitmap.Config#ARGB_8888} for
    * {@link android.graphics.Bitmap#getConfig()} when possible.
    *
+   * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use
+   * {@link android.graphics.Bitmap.Config#HARDWARE}.
+   *
    * <p> GIF images decoded by {@link android.graphics.BitmapFactory} currently use an internal
    * hidden format that is returned as null from {@link android.graphics.Bitmap#getConfig()}. Since
    * we cannot force {@link android.graphics.BitmapFactory} to always return our desired config,
-   * this setting is a preference, not a promise.</p>
+   * this setting is a preference, not a promise.
    */
   PREFER_ARGB_8888,
 
+  /**
+   * Identical to {@link #PREFER_ARGB_8888} but prevents Glide from using {@link
+   * android.graphics.Bitmap.Config#HARDWARE} on Android O+.
+   *
+   * @deprecated If you must disable hardware bitmaps, set
+   * {@link com.bumptech.glide.load.resource.bitmap.Downsampler#ALLOW_HARDWARE_CONFIG} to false
+   * instead.
+   */
+  @Deprecated
+  PREFER_ARGB_8888_DISALLOW_HARDWARE,
+
   /**
    * Bitmaps decoded from image formats that support and/or use alpha (some types of PNGs, GIFs etc)
    * should return {@link android.graphics.Bitmap.Config#ARGB_8888} for
    * {@link android.graphics.Bitmap#getConfig()}. Bitmaps decoded from formats that don't support or
    * use alpha should return {@link android.graphics.Bitmap.Config#RGB_565} for
    * {@link android.graphics.Bitmap#getConfig()}.
+   *
+   * <p>On Android O+, this format will will use ARGB_8888 only when it's not possible to use
+   * {@link android.graphics.Bitmap.Config#HARDWARE}.
    */
   PREFER_RGB_565;
 
   /**
    * The default value for DecodeFormat.
    */
-  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888;
+  public static final DecodeFormat DEFAULT = PREFER_ARGB_8888_DISALLOW_HARDWARE;
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/Transformation.java b/library/src/main/java/com/bumptech/glide/load/Transformation.java
index 659dad412..3d5c96e0f 100644
--- a/library/src/main/java/com/bumptech/glide/load/Transformation.java
+++ b/library/src/main/java/com/bumptech/glide/load/Transformation.java
@@ -13,6 +13,8 @@
  * obfuscation) is an easy way to implement
  * {@link #updateDiskCacheKey(java.security.MessageDigest)}} correctly.
  *
+ * <p>Implementations <em>must</em> implement {@link #equals(Object)} and {@link #hashCode()}.
+ *
  * @param <T> The type of the resource being transformed.
  */
 public interface Transformation<T> extends Key {
@@ -52,4 +54,18 @@
    * @return The transformed resource.
    */
   Resource<T> transform(Context context, Resource<T> resource, int outWidth, int outHeight);
+
+  /**
+   * For caching to work correctly, implementations <em>must</em> implement this method and
+   * {@link #hashCode()}.
+   */
+  @Override
+  boolean equals(Object o);
+
+  /**
+   * For caching to work correctly, implementations <em>must</em> implement this method and
+   * {@link #equals(Object)}.
+   */
+  @Override
+  int hashCode();
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
index 7a379c792..366a9ad3d 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/AssetPathFetcher.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.data;
 
 import android.content.res.AssetManager;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -54,6 +55,7 @@ public void cancel() {
     // Do nothing.
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
index 29f9e4cc9..9889eaf06 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/DataFetcher.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -21,12 +22,13 @@
 public interface DataFetcher<T> {
 
   /**
-   * Callback that should be called when data has been loaded and is available, or when the load
+   * Callback that must be called when data has been loaded and is available, or when the load
    * fails.
    *
    * @param <T> The type of data that will be loaded.
    */
   interface DataCallback<T> {
+
     /**
      * Called with the loaded data if the load succeeded, or with {@code null} if the load failed.
      */
@@ -41,18 +43,24 @@
   }
 
   /**
-   * Synchronously fetch data from which a resource can be decoded.
+   * Fetch data from which a resource can be decoded.
+   *
+   * <p> This will always be called on background thread so it is safe to perform long running tasks
+   * here. Any third party libraries called must be thread safe (or move the work to another thread)
+   * since this method will be called from a thread in a
+   * {@link java.util.concurrent.ExecutorService}
+   * that may have more than one background thread. </p>
+   *
+   * You <b>MUST</b> use the {@link DataCallback} once the request is complete.
    *
-   * <p> This will always be called on
-   * background thread so it is safe to perform long running tasks here. Any third party libraries
-   * called must be thread safe since this method will be called from a thread in a {@link
-   * java.util.concurrent.ExecutorService} that may have more than one background thread. </p>
+   * You are free to move the fetch work to another thread and call the callback from there.
    *
    * <p> This method will only be called when the corresponding resource is not in the cache. </p>
    *
    * <p> Note - this method will be run on a background thread so blocking I/O is safe. </p>
    *
    * @param priority The priority with which the request should be completed.
+   * @param callback The callback to use when the request is complete
    * @see #cleanup() where the data retuned will be cleaned up
    */
   void loadData(Priority priority, DataCallback<? super T> callback);
@@ -84,10 +92,12 @@
   /**
    * Returns the class of the data this fetcher will attempt to obtain.
    */
+  @NonNull
   Class<T> getDataClass();
 
   /**
    * Returns the {@link com.bumptech.glide.load.DataSource} this fetcher will return data from.
    */
+  @NonNull
   DataSource getDataSource();
 }
diff --git a/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java
index 893efb440..176f206d9 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorAssetPathFetcher.java
@@ -2,6 +2,7 @@
 
 import android.content.res.AssetManager;
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.NonNull;
 import java.io.IOException;
 
 /**
@@ -23,6 +24,7 @@ protected void close(ParcelFileDescriptor data) throws IOException {
     data.close();
   }
 
+  @NonNull
   @Override
   public Class<ParcelFileDescriptor> getDataClass() {
     return ParcelFileDescriptor.class;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java
index 7d3492701..2a159b92b 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/FileDescriptorLocalUriFetcher.java
@@ -4,6 +4,7 @@
 import android.content.res.AssetFileDescriptor;
 import android.net.Uri;
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.NonNull;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 
@@ -30,6 +31,7 @@ protected void close(ParcelFileDescriptor data) throws IOException {
     data.close();
   }
 
+  @NonNull
   @Override
   public Class<ParcelFileDescriptor> getDataClass() {
     return ParcelFileDescriptor.class;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
index e441bef2a..6989129cc 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/HttpUrlFetcher.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.data;
 
+import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import android.util.Log;
 import com.bumptech.glide.Priority;
@@ -99,6 +100,8 @@ private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,
 
     // Connect explicitly to avoid errors in decoders if connection fails.
     urlConnection.connect();
+    // Set the stream so that it's closed in cleanup to avoid resource leaks. See #2352.
+    stream = urlConnection.getInputStream();
     if (isCancelled) {
       return null;
     }
@@ -111,6 +114,9 @@ private InputStream loadDataWithRedirects(URL url, int redirects, URL lastUrl,
         throw new HttpException("Received empty or null redirect url");
       }
       URL redirectUrl = new URL(url, redirectUrlString);
+      // Closing the stream specifically is required to avoid leaking ResponseBodys in addition
+      // to disconnecting the url connection below. See #2352.
+      cleanup();
       return loadDataWithRedirects(redirectUrl, redirects + 1, url, headers);
     } else if (statusCode == -1) {
       throw new HttpException(statusCode);
@@ -145,6 +151,7 @@ public void cleanup() {
     if (urlConnection != null) {
       urlConnection.disconnect();
     }
+    urlConnection = null;
   }
 
   @Override
@@ -154,11 +161,13 @@ public void cancel() {
     isCancelled = true;
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.REMOTE;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
index 0f6488260..81d12b054 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/LocalUriFetcher.java
@@ -2,6 +2,7 @@
 
 import android.content.ContentResolver;
 import android.net.Uri;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -64,6 +65,7 @@ public void cancel() {
     // Do nothing.
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java
index 00879955f..aaad13214 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/StreamAssetPathFetcher.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.data;
 
 import android.content.res.AssetManager;
+import android.support.annotation.NonNull;
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -22,6 +23,7 @@ protected void close(InputStream data) throws IOException {
     data.close();
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java
index fe0eed476..cb4cb966b 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/StreamLocalUriFetcher.java
@@ -6,6 +6,7 @@
 import android.net.Uri;
 import android.os.Build;
 import android.provider.ContactsContract;
+import android.support.annotation.NonNull;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -31,6 +32,11 @@
    * (e.g. content://com.android.contacts/5/display_photo)
    */
   private static final int ID_CONTACTS_PHOTO = 4;
+  /**
+   * Uri for optimized search of phones by number
+   * (e.g. content://com.android.contacts/phone_lookup/232323232
+   */
+  private static final int ID_LOOKUP_BY_PHONE = 5;
   /**
    * Match the incoming Uri for special cases which we can handle nicely.
    */
@@ -43,6 +49,7 @@
     URI_MATCHER.addURI(ContactsContract.AUTHORITY, "contacts/#/photo", ID_CONTACTS_THUMBNAIL);
     URI_MATCHER.addURI(ContactsContract.AUTHORITY, "contacts/#", ID_CONTACTS_CONTACT);
     URI_MATCHER.addURI(ContactsContract.AUTHORITY, "contacts/#/display_photo", ID_CONTACTS_PHOTO);
+    URI_MATCHER.addURI(ContactsContract.AUTHORITY, "phone_lookup/*", ID_LOOKUP_BY_PHONE);
   }
 
   public StreamLocalUriFetcher(ContentResolver resolver, Uri uri) {
@@ -66,6 +73,7 @@ private InputStream loadResourceFromUri(Uri uri, ContentResolver contentResolver
       case ID_CONTACTS_CONTACT:
         return openContactPhotoInputStream(contentResolver, uri);
       case ID_CONTACTS_LOOKUP:
+      case ID_LOOKUP_BY_PHONE:
         // If it was a Lookup uri then resolve it first, then continue loading the contact uri.
         uri = ContactsContract.Contacts.lookupContact(contentResolver, uri);
         if (uri == null) {
@@ -91,6 +99,7 @@ protected void close(InputStream data) throws IOException {
     data.close();
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
diff --git a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
index f7f7db337..64fcec28f 100644
--- a/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
+++ b/library/src/main/java/com/bumptech/glide/load/data/mediastore/ThumbFetcher.java
@@ -5,6 +5,7 @@
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.MediaStore;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.Priority;
@@ -96,11 +97,13 @@ public void cancel() {
     // Do nothing.
   }
 
+  @NonNull
   @Override
   public Class<InputStream> getDataClass() {
     return InputStream.class;
   }
 
+  @NonNull
   @Override
   public DataSource getDataSource() {
     return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
index bbd9504ed..5c6529ff0 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeHelper.java
@@ -37,6 +37,7 @@
   private Priority priority;
   private DiskCacheStrategy diskCacheStrategy;
   private boolean isTransformationRequired;
+  private boolean isScaleOnlyOrNoTransform;
 
   @SuppressWarnings("unchecked")
   <R> DecodeHelper<R> init(
@@ -52,6 +53,7 @@
       Options options,
       Map<Class<?>, Transformation<?>> transformations,
       boolean isTransformationRequired,
+      boolean isScaleOnlyOrNoTransform,
       DecodeJob.DiskCacheProvider diskCacheProvider) {
     this.glideContext = glideContext;
     this.model = model;
@@ -66,6 +68,7 @@
     this.options = options;
     this.transformations = transformations;
     this.isTransformationRequired = isTransformationRequired;
+    this.isScaleOnlyOrNoTransform = isScaleOnlyOrNoTransform;
 
     return (DecodeHelper<R>) this;
   }
@@ -132,6 +135,10 @@ boolean hasLoadPath(Class<?> dataClass) {
     return glideContext.getRegistry().getLoadPath(dataClass, resourceClass, transcodeClass);
   }
 
+  boolean isScaleOnlyOrNoTransform() {
+    return isScaleOnlyOrNoTransform;
+  }
+
   @SuppressWarnings("unchecked")
   <Z> Transformation<Z> getTransformation(Class<Z> resourceClass) {
     Transformation<Z> result = (Transformation<Z>) transformations.get(resourceClass);
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
index 8b2abacef..d1eb3619b 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.engine;
 
+import android.os.Build;
+import android.support.v4.os.TraceCompat;
 import android.support.v4.util.Pools;
 import android.util.Log;
 import com.bumptech.glide.GlideContext;
@@ -14,7 +16,9 @@
 import com.bumptech.glide.load.data.DataFetcher;
 import com.bumptech.glide.load.data.DataRewinder;
 import com.bumptech.glide.load.engine.cache.DiskCache;
+import com.bumptech.glide.load.resource.bitmap.Downsampler;
 import com.bumptech.glide.util.LogTime;
+import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Synthetic;
 import com.bumptech.glide.util.pool.FactoryPools.Poolable;
 import com.bumptech.glide.util.pool.StateVerifier;
@@ -89,6 +93,7 @@
       DiskCacheStrategy diskCacheStrategy,
       Map<Class<?>, Transformation<?>> transformations,
       boolean isTransformationRequired,
+      boolean isScaleOnlyOrNoTransform,
       boolean onlyRetrieveFromCache,
       Options options,
       Callback<R> callback,
@@ -106,6 +111,7 @@
         options,
         transformations,
         isTransformationRequired,
+        isScaleOnlyOrNoTransform,
         diskCacheProvider);
     this.glideContext = glideContext;
     this.signature = signature;
@@ -212,6 +218,10 @@ public void run() {
     // This should be much more fine grained, but since Java's thread pool implementation silently
     // swallows all otherwise fatal exceptions, this will at least make it obvious to developers
     // that something is failing.
+    TraceCompat.beginSection("DecodeJob#run");
+    // Methods in the try statement can invalidate currentFetcher, so set a local variable here to
+    // ensure that the fetcher is cleaned up either way.
+    DataFetcher<?> localFetcher = currentFetcher;
     try {
       if (isCancelled) {
         notifyFailed();
@@ -231,6 +241,14 @@ public void run() {
       if (!isCancelled) {
         throw e;
       }
+    } finally {
+      Preconditions.checkArgument(
+          localFetcher == null || currentFetcher == null || localFetcher.equals(currentFetcher),
+          "Fetchers don't match!, old: " + localFetcher + " new: " + currentFetcher);
+      if (localFetcher != null) {
+        localFetcher.cleanup();
+      }
+      TraceCompat.endSection();
     }
   }
 
@@ -347,7 +365,12 @@ public void onDataFetcherReady(Key sourceKey, Object data, DataFetcher<?> fetche
       runReason = RunReason.DECODE_DATA;
       callback.reschedule(this);
     } else {
-      decodeFromRetrievedData();
+      TraceCompat.beginSection("DecodeJob.decodeFromRetrievedData");
+      try {
+        decodeFromRetrievedData();
+      } finally {
+        TraceCompat.endSection();
+      }
     }
   }
 
@@ -438,12 +461,33 @@ private void notifyEncodeAndRelease(Resource<R> resource, DataSource dataSource)
     return runLoadPath(data, dataSource, path);
   }
 
+  private Options getOptionsWithHardwareConfig(DataSource dataSource) {
+    Options options = this.options;
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+      return options;
+    }
+
+    if (options.get(Downsampler.ALLOW_HARDWARE_CONFIG) != null) {
+      return options;
+    }
+
+    if (dataSource == DataSource.RESOURCE_DISK_CACHE
+        || decodeHelper.isScaleOnlyOrNoTransform()) {
+      options = new Options();
+      options.putAll(this.options);
+      options.set(Downsampler.ALLOW_HARDWARE_CONFIG, true);
+    }
+    return options;
+  }
+
   private <Data, ResourceType> Resource<R> runLoadPath(Data data, DataSource dataSource,
       LoadPath<Data, ResourceType, R> path) throws GlideException {
+    Options options = getOptionsWithHardwareConfig(dataSource);
     DataRewinder<Data> rewinder = glideContext.getRegistry().getRewinder(data);
     try {
-      return path.load(rewinder, options, width, height,
-          new DecodeCallback<ResourceType>(dataSource));
+      // ResourceType in DecodeCallback below is required for compilation to work with gradle.
+      return path.load(
+          rewinder, options, width, height, new DecodeCallback<ResourceType>(dataSource));
     } finally {
       rewinder.cleanup();
     }
@@ -585,11 +629,13 @@ private boolean isComplete(boolean isRemovedFromQueue) {
     }
 
     void encode(DiskCacheProvider diskCacheProvider, Options options) {
+      TraceCompat.beginSection("DecodeJob.encode");
       try {
         diskCacheProvider.getDiskCache().put(key,
             new DataCacheWriter<>(encoder, toEncode, options));
       } finally {
         toEncode.unlock();
+        TraceCompat.endSection();
       }
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index 1dc070d50..315d4cf11 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -151,6 +151,7 @@ public Engine(MemoryCache memoryCache,
       DiskCacheStrategy diskCacheStrategy,
       Map<Class<?>, Transformation<?>> transformations,
       boolean isTransformationRequired,
+      boolean isScaleOnlyOrNoTransform,
       Options options,
       boolean isMemoryCacheable,
       boolean useUnlimitedSourceExecutorPool,
@@ -204,6 +205,7 @@ public Engine(MemoryCache memoryCache,
         diskCacheStrategy,
         transformations,
         isTransformationRequired,
+        isScaleOnlyOrNoTransform,
         onlyRetrieveFromCache,
         options,
         engineJob);
@@ -420,6 +422,7 @@ public boolean queueIdle() {
         DiskCacheStrategy diskCacheStrategy,
         Map<Class<?>, Transformation<?>> transformations,
         boolean isTransformationRequired,
+        boolean isScaleOnlyOrNoTransform,
         boolean onlyRetrieveFromCache,
         Options options,
         DecodeJob.Callback<R> callback) {
@@ -437,6 +440,7 @@ public boolean queueIdle() {
           diskCacheStrategy,
           transformations,
           isTransformationRequired,
+          isScaleOnlyOrNoTransform,
           onlyRetrieveFromCache,
           options,
           callback,
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
index 6c193eafc..3517092ac 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/EngineJob.java
@@ -148,14 +148,9 @@ void cancel() {
 
     isCancelled = true;
     decodeJob.cancel();
-    boolean isPendingJobRemoved = diskCacheExecutor.remove(decodeJob)
-        || sourceExecutor.remove(decodeJob)
-        || sourceUnlimitedExecutor.remove(decodeJob);
+    // TODO: Consider trying to remove jobs that have never been run before from executor queues.
+    // Removing jobs that have run before can break things. See #1996.
     listener.onEngineJobCancelled(this, key);
-
-    if (isPendingJobRemoved) {
-      release(true /*isRemovedFromQueue*/);
-    }
   }
 
   // Exposed for testing.
@@ -239,11 +234,9 @@ public void onLoadFailed(GlideException e) {
 
   @Override
   public void reschedule(DecodeJob<?> job) {
-    if (isCancelled) {
-      MAIN_THREAD_HANDLER.obtainMessage(MSG_CANCELLED, this).sendToTarget();
-    } else {
-      getActiveSourceExecutor().execute(job);
-    }
+    // Even if the job is cancelled here, it still needs to be scheduled so that it can clean itself
+    // up.
+    getActiveSourceExecutor().execute(job);
   }
 
   @Synthetic
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
index 4dca3166a..f932aac27 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/GlideException.java
@@ -88,7 +88,6 @@ public Throwable fillInStackTrace() {
    * complete stack traces.
    */
   public void logRootCauses(String tag) {
-    Log.e(tag, getClass() + ": " + getMessage());
     List<Exception> causes = getRootCauses();
     for (int i = 0, size = causes.size(); i < size; i++) {
       Log.i(tag, "Root cause (" + (i + 1) + " of " + size + ")", causes.get(i));
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
index 2cf9c0f37..88150031d 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.java
@@ -142,8 +142,23 @@ public Bitmap getDirty(int width, int height, Bitmap.Config config) {
     return result;
   }
 
+  @TargetApi(Build.VERSION_CODES.O)
+  private static void assertNotHardwareConfig(Bitmap.Config config) {
+    // Avoid short circuiting on sdk int since it breaks on some versions of Android.
+    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+      return;
+    }
+
+    if (config == Bitmap.Config.HARDWARE) {
+      throw new IllegalArgumentException("Cannot create a mutable Bitmap with config: " + config
+          + ". Consider setting Downsampler#ALLOW_HARDWARE_CONFIG to false in your RequestOptions"
+          + " and/or in GlideBuilder.setDefaultRequestOptions");
+    }
+  }
+
   @Nullable
   private synchronized Bitmap getDirtyOrNull(int width, int height, Bitmap.Config config) {
+    assertNotHardwareConfig(config);
     // Config will be null for non public config types, which can lead to transformations naively
     // passing in null as the requested config here. See issue #194.
     final Bitmap result = strategy.get(width, height, config != null ? config : DEFAULT_CONFIG);
@@ -245,12 +260,19 @@ private static LruPoolStrategy getDefaultStrategy() {
     return strategy;
   }
 
+  @TargetApi(Build.VERSION_CODES.O)
   private static Set<Bitmap.Config> getDefaultAllowedConfigs() {
     Set<Bitmap.Config> configs = new HashSet<>();
     configs.addAll(Arrays.asList(Bitmap.Config.values()));
-    if (Build.VERSION.SDK_INT >= 19) {
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+      // GIFs, among other types, end up with a native Bitmap config that doesn't map to a java
+      // config and is treated as null in java code. On KitKat+ these Bitmaps can be reconfigured
+      // and are suitable for re-use.
       configs.add(null);
     }
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+      configs.remove(Bitmap.Config.HARDWARE);
+    }
     return Collections.unmodifiableSet(configs);
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
index 13318a8fc..d11f0f02a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker.java
@@ -1,6 +1,5 @@
 package com.bumptech.glide.load.engine.cache;
 
-import com.bumptech.glide.load.Key;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Synthetic;
 import java.util.ArrayDeque;
@@ -19,16 +18,16 @@
  *  0, the lock can safely be removed from the map. </p>
  */
 final class DiskCacheWriteLocker {
-  private final Map<Key, WriteLock> locks = new HashMap<>();
+  private final Map<String, WriteLock> locks = new HashMap<>();
   private final WriteLockPool writeLockPool = new WriteLockPool();
 
-  void acquire(Key key) {
+  void acquire(String safeKey) {
     WriteLock writeLock;
     synchronized (this) {
-      writeLock = locks.get(key);
+      writeLock = locks.get(safeKey);
       if (writeLock == null) {
         writeLock = writeLockPool.obtain();
-        locks.put(key, writeLock);
+        locks.put(safeKey, writeLock);
       }
       writeLock.interestedThreads++;
     }
@@ -36,24 +35,24 @@ void acquire(Key key) {
     writeLock.lock.lock();
   }
 
-  void release(Key key) {
+  void release(String safeKey) {
     WriteLock writeLock;
     synchronized (this) {
-      writeLock = Preconditions.checkNotNull(locks.get(key));
+      writeLock = Preconditions.checkNotNull(locks.get(safeKey));
       if (writeLock.interestedThreads < 1) {
         throw new IllegalStateException("Cannot release a lock that is not held"
-            + ", key: " + key
+            + ", safeKey: " + safeKey
             + ", interestedThreads: " + writeLock.interestedThreads);
       }
 
       writeLock.interestedThreads--;
       if (writeLock.interestedThreads == 0) {
-        WriteLock removed = locks.remove(key);
+        WriteLock removed = locks.remove(safeKey);
         if (!removed.equals(writeLock)) {
           throw new IllegalStateException("Removed the wrong lock"
               + ", expected to remove: " + writeLock
               + ", but actually removed: " + removed
-              + ", key: " + key);
+              + ", safeKey: " + safeKey);
         }
         writeLockPool.offer(removed);
       }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
index c0e6f5269..8cd104d02 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.java
@@ -88,9 +88,9 @@ public File get(Key key) {
   public void put(Key key, Writer writer) {
     // We want to make sure that puts block so that data is available when put completes. We may
     // actually not write any data if we find that data is written by the time we acquire the lock.
-    writeLocker.acquire(key);
+    String safeKey = safeKeyGenerator.getSafeKey(key);
+    writeLocker.acquire(safeKey);
     try {
-      String safeKey = safeKeyGenerator.getSafeKey(key);
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "Put: Obtained: " + safeKey + " for for Key: " + key);
       }
@@ -121,7 +121,7 @@ public void put(Key key, Writer writer) {
         }
       }
     } finally {
-      writeLocker.release(key);
+      writeLocker.release(safeKey);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
index 7e0bb505e..4489744e2 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/MemorySizeCalculator.java
@@ -28,30 +28,34 @@
     int getHeightPixels();
   }
 
-  MemorySizeCalculator(Context context, ActivityManager activityManager,
-      ScreenDimensions screenDimensions, float memoryCacheScreens, float bitmapPoolScreens,
-      int targetArrayPoolSize, float maxSizeMultiplier, float lowMemoryMaxSizeMultiplier) {
-    this.context = context;
+  // Package private to avoid PMD warning.
+  MemorySizeCalculator(MemorySizeCalculator.Builder builder) {
+    this.context = builder.context;
+
     arrayPoolSize =
-        isLowMemoryDevice(activityManager)
-            ? targetArrayPoolSize / LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR
-            : targetArrayPoolSize;
-    final int maxSize = getMaxSize(activityManager, maxSizeMultiplier, lowMemoryMaxSizeMultiplier);
+        isLowMemoryDevice(builder.activityManager)
+            ? builder.arrayPoolSizeBytes / LOW_MEMORY_BYTE_ARRAY_POOL_DIVISOR
+            : builder.arrayPoolSizeBytes;
+    int maxSize =
+        getMaxSize(
+            builder.activityManager, builder.maxSizeMultiplier, builder.lowMemoryMaxSizeMultiplier);
+
+    int widthPixels = builder.screenDimensions.getWidthPixels();
+    int heightPixels = builder.screenDimensions.getHeightPixels();
+    int screenSize = widthPixels * heightPixels * BYTES_PER_ARGB_8888_PIXEL;
 
-    final int screenSize = screenDimensions.getWidthPixels() * screenDimensions.getHeightPixels()
-        * BYTES_PER_ARGB_8888_PIXEL;
+    int targetBitmapPoolSize = Math.round(screenSize * builder.bitmapPoolScreens);
 
-    int targetPoolSize = Math.round(screenSize * bitmapPoolScreens);
-    int targetMemoryCacheSize = Math.round(screenSize * memoryCacheScreens);
+    int targetMemoryCacheSize = Math.round(screenSize * builder.memoryCacheScreens);
     int availableSize = maxSize - arrayPoolSize;
 
-    if (targetMemoryCacheSize + targetPoolSize <= availableSize) {
+    if (targetMemoryCacheSize + targetBitmapPoolSize <= availableSize) {
       memoryCacheSize = targetMemoryCacheSize;
-      bitmapPoolSize = targetPoolSize;
+      bitmapPoolSize = targetBitmapPoolSize;
     } else {
-      float part = availableSize / (bitmapPoolScreens + memoryCacheScreens);
-      memoryCacheSize = Math.round(part * memoryCacheScreens);
-      bitmapPoolSize = Math.round(part * bitmapPoolScreens);
+      float part = availableSize / (builder.bitmapPoolScreens + builder.memoryCacheScreens);
+      memoryCacheSize = Math.round(part * builder.memoryCacheScreens);
+      bitmapPoolSize = Math.round(part * builder.bitmapPoolScreens);
     }
 
     if (Log.isLoggable(TAG, Log.DEBUG)) {
@@ -65,13 +69,13 @@
               + ", byte array size: "
               + toMb(arrayPoolSize)
               + ", memory class limited? "
-              + (targetMemoryCacheSize + targetPoolSize > maxSize)
+              + (targetMemoryCacheSize + targetBitmapPoolSize > maxSize)
               + ", max size: "
               + toMb(maxSize)
               + ", memoryClass: "
-              + activityManager.getMemoryClass()
+              + builder.activityManager.getMemoryClass()
               + ", isLowMemoryDevice: "
-              + isLowMemoryDevice(activityManager));
+              + isLowMemoryDevice(builder.activityManager));
     }
   }
 
@@ -125,7 +129,15 @@ private static boolean isLowMemoryDevice(ActivityManager activityManager) {
   public static final class Builder {
     // Visible for testing.
     static final int MEMORY_CACHE_TARGET_SCREENS = 2;
-    static final int BITMAP_POOL_TARGET_SCREENS = 4;
+
+    /**
+     * On Android O+, we use {@link android.graphics.Bitmap.Config#HARDWARE} for all reasonably
+     * sized images unless we're creating thumbnails for the first time. As a result, the Bitmap
+     * pool is much less important on O than it was on previous versions.
+     */
+    static final int BITMAP_POOL_TARGET_SCREENS =
+        Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? 4 : 1;
+
     static final float MAX_SIZE_MULTIPLIER = 0.4f;
     static final float LOW_MEMORY_MAX_SIZE_MULTIPLIER = 0.33f;
     // 4MB.
@@ -149,6 +161,14 @@ public Builder(Context context) {
           (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
       screenDimensions =
           new DisplayMetricsScreenDimensions(context.getResources().getDisplayMetrics());
+
+      // On Android O+ Bitmaps are allocated natively, ART is much more efficient at managing
+      // garbage and we rely heavily on HARDWARE Bitmaps, making Bitmap re-use much less important.
+      // We prefer to preserve RAM on these devices and take the small performance hit of not
+      // re-using Bitmaps and textures when loading very small images or generating thumbnails.
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && isLowMemoryDevice(activityManager)) {
+        bitmapPoolScreens = 0;
+      }
     }
 
     /**
@@ -230,10 +250,8 @@ Builder setScreenDimensions(ScreenDimensions screenDimensions) {
     }
 
     public MemorySizeCalculator build() {
-      return new MemorySizeCalculator(context, activityManager, screenDimensions,
-          memoryCacheScreens, bitmapPoolScreens, arrayPoolSizeBytes, maxSizeMultiplier,
-          lowMemoryMaxSizeMultiplier);
-      }
+      return new MemorySizeCalculator(this);
+    }
   }
 
   private static final class DisplayMetricsScreenDimensions implements ScreenDimensions {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
index 42a5a46c1..5ca0d0fb0 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/prefill/BitmapPreFiller.java
@@ -39,7 +39,9 @@ public void preFill(PreFillType.Builder... bitmapAttributeBuilders) {
     for (int i = 0; i < bitmapAttributeBuilders.length; i++) {
       PreFillType.Builder builder = bitmapAttributeBuilders[i];
       if (builder.getConfig() == null) {
-        builder.setConfig(defaultFormat == DecodeFormat.PREFER_ARGB_8888
+        builder.setConfig(
+            defaultFormat == DecodeFormat.PREFER_ARGB_8888
+                || defaultFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
             ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
       }
       bitmapAttributes[i] = builder.build();
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
index 8a486cce7..60c4a9452 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ByteArrayLoader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Options;
@@ -69,11 +70,13 @@ public void cancel() {
       // Do nothing.
     }
 
+    @NonNull
     @Override
     public Class<Data> getDataClass() {
       return converter.getDataClass();
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
index cb28480a1..82a787898 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/ByteBufferFileLoader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -78,11 +79,13 @@ public void cancel() {
       // Do nothing.
     }
 
+    @NonNull
     @Override
     public Class<ByteBuffer> getDataClass() {
       return ByteBuffer.class;
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
index 0e3297acb..4f522f4ac 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/DataUrlLoader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
 import android.util.Base64;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -90,11 +91,13 @@ public void cancel() {
       // Do nothing.
     }
 
+    @NonNull
     @Override
     public Class<Data> getDataClass() {
       return reader.getDataClass();
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
index 104af06e4..3d6fb70c3 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/FileLoader.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.model;
 
 import android.os.ParcelFileDescriptor;
+import android.support.annotation.NonNull;
 import android.util.Log;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -89,11 +90,13 @@ public void cancel() {
       // Do nothing.
     }
 
+    @NonNull
     @Override
     public Class<Data> getDataClass() {
       return opener.getDataClass();
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
index 31b30bb5d..5f4b4c85d 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/LazyHeaders.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.VisibleForTesting;
 import android.text.TextUtils;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -99,9 +100,7 @@ public int hashCode() {
   @SuppressWarnings("PMD.FieldDeclarationsShouldBeAtStartOfClass")
   public static final class Builder {
     private static final String USER_AGENT_HEADER = "User-Agent";
-    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
-    private static final String ENCODING_HEADER = "Accept-Encoding";
-    private static final String DEFAULT_ENCODING = "identity";
+    private static final String DEFAULT_USER_AGENT = getSanitizedUserAgent();
     private static final Map<String, List<LazyHeaderFactory>> DEFAULT_HEADERS;
 
     // Set Accept-Encoding header to do our best to avoid gzip since it's both inefficient for
@@ -115,15 +114,11 @@ public int hashCode() {
             Collections.<LazyHeaderFactory>singletonList(
                 new StringHeaderFactory(DEFAULT_USER_AGENT)));
       }
-      temp.put(ENCODING_HEADER,
-          Collections.<LazyHeaderFactory>singletonList(
-              new StringHeaderFactory(DEFAULT_ENCODING)));
       DEFAULT_HEADERS = Collections.unmodifiableMap(temp);
     }
 
     private boolean copyOnModify = true;
     private Map<String, List<LazyHeaderFactory>> headers = DEFAULT_HEADERS;
-    private boolean isEncodingDefault = true;
     private boolean isUserAgentDefault = true;
 
     /**
@@ -150,8 +145,7 @@ public Builder addHeader(String key, String value) {
      * times </p>
      */
     public Builder addHeader(String key, LazyHeaderFactory factory) {
-      if ((isEncodingDefault && ENCODING_HEADER.equalsIgnoreCase(key))
-          || (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key))) {
+      if (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key)) {
         return setHeader(key, factory);
       }
 
@@ -189,9 +183,6 @@ public Builder setHeader(String key, LazyHeaderFactory factory) {
         factories.add(factory);
       }
 
-      if (isEncodingDefault && ENCODING_HEADER.equalsIgnoreCase(key)) {
-        isEncodingDefault = false;
-      }
       if (isUserAgentDefault && USER_AGENT_HEADER.equalsIgnoreCase(key)) {
         isUserAgentDefault = false;
       }
@@ -231,6 +222,31 @@ public LazyHeaders build() {
       }
       return result;
     }
+
+    /**
+     * Ensures that the default header will pass OkHttp3's checks for header values.
+     *
+     * <p>See #2331.
+     */
+    @VisibleForTesting
+    static String getSanitizedUserAgent() {
+      String defaultUserAgent = System.getProperty("http.agent");
+      if (TextUtils.isEmpty(defaultUserAgent)) {
+        return defaultUserAgent;
+      }
+
+      int length = defaultUserAgent.length();
+      StringBuilder sb = new StringBuilder(defaultUserAgent.length());
+      for (int i = 0; i < length; i++) {
+        char c = defaultUserAgent.charAt(i);
+        if ((c > '\u001f' || c == '\t') && c < '\u007f') {
+          sb.append(c);
+        } else {
+          sb.append('?');
+        }
+      }
+      return sb.toString();
+    }
   }
 
   static final class StringHeaderFactory implements LazyHeaderFactory {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
index 5326fd2d9..7d389f197 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MediaStoreFileLoader.java
@@ -4,6 +4,7 @@
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.MediaStore;
+import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -81,11 +82,13 @@ public void cancel() {
       // Do nothing.
     }
 
+    @NonNull
     @Override
     public Class<File> getDataClass() {
       return File.class;
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index dd8b59921..d18d12e46 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.util.Pools.Pool;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
@@ -76,6 +78,7 @@ public String toString() {
     private int currentIndex;
     private Priority priority;
     private DataCallback<? super Data> callback;
+    @Nullable
     private List<Exception> exceptions;
 
     MultiFetcher(List<DataFetcher<Data>> fetchers, Pool<List<Exception>> exceptionListPool) {
@@ -95,7 +98,9 @@ public void loadData(Priority priority, DataCallback<? super Data> callback) {
 
     @Override
     public void cleanup() {
-      exceptionListPool.release(exceptions);
+      if (exceptions != null) {
+        exceptionListPool.release(exceptions);
+      }
       exceptions = null;
       for (DataFetcher<Data> fetcher : fetchers) {
         fetcher.cleanup();
@@ -109,11 +114,13 @@ public void cancel() {
       }
     }
 
+    @NonNull
     @Override
     public Class<Data> getDataClass() {
       return fetchers.get(0).getDataClass();
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return fetchers.get(0).getDataSource();
diff --git a/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
index 198f01bfa..8a3eca114 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/UnitModelLoader.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.Options;
@@ -48,12 +49,14 @@ public void cancel() {
       // Do nothing.
     }
 
+    @NonNull
     @SuppressWarnings("unchecked")
     @Override
     public Class<Model> getDataClass() {
       return (Class<Model>) resource.getClass();
     }
 
+    @NonNull
     @Override
     public DataSource getDataSource() {
       return DataSource.LOCAL;
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
index b4ef6c4ca..8a2fdf327 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapEncoder.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.load.resource.bitmap;
 
 import android.graphics.Bitmap;
+import android.support.v4.os.TraceCompat;
 import android.util.Log;
 import com.bumptech.glide.load.EncodeStrategy;
 import com.bumptech.glide.load.Option;
@@ -51,37 +52,44 @@
   @Override
   public boolean encode(Resource<Bitmap> resource, File file, Options options) {
     final Bitmap bitmap = resource.get();
-
-    long start = LogTime.getLogTime();
     Bitmap.CompressFormat format = getFormat(bitmap, options);
-    int quality = options.get(COMPRESSION_QUALITY);
-
-    boolean success = false;
-    OutputStream os = null;
+    TraceCompat.beginSection(
+        "encode: [" + bitmap.getWidth() + "x" + bitmap.getHeight() + "] " + format);
     try {
-      os = new FileOutputStream(file);
-      bitmap.compress(format, quality, os);
-      os.close();
-      success = true;
-    } catch (IOException e) {
-      if (Log.isLoggable(TAG, Log.DEBUG)) {
-        Log.d(TAG, "Failed to encode Bitmap", e);
-      }
-    } finally {
-      if (os != null) {
-        try {
-          os.close();
-        } catch (IOException e) {
-          // Do nothing.
+      long start = LogTime.getLogTime();
+      int quality = options.get(COMPRESSION_QUALITY);
+
+      boolean success = false;
+      OutputStream os = null;
+      try {
+        os = new FileOutputStream(file);
+        bitmap.compress(format, quality, os);
+        os.close();
+        success = true;
+      } catch (IOException e) {
+        if (Log.isLoggable(TAG, Log.DEBUG)) {
+          Log.d(TAG, "Failed to encode Bitmap", e);
+        }
+      } finally {
+        if (os != null) {
+          try {
+            os.close();
+          } catch (IOException e) {
+            // Do nothing.
+          }
         }
       }
-    }
 
-    if (Log.isLoggable(TAG, Log.VERBOSE)) {
-      Log.v(TAG, "Compressed with type: " + format + " of size " + Util.getBitmapByteSize(bitmap)
-          + " in " + LogTime.getElapsedMillis(start));
+      if (Log.isLoggable(TAG, Log.VERBOSE)) {
+        Log.v(TAG, "Compressed with type: " + format + " of size " + Util.getBitmapByteSize(bitmap)
+            + " in " + LogTime.getElapsedMillis(start)
+            + ", options format: " + options.get(COMPRESSION_FORMAT)
+            + ", hasAlpha: " + bitmap.hasAlpha());
+      }
+      return success;
+    } finally {
+      TraceCompat.endSection();
     }
-    return success;
   }
 
   private Bitmap.CompressFormat getFormat(Bitmap bitmap, Options options) {
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java
index f24c63ce6..61900b789 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/BitmapTransitionOptions.java
@@ -31,15 +31,6 @@ public static BitmapTransitionOptions withCrossFade(int duration) {
     return new BitmapTransitionOptions().crossFade(duration);
   }
 
-  /**
-   * Returns a {@link BitmapTransitionOptions} object that enables a cross fade animation.
-   *
-   * @see #crossFade(int, int)
-   */
-  public static BitmapTransitionOptions withCrossFade(int animationId, int duration) {
-    return new BitmapTransitionOptions().crossFade(animationId, duration);
-  }
-
   /**
    * Returns a {@link BitmapTransitionOptions} object that enables a cross fade animation.
    *
@@ -101,22 +92,6 @@ public BitmapTransitionOptions crossFade(int duration) {
     return crossFade(new DrawableCrossFadeFactory.Builder(duration));
   }
 
-  /**
-   * Enables a cross fade animation between both the placeholder and the first resource and between
-   * subsequent resources (if thumbnails are used).
-   *
-   * @param animationId The id of the animation to use if no placeholder or previous resource is
-   *     set, see {@code DrawableCrossFadeFactory.Builder#setDefaultAnimationId(int)}.
-   * @param duration The duration of the cross fade, see
-   *     {@code DrawableCrossFadeFactory.Builder(int)}.
-   * @see com.bumptech.glide.request.transition.DrawableCrossFadeFactory.Builder
-   */
-  public BitmapTransitionOptions crossFade(int animationId, int duration) {
-    return crossFade(
-        new DrawableCrossFadeFactory.Builder(duration)
-            .setDefaultAnimationId(animationId));
-  }
-
   /**
    * Enables a cross fade animation between both the placeholder and the first resource and between
    * subsequent resources (if thumbnails are used).
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index e16adcc79..243b76752 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -2,6 +2,7 @@
 
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
+import android.graphics.Bitmap.Config;
 import android.graphics.BitmapFactory;
 import android.os.Build;
 import android.support.annotation.Nullable;
@@ -16,6 +17,7 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.SampleSizeRounding;
+import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.util.Preconditions;
 import com.bumptech.glide.util.Util;
@@ -34,7 +36,7 @@
  * Downsamples, decodes, and rotates images according to their exif orientation.
  */
 public final class Downsampler {
-  private static final String TAG = "Downsampler";
+  static final String TAG = "Downsampler";
   /**
    * Indicates the {@link com.bumptech.glide.load.DecodeFormat} that will be used in conjunction
    * with the image format to determine the {@link android.graphics.Bitmap.Config} to provide to
@@ -50,7 +52,6 @@
   public static final Option<DownsampleStrategy> DOWNSAMPLE_STRATEGY =
       Option.memory("com.bumptech.glide.load.resource.bitmap.Downsampler.DownsampleStrategy",
           DownsampleStrategy.AT_LEAST);
-
   /**
    * Ensure that the size of the bitmap is fixed to the requested width and height of the
    * resource from the caller.  The final resource dimensions may differ from the requested
@@ -64,6 +65,27 @@
   public static final Option<Boolean> FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS =
       Option.memory("com.bumptech.glide.load.resource.bitmap.Downsampler.FixBitmapSize", false);
 
+  /**
+   * Indicates that it's safe or unsafe to decode {@link Bitmap}s with
+   * {@link Bitmap.Config#HARDWARE}.
+   *
+   * <p>Callers should almost never set this value to {@code true} manually. Glide will already do
+   * so when Glide believes it's safe to do (when no transformations are applied). Instead, callers
+   * can set this value to {@code false} to prevent Glide from decoding hardware bitmaps if Glide
+   * is unable to detect that hardware bitmaps are unsafe. For example, you should set this to
+   * {@code false} if you plan to draw it to a software {@link android.graphics.Canvas} or if you
+   * plan to inspect the {@link Bitmap}s pixels with {@link Bitmap#getPixel(int, int)} or
+   * {@link Bitmap#getPixels(int[], int, int, int, int, int, int)}.
+   *
+   * <p>Callers can disable hardware {@link Bitmap}s for all loads using
+   * {@link com.bumptech.glide.GlideBuilder#setDefaultRequestOptions(RequestOptions)}.
+   *
+   * <p>This option is ignored unless we're on Android O+.
+   */
+  public static final Option<Boolean> ALLOW_HARDWARE_CONFIG =
+      Option.memory(
+          "com.bumtpech.glide.load.resource.bitmap.Downsampler.AllowHardwareDecode", null);
+
   private static final String WBMP_MIME_TYPE = "image/vnd.wap.wbmp";
   private static final String ICO_MIME_TYPE = "image/x-ico";
   private static final Set<String> NO_DOWNSAMPLE_PRE_N_MIME_TYPES =
@@ -103,6 +125,7 @@ public void onDecodeComplete(BitmapPool bitmapPool, Bitmap downsampled) throws I
   private final DisplayMetrics displayMetrics;
   private final ArrayPool byteArrayPool;
   private final List<ImageHeaderParser> parsers;
+  private final HardwareConfigState hardwareConfigState = HardwareConfigState.getInstance();
 
   public Downsampler(List<ImageHeaderParser> parsers, DisplayMetrics displayMetrics,
       BitmapPool bitmapPool, ArrayPool byteArrayPool) {
@@ -171,11 +194,16 @@ public boolean handles(ByteBuffer byteBuffer) {
     DecodeFormat decodeFormat = options.get(DECODE_FORMAT);
     DownsampleStrategy downsampleStrategy = options.get(DOWNSAMPLE_STRATEGY);
     boolean fixBitmapToRequestedDimensions = options.get(FIX_BITMAP_SIZE_TO_REQUESTED_DIMENSIONS);
+    boolean isHardwareConfigAllowed =
+      options.get(ALLOW_HARDWARE_CONFIG) != null && options.get(ALLOW_HARDWARE_CONFIG);
+    if (decodeFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE) {
+      isHardwareConfigAllowed = false;
+    }
 
     try {
       Bitmap result = decodeFromWrappedStreams(is, bitmapFactoryOptions,
-          downsampleStrategy, decodeFormat, requestedWidth, requestedHeight,
-          fixBitmapToRequestedDimensions, callbacks);
+          downsampleStrategy, decodeFormat, isHardwareConfigAllowed, requestedWidth,
+          requestedHeight, fixBitmapToRequestedDimensions, callbacks);
       return BitmapResource.obtain(result, bitmapPool);
     } finally {
       releaseOptions(bitmapFactoryOptions);
@@ -185,27 +213,32 @@ public boolean handles(ByteBuffer byteBuffer) {
 
   private Bitmap decodeFromWrappedStreams(InputStream is,
       BitmapFactory.Options options, DownsampleStrategy downsampleStrategy,
-      DecodeFormat decodeFormat, int requestedWidth, int requestedHeight,
-      boolean fixBitmapToRequestedDimensions, DecodeCallbacks callbacks) throws IOException {
+      DecodeFormat decodeFormat, boolean isHardwareConfigAllowed, int requestedWidth,
+      int requestedHeight, boolean fixBitmapToRequestedDimensions,
+      DecodeCallbacks callbacks) throws IOException {
 
-    int[] sourceDimensions = getDimensions(is, options, callbacks);
+    int[] sourceDimensions = getDimensions(is, options, callbacks, bitmapPool);
     int sourceWidth = sourceDimensions[0];
     int sourceHeight = sourceDimensions[1];
     String sourceMimeType = options.outMimeType;
 
     int orientation = ImageHeaderParserUtils.getOrientation(parsers, is, byteArrayPool);
     int degreesToRotate = TransformationUtils.getExifOrientationDegrees(orientation);
-
-    options.inPreferredConfig = getConfig(is, decodeFormat);
-    if (options.inPreferredConfig != Bitmap.Config.ARGB_8888) {
-      options.inDither = true;
-    }
+    boolean isExifOrientationRequired = TransformationUtils.isExifOrientationRequired(orientation);
 
     int targetWidth = requestedWidth == Target.SIZE_ORIGINAL ? sourceWidth : requestedWidth;
     int targetHeight = requestedHeight == Target.SIZE_ORIGINAL ? sourceHeight : requestedHeight;
 
     calculateScaling(downsampleStrategy, degreesToRotate, sourceWidth, sourceHeight, targetWidth,
         targetHeight, options);
+    calculateConfig(
+        is,
+        decodeFormat,
+        isHardwareConfigAllowed,
+        isExifOrientationRequired,
+        options,
+        targetWidth,
+        targetHeight);
 
     boolean isKitKatOrGreater = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
     // Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we're decoding.
@@ -240,7 +273,7 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
         setInBitmap(options, bitmapPool, expectedWidth, expectedHeight);
       }
     }
-    Bitmap downsampled = decodeStream(is, options, callbacks);
+    Bitmap downsampled = decodeStream(is, options, callbacks, bitmapPool);
     callbacks.onDecodeComplete(bitmapPool, downsampled);
 
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
@@ -264,7 +297,8 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
   }
 
   // Visible for testing.
-  static void calculateScaling(DownsampleStrategy downsampleStrategy, int degreesToRotate,
+  static void calculateScaling(DownsampleStrategy downsampleStrategy,
+      int degreesToRotate,
       int sourceWidth, int sourceHeight, int targetWidth, int targetHeight,
       BitmapFactory.Options options) {
     // We can't downsample source content if we can't determine its dimensions.
@@ -365,11 +399,32 @@ private boolean shouldUsePool(InputStream is) throws IOException {
     return false;
   }
 
-  private Bitmap.Config getConfig(InputStream is, DecodeFormat format) throws IOException {
+  private void calculateConfig(
+      InputStream is,
+      DecodeFormat format,
+      boolean isHardwareConfigAllowed,
+      boolean isExifOrientationRequired,
+      BitmapFactory.Options optionsWithScaling,
+      int targetWidth,
+      int targetHeight)
+      throws IOException {
+
+    if (hardwareConfigState.setHardwareConfigIfAllowed(
+        targetWidth,
+        targetHeight,
+        optionsWithScaling,
+        format,
+        isHardwareConfigAllowed,
+        isExifOrientationRequired)) {
+      return;
+    }
+
     // Changing configs can cause skewing on 4.1, see issue #128.
     if (format == DecodeFormat.PREFER_ARGB_8888
+        || format == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
         || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN) {
-      return Bitmap.Config.ARGB_8888;
+      optionsWithScaling.inPreferredConfig = Bitmap.Config.ARGB_8888;
+      return;
     }
 
     boolean hasAlpha = false;
@@ -382,7 +437,13 @@ private boolean shouldUsePool(InputStream is) throws IOException {
       }
     }
 
-    return hasAlpha ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;
+    optionsWithScaling.inPreferredConfig =
+        hasAlpha ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565;
+    if (optionsWithScaling.inPreferredConfig == Config.RGB_565
+        || optionsWithScaling.inPreferredConfig == Config.ARGB_4444
+        || optionsWithScaling.inPreferredConfig == Config.ALPHA_8) {
+      optionsWithScaling.inDither = true;
+    }
   }
 
   /**
@@ -394,15 +455,15 @@ private boolean shouldUsePool(InputStream is) throws IOException {
    * @return an array containing the dimensions of the image in the form {width, height}.
    */
   private static int[] getDimensions(InputStream is, BitmapFactory.Options options,
-      DecodeCallbacks decodeCallbacks) throws IOException {
+      DecodeCallbacks decodeCallbacks, BitmapPool bitmapPool) throws IOException {
     options.inJustDecodeBounds = true;
-    decodeStream(is, options, decodeCallbacks);
+    decodeStream(is, options, decodeCallbacks, bitmapPool);
     options.inJustDecodeBounds = false;
     return new int[] { options.outWidth, options.outHeight };
   }
 
   private static Bitmap decodeStream(InputStream is, BitmapFactory.Options options,
-      DecodeCallbacks callbacks) throws IOException {
+      DecodeCallbacks callbacks, BitmapPool bitmapPool) throws IOException {
     if (options.inJustDecodeBounds) {
       is.mark(MARK_POSITION);
     } else {
@@ -423,7 +484,23 @@ private static Bitmap decodeStream(InputStream is, BitmapFactory.Options options
     try {
       result = BitmapFactory.decodeStream(is, null, options);
     } catch (IllegalArgumentException e) {
-      throw newIoExceptionForInBitmapAssertion(e, sourceWidth, sourceHeight, outMimeType, options);
+      IOException bitmapAssertionException =
+          newIoExceptionForInBitmapAssertion(e, sourceWidth, sourceHeight, outMimeType, options);
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Failed to decode with inBitmap, trying again without Bitmap re-use",
+            bitmapAssertionException);
+      }
+      if (options.inBitmap != null) {
+        try {
+          is.reset();
+          bitmapPool.put(options.inBitmap);
+          options.inBitmap = null;
+          return decodeStream(is, options, callbacks, bitmapPool);
+        } catch (IOException resetException) {
+          throw bitmapAssertionException;
+        }
+      }
+      throw bitmapAssertionException;
     } finally {
       TransformationUtils.getBitmapDrawableLock().unlock();
     }
@@ -482,8 +559,16 @@ private static IOException newIoExceptionForInBitmapAssertion(IllegalArgumentExc
           + ", inBitmap: " + getInBitmapString(options), e);
   }
 
+  @SuppressWarnings("PMD.CollapsibleIfStatements")
+  @TargetApi(Build.VERSION_CODES.O)
   private static void setInBitmap(BitmapFactory.Options options, BitmapPool bitmapPool, int width,
       int height) {
+    // Avoid short circuiting, it appears to break on some devices.
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+      if (options.inPreferredConfig == Config.HARDWARE) {
+        return;
+      }
+    }
     // BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.
     options.inBitmap = bitmapPool.getDirty(width, height, options.inPreferredConfig);
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
new file mode 100644
index 000000000..d873c51e8
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/HardwareConfigState.java
@@ -0,0 +1,118 @@
+package com.bumptech.glide.load.resource.bitmap;
+
+import android.annotation.TargetApi;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Build;
+import android.util.Log;
+import com.bumptech.glide.load.DecodeFormat;
+import java.io.File;
+
+/**
+ * State and constants for interacting with {@link android.graphics.Bitmap.Config#HARDWARE} on
+ * Android O+.
+ */
+final class HardwareConfigState {
+  /**
+   * The minimum size in pixels a {@link Bitmap} must be in both dimensions to be created with the
+   * {@link Bitmap.Config#HARDWARE} configuration.
+   *
+   * <p>This is a quick check that lets us skip wasting FDs (see {@link #FD_SIZE_LIST}) on small
+   * {@link Bitmap}s with relatively low memory costs.
+   *
+   * @see #FD_SIZE_LIST
+   */
+  private static final int MIN_HARDWARE_DIMENSION = 128;
+
+  /**
+   * Allows us to check to make sure we're not exceeding the FD limit for a process with hardware
+   * {@link Bitmap}s.
+   *
+   * <p>{@link Bitmap.Config#HARDWARE} {@link Bitmap}s require two FDs (depending on the driver).
+   * Processes have an FD limit of 1024 (at least on O). With sufficiently small {@link Bitmap}s
+   * and/or a sufficiently large {@link com.bumptech.glide.load.engine.cache.MemoryCache}, we can
+   * end up with enough {@link Bitmap}s in memory that we blow through the FD limit, which causes
+   * graphics errors, Binder errors, and a variety of crashes.
+   *
+   * <p>Calling list.size() should be relatively efficient (hopefully < 1ms on average) because
+   * /proc is an in-memory FS.
+   */
+  private static final File FD_SIZE_LIST = new File("/proc/self/fd");
+
+  /**
+   * Each FD check takes 1-2ms, so to avoid overhead, only check every N decodes. 50 is more or less
+   * arbitrary.
+   */
+  private static final int MINIMUM_DECODES_BETWEEN_FD_CHECKS = 50;
+
+  /**
+   * 700 with an error of 50 Bitmaps in between at two FDs each lets us use up to 800 FDs for
+   * hardware Bitmaps.
+   */
+  private static final int MAXIMUM_FDS_FOR_HARDWARE_CONFIGS = 700;
+
+  private volatile int decodesSinceLastFdCheck;
+  private volatile boolean isHardwareConfigAllowed = true;
+
+  private static volatile HardwareConfigState instance;
+
+  static HardwareConfigState getInstance() {
+    if (instance == null) {
+      synchronized (HardwareConfigState.class) {
+        if (instance == null) {
+          instance = new HardwareConfigState();
+        }
+      }
+    }
+    return instance;
+  }
+
+  private HardwareConfigState() {
+    // Singleton constructor.
+  }
+
+  @TargetApi(Build.VERSION_CODES.O)
+  boolean setHardwareConfigIfAllowed(
+      int targetWidth,
+      int targetHeight,
+      BitmapFactory.Options optionsWithScaling,
+      DecodeFormat decodeFormat,
+      boolean isHardwareConfigAllowed,
+      boolean isExifOrientationRequired) {
+    if (!isHardwareConfigAllowed
+        || Build.VERSION.SDK_INT < Build.VERSION_CODES.O
+        || decodeFormat == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
+        || isExifOrientationRequired) {
+      return false;
+    }
+
+    boolean result =
+        targetWidth >= MIN_HARDWARE_DIMENSION
+            && targetHeight >= MIN_HARDWARE_DIMENSION
+            // Make sure to call isFdSizeBelowHardwareLimit last because it has side affects.
+            && isFdSizeBelowHardwareLimit();
+
+    if (result) {
+      optionsWithScaling.inPreferredConfig = Bitmap.Config.HARDWARE;
+      optionsWithScaling.inMutable = false;
+    }
+    return result;
+  }
+
+  private synchronized boolean isFdSizeBelowHardwareLimit() {
+    if (++decodesSinceLastFdCheck >= MINIMUM_DECODES_BETWEEN_FD_CHECKS) {
+      decodesSinceLastFdCheck = 0;
+      int currentFds = FD_SIZE_LIST.list().length;
+      isHardwareConfigAllowed = currentFds < MAXIMUM_FDS_FOR_HARDWARE_CONFIGS;
+
+      if (!isHardwareConfigAllowed && Log.isLoggable(Downsampler.TAG, Log.WARN)) {
+        Log.w(Downsampler.TAG,
+            "Excluding HARDWARE bitmap config because we're over the file descriptor limit"
+                + ", file descriptors " + currentFds
+                + ", limit " + MAXIMUM_FDS_FOR_HARDWARE_CONFIGS);
+      }
+    }
+
+    return isHardwareConfigAllowed;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
index e7abbb8ab..e17e7500c 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
@@ -172,7 +172,7 @@ public static Bitmap fitCenter(@NonNull BitmapPool pool, @NonNull Bitmap inBitma
    * height is larger than the given dimensions
    */
   public static Bitmap centerInside(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap, int width,
-                                 int height) {
+      int height) {
     if (inBitmap.getWidth() <= width && inBitmap.getHeight() <= height) {
       if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "requested target size larger or equal to input, returning input");
@@ -264,12 +264,13 @@ public static int getExifOrientationDegrees(int exifOrientation) {
    */
   public static Bitmap rotateImageExif(@NonNull BitmapPool pool, @NonNull Bitmap inBitmap,
       int exifOrientation) {
-    final Matrix matrix = new Matrix();
-    initializeMatrixForRotation(exifOrientation, matrix);
-    if (matrix.isIdentity()) {
+    if (!isExifOrientationRequired(exifOrientation)) {
       return inBitmap;
     }
 
+    final Matrix matrix = new Matrix();
+    initializeMatrixForRotation(exifOrientation, matrix);
+
     // From Bitmap.createBitmap.
     final RectF newRect = new RectF(0, 0, inBitmap.getWidth(), inBitmap.getHeight());
     matrix.mapRect(newRect);
@@ -286,6 +287,25 @@ public static Bitmap rotateImageExif(@NonNull BitmapPool pool, @NonNull Bitmap i
     return result;
   }
 
+  /**
+   * Returns {@code true} if the given exif orientation indicates that a transformation is necessary
+   * and {@code false} otherwise.
+   */
+  public static boolean isExifOrientationRequired(int exifOrientation) {
+    switch (exifOrientation) {
+      case ExifInterface.ORIENTATION_FLIP_HORIZONTAL:
+      case ExifInterface.ORIENTATION_ROTATE_180:
+      case ExifInterface.ORIENTATION_FLIP_VERTICAL:
+      case ExifInterface.ORIENTATION_TRANSPOSE:
+      case ExifInterface.ORIENTATION_ROTATE_90:
+      case ExifInterface.ORIENTATION_TRANSVERSE:
+      case ExifInterface.ORIENTATION_ROTATE_270:
+        return true;
+      default:
+        return false;
+    }
+  }
+
   /**
    * Crop the image to a circle and resize to the specified width/height.  The circle crop will
    * have the same width and height equal to the min-edge of the result image.
@@ -348,7 +368,7 @@ private static Bitmap getAlphaSafeBitmap(@NonNull BitmapPool pool,
 
     Bitmap argbBitmap = pool.get(maybeAlphaSafe.getWidth(), maybeAlphaSafe.getHeight(),
         Bitmap.Config.ARGB_8888);
-    new Canvas(argbBitmap).drawBitmap(maybeAlphaSafe, 0 /*left*/, 0 /*top*/, null /*pain*/);
+    new Canvas(argbBitmap).drawBitmap(maybeAlphaSafe, 0 /*left*/, 0 /*top*/, null /*paint*/);
 
     // We now own this Bitmap. It's our responsibility to replace it in the pool outside this method
     // when we're finished with it.
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
index ebf582b81..88eeeaffa 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableTransitionOptions.java
@@ -29,15 +29,6 @@ public static DrawableTransitionOptions withCrossFade(int duration) {
     return new DrawableTransitionOptions().crossFade(duration);
   }
 
-  /**
-   * Returns a {@link DrawableTransitionOptions} object that enables a cross fade animation.
-   *
-   * @see #crossFade(int, int)
-   */
-  public static DrawableTransitionOptions withCrossFade(int animationId, int duration) {
-    return new DrawableTransitionOptions().crossFade(animationId, duration);
-  }
-
   /**
    * Returns a {@link DrawableTransitionOptions} object that enables a cross fade animation.
    *
@@ -88,22 +79,6 @@ public DrawableTransitionOptions crossFade(int duration) {
     return crossFade(new DrawableCrossFadeFactory.Builder(duration));
   }
 
-  /**
-   * Enables a cross fade animation between both the placeholder and the first resource and between
-   * subsequent resources (if thumbnails are used).
-   *
-   * @param animationId The id of the animation to use if no placeholder or previous resource is
-   *     set, see {@code DrawableCrossFadeFactory.Builder#setDefaultAnimationId(int)}.
-   * @param duration The duration of the cross fade, see
-   *     {@code DrawableCrossFadeFactory.Builder(int)}
-   * @see com.bumptech.glide.request.transition.DrawableCrossFadeFactory.Builder
-   */
-  public DrawableTransitionOptions crossFade(int animationId, int duration) {
-    return crossFade(
-        new DrawableCrossFadeFactory.Builder(duration)
-            .setDefaultAnimationId(animationId));
-  }
-
   /**
    * Enables a cross fade animation between both the placeholder and the first resource and between
    * subsequent resources (if thumbnails are used).
diff --git a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java
index ab3713962..2d6702e53 100644
--- a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java
+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitorFactory.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.support.annotation.NonNull;
+import android.support.v4.content.ContextCompat;
 
 /**
  * A factory class that produces a functional {@link com.bumptech.glide.manager.ConnectivityMonitor}
@@ -11,17 +12,15 @@
  * the required permission.
  */
 public class DefaultConnectivityMonitorFactory implements ConnectivityMonitorFactory {
+  private static final String NETWORK_PERMISSION = "android.permission.ACCESS_NETWORK_STATE";
 
   @NonNull
   public ConnectivityMonitor build(
       @NonNull Context context,
       @NonNull ConnectivityMonitor.ConnectivityListener listener) {
-    final int res = context.checkCallingOrSelfPermission("android.permission.ACCESS_NETWORK_STATE");
-    final boolean hasPermission = res == PackageManager.PERMISSION_GRANTED;
-    if (hasPermission) {
-      return new DefaultConnectivityMonitor(context, listener);
-    } else {
-      return new NullConnectivityMonitor();
-    }
+    int permissionResult = ContextCompat.checkSelfPermission(context, NETWORK_PERMISSION);
+    boolean hasPermission = permissionResult == PackageManager.PERMISSION_GRANTED;
+    return hasPermission
+        ? new DefaultConnectivityMonitor(context, listener) : new NullConnectivityMonitor();
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
index af6d7f599..c799bac07 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerFragment.java
@@ -54,7 +54,7 @@ public void setRequestManager(RequestManager requestManager) {
     this.requestManager = requestManager;
   }
 
-  ActivityFragmentLifecycle getLifecycle() {
+  ActivityFragmentLifecycle getGlideLifecycle() {
     return lifecycle;
   }
 
@@ -197,26 +197,6 @@ public void onDestroy() {
     unregisterFragmentWithRoot();
   }
 
-  @Override
-  public void onTrimMemory(int level) {
-    super.onTrimMemory(level);
-    // If an activity is re-created, onTrimMemory may be called before a manager is ever put.
-    // See #329.
-    if (requestManager != null) {
-      requestManager.onTrimMemory(level);
-    }
-  }
-
-  @Override
-  public void onLowMemory() {
-    super.onLowMemory();
-    // If an activity is re-created, onLowMemory may be called before a manager is ever put.
-    // See #329.
-    if (requestManager != null) {
-      requestManager.onLowMemory();
-    }
-  }
-
   @Override
   public String toString() {
     return super.toString() + "{parent=" + getParentFragmentUsingHint() + "}";
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
index b07a23677..09cc608fe 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java
@@ -186,7 +186,8 @@ private static void findAllSupportFragmentsWithViews(
       return;
     }
     for (Fragment fragment : topLevelFragments) {
-      if (fragment.getView() == null) {
+      // getFragment()s in the support FragmentManager may contain null values, see #1991.
+      if (fragment == null || fragment.getView() == null) {
         continue;
       }
       result.put(fragment.getView(), fragment);
@@ -323,7 +324,7 @@ private RequestManager fragmentGet(Context context, android.app.FragmentManager
       // TODO(b/27524013): Factor out this Glide.get() call.
       Glide glide = Glide.get(context);
       requestManager =
-          factory.build(glide, current.getLifecycle(), current.getRequestManagerTreeNode());
+          factory.build(glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode());
       current.setRequestManager(requestManager);
     }
     return requestManager;
@@ -354,7 +355,7 @@ private RequestManager supportFragmentGet(Context context, FragmentManager fm,
       // TODO(b/27524013): Factor out this Glide.get() call.
       Glide glide = Glide.get(context);
       requestManager =
-          factory.build(glide, current.getLifecycle(), current.getRequestManagerTreeNode());
+          factory.build(glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode());
       current.setRequestManager(requestManager);
     }
     return requestManager;
diff --git a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
index 78a66c6a3..f735e3618 100644
--- a/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
+++ b/library/src/main/java/com/bumptech/glide/manager/RequestTracker.java
@@ -25,8 +25,7 @@
       Collections.newSetFromMap(new WeakHashMap<Request, Boolean>());
   // A set of requests that have not completed and are queued to be run again. We use this list to
   // maintain hard references to these requests to ensure that they are not garbage collected
-  // before
-  // they start running or while they are paused. See #346.
+  // before they start running or while they are paused. See #346.
   @SuppressWarnings("MismatchedQueryAndUpdateOfCollection")
   private final List<Request> pendingRequests = new ArrayList<>();
   private boolean isPaused;
@@ -53,8 +52,12 @@ void addRequest(Request request) {
    * request was removed or {@code false} if the request was not found.
    */
   public boolean clearRemoveAndRecycle(Request request) {
-    boolean isOwnedByUs =
-        request != null && (requests.remove(request) || pendingRequests.remove(request));
+    if (request == null) {
+      return false;
+    }
+    boolean isOwnedByUs = requests.remove(request);
+    // Avoid short circuiting.
+    isOwnedByUs = pendingRequests.remove(request) || isOwnedByUs;
     if (isOwnedByUs) {
       request.clear();
       request.recycle();
diff --git a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
index a61b3af9b..8bf7c0ec0 100644
--- a/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
+++ b/library/src/main/java/com/bumptech/glide/manager/SupportRequestManagerFragment.java
@@ -53,7 +53,7 @@ public void setRequestManager(RequestManager requestManager) {
     this.requestManager = requestManager;
   }
 
-  ActivityFragmentLifecycle getLifecycle() {
+  ActivityFragmentLifecycle getGlideLifecycle() {
     return lifecycle;
   }
 
@@ -188,16 +188,6 @@ public void onDestroy() {
     unregisterFragmentWithRoot();
   }
 
-  @Override
-  public void onLowMemory() {
-    super.onLowMemory();
-    // If an activity is re-created, onLowMemory may be called before a manager is ever put.
-    // See #329.
-    if (requestManager != null) {
-      requestManager.onLowMemory();
-    }
-  }
-
   @Override
   public String toString() {
     return super.toString() + "{parent=" + getParentFragmentUsingHint() + "}";
diff --git a/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java b/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java
index f543d3729..ccf368671 100644
--- a/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java
+++ b/library/src/main/java/com/bumptech/glide/module/LibraryGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.module;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 
 /**
@@ -16,7 +17,7 @@
  */
 public abstract class LibraryGlideModule implements RegistersComponents {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     // Default empty impl.
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
index 1c6d8c9b8..f87a7409a 100644
--- a/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
+++ b/library/src/main/java/com/bumptech/glide/module/RegistersComponents.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.module;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 
 /**
@@ -15,7 +16,8 @@
    * <p> This method will be called once and only once per implementation. </p>
    *
    * @param context  An Application {@link android.content.Context}.
+   * @param glide The Glide singleton that is in the process of being initialized.
    * @param registry An {@link com.bumptech.glide.Registry} to use to register components.
    */
-  void registerComponents(Context context, Registry registry);
+  void registerComponents(Context context, Glide glide, Registry registry);
 }
diff --git a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
index 29bd3af62..1cc3bba81 100644
--- a/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/EncoderRegistry.java
@@ -7,7 +7,7 @@
 import java.util.List;
 
 /**
- * Contains an unordered list of {@link Encoder}s capable of encoding arbitrary data types.
+ * Contains an ordered list of {@link Encoder}s capable of encoding arbitrary data types.
  */
 public class EncoderRegistry {
   // TODO: This registry should probably contain a put, rather than a list.
@@ -24,10 +24,14 @@
     return null;
   }
 
-  public synchronized <T> void add(Class<T> dataClass, Encoder<T> encoder) {
+  public synchronized <T> void append(Class<T> dataClass, Encoder<T> encoder) {
     encoders.add(new Entry<>(dataClass, encoder));
   }
 
+  public synchronized <T> void prepend(Class<T> dataClass, Encoder<T> encoder) {
+    encoders.add(0, new Entry<>(dataClass, encoder));
+  }
+
   private static final class Entry<T> {
     private final Class<T> dataClass;
     @Synthetic final Encoder<T> encoder;
diff --git a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
index e096cc759..fa58e81e8 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ResourceEncoderRegistry.java
@@ -1,23 +1,29 @@
 package com.bumptech.glide.provider;
 
 import android.support.annotation.Nullable;
+
 import com.bumptech.glide.load.ResourceEncoder;
 import com.bumptech.glide.util.Synthetic;
+
 import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Contains an unordered list of {@link ResourceEncoder}s capable of encoding arbitrary resource
+ * Contains an ordered list of {@link ResourceEncoder}s capable of encoding arbitrary resource
  * types.
  */
 public class ResourceEncoderRegistry {
   // TODO: this should probably be a put.
   final List<Entry<?>> encoders = new ArrayList<>();
 
-  public synchronized <Z> void add(Class<Z> resourceClass, ResourceEncoder<Z> encoder) {
+  public synchronized <Z> void append(Class<Z> resourceClass, ResourceEncoder<Z> encoder) {
     encoders.add(new Entry<>(resourceClass, encoder));
   }
 
+  public synchronized <Z> void prepend(Class<Z> resourceClass, ResourceEncoder<Z> encoder) {
+    encoders.add(0, new Entry<>(resourceClass, encoder));
+  }
+
   @SuppressWarnings("unchecked")
   @Nullable
   public synchronized <Z> ResourceEncoder<Z> get(Class<Z> resourceClass) {
diff --git a/library/src/main/java/com/bumptech/glide/request/Request.java b/library/src/main/java/com/bumptech/glide/request/Request.java
index ffa21d02f..7427ca434 100644
--- a/library/src/main/java/com/bumptech/glide/request/Request.java
+++ b/library/src/main/java/com/bumptech/glide/request/Request.java
@@ -57,4 +57,18 @@
    * Recycles the request object and releases its resources.
    */
   void recycle();
+
+  /**
+   * Returns {@code true} if this {@link Request} is equivalent to the given {@link Request} (has
+   * all of the same options and sizes).
+   *
+   * <p>This method is identical to {@link #equals(Object)} except that it's specific to
+   * {@link Request} subclasses. We do not use {@link #equals(Object)} directly because we track
+   * {@link Request}s in collections like {@link java.util.Set} and it's perfectly legitimate to
+   * have two different {@link Request} objects for two different
+   * {@link com.bumptech.glide.request.target.Target}s (for example). Using a similar but different
+   * method let's us selectively compare {@link Request} objects to each other when it's useful in
+   * specific scenarios.
+   */
+  boolean isEquivalentTo(Request other);
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
index 4ba29827f..e5a1ec152 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestFutureTarget.java
@@ -99,7 +99,7 @@ public synchronized boolean isCancelled() {
 
   @Override
   public synchronized boolean isDone() {
-    return isCancelled || resultReceived;
+    return isCancelled || resultReceived || loadFailed;
   }
 
   @Override
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestListener.java b/library/src/main/java/com/bumptech/glide/request/RequestListener.java
index 0644473d2..a6156b495 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestListener.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestListener.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.request;
 
+import android.graphics.drawable.Drawable;
 import android.support.annotation.Nullable;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.GlideException;
@@ -13,9 +14,10 @@
 public interface RequestListener<R> {
 
   /**
-   * Called when an exception occurs during a load. Will only be called if we currently want to
-   * display an image for the given model in the given target. It is recommended to create a single
-   * instance per activity/fragment rather than instantiate a new object for each call to {@code
+   * Called when an exception occurs during a load, immediately before
+   * {@link Target#onLoadFailed(Drawable)}. Will only be called if we currently want to display an
+   * image for the given model in the given target. It is recommended to create a single instance
+   * per activity/fragment rather than instantiate a new object for each call to {@code
    * Glide.load()} to avoid object churn.
    *
    * <p> It is safe to reload this or a different model or change what is displayed in the target at
@@ -31,7 +33,7 @@
    * </p>
    *
    * <p> Note - if you want to reload this or any other model after an exception, you will need to
-   * include all relevant builder calls (like centerCrop, placeholder etc). </p>
+   * include all relevant builder calls (like centerCrop, placeholder etc).
    *
    * @param e               The maybe {@code null} exception containing information about why the
    *                        request failed.
@@ -45,7 +47,7 @@ boolean onLoadFailed(@Nullable GlideException e, Object model, Target<R> target,
       boolean isFirstResource);
 
   /**
-   * Called when a load completes successfully, immediately after {@link
+   * Called when a load completes successfully, immediately before {@link
    * Target#onResourceReady(Object, com.bumptech.glide.request.transition.Transition)}.
    *
    * @param resource          The resource that was loaded for the target.
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index e796c58cb..a0cc26314 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -1,6 +1,5 @@
 package com.bumptech.glide.request;
 
-import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
@@ -10,10 +9,12 @@
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.MultiTransformation;
 import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.model.stream.HttpGlideUrlLoader;
 import com.bumptech.glide.load.resource.bitmap.BitmapDrawableTransformation;
 import com.bumptech.glide.load.resource.bitmap.BitmapEncoder;
 import com.bumptech.glide.load.resource.bitmap.CenterCrop;
@@ -59,43 +60,63 @@
   private static final int USE_UNLIMITED_SOURCE_GENERATORS_POOL = 1 << 18;
   private static final int ONLY_RETRIEVE_FROM_CACHE = 1 << 19;
 
+  @Nullable
   private static RequestOptions skipMemoryCacheTrueOptions;
+  @Nullable
   private static RequestOptions skipMemoryCacheFalseOptions;
+  @Nullable
   private static RequestOptions fitCenterOptions;
+  @Nullable
   private static RequestOptions centerInsideOptions;
+  @Nullable
   private static RequestOptions centerCropOptions;
+  @Nullable
   private static RequestOptions circleCropOptions;
+  @Nullable
   private static RequestOptions noTransformOptions;
+  @Nullable
   private static RequestOptions noAnimationOptions;
 
   private int fields;
   private float sizeMultiplier = 1f;
+  @NonNull
   private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.AUTOMATIC;
+  @NonNull
   private Priority priority = Priority.NORMAL;
+  @Nullable
   private Drawable errorPlaceholder;
   private int errorId;
+  @Nullable
   private Drawable placeholderDrawable;
   private int placeholderId;
   private boolean isCacheable = true;
   private int overrideHeight = RequestOptions.UNSET;
   private int overrideWidth = RequestOptions.UNSET;
+  @NonNull
   private Key signature = EmptySignature.obtain();
   private boolean isTransformationRequired;
   private boolean isTransformationAllowed = true;
+  @Nullable
   private Drawable fallbackDrawable;
   private int fallbackId;
+  @NonNull
   private Options options = new Options();
+  @NonNull
   private Map<Class<?>, Transformation<?>> transformations = new HashMap<>();
+  @NonNull
   private Class<?> resourceClass = Object.class;
   private boolean isLocked;
+  @Nullable
   private Resources.Theme theme;
   private boolean isAutoCloneEnabled;
   private boolean useUnlimitedSourceGeneratorsPool;
   private boolean onlyRetrieveFromCache;
+  private boolean isScaleOnlyOrNoTransform = true;
 
   /**
    * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions sizeMultiplierOf(float sizeMultiplier) {
     return new RequestOptions().sizeMultiplier(sizeMultiplier);
   }
@@ -110,6 +131,7 @@ public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy disk
   /**
    * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions priorityOf(@NonNull Priority priority) {
     return new RequestOptions().priority(priority);
   }
@@ -162,6 +184,7 @@ public static RequestOptions skipMemoryCacheOf(boolean skipMemoryCache) {
   /**
    * Returns a {@link RequestOptions} object with {@link #override(int, int)}} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions overrideOf(int width, int height) {
     return new RequestOptions().override(width, height);
   }
@@ -170,6 +193,7 @@ public static RequestOptions overrideOf(int width, int height) {
    * Returns a {@link RequestOptions} with {@link #override(int, int)} set where both the width and
    * height are the given size.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions overrideOf(int size) {
     return overrideOf(size, size);
   }
@@ -196,6 +220,7 @@ public static RequestOptions fitCenterTransform() {
   /**
    * Returns a {@link RequestOptions} object with {@link #centerInside()} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions centerInsideTransform() {
     if (centerInsideOptions == null) {
       centerInsideOptions = new RequestOptions()
@@ -208,6 +233,7 @@ public static RequestOptions centerInsideTransform() {
   /**
    * Returns a {@link RequestOptions} object with {@link #centerCrop()} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions centerCropTransform() {
     if (centerCropOptions == null) {
       centerCropOptions = new RequestOptions()
@@ -220,6 +246,7 @@ public static RequestOptions centerCropTransform() {
   /**
    * Returns a {@link RequestOptions} object with {@link RequestOptions#circleCrop()} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions circleCropTransform() {
     if (circleCropOptions == null) {
       circleCropOptions = new RequestOptions()
@@ -229,37 +256,18 @@ public static RequestOptions circleCropTransform() {
     return circleCropOptions;
   }
 
-  /**
-   * Returns a {@link RequestOptions} object with {@link #transform(Transformation)} set.
-   *
-   * @deprecated Use {@link #bitmapTransform(Transformation)}.
-   */
-  @Deprecated
-  public static RequestOptions bitmapTransform(
-      Context context, @NonNull Transformation<Bitmap> transformation) {
-    return bitmapTransform(transformation);
-  }
-
   /**
    * Returns a {@link RequestOptions} object with {@link #transform(Transformation)} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
     return new RequestOptions().transform(transformation);
   }
 
-  /**
-   * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
-   *
-   * @deprecated use {@link #noTransformation()}
-   */
-  @Deprecated
-  public static RequestOptions noTransform() {
-    return noTransformation();
-  }
-
   /**
    * Returns a {@link RequestOptions} object with {@link #dontTransform()} set.
    */
+  @SuppressWarnings("WeakerAccess")
   public static RequestOptions noTransformation() {
     if (noTransformOptions == null) {
       noTransformOptions = new RequestOptions()
@@ -287,6 +295,7 @@ public static RequestOptions decodeTypeOf(@NonNull Class<?> resourceClass) {
   /**
    * Returns a {@link RequestOptions} object with {@link #format(DecodeFormat)} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions formatOf(@NonNull DecodeFormat format) {
     return new RequestOptions().format(format);
   }
@@ -294,6 +303,7 @@ public static RequestOptions formatOf(@NonNull DecodeFormat format) {
   /**
    * Returns a {@link RequestOptions} object with {@link #frame(long)} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions frameOf(long frameTimeMicros) {
     return new RequestOptions().frame(frameTimeMicros);
   }
@@ -301,14 +311,23 @@ public static RequestOptions frameOf(long frameTimeMicros) {
   /**
    * Returns a {@link RequestOptions} object with {@link #downsample(DownsampleStrategy)} set.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
     return new RequestOptions().downsample(strategy);
   }
 
+  /**
+   * Returns a {@link RequestOptions} object with {@link #timeout(int)} set.
+   */
+  public static RequestOptions timeoutOf(int timeout) {
+    return new RequestOptions().timeout(timeout);
+  }
+
   /**
    * Returns a {@link com.bumptech.glide.request.RequestOptions} with {@link
    * #encodeQuality(int)} called with the given quality.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions encodeQualityOf(int quality) {
     return new RequestOptions().encodeQuality(quality);
   }
@@ -317,6 +336,7 @@ public static RequestOptions encodeQualityOf(int quality) {
    * Returns a {@link com.bumptech.glide.request.RequestOptions} with {@link
    * #encodeFormat(android.graphics.Bitmap.CompressFormat)} called with the given format.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
     return new RequestOptions().encodeFormat(format);
   }
@@ -325,6 +345,7 @@ public static RequestOptions encodeFormatOf(@NonNull Bitmap.CompressFormat forma
    * Returns a new {@link com.bumptech.glide.request.RequestOptions} with {@link #dontAnimate()}
    * called.
    */
+  @SuppressWarnings("WeakerAccess") // Public API
   public static RequestOptions noAnimation() {
     if (noAnimationOptions == null) {
       noAnimationOptions = new RequestOptions()
@@ -659,7 +680,7 @@ public RequestOptions clone() {
       result.transformations.putAll(transformations);
       result.isLocked = false;
       result.isAutoCloneEnabled = false;
-      return (RequestOptions) result;
+      return result;
     } catch (CloneNotSupportedException e) {
       throw new RuntimeException(e);
     }
@@ -714,6 +735,20 @@ public RequestOptions encodeQuality(int quality) {
     return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
   }
 
+  /**
+   * Sets the time position of the frame to extract from a video.
+   *
+   * <p>This is a component option specific to {@link VideoBitmapDecoder}. If the default video
+   * decoder is replaced or skipped because of your configuration, this option may be ignored.
+   *
+   * @see VideoBitmapDecoder#TARGET_FRAME
+   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
+   *                        Android framework implementation return a representative frame.
+   */
+  public RequestOptions frame(long frameTimeMicros) {
+    return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);
+  }
+
   /**
    * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using
    * {@link Downsampler}.
@@ -723,29 +758,63 @@ public RequestOptions encodeQuality(int quality) {
    * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to
    * ignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the
    * image has alpha).
+   *
+   * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
+   * is replaced or skipped because of your configuration, this option may be ignored.
+   *
+   * @see Downsampler#DECODE_FORMAT
    */
   public RequestOptions format(@NonNull DecodeFormat format) {
     return set(Downsampler.DECODE_FORMAT, Preconditions.checkNotNull(format));
   }
 
   /**
-   * Sets the time position of the frame to extract from a video.
+   * Disables the use of {@link android.graphics.Bitmap.Config#HARDWARE} in {@link Downsampler} to
+   * avoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled,
+   * drawing to {@link android.graphics.Canvas}s backed by {@link Bitmap}s etc.
    *
-   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
-   *                        Android framework implementation return a representative frame.
+   * <p>It's almost never safe to set {@link Downsampler#ALLOW_HARDWARE_CONFIG} to {@code true} so
+   * we only provide a way to disable hardware configs entirely. If no option is set for
+   * {@link Downsampler#ALLOW_HARDWARE_CONFIG}, Glide will set the value per request based on
+   * whether or not a {@link Transformation} is applied and if one is, the type of
+   * {@link Transformation} applied. Built in transformations like {@link FitCenter} and
+   * {@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.CenterOutside} can safely use
+   * {@link android.graphics.Bitmap.Config#HARDWARE} because they can be entirely replaced by
+   * scaling within {@link Downsampler}. {@link Transformation}s like {@link #circleCrop()} that
+   * can't be replicated by {@link Downsampler} cannot use {@link Bitmap.Config#HARDWARE} because
+   * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
+   * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
    */
-  public RequestOptions frame(long frameTimeMicros) {
-    return set(VideoBitmapDecoder.TARGET_FRAME, frameTimeMicros);
+  public RequestOptions disallowHardwareConfig() {
+    return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
   }
 
   /**
    * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using
    * {@link Downsampler}.
+   *
+   * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
+   * is replaced or skipped because of your configuration, this option may be ignored.
    */
   public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
     return set(Downsampler.DOWNSAMPLE_STRATEGY, Preconditions.checkNotNull(strategy));
   }
 
+  /**
+   * Sets the read and write timeout for the http requests used to load the image.
+   *
+   * <p>This is a component option specific to Glide's default networking library and
+   * {@link com.bumptech.glide.load.model.stream.HttpGlideUrlLoader}. If you use any other
+   * networking library including Glide's Volley or OkHttp integration libraries, this option will
+   * be ignored.
+   *
+   * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
+   * @param timeoutMs The read and write timeout in milliseconds.
+   */
+  public RequestOptions timeout(int timeoutMs) {
+    return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
+  }
+
   /**
    * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types, and
    * ignores unknown types.
@@ -759,23 +828,6 @@ public RequestOptions optionalCenterCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
   }
 
-  /**
-   * Applies {@link CenterCrop} to all default types and
-   * throws an exception if asked to transform an unknown type.
-   *
-   * <p>this will override previous calls to {@link #dontTransform()}.
-   *
-   * @param context any {@link Context}.
-   * @see #transform(Class, Transformation)
-   * @see #optionalCenterCrop()
-   *
-   * @deprecated Use {@link #centerCrop()}.
-   */
-  @Deprecated
-  public RequestOptions centerCrop(@SuppressWarnings("unused") Context context) {
-    return centerCrop();
-  }
-
   /**
    * Applies {@link CenterCrop} to all default types and
    * throws an exception if asked to transform an unknown type.
@@ -790,72 +842,61 @@ public RequestOptions centerCrop() {
   }
 
   /**
-   * Applies {@link com.bumptech.glide.load.resource.bitmap.FitCenter} to all default types, and
-   * ignores unknown types.
    *
-   * <p>This will override previous calls to {@link #dontTransform()}.
+   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
+   * image types, and ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
    *
    * @see #optionalTransform(Class, Transformation)
    * @see #fitCenter()
    */
   public RequestOptions optionalFitCenter() {
-    return optionalTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
+    return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
   }
 
   /**
-   * Applies {@link FitCenter} to all default types and
-   * throws an exception if asked to transform an unknown type.
+   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
+   * image types, and throws an exception if asked to transform an unknown
+   * type.
    *
-   * <p>This will override previous calls to {@link #dontTransform()}.
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
    *
    * @see #transform(Class, Transformation)
    * @see #optionalFitCenter()
    */
   public RequestOptions fitCenter() {
-    return transform(DownsampleStrategy.FIT_CENTER, new FitCenter());
+    return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
   }
 
   /**
-   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types, and
-   * ignores unknown types.
+   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types,
+   * {@link DownsampleStrategy#CENTER_INSIDE} to image types, and ignores unknown types.
    *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param context Any {@link Context}.
-   * @see #optionalTransform(Class, Transformation)
-   * @see #centerInside()
-   *
-   * @deprecated Use {@link #optionalCenterInside()}
-   */
-  @Deprecated
-  public RequestOptions optionalCenterInside(@SuppressWarnings("unused") Context context) {
-    return optionalCenterInside();
-  }
-
-  /**
-   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types, and
-   * ignores unknown types.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
    *
    * @see #optionalTransform(Class, Transformation)
    * @see #centerInside()
    */
   public RequestOptions optionalCenterInside() {
-    return optionalTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
+    return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
   }
 
   /**
-   * Applies {@link CenterInside} to all default types and
-   * throws an exception if asked to transform an unknown type.
+   * Applies {@link CenterInside} to all default types, {@link DownsampleStrategy#CENTER_INSIDE} to
+   * image types and throws an exception if asked to transform an unknown type.
    *
-   * <p>This will override previous calls to {@link #dontTransform()}.
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
    *
    * @see #transform(Class, Transformation)
    * @see #optionalCenterInside()
    */
   public RequestOptions centerInside() {
-    return transform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
+    return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
   }
 
   /**
@@ -870,23 +911,6 @@ public RequestOptions optionalCircleCrop() {
     return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
   }
 
-  /**
-   * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform
-   * an unknown type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param context Any {@link Context}.
-   * @see #transform(Class, Transformation)
-   * @see #optionalCenterCrop()
-   *
-   * @deprecated Use {@link #circleCrop()}.
-   */
-  @Deprecated
-  public RequestOptions circleCrop(@SuppressWarnings("unused") Context context) {
-    return circleCrop();
-  }
-
   /**
    * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform
    * an unknown type.
@@ -924,6 +948,26 @@ final RequestOptions transform(DownsampleStrategy downsampleStrategy,
     return transform(transformation);
   }
 
+  private RequestOptions scaleOnlyTransform(
+      DownsampleStrategy strategy, Transformation<Bitmap> transformation) {
+    return scaleOnlyTransform(strategy, transformation, true /*isTransformationRequired*/);
+  }
+
+  private RequestOptions optionalScaleOnlyTransform(
+      DownsampleStrategy strategy, Transformation<Bitmap> transformation) {
+    return scaleOnlyTransform(strategy, transformation, false /*isTransformationRequired*/);
+  }
+
+  private RequestOptions scaleOnlyTransform(
+      DownsampleStrategy strategy,
+      Transformation<Bitmap> transformation,
+      boolean isTransformationRequired) {
+    RequestOptions result = isTransformationRequired
+          ? transform(strategy, transformation) : optionalTransform(strategy, transformation);
+    result.isScaleOnlyOrNoTransform = true;
+    return result;
+  }
+
   /**
    * Applies the given {@link Transformation} for
    * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
@@ -933,8 +977,7 @@ final RequestOptions transform(DownsampleStrategy downsampleStrategy,
    *
    * <p>This will override previous calls to {@link #dontTransform()}.
    *
-   * @param transformation Any {@link Transformation} for
-   *                       {@link Bitmap}s.
+   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
    * @see #optionalTransform(Transformation)
    * @see #optionalTransform(Class, Transformation)
    */
@@ -950,23 +993,28 @@ public RequestOptions transform(@NonNull Transformation<Bitmap> transformation)
   }
 
   /**
-   * Applies the given {@link Transformation} for
+   * Applies the given {@link Transformation}s in the given order for
    * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
    * {@link android.graphics.drawable.BitmapDrawable}, and
-   * {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and ignores unknown types.
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
+   * and throws an exception if asked to transform an unknown type.
    *
    * <p>This will override previous calls to {@link #dontTransform()}.
    *
-   * @param context        Any {@link Context}.
-   * @param transformation Any {@link Transformation} for
-   *                       {@link Bitmap}s.
-   * @see #transform(Class, Transformation)
-   *
-   * @deprecated Use {@link #optionalTransform(Transformation)}
+   * @param transformations One or more {@link Transformation}s for {@link Bitmap}s.
+   * @see #optionalTransform(Transformation)
+   * @see #optionalTransform(Class, Transformation)
    */
-  @Deprecated
-  public RequestOptions optionalTransform(Context context, Transformation<Bitmap> transformation) {
-    return optionalTransform(transformation);
+  @SuppressWarnings("unchecked")
+  public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
+    if (isAutoCloneEnabled) {
+      return clone().transforms(transformations);
+    }
+
+    optionalTransform(new MultiTransformation<>(transformations));
+    isTransformationRequired = true;
+    fields |= TRANSFORMATION_REQUIRED;
+    return selfOrThrowIfLocked();
   }
 
   /**
@@ -977,8 +1025,7 @@ public RequestOptions optionalTransform(Context context, Transformation<Bitmap>
    *
    * <p>This will override previous calls to {@link #dontTransform()}.
    *
-   * @param transformation Any {@link Transformation} for
-   *                       {@link Bitmap}s.
+   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
    * @see #transform(Transformation)
    * @see #transform(Class, Transformation)
    */
@@ -1024,6 +1071,9 @@ public RequestOptions optionalTransform(Transformation<Bitmap> transformation) {
     fields |= TRANSFORMATION;
     isTransformationAllowed = true;
     fields |= TRANSFORMATION_ALLOWED;
+    // Always set to false here. Known scale only transformations will call this method and then
+    // set isScaleOnlyOrNoTransform to true immediately after.
+    isScaleOnlyOrNoTransform = false;
     return selfOrThrowIfLocked();
   }
 
@@ -1065,6 +1115,7 @@ public RequestOptions dontTransform() {
     fields &= ~TRANSFORMATION_REQUIRED;
     isTransformationAllowed = false;
     fields |= TRANSFORMATION_ALLOWED;
+    isScaleOnlyOrNoTransform = true;
     return selfOrThrowIfLocked();
   }
 
@@ -1144,6 +1195,7 @@ public RequestOptions apply(RequestOptions other) {
     }
     if (isSet(other.fields, TRANSFORMATION)) {
       transformations.putAll(other.transformations);
+      isScaleOnlyOrNoTransform = other.isScaleOnlyOrNoTransform;
     }
     if (isSet(other.fields, ONLY_RETRIEVE_FROM_CACHE)) {
       onlyRetrieveFromCache = other.onlyRetrieveFromCache;
@@ -1155,6 +1207,7 @@ public RequestOptions apply(RequestOptions other) {
       fields &= ~TRANSFORMATION;
       isTransformationRequired = false;
       fields &= ~TRANSFORMATION_REQUIRED;
+      isScaleOnlyOrNoTransform = true;
     }
 
     fields |= other.fields;
@@ -1163,6 +1216,62 @@ public RequestOptions apply(RequestOptions other) {
     return selfOrThrowIfLocked();
   }
 
+
+  @Override
+  public boolean equals(Object o) {
+    if (o instanceof RequestOptions) {
+      RequestOptions other = (RequestOptions) o;
+      return Float.compare(other.sizeMultiplier, sizeMultiplier) == 0
+          && errorId == other.errorId
+          && Util.bothNullOrEqual(errorPlaceholder, other.errorPlaceholder)
+          && placeholderId == other.placeholderId
+          && Util.bothNullOrEqual(placeholderDrawable, other.placeholderDrawable)
+          && fallbackId == other.fallbackId
+          && Util.bothNullOrEqual(fallbackDrawable, other.fallbackDrawable)
+          && isCacheable == other.isCacheable
+          && overrideHeight == other.overrideHeight
+          && overrideWidth == other.overrideWidth
+          && isTransformationRequired == other.isTransformationRequired
+          && isTransformationAllowed == other.isTransformationAllowed
+          && useUnlimitedSourceGeneratorsPool == other.useUnlimitedSourceGeneratorsPool
+          && onlyRetrieveFromCache == other.onlyRetrieveFromCache
+          && diskCacheStrategy.equals(other.diskCacheStrategy)
+          && priority == other.priority
+          && options.equals(other.options)
+          && transformations.equals(other.transformations)
+          && resourceClass.equals(other.resourceClass)
+          && Util.bothNullOrEqual(signature, other.signature)
+          && Util.bothNullOrEqual(theme, other.theme);
+    }
+    return false;
+  }
+
+  @Override
+  public int hashCode() {
+    int hashCode = Util.hashCode(sizeMultiplier);
+    hashCode = Util.hashCode(errorId, hashCode);
+    hashCode = Util.hashCode(errorPlaceholder, hashCode);
+    hashCode = Util.hashCode(placeholderId, hashCode);
+    hashCode = Util.hashCode(placeholderDrawable, hashCode);
+    hashCode = Util.hashCode(fallbackId, hashCode);
+    hashCode = Util.hashCode(fallbackDrawable, hashCode);
+    hashCode = Util.hashCode(isCacheable, hashCode);
+    hashCode = Util.hashCode(overrideHeight, hashCode);
+    hashCode = Util.hashCode(overrideWidth, hashCode);
+    hashCode = Util.hashCode(isTransformationRequired, hashCode);
+    hashCode = Util.hashCode(isTransformationAllowed, hashCode);
+    hashCode = Util.hashCode(useUnlimitedSourceGeneratorsPool, hashCode);
+    hashCode = Util.hashCode(onlyRetrieveFromCache, hashCode);
+    hashCode = Util.hashCode(diskCacheStrategy, hashCode);
+    hashCode = Util.hashCode(priority, hashCode);
+    hashCode = Util.hashCode(options, hashCode);
+    hashCode = Util.hashCode(transformations, hashCode);
+    hashCode = Util.hashCode(resourceClass, hashCode);
+    hashCode = Util.hashCode(signature, hashCode);
+    hashCode = Util.hashCode(theme, hashCode);
+    return hashCode;
+  }
+
   /**
    * Throws if any further mutations are attempted.
    *
@@ -1172,7 +1281,7 @@ public RequestOptions apply(RequestOptions other) {
   public RequestOptions lock() {
     isLocked = true;
     // This is the only place we should not check locked.
-    return (RequestOptions) this;
+    return this;
   }
 
   /**
@@ -1197,61 +1306,82 @@ private RequestOptions selfOrThrowIfLocked() {
     if (isLocked) {
       throw new IllegalStateException("You cannot modify locked RequestOptions, consider clone()");
     }
-    return (RequestOptions) this;
+    return this;
+  }
+
+  protected boolean isAutoCloneEnabled() {
+    return isAutoCloneEnabled;
   }
 
+  @NonNull
   public final Map<Class<?>, Transformation<?>> getTransformations() {
     return transformations;
   }
 
+  @SuppressWarnings("WeakerAccess")
   public final boolean isTransformationRequired() {
     return isTransformationRequired;
   }
 
+  @NonNull
   public final Options getOptions() {
     return options;
   }
 
+  @NonNull
   public final Class<?> getResourceClass() {
     return resourceClass;
   }
 
+  @NonNull
   public final DiskCacheStrategy getDiskCacheStrategy() {
     return diskCacheStrategy;
   }
 
+  @Nullable
+  @SuppressWarnings("WeakerAccess")
   public final Drawable getErrorPlaceholder() {
     return errorPlaceholder;
   }
 
+  @SuppressWarnings("WeakerAccess")
   public final int getErrorId() {
     return errorId;
   }
 
+  @SuppressWarnings("WeakerAccess")
   public final int getPlaceholderId() {
     return placeholderId;
   }
 
+  @Nullable
+  @SuppressWarnings("WeakerAccess")
   public final Drawable getPlaceholderDrawable() {
     return placeholderDrawable;
   }
 
+  @SuppressWarnings("WeakerAccess")
   public final int getFallbackId() {
     return fallbackId;
   }
 
+  @Nullable
+  @SuppressWarnings("WeakerAccess")
   public final Drawable getFallbackDrawable() {
     return fallbackDrawable;
   }
 
+  @Nullable
   public final Resources.Theme getTheme() {
     return theme;
   }
 
+  @SuppressWarnings("WeakerAccess")
   public final boolean isMemoryCacheable() {
     return isCacheable;
   }
 
+  @NonNull
   public final Key getSignature() {
     return signature;
   }
@@ -1260,6 +1390,7 @@ public final boolean isPrioritySet() {
     return isSet(PRIORITY);
   }
 
+  @NonNull
   public final Priority getPriority() {
     return priority;
   }
@@ -1280,6 +1411,10 @@ public final float getSizeMultiplier() {
     return sizeMultiplier;
   }
 
+  public boolean isScaleOnlyOrNoTransform() {
+    return isScaleOnlyOrNoTransform;
+  }
+
   private boolean isSet(int flag) {
     return isSet(fields, flag);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index 9d06f3ffc..6828e062d 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -3,6 +3,7 @@
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.DrawableRes;
+import android.support.annotation.Nullable;
 import android.support.v4.content.res.ResourcesCompat;
 import android.support.v4.util.Pools;
 import android.support.v7.content.res.AppCompatResources;
@@ -80,11 +81,12 @@
     PAUSED,
   }
 
-  private final String tag = String.valueOf(hashCode());
+  private final String tag = String.valueOf(super.hashCode());
   private final StateVerifier stateVerifier = StateVerifier.newInstance();
 
   private RequestCoordinator requestCoordinator;
   private GlideContext glideContext;
+  @Nullable
   private Object model;
   private Class<R> transcodeClass;
   private RequestOptions requestOptions;
@@ -215,6 +217,24 @@ public void begin() {
       return;
     }
 
+    if (status == Status.RUNNING) {
+      throw new IllegalArgumentException("Cannot restart a running request");
+    }
+
+    // If we're restarted after we're complete (usually via something like a notifyDataSetChanged
+    // that starts an identical request into the same Target or View), we can simply use the
+    // resource and size we retrieved the last time around and skip obtaining a new size, starting a
+    // new load etc. This does mean that users who want to restart a load because they expect that
+    // the view size has changed will need to explicitly clear the View or Target before starting
+    // the new load.
+    if (status == Status.COMPLETE) {
+      onResourceReady(resource, DataSource.MEMORY_CACHE);
+      return;
+    }
+
+    // Restarts for requests that are neither complete nor running can be treated as new requests
+    // and can run again from the beginning.
+
     status = Status.WAITING_FOR_SIZE;
     if (Util.isValidDimensions(overrideWidth, overrideHeight)) {
       onSizeReady(overrideWidth, overrideHeight);
@@ -381,11 +401,14 @@ private void setErrorPlaceholder() {
     if (model == null) {
       error = getFallbackDrawable();
     }
-    // Either the model isn't null, or there was no fallback drawable set. Either way we should show
-    // the error Drawable.
+    // Either the model isn't null, or there was no fallback drawable set.
     if (error == null) {
       error = getErrorDrawable();
     }
+    // The model isn't null, no fallback drawable was set or no error drawable was set.
+    if (error == null) {
+      error = getPlaceholderDrawable();
+    }
     target.onLoadFailed(error);
   }
 
@@ -422,6 +445,7 @@ public void onSizeReady(int width, int height) {
         requestOptions.getDiskCacheStrategy(),
         requestOptions.getTransformations(),
         requestOptions.isTransformationRequired(),
+        requestOptions.isScaleOnlyOrNoTransform(),
         requestOptions.getOptions(),
         requestOptions.isMemoryCacheable(),
         requestOptions.getUseUnlimitedSourceGeneratorsPool(),
@@ -548,6 +572,20 @@ private void onLoadFailed(GlideException e, int maxLogLevel) {
     }
   }
 
+  @Override
+  public boolean isEquivalentTo(Request o) {
+    if (o instanceof SingleRequest) {
+      SingleRequest that = (SingleRequest) o;
+      return overrideWidth == that.overrideWidth
+          && overrideHeight == that.overrideHeight
+          && Util.bothNullOrEqual(model, that.model)
+          && transcodeClass.equals(that.transcodeClass)
+          && requestOptions.equals(that.requestOptions)
+          && priority == that.priority;
+    }
+    return false;
+  }
+
   private void logV(String message) {
     Log.v(TAG, message + " this: " + tag);
   }
diff --git a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
index 996f41ad3..6b62270e2 100644
--- a/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
+++ b/library/src/main/java/com/bumptech/glide/request/ThumbnailRequestCoordinator.java
@@ -159,4 +159,14 @@ public void recycle() {
     full.recycle();
     thumb.recycle();
   }
+
+  @Override
+  public boolean isEquivalentTo(Request o) {
+    if (o instanceof ThumbnailRequestCoordinator) {
+      ThumbnailRequestCoordinator that = (ThumbnailRequestCoordinator) o;
+      return (full == null ? that.full == null : full.isEquivalentTo(that.full))
+          && (thumb == null ? that.thumb == null : thumb.isEquivalentTo(that.thumb));
+    }
+    return false;
+  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
index 0dd3d4f2e..335c00000 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/ViewTarget.java
@@ -1,7 +1,6 @@
 package com.bumptech.glide.request.target;
 
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.support.annotation.Nullable;
 import android.util.Log;
 import android.view.View;
@@ -178,7 +177,11 @@ public static void setTagId(int tagId) {
     }
 
     private void notifyCbs(int width, int height) {
-      for (SizeReadyCallback cb : cbs) {
+      // One or more callbacks may trigger the removal of one or more additional callbacks, so we
+      // need a copy of the list to avoid a concurrent modification exception. One place this
+      // happens is when a full request completes from the in memory cache while its thumbnail is
+      // still being loaded asynchronously. See #2237.
+      for (SizeReadyCallback cb : new ArrayList<>(cbs)) {
         cb.onSizeReady(width, height);
       }
     }
@@ -219,6 +222,12 @@ void getSize(SizeReadyCallback cb) {
       }
     }
 
+    /**
+     * The callback may be called anyway if it is removed by another {@link SizeReadyCallback} or
+     * otherwise removed while we're notifying the list of callbacks.
+     *
+     * <p>See #2237.
+     */
     void removeCallback(SizeReadyCallback cb) {
       cbs.remove(cb);
     }
@@ -238,23 +247,44 @@ void clearCallbacksAndListener() {
       cbs.clear();
     }
 
-    private boolean isViewStateAndSizeValid(int width, int height) {
-      return isViewStateValid() && isSizeValid(width) && isSizeValid(height);
+    private boolean isViewStateAndSizeValid(int currentWidth, int currentHeight) {
+      LayoutParams params = view.getLayoutParams();
+
+      int paramWidth;
+      int paramHeight;
+      if (params == null) {
+        paramWidth = 0;
+        paramHeight = 0;
+      } else {
+        paramWidth = params.width;
+        paramHeight = params.height;
+      }
+      return isDimensionValid(paramWidth, currentWidth)
+          && isDimensionValid(paramHeight, currentHeight);
     }
 
-    private boolean isViewStateValid() {
-      // We consider the view state as valid if the view has
-      // non-null layout params and a non-zero layout width and height.
-      if (view.getLayoutParams() != null
-          && view.getLayoutParams().width > 0
-          && view.getLayoutParams().height > 0) {
+    private boolean isDimensionValid(int layoutParam, int dimen) {
+      // If the layout parameter is a fixed size and the padding adjusted parameter (dimen in this
+      // case) is valid, we can trust that the size won't change due to a layout pass.
+      if (layoutParam > 0 && dimen > 0) {
         return true;
       }
 
-      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
-        return view.isLaidOut();
+      // SIZE_ORIGINAL is not dependent on a layout pass.
+      if (dimen == Target.SIZE_ORIGINAL) {
+        return true;
       }
-      return !view.isLayoutRequested();
+
+      // TODO: Is this correct? The view's parent could change size after a layout.
+      // We're making an assumption that MATCH_PARENT won't change after it has been set once, so
+      // future layout passes typically won't change it. This probably will break in some cases.
+      if (layoutParam == LayoutParams.MATCH_PARENT && dimen > 0) {
+        return true;
+      }
+
+      // We can trust a non-zero dimension if no layout pass is pending, otherwise we're going to
+      // have to wait for a layout pass.
+      return dimen > 0 && !view.isLayoutRequested();
     }
 
     private int getTargetHeight() {
@@ -273,27 +303,17 @@ private int getTargetWidth() {
 
     private int getTargetDimen(int viewSize, int paramSize, int paddingSize) {
       int adjustedViewSize = viewSize - paddingSize;
-      if (isSizeValid(adjustedViewSize)) {
-        return adjustedViewSize;
-      }
-
-      if (paramSize == PENDING_SIZE) {
-        return PENDING_SIZE;
-      }
-
       if (paramSize == LayoutParams.WRAP_CONTENT) {
         return SIZE_ORIGINAL;
       } else if (paramSize > 0) {
         return paramSize - paddingSize;
+      } else if (adjustedViewSize > 0) {
+        return adjustedViewSize;
       } else {
         return PENDING_SIZE;
       }
     }
 
-    private boolean isSizeValid(int size) {
-      return size > 0 || size == SIZE_ORIGINAL;
-    }
-
     private static class SizeDeterminerLayoutListener implements ViewTreeObserver
         .OnPreDrawListener {
       private final WeakReference<SizeDeterminer> sizeDeterminerRef;
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
index f81f5c3d0..3aeab1922 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactory.java
@@ -1,9 +1,6 @@
 package com.bumptech.glide.request.transition;
 
-import android.content.Context;
 import android.graphics.drawable.Drawable;
-import android.view.animation.AlphaAnimation;
-import android.view.animation.Animation;
 import com.bumptech.glide.load.DataSource;
 
 /**
@@ -17,66 +14,26 @@
  * the memory cache this factory produces an {@link NoTransition}.
  */
 public class DrawableCrossFadeFactory implements TransitionFactory<Drawable> {
-  private final ViewAnimationFactory<Drawable> viewAnimationFactory;
   private final int duration;
   private final boolean isCrossFadeEnabled;
-  private DrawableCrossFadeTransition firstResourceTransition;
-  private DrawableCrossFadeTransition secondResourceTransition;
+  private DrawableCrossFadeTransition resourceTransition;
 
-  protected DrawableCrossFadeFactory(ViewAnimationFactory<Drawable> viewAnimationFactory,
-      int duration, boolean isCrossFadeEnabled) {
-    this.viewAnimationFactory = viewAnimationFactory;
+  protected DrawableCrossFadeFactory(int duration, boolean isCrossFadeEnabled) {
     this.duration = duration;
     this.isCrossFadeEnabled = isCrossFadeEnabled;
   }
 
   @Override
   public Transition<Drawable> build(DataSource dataSource, boolean isFirstResource) {
-    if (dataSource == DataSource.MEMORY_CACHE) {
-      return NoTransition.get();
-    } else if (isFirstResource) {
-      return getFirstResourceTransition(dataSource);
-    } else {
-      return getSecondResourceTransition(dataSource);
-    }
-  }
-
-  private Transition<Drawable> getFirstResourceTransition(DataSource dataSource) {
-      if (firstResourceTransition == null) {
-        firstResourceTransition = buildTransition(dataSource, true /*isFirstResource*/);
-      }
-      return firstResourceTransition;
+    return dataSource == DataSource.MEMORY_CACHE
+        ? NoTransition.<Drawable>get() : getResourceTransition();
   }
 
-  private Transition<Drawable> getSecondResourceTransition(DataSource dataSource) {
-      if (secondResourceTransition == null) {
-        secondResourceTransition = buildTransition(dataSource, false /*isFirstResource*/);
+  private Transition<Drawable> getResourceTransition() {
+      if (resourceTransition == null) {
+        resourceTransition = new DrawableCrossFadeTransition(duration, isCrossFadeEnabled);
       }
-      return secondResourceTransition;
-  }
-
-  private DrawableCrossFadeTransition buildTransition(DataSource dataSource,
-      boolean isFirstResource) {
-    Transition<Drawable> defaultAnimation =
-        viewAnimationFactory.build(dataSource, isFirstResource);
-    return new DrawableCrossFadeTransition(defaultAnimation, duration, isCrossFadeEnabled);
-  }
-
-  private static final class DefaultViewTransitionAnimationFactory implements
-      ViewTransition.ViewTransitionAnimationFactory {
-
-    private final int durationMillis;
-
-    DefaultViewTransitionAnimationFactory(int durationMillis) {
-      this.durationMillis = durationMillis;
-    }
-
-    @Override
-    public Animation build(Context context) {
-      AlphaAnimation animation = new AlphaAnimation(0f, 1f);
-      animation.setDuration(durationMillis);
-      return animation;
-    }
+      return resourceTransition;
   }
 
   /**
@@ -85,7 +42,6 @@ public Animation build(Context context) {
   public static class Builder {
     private static final int DEFAULT_DURATION_MS = 300;
     private int durationMillis;
-    private ViewAnimationFactory<Drawable> factory;
     private boolean isCrossFadeEnabled;
 
     public Builder() {
@@ -93,16 +49,10 @@ public Builder() {
     }
 
     /**
-     * @param durationMillis The duration of both the default animation when no previous Drawable
-     *     is present and the cross fade animation when a previous Drawable is present. This value
-     *     will not be used by the default animation if {@link #setDefaultAnimationId(int)},
-     *     {@link #setDefaultAnimation(Animation)}, or
-     *     {@link #setDefaultAnimationFactory(ViewAnimationFactory)} is called.
+     * @param durationMillis The duration of the cross fade animation in milliseconds.
      */
     public Builder(int durationMillis) {
       this.durationMillis = durationMillis;
-      factory = new ViewAnimationFactory<>(
-          new DefaultViewTransitionAnimationFactory(durationMillis));
     }
 
     /**
@@ -122,38 +72,8 @@ public Builder setCrossFadeEnabled(boolean isCrossFadeEnabled) {
       return this;
     }
 
-    /**
-     * Sets the resource id of the {@link Animation} to use when no previous {@link Drawable} is
-     * available to animate from.
-     *
-     * <p>Defaults to a simple fade in.
-     */
-    public Builder setDefaultAnimationId(int animationId) {
-      return setDefaultAnimationFactory(new ViewAnimationFactory<Drawable>(animationId));
-    }
-
-    /**
-     * Sets the {@link Animation} to use when no previous {@link Drawable} is available to animate
-     * from.
-     *
-     * <p>It is not safe to use the same {@link Animation} object for multiple animations
-     * simultaneously. Always pass in a new instance to this method.
-     */
-    public Builder setDefaultAnimation(Animation animation) {
-      return setDefaultAnimationFactory(new ViewAnimationFactory<Drawable>(animation));
-    }
-
-    /**
-     * Sets the {@link ViewAnimationFactory} to use to generate animations to animate when no
-     * previous {@link Drawable} is available to animate from.
-     */
-    public Builder setDefaultAnimationFactory(ViewAnimationFactory<Drawable> factory) {
-      this.factory = factory;
-      return this;
-    }
-
     public DrawableCrossFadeFactory build() {
-      return new DrawableCrossFadeFactory(factory, durationMillis, isCrossFadeEnabled);
+      return new DrawableCrossFadeFactory(durationMillis, isCrossFadeEnabled);
     }
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java
index ee1ff46e2..cfdf30b31 100644
--- a/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java
+++ b/library/src/main/java/com/bumptech/glide/request/transition/DrawableCrossFadeTransition.java
@@ -1,5 +1,7 @@
 package com.bumptech.glide.request.transition;
 
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.TransitionDrawable;
 
@@ -11,17 +13,10 @@
  * android.graphics.drawable.TransitionDrawable}.
  */
 public class DrawableCrossFadeTransition implements Transition<Drawable> {
-  private final Transition<Drawable> defaultAnimation;
   private final int duration;
   private final boolean isCrossFadeEnabled;
 
   /**
-   * Constructor that takes a default animation and a duration in milliseconds that the cross fade
-   * animation should last.
-   *
-   * @param defaultAnimation The {@link Transition} to use if there is no previous
-   *                         {@link Drawable} (either a placeholder or previous resource) to
-   *                         transition from.
    * @param duration The duration that the cross fade animation should run if there is something to
    *                 cross fade from when a new {@link android.graphics.drawable.Drawable} is put.
    * @param isCrossFadeEnabled If {@code true}, animates the previous resource's alpha to 0 while
@@ -30,9 +25,8 @@
    *                         alpha at 100. See
    *                         {@link TransitionDrawable#setCrossFadeEnabled(boolean)}.
    */
-  public DrawableCrossFadeTransition(Transition<Drawable> defaultAnimation, int duration,
+  public DrawableCrossFadeTransition(int duration,
       boolean isCrossFadeEnabled) {
-    this.defaultAnimation = defaultAnimation;
     this.duration = duration;
     this.isCrossFadeEnabled = isCrossFadeEnabled;
   }
@@ -51,16 +45,14 @@ public DrawableCrossFadeTransition(Transition<Drawable> defaultAnimation, int du
   @Override
   public boolean transition(Drawable current, ViewAdapter adapter) {
     Drawable previous = adapter.getCurrentDrawable();
-    if (previous != null) {
-      TransitionDrawable transitionDrawable =
-          new TransitionDrawable(new Drawable[] { previous, current });
-      transitionDrawable.setCrossFadeEnabled(isCrossFadeEnabled);
-      transitionDrawable.startTransition(duration);
-      adapter.setDrawable(transitionDrawable);
-      return true;
-    } else {
-      defaultAnimation.transition(current, adapter);
-      return false;
+    if (previous == null) {
+      previous = new ColorDrawable(Color.TRANSPARENT);
     }
+    TransitionDrawable transitionDrawable =
+        new TransitionDrawable(new Drawable[] { previous, current });
+    transitionDrawable.setCrossFadeEnabled(isCrossFadeEnabled);
+    transitionDrawable.startTransition(duration);
+    adapter.setDrawable(transitionDrawable);
+    return true;
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
index 788901575..fca34c71a 100644
--- a/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
+++ b/library/src/main/java/com/bumptech/glide/util/ByteBufferUtil.java
@@ -26,9 +26,14 @@ public static ByteBuffer fromFile(File file) throws IOException {
     RandomAccessFile raf = null;
     FileChannel channel = null;
     try {
+      long fileLength = file.length();
+      // See #2240.
+      if (fileLength > Integer.MAX_VALUE) {
+        throw new IOException("File too large to map into memory");
+      }
       raf = new RandomAccessFile(file, "r");
       channel = raf.getChannel();
-      return channel.map(FileChannel.MapMode.READ_ONLY, 0, file.length()).load();
+      return channel.map(FileChannel.MapMode.READ_ONLY, 0, fileLength).load();
     } finally {
       if (channel != null) {
         try {
@@ -48,6 +53,7 @@ public static ByteBuffer fromFile(File file) throws IOException {
   }
 
   public static void toFile(ByteBuffer buffer, File file) throws IOException {
+    buffer.position(0);
     RandomAccessFile raf = null;
     FileChannel channel = null;
     try {
diff --git a/library/src/main/java/com/bumptech/glide/util/LruCache.java b/library/src/main/java/com/bumptech/glide/util/LruCache.java
index 0d47fd7d7..1311fa176 100644
--- a/library/src/main/java/com/bumptech/glide/util/LruCache.java
+++ b/library/src/main/java/com/bumptech/glide/util/LruCache.java
@@ -55,6 +55,13 @@ protected int getSize(Y item) {
     return 1;
   }
 
+  /**
+   * Returns the number of entries stored in cache.
+   */
+  protected synchronized int getCount() {
+    return cache.size();
+  }
+
   /**
    * A callback called whenever an item is evicted from the cache. Subclasses can override.
    *
diff --git a/library/src/main/java/com/bumptech/glide/util/Util.java b/library/src/main/java/com/bumptech/glide/util/Util.java
index ea66b1126..00cedcece 100644
--- a/library/src/main/java/com/bumptech/glide/util/Util.java
+++ b/library/src/main/java/com/bumptech/glide/util/Util.java
@@ -15,6 +15,8 @@
  * A collection of assorted utility classes.
  */
 public final class Util {
+  private static final int HASH_MULTIPLIER = 31;
+  private static final int HASH_ACCUMULATOR = 17;
   private static final char[] HEX_CHAR_ARRAY = "0123456789abcdef".toCharArray();
   // 32 bytes from sha-256 -> 64 hex chars.
   private static final char[] SHA_256_CHARS = new char[64];
@@ -187,4 +189,33 @@ public static boolean isOnBackgroundThread() {
   public static boolean bothNullOrEqual(Object a, Object b) {
     return a == null ? b == null : a.equals(b);
   }
+
+  public static int hashCode(int value) {
+    return hashCode(value, HASH_ACCUMULATOR);
+  }
+
+  public static int hashCode(int value, int accumulator) {
+    return accumulator * HASH_MULTIPLIER + value;
+  }
+
+  public static int hashCode(float value) {
+    return hashCode(value, HASH_ACCUMULATOR);
+  }
+
+  public static int hashCode(float value, int accumulator) {
+    return hashCode(Float.floatToIntBits(value), accumulator);
+  }
+
+  public static int hashCode(Object object, int accumulator) {
+    return hashCode(object == null ? 0 : object.hashCode(), accumulator);
+  }
+
+  public static int hashCode(boolean value, int accumulator) {
+    return hashCode(value ? 1 : 0, accumulator);
+  }
+
+  public static int hashCode(boolean value) {
+    return hashCode(value, HASH_ACCUMULATOR);
+  }
+
 }
diff --git a/library/src/test/java/com/bumptech/glide/GlideContextTest.java b/library/src/test/java/com/bumptech/glide/GlideContextTest.java
new file mode 100644
index 000000000..199ecb38e
--- /dev/null
+++ b/library/src/test/java/com/bumptech/glide/GlideContextTest.java
@@ -0,0 +1,71 @@
+package com.bumptech.glide;
+
+import static com.google.common.truth.Truth.assertThat;
+import static org.mockito.Mockito.mock;
+
+import android.app.Application;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.Log;
+import com.bumptech.glide.load.engine.Engine;
+import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.target.ImageViewTargetFactory;
+import java.util.HashMap;
+import java.util.Map;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public final class GlideContextTest {
+  private Map<Class<?>, TransitionOptions<?, ?>> transitionOptions;
+  private GlideContext context;
+
+  @Before
+  public void setUp() {
+    Application app = RuntimeEnvironment.application;
+
+    transitionOptions = new HashMap<>();
+    context = new GlideContext(app, new Registry(),
+        new ImageViewTargetFactory(), new RequestOptions(),
+        transitionOptions, mock(Engine.class), Log.DEBUG);
+  }
+
+  @Test
+  public void getDefaultTransitionOptions_withNoOptionsRegistered_returnsDefaultOptions() {
+    assertThat(context.getDefaultTransitionOptions(Object.class))
+        .isEqualTo(GlideContext.DEFAULT_TRANSITION_OPTIONS);
+  }
+
+  @Test
+  public void getDefaultTransitionOptions_withNonMatchingOptionRegistered_returnsDefaultOptions() {
+    transitionOptions.put(Bitmap.class, new GenericTransitionOptions<>());
+    assertThat(context.getDefaultTransitionOptions(Drawable.class))
+        .isEqualTo(GlideContext.DEFAULT_TRANSITION_OPTIONS);
+  }
+
+  @Test
+  public void getDefaultTransitionOptions_withMatchingOptionsRegistered_returnsMatchingOptions() {
+    GenericTransitionOptions<Object> expected = new GenericTransitionOptions<>();
+    transitionOptions.put(Bitmap.class, expected);
+    assertThat(context.getDefaultTransitionOptions(Bitmap.class))
+        .isEqualTo(expected);
+  }
+
+  @Test
+  public void getDefaultTransitionOptions_withSuperClassRegistered_returnsSuperClassOptions() {
+    DrawableTransitionOptions expected = new DrawableTransitionOptions();
+    transitionOptions.put(Drawable.class, expected);
+    assertThat(context.getDefaultTransitionOptions(BitmapDrawable.class))
+        .isEqualTo(expected);
+    assertThat(context.getDefaultTransitionOptions(GifDrawable.class))
+        .isEqualTo(expected);
+  }
+}
diff --git a/library/src/test/java/com/bumptech/glide/GlideTest.java b/library/src/test/java/com/bumptech/glide/GlideTest.java
index c07352377..93f70d040 100644
--- a/library/src/test/java/com/bumptech/glide/GlideTest.java
+++ b/library/src/test/java/com/bumptech/glide/GlideTest.java
@@ -13,6 +13,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 import android.content.ContentResolver;
 import android.content.Context;
@@ -78,9 +79,9 @@
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.annotation.Resetter;
-import org.robolectric.res.builder.RobolectricPackageManager;
 import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowBitmap;
+import org.robolectric.shadows.ShadowPackageManager;
 
 /**
  * Tests for the {@link Glide} interface and singleton.
@@ -101,7 +102,7 @@
   public void setUp() throws Exception {
     Glide.tearDown();
 
-    RobolectricPackageManager pm = RuntimeEnvironment.getRobolectricPackageManager();
+    ShadowPackageManager pm = shadowOf(RuntimeEnvironment.application.getPackageManager());
     ApplicationInfo info =
         pm.getApplicationInfo(RuntimeEnvironment.application.getPackageName(), 0);
     info.metaData = new Bundle();
@@ -523,6 +524,18 @@ public void testNullModelPrefersFallbackDrawable() {
     verify(target).onLoadFailed(eq(fallback));
   }
 
+  @Test
+  public void testNullModelResolvesToUsePlaceholder() {
+    Drawable placeholder = new ColorDrawable(Color.GREEN);
+
+    requestManager
+        .load(null)
+        .apply(placeholderOf(placeholder))
+        .into(target);
+
+    verify(target).onLoadFailed(eq(placeholder));
+  }
+
   @Test
   public void testByteData() {
     byte[] data = new byte[] { 1, 2, 3, 4, 5, 6 };
@@ -663,7 +676,7 @@ public void applyOptions(Context context, GlideBuilder builder) {
     }
 
     @Override
-    public void registerComponents(Context context, Registry registry) {
+    public void registerComponents(Context context, Glide glide, Registry registry) {
       registerMockModelLoader(GlideUrl.class, InputStream.class,
           new ByteArrayInputStream(new byte[0]), registry);
       registerMockModelLoader(File.class, InputStream.class,
diff --git a/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
index 5be7653f0..22bab0325 100644
--- a/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
+++ b/library/src/test/java/com/bumptech/glide/RequestBuilderTest.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide;
 
 import static com.bumptech.glide.tests.BackgroundUtil.testInBackground;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.mock;
@@ -115,7 +116,9 @@ public void runTest() throws Exception {
         .thenReturn(mock(Target.class));
     when(glideContext.getDefaultRequestOptions()).thenReturn(new RequestOptions());
     when(requestManager.getDefaultRequestOptions())
-        .thenReturn((RequestOptions) new RequestOptions());
+        .thenReturn(new RequestOptions());
+    when(requestManager.getDefaultTransitionOptions(any(Class.class)))
+        .thenReturn(new GenericTransitionOptions<>());
     return new RequestBuilder<>(glide, requestManager, Object.class)
         .load((Object) null);
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java b/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
index b5980ac6b..c3d818ffc 100644
--- a/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/data/LocalUriFetcherTest.java
@@ -8,6 +8,7 @@
 import android.content.ContentResolver;
 import android.content.Context;
 import android.net.Uri;
+import android.support.annotation.NonNull;
 import com.bumptech.glide.Priority;
 import java.io.Closeable;
 import java.io.FileNotFoundException;
@@ -75,6 +76,7 @@ protected void close(Closeable data) throws IOException {
       data.close();
     }
 
+    @NonNull
     @Override
     public Class<Closeable> getDataClass() {
       return Closeable.class;
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
index 6a5cb537c..f442d9684 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/EngineTest.java
@@ -484,6 +484,7 @@ public void runTest() throws Exception {
     boolean isMemoryCacheable = true;
     boolean useUnlimitedSourceGeneratorPool = false;
     boolean onlyRetrieveFromCache = false;
+    boolean isScaleOnlyOrNoTransform = true;
 
     public EngineTestHarness() {
       when(keyFactory.buildKey(eq(model), eq(signature), anyInt(), anyInt(), eq(transformations),
@@ -513,6 +514,7 @@ public EngineTestHarness() {
           DiskCacheStrategy.ALL,
           transformations,
           false /*isTransformationRequired*/,
+          true,
           options,
           isMemoryCacheable,
           useUnlimitedSourceGeneratorPool,
diff --git a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
index 6349da7e1..8df5cd4dc 100644
--- a/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/engine/prefill/BitmapPreFillerTest.java
@@ -267,6 +267,7 @@ public void testSetsConfigOnBuildersToDefaultIfNotSet() {
 
     InOrder order = inOrder(builder);
     order.verify(builder).setConfig(DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888
+        || DecodeFormat.DEFAULT == DecodeFormat.PREFER_ARGB_8888_DISALLOW_HARDWARE
         ? Bitmap.Config.ARGB_8888 : Bitmap.Config.RGB_565);
     order.verify(builder).build();
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java b/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
index 907acb6ae..b0e2d1402 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/LazyHeadersTest.java
@@ -35,6 +35,43 @@ public void tearDown() {
     }
   }
 
+  // Tests for #2331.
+  @Test
+  public void getSanitizedUserAgent_withInvalidAgent_returnsAgentWithInvalidCharactersRemoved() {
+    String invalidUserAgent =
+        "Dalvik/2.1.0 (Linux; U; Android 5.0; P98 4G八核版(A8H8) Build/LRX21M)";
+    String validUserAgent = "Dalvik/2.1.0 (Linux; U; Android 5.0; P98 4G???(A8H8) Build/LRX21M)";
+    System.setProperty(DEFAULT_USER_AGENT_PROPERTY, invalidUserAgent);
+    assertThat(LazyHeaders.Builder.getSanitizedUserAgent()).isEqualTo(validUserAgent);
+  }
+
+  @Test
+  public void getSanitizedUserAgent_withValidAgent_returnsUnmodifiedAgent() {
+    String validUserAgent = "Dalvik/2.1.0 (Linux; U; Android 5.0; P98 4G(A8H8) Build/LRX21M)";
+    System.setProperty(DEFAULT_USER_AGENT_PROPERTY, validUserAgent);
+    assertThat(LazyHeaders.Builder.getSanitizedUserAgent()).isEqualTo(validUserAgent);
+  }
+
+  @Test
+  public void getSanitizedUserAgent_withMissingAgent_returnsNull() {
+    System.clearProperty(DEFAULT_USER_AGENT_PROPERTY);
+    assertThat(LazyHeaders.Builder.getSanitizedUserAgent()).isNull();
+  }
+
+  @Test
+  public void getSanitizedUserAgent_withEmptyStringAgent_returnsEmptyString() {
+    String userAgent = "";
+    System.setProperty(DEFAULT_USER_AGENT_PROPERTY, userAgent);
+    assertThat(LazyHeaders.Builder.getSanitizedUserAgent()).isEqualTo(userAgent);
+  }
+
+  @Test
+  public void getSanitizedUserAgent_withWhitespace_returnsWhitespaceString() {
+    String userAgent = "  \t";
+    System.setProperty(DEFAULT_USER_AGENT_PROPERTY, userAgent);
+    assertThat(LazyHeaders.Builder.getSanitizedUserAgent()).isEqualTo(userAgent);
+  }
+
   @Test
   public void testIncludesEagerHeaders() {
     Map<String, String> headers = new Builder()
diff --git a/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java b/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
index 3e3372e8e..709573fed 100644
--- a/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
+++ b/library/src/test/java/com/bumptech/glide/manager/RequestManagerFragmentTest.java
@@ -2,7 +2,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -99,29 +98,6 @@ public void runTest(Harness harness) {
     });
   }
 
-  @Test
-  public void testCallsRequestManagerOnLowMemory() {
-    runTest(new TestCase() {
-      @Override
-      public void runTest(Harness harness) {
-        RequestManager requestManager = mock(RequestManager.class);
-        harness.setRequestManager(requestManager);
-        harness.onLowMemory();
-        verify(requestManager).onLowMemory();
-      }
-    });
-  }
-
-  @Test
-  public void testNonSupportFragmentCallsOnTrimMemory() {
-    RequestManagerHarness requestManagerHarness = new RequestManagerHarness();
-    int level = 100;
-    RequestManager requestManager = mock(RequestManager.class);
-    requestManagerHarness.setRequestManager(requestManager);
-    requestManagerHarness.onTrimMemory(level);
-    verify(requestManager).onTrimMemory(eq(level));
-  }
-
   @Test
   public void testOnLowMemoryCallOnNullRequestManagerDoesNotCrash() {
     runTest(new TestCase() {
@@ -212,7 +188,7 @@ public ActivityFragmentLifecycle getHarnessLifecycle() {
 
     @Override
     public ActivityFragmentLifecycle getFragmentLifecycle() {
-      return fragment.getLifecycle();
+      return fragment.getGlideLifecycle();
     }
 
     @Override
@@ -270,7 +246,7 @@ public ActivityFragmentLifecycle getHarnessLifecycle() {
 
     @Override
     public ActivityFragmentLifecycle getFragmentLifecycle() {
-      return supportFragment.getLifecycle();
+      return supportFragment.getGlideLifecycle();
     }
 
     @Override
diff --git a/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java b/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
index 3c7648274..8725e85b7 100644
--- a/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
+++ b/library/src/test/java/com/bumptech/glide/module/ManifestParserTest.java
@@ -9,6 +9,7 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.os.Bundle;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.GlideBuilder;
 import com.bumptech.glide.Registry;
 import java.util.List;
@@ -119,7 +120,7 @@ public void applyOptions(Context context, GlideBuilder builder) {
     }
 
     @Override
-    public void registerComponents(Context context, Registry registry) {
+    public void registerComponents(Context context, Glide glide, Registry registry) {
     }
 
     @Override
@@ -140,7 +141,7 @@ public void applyOptions(Context context, GlideBuilder builder) {
     }
 
     @Override
-    public void registerComponents(Context context, Registry registry) {
+    public void registerComponents(Context context, Glide glide, Registry registry) {
     }
 
     @Override
diff --git a/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
index 23233e174..fe12efec7 100644
--- a/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
@@ -2,14 +2,30 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
+import android.app.Application;
 import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.GradientDrawable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.MultiTransformation;
+import com.bumptech.glide.load.Option;
 import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.resource.bitmap.CenterCrop;
+import com.bumptech.glide.load.resource.bitmap.CircleCrop;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.signature.ObjectKey;
+import com.bumptech.glide.util.Util;
+import com.google.common.testing.EqualsTester;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
@@ -18,11 +34,114 @@
 
   private RequestOptions options;
   @Mock private Transformation<Bitmap> transformation;
+  private Application app;
 
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
     options = new RequestOptions();
+
+    app = RuntimeEnvironment.application;
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_byDefault_isTrue() {
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withFitCenter_isTrue() {
+    options.fitCenter();
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+    options.optionalFitCenter();
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withCenterInside_isTrue() {
+    options.centerInside();
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+    options.optionalCenterInside();
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withCenterCrop_isFalse() {
+    options.centerCrop();
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+    options.optionalCenterCrop();
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withCircleCrop_isFalse() {
+    options.circleCrop();
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+    options.circleCrop();
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withBitmapTransformation_isFalse() {
+    options.transform(transformation);
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+    options.optionalTransform(transformation);
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withCustomTransformation_isFalse() {
+    options.transform(Bitmap.class, transformation);
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+    options.optionalTransform(Bitmap.class, transformation);
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withDownsampleStrategy_isTrue() {
+    options.downsample(DownsampleStrategy.CENTER_OUTSIDE);
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withNonScaleAndThenDontTransform_isTrue() {
+    options.circleCrop().dontTransform();
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withNonScaleAndAppliedDontTransform_isTrue() {
+    options.circleCrop();
+    options.apply(new RequestOptions().dontTransform());
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withDontTransformAndAppliedNonScaleTransform_isFalse() {
+    options.fitCenter();
+    options.apply(new RequestOptions().circleCrop());
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withNonScaleOnly_andAppliedWithScaleOnly_isTrue() {
+    options.circleCrop();
+    options.apply(new RequestOptions().fitCenter());
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withScaleOnlyAndAppliedWithoutTransform_isTrue() {
+    options.fitCenter();
+    options.apply(new RequestOptions().dontAnimate());
+    assertThat(options.isScaleOnlyOrNoTransform()).isTrue();
+  }
+
+  @Test
+  public void isScaleOnlyOrNoTransform_withNonScaleOnlyAndAppliedWithoutTransform_isFalse() {
+    options.circleCrop();
+    options.apply(new RequestOptions().dontAnimate());
+    assertThat(options.isScaleOnlyOrNoTransform()).isFalse();
   }
 
   @Test
@@ -75,7 +194,7 @@ public void testApplyingDontTransform_overridesTransformations() {
     assertThat(options.getTransformations()).isEmpty();
   }
 
-@Test
+  @Test
   public void testApplyingTransformation_overridesDontTransform() {
     options.dontTransform();
     options.transform(transformation);
@@ -132,4 +251,110 @@ public void testApplyingDefaultOptions_withTransform_retrainsTransform() {
     assertThat(options.isTransformationRequired()).isTrue();
     assertThat(options.getTransformations()).containsEntry(Bitmap.class, transformation);
   }
+
+  @Test
+  public void testApplyMultiTransform() {
+    options.transforms(new CircleCrop(), new CenterCrop());
+    assertThat(options.isTransformationRequired()).isTrue();
+    assertThat(options.getTransformations()).containsKey(Bitmap.class);
+    assertThat(options.getTransformations().get(Bitmap.class))
+      .isInstanceOf(MultiTransformation.class);
+  }
+
+  @Test
+  public void testEqualsHashCode() {
+    Drawable first = new ColorDrawable(Color.RED);
+    Drawable second = new GradientDrawable();
+    assertThat(first).isNotEqualTo(second);
+    assertThat(Util.bothNullOrEqual(first, second)).isFalse();
+    new EqualsTester()
+        .addEqualityGroup(
+            new RequestOptions().sizeMultiplier(.7f),
+            new RequestOptions().sizeMultiplier(.7f))
+        .addEqualityGroup(new RequestOptions().sizeMultiplier(0.8f))
+        .addEqualityGroup(new RequestOptions().error(1), new RequestOptions().error(1))
+        .addEqualityGroup(new RequestOptions().error(2))
+        .addEqualityGroup(new RequestOptions().error(first), new RequestOptions().error(first))
+        .addEqualityGroup(new RequestOptions().error(second))
+        .addEqualityGroup(new RequestOptions().placeholder(1), new RequestOptions().placeholder(1))
+        .addEqualityGroup(new RequestOptions().placeholder(2))
+        .addEqualityGroup(
+            new RequestOptions().placeholder(first),
+            new RequestOptions().placeholder(first))
+        .addEqualityGroup(new RequestOptions().placeholder(second))
+        .addEqualityGroup(new RequestOptions().fallback(1), new RequestOptions().fallback(1))
+        .addEqualityGroup(new RequestOptions().fallback(2))
+        .addEqualityGroup(
+            new RequestOptions().fallback(first),
+            new RequestOptions().fallback(first))
+        .addEqualityGroup(new RequestOptions().fallback(second))
+        .addEqualityGroup(
+            new RequestOptions().skipMemoryCache(true),
+            new RequestOptions().skipMemoryCache(true))
+        .addEqualityGroup(
+            new RequestOptions(),
+            new RequestOptions().skipMemoryCache(false),
+            new RequestOptions().theme(null),
+            new RequestOptions().onlyRetrieveFromCache(false),
+            new RequestOptions().useUnlimitedSourceGeneratorsPool(false))
+        .addEqualityGroup(
+            new RequestOptions().override(100),
+            new RequestOptions().override(100, 100))
+        .addEqualityGroup(
+            new RequestOptions().override(200),
+            new RequestOptions().override(200, 200))
+        .addEqualityGroup(
+            new RequestOptions().override(100, 200),
+            new RequestOptions().override(100, 200))
+        .addEqualityGroup(
+            new RequestOptions().override(200, 100),
+            new RequestOptions().override(200, 100))
+        .addEqualityGroup(
+            new RequestOptions().centerCrop(),
+            new RequestOptions().centerCrop())
+        .addEqualityGroup(
+            new RequestOptions().optionalCenterCrop(),
+            new RequestOptions().optionalCenterCrop())
+        .addEqualityGroup(new RequestOptions().fitCenter())
+        .addEqualityGroup(new RequestOptions().circleCrop())
+        .addEqualityGroup(new RequestOptions().centerInside())
+        .addEqualityGroup(
+            new RequestOptions().useUnlimitedSourceGeneratorsPool(true),
+            new RequestOptions().useUnlimitedSourceGeneratorsPool(true))
+        .addEqualityGroup(
+            new RequestOptions().onlyRetrieveFromCache(true),
+            new RequestOptions().onlyRetrieveFromCache(true))
+        .addEqualityGroup(
+            new RequestOptions().diskCacheStrategy(DiskCacheStrategy.ALL),
+            new RequestOptions().diskCacheStrategy(DiskCacheStrategy.ALL))
+        .addEqualityGroup(
+            new RequestOptions().diskCacheStrategy(DiskCacheStrategy.NONE))
+        .addEqualityGroup(
+            new RequestOptions().priority(Priority.HIGH),
+            new RequestOptions().priority(Priority.HIGH))
+        .addEqualityGroup(
+            new RequestOptions().priority(Priority.LOW))
+        .addEqualityGroup(
+            new RequestOptions().set(Option.<Boolean>memory("test"), true),
+            new RequestOptions().set(Option.<Boolean>memory("test"), true))
+        .addEqualityGroup(
+            new RequestOptions().set(Option.<Boolean>memory("test"), false))
+        .addEqualityGroup(
+            new RequestOptions().set(Option.<Boolean>memory("test2"), true))
+        .addEqualityGroup(
+            new RequestOptions().decode(Integer.class),
+            new RequestOptions().decode(Integer.class))
+        .addEqualityGroup(
+            new RequestOptions().decode(Float.class))
+        .addEqualityGroup(
+            new RequestOptions().signature(new ObjectKey("test")),
+            new RequestOptions().signature(new ObjectKey("test")))
+        .addEqualityGroup(
+            new RequestOptions().signature(new ObjectKey("test2")))
+        .addEqualityGroup(
+            new RequestOptions().theme(app.getTheme()),
+            new RequestOptions().theme(app.getTheme()))
+        .testEquals();
+  }
+
 }
diff --git a/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
index 9d5457dff..fc06b4087 100644
--- a/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/SingleRequestTest.java
@@ -50,7 +50,7 @@
 @Config(manifest = Config.NONE, sdk = 18)
 @SuppressWarnings("rawtypes")
 public class SingleRequestTest {
-  private RequestHarness harness;
+  private RequestHarness harness = new RequestHarness();
 
   /**
    * {@link Number} and {@link List} are arbitrarily chosen types to test some type safety as well.
@@ -77,6 +77,7 @@
     Key signature = mock(Key.class);
     Priority priority = Priority.HIGH;
     boolean useUnlimitedSourceGeneratorsPool = false;
+    Class<List> transcodeClass = List.class;
 
     Map<Class<?>, Transformation<?>>  transformations = new HashMap<>();
 
@@ -96,8 +97,9 @@ public RequestHarness() {
         .signature(signature)
         .useUnlimitedSourceGeneratorsPool(useUnlimitedSourceGeneratorsPool);
       return SingleRequest
-          .obtain(glideContext, model, List.class, requestOptions, overrideWidth, overrideHeight,
-              priority, target, requestListener, requestCoordinator, engine, factory);
+          .obtain(glideContext, model, transcodeClass, requestOptions, overrideWidth,
+              overrideHeight, priority, target, requestListener, requestCoordinator, engine,
+              factory);
     }
   }
 
@@ -277,7 +279,7 @@ public void testIgnoresOnSizeReadyIfNotWaitingForSize() {
     verify(harness.engine, times(1))
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), eq(100), eq(100),
             eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),
-            eq(harness.transformations), anyBoolean(), any(Options.class),
+            eq(harness.transformations), anyBoolean(), anyBoolean(), any(Options.class),
             anyBoolean(), anyBoolean(), anyBoolean(), any(ResourceCallback.class));
   }
 
@@ -296,7 +298,7 @@ public void testEngineLoadCancelledOnCancel() {
     when(harness.engine
        .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(), anyInt(),
           eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),
-          eq(harness.transformations), anyBoolean(), any(Options.class),
+          eq(harness.transformations), anyBoolean(), anyBoolean(), any(Options.class),
           anyBoolean(), anyBoolean(), anyBoolean(), any(ResourceCallback.class)))
         .thenReturn(loadStatus);
 
@@ -541,7 +543,7 @@ public void testRequestListenerIsCalledWithLoadedFromMemoryIfLoadCompletesSynchr
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
             anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
             any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
-            any(Options.class), anyBoolean(), anyBoolean(), anyBoolean(),
+            anyBoolean(), any(Options.class), anyBoolean(), anyBoolean(), anyBoolean(),
             any(ResourceCallback.class)))
         .thenAnswer(new Answer<Object>() {
           @Override
@@ -656,7 +658,7 @@ public void testCallsEngineWithOverrideWidthAndHeightIfSet() {
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
             anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
             any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
-            any(Options.class), anyBoolean(), anyBoolean(), anyBoolean(),
+            anyBoolean(), any(Options.class), anyBoolean(), anyBoolean(), anyBoolean(),
             any(ResourceCallback.class));
   }
 
@@ -678,7 +680,7 @@ public void testCanReRunCancelledRequests() {
     when(harness.engine
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), eq(100), eq(100),
             eq(Object.class), eq(List.class), any(Priority.class), any(DiskCacheStrategy.class),
-            eq(harness.transformations), anyBoolean(), any(Options.class),
+            eq(harness.transformations), anyBoolean(), anyBoolean(), any(Options.class),
             anyBoolean(), anyBoolean(), anyBoolean(), any(ResourceCallback.class)))
         .thenAnswer(new CallResourceCallback(harness.resource));
     SingleRequest<List> request = harness.getRequest();
@@ -708,7 +710,7 @@ public void testDoesNotStartALoadIfOnSizeReadyIsCalledAfterCancel() {
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
             anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
             any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
-            any(Options.class), anyBoolean(), anyBoolean(), anyBoolean(),
+            anyBoolean(), any(Options.class), anyBoolean(), anyBoolean(), anyBoolean(),
             any(ResourceCallback.class));
   }
 
@@ -727,7 +729,7 @@ public void testCallsSourceUnlimitedExecutorEngineIfOptionsIsSet() {
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
             anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
             any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
-            any(Options.class), anyBoolean(), eq(Boolean.TRUE), anyBoolean(),
+            anyBoolean(), any(Options.class), anyBoolean(), eq(Boolean.TRUE), anyBoolean(),
             any(ResourceCallback.class));
   }
 
@@ -745,10 +747,59 @@ public void testCallsSourceExecutorEngineIfOptionsIsSet() {
         .load(eq(harness.glideContext), eq(harness.model), eq(harness.signature), anyInt(),
             anyInt(), eq(Object.class), eq(List.class), any(Priority.class),
             any(DiskCacheStrategy.class), eq(harness.transformations), anyBoolean(),
-            any(Options.class), anyBoolean(), eq(Boolean.FALSE), anyBoolean(),
+            anyBoolean(), any(Options.class), anyBoolean(), eq(Boolean.FALSE), anyBoolean(),
             any(ResourceCallback.class));
   }
 
+  @Test
+  public void testIsEquivalentTo() {
+    SingleRequest<List> originalRequest1 = harness.getRequest();
+    SingleRequest<List> originalRequest2 = harness.getRequest();
+    assertTrue(originalRequest1.isEquivalentTo(originalRequest2));
+
+    harness = new RequestHarness();
+    harness.overrideWidth = harness.overrideWidth * 2;
+    SingleRequest<List> widthRequest = harness.getRequest();
+    assertTrue(widthRequest.isEquivalentTo(widthRequest));
+    assertFalse(widthRequest.isEquivalentTo(originalRequest1));
+    assertFalse(originalRequest1.isEquivalentTo(widthRequest));
+
+    harness = new RequestHarness();
+    harness.overrideHeight = harness.overrideHeight * 2;
+    SingleRequest<List> heightRequest = harness.getRequest();
+    assertTrue(heightRequest.isEquivalentTo(heightRequest));
+    assertFalse(heightRequest.isEquivalentTo(originalRequest1));
+    assertFalse(originalRequest1.isEquivalentTo(heightRequest));
+
+    harness = new RequestHarness();
+    harness.model = 12345679;
+    SingleRequest<List> modelRequest = harness.getRequest();
+    assertTrue(modelRequest.isEquivalentTo(modelRequest));
+    assertFalse(modelRequest.isEquivalentTo(originalRequest1));
+    assertFalse(originalRequest1.isEquivalentTo(modelRequest));
+
+    harness = new RequestHarness();
+    harness.model = null;
+    SingleRequest<List> nullModelRequest = harness.getRequest();
+    assertTrue(nullModelRequest.isEquivalentTo(nullModelRequest));
+    assertFalse(nullModelRequest.isEquivalentTo(originalRequest1));
+    assertFalse(originalRequest1.isEquivalentTo(nullModelRequest));
+
+    harness = new RequestHarness();
+    harness.errorDrawable = new ColorDrawable(Color.GRAY);
+    SingleRequest<List> errorRequest = harness.getRequest();
+    assertTrue(errorRequest.isEquivalentTo(errorRequest));
+    assertFalse(errorRequest.isEquivalentTo(originalRequest1));
+    assertFalse(originalRequest1.isEquivalentTo(errorRequest));
+
+    harness = new RequestHarness();
+    harness.priority = Priority.LOW;
+    SingleRequest<List> priorityRequest = harness.getRequest();
+    assertTrue(priorityRequest.isEquivalentTo(priorityRequest));
+    assertFalse(priorityRequest.isEquivalentTo(originalRequest1));
+    assertFalse(originalRequest1.isEquivalentTo(priorityRequest));
+  }
+
   // TODO do we want to move these to Util?
   @SuppressWarnings("unchecked")
   private static <T> Transition<T> mockTransition() {
diff --git a/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java b/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
index 0b982933f..cf2087c8c 100644
--- a/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/ThumbnailRequestCoordinatorTest.java
@@ -330,4 +330,25 @@ public void testDoesNotNotifyParentOnThumbRequestComplete() {
 
     verify(parent, never()).onRequestSuccess(any(Request.class));
   }
+
+  @Test
+  public void testIsEquivalentTo() {
+    ThumbnailRequestCoordinator first = new ThumbnailRequestCoordinator();
+    when(full.isEquivalentTo(full)).thenReturn(true);
+    when(thumb.isEquivalentTo(thumb)).thenReturn(true);
+    first.setRequests(full, thumb);
+    assertTrue(first.isEquivalentTo(first));
+
+    ThumbnailRequestCoordinator second = new ThumbnailRequestCoordinator();
+    second.setRequests(full, full);
+    assertTrue(second.isEquivalentTo(second));
+    assertFalse(second.isEquivalentTo(first));
+    assertFalse(first.isEquivalentTo(second));
+
+    ThumbnailRequestCoordinator third = new ThumbnailRequestCoordinator();
+    third.setRequests(thumb, thumb);
+    assertTrue(third.isEquivalentTo(third));
+    assertFalse(third.isEquivalentTo(first));
+    assertFalse(first.isEquivalentTo(third));
+  }
 }
diff --git a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
index a31adc29c..7d0756022 100644
--- a/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/target/ViewTargetTest.java
@@ -98,12 +98,11 @@ public void testRetrievesRequestFromPreviousTargetForView() {
   }
 
   @Test
-  public void testSizeCallbackIsCalledSynchronouslyIfViewSizeSet() {
+  public void getSize_withValidDimens_noLayoutRequested_callsSizeReady() {
     int dimens = 333;
     shadowView
         .setWidth(dimens)
-        .setHeight(dimens)
-        .setIsLaidOut(true);
+        .setHeight(dimens);
 
     target.getSize(cb);
 
@@ -111,11 +110,24 @@ public void testSizeCallbackIsCalledSynchronouslyIfViewSizeSet() {
   }
 
   @Test
-  public void testSizeCallbackIsCalledSynchronouslyIfLayoutParamsConcreteSizeSet() {
+  public void getSize_withValidDimens_layoutRequested_doesNotCallSizeReady() {
+    int dimens = 333;
+    shadowView
+        .setWidth(dimens)
+        .setHeight(dimens);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withFixedLayoutParams_callsSizeReady() {
     int dimens = 444;
     LayoutParams layoutParams = new LayoutParams(dimens, dimens);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -123,11 +135,58 @@ public void testSizeCallbackIsCalledSynchronouslyIfLayoutParamsConcreteSizeSet()
   }
 
   @Test
-  public void getSize_withBothWrapContent_returnsSizeOriginal() {
+  public void getSize_withFixedWidthSetHeight_noLayoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);
+    shadowView.setHeight(200);
+    view.setLayoutParams(layoutParams);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(eq(400), eq(200));
+  }
+
+  @Test
+  public void getSize_withFixedWidthSetHeight_layoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(400 /*width*/, 0 /*height*/);
+    shadowView.setHeight(200);
+    view.setLayoutParams(layoutParams);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+
+  @Test
+  public void getSize_withFixedHeightSetWidth_noLayoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(0 /*width*/, 400 /*height*/);
+    shadowView.setWidth(200);
+    view.setLayoutParams(layoutParams);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(eq(200), eq(400));
+  }
+
+  @Test
+  public void getSize_withFixedHeightSetWidth_layoutRequested_callsSizeReady() {
+    LayoutParams layoutParams = new LayoutParams(0 /*width*/, 400 /*height*/);
+    shadowView.setWidth(200);
+    view.setLayoutParams(layoutParams);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withBothWrapContent_isValid_andReturnsSizeOriginal() {
     LayoutParams layoutParams =
         new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -135,11 +194,11 @@ public void getSize_withBothWrapContent_returnsSizeOriginal() {
   }
 
   @Test
-  public void getSize_withWrapContentWidthAndValidHeight_usesSizeOriginalWidthValidHeight() {
+  public void getSize_withWrapContentWidthAndValidHeight_isValid_andUsesSizeOriginalWidth() {
     int height = 100;
     LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, height);
     view.setLayoutParams(params);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -147,11 +206,11 @@ public void getSize_withWrapContentWidthAndValidHeight_usesSizeOriginalWidthVali
   }
 
   @Test
-  public void getSize_withWrapContentHeightAndValidWidth_returnsWidthAndSizeOriginalHeight() {
+  public void getSize_withWrapContentHeightAndValidWidth_isValid_andUsesSizeOriginalHeight() {
     int width = 100;
     LayoutParams params = new LayoutParams(width, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(params);
-    shadowView.setIsLaidOut(true);
+    view.requestLayout();
 
     target.getSize(cb);
 
@@ -159,7 +218,48 @@ public void getSize_withWrapContentHeightAndValidWidth_returnsWidthAndSizeOrigin
   }
 
   @Test
-  public void getSize_withWrapContentWidthAndMatchParentHeight_usesSizeOriginalWidthAndHeight() {
+  public void getSize_withWrapContentHeightSetWidth_noLayoutRequested_callsSizeReady() {
+    int width = 100;
+    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(width);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withWrapContentHeightSetWidth_previousHeight_usesSizeOriginal() {
+    int width = 100;
+    int oldHeight = 500;
+    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView
+        .setWidth(width)
+        .setHeight(oldHeight);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
+
+  }
+
+  @Test
+  public void getSize_withWrapContentHeightViewWidth_layoutRequested_doesNotCallSizeReady() {
+    int width = 100;
+    LayoutParams params = new LayoutParams(0, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(width);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withWrapContentWidthAndMatchParentHeight_callsSizeReadyOnPreDraw() {
     LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
     view.setLayoutParams(params);
 
@@ -169,8 +269,8 @@ public void getSize_withWrapContentWidthAndMatchParentHeight_usesSizeOriginalWid
 
     int height = 32;
     shadowView
-        .setHeight(height)
-        .setIsLaidOut(true);
+        .setHeight(height);
+    view.requestLayout();
 
     shadowObserver.fireOnPreDrawListeners();
 
@@ -178,7 +278,30 @@ public void getSize_withWrapContentWidthAndMatchParentHeight_usesSizeOriginalWid
   }
 
   @Test
-  public void getSize_withMatchParentWidthAndWrapContentHeight_usesWidthAndSizeOriginalHeight() {
+  public void getSize_withWrapContentWidthMatchParentHeightAndSetHeight_noLayoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+    view.setLayoutParams(params);
+    shadowView.setHeight(200);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, 200);
+  }
+
+  @Test
+  public void getSize_withWrapContentWidthMatchParentHeightAndSetHeight_layoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+    view.setLayoutParams(params);
+    shadowView.setHeight(200);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, 200);
+  }
+
+  @Test
+  public void getSize_withMatchParentWidthAndWrapContentHeight_callsSizeReadyOnPreDraw() {
     LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
     view.setLayoutParams(params);
 
@@ -188,15 +311,39 @@ public void getSize_withMatchParentWidthAndWrapContentHeight_usesWidthAndSizeOri
 
     int width = 32;
     shadowView
-        .setWidth(width)
-        .setIsLaidOut(true);
+        .setWidth(width);
+    view.requestLayout();
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(width, Target.SIZE_ORIGINAL);
   }
 
+
+  @Test
+  public void getSize_withMatchParentWidthWrapContentHeightAndSetHeight_noLayoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(200);
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(200, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withMatchParentWidthWrapContentHeightAndSetHeight_layoutRequested_calls() {
+    LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+    view.setLayoutParams(params);
+    shadowView.setWidth(200);
+    view.requestLayout();
+
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(200, Target.SIZE_ORIGINAL);
+  }
+
   @Test
-  public void testMatchParentWidthAndHeight() {
+  public void getSize_withMatchParentWidthAndHeight_validDimens_layoutRequested_callsSizeReady() {
     LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
     view.setLayoutParams(params);
 
@@ -209,27 +356,82 @@ public void testMatchParentWidthAndHeight() {
     shadowView
         .setWidth(width)
         .setHeight(height)
-        .setIsLaidOut(true);
+        .requestLayout();
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
   }
 
   @Test
-  public void testSizeCallbackIsCalledPreDrawIfNoDimensAndNoLayoutParams() {
+  public void getSize_onPreDraw_withValidWidthAndHeight_noLayoutRequested_callsSizeReady() {
     target.getSize(cb);
 
     int width = 12;
     int height = 32;
     shadowView
         .setWidth(width)
-        .setHeight(height)
-        .setIsLaidOut(true);
+        .setHeight(height);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
   }
 
+  @Test
+  public void getSize_onPreDraw_withValidWidthAndHeight_layoutRequested_doesNotCallSizeReady() {
+    target.getSize(cb);
+
+    int width = 12;
+    int height = 32;
+    shadowView
+        .setWidth(width)
+        .setHeight(height);
+    view.requestLayout();
+    shadowObserver.fireOnPreDrawListeners();
+
+    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+  }
+
+  @Test
+  public void getSize_withWrapContentSize_callsSizeReadyWithSizeOriginal() {
+    view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withValidViewDimensions_andWrapContent_callsSizeReadyWithSizeOriginal() {
+    view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+    shadowView
+        .setWidth(100)
+        .setHeight(100);
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+  }
+
+  @Test
+  public void getSize_withValidViewDimensions_andFixedParams_callsSizeReadyWithParams() {
+    view.setLayoutParams(new LayoutParams(100, 100));
+    shadowView
+        .setWidth(50)
+        .setHeight(50);
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(100, 100);
+  }
+
+  @Test
+  public void getSize_withValidViewDimensions_invalidParams_callsSizeReadyWithViewDimensions() {
+    view.setLayoutParams(new LayoutParams(0, 0));
+    shadowView
+        .setWidth(100)
+        .setHeight(100);
+    target.getSize(cb);
+
+    verify(cb).onSizeReady(100, 100);
+  }
+
   @Test
   public void testSizeCallbacksAreCalledInOrderPreDraw() {
     SizeReadyCallback[] cbs = new SizeReadyCallback[25];
@@ -241,8 +443,7 @@ public void testSizeCallbacksAreCalledInOrderPreDraw() {
     int width = 100, height = 111;
     shadowView
         .setWidth(width)
-        .setHeight(height)
-        .setIsLaidOut(true);
+        .setHeight(height);
     shadowObserver.fireOnPreDrawListeners();
 
     InOrder order = inOrder((Object[]) cbs);
@@ -257,7 +458,6 @@ public void testDoesNotNotifyCallbackTwiceIfAddedTwice() {
     target.getSize(cb);
 
     view.setLayoutParams(new LayoutParams(100, 100));
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb, times(1)).onSizeReady(anyInt(), anyInt());
@@ -278,7 +478,6 @@ public void testDoesAddSecondListenerIfFirstListenerIsRemovedBeforeSecondRequest
     target.getSize(cb1);
 
     view.setLayoutParams(new LayoutParams(100, 100));
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     assertThat(shadowObserver.getPreDrawListeners()).hasSize(0);
@@ -310,7 +509,6 @@ public void testSizeCallbackIsCalledPreDrawIfNoDimensAndNoLayoutParamsButLayoutP
     int height = 354;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
 
     verify(cb).onSizeReady(eq(width), eq(height));
@@ -322,7 +520,6 @@ public void testCallbackIsNotCalledTwiceIfPreDrawFiresTwice() {
 
     LayoutParams layoutParams = new LayoutParams(1234, 4123);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
     shadowObserver.fireOnPreDrawListeners();
 
@@ -340,7 +537,6 @@ public void testCallbacksFromMultipleRequestsAreNotifiedOnPreDraw() {
     int height = 875;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.fireOnPreDrawListeners();
     shadowObserver.fireOnPreDrawListeners();
 
@@ -356,7 +552,6 @@ public void testDoesNotThrowOnPreDrawIfViewTreeObserverIsDead() {
     int height = 2;
     LayoutParams layoutParams = new LayoutParams(width, height);
     view.setLayoutParams(layoutParams);
-    shadowView.setIsLaidOut(true);
     shadowObserver.setIsAlive(false);
     shadowObserver.fireOnPreDrawListeners();
 
@@ -372,7 +567,7 @@ public void testThrowsIfGivenNullView() {
   public void testDecreasesDimensionsByViewPadding() {
     view.setLayoutParams(new LayoutParams(100, 100));
     view.setPadding(25, 25, 25, 25);
-    shadowView.setIsLaidOut(true);
+    view.layout(0, 0, 100, 100);
 
     target.getSize(cb);
 
@@ -380,38 +575,34 @@ public void testDecreasesDimensionsByViewPadding() {
   }
 
   @Test
-  public void getSize_withValidWidthAndHeight_notLaidOut_doesNotCallSizeReady() {
+  public void getSize_withValidWidthAndHeight_notLaidOut_notLayoutRequested_callsSizeReady() {
+    view.setLayoutParams(new LayoutParams(0, 0));
     shadowView
         .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(false);
+        .setHeight(100);
     target.getSize(cb);
 
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+    verify(cb).onSizeReady(100, 100);
   }
 
   @Test
-  public void getSize_withLayoutParams_notLaidOut_doesCallSizeReady() {
-    shadowView
-        .setLayoutParams(new LayoutParams(10, 10))
-        .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(false);
+  public void getSize_withLayoutParams_notLaidOut_notLayoutRequested_callsSizeReady() {
+    view.setLayoutParams(new LayoutParams(10, 10));
     target.getSize(cb);
 
     verify(cb, times(1)).onSizeReady(anyInt(), anyInt());
   }
 
   @Test
-  public void getSize_withLayoutParams_zeroWidthHeight_notLaidOut_doesNotCallSizeReady() {
+  public void getSize_withLayoutParams_emptyParams_notLaidOutOrLayoutRequested_callsSizeReady() {
+   view
+        .setLayoutParams(new LayoutParams(0, 0));
     shadowView
-        .setLayoutParams(new LayoutParams(0, 0))
         .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(false);
+        .setHeight(100);
     target.getSize(cb);
 
-    verify(cb, never()).onSizeReady(anyInt(), anyInt());
+    verify(cb).onSizeReady(100, 100);
   }
 
   @Test
@@ -431,8 +622,7 @@ public void getSize_withValidWidthAndHeight_preV19_layoutRequested_doesNotCallSi
   public void getSize_withWidthAndHeightEqualToPadding_doesNotCallSizeReady() {
     shadowView
         .setWidth(100)
-        .setHeight(100)
-        .setIsLaidOut(true);
+        .setHeight(100);
 
     view.setPadding(50, 50, 50, 50);
 
@@ -460,6 +650,7 @@ public void removeOnPreDrawListener(OnPreDrawListener listener) {
       preDrawListeners.remove(listener);
     }
 
+    @SuppressWarnings("WeakerAccess")
     @Implementation
     public boolean isAlive() {
       return isAlive;
@@ -471,28 +662,27 @@ private void checkIsAlive() {
       }
     }
 
-    public void setIsAlive(boolean isAlive) {
+    void setIsAlive(boolean isAlive) {
       this.isAlive = isAlive;
     }
 
-    public void fireOnPreDrawListeners() {
+    void fireOnPreDrawListeners() {
       for (OnPreDrawListener listener : preDrawListeners) {
         listener.onPreDraw();
       }
     }
 
-    public List<OnPreDrawListener> getPreDrawListeners() {
+    List<OnPreDrawListener> getPreDrawListeners() {
       return preDrawListeners;
     }
   }
 
   @Implements(View.class)
   public static class SizedShadowView extends ShadowView {
+
     private int width;
     private int height;
-    private LayoutParams layoutParams;
-    private boolean isLaidOut;
-    private boolean isLayoutRequested;
+    private LayoutParams params;
 
     public SizedShadowView setWidth(int width) {
       this.width = width;
@@ -504,19 +694,18 @@ public SizedShadowView setHeight(int height) {
       return this;
     }
 
-    public SizedShadowView setLayoutParams(LayoutParams layoutParams) {
-      this.layoutParams = layoutParams;
-      return this;
-    }
-
-    public SizedShadowView setIsLaidOut(boolean isLaidOut) {
-      this.isLaidOut = isLaidOut;
-      return this;
+    // Implemented because get/setLayoutParams is not implemented by ShadowView.
+    @Implementation
+    @SuppressWarnings("unused")
+    public void setLayoutParams(LayoutParams params) {
+      this.params = params;
     }
 
+    // Implemented because get/setLayoutParams is not implemented by ShadowView.
     @Implementation
-    public void requestLayout() {
-      isLayoutRequested = true;
+    @SuppressWarnings("unused")
+    public LayoutParams getLayoutParams() {
+      return params;
     }
 
     @Implementation
@@ -528,26 +717,12 @@ public int getWidth() {
     public int getHeight() {
       return height;
     }
-
-    @Implementation
-    public boolean isLaidOut() {
-      return isLaidOut;
-    }
-
-    @Implementation
-    public boolean isLayoutRequested() {
-      return isLayoutRequested;
-    }
-
-    @Implementation
-    public LayoutParams getLayoutParams() {
-      return layoutParams;
-    }
   }
 
+
   private static class TestViewTarget extends ViewTarget<View, Object> {
 
-    public TestViewTarget(View view) {
+    TestViewTarget(View view) {
       super(view);
     }
 
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
index 98d37cb3d..e02f29e67 100644
--- a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeFactoryTest.java
@@ -2,7 +2,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
-import static org.mockito.Mockito.mock;
 
 import android.graphics.drawable.Drawable;
 import com.bumptech.glide.load.DataSource;
@@ -21,9 +20,7 @@
   @SuppressWarnings("unchecked")
   @Before
   public void setUp() {
-    ViewAnimationFactory<Drawable> viewAnimationFactory = mock(ViewAnimationFactory.class);
-    factory = new DrawableCrossFadeFactory(viewAnimationFactory, 100 /*duration*/,
-        false /*isCrossFadeEnabled*/);
+    factory = new DrawableCrossFadeFactory(100 /*duration*/, false /*isCrossFadeEnabled*/);
   }
 
   @Test
diff --git a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
index 6ade60e8b..022277447 100644
--- a/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
+++ b/library/src/test/java/com/bumptech/glide/request/transition/DrawableCrossFadeViewAnimationTest.java
@@ -1,10 +1,8 @@
 package com.bumptech.glide.request.transition;
 
 import static com.bumptech.glide.request.transition.Transition.ViewAdapter;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -13,7 +11,6 @@
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.TransitionDrawable;
-import android.widget.ImageView;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -30,13 +27,6 @@ public void setup() {
     harness = new CrossFadeHarness();
   }
 
-  @Test
-  public void testStartsDefaultAnimationIfNoPreviousDrawableIsNotSet() {
-    when(harness.adapter.getView()).thenReturn(harness.view);
-    harness.animation.transition(harness.current, harness.adapter);
-    verify(harness.defaultAnimation).transition(eq(harness.current), eq(harness.adapter));
-  }
-
   @Test
   public void testIgnoresNullViews() {
     when(harness.adapter.getView()).thenReturn(null);
@@ -44,21 +34,28 @@ public void testIgnoresNullViews() {
   }
 
   @Test
-  public void testReturnsFalseIfStartsDefaultAnimation() {
-    assertFalse(harness.animation.transition(harness.current, harness.adapter));
+  public void transition_withNonNullPreviousDrawable_setsTransitionDrawable() {
+    Drawable previous = new ColorDrawable(Color.WHITE);
+    when(harness.adapter.getCurrentDrawable()).thenReturn(previous);
+    harness.animation.transition(harness.current, harness.adapter);
+
+    verify(harness.adapter).setDrawable(any(TransitionDrawable.class));
   }
 
   @Test
-  public void testSetsTransitionDrawableIfPreviousIsNotNull() {
-    Drawable previous = new ColorDrawable(Color.WHITE);
-    when(harness.adapter.getCurrentDrawable()).thenReturn(previous);
+  public void transition_withNullPreviousDrawable_setsTransitionDrawable() {
     harness.animation.transition(harness.current, harness.adapter);
 
     verify(harness.adapter).setDrawable(any(TransitionDrawable.class));
   }
 
   @Test
-  public void testReturnsTrueIfSetsTransitionDrawable() {
+  public void transition_withNoCurrentDrawable_returnsTrue() {
+    assertTrue(harness.animation.transition(harness.current, harness.adapter));
+  }
+
+  @Test
+  public void transition_withCurrentDrawable_returnsTrue() {
     Drawable previous = new ColorDrawable(Color.RED);
     when(harness.adapter.getCurrentDrawable()).thenReturn(previous);
     assertTrue(harness.animation.transition(harness.current, harness.adapter));
@@ -68,11 +65,9 @@ public void testReturnsTrueIfSetsTransitionDrawable() {
   private static class CrossFadeHarness {
     Drawable current = new ColorDrawable(Color.GRAY);
     ViewAdapter adapter = mock(ViewAdapter.class);
-    ImageView view = mock(ImageView.class);
-    Transition<Drawable> defaultAnimation = mock(Transition.class);
     int duration = 200;
     DrawableCrossFadeTransition animation =
-        new DrawableCrossFadeTransition(defaultAnimation, duration, true /*isCrossFadeEnabled*/);
+        new DrawableCrossFadeTransition(duration, true /*isCrossFadeEnabled*/);
   }
 }
 
diff --git a/samples/contacturi/build.gradle b/samples/contacturi/build.gradle
index 94799a5c2..e8753dd15 100644
--- a/samples/contacturi/build.gradle
+++ b/samples/contacturi/build.gradle
@@ -2,8 +2,7 @@ apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':library')
-    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    compile "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
+    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 }
 
diff --git a/samples/contacturi/lint.xml b/samples/contacturi/lint.xml
new file mode 100644
index 000000000..ab5a637a0
--- /dev/null
+++ b/samples/contacturi/lint.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+</lint>
diff --git a/samples/contacturi/src/main/AndroidManifest.xml b/samples/contacturi/src/main/AndroidManifest.xml
index ecfd4c859..50cd63461 100644
--- a/samples/contacturi/src/main/AndroidManifest.xml
+++ b/samples/contacturi/src/main/AndroidManifest.xml
@@ -5,7 +5,7 @@
     <uses-permission android:name="android.permission.READ_CONTACTS" />
 
     <application
-        android:allowBackup="true"
+        android:allowBackup="false"
         android:icon="@android:drawable/sym_def_app_icon"
         android:label="@string/app_name"
         android:theme="@style/Theme.AppCompat" >
diff --git a/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java
index 74aedca6b..c928f9fd5 100644
--- a/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java
+++ b/samples/contacturi/src/main/java/com/bumptech/glide/samples/contacturi/MainActivity.java
@@ -3,15 +3,21 @@
 import static android.os.Build.VERSION;
 import static android.os.Build.VERSION_CODES;
 
+import android.Manifest;
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.ContentUris;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
+import android.provider.ContactsContract;
 import android.provider.ContactsContract.Contacts;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
 import android.view.View;
+import android.widget.EditText;
 import android.widget.ImageView;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
@@ -25,11 +31,13 @@
  */
 public class MainActivity extends Activity {
   private static final int REQUEST_CONTACT = 1;
+  private static final int READ_CONTACTS = 0;
 
   private ImageView imageViewContact;
   private ImageView imageViewLookup;
   private ImageView imageViewPhoto;
   private ImageView imageViewDisplayPhoto;
+  private EditText numberEntry;
 
   @Override
   protected void onCreate(Bundle savedInstanceState) {
@@ -40,6 +48,16 @@ protected void onCreate(Bundle savedInstanceState) {
     imageViewLookup = (ImageView) findViewById(R.id.image_lookup);
     imageViewPhoto = (ImageView) findViewById(R.id.image_photo);
     imageViewDisplayPhoto = (ImageView) findViewById(R.id.image_display_photo);
+    numberEntry = (EditText) findViewById(R.id.number_entry);
+    // Make sure that user gives application required permissions
+    if (ContextCompat.checkSelfPermission(
+        getApplication(),
+        Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
+      // No explanation needed, we can request the permission.
+      ActivityCompat.requestPermissions(this,
+      new String[]{Manifest.permission.READ_CONTACTS},
+      READ_CONTACTS);
+    }
 
     findViewById(R.id.button_pick_contact).setOnClickListener(new View.OnClickListener() {
       @Override
@@ -48,6 +66,18 @@ public void onClick(View v) {
         startActivityForResult(intent, REQUEST_CONTACT);
       }
     });
+
+    findViewById(R.id.button_find).setOnClickListener(new View.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI,
+                                       Uri.encode(numberEntry.getText().toString()));
+        GlideApp.with(MainActivity.this)
+                .load(uri)
+                .override(Target.SIZE_ORIGINAL)
+                .into(imageViewLookup);
+        }
+    });
   }
 
   @Override
diff --git a/samples/contacturi/src/main/res/layout/activity_main.xml b/samples/contacturi/src/main/res/layout/activity_main.xml
index fe9510388..7834e829d 100644
--- a/samples/contacturi/src/main/res/layout/activity_main.xml
+++ b/samples/contacturi/src/main/res/layout/activity_main.xml
@@ -17,6 +17,28 @@
                 android:layout_height="wrap_content"
                 android:text="@string/pick_contact"/>
 
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="horizontal">
+
+            <EditText
+                android:id="@+id/number_entry"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:ems="10"
+                android:hint="@string/hint_number_entry"
+                android:inputType="phone" />
+
+            <Button
+                android:id="@+id/button_find"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="@string/button_search_phone" />
+        </LinearLayout>
+
         <TextView
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
diff --git a/samples/contacturi/src/main/res/values/strings.xml b/samples/contacturi/src/main/res/values/strings.xml
index 63bdff591..b258461bb 100644
--- a/samples/contacturi/src/main/res/values/strings.xml
+++ b/samples/contacturi/src/main/res/values/strings.xml
@@ -6,4 +6,6 @@
     <string name="image_lookup">Image based on lookup Uri, same as contact Uri</string>
     <string name="image_photo">Image based on photo Uri, thumbnail sized, usually 96x96px</string>
     <string name="image_display_photo">Image based on display photo Uri, possibly 512x512px</string>
+    <string name="hint_number_entry">Find by phone number</string>
+    <string name="button_search_phone">Find</string>
 </resources>
diff --git a/samples/flickr/build.gradle b/samples/flickr/build.gradle
index a0233b7a8..0405ef67d 100644
--- a/samples/flickr/build.gradle
+++ b/samples/flickr/build.gradle
@@ -7,10 +7,9 @@ dependencies {
     }
     annotationProcessor project(':annotation:compiler')
 
-    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    compile "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
+    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
     compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
-    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
+    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/samples/flickr/lint.xml b/samples/flickr/lint.xml
index 5c710c8c7..ac292ab1a 100644
--- a/samples/flickr/lint.xml
+++ b/samples/flickr/lint.xml
@@ -3,4 +3,5 @@
     <!-- Not supported by all build systems -->
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="IconMissingDensityFolder" severity="ignore"/>
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
 </lint>
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
index cae1eaf14..9a9be21e1 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.samples.flickr;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
@@ -13,7 +14,7 @@
 @GlideModule
 public class FlickrGlideModule extends AppGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.append(Photo.class, InputStream.class, new FlickrModelLoader.Factory());
   }
 
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
index 57f3c23cf..534caa298 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java
@@ -1,7 +1,5 @@
 package com.bumptech.glide.samples.flickr;
 
-import static com.bumptech.glide.GenericTransitionOptions.withNoTransition;
-
 import android.content.Intent;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
@@ -65,15 +63,13 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
     fullRequest = GlideApp.with(this)
         .asDrawable()
-        .centerCrop()
-        .transition(withNoTransition());
+        .centerCrop();
 
     thumbnailRequest = GlideApp.with(this)
         .asDrawable()
         .diskCacheStrategy(DiskCacheStrategy.DATA)
         .centerCrop()
-        .override(Api.SQUARE_THUMB_SIZE)
-        .transition(withNoTransition());
+        .override(Api.SQUARE_THUMB_SIZE);
 
     preloadRequest =
         thumbnail ? thumbnailRequest.clone().priority(Priority.HIGH) : fullRequest;
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
index 47cbadb89..08c5f5257 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrSearchActivity.java
@@ -1,9 +1,7 @@
 package com.bumptech.glide.samples.flickr;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.Resources;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -28,7 +26,6 @@
 import com.bumptech.glide.samples.flickr.api.Api;
 import com.bumptech.glide.samples.flickr.api.Photo;
 import com.bumptech.glide.samples.flickr.api.Query;
-import com.bumptech.glide.samples.flickr.api.RecentQuery;
 import com.bumptech.glide.samples.flickr.api.SearchQuery;
 import java.io.File;
 import java.util.ArrayList;
@@ -48,6 +45,7 @@
     implements SearchView.OnQueryTextListener {
   private static final String TAG = "FlickrSearchActivity";
   private static final String STATE_QUERY = "state_search_string";
+  private static final Query DEFAULT_QUERY = new SearchQuery("kitten");
 
   private final QueryListener queryListener = new QueryListener();
   private View searching;
@@ -145,7 +143,7 @@ public void onCreate(Bundle savedInstanceState) {
         executeQuery(savedQuery);
       }
     } else {
-      executeQuery(RecentQuery.get());
+      executeQuery(DEFAULT_QUERY);
     }
 
     int smallGridSize = res.getDimensionPixelSize(R.dimen.small_photo_side);
@@ -187,19 +185,6 @@ protected void onDestroy() {
     }
   }
 
-  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-  @Override
-  public void onTrimMemory(int level) {
-    super.onTrimMemory(level);
-    GlideApp.get(this).trimMemory(level);
-  }
-
-  @Override
-  public void onLowMemory() {
-    super.onLowMemory();
-    GlideApp.get(this).clearMemory();
-  }
-
   private void executeSearch(String searchString) {
     Query query = TextUtils.isEmpty(searchString) ? null : new SearchQuery(searchString);
     executeQuery(query);
diff --git a/samples/gallery/build.gradle b/samples/gallery/build.gradle
index 9f1cce8bc..bc2e3fde3 100644
--- a/samples/gallery/build.gradle
+++ b/samples/gallery/build.gradle
@@ -5,8 +5,8 @@ dependencies {
     compile(project(':integration:recyclerview')) {
         transitive = false
     }
-    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
-    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
+    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 }
 
diff --git a/samples/gallery/lint.xml b/samples/gallery/lint.xml
index 5c710c8c7..ac292ab1a 100644
--- a/samples/gallery/lint.xml
+++ b/samples/gallery/lint.xml
@@ -3,4 +3,5 @@
     <!-- Not supported by all build systems -->
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="IconMissingDensityFolder" severity="ignore"/>
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
 </lint>
diff --git a/samples/giphy/build.gradle b/samples/giphy/build.gradle
index e2931ad27..9512035e5 100644
--- a/samples/giphy/build.gradle
+++ b/samples/giphy/build.gradle
@@ -5,8 +5,9 @@ dependencies {
     compile(project(':integration:recyclerview')) {
         transitive = false
     }
-    compile 'com.google.code.gson:gson:2.4'
-    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
+    compile 'com.google.code.gson:gson:2.8.0'
+    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 }
 
diff --git a/samples/giphy/lint.xml b/samples/giphy/lint.xml
index 95a2ab036..94bb2b69c 100644
--- a/samples/giphy/lint.xml
+++ b/samples/giphy/lint.xml
@@ -2,4 +2,5 @@
 <lint>
     <!-- Not supported by all build systems -->
     <issue id="GradleOverrides" severity="ignore" />
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
 </lint>
diff --git a/samples/giphy/src/main/AndroidManifest.xml b/samples/giphy/src/main/AndroidManifest.xml
index 8d3ac29ac..cff2771de 100644
--- a/samples/giphy/src/main/AndroidManifest.xml
+++ b/samples/giphy/src/main/AndroidManifest.xml
@@ -5,7 +5,7 @@
     <uses-permission android:name="android.permission.INTERNET"/>
 
     <application
-        android:allowBackup="true"
+        android:allowBackup="false"
         android:icon="@android:drawable/sym_def_app_icon"
         android:largeHeap="true"
         android:label="@string/app_name"
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
index fd796461e..fd92665ea 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/FullscreenActivity.java
@@ -1,7 +1,5 @@
 package com.bumptech.glide.samples.giphy;
 
-import static com.bumptech.glide.request.RequestOptions.decodeTypeOf;
-
 import android.app.Activity;
 import android.content.ClipData;
 import android.content.ClipboardManager;
@@ -12,7 +10,6 @@
 import android.os.Bundle;
 import android.view.View;
 import android.widget.ImageView;
-import com.bumptech.glide.Glide;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.GlideException;
@@ -61,11 +58,11 @@ public void onClick(View view) {
       }
     });
 
-    RequestBuilder<Drawable> thumbnailRequest = Glide.with(this)
+    RequestBuilder<Drawable> thumbnailRequest = GlideApp.with(this)
         .load(result)
-        .apply(decodeTypeOf(Bitmap.class));
+        .decode(Bitmap.class);
 
-    Glide.with(this)
+    GlideApp.with(this)
         .load(result.images.original.url)
         .thumbnail(thumbnailRequest)
         .listener(new RequestListener<Drawable>() {
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java
index 999600314..5381e1f22 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/GiphyGlideModule.java
@@ -1,6 +1,7 @@
 package com.bumptech.glide.samples.giphy;
 
 import android.content.Context;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
@@ -12,7 +13,7 @@
 @GlideModule
 public class GiphyGlideModule extends AppGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.append(Api.GifResult.class, InputStream.class, new GiphyModelLoader.Factory());
   }
 
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
index 3321f9ab7..5501c236c 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/MainActivity.java
@@ -12,7 +12,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
-import com.bumptech.glide.Glide;
 import com.bumptech.glide.ListPreloader;
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.integration.recyclerview.RecyclerViewPreloader;
@@ -34,7 +33,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
     ImageView giphyLogoView = (ImageView) findViewById(R.id.giphy_logo_view);
 
-    Glide.with(this)
+    GlideApp.with(this)
         .load(R.raw.large_giphy_logo)
         .into(giphyLogoView);
 
@@ -42,14 +41,15 @@ protected void onCreate(Bundle savedInstanceState) {
     LinearLayoutManager layoutManager = new LinearLayoutManager(this);
     gifList.setLayoutManager(layoutManager);
 
-    RequestBuilder<Drawable> gifItemRequest = Glide.with(this).asDrawable();
+    RequestBuilder<Drawable> gifItemRequest = GlideApp.with(this)
+        .asDrawable();
 
     ViewPreloadSizeProvider<Api.GifResult> preloadSizeProvider =
         new ViewPreloadSizeProvider<>();
     adapter = new GifAdapter(this, gifItemRequest, preloadSizeProvider);
     gifList.setAdapter(adapter);
     RecyclerViewPreloader<Api.GifResult> preloader =
-        new RecyclerViewPreloader<>(Glide.with(this), adapter, preloadSizeProvider, 4);
+        new RecyclerViewPreloader<>(GlideApp.with(this), adapter, preloadSizeProvider, 4);
     gifList.addOnScrollListener(preloader);
   }
 
@@ -83,14 +83,14 @@ public void onSearchComplete(Api.SearchResult result) {
 
     private Api.GifResult[] results = EMPTY_RESULTS;
 
-    public GifAdapter(Activity activity, RequestBuilder<Drawable> requestBuilder,
+    GifAdapter(Activity activity, RequestBuilder<Drawable> requestBuilder,
         ViewPreloadSizeProvider<Api.GifResult> preloadSizeProvider) {
       this.activity = activity;
       this.requestBuilder = requestBuilder;
       this.preloadSizeProvider = preloadSizeProvider;
     }
 
-    public void setResults(Api.GifResult[] results) {
+    void setResults(Api.GifResult[] results) {
       if (results != null) {
         this.results = results;
       } else {
@@ -151,7 +151,7 @@ public int getItemCount() {
   private static class GifViewHolder extends RecyclerView.ViewHolder {
     private final ImageView gifView;
 
-    public GifViewHolder(View itemView) {
+    GifViewHolder(View itemView) {
       super(itemView);
       gifView = (ImageView) itemView.findViewById(R.id.gif_view);
     }
diff --git a/samples/svg/build.gradle b/samples/svg/build.gradle
index e244935ea..433c9c4d5 100644
--- a/samples/svg/build.gradle
+++ b/samples/svg/build.gradle
@@ -4,6 +4,7 @@ dependencies {
     compile project(':library')
     annotationProcessor project(':annotation:compiler')
     compile 'com.caverock:androidsvg:1.2.1'
+    compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/samples/svg/lint.xml b/samples/svg/lint.xml
index 95a2ab036..94bb2b69c 100644
--- a/samples/svg/lint.xml
+++ b/samples/svg/lint.xml
@@ -2,4 +2,5 @@
 <lint>
     <!-- Not supported by all build systems -->
     <issue id="GradleOverrides" severity="ignore" />
+    <issue id="GoogleAppIndexingWarning" severity="ignore"/>
 </lint>
diff --git a/samples/svg/src/main/AndroidManifest.xml b/samples/svg/src/main/AndroidManifest.xml
index 7328e723d..bb5888e5e 100644
--- a/samples/svg/src/main/AndroidManifest.xml
+++ b/samples/svg/src/main/AndroidManifest.xml
@@ -5,7 +5,7 @@
     <uses-permission android:name="android.permission.INTERNET"/>
 
     <application
-        android:allowBackup="true"
+        android:allowBackup="false"
         android:icon="@android:drawable/sym_def_app_icon"
         android:label="@string/app_name">
         <activity
diff --git a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
index 372fbefb6..798d0f07f 100644
--- a/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
+++ b/samples/svg/src/main/java/com/bumptech/glide/samples/svg/SvgModule.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.drawable.PictureDrawable;
+import com.bumptech.glide.Glide;
 import com.bumptech.glide.Registry;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
@@ -14,7 +15,7 @@
 @GlideModule
 public class SvgModule extends AppGlideModule {
   @Override
-  public void registerComponents(Context context, Registry registry) {
+  public void registerComponents(Context context, Glide glide, Registry registry) {
     registry.register(SVG.class, PictureDrawable.class, new SvgDrawableTranscoder())
         .append(InputStream.class, SVG.class, new SvgDecoder());
   }
diff --git a/scripts/upload.gradle b/scripts/upload.gradle
index c35434caa..4b38c3961 100644
--- a/scripts/upload.gradle
+++ b/scripts/upload.gradle
@@ -122,20 +122,36 @@ afterEvaluate { project ->
             it.buildType.name.equalsIgnoreCase('release')
         }
 
-        task androidJavadocs(type: Javadoc, dependsOn: compileReleaseJavaWithJavac) {
+        def getAndroidCompileSdkVersion = project.android.compileSdkVersion
+
+        def getAndroidSdkDirectory = project.android.sdkDirectory
+
+        def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${getAndroidCompileSdkVersion}/android.jar"
+
+        def getSupportJar = "${getAndroidSdkDirectory}/extras/android/support/v4/android-support-v4.jar"
+
+        task androidJavadocs(type: Javadoc, dependsOn: assembleRelease) {
             source = releaseVariants.collect { it.javaCompile.source }
-            classpath = files(releaseVariants.collect { files(it.javaCompile.classpath.files,
-                    project.android.bootClasspath) })
+            classpath = files(releaseVariants.collect {
+                files(it.javaCompile.classpath.files, getAndroidJar, getSupportJar)
+            })
+            classpath += files("${project.projectDir}/build/intermediates/classes/release")
 
             options {
-                links('http://docs.oracle.com/javase/7/docs/api/')
-                linksOffline('http://d.android.com/reference', "${android.sdkDirectory}/docs/reference")
+                links("http://docs.oracle.com/javase/7/docs/api/")
+                linksOffline("http://d.android.com/reference",
+                    "${getAndroidSdkDirectory}/docs/reference")
             }
 
             exclude '**/BuildConfig.java'
             exclude '**/R.java'
         }
 
+        def cleanJavadocTask = task("cleanJavadocTask", type: Delete) {
+            delete androidJavadocs.destinationDir
+        } as Task
+        project.clean.dependsOn(cleanJavadocTask)
+
         task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
             classifier = 'javadoc'
             from androidJavadocs.destinationDir
@@ -152,6 +168,7 @@ afterEvaluate { project ->
             from compileReleaseJavaWithJavac.destinationDir
             exclude '**/R.class'
             exclude '**/BuildConfig.class'
+            exclude '**/R$*.class'
             baseName "${JAR_PREFIX}${project.name}${JAR_POSTFIX}"
         }
 
diff --git a/third_party/gif_decoder/build.gradle b/third_party/gif_decoder/build.gradle
index 16e6d54fb..a19bcda5f 100644
--- a/third_party/gif_decoder/build.gradle
+++ b/third_party/gif_decoder/build.gradle
@@ -1,10 +1,10 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile "com.android.support:support-annotations:${SUPPORT_V4_VERSION}"
+    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 
     testCompile project(':testutil')
-    testCompile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
+    testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
     testCompile "com.google.truth:truth:${TRUTH_VERSION}"
     testCompile "junit:junit:${JUNIT_VERSION}"
     testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
