diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index c3e75c457..90696a73c 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -306,10 +306,7 @@ public boolean apply(AnnotationSpec input) {
                     return !input.type.equals(TypeName.get(Override.class))
                         // SafeVarargs can only be applied to final methods. GlideRequest is
                         // non-final to allow for mocking.
-                        && !input.type.equals(TypeName.get(SafeVarargs.class))
-                        // @CheckResult isn't applicable for RequestBuilder because there is no
-                        // autoClone() in RequestBuilder.
-                        && !input.type.equals(CHECK_RESULT_CLASS_NAME);
+                        && !input.type.equals(TypeName.get(SafeVarargs.class));
                   }
                 })
                 .toList()
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
index ebe989466..b54729593 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerGenerator.java
@@ -21,6 +21,7 @@
 import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
@@ -59,6 +60,8 @@
       "com.bumptech.glide.manager.Lifecycle";
   private static final String REQUEST_MANAGER_TREE_NODE_QUALIFIED_NAME =
       "com.bumptech.glide.manager.RequestManagerTreeNode";
+  private static final ClassName CHECK_RESULT_CLASS_NAME =
+      ClassName.get("android.support.annotation", "CheckResult");
 
   private static final String GENERATED_REQUEST_MANAGER_SIMPLE_NAME =
       "GlideRequests";
@@ -147,6 +150,7 @@ private MethodSpec generateAsMethod(String generatedCodePackageName, TypeSpec re
         .addAnnotation(Override.class)
         .addTypeVariable(TypeVariableName.get("ResourceType"))
         .addParameter(classOfResouceType, "resourceClass")
+        .addAnnotation(AnnotationSpec.builder(CHECK_RESULT_CLASS_NAME).build())
         .returns(requestBuilderOfResourceType)
         .addStatement("return new $T<>(glide, this, resourceClass)",
             this.generatedRequestBuilderClassName)
@@ -160,10 +164,6 @@ private MethodSpec generateAsMethod(String generatedCodePackageName, TypeSpec re
     TypeMirror rawRequestBuilder = processingEnv.getTypeUtils()
         .erasure(requestBuilderType.asType());
 
-    final TypeElement classType =
-        processingEnv.getElementUtils().getTypeElement(Class.class.getCanonicalName());
-    final TypeMirror rawClassType = processingEnv.getTypeUtils().erasure(classType.asType());
-
     return FluentIterable.from(
         processorUtil.findInstanceMethodsReturning(requestManagerType, rawRequestBuilder))
         .filter(new Predicate<ExecutableElement>() {
@@ -195,7 +195,7 @@ private MethodSpec generateRequestManagerMethodOverride(ExecutableElement method
     ParameterizedTypeName generatedRequestBuilderOfType =
         ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
 
-    return MethodSpec.overriding(methodToOverride)
+    MethodSpec.Builder builder = MethodSpec.overriding(methodToOverride)
         .returns(generatedRequestBuilderOfType)
         .addCode(CodeBlock.builder()
             .add("return ($T) super.$N(",
@@ -209,8 +209,12 @@ public String apply(VariableElement input) {
                 })
                 .join(Joiner.on(", ")))
             .add(");\n")
-            .build())
-        .build();
+            .build());
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      builder.addAnnotation(AnnotationSpec.get(mirror));
+    }
+    return builder.build();
   }
 
   private List<MethodSpec> generateAdditionalRequestManagerMethods(
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 55b044f0a..6ac3518b6 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -85,6 +85,7 @@ protected RequestBuilder(Class<TranscodeType> transcodeClass, RequestBuilder<?>
    * @see RequestOptions#apply(RequestOptions)
    * @return This request builder.
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> apply(@NonNull RequestOptions requestOptions) {
     Preconditions.checkNotNull(requestOptions);
     this.requestOptions = getMutableOptions().apply(requestOptions);
@@ -105,6 +106,7 @@ protected RequestOptions getMutableOptions() {
    *
    * @return This request builder.
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> transition(
       @NonNull TransitionOptions<?, ? super TranscodeType> transitionOptions) {
     this.transitionOptions = Preconditions.checkNotNull(transitionOptions);
@@ -120,6 +122,7 @@ protected RequestOptions getMutableOptions() {
    * @param requestListener The request listener to use.
    * @return This request builder.
    */
+  @CheckResult
   @SuppressWarnings("unchecked")
   public RequestBuilder<TranscodeType> listener(
       @Nullable RequestListener<TranscodeType> requestListener) {
@@ -141,6 +144,7 @@ protected RequestOptions getMutableOptions() {
    *
    * <p> Recursive calls to thumbnail are supported. </p>
    */
+  @CheckResult
   @SuppressWarnings("unchecked")
   public RequestBuilder<TranscodeType> thumbnail(
       @Nullable RequestBuilder<TranscodeType> thumbnailRequest) {
@@ -173,6 +177,7 @@ protected RequestOptions getMutableOptions() {
    *                       the thumbnail.
    * @return This request builder.
    */
+  @CheckResult
   @SuppressWarnings("unchecked")
   public RequestBuilder<TranscodeType> thumbnail(float sizeMultiplier) {
     if (sizeMultiplier < 0f || sizeMultiplier > 1f) {
@@ -192,6 +197,7 @@ protected RequestOptions getMutableOptions() {
    * @param model The model to load data for, or null.
    * @return This request builder.
    */
+  @CheckResult
   @SuppressWarnings("unchecked")
   public RequestBuilder<TranscodeType> load(@Nullable Object model) {
     return loadGeneric(model);
@@ -222,6 +228,7 @@ protected RequestOptions getMutableOptions() {
    * @param string A file path, or a uri or url handled by
    * {@link com.bumptech.glide.load.model.UriLoader}.
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> load(@Nullable String string) {
     return loadGeneric(string);
   }
@@ -244,6 +251,7 @@ protected RequestOptions getMutableOptions() {
    * @param uri The Uri representing the image. Must be of a type handled by
    * {@link com.bumptech.glide.load.model.UriLoader}.
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> load(@Nullable Uri uri) {
     return loadGeneric(uri);
   }
@@ -266,6 +274,7 @@ protected RequestOptions getMutableOptions() {
    *
    * @param file The File containing the image
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> load(@Nullable File file) {
     return loadGeneric(file);
   }
@@ -289,6 +298,7 @@ protected RequestOptions getMutableOptions() {
    * @see #load(Integer)
    * @see com.bumptech.glide.signature.ApplicationVersionSignature
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> load(@Nullable Integer resourceId) {
     return loadGeneric(resourceId).apply(signatureOf(ApplicationVersionSignature.obtain(context)));
   }
@@ -303,6 +313,7 @@ protected RequestOptions getMutableOptions() {
    * {@link #load(android.net.Uri)} or {@link #load(String)}.
    */
   @Deprecated
+  @CheckResult
   public RequestBuilder<TranscodeType> load(@Nullable URL url) {
     return loadGeneric(url);
   }
@@ -316,6 +327,7 @@ protected RequestOptions getMutableOptions() {
    * @param model the data to load.
    * @see #load(Object)
    */
+  @CheckResult
   public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
     return loadGeneric(model).apply(signatureOf(new ObjectKey(UUID.randomUUID().toString()))
         .diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true /*skipMemoryCache*/));
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 8275cee2c..18e84d3c7 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -9,6 +9,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Handler;
 import android.os.Looper;
+import android.support.annotation.CheckResult;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -292,6 +293,7 @@ public void onDestroy() {
    *
    * @return A new request builder for loading a {@link android.graphics.Bitmap}
    */
+  @CheckResult
   public RequestBuilder<Bitmap> asBitmap() {
     return as(Bitmap.class).apply(DECODE_TYPE_BITMAP);
   }
@@ -309,6 +311,7 @@ public void onDestroy() {
    * @return A new request builder for loading a
    * {@link com.bumptech.glide.load.resource.gif.GifDrawable}.
    */
+  @CheckResult
   public RequestBuilder<GifDrawable> asGif() {
     return as(GifDrawable.class).apply(DECODE_TYPE_GIF);
   }
@@ -323,6 +326,7 @@ public void onDestroy() {
    *
    * @return A new request builder for loading a {@link Drawable}.
    */
+  @CheckResult
   public RequestBuilder<Drawable> asDrawable() {
     return as(Drawable.class);
   }
@@ -333,6 +337,7 @@ public void onDestroy() {
    *
    * @return A new request builder for loading a {@link Drawable} using the given model.
    */
+  @CheckResult
   public RequestBuilder<Drawable> load(@Nullable Object model) {
     return asDrawable().load(model);
   }
@@ -348,6 +353,7 @@ public void onDestroy() {
    *
    * @return A new request builder for downloading content to cache and returning the cache File.
    */
+  @CheckResult
   public RequestBuilder<File> downloadOnly() {
     return as(File.class).apply(DOWNLOAD_ONLY_OPTIONS);
   }
@@ -358,6 +364,7 @@ public void onDestroy() {
    *
    * @return A new request builder for loading a {@link Drawable} using the given model.
    */
+  @CheckResult
   public RequestBuilder<File> download(@Nullable Object model) {
     return downloadOnly().load(model);
   }
@@ -371,6 +378,7 @@ public void onDestroy() {
    *
    * @return A new request builder for obtaining File paths to content.
    */
+  @CheckResult
   public RequestBuilder<File> asFile() {
     return as(File.class).apply(skipMemoryCacheOf(true));
   }
@@ -383,6 +391,7 @@ public void onDestroy() {
    * @param resourceClass The resource to decode.
    * @return A new request builder for loading the given resource class.
    */
+  @CheckResult
   public <ResourceType> RequestBuilder<ResourceType> as(Class<ResourceType> resourceClass) {
     return new RequestBuilder<>(glide, this, resourceClass);
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java
index ab4ca652c..9780364bf 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalCacheDiskCacheFactory.java
@@ -8,7 +8,10 @@
  * disk cache directory.
  *
  * <p><b>Images can be read by everyone when using external disk cache.</b>
+ *
+ * @deprecated use {@link ExternalPreferredCacheDiskCacheFactory} instead.
  */
+@Deprecated
 public final class ExternalCacheDiskCacheFactory extends DiskLruCacheFactory {
 
   public ExternalCacheDiskCacheFactory(Context context) {
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
new file mode 100644
index 000000000..3f7d9d3a9
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/load/engine/cache/ExternalPreferredCacheDiskCacheFactory.java
@@ -0,0 +1,64 @@
+package com.bumptech.glide.load.engine.cache;
+
+import android.content.Context;
+
+import android.support.annotation.Nullable;
+import java.io.File;
+
+/**
+ * Creates an {@link com.bumptech.glide.disklrucache.DiskLruCache} based disk cache in the external
+ * disk cache directory, which falls back to the internal disk cache if no external storage is
+ * available. If ever fell back to the internal disk cache, will use that one from that moment on.
+ *
+ * <p><b>Images can be read by everyone when using external disk cache.</b>
+ */
+public final class ExternalPreferredCacheDiskCacheFactory extends DiskLruCacheFactory {
+
+  public ExternalPreferredCacheDiskCacheFactory(Context context) {
+    this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR,
+        DiskCache.Factory.DEFAULT_DISK_CACHE_SIZE);
+  }
+
+  public ExternalPreferredCacheDiskCacheFactory(Context context, int diskCacheSize) {
+    this(context, DiskCache.Factory.DEFAULT_DISK_CACHE_DIR, diskCacheSize);
+  }
+
+  public ExternalPreferredCacheDiskCacheFactory(final Context context, final String diskCacheName,
+                                                final int diskCacheSize) {
+    super(new CacheDirectoryGetter() {
+      @Nullable
+      private File getInternalCacheDirectory() {
+        File cacheDirectory = context.getCacheDir();
+        if (cacheDirectory == null) {
+          return null;
+        }
+        if (diskCacheName != null) {
+          return new File(cacheDirectory, diskCacheName);
+        }
+        return cacheDirectory;
+      }
+
+      @Override
+      public File getCacheDirectory() {
+        File internalCacheDirectory = getInternalCacheDirectory();
+
+        // Already used internal cache, so keep using that one,
+        // thus avoiding using both external and internal with transient errors.
+        if ((null != internalCacheDirectory) && internalCacheDirectory.exists()) {
+          return internalCacheDirectory;
+        }
+
+        File cacheDirectory = context.getExternalCacheDir();
+
+        // Shared storage is not available.
+        if (cacheDirectory == null) {
+          return internalCacheDirectory;
+        }
+        if (diskCacheName != null) {
+          return new File(cacheDirectory, diskCacheName);
+        }
+        return cacheDirectory;
+      }
+    }, diskCacheSize);
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
index 2f9cc5e26..e6ca4aa75 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java
@@ -271,7 +271,8 @@ private Bitmap decodeFromWrappedStreams(InputStream is,
     if ((options.inSampleSize == 1 || isKitKatOrGreater) && shouldUsePool(imageType)) {
       int expectedWidth;
       int expectedHeight;
-      if (fixBitmapToRequestedDimensions && isKitKatOrGreater) {
+      if (sourceWidth >= 0 && sourceHeight >= 0
+          && fixBitmapToRequestedDimensions && isKitKatOrGreater) {
         expectedWidth = targetWidth;
         expectedHeight = targetHeight;
       } else {
@@ -336,6 +337,10 @@ static void calculateScaling(
       BitmapFactory.Options options) throws IOException {
     // We can't downsample source content if we can't determine its dimensions.
     if (sourceWidth <= 0 || sourceHeight <= 0) {
+      if (Log.isLoggable(TAG, Log.DEBUG)) {
+        Log.d(TAG, "Unable to determine dimensions for: " + imageType
+            + " with target [" + targetWidth + "x" + targetHeight + "]");
+      }
       return;
     }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
index c81ad3554..671fb7816 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java
@@ -38,8 +38,16 @@
   // See #738.
   private static final List<String> MODELS_REQUIRING_BITMAP_LOCK =
       Arrays.asList(
+          // Moto X gen 2
+          "XT1085",
+          "XT1092",
+          "XT1093",
+          "XT1094",
+          "XT1095",
+          "XT1096",
           "XT1097",
-          "XT1085");
+          "XT1098"
+          );
   /**
    * https://github.com/bumptech/glide/issues/738 On some devices (Moto X with android 5.1) bitmap
    * drawing is not thread safe.
diff --git a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
index d2967bffa..4573dbb86 100644
--- a/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
+++ b/library/src/main/java/com/bumptech/glide/manager/DefaultConnectivityMonitor.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.manager;
 
+import android.annotation.SuppressLint;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -55,6 +56,8 @@ private void unregister() {
   }
 
   @Synthetic
+  // Permissions are checked in the factory instead.
+  @SuppressLint("MissingPermission")
   boolean isConnected(Context context) {
     ConnectivityManager connectivityManager =
         (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
diff --git a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
index bec16fa67..d2ce60308 100644
--- a/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
+++ b/library/src/main/java/com/bumptech/glide/util/MarkEnforcingInputStream.java
@@ -57,7 +57,7 @@ public void reset() throws IOException {
   public long skip(long byteCount) throws IOException {
     long toSkip = getBytesToRead(byteCount);
     if (toSkip == END_OF_STREAM) {
-      return END_OF_STREAM;
+      return 0;
     }
 
     long read = super.skip(toSkip);
diff --git a/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java b/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
index 1e18b4203..5684e3c13 100644
--- a/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
+++ b/library/src/test/java/com/bumptech/glide/util/MarkEnforcingInputStreamTest.java
@@ -135,7 +135,7 @@ public void testReturnsEndOfStream_whenSkipping_withZeroBytesRemainingInMarkLimi
     is.mark(MARK_LIMIT);
 
     assertEquals(MARK_LIMIT, is.skip(DATA_SIZE));
-    assertEquals(-1, is.skip(1));
+    assertEquals(0, is.skip(1));
   }
 
   @Test
