diff --git a/README.md b/README.md
index e6cad510b..3ab88b264 100644
--- a/README.md
+++ b/README.md
@@ -31,8 +31,8 @@ repositories {
 }
 
 dependencies {
-  implementation 'com.github.bumptech.glide:glide:4.7.1'
-  annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
+  implementation 'com.github.bumptech.glide:glide:4.8.0'
+  annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
 }
 ```
 
@@ -42,12 +42,12 @@ Or Maven:
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>glide</artifactId>
-  <version>4.7.1</version>
+  <version>4.8.0</version>
 </dependency>
 <dependency>
   <groupId>com.github.bumptech.glide</groupId>
   <artifactId>compiler</artifactId>
-  <version>4.7.1</version>
+  <version>4.8.0</version>
   <optional>true</optional>
 </dependency>
 ```
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
index 5e10a334b..3469eff24 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/AppModuleProcessor.java
@@ -88,7 +88,8 @@ boolean maybeWriteAppModule() {
       writeRequestOptions(generatedCodePackageName, generatedRequestOptions);
 
     TypeSpec generatedRequestBuilder =
-        requestBuilderGenerator.generate(generatedCodePackageName, generatedRequestOptions);
+        requestBuilderGenerator.generate(
+            generatedCodePackageName, indexedClassNames.extensions, generatedRequestOptions);
     writeRequestBuilder(generatedCodePackageName, generatedRequestBuilder);
 
     TypeSpec requestManager =
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
index b69b2ac37..77c496d8b 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/GlideExtensionValidator.java
@@ -20,7 +20,6 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.tools.Diagnostic.Kind;
 
@@ -89,78 +88,65 @@ private static void validateExtensionConstructor(Element element) {
   }
 
   private void validateGlideOption(ExecutableElement executableElement) {
-    if (returnsVoid(executableElement)) {
-      validateDeprecatedGlideOption(executableElement);
-    } else {
-      validateNewGlideOption(executableElement);
-    }
-  }
-
-  private void validateNewGlideOption(ExecutableElement executableElement) {
-    validateNewGlideOptionAnnotations(executableElement);
+    validateGlideOptionAnnotations(executableElement);
     validateGlideOptionParameters(executableElement);
     TypeMirror returnType = executableElement.getReturnType();
-    if (!isRequestOptions(returnType)) {
-      throw new IllegalArgumentException("@GlideOption methods should return a RequestOptions"
-          + " object, but " + getQualifiedMethodName(executableElement) + " returns " + returnType
-          + ". If you're using old style @GlideOption methods, your method may have a void return"
-          + " type, but doing so is deprecated and support will be removed in a future version");
+    if (!isBaseRequestOptions(returnType)) {
+      throw new IllegalArgumentException("@GlideOption methods should return a"
+          + " BaseRequestOptions<?> object, but " + getQualifiedMethodName(executableElement)
+          + " returns " + returnType + ". If you're using old style @GlideOption methods, your"
+          + " method may have a void return type, but doing so is deprecated and support will be"
+          + " removed in a future version");
     }
     validateGlideOptionOverride(executableElement);
   }
 
-  private void validateNewGlideOptionAnnotations(ExecutableElement executableElement) {
+  private void validateGlideOptionAnnotations(ExecutableElement executableElement) {
     validateAnnotatedNonNull(executableElement);
   }
 
-  private void validateDeprecatedGlideOption(ExecutableElement executableElement) {
-    validateStaticVoid(executableElement, GlideOption.class);
-    validateGlideOptionParameters(executableElement);
-    validateGlideOptionOverride(executableElement);
-  }
-
   private static void validateGlideOptionParameters(ExecutableElement executableElement) {
     if (executableElement.getParameters().isEmpty()) {
       throw new IllegalArgumentException("@GlideOption methods must take a "
-          + "RequestOptions object as their first parameter, but "
+          + "BaseRequestOptions<?> object as their first parameter, but "
           + getQualifiedMethodName(executableElement) + " has none");
     }
     VariableElement first = executableElement.getParameters().get(0);
     TypeMirror expected = first.asType();
-    if (!isRequestOptions(expected)) {
+    if (!isBaseRequestOptions(expected)) {
       throw new IllegalArgumentException("@GlideOption methods must take a"
-          + " RequestOptions object as their first parameter, but the first parameter in "
+          + " BaseRequestOptions<?> object as their first parameter, but the first parameter in "
           + getQualifiedMethodName(executableElement) + " is " + expected);
     }
   }
 
-  private static boolean isRequestOptions(TypeMirror typeMirror) {
-    return typeMirror.toString().equals("com.bumptech.glide.request.RequestOptions");
+  private static boolean isBaseRequestOptions(TypeMirror typeMirror) {
+    return typeMirror.toString().equals("com.bumptech.glide.request.BaseRequestOptions<?>");
   }
 
   private void validateGlideOptionOverride(ExecutableElement element) {
     int overrideType = processorUtil.getOverrideType(element);
-    boolean isOverridingRequestOptionsMethod = isMethodInRequestOptions(element);
-    if (isOverridingRequestOptionsMethod && overrideType == GlideOption.OVERRIDE_NONE) {
+    boolean isOverridingBaseRequestOptionsMethod = isMethodInBaseRequestOptions(element);
+    if (isOverridingBaseRequestOptionsMethod && overrideType == GlideOption.OVERRIDE_NONE) {
       throw new IllegalArgumentException("Accidentally attempting to override a method in"
-          + " RequestOptions. Add an 'override' value in the @GlideOption annotation"
+          + " BaseRequestOptions. Add an 'override' value in the @GlideOption annotation"
           + " if this is intentional. Offending method: "
           + getQualifiedMethodName(element));
-    } else if (!isOverridingRequestOptionsMethod && overrideType != GlideOption.OVERRIDE_NONE) {
+    } else if (!isOverridingBaseRequestOptionsMethod && overrideType != GlideOption.OVERRIDE_NONE) {
       throw new IllegalArgumentException("Requested to override an existing method in"
-          + " RequestOptions, but no such method was found. Offending method: "
+          + " BaseRequestOptions, but no such method was found. Offending method: "
           + getQualifiedMethodName(element));
     }
   }
 
-  private boolean isMethodInRequestOptions(ExecutableElement toFind) {
+  private boolean isMethodInBaseRequestOptions(ExecutableElement toFind) {
     // toFind is a method in a GlideExtension whose first argument is a BaseRequestOptions<?> type.
     // Since we're comparing against methods in BaseRequestOptions itself, we need to drop that
     // first type.
     TypeElement requestOptionsType =
         processingEnvironment
             .getElementUtils()
-            .getTypeElement(RequestOptionsGenerator.REQUEST_OPTIONS_QUALIFIED_NAME);
+            .getTypeElement(RequestOptionsGenerator.BASE_REQUEST_OPTIONS_QUALIFIED_NAME);
     List<String> toFindParameterNames = getComparableParameterNames(toFind, true /*skipFirst*/);
     String toFindSimpleName = toFind.getSimpleName().toString();
     for (Element element : requestOptionsType.getEnclosedElements()) {
@@ -193,16 +179,8 @@ private boolean isMethodInRequestOptions(ExecutableElement toFind) {
   }
 
   private void validateGlideType(ExecutableElement executableElement) {
-    if (returnsVoid(executableElement)) {
-      validateDeprecatedGlideType(executableElement);
-    } else {
-      validateNewGlideType(executableElement);
-    }
-  }
-
-  private void validateNewGlideType(ExecutableElement executableElement) {
     TypeMirror returnType = executableElement.getReturnType();
-    validateNewGlideTypeAnnotations(executableElement);
+    validateGlideTypeAnnotations(executableElement);
     if (!isRequestBuilder(returnType) || !typeMatchesExpected(returnType, executableElement)) {
       String expectedClassName = getGlideTypeValue(executableElement);
       throw new IllegalArgumentException("@GlideType methods should return a RequestBuilder<"
@@ -240,11 +218,6 @@ private boolean isRequestBuilder(TypeMirror typeMirror) {
     return toCompare.toString().equals("com.bumptech.glide.RequestBuilder");
   }
 
-  private static void validateDeprecatedGlideType(ExecutableElement executableElement) {
-    validateStaticVoid(executableElement, GlideType.class);
-    validateGlideTypeParameters(executableElement);
-  }
-
   private static void validateGlideTypeParameters(ExecutableElement executableElement) {
     if (executableElement.getParameters().size() != 1) {
       throw new IllegalArgumentException("@GlideType methods must take a"
@@ -261,7 +234,7 @@ private static void validateGlideTypeParameters(ExecutableElement executableElem
     }
   }
 
-  private void validateNewGlideTypeAnnotations(ExecutableElement executableElement) {
+  private void validateGlideTypeAnnotations(ExecutableElement executableElement) {
     validateAnnotatedNonNull(executableElement);
   }
 
@@ -291,26 +264,4 @@ public String apply(AnnotationMirror input) {
               + " values");
     }
   }
-
-  private static void validateStatic(ExecutableElement executableElement, Class<?> clazz) {
-    if (!executableElement.getModifiers().contains(Modifier.STATIC)) {
-      throw new IllegalArgumentException("@" + clazz.getSimpleName() + " methods must be static");
-    }
-  }
-
-  private static boolean returnsVoid(ExecutableElement executableElement) {
-    TypeMirror returnType = executableElement.getReturnType();
-    return returnType.getKind() == TypeKind.VOID;
-  }
-
-  private static void validateVoid(ExecutableElement executableElement, Class<?> clazz) {
-    if (!returnsVoid(executableElement)) {
-      throw new IllegalArgumentException("@" + clazz.getSimpleName() + " methods must return void");
-    }
-  }
-
-  private static void validateStaticVoid(ExecutableElement executableElement, Class<?> clazz) {
-    validateStatic(executableElement, clazz);
-    validateVoid(executableElement, clazz);
-  }
 }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
index 36a8a153e..b9832f365 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/ProcessorUtil.java
@@ -258,10 +258,6 @@ void infoLog(String toLog) {
     processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, "[" + round + "] " + toLog);
   }
 
-  void warnLog(String toLog) {
-    processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, toLog);
-  }
-
   static CodeBlock generateCastingSuperCall(TypeName toReturn, MethodSpec method) {
     return CodeBlock.builder()
         .add("return ($T) super.$N(", toReturn, method.name)
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
index c110aa429..b45ea1779 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestBuilderGenerator.java
@@ -113,12 +113,12 @@
 
   private final ProcessingEnvironment processingEnv;
   private final ProcessorUtil processorUtil;
-  private ClassName generatedRequestBuilderClassName;
   private final TypeVariableName transcodeTypeName;
-  private ParameterizedTypeName generatedRequestBuilderOfTranscodeType;
   private final TypeElement requestOptionsType;
   private final TypeElement requestBuilderType;
+  private ClassName generatedRequestBuilderClassName;
   private ClassName requestOptionsClassName;
+  private ParameterizedTypeName generatedRequestBuilderOfTranscodeType;
 
   RequestBuilderGenerator(ProcessingEnvironment processingEnv, ProcessorUtil processorUtil) {
     this.processingEnv = processingEnv;
@@ -133,12 +133,10 @@
         REQUEST_OPTIONS_QUALIFIED_NAME);
   }
 
-  TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedOptions) {
-    generatedRequestBuilderClassName =
-        ClassName.get(generatedCodePackageName, GENERATED_REQUEST_BUILDER_SIMPLE_NAME);
-    generatedRequestBuilderOfTranscodeType =
-        ParameterizedTypeName.get(generatedRequestBuilderClassName, transcodeTypeName);
-
+  TypeSpec generate(
+      String generatedCodePackageName,
+      Set<String> glideExtensionClassNames,
+      @Nullable TypeSpec generatedOptions) {
     if (generatedOptions != null) {
       requestOptionsClassName =
           ClassName.get(generatedCodePackageName, generatedOptions.name);
@@ -146,14 +144,25 @@ TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedO
       requestOptionsClassName =
           ClassName.get(
               RequestOptionsGenerator.REQUEST_OPTIONS_PACKAGE_NAME,
-              RequestBuilderGenerator.REQUEST_OPTIONS_SIMPLE_NAME);
+              RequestOptionsGenerator.BASE_REQUEST_OPTIONS_SIMPLE_NAME);
     }
 
+    generatedRequestBuilderClassName =
+        ClassName.get(generatedCodePackageName, GENERATED_REQUEST_BUILDER_SIMPLE_NAME);
+    generatedRequestBuilderOfTranscodeType =
+        ParameterizedTypeName.get(generatedRequestBuilderClassName, transcodeTypeName);
+    RequestOptionsExtensionGenerator requestOptionsExtensionGenerator =
+        new RequestOptionsExtensionGenerator(generatedRequestBuilderOfTranscodeType, processorUtil);
+
     ParameterizedTypeName requestBuilderOfTranscodeType =
         ParameterizedTypeName.get(
             ClassName.get(REQUEST_BUILDER_PACKAGE_NAME, REQUEST_BUILDER_SIMPLE_NAME),
             transcodeTypeName);
 
+    List<MethodSpec> requestOptionsExtensionMethods =
+        requestOptionsExtensionGenerator.generateInstanceMethodsForExtensions(
+            glideExtensionClassNames);
+
     return TypeSpec.classBuilder(GENERATED_REQUEST_BUILDER_SIMPLE_NAME)
         .addJavadoc("Contains all public methods from {@link $T}, all options from\n",
             requestBuilderType)
@@ -176,75 +185,13 @@ TypeSpec generate(String generatedCodePackageName, @Nullable TypeSpec generatedO
         .addSuperinterface(Cloneable.class)
         .addMethods(generateConstructors())
         .addMethod(generateDownloadOnlyRequestMethod())
-        .addMethods(generateGeneratedRequestOptionsEquivalents(generatedOptions))
+        .addMethods(
+            generateGeneratedRequestOptionsEquivalents(
+                requestOptionsExtensionMethods, generatedOptions))
         .addMethods(generateRequestBuilderOverrides())
+        .addMethods(requestOptionsExtensionMethods)
         .build();
   }
-
-  /**
-   * Generates overrides of all methods in {@code com.bumptech.glide.RequestBuilder} that return
-   * {@code com.bumptech.glide.RequestBuilder} so that they return our generated subclass instead.
-   */
-  private List<MethodSpec> generateRequestBuilderOverrides() {
-    TypeMirror rawRequestBuilderType =
-        processingEnv.getTypeUtils().erasure(requestBuilderType.asType());
-    return Lists.transform(
-        processorUtil.findInstanceMethodsReturning(requestBuilderType, rawRequestBuilderType),
-        new Function<ExecutableElement, MethodSpec>() {
-          @Override
-          public MethodSpec apply(ExecutableElement input) {
-            return generateRequestBuilderOverride(input);
-          }
-        });
-  }
-
-  /**
-   * Generates an override of a particular method in {@code com.bumptech.glide.RequestBuilder} that
-   * returns {@code com.bumptech.glide.RequestBuilder} so that it returns our generated subclass
-   * instead.
-   */
-  private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOverride) {
-    // We've already verified that this method returns a RequestBuilder and RequestBuilders have
-    // exactly one type argument, so this is safe unless those assumptions change.
-    TypeMirror typeArgument =
-        ((DeclaredType) methodToOverride.getReturnType()).getTypeArguments().get(0);
-
-    ParameterizedTypeName generatedRequestBuilderOfType =
-        ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
-
-    MethodSpec.Builder builder = ProcessorUtil.overriding(methodToOverride)
-        .returns(generatedRequestBuilderOfType);
-    builder.addCode(CodeBlock.builder()
-        .add("return ($T) super.$N(",
-            generatedRequestBuilderOfType, methodToOverride.getSimpleName())
-        .add(FluentIterable.from(builder.build().parameters)
-            .transform(new Function<ParameterSpec, String>() {
-              @Override
-              public String apply(ParameterSpec input) {
-                return input.name;
-              }
-            })
-            .join(Joiner.on(", ")))
-        .add(");\n")
-        .build());
-
-    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
-      builder = builder.addAnnotation(AnnotationSpec.get(mirror));
-    }
-
-    if (methodToOverride.isVarArgs()) {
-      builder = builder
-          .addModifiers(Modifier.FINAL)
-          .addAnnotation(SafeVarargs.class)
-          .addAnnotation(
-              AnnotationSpec.builder(SuppressWarnings.class)
-                  .addMember("value", "$S", "varargs")
-                  .build());
-    }
-
-    return builder.build();
-  }
-
   /**
    * Generates methods with equivalent names and arguments to methods annotated with
    * {@link GlideOption} in
@@ -252,6 +199,7 @@ public String apply(ParameterSpec input) {
    * {@code com.bumptech.glide.RequestBuilder} subclass.
    */
   private List<MethodSpec> generateGeneratedRequestOptionsEquivalents(
+      final List<MethodSpec> requestOptionsExtensionMethods,
       @Nullable final TypeSpec generatedOptions) {
     if (generatedOptions == null) {
       return Collections.emptyList();
@@ -261,7 +209,7 @@ public String apply(ParameterSpec input) {
         .filter(new Predicate<MethodSpec>() {
           @Override
           public boolean apply(MethodSpec input) {
-            return isUsefulGeneratedRequestOption(input);
+            return isUsefulGeneratedRequestOption(requestOptionsExtensionMethods, input);
           }
         })
         .transform(new Function<MethodSpec, MethodSpec>() {
@@ -273,6 +221,7 @@ public MethodSpec apply(MethodSpec input) {
         .toList();
   }
 
+
   /**
    * Returns {@code true} if the given {@link MethodSpec} is a useful method to have in our
    * {@code com.bumptech.glide.RequestBuilder} subclass.
@@ -281,16 +230,30 @@ public MethodSpec apply(MethodSpec input) {
    * {@code com.bumptech.glide.request.BaseRequestBuilder} subclass, so we only have to filter out
    * methods that override other methods to avoid duplicates.
    */
-  private boolean isUsefulGeneratedRequestOption(MethodSpec requestOptionMethod) {
+  private boolean isUsefulGeneratedRequestOption(
+      List<MethodSpec> requestOptionsExtensionMethods,
+      final MethodSpec requestOptionsMethod) {
     return
-        !EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS.contains(requestOptionMethod.name)
-        && requestOptionMethod.hasModifier(Modifier.PUBLIC)
-        && !requestOptionMethod.hasModifier(Modifier.STATIC)
-        && requestOptionMethod.returnType.toString()
-            .equals(requestOptionsClassName.toString());
+        !EXCLUDED_METHODS_FROM_BASE_REQUEST_OPTIONS.contains(requestOptionsMethod.name)
+            && requestOptionsMethod.hasModifier(Modifier.PUBLIC)
+            && !requestOptionsMethod.hasModifier(Modifier.STATIC)
+            && requestOptionsMethod.returnType.toString().equals(requestOptionsClassName.toString())
+            && !isExtensionMethod(requestOptionsExtensionMethods, requestOptionsMethod);
   }
 
-   /**
+  private boolean isExtensionMethod(
+      List<MethodSpec> requestOptionsExtensionMethods, final MethodSpec requestOptionsMethod) {
+     return
+         FluentIterable.from(requestOptionsExtensionMethods).anyMatch(new Predicate<MethodSpec>() {
+           @Override
+           public boolean apply(MethodSpec input) {
+             return input.name.equals(requestOptionsMethod.name)
+                 && input.parameters.equals(requestOptionsMethod.parameters);
+           }
+         });
+  }
+
+  /**
    * Generates a particular method with  an equivalent name and arguments to the given method
    * from the generated {@code com.bumptech.glide.request.BaseRequestBuilder} subclass.
    */
@@ -331,17 +294,8 @@ public boolean apply(AnnotationSpec input) {
         .addTypeVariables(requestOptionMethod.typeVariables)
         .addParameters(requestOptionMethod.parameters)
         .returns(generatedRequestBuilderOfTranscodeType)
-        .beginControlFlow(
-            "if (getMutableOptions() instanceof $T)", requestOptionsClassName)
-        .addCode("this.requestOptions = (($T) getMutableOptions())",
-            requestOptionsClassName)
-        .addCode(callRequestOptionsMethod)
-        .nextControlFlow("else")
-        .addCode(CodeBlock.of("this.requestOptions = new $T().apply(this.requestOptions)",
-            requestOptionsClassName))
-        .addCode(callRequestOptionsMethod)
-        .endControlFlow()
-        .addStatement("return this");
+        .addCode("return ($T) super", generatedRequestBuilderOfTranscodeType)
+        .addCode(callRequestOptionsMethod);
 
     AnnotationSpec suppressWarnings = buildSuppressWarnings(requestOptionMethod);
     if (suppressWarnings != null) {
@@ -350,6 +304,7 @@ public boolean apply(AnnotationSpec input) {
     return result.build();
   }
 
+
   @Nullable
   private AnnotationSpec buildSuppressWarnings(MethodSpec requestOptionMethod) {
     Set<String> suppressions = new HashSet<>();
@@ -391,6 +346,72 @@ public String apply(CodeBlock input) {
     return builder.build();
   }
 
+
+  /**
+   * Generates overrides of all methods in {@code com.bumptech.glide.RequestBuilder} that return
+   * {@code com.bumptech.glide.RequestBuilder} so that they return our generated subclass instead.
+   */
+  private List<MethodSpec> generateRequestBuilderOverrides() {
+    TypeMirror rawRequestBuilderType =
+        processingEnv.getTypeUtils().erasure(requestBuilderType.asType());
+    return Lists.transform(
+        processorUtil.findInstanceMethodsReturning(requestBuilderType, rawRequestBuilderType),
+        new Function<ExecutableElement, MethodSpec>() {
+          @Override
+          public MethodSpec apply(ExecutableElement input) {
+            return generateRequestBuilderOverride(input);
+          }
+        });
+  }
+
+
+  /**
+   * Generates an override of a particular method in {@code com.bumptech.glide.RequestBuilder} that
+   * returns {@code com.bumptech.glide.RequestBuilder} so that it returns our generated subclass
+   * instead.
+   */
+  private MethodSpec generateRequestBuilderOverride(ExecutableElement methodToOverride) {
+    // We've already verified that this method returns a RequestBuilder and RequestBuilders have
+    // exactly one type argument, so this is safe unless those assumptions change.
+    TypeMirror typeArgument =
+        ((DeclaredType) methodToOverride.getReturnType()).getTypeArguments().get(0);
+
+    ParameterizedTypeName generatedRequestBuilderOfType =
+        ParameterizedTypeName.get(generatedRequestBuilderClassName, ClassName.get(typeArgument));
+
+    MethodSpec.Builder builder = ProcessorUtil.overriding(methodToOverride)
+        .returns(generatedRequestBuilderOfType);
+    builder.addCode(CodeBlock.builder()
+        .add("return ($T) super.$N(",
+            generatedRequestBuilderOfType, methodToOverride.getSimpleName())
+        .add(FluentIterable.from(builder.build().parameters)
+            .transform(new Function<ParameterSpec, String>() {
+              @Override
+              public String apply(ParameterSpec input) {
+                return input.name;
+              }
+            })
+            .join(Joiner.on(", ")))
+        .add(");\n")
+        .build());
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      builder = builder.addAnnotation(AnnotationSpec.get(mirror));
+    }
+
+    if (methodToOverride.isVarArgs()) {
+      builder = builder
+          .addModifiers(Modifier.FINAL)
+          .addAnnotation(SafeVarargs.class)
+          .addAnnotation(
+              AnnotationSpec.builder(SuppressWarnings.class)
+                  .addMember("value", "$S", "varargs")
+                  .build());
+    }
+
+    return builder.build();
+  }
+
   private List<MethodSpec> generateConstructors() {
     ParameterizedTypeName classOfTranscodeType =
         ParameterizedTypeName.get(ClassName.get(Class.class), transcodeTypeName);
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
index 4aec3c8bb..d20a7fd2a 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestManagerFactoryGenerator.java
@@ -68,7 +68,6 @@
 
     TypeElement requestManagerType = elementUtils.getTypeElement(REQUEST_MANAGER_QUALIFIED_NAME);
     requestManagerClassName = ClassName.get(requestManagerType);
-
   }
 
   TypeSpec generate(String generatedCodePackageName, TypeSpec generatedRequestManagerSpec) {
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsExtensionGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsExtensionGenerator.java
new file mode 100644
index 000000000..450ab8326
--- /dev/null
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsExtensionGenerator.java
@@ -0,0 +1,139 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_EXTEND;
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.checkResult;
+import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
+
+import com.bumptech.glide.annotation.GlideOption;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.TypeName;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeKind;
+
+/**
+ * Generates method overrides for classes that want to mix in {@link GlideOption} annotated methods
+ * in Glide extensions.
+ */
+final class RequestOptionsExtensionGenerator {
+  private TypeName containingClassName;
+  private ProcessorUtil processorUtil;
+
+  RequestOptionsExtensionGenerator(TypeName containingClassName, ProcessorUtil processorUtil) {
+    this.containingClassName = containingClassName;
+    this.processorUtil = processorUtil;
+  }
+
+  /**
+   * Returns the set of {@link GlideOption} annotated methods in the classes that correspond to the
+   * given extension class names.
+   */
+  List<ExecutableElement> getRequestOptionExtensionMethods(Set<String> glideExtensionClassNames) {
+   return processorUtil.findAnnotatedElementsInClasses(glideExtensionClassNames, GlideOption.class);
+  }
+
+  /**
+   * Returns a list containing an override {@link MethodSpec} for all {@link GlideOption} annotated
+   * methods in the classes that correspond to the given extension class names.
+   */
+  List<MethodSpec> generateInstanceMethodsForExtensions(Set<String> glideExtensionClassNames) {
+    List<ExecutableElement> requestOptionExtensionMethods =
+        getRequestOptionExtensionMethods(glideExtensionClassNames);
+
+    List<MethodSpec> result = new ArrayList<>(requestOptionExtensionMethods.size());
+    for (ExecutableElement requestOptionsExtensionMethod : requestOptionExtensionMethods) {
+      result.add(generateMethodsForRequestOptionsExtension(requestOptionsExtensionMethod));
+    }
+
+    return result;
+  }
+
+  private MethodSpec generateMethodsForRequestOptionsExtension(
+      ExecutableElement element) {
+    // Assert for legacy versions
+    if (element.getReturnType().getKind() == TypeKind.VOID) {
+      throw new IllegalArgumentException(
+          "The " + element.getSimpleName() + " method annotated with @GlideOption in the "
+              + element.getEnclosingElement().getSimpleName() + " @GlideExtension is using a legacy"
+              + " format that is no longer supported. Please change your method definition so that"
+              + " your @GlideModule annotated methods return BaseRequestOptions<?> objects instead"
+              + " of null.");
+    }
+
+    int overrideType = processorUtil.getOverrideType(element);
+
+    String methodName = element.getSimpleName().toString();
+    MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName)
+        .addModifiers(Modifier.PUBLIC)
+        .addJavadoc(processorUtil.generateSeeMethodJavadoc(element))
+        .varargs(element.isVarArgs())
+        .returns(containingClassName)
+        .addAnnotation(
+            AnnotationSpec.builder(SuppressWarnings.class)
+                .addMember("value", "$S", "unchecked")
+                .build());
+
+    // The 0th element is expected to be a RequestOptions object.
+    List<? extends VariableElement> paramElements =
+        element.getParameters().subList(1, element.getParameters().size());
+    List<ParameterSpec> parameters = ProcessorUtil.getParameters(paramElements);
+    builder.addParameters(parameters);
+
+    String extensionRequestOptionsArgument;
+    if (overrideType == OVERRIDE_EXTEND) {
+      builder
+          .addJavadoc(
+              processorUtil.generateSeeMethodJavadoc(
+                  containingClassName, methodName, paramElements))
+          .addAnnotation(Override.class);
+
+      List<Object> methodArgs = new ArrayList<>();
+      methodArgs.add(element.getSimpleName().toString());
+      StringBuilder methodLiterals = new StringBuilder();
+      if (!parameters.isEmpty()) {
+        for (ParameterSpec parameter : parameters) {
+          methodLiterals.append("$L, ");
+          methodArgs.add(parameter.name);
+        }
+        methodLiterals = new StringBuilder(
+            methodLiterals.substring(0, methodLiterals.length() - 2));
+      }
+      extensionRequestOptionsArgument = CodeBlock.builder()
+          .add("super.$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
+          .build()
+          .toString();
+    } else {
+      extensionRequestOptionsArgument = "this";
+    }
+
+    List<Object> args = new ArrayList<>();
+    StringBuilder code = new StringBuilder("return ($T) $T.$L($L, ");
+    args.add(containingClassName);
+    args.add(ClassName.get(element.getEnclosingElement().asType()));
+    args.add(element.getSimpleName().toString());
+    args.add(extensionRequestOptionsArgument);
+    if (!parameters.isEmpty()) {
+      for (ParameterSpec parameter : parameters) {
+        code.append("$L, ");
+        args.add(parameter.name);
+      }
+    }
+    code = new StringBuilder(code.substring(0, code.length() - 2));
+    code.append(")");
+    builder.addStatement(code.toString(), args.toArray(new Object[0]));
+
+    builder
+        .addAnnotation(checkResult())
+        .addAnnotation(nonNull());
+
+    return builder.build();
+  }
+}
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
index 3697aeaee..f68cde6e8 100644
--- a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsGenerator.java
@@ -1,15 +1,14 @@
 package com.bumptech.glide.annotation.compiler;
 
-import static com.bumptech.glide.annotation.GlideOption.OVERRIDE_EXTEND;
 import static com.bumptech.glide.annotation.compiler.ProcessorUtil.checkResult;
 import static com.bumptech.glide.annotation.compiler.ProcessorUtil.nonNull;
 
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
 import com.google.common.base.Function;
-import com.google.common.base.Joiner;
 import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
+import com.google.common.base.Predicate;
 import com.google.common.base.Strings;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
@@ -30,13 +29,11 @@
 import java.util.Set;
 import javax.annotation.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.TypeParameterElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.TypeKind;
 
 /**
  * Generates a new implementation of {@code com.bumptech.glide.request.RequestOptions}
@@ -78,16 +75,21 @@
   static final String REQUEST_OPTIONS_QUALIFIED_NAME =
       REQUEST_OPTIONS_PACKAGE_NAME + "." + REQUEST_OPTIONS_SIMPLE_NAME;
 
-  private final ProcessingEnvironment processingEnvironment;
+  static final String BASE_REQUEST_OPTIONS_SIMPLE_NAME = "BaseRequestOptions";
+  static final String BASE_REQUEST_OPTIONS_QUALIFIED_NAME =
+      REQUEST_OPTIONS_PACKAGE_NAME + "." + BASE_REQUEST_OPTIONS_SIMPLE_NAME;
+
+  private int nextFieldId;
+
   private final ClassName requestOptionsName;
   private final TypeElement requestOptionsType;
   private final ProcessorUtil processorUtil;
+  private final RequestOptionsOverrideGenerator requestOptionsOverrideGenerator;
+
   private ClassName glideOptionsName;
-  private int nextStaticFieldUniqueId;
 
   RequestOptionsGenerator(
       ProcessingEnvironment processingEnvironment, ProcessorUtil processorUtil) {
-    this.processingEnvironment = processingEnvironment;
     this.processorUtil = processorUtil;
 
     requestOptionsName = ClassName.get(REQUEST_OPTIONS_PACKAGE_NAME,
@@ -95,19 +97,55 @@
 
     requestOptionsType = processingEnvironment.getElementUtils().getTypeElement(
         REQUEST_OPTIONS_QUALIFIED_NAME);
+
+    requestOptionsOverrideGenerator =
+        new RequestOptionsOverrideGenerator(processingEnvironment, processorUtil);
   }
 
   TypeSpec generate(String generatedCodePackageName, Set<String> glideExtensionClassNames) {
     glideOptionsName =
         ClassName.get(generatedCodePackageName, GENERATED_REQUEST_OPTIONS_SIMPLE_NAME);
 
-    List<MethodAndStaticVar> methodsForExtensions =
-        generateMethodsForExtensions(glideExtensionClassNames);
+    RequestOptionsExtensionGenerator requestOptionsExtensionGenerator =
+        new RequestOptionsExtensionGenerator(glideOptionsName, processorUtil);
+    List<MethodAndStaticVar> instanceMethodsForExtensions =
+        FluentIterable.from(
+            requestOptionsExtensionGenerator
+                .generateInstanceMethodsForExtensions(glideExtensionClassNames))
+            .transform(new Function<MethodSpec, MethodAndStaticVar>() {
+              @Override
+              public MethodAndStaticVar apply(MethodSpec input) {
+                return new MethodAndStaticVar(input);
+              }
+            })
+            .toList();
+
+    List<MethodAndStaticVar> staticMethodsForExtensions =
+        FluentIterable.from(
+            requestOptionsExtensionGenerator.getRequestOptionExtensionMethods(
+                glideExtensionClassNames))
+            .filter(new Predicate<ExecutableElement>() {
+              @Override
+              public boolean apply(ExecutableElement input) {
+                return !skipStaticMethod(input);
+              }
+            })
+        .transform(new Function<ExecutableElement, MethodAndStaticVar>() {
+          @Override
+          public MethodAndStaticVar apply(ExecutableElement input) {
+            return generateStaticMethodEquivalentForExtensionMethod(input);
+          }
+        })
+        .toList();
+
+    List<MethodAndStaticVar> methodsForExtensions = new ArrayList<>();
+    methodsForExtensions.addAll(instanceMethodsForExtensions);
+    methodsForExtensions.addAll(staticMethodsForExtensions);
 
-    Set<MethodSignature> extensionMethodSignatures = ImmutableSet.copyOf(
-        Iterables.transform(methodsForExtensions,
-            new Function<MethodAndStaticVar, MethodSignature>() {
-              @Nullable
+    Set<MethodSignature> extensionMethodSignatures =
+        ImmutableSet.copyOf(
+            Iterables.transform(methodsForExtensions,
+                new Function<MethodAndStaticVar, MethodSignature>() {
               @Override
               public MethodSignature apply(MethodAndStaticVar f) {
                 return new MethodSignature(f.method);
@@ -115,7 +153,9 @@ public MethodSignature apply(MethodAndStaticVar f) {
             }));
 
     List<MethodAndStaticVar> staticOverrides = generateStaticMethodOverridesForRequestOptions();
-    List<MethodSpec> instanceOverrides = generateInstanceMethodOverridesForRequestOptions();
+    List<MethodSpec> instanceOverrides =
+        requestOptionsOverrideGenerator.generateInstanceMethodOverridesForRequestOptions(
+            glideOptionsName);
 
     List<MethodAndStaticVar> allMethodsAndStaticVars = new ArrayList<>();
     for (MethodAndStaticVar item : staticOverrides) {
@@ -167,226 +207,6 @@ private CodeBlock generateClassJavadoc(Set<String> glideExtensionClassNames) {
     return builder.build();
   }
 
-  private List<MethodAndStaticVar> generateMethodsForExtensions(
-      Set<String> glideExtensionClassNames) {
-    List<ExecutableElement> requestOptionExtensionMethods =
-        processorUtil.findAnnotatedElementsInClasses(
-            glideExtensionClassNames, GlideOption.class);
-
-    List<MethodAndStaticVar> result = new ArrayList<>(requestOptionExtensionMethods.size());
-    for (ExecutableElement requestOptionsExtensionMethod : requestOptionExtensionMethods) {
-      result.addAll(generateMethodsForRequestOptionsExtension(requestOptionsExtensionMethod));
-    }
-
-    return result;
-  }
-
-  private List<MethodSpec> generateInstanceMethodOverridesForRequestOptions() {
-    return Lists.transform(
-        processorUtil.findInstanceMethodsReturning(requestOptionsType, requestOptionsType),
-        new Function<ExecutableElement, MethodSpec>() {
-          @Override
-          public MethodSpec apply(ExecutableElement input) {
-            return generateRequestOptionOverride(input);
-          }
-        });
-  }
-
-  private MethodSpec generateRequestOptionOverride(ExecutableElement methodToOverride) {
-    MethodSpec.Builder result = ProcessorUtil.overriding(methodToOverride)
-        .returns(glideOptionsName)
-        .addModifiers(Modifier.FINAL);
-    result.addCode(CodeBlock.builder()
-        .add("return ($T) super.$N(", glideOptionsName, methodToOverride.getSimpleName())
-        .add(FluentIterable.from(result.build().parameters)
-            .transform(new Function<ParameterSpec, String>() {
-              @Override
-              public String apply(ParameterSpec input) {
-                return input.name;
-              }
-            })
-            .join(Joiner.on(", ")))
-        .add(");\n")
-        .build());
-
-    if (methodToOverride.getSimpleName().toString().equals("transforms")) {
-      result
-          .addAnnotation(SafeVarargs.class)
-          .addAnnotation(
-              AnnotationSpec.builder(SuppressWarnings.class)
-                  .addMember("value", "$S", "varargs")
-                  .build());
-    }
-
-    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
-      result.addAnnotation(AnnotationSpec.get(mirror));
-    }
-
-    return result.build();
-  }
-
-  private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtension(
-      ExecutableElement element) {
-    if (element.getReturnType().getKind() == TypeKind.VOID) {
-      processorUtil.warnLog(
-          "The " + element.getSimpleName() + " method annotated with @GlideOption in the "
-              + element.getEnclosingElement().getSimpleName() + " @GlideExtension is using a legacy"
-              + " format. Support will be removed in a future version. Please change your method"
-              + " definition so that your @GlideModule annotated methods return RequestOptions"
-              + " objects instead of null.");
-      return generateMethodsForRequestOptionsExtensionDeprecated(element);
-    } else {
-      return generateMethodsForRequestOptionsExtensionNew(element);
-    }
-  }
-
-  private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtensionNew(
-      ExecutableElement element) {
-    int overrideType = processorUtil.getOverrideType(element);
-
-    String methodName = element.getSimpleName().toString();
-    MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName)
-        .addModifiers(Modifier.PUBLIC)
-        .addJavadoc(processorUtil.generateSeeMethodJavadoc(element))
-        .varargs(element.isVarArgs())
-        .returns(glideOptionsName);
-
-    // The 0th element is expected to be a RequestOptions object.
-    List<? extends VariableElement> paramElements =
-        element.getParameters().subList(1, element.getParameters().size());
-    List<ParameterSpec> parameters = ProcessorUtil.getParameters(paramElements);
-    builder.addParameters(parameters);
-
-    String extensionRequestOptionsArgument;
-    if (overrideType == OVERRIDE_EXTEND) {
-      builder
-          .addJavadoc(
-              processorUtil.generateSeeMethodJavadoc(requestOptionsName, methodName, paramElements))
-          .addAnnotation(Override.class);
-
-      List<Object> methodArgs = new ArrayList<>();
-      methodArgs.add(element.getSimpleName().toString());
-      StringBuilder methodLiterals = new StringBuilder();
-      if (!parameters.isEmpty()) {
-        for (ParameterSpec parameter : parameters) {
-          methodLiterals.append("$L, ");
-          methodArgs.add(parameter.name);
-        }
-        methodLiterals = new StringBuilder(
-            methodLiterals.substring(0, methodLiterals.length() - 2));
-      }
-      extensionRequestOptionsArgument = CodeBlock.builder()
-          .add("super.$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
-          .build()
-          .toString();
-    } else {
-      extensionRequestOptionsArgument = "this";
-    }
-
-    List<Object> args = new ArrayList<>();
-    StringBuilder code = new StringBuilder("return ($T) $T.$L($L, ");
-    args.add(glideOptionsName);
-    args.add(ClassName.get(element.getEnclosingElement().asType()));
-    args.add(element.getSimpleName().toString());
-    args.add(extensionRequestOptionsArgument);
-    if (!parameters.isEmpty()) {
-      for (ParameterSpec parameter : parameters) {
-        code.append("$L, ");
-        args.add(parameter.name);
-      }
-    }
-    code = new StringBuilder(code.substring(0, code.length() - 2));
-    code.append(")");
-    builder.addStatement(code.toString(), args.toArray(new Object[0]));
-
-    builder
-        .addAnnotation(checkResult())
-        .addAnnotation(nonNull());
-
-    List<MethodAndStaticVar> result = new ArrayList<>();
-    result.add(new MethodAndStaticVar(builder.build()));
-    MethodAndStaticVar methodAndVar = generateStaticMethodEquivalentForExtensionMethod(element);
-    if (methodAndVar != null) {
-      result.add(methodAndVar);
-    }
-
-    return result;
-  }
-
-  private List<MethodAndStaticVar> generateMethodsForRequestOptionsExtensionDeprecated(
-      ExecutableElement element) {
-    int overrideType = processorUtil.getOverrideType(element);
-
-    String methodName = element.getSimpleName().toString();
-    MethodSpec.Builder builder = MethodSpec.methodBuilder(methodName)
-        .addModifiers(Modifier.PUBLIC)
-        .addJavadoc(processorUtil.generateSeeMethodJavadoc(element))
-        .varargs(element.isVarArgs())
-        .returns(glideOptionsName);
-
-    // The 0th element is expected to be a RequestOptions object.
-    List<? extends VariableElement> paramElements =
-        element.getParameters().subList(1, element.getParameters().size());
-    List<ParameterSpec> parameters = ProcessorUtil.getParameters(paramElements);
-    builder.addParameters(parameters);
-
-    // Generates the String and list of arguments to pass in when calling this method or super.
-    // IE centerCrop(context) creates methodLiterals="%L" and methodArgs=[centerCrop, context].
-    List<Object> methodArgs = new ArrayList<>();
-    methodArgs.add(element.getSimpleName().toString());
-    StringBuilder methodLiterals = new StringBuilder();
-    if (!parameters.isEmpty()) {
-      for (ParameterSpec parameter : parameters) {
-        methodLiterals.append("$L, ");
-        methodArgs.add(parameter.name);
-      }
-      methodLiterals = new StringBuilder(methodLiterals.substring(0, methodLiterals.length() - 2));
-    }
-
-    builder.beginControlFlow("if (isAutoCloneEnabled())")
-        .addStatement(
-            "return clone().$N(" + methodLiterals + ")", methodArgs.toArray(new Object[0]))
-        .endControlFlow();
-
-    // Add the correct super() call.
-    if (overrideType == OVERRIDE_EXTEND) {
-      String callSuper = "super.$L(" + methodLiterals + ")";
-      builder.addStatement(callSuper, methodArgs.toArray(new Object[0]))
-          .addJavadoc(processorUtil.generateSeeMethodJavadoc(
-              requestOptionsName, methodName, paramElements))
-          .addAnnotation(Override.class);
-    }
-
-    // Adds: <AnnotatedClass>.<thisMethodName>(RequestOptions<?>, <arg1>, <arg2>, <argN>);
-    List<Object> args = new ArrayList<>();
-    StringBuilder code = new StringBuilder("$T.$L($L, ");
-    args.add(ClassName.get(element.getEnclosingElement().asType()));
-    args.add(element.getSimpleName().toString());
-    args.add("this");
-    if (!parameters.isEmpty()) {
-      for (ParameterSpec parameter : parameters) {
-        code.append("$L, ");
-        args.add(parameter.name);
-      }
-    }
-    code = new StringBuilder(code.substring(0, code.length() - 2));
-    code.append(")");
-    builder.addStatement(code.toString(), args.toArray(new Object[0]));
-
-    builder.addStatement("return this")
-        .addAnnotation(checkResult())
-        .addAnnotation(nonNull());
-
-    List<MethodAndStaticVar> result = new ArrayList<>();
-    result.add(new MethodAndStaticVar(builder.build()));
-    MethodAndStaticVar methodAndVar = generateStaticMethodEquivalentForExtensionMethod(element);
-    if (methodAndVar != null) {
-      result.add(methodAndVar);
-    }
-
-    return result;
-  }
-
   private List<MethodAndStaticVar> generateStaticMethodOverridesForRequestOptions() {
     List<ExecutableElement> staticMethodsThatReturnRequestOptions =
         processorUtil.findStaticMethodsReturning(requestOptionsType, requestOptionsType);
@@ -457,7 +277,7 @@ private MethodAndStaticVar generateStaticMethodEquivalentForRequestOptionsStatic
       // }
 
       // Mix in an incrementing unique id to handle method overloading.
-      String staticVariableName = staticMethodName + nextStaticFieldUniqueId++;
+      String staticVariableName = staticMethodName + nextFieldId++;
       requiredStaticField = FieldSpec.builder(glideOptionsName, staticVariableName)
           .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
           .build();
@@ -495,13 +315,33 @@ private static boolean memoizeStaticMethodFromArguments(ExecutableElement static
         .equals("android.content.Context"));
   }
 
-  @Nullable
+  private StringBuilder createNewOptionAndCall(boolean memoize,
+      MethodSpec.Builder methodSpecBuilder,
+      String start, List<ParameterSpec> specs) {
+    StringBuilder createNewOptionAndCall = new StringBuilder(start);
+    if (!specs.isEmpty()) {
+      methodSpecBuilder.addParameters(specs);
+      for (ParameterSpec parameter : specs) {
+        createNewOptionAndCall.append(parameter.name);
+        // use the Application Context to avoid memory leaks.
+        if (memoize && isAndroidContext(parameter)) {
+          createNewOptionAndCall.append(".getApplicationContext()");
+        }
+        createNewOptionAndCall.append(", ");
+      }
+      createNewOptionAndCall = new StringBuilder(
+          createNewOptionAndCall.substring(0, createNewOptionAndCall.length() - 2));
+    }
+    createNewOptionAndCall.append(")");
+    return createNewOptionAndCall;
+  }
+
+  private boolean isAndroidContext(ParameterSpec parameter) {
+    return parameter.type.toString().equals("android.content.Context");
+  }
+
   private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
       ExecutableElement instanceMethod) {
-    boolean skipStaticMethod = skipStaticMethod(instanceMethod);
-    if (skipStaticMethod) {
-      return null;
-    }
     String staticMethodName = getStaticMethodName(instanceMethod);
     String instanceMethodName = instanceMethod.getSimpleName().toString();
     if (Strings.isNullOrEmpty(staticMethodName)) {
@@ -544,7 +384,7 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
       // }
 
       // Mix in an incrementing unique id to handle method overloading.
-      String staticVariableName = staticMethodName + nextStaticFieldUniqueId++;
+      String staticVariableName = staticMethodName + nextFieldId++;
       requiredStaticField = FieldSpec.builder(glideOptionsName, staticVariableName)
           .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
           .build();
@@ -573,31 +413,6 @@ private MethodAndStaticVar generateStaticMethodEquivalentForExtensionMethod(
     return new MethodAndStaticVar(methodSpecBuilder.build(), requiredStaticField);
   }
 
-  private StringBuilder createNewOptionAndCall(boolean memoize,
-      MethodSpec.Builder methodSpecBuilder,
-      String start, List<ParameterSpec> specs) {
-    StringBuilder createNewOptionAndCall = new StringBuilder(start);
-    if (!specs.isEmpty()) {
-      methodSpecBuilder.addParameters(specs);
-      for (ParameterSpec parameter : specs) {
-        createNewOptionAndCall.append(parameter.name);
-        // use the Application Context to avoid memory leaks.
-        if (memoize && isAndroidContext(parameter)) {
-          createNewOptionAndCall.append(".getApplicationContext()");
-        }
-        createNewOptionAndCall.append(", ");
-      }
-      createNewOptionAndCall = new StringBuilder(
-          createNewOptionAndCall.substring(0, createNewOptionAndCall.length() - 2));
-    }
-    createNewOptionAndCall.append(")");
-    return createNewOptionAndCall;
-  }
-
-  private boolean isAndroidContext(ParameterSpec parameter) {
-    return parameter.type.toString().equals("android.content.Context");
-  }
-
   @Nullable
   private static String getStaticMethodName(ExecutableElement element) {
     GlideOption glideOption =
@@ -648,7 +463,6 @@ private static boolean skipStaticMethod(ExecutableElement element) {
             @Override
             public TypeName apply(ParameterSpec parameterSpec) {
               return parameterSpec.type;
-
             }
           });
     }
diff --git a/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java
new file mode 100644
index 000000000..065ac564f
--- /dev/null
+++ b/annotation/compiler/src/main/java/com/bumptech/glide/annotation/compiler/RequestOptionsOverrideGenerator.java
@@ -0,0 +1,105 @@
+package com.bumptech.glide.annotation.compiler;
+
+import static com.bumptech.glide.annotation.compiler.RequestOptionsGenerator.BASE_REQUEST_OPTIONS_QUALIFIED_NAME;
+
+import com.google.common.base.Function;
+import com.google.common.base.Joiner;
+import com.google.common.base.Predicate;
+import com.google.common.collect.FluentIterable;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.TypeName;
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+
+/**
+ * Generates overrides for BaseRequestOptions methods so that subclasses' methods return the
+ * subclass type, not just BaseRequestOptions.
+ */
+final class RequestOptionsOverrideGenerator {
+
+  private final TypeElement baseRequestOptionsType;
+  private ProcessorUtil processorUtil;
+
+  RequestOptionsOverrideGenerator(
+      ProcessingEnvironment processingEnv, ProcessorUtil processorUtil) {
+
+    this.processorUtil = processorUtil;
+    baseRequestOptionsType = processingEnv.getElementUtils().getTypeElement(
+        BASE_REQUEST_OPTIONS_QUALIFIED_NAME);
+  }
+
+  List<MethodSpec> generateInstanceMethodOverridesForRequestOptions(TypeName typeToOverrideIn) {
+    return generateInstanceMethodOverridesForRequestOptions(
+        typeToOverrideIn, Collections.<String>emptySet());
+  }
+
+  List<MethodSpec> generateInstanceMethodOverridesForRequestOptions(
+      final TypeName typeToOverrideIn, final Set<String> excludedMethods) {
+    return
+        FluentIterable.from(
+            processorUtil.findInstanceMethodsReturning(
+                baseRequestOptionsType, baseRequestOptionsType))
+            .filter(new Predicate<ExecutableElement>() {
+              @Override
+              public boolean apply(ExecutableElement input) {
+                return !excludedMethods.contains(input.getSimpleName().toString());
+              }
+            })
+            .transform(
+        new Function<ExecutableElement, MethodSpec>() {
+          @Override
+          public MethodSpec apply(ExecutableElement input) {
+            return generateRequestOptionOverride(typeToOverrideIn, input);
+          }
+        })
+        .toList();
+  }
+
+  private MethodSpec generateRequestOptionOverride(
+      TypeName typeToOverrideIn, ExecutableElement methodToOverride) {
+    MethodSpec.Builder result =
+        ProcessorUtil.overriding(methodToOverride)
+            .returns(typeToOverrideIn);
+    result.addCode(
+        CodeBlock.builder()
+            .add(
+                "return ($T) super.$N(",
+                typeToOverrideIn,
+                methodToOverride.getSimpleName())
+            .add(FluentIterable.from(result.build().parameters)
+                .transform(new Function<ParameterSpec, String>() {
+                  @Override
+                  public String apply(ParameterSpec input) {
+                    return input.name;
+                  }
+                })
+                .join(Joiner.on(", ")))
+            .add(");\n")
+            .build());
+
+    if (methodToOverride.getSimpleName().toString().equals("transforms")) {
+      result
+          .addModifiers(Modifier.FINAL)
+          .addAnnotation(SafeVarargs.class)
+          .addAnnotation(
+              AnnotationSpec.builder(SuppressWarnings.class)
+                  .addMember("value", "$S", "varargs")
+                  .build());
+    }
+
+    for (AnnotationMirror mirror : methodToOverride.getAnnotationMirrors()) {
+      result.addAnnotation(AnnotationSpec.get(mirror));
+    }
+
+    return result.build();
+  }
+}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
index 8c2588db1..a3c64b275 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
@@ -20,8 +20,6 @@
 
 /**
  * Verifies only the output we expect to change based on the various configurations of GlideOptions.
- *
- * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
  */
 @RunWith(JUnit4.class)
 public class GlideExtensionOptionsTest {
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
index d52943739..e1516bdcb 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
@@ -28,7 +28,7 @@ public void compilation_withAnnotatedNonStaticMethod_fails() {
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -60,17 +60,20 @@ public void compilation_withAnnotatedStaticMethod_withRequestOptionsArgInWrongOr
                   "package com.bumptech.glide.test;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideOption;",
-                  "import com.bumptech.glide.request.RequestOptions;",
+                  "import com.bumptech.glide.request.BaseRequestOptions;",
                   "@GlideExtension",
                   "public class NonRequestOptionsFirstArgExtension{",
                   "  private NonRequestOptionsFirstArgExtension() {}",
                   "  @GlideOption",
-                  "  public static void doSomething(Object arg1, RequestOptions options) {}",
+                  "  public static BaseRequestOptions<?> doSomething(",
+                  "      Object arg1, BaseRequestOptions<?> options) {",
+                  "    return options;",
+                  "  }",
                   "}"));
       fail();
     } catch (RuntimeException e) {
       String message = e.getCause().getMessage();
-      Truth.assertThat(message).contains("RequestOptions object as their first parameter");
+      Truth.assertThat(message).contains("BaseRequestOptions<?> object as their first parameter");
       Truth.assertThat(message).contains("Object");
       Truth.assertThat(message).contains("NonRequestOptionsFirstArgExtension");
     }
@@ -87,15 +90,17 @@ public void compilation_withAnnotatedStaticMethod_withRequestOptionsArg_succeeds
                 "package com.bumptech.glide.test;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
+                "import com.bumptech.glide.request.BaseRequestOptions;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
                 "  @GlideOption",
-                "  public static void doSomething(RequestOptions options) {}",
+                "  public static BaseRequestOptions<?> doSomething(",
+                "      BaseRequestOptions<?> options) {",
+                "    return options;",
+                "  }",
                 "}"));
     assertThat(compilation).succeeded();
-    assertThat(compilation).hadWarningContaining("is using a legacy format.");
   }
 
   @Test
@@ -109,15 +114,17 @@ public void compilation_withAnnotatedStaticMethod_withRequestOptionsArgAndOtherA
                 "package com.bumptech.glide.test;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
+                "import com.bumptech.glide.request.BaseRequestOptions;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
                 "  @GlideOption",
-                "  public static void doSomething(RequestOptions options, Object arg2) {}",
+                "  public static BaseRequestOptions<?> doSomething(",
+                "      BaseRequestOptions<?> options, Object arg2) {",
+                "    return options;",
+                "  }",
                 "}"));
     assertThat(compilation).succeeded();
-    assertThat(compilation).hadWarningContaining("is using a legacy format.");
   }
 
   @Test
@@ -126,7 +133,7 @@ public void compilation_overridingOptionWithoutAnnotationType_fails() {
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -136,12 +143,15 @@ public void run() throws Throwable {
                     "package com.bumptech.glide.test;",
                     "import com.bumptech.glide.annotation.GlideExtension;",
                     "import com.bumptech.glide.annotation.GlideOption;",
-                    "import com.bumptech.glide.request.RequestOptions;",
+                    "import com.bumptech.glide.request.BaseRequestOptions;",
                     "@GlideExtension",
                     "public class Extension {",
                     "  private Extension() {}",
                     "  @GlideOption",
-                    "  public static void centerCrop(RequestOptions options) {}",
+                    "  public static BaseRequestOptions<?> centerCrop(",
+                    "      BaseRequestOptions<?> options) {",
+                    "    return options;",
+                    "  }",
                     "}"));
 
           }
@@ -154,7 +164,7 @@ public void compilation_withOverrideExtend_butNotOverridingMethod_fails() {
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -164,12 +174,15 @@ public void run() throws Throwable {
                         "package com.bumptech.glide.test;",
                         "import com.bumptech.glide.annotation.GlideExtension;",
                         "import com.bumptech.glide.annotation.GlideOption;",
-                        "import com.bumptech.glide.request.RequestOptions;",
+                        "import com.bumptech.glide.request.BaseRequestOptions;",
                         "@GlideExtension",
                         "public class Extension {",
                         "  private Extension() {}",
                         "  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)",
-                        "  public static void something(RequestOptions options) {}",
+                        "  public static BaseRequestOptions<?> something(",
+                        "      BaseRequestOptions<?> options) {",
+                        "    return options;",
+                        "  }",
                         "}"));
           }
         });
@@ -186,15 +199,17 @@ public void compilation_withOverrideExtend_andOverridingMethod_succeeds() {
                 "package com.bumptech.glide.test;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
+                "import com.bumptech.glide.request.BaseRequestOptions;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
                 "  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)",
-                "  public static void centerCrop(RequestOptions options) {}",
+                "  public static BaseRequestOptions<?> centerCrop(",
+                "      BaseRequestOptions<?> options) {",
+                "    return options;",
+                "  }",
                 "}"));
     assertThat(compilation).succeeded();
-    assertThat(compilation).hadWarningContaining("is using a legacy format.");
   }
 
   @Test
@@ -203,7 +218,7 @@ public void compilation_withOverrideReplace_butNotOverridingMethod_fails() {
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -213,12 +228,15 @@ public void run() throws Throwable {
                         "package com.bumptech.glide.test;",
                         "import com.bumptech.glide.annotation.GlideExtension;",
                         "import com.bumptech.glide.annotation.GlideOption;",
-                        "import com.bumptech.glide.request.RequestOptions;",
+                        "import com.bumptech.glide.request.BaseRequestOptions;",
                         "@GlideExtension",
                         "public class Extension {",
                         "  private Extension() {}",
                         "  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)",
-                        "  public static void something(RequestOptions options) {}",
+                        "  public static BaseRequestOptions<?> something(",
+                        "      BaseRequestOptions<?> options) {",
+                        "    return options;",
+                        "  }",
                         "}"));
           }
         });
@@ -235,15 +253,17 @@ public void compilation_withOverrideReplace_andOverridingMethod_succeeds() {
                 "package com.bumptech.glide.test;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
+                "import com.bumptech.glide.request.BaseRequestOptions;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
                 "  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)",
-                "  public static void centerCrop(RequestOptions options) {}",
+                "  public static BaseRequestOptions<?> centerCrop(",
+                "      BaseRequestOptions<?> options) {",
+                "    return options;",
+                "  }",
                 "}"));
     assertThat(compilation).succeeded();
-    assertThat(compilation).hadWarningContaining("is using a legacy format.");
   }
 
   @Test
@@ -258,13 +278,14 @@ public void compilation_withRequestOptionsReturnValue_succeeds() {
                 "import android.support.annotation.NonNull;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
+                "import com.bumptech.glide.request.BaseRequestOptions;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
                 "  @NonNull",
                 "  @GlideOption",
-                "  public static RequestOptions doSomething(RequestOptions options) {",
+                "  public static BaseRequestOptions<?> doSomething(",
+                "      BaseRequestOptions<?> options) {",
                 "    return options;",
                 "  }",
                 "}"));
@@ -284,13 +305,13 @@ public void compilation_withNonRequestOptionsReturnValue_fails() {
                   "import android.support.annotation.NonNull;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideOption;",
-                  "import com.bumptech.glide.request.RequestOptions;",
+                  "import com.bumptech.glide.request.BaseRequestOptions;",
                   "@GlideExtension",
                   "public class WrongReturnTypeExtension {",
                   "  private WrongReturnTypeExtension() {}",
                   "  @NonNull",
                   "  @GlideOption",
-                  "  public static Object doSomething(RequestOptions options) {",
+                  "  public static Object doSomething(BaseRequestOptions<?> options) {",
                   "    return options;",
                   "  }",
                   "}"));
@@ -298,7 +319,7 @@ public void compilation_withNonRequestOptionsReturnValue_fails() {
     } catch (RuntimeException e) {
       String message = e.getCause().getMessage();
       Truth.assertThat(message)
-          .contains("@GlideOption methods should return a RequestOptions object");
+          .contains("@GlideOption methods should return a BaseRequestOptions<?> object");
       Truth.assertThat(message).contains("Object");
       Truth.assertThat(message).contains("WrongReturnTypeExtension");
     }
@@ -315,12 +336,13 @@ public void compilation_withMissingNonNullAnnotation_warns() {
                 "package com.bumptech.glide.test;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideOption;",
-                "import com.bumptech.glide.request.RequestOptions;",
+                "import com.bumptech.glide.request.BaseRequestOptions;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
                 "  @GlideOption",
-                "  public static RequestOptions doSomething(RequestOptions options) {",
+                "  public static BaseRequestOptions<?> doSomething(",
+                "      BaseRequestOptions<?> options) {",
                 "    return options;",
                 "  }",
                 "}"));
@@ -343,20 +365,20 @@ public void compilation_withNoOptionParameters_fails() {
                   "import android.support.annotation.NonNull;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideOption;",
-                  "import com.bumptech.glide.request.RequestOptions;",
+                  "import com.bumptech.glide.request.BaseRequestOptions;",
                   "@GlideExtension",
                   "public class MissingRequestOptionsExtension {",
                   "  private MissingRequestOptionsExtension() {}",
                   "  @NonNull",
                   "  @GlideOption",
-                  "  public static RequestOptions doSomething() {",
+                  "  public static BaseRequestOptions<?> doSomething() {",
                   "    return options;",
                   "  }",
                   "}"));
       fail();
     } catch (RuntimeException e) {
       String message = e.getCause().getMessage();
-      Truth.assertThat(message).contains("RequestOptions object as their first parameter");
+      Truth.assertThat(message).contains("BaseRequestOptions<?> object as their first parameter");
       Truth.assertThat(message).contains("doSomething");
       Truth.assertThat(message).contains("MissingRequestOptionsExtension");
     }
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
index 020149fda..0a4c91c82 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
@@ -11,7 +11,6 @@
 import com.google.common.truth.Truth;
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
-import java.io.IOException;
 import org.junit.Test;
 import org.junit.function.ThrowingRunnable;
 import org.junit.runner.RunWith;
@@ -32,7 +31,7 @@ public void compilation_withAnnotatedNonStaticMethod_fails() {
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -40,13 +39,18 @@ public void run() throws Throwable {
                     JavaFileObjects.forSourceLines(
                         "Extension",
                         "package com.bumptech.glide.test;",
+                        "import android.support.annotation.NonNull;",
                         "import com.bumptech.glide.annotation.GlideExtension;",
                         "import com.bumptech.glide.annotation.GlideType;",
                         "@GlideExtension",
                         "public class Extension {",
                         "  private Extension() {}",
+                        "  @NonNull",
                         "  @GlideType(Number.class)",
-                        "  public void doSomething() {}",
+                        "  public RequestBuilder<Number> doSomething(",
+                        "      RequestBuilder<Number> builder) {",
+                        "    return builder;",
+                        "  }",
                         "}"));
           }
         });
@@ -61,7 +65,7 @@ public void compilation_withAnnotatedStaticMethod_withoutRequestBuilderArg_fails
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -75,7 +79,9 @@ public void run() throws Throwable {
                         "public class Extension {",
                         "  private Extension() {}",
                         "  @GlideType(Number.class)",
-                        "  public static void doSomething() {}",
+                        "  public static RequestBuilder<Number> doSomething() {",
+                        "    return null;",
+                        "  }",
                         "}"));
           }
         });
@@ -90,14 +96,18 @@ public void compilation_withAnnotatedStaticMethod_withRequestBuilderArg_succeeds
             JavaFileObjects.forSourceLines(
                 "Extension",
                 "package com.bumptech.glide.test;",
+                "import android.support.annotation.NonNull;",
                 "import com.bumptech.glide.RequestBuilder;",
                 "import com.bumptech.glide.annotation.GlideExtension;",
                 "import com.bumptech.glide.annotation.GlideType;",
                 "@GlideExtension",
                 "public class Extension {",
                 "  private Extension() {}",
+                "  @NonNull",
                 "  @GlideType(Number.class)",
-                "  public static void type(RequestBuilder<Number> builder) {}",
+                "  public static RequestBuilder<Number> type(RequestBuilder<Number> builder) {",
+                "    return builder;",
+                "  }",
                 "}"));
     assertThat(compilation).succeededWithoutWarnings();
   }
@@ -112,14 +122,18 @@ public void compilation_withAnnotatedStaticMethod_withNonRequestBuilderArg_fails
               JavaFileObjects.forSourceLines(
                   "WrongParameterTypeExtension",
                   "package com.bumptech.glide.test;",
+                  "import android.support.annotation.NonNull;",
                   "import com.bumptech.glide.RequestBuilder;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideType;",
                   "@GlideExtension",
                   "public class WrongParameterTypeExtension {",
                   "  private WrongParameterTypeExtension() {}",
+                  "  @NonNull",
                   "  @GlideType(Number.class)",
-                  "  public static void type(Object arg) {}",
+                  "  public static RequestBuilder<Number> type(Object arg) {",
+                  "    return null;",
+                  "  }",
                   "}"));
     } catch (RuntimeException e) {
       String message = e.getCause().getMessage();
@@ -140,7 +154,7 @@ public void compilation_withAnnotatedStaticMethod_withRequestBuilderArgAndOtherA
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -148,22 +162,26 @@ public void run() throws Throwable {
                     JavaFileObjects.forSourceLines(
                         "Extension",
                         "package com.bumptech.glide.test;",
+                        "import android.support.annotation.NonNull;",
                         "import com.bumptech.glide.RequestBuilder;",
                         "import com.bumptech.glide.annotation.GlideExtension;",
                         "import com.bumptech.glide.annotation.GlideType;",
                         "@GlideExtension",
                         "public class Extension {",
                         "  private Extension() {}",
+                        "  @NonNull",
                         "  @GlideType(Number.class)",
-                        "  public static void type(RequestBuilder<Number> builder, Object arg2) {}",
+                        "  public static RequestBuilder<Number> type(",
+                        "      RequestBuilder<Number> builder, Object arg2) {",
+                        "    return builder;",
+                        "  }",
                         "}"));
           }
         });
   }
 
   @Test
-  public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails()
-      throws IOException {
+  public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails() {
     final Compilation compilation =
         javac()
             .withProcessors(new GlideAnnotationProcessor())
@@ -173,14 +191,19 @@ public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails()
                     "Extension",
                     "package com.bumptech.glide.test;",
                     "import android.graphics.drawable.Drawable;",
+                    "import android.support.annotation.NonNull;",
                     "import com.bumptech.glide.RequestBuilder;",
                     "import com.bumptech.glide.annotation.GlideExtension;",
                     "import com.bumptech.glide.annotation.GlideType;",
                     "@GlideExtension",
                     "public class Extension {",
                     "  private Extension() {}",
+                    "  @NonNull",
                     "  @GlideType(Drawable.class)",
-                    "  public static void asDrawable(RequestBuilder<Drawable> builder) {}",
+                    "  public static RequestBuilder<Drawable> asDrawable(",
+                    "      RequestBuilder<Drawable> builder) {",
+                    "    return builder;",
+                    "  }",
                     "}"));
 
     assertThrows(
@@ -189,7 +212,7 @@ public void compilation_withAnnotatedStaticMethod_overridingExistingType_fails()
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             compilation.generatedSourceFile(subpackage("GlideRequests"));
           }
         });
@@ -232,12 +255,14 @@ public void compilation_withAnnotatedStaticMethod_returningNonRequestBuilder_fai
               JavaFileObjects.forSourceLines(
                   "WrongReturnTypeExtension",
                   "package com.bumptech.glide.test;",
+                  "import android.support.annotation.NonNull;",
                   "import com.bumptech.glide.RequestBuilder;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideType;",
                   "@GlideExtension",
                   "public class WrongReturnTypeExtension {",
                   "  private WrongReturnTypeExtension() {}",
+                  "  @NonNull",
                   "  @GlideType(Number.class)",
                   "  public static Object asNumber(",
                   "      RequestBuilder<Number> builder) {",
@@ -263,12 +288,14 @@ public void compilation_withAnnotatedStaticMethod_returningBuilderWithIncorrectT
               JavaFileObjects.forSourceLines(
                   "WrongBuilderTypeExtension",
                   "package com.bumptech.glide.test;",
+                  "import android.support.annotation.NonNull;",
                   "import com.bumptech.glide.RequestBuilder;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideType;",
                   "@GlideExtension",
                   "public class WrongBuilderTypeExtension {",
                   "  private WrongBuilderTypeExtension() {}",
+                  "  @NonNull",
                   "  @GlideType(Number.class)",
                   "  public static RequestBuilder<Object> asNumber(",
                   "      RequestBuilder<Object> builder) {",
@@ -295,7 +322,7 @@ public void compilation_withAnnotatedStaticMethod_returningBuilder_andMultiplePa
         RuntimeException.class,
         new ThrowingRunnable() {
           @Override
-          public void run() throws Throwable {
+          public void run() {
             javac()
                 .withProcessors(new GlideAnnotationProcessor())
                 .compile(
@@ -303,12 +330,14 @@ public void run() throws Throwable {
                     JavaFileObjects.forSourceLines(
                         "Extension",
                         "package com.bumptech.glide.test;",
+                        "import android.support.annotation.NonNull;",
                         "import com.bumptech.glide.RequestBuilder;",
                         "import com.bumptech.glide.annotation.GlideExtension;",
                         "import com.bumptech.glide.annotation.GlideType;",
                         "@GlideExtension",
                         "public class Extension {",
                         "  private Extension() {}",
+                        "  @NonNull",
                         "  @GlideType(Number.class)",
                         "  public static RequestBuilder<Number> asNumber(",
                         "      RequestBuilder<Number> builder, Object arg1) {",
@@ -329,12 +358,14 @@ public void compilation_withAnnotatedStaticMethod_returningBuilder_nonBuilderPar
               JavaFileObjects.forSourceLines(
                   "IncorrectParameterExtension",
                   "package com.bumptech.glide.test;",
+                  "import android.support.annotation.NonNull;",
                   "import com.bumptech.glide.RequestBuilder;",
                   "import com.bumptech.glide.annotation.GlideExtension;",
                   "import com.bumptech.glide.annotation.GlideType;",
                   "@GlideExtension",
                   "public class IncorrectParameterExtension {",
                   "  private IncorrectParameterExtension() {}",
+                  "  @NonNull",
                   "  @GlideType(Number.class)",
                   "  public static RequestBuilder<Number> asNumber(",
                   "      Object arg) {",
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
deleted file mode 100644
index 5087f3be9..000000000
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package com.bumptech.glide.annotation.compiler;
-
-import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
-import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
-import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
-import static com.google.testing.compile.CompilationSubject.assertThat;
-import static com.google.testing.compile.Compiler.javac;
-
-import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
-import com.bumptech.glide.annotation.compiler.test.SubDirectory;
-import com.bumptech.glide.annotation.compiler.test.TestDescription;
-import com.bumptech.glide.annotation.compiler.test.Util;
-import com.google.testing.compile.Compilation;
-import java.io.IOException;
-import javax.tools.JavaFileObject;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-/**
- * Verifies only the output we expect to change based on the various configurations of GlideOptions
- * when GlideOptions are defined in the legacy format.
- *
- * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
- */
-@RunWith(JUnit4.class)
-public class LegacyGlideExtensionOptionsTest {
-  @Rule public final TestDescription testDescription = new TestDescription();
-  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
-      new RegenerateResourcesRule(getClass());
-
-  private static final String EXTENSION_NAME = "Extension.java";
-
-  @Test
-  @SubDirectory("OverrideExtend")
-  public void compilation_withOverrideExtend_validOptions() throws IOException {
-    runTest(Subject.GlideOptions);
-  }
-
-  @Test
-  @SubDirectory("OverrideExtend")
-  public void compilation_withOverrideExtend_validRequest() throws IOException {
-    runTest(Subject.GlideRequest);
-  }
-
-  @Test
-  @SubDirectory("OverrideReplace")
-  public void compilation_withOverrideReplace_validOptions() throws IOException {
-    runTest(Subject.GlideOptions);
-  }
-
-  @Test
-  @SubDirectory("OverrideReplace")
-  public void compilation_withOverrideReplace_validRequest() throws IOException {
-    runTest(Subject.GlideRequest);
-  }
-
-  @Test
-  @SubDirectory("StaticMethodName")
-  public void compilation_withStaticMethodName_validOptions() throws IOException {
-    runTest(Subject.GlideOptions);
-  }
-
-  @Test
-  @SubDirectory("StaticMethodName")
-  public void compilation_withStaticMethodName_validRequest() throws IOException {
-    runTest(Subject.GlideRequest);
-  }
-
-  @Test
-  @SubDirectory("MemoizeStaticMethod")
-  public void compilation_withMemoizeStaticMethod_validOptions() throws IOException {
-    runTest(Subject.GlideOptions);
-  }
-
-  @Test
-  @SubDirectory("MemoizeStaticMethod")
-  public void compilation_withMemoizeStaticMethod_validRequest() throws IOException {
-    runTest(Subject.GlideRequest);
-  }
-
-  @Test
-  @SubDirectory("SkipStaticMethod")
-  public void compilation_withSkipStaticMethod_validOptions() throws IOException {
-    runTest(Subject.GlideOptions);
-  }
-
-  @Test
-  @SubDirectory("SkipStaticMethod")
-  public void compilation_withSkipStaticMethod_validRequest() throws IOException {
-    runTest(Subject.GlideRequest);
-  }
-
-  private enum Subject {
-    GlideOptions,
-    GlideRequest;
-
-    String file() {
-      return name() + ".java";
-    }
-  }
-
-  private void runTest(Subject subject) throws IOException {
-    String subDirectoryName = getSubDirectoryName();
-    Compilation compilation =
-        javac()
-            .withProcessors(new GlideAnnotationProcessor())
-            .compile(
-                emptyAppModule(),
-                extension(subDirectoryName));
-    assertThat(compilation).succeeded();
-
-    assertThat(compilation)
-        .generatedSourceFile(subpackage(subject.name()))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(forResource(subDirectoryName, subject.file()).getCharContent(true)));
-  }
-
-  private String getSubDirectoryName() {
-    return testDescription
-        .getDescription()
-        .getAnnotation(SubDirectory.class)
-        .value();
-  }
-
-  private JavaFileObject extension(String subdir) {
-    return forResource(subdir, EXTENSION_NAME);
-  }
-
-  private JavaFileObject forResource(String subdir, String name) {
-    return Util.forResource(getClass().getSimpleName(), subdir + "/" + name);
-  }
-}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
deleted file mode 100644
index 933402ff3..000000000
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
+++ /dev/null
@@ -1,113 +0,0 @@
-package com.bumptech.glide.annotation.compiler;
-
-import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
-import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
-import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
-import static com.bumptech.glide.annotation.compiler.test.Util.glide;
-import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
-import static com.google.testing.compile.CompilationSubject.assertThat;
-import static com.google.testing.compile.Compiler.javac;
-
-import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
-import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
-import com.bumptech.glide.annotation.compiler.test.Util;
-import com.google.common.truth.Truth;
-import com.google.testing.compile.Compilation;
-import java.io.IOException;
-import javax.tools.JavaFileObject;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-/**
- * Verifies the output of the processor with a simple single extension option in the legacy
- * option style where extension methods always returned {@code null}.
- */
-@RunWith(JUnit4.class)
-public class LegacyGlideExtensionWithOptionTest {
-  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
-      new RegenerateResourcesRule(getClass());
-  private Compilation compilation;
-
-  @Before
-  public void setUp() {
-    compilation =
-        javac()
-            .withProcessors(new GlideAnnotationProcessor())
-            .compile(
-                emptyAppModule(),
-                forResource("ExtensionWithOption.java"));
-    assertThat(compilation).succeeded();
-    //noinspection ResultOfMethodCallIgnored
-    assertThat(compilation).hadWarningContaining(
-        "The squareThumb method annotated with @GlideOption in the ExtensionWithOption"
-            + " @GlideExtension is using a legacy format. Support will be removed in a future"
-            + " version. Please change your method definition so that your @GlideModule annotated"
-            + " methods return RequestOptions objects instead of null.");
-  }
-
-  @Test
-  public void compilation_generatesAllExpectedFiles() {
-    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
-  }
-
-  @Test
-  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideOptions"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
-  }
-
-  @Test
-  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideRequest"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(forResource("GlideRequest.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideRequests"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(appResource("GlideRequests.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideApp"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
-        .contentsAsUtf8String()
-        .isEqualTo(
-            asUnixChars(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
-        .contentsAsUtf8String()
-        .isEqualTo(
-            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
-  }
-
-  private JavaFileObject forResource(String name) {
-    return Util.forResource(getClass().getSimpleName(), name);
-  }
-}
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
deleted file mode 100644
index 52b19d890..000000000
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package com.bumptech.glide.annotation.compiler;
-
-import static com.bumptech.glide.annotation.compiler.test.Util.appResource;
-import static com.bumptech.glide.annotation.compiler.test.Util.asUnixChars;
-import static com.bumptech.glide.annotation.compiler.test.Util.emptyAppModule;
-import static com.bumptech.glide.annotation.compiler.test.Util.glide;
-import static com.bumptech.glide.annotation.compiler.test.Util.subpackage;
-import static com.google.testing.compile.CompilationSubject.assertThat;
-import static com.google.testing.compile.Compiler.javac;
-
-import com.bumptech.glide.annotation.compiler.test.ReferencedResource;
-import com.bumptech.glide.annotation.compiler.test.RegenerateResourcesRule;
-import com.bumptech.glide.annotation.compiler.test.Util;
-import com.google.common.truth.Truth;
-import com.google.testing.compile.Compilation;
-import java.io.IOException;
-import javax.tools.JavaFileObject;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-/**
- * Verifies the output of the processor with a simple single extension type.
- */
-@RunWith(JUnit4.class)
-public class LegacyGlideExtensionWithTypeTest {
-  @Rule public final RegenerateResourcesRule regenerateResourcesRule =
-      new RegenerateResourcesRule(getClass());
-  private Compilation compilation;
-
-  @Before
-  public void setUp() {
-    compilation =
-        javac()
-            .withProcessors(new GlideAnnotationProcessor())
-            .compile(
-                emptyAppModule(),
-                forResource("ExtensionWithType.java"));
-    assertThat(compilation).succeededWithoutWarnings();
-  }
-
-  @Test
-  public void compilation_generatesAllExpectedFiles() {
-    Truth.assertThat(compilation.generatedSourceFiles()).hasSize(7);
-  }
-
-  @Test
-  public void compilation_generatesExpectedGlideOptionsClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideOptions"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(forResource("GlideOptions.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilation_generatesExpectedGlideRequestClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideRequest"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(appResource("GlideRequest.java").getCharContent(true)));
-  }
-
-  @Test
-  public void compilation_generatesExpectedGlideRequestsClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideRequests"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(forResource("GlideRequests.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilationGeneratesExpectedGlideAppClass() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(subpackage("GlideApp"))
-        .contentsAsUtf8String()
-        .isEqualTo(asUnixChars(appResource("GlideApp.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilation_generatesExpectedGeneratedAppGlideModuleImpl() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(glide("GeneratedAppGlideModuleImpl"))
-        .contentsAsUtf8String()
-        .isEqualTo(
-            asUnixChars(appResource("GeneratedAppGlideModuleImpl.java").getCharContent(true)));
-  }
-
-  @Test
-  @ReferencedResource
-  public void compilation_generatesExpectedGeneratedRequestManagerFactory() throws IOException {
-    assertThat(compilation)
-        .generatedSourceFile(glide("GeneratedRequestManagerFactory"))
-        .contentsAsUtf8String()
-        .isEqualTo(
-            asUnixChars(appResource("GeneratedRequestManagerFactory.java").getCharContent(true)));
-  }
-
-  private JavaFileObject forResource(String name) {
-    return Util.forResource(getClass().getSimpleName(), name);
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java
index 579bb5ab3..f935829d6 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithExcludesTest/AppModuleWithExcludes.java
@@ -3,7 +3,6 @@
 import com.bumptech.glide.annotation.Excludes;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
-import com.bumptech.glide.test.EmptyLibraryModule;
 
 @GlideModule
 @Excludes(EmptyLibraryModule.class)
diff --git a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java
index c530727e1..94600d8e4 100644
--- a/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java
+++ b/annotation/compiler/test/src/test/resources/AppGlideModuleWithMultipleExcludesTest/AppModuleWithMultipleExcludes.java
@@ -3,8 +3,6 @@
 import com.bumptech.glide.annotation.Excludes;
 import com.bumptech.glide.annotation.GlideModule;
 import com.bumptech.glide.module.AppGlideModule;
-import com.bumptech.glide.test.EmptyLibraryModule1;
-import com.bumptech.glide.test.EmptyLibraryModule2;
 
 @GlideModule
 @Excludes({EmptyLibraryModule1.class, EmptyLibraryModule2.class})
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
index 6c2f592f1..b2cb067dc 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -304,251 +305,251 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -564,56 +565,56 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
index 9536fe230..440c153b7 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerCrop();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -551,12 +381,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -569,12 +394,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -583,42 +403,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -627,12 +432,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -641,18 +441,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
index 2756555af..7344fe291 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideRequests.java
@@ -14,6 +14,7 @@
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
@@ -57,6 +58,12 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
     return (GlideRequests) super.setDefaultRequestOptions(options);
   }
 
+  @Override
+  @NonNull
+  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
+    return (GlideRequests) super.addDefaultRequestListener(listener);
+  }
+
   @Override
   @NonNull
   @CheckResult
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
index 05cf8447b..01453f331 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(memoizeStaticMethod = true)
-  public static RequestOptions test(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> test(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
index 90fe262f3..4da6ef1ba 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -307,251 +308,251 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -567,62 +568,63 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see Extension#test(RequestOptions)
+   * @see Extension#test(BaseRequestOptions)
    */
+  @SuppressWarnings("unchecked")
   @CheckResult
   @NonNull
   public GlideOptions test() {
@@ -630,7 +632,7 @@ public GlideOptions test() {
   }
 
   /**
-   * @see Extension#test(RequestOptions)
+   * @see Extension#test(BaseRequestOptions)
    */
   @CheckResult
   public static GlideOptions testOf() {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
index f0377a0a7..18fb054fb 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerCrop();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -551,12 +381,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -569,12 +394,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -583,42 +403,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -627,12 +432,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -641,32 +441,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#test()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> test() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -788,4 +569,14 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see Extension#test(BaseRequestOptions)
+   */
+  @SuppressWarnings("unchecked")
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> test() {
+    return (GlideRequest<TranscodeType>) Extension.test(this);
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java
index b11fe757f..0104eaa9b 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/Extension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
-  public static RequestOptions centerCrop(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> centerCrop(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
index dc6c873f8..089b752ef 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -305,244 +306,244 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -558,63 +559,64 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see Extension#centerCrop(RequestOptions)
-   * @see RequestOptions#centerCrop()
+   * @see Extension#centerCrop(BaseRequestOptions)
+   * @see GlideOptions#centerCrop()
    */
+  @SuppressWarnings("unchecked")
   @Override
   @CheckResult
   @NonNull
@@ -623,7 +625,7 @@ public GlideOptions centerCrop() {
   }
 
   /**
-   * @see Extension#centerCrop(RequestOptions)
+   * @see Extension#centerCrop(BaseRequestOptions)
    */
   @CheckResult
   public static GlideOptions centerCropOf() {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
index ee391f551..860faf1ac 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -555,12 +385,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -569,42 +394,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -613,12 +423,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -627,32 +432,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -774,4 +560,16 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see Extension#centerCrop(BaseRequestOptions)
+   * @see GlideRequest<TranscodeType>#centerCrop()
+   */
+  @SuppressWarnings("unchecked")
+  @Override
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> centerCrop() {
+    return (GlideRequest<TranscodeType>) Extension.centerCrop(super.centerCrop());
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java
index a0be8a2c3..e92ece857 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/Extension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
-  public static RequestOptions override(RequestOptions requestOptions, int width, int height) {
+  public static BaseRequestOptions<?> override(BaseRequestOptions<?> requestOptions, int width, int height) {
     return requestOptions
         .override(width, height)
         .centerCrop();
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
index 9fca6bfb5..89850adc8 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -295,244 +296,244 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -548,63 +549,64 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see Extension#override(RequestOptions, int, int)
-   * @see RequestOptions#override(int, int)
+   * @see Extension#override(BaseRequestOptions, int, int)
+   * @see GlideOptions#override(int, int)
    */
+  @SuppressWarnings("unchecked")
   @Override
   @CheckResult
   @NonNull
@@ -613,7 +615,7 @@ public GlideOptions override(int width, int height) {
   }
 
   /**
-   * @see Extension#override(RequestOptions, int, int)
+   * @see Extension#override(BaseRequestOptions, int, int)
    */
   @CheckResult
   public static GlideOptions overrideOf(int width, int height) {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
index e6e2e5380..0b3f59384 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideExtendMultipleArguments/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -285,26 +210,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -313,12 +228,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -555,12 +385,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -569,42 +394,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -613,12 +423,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -627,32 +432,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -774,4 +560,16 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see Extension#override(BaseRequestOptions, int, int)
+   * @see GlideRequest<TranscodeType>#override(int, int)
+   */
+  @SuppressWarnings("unchecked")
+  @Override
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> override(int width, int height) {
+    return (GlideRequest<TranscodeType>) Extension.override(super.override(width, height), width, height);
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java
index 78d91590f..4467cf21f 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/Extension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(override = GlideOption.OVERRIDE_REPLACE)
-  public static RequestOptions centerCrop(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> centerCrop(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
index 39689658e..124b80a27 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -305,244 +306,244 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -558,62 +559,63 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see Extension#centerCrop(RequestOptions)
+   * @see Extension#centerCrop(BaseRequestOptions)
    */
+  @SuppressWarnings("unchecked")
   @CheckResult
   @NonNull
   public GlideOptions centerCrop() {
@@ -621,7 +623,7 @@ public GlideOptions centerCrop() {
   }
 
   /**
-   * @see Extension#centerCrop(RequestOptions)
+   * @see Extension#centerCrop(BaseRequestOptions)
    */
   @CheckResult
   public static GlideOptions centerCropOf() {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
index ee391f551..0c4f8ba9b 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -555,12 +385,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -569,42 +394,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -613,12 +423,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -627,32 +432,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -774,4 +560,14 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see Extension#centerCrop(BaseRequestOptions)
+   */
+  @SuppressWarnings("unchecked")
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> centerCrop() {
+    return (GlideRequest<TranscodeType>) Extension.centerCrop(this);
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java
index 69db3bc0f..f36597873 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/Extension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(skipStaticMethod = true)
-  public static RequestOptions test(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> test(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
index f89ddbc67..a98146108 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -305,251 +306,251 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -565,62 +566,63 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see Extension#test(RequestOptions)
+   * @see Extension#test(BaseRequestOptions)
    */
+  @SuppressWarnings("unchecked")
   @CheckResult
   @NonNull
   public GlideOptions test() {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
index f0377a0a7..18fb054fb 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerCrop();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -551,12 +381,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -569,12 +394,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -583,42 +403,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -627,12 +432,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -641,32 +441,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#test()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> test() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -788,4 +569,14 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see Extension#test(BaseRequestOptions)
+   */
+  @SuppressWarnings("unchecked")
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> test() {
+    return (GlideRequest<TranscodeType>) Extension.test(this);
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java
index 9e05dde64..45ccc3954 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/Extension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class Extension {
@@ -14,7 +14,7 @@ private Extension() {
 
   @NonNull
   @GlideOption(staticMethodName = "testSomething")
-  public static RequestOptions test(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> test(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
index 3484cb188..6c20113cb 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -305,251 +306,251 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -565,62 +566,63 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see Extension#test(RequestOptions)
+   * @see Extension#test(BaseRequestOptions)
    */
+  @SuppressWarnings("unchecked")
   @CheckResult
   @NonNull
   public GlideOptions test() {
@@ -628,7 +630,7 @@ public GlideOptions test() {
   }
 
   /**
-   * @see Extension#test(RequestOptions)
+   * @see Extension#test(BaseRequestOptions)
    */
   @CheckResult
   public static GlideOptions testSomething() {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
index f0377a0a7..18fb054fb 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerCrop();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -551,12 +381,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -569,12 +394,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -583,42 +403,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -627,12 +432,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -641,32 +441,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#test()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> test() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -788,4 +569,14 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see Extension#test(BaseRequestOptions)
+   */
+  @SuppressWarnings("unchecked")
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> test() {
+    return (GlideRequest<TranscodeType>) Extension.test(this);
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java
index 9884bcefb..a82329934 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/ExtensionWithOption.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 
 @GlideExtension
 public final class ExtensionWithOption {
@@ -14,7 +14,7 @@ private ExtensionWithOption() {
 
   @NonNull
   @GlideOption
-  public static RequestOptions squareThumb(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> squareThumb(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
index ea3991d19..ce0df8dd7 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -305,251 +306,251 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -565,62 +566,63 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 
   /**
-   * @see ExtensionWithOption#squareThumb(RequestOptions)
+   * @see ExtensionWithOption#squareThumb(BaseRequestOptions)
    */
+  @SuppressWarnings("unchecked")
   @CheckResult
   @NonNull
   public GlideOptions squareThumb() {
@@ -628,7 +630,7 @@ public GlideOptions squareThumb() {
   }
 
   /**
-   * @see ExtensionWithOption#squareThumb(RequestOptions)
+   * @see ExtensionWithOption#squareThumb(BaseRequestOptions)
    */
   @CheckResult
   public static GlideOptions squareThumbOf() {
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
index 05b6b7d5c..51f731b2b 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithOptionTest/GlideRequest.java
@@ -23,8 +23,8 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -39,14 +39,14 @@
 
 /**
  * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
+ * {@link com.bumptech.glide.request.RequestOptions} and all generated options from
  * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
  * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
  *
  * <p>Generated code, do not modify.
  *
  * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
+ * @see com.bumptech.glide.request.RequestOptions
  */
 @SuppressWarnings({
     "unused",
@@ -75,12 +75,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.sizeMultiplier(value);
   }
 
   /**
@@ -89,12 +84,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   /**
@@ -103,12 +93,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.useAnimationPool(flag);
   }
 
   /**
@@ -117,12 +102,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.onlyRetrieveFromCache(flag);
   }
 
   /**
@@ -131,12 +111,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.diskCacheStrategy(strategy);
   }
 
   /**
@@ -145,12 +120,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.priority(priority);
   }
 
   /**
@@ -159,12 +129,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(drawable);
   }
 
   /**
@@ -173,12 +138,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.placeholder(id);
   }
 
   /**
@@ -187,12 +147,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(drawable);
   }
 
   /**
@@ -201,12 +156,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fallback(id);
   }
 
   /**
@@ -215,12 +165,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(drawable);
   }
 
   /**
@@ -229,12 +174,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.error(id);
   }
 
   /**
@@ -243,12 +183,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.theme(theme);
   }
 
   /**
@@ -257,12 +192,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.skipMemoryCache(skip);
   }
 
   /**
@@ -271,12 +201,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(width, height);
   }
 
   /**
@@ -285,12 +210,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.override(size);
   }
 
   /**
@@ -299,26 +219,16 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.signature(key);
   }
 
   /**
-   * @see GlideOptions#set(Option<T>, T)
+   * @see GlideOptions#set(Option<Y>, Y)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideRequest<TranscodeType>) super.set(option, y);
   }
 
   /**
@@ -327,12 +237,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.decode(clazz);
   }
 
   /**
@@ -341,12 +246,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeFormat(format);
   }
 
   /**
@@ -355,12 +255,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.encodeQuality(value);
   }
 
   /**
@@ -369,12 +264,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.frame(value);
   }
 
   /**
@@ -383,12 +273,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.format(format);
   }
 
   /**
@@ -397,12 +282,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.disallowHardwareConfig();
   }
 
   /**
@@ -411,12 +291,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.downsample(strategy);
   }
 
   /**
@@ -425,12 +300,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.timeout(value);
   }
 
   /**
@@ -439,12 +309,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterCrop();
   }
 
   /**
@@ -453,12 +318,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerCrop();
   }
 
   /**
@@ -467,12 +327,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalFitCenter();
   }
 
   /**
@@ -481,12 +336,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.fitCenter();
   }
 
   /**
@@ -495,12 +345,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCenterInside();
   }
 
   /**
@@ -509,12 +354,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.centerInside();
   }
 
   /**
@@ -523,12 +363,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalCircleCrop();
   }
 
   /**
@@ -537,12 +372,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.circleCrop();
   }
 
   /**
@@ -551,12 +381,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transform(transformation);
   }
 
   /**
@@ -569,12 +394,7 @@
       "varargs"
   })
   public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.transforms(transformations);
   }
 
   /**
@@ -583,42 +403,27 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.optionalTransform(transformation);
   }
 
   /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
+   * @see GlideOptions#optionalTransform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.optionalTransform(clazz, transformation);
   }
 
   /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
+   * @see GlideOptions#transform(Class<Y>, Transformation<Y>)
    */
   @NonNull
   @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
+  public <Y> GlideRequest<TranscodeType> transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
+    return (GlideRequest<TranscodeType>) super.transform(clazz, transformation);
   }
 
   /**
@@ -627,12 +432,7 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontTransform();
   }
 
   /**
@@ -641,32 +441,13 @@
   @NonNull
   @CheckResult
   public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#squareThumb()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> squareThumb() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).squareThumb();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).squareThumb();
-    }
-    return this;
+    return (GlideRequest<TranscodeType>) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
+  public GlideRequest<TranscodeType> apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideRequest<TranscodeType>) super.apply(options);
   }
 
@@ -788,4 +569,14 @@
   public GlideRequest<TranscodeType> clone() {
     return (GlideRequest<TranscodeType>) super.clone();
   }
+
+  /**
+   * @see ExtensionWithOption#squareThumb(BaseRequestOptions)
+   */
+  @SuppressWarnings("unchecked")
+  @CheckResult
+  @NonNull
+  public GlideRequest<TranscodeType> squareThumb() {
+    return (GlideRequest<TranscodeType>) ExtensionWithOption.squareThumb(this);
+  }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
index 558dc9f8c..435ea9275 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideOptions.java
@@ -16,6 +16,7 @@
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.RequestOptions;
 import java.lang.Class;
 import java.lang.Cloneable;
@@ -305,251 +306,251 @@ public static GlideOptions noAnimation() {
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
+  public GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
     return (GlideOptions) super.sizeMultiplier(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
+  public GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
     return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
+  public GlideOptions useAnimationPool(boolean flag) {
     return (GlideOptions) super.useAnimationPool(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
+  public GlideOptions onlyRetrieveFromCache(boolean flag) {
     return (GlideOptions) super.onlyRetrieveFromCache(flag);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+  public GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
     return (GlideOptions) super.diskCacheStrategy(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
+  public GlideOptions priority(@NonNull Priority priority) {
     return (GlideOptions) super.priority(priority);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
+  public GlideOptions placeholder(@Nullable Drawable drawable) {
     return (GlideOptions) super.placeholder(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
+  public GlideOptions placeholder(@DrawableRes int id) {
     return (GlideOptions) super.placeholder(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
+  public GlideOptions fallback(@Nullable Drawable drawable) {
     return (GlideOptions) super.fallback(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
+  public GlideOptions fallback(@DrawableRes int id) {
     return (GlideOptions) super.fallback(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
+  public GlideOptions error(@Nullable Drawable drawable) {
     return (GlideOptions) super.error(drawable);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
+  public GlideOptions error(@DrawableRes int id) {
     return (GlideOptions) super.error(id);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
+  public GlideOptions theme(@Nullable Resources.Theme theme) {
     return (GlideOptions) super.theme(theme);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
+  public GlideOptions skipMemoryCache(boolean skip) {
     return (GlideOptions) super.skipMemoryCache(skip);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int width, int height) {
+  public GlideOptions override(int width, int height) {
     return (GlideOptions) super.override(width, height);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions override(int size) {
+  public GlideOptions override(int size) {
     return (GlideOptions) super.override(size);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
+  public GlideOptions signature(@NonNull Key key) {
     return (GlideOptions) super.signature(key);
   }
 
   @Override
   @CheckResult
-  public final GlideOptions clone() {
+  public GlideOptions clone() {
     return (GlideOptions) super.clone();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
+  public <Y> GlideOptions set(@NonNull Option<Y> option, @NonNull Y y) {
+    return (GlideOptions) super.set(option, y);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
+  public GlideOptions decode(@NonNull Class<?> clazz) {
     return (GlideOptions) super.decode(clazz);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
+  public GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
     return (GlideOptions) super.encodeFormat(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
+  public GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
     return (GlideOptions) super.encodeQuality(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
+  public GlideOptions frame(@IntRange(from = 0) long value) {
     return (GlideOptions) super.frame(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
+  public GlideOptions format(@NonNull DecodeFormat format) {
     return (GlideOptions) super.format(format);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
+  public GlideOptions disallowHardwareConfig() {
     return (GlideOptions) super.disallowHardwareConfig();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
+  public GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
     return (GlideOptions) super.downsample(strategy);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
+  public GlideOptions timeout(@IntRange(from = 0) int value) {
     return (GlideOptions) super.timeout(value);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterCrop() {
+  public GlideOptions optionalCenterCrop() {
     return (GlideOptions) super.optionalCenterCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerCrop() {
+  public GlideOptions centerCrop() {
     return (GlideOptions) super.centerCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalFitCenter() {
+  public GlideOptions optionalFitCenter() {
     return (GlideOptions) super.optionalFitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions fitCenter() {
+  public GlideOptions fitCenter() {
     return (GlideOptions) super.fitCenter();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCenterInside() {
+  public GlideOptions optionalCenterInside() {
     return (GlideOptions) super.optionalCenterInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions centerInside() {
+  public GlideOptions centerInside() {
     return (GlideOptions) super.centerInside();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalCircleCrop() {
+  public GlideOptions optionalCircleCrop() {
     return (GlideOptions) super.optionalCircleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions circleCrop() {
+  public GlideOptions circleCrop() {
     return (GlideOptions) super.circleCrop();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.transform(transformation);
   }
 
@@ -565,56 +566,56 @@ public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transfor
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+  public GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
     return (GlideOptions) super.optionalTransform(transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions optionalTransform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.optionalTransform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
+  public <Y> GlideOptions transform(@NonNull Class<Y> clazz,
+      @NonNull Transformation<Y> transformation) {
     return (GlideOptions) super.transform(clazz, transformation);
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontTransform() {
+  public GlideOptions dontTransform() {
     return (GlideOptions) super.dontTransform();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions dontAnimate() {
+  public GlideOptions dontAnimate() {
     return (GlideOptions) super.dontAnimate();
   }
 
   @Override
   @NonNull
   @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
+  public GlideOptions apply(@NonNull BaseRequestOptions<?> options) {
     return (GlideOptions) super.apply(options);
   }
 
   @Override
   @NonNull
-  public final GlideOptions lock() {
+  public GlideOptions lock() {
     return (GlideOptions) super.lock();
   }
 
   @Override
   @NonNull
-  public final GlideOptions autoClone() {
+  public GlideOptions autoClone() {
     return (GlideOptions) super.autoClone();
   }
 }
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
index bed0a7227..e0d0ad1d9 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/GlideRequests.java
@@ -14,6 +14,7 @@
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.manager.Lifecycle;
 import com.bumptech.glide.manager.RequestManagerTreeNode;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import java.io.File;
 import java.lang.Class;
@@ -67,6 +68,12 @@ public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
     return (GlideRequests) super.setDefaultRequestOptions(options);
   }
 
+  @Override
+  @NonNull
+  public GlideRequests addDefaultRequestListener(RequestListener<Object> listener) {
+    return (GlideRequests) super.addDefaultRequestListener(listener);
+  }
+
   @Override
   @NonNull
   @CheckResult
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
deleted file mode 100644
index f37b64050..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/Extension.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
-
-@GlideExtension
-public final class Extension {
-
-  private Extension() {
-    // Utility class.
-  }
-
-  @GlideOption(memoizeStaticMethod = true)
-  public static void test(RequestOptions requestOptions) {
-    requestOptions.centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
deleted file mode 100644
index 76a59cadd..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideOptions.java
+++ /dev/null
@@ -1,647 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see Extension
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform1;
-
-  private static GlideOptions centerInsideTransform2;
-
-  private static GlideOptions centerCropTransform3;
-
-  private static GlideOptions circleCropTransform4;
-
-  private static GlideOptions noTransformation5;
-
-  private static GlideOptions noAnimation6;
-
-  private static GlideOptions testOf0;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform1 == null) {
-      GlideOptions.fitCenterTransform1 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform2 == null) {
-      GlideOptions.centerInsideTransform2 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform2;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform3 == null) {
-      GlideOptions.centerCropTransform3 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform4 == null) {
-      GlideOptions.circleCropTransform4 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform4;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation5 == null) {
-      GlideOptions.noTransformation5 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation5;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation6 == null) {
-      GlideOptions.noAnimation6 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation6;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerCrop() {
-    return (GlideOptions) super.centerCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-
-  /**
-   * @see Extension#test(RequestOptions)
-   */
-  @CheckResult
-  @NonNull
-  public GlideOptions test() {
-    if (isAutoCloneEnabled()) {
-      return clone().test();
-    }
-    Extension.test(this);
-    return this;
-  }
-
-  /**
-   * @see Extension#test(RequestOptions)
-   */
-  @CheckResult
-  public static GlideOptions testOf() {
-    if (GlideOptions.testOf0 == null) {
-      GlideOptions.testOf0 =
-          new GlideOptions().test().autoClone();
-    }
-    return GlideOptions.testOf0;
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
deleted file mode 100644
index f0377a0a7..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/MemoizeStaticMethod/GlideRequest.java
+++ /dev/null
@@ -1,791 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.TransitionOptions;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
- * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
- * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * <p>Generated code, do not modify.
- *
- * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
- */
-@SuppressWarnings({
-    "unused",
-    "deprecation"
-})
-public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
-    super(transcodeClass, other);
-  }
-
-  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
-      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
-    super(glide, requestManager ,transcodeClass, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  protected GlideRequest<File> getDownloadOnlyRequest() {
-    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
-  }
-
-  /**
-   * @see GlideOptions#sizeMultiplier(float)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useAnimationPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#onlyRetrieveFromCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#priority(Priority)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#theme(Resources.Theme)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#skipMemoryCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#signature(Key)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#set(Option<T>, T)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#decode(Class<?>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeQuality(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#frame(long)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#format(DecodeFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#disallowHardwareConfig()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#downsample(DownsampleStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#timeout(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCircleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transforms(Transformation<Bitmap>[])
-   */
-  @NonNull
-  @CheckResult
-  @SuppressWarnings({
-      "unchecked",
-      "varargs"
-  })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontTransform()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontAnimate()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#test()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> test() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
-    }
-    return this;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
-    return (GlideRequest<TranscodeType>) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
-    return (GlideRequest<TranscodeType>) super.transition(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.listener(listener);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.addListener(listener);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.error(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object o) {
-    return (GlideRequest<TranscodeType>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<TranscodeType>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
-    return (GlideRequest<TranscodeType>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String string) {
-    return (GlideRequest<TranscodeType>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
-    return (GlideRequest<TranscodeType>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File file) {
-    return (GlideRequest<TranscodeType>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<TranscodeType>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL url) {
-    return (GlideRequest<TranscodeType>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
-    return (GlideRequest<TranscodeType>) super.load(bytes);
-  }
-
-  @Override
-  @CheckResult
-  public GlideRequest<TranscodeType> clone() {
-    return (GlideRequest<TranscodeType>) super.clone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/Extension.java
deleted file mode 100644
index 5bc2838f8..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/Extension.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
-
-@GlideExtension
-public final class Extension {
-
-  private Extension() {
-    // Utility class.
-  }
-
-  @GlideOption(override = GlideOption.OVERRIDE_EXTEND)
-  public static void centerCrop(RequestOptions requestOptions) {
-    requestOptions.centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
deleted file mode 100644
index e7bfc9733..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideOptions.java
+++ /dev/null
@@ -1,637 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see Extension
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform0;
-
-  private static GlideOptions centerInsideTransform1;
-
-  private static GlideOptions centerCropTransform2;
-
-  private static GlideOptions circleCropTransform3;
-
-  private static GlideOptions noTransformation4;
-
-  private static GlideOptions noAnimation5;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform0 == null) {
-      GlideOptions.fitCenterTransform0 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform0;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform1 == null) {
-      GlideOptions.centerInsideTransform1 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform2 == null) {
-      GlideOptions.centerCropTransform2 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform2;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform3 == null) {
-      GlideOptions.circleCropTransform3 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation4 == null) {
-      GlideOptions.noTransformation4 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation4;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation5 == null) {
-      GlideOptions.noAnimation5 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation5;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-
-  /**
-   * @see Extension#centerCrop(RequestOptions)
-   * @see RequestOptions#centerCrop()
-   */
-  @Override
-  @CheckResult
-  @NonNull
-  public GlideOptions centerCrop() {
-    if (isAutoCloneEnabled()) {
-      return clone().centerCrop();
-    }
-    super.centerCrop();
-    Extension.centerCrop(this);
-    return this;
-  }
-
-  /**
-   * @see Extension#centerCrop(RequestOptions)
-   */
-  @CheckResult
-  public static GlideOptions centerCropOf() {
-    return new GlideOptions().centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
deleted file mode 100644
index ee391f551..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideExtend/GlideRequest.java
+++ /dev/null
@@ -1,777 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.TransitionOptions;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
- * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
- * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * <p>Generated code, do not modify.
- *
- * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
- */
-@SuppressWarnings({
-    "unused",
-    "deprecation"
-})
-public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
-    super(transcodeClass, other);
-  }
-
-  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
-      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
-    super(glide, requestManager ,transcodeClass, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  protected GlideRequest<File> getDownloadOnlyRequest() {
-    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
-  }
-
-  /**
-   * @see GlideOptions#sizeMultiplier(float)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useAnimationPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#onlyRetrieveFromCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#priority(Priority)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#theme(Resources.Theme)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#skipMemoryCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#signature(Key)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#set(Option<T>, T)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#decode(Class<?>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeQuality(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#frame(long)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#format(DecodeFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#disallowHardwareConfig()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#downsample(DownsampleStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#timeout(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCircleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transforms(Transformation<Bitmap>[])
-   */
-  @NonNull
-  @CheckResult
-  @SuppressWarnings({
-      "unchecked",
-      "varargs"
-  })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontTransform()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontAnimate()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
-    return (GlideRequest<TranscodeType>) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
-    return (GlideRequest<TranscodeType>) super.transition(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.listener(listener);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.addListener(listener);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.error(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object o) {
-    return (GlideRequest<TranscodeType>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<TranscodeType>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
-    return (GlideRequest<TranscodeType>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String string) {
-    return (GlideRequest<TranscodeType>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
-    return (GlideRequest<TranscodeType>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File file) {
-    return (GlideRequest<TranscodeType>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<TranscodeType>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL url) {
-    return (GlideRequest<TranscodeType>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
-    return (GlideRequest<TranscodeType>) super.load(bytes);
-  }
-
-  @Override
-  @CheckResult
-  public GlideRequest<TranscodeType> clone() {
-    return (GlideRequest<TranscodeType>) super.clone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/Extension.java
deleted file mode 100644
index 591f857f2..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/Extension.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
-
-@GlideExtension
-public final class Extension {
-
-  private Extension() {
-    // Utility class.
-  }
-
-  @GlideOption(override = GlideOption.OVERRIDE_REPLACE)
-  public static void centerCrop(RequestOptions requestOptions) {
-    requestOptions.centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
deleted file mode 100644
index 5474f2008..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideOptions.java
+++ /dev/null
@@ -1,634 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see Extension
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform0;
-
-  private static GlideOptions centerInsideTransform1;
-
-  private static GlideOptions centerCropTransform2;
-
-  private static GlideOptions circleCropTransform3;
-
-  private static GlideOptions noTransformation4;
-
-  private static GlideOptions noAnimation5;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform0 == null) {
-      GlideOptions.fitCenterTransform0 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform0;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform1 == null) {
-      GlideOptions.centerInsideTransform1 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform2 == null) {
-      GlideOptions.centerCropTransform2 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform2;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform3 == null) {
-      GlideOptions.circleCropTransform3 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation4 == null) {
-      GlideOptions.noTransformation4 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation4;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation5 == null) {
-      GlideOptions.noAnimation5 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation5;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-
-  /**
-   * @see Extension#centerCrop(RequestOptions)
-   */
-  @CheckResult
-  @NonNull
-  public GlideOptions centerCrop() {
-    if (isAutoCloneEnabled()) {
-      return clone().centerCrop();
-    }
-    Extension.centerCrop(this);
-    return this;
-  }
-
-  /**
-   * @see Extension#centerCrop(RequestOptions)
-   */
-  @CheckResult
-  public static GlideOptions centerCropOf() {
-    return new GlideOptions().centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
deleted file mode 100644
index ee391f551..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/OverrideReplace/GlideRequest.java
+++ /dev/null
@@ -1,777 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.TransitionOptions;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
- * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
- * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * <p>Generated code, do not modify.
- *
- * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
- */
-@SuppressWarnings({
-    "unused",
-    "deprecation"
-})
-public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
-    super(transcodeClass, other);
-  }
-
-  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
-      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
-    super(glide, requestManager ,transcodeClass, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  protected GlideRequest<File> getDownloadOnlyRequest() {
-    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
-  }
-
-  /**
-   * @see GlideOptions#sizeMultiplier(float)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useAnimationPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#onlyRetrieveFromCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#priority(Priority)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#theme(Resources.Theme)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#skipMemoryCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#signature(Key)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#set(Option<T>, T)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#decode(Class<?>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeQuality(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#frame(long)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#format(DecodeFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#disallowHardwareConfig()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#downsample(DownsampleStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#timeout(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCircleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transforms(Transformation<Bitmap>[])
-   */
-  @NonNull
-  @CheckResult
-  @SuppressWarnings({
-      "unchecked",
-      "varargs"
-  })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontTransform()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontAnimate()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
-    return (GlideRequest<TranscodeType>) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
-    return (GlideRequest<TranscodeType>) super.transition(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.listener(listener);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.addListener(listener);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.error(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object o) {
-    return (GlideRequest<TranscodeType>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<TranscodeType>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
-    return (GlideRequest<TranscodeType>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String string) {
-    return (GlideRequest<TranscodeType>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
-    return (GlideRequest<TranscodeType>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File file) {
-    return (GlideRequest<TranscodeType>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<TranscodeType>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL url) {
-    return (GlideRequest<TranscodeType>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
-    return (GlideRequest<TranscodeType>) super.load(bytes);
-  }
-
-  @Override
-  @CheckResult
-  public GlideRequest<TranscodeType> clone() {
-    return (GlideRequest<TranscodeType>) super.clone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/Extension.java
deleted file mode 100644
index 448a02b74..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/Extension.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
-
-@GlideExtension
-public final class Extension {
-
-  private Extension() {
-    // Utility class.
-  }
-
-  @GlideOption(skipStaticMethod = true)
-  public static void test(RequestOptions requestOptions) {
-    requestOptions.centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
deleted file mode 100644
index 3e78d0ad4..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideOptions.java
+++ /dev/null
@@ -1,633 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see Extension
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform0;
-
-  private static GlideOptions centerInsideTransform1;
-
-  private static GlideOptions centerCropTransform2;
-
-  private static GlideOptions circleCropTransform3;
-
-  private static GlideOptions noTransformation4;
-
-  private static GlideOptions noAnimation5;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform0 == null) {
-      GlideOptions.fitCenterTransform0 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform0;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform1 == null) {
-      GlideOptions.centerInsideTransform1 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform2 == null) {
-      GlideOptions.centerCropTransform2 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform2;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform3 == null) {
-      GlideOptions.circleCropTransform3 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation4 == null) {
-      GlideOptions.noTransformation4 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation4;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation5 == null) {
-      GlideOptions.noAnimation5 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation5;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerCrop() {
-    return (GlideOptions) super.centerCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-
-  /**
-   * @see Extension#test(RequestOptions)
-   */
-  @CheckResult
-  @NonNull
-  public GlideOptions test() {
-    if (isAutoCloneEnabled()) {
-      return clone().test();
-    }
-    Extension.test(this);
-    return this;
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
deleted file mode 100644
index f0377a0a7..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/SkipStaticMethod/GlideRequest.java
+++ /dev/null
@@ -1,791 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.TransitionOptions;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
- * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
- * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * <p>Generated code, do not modify.
- *
- * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
- */
-@SuppressWarnings({
-    "unused",
-    "deprecation"
-})
-public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
-    super(transcodeClass, other);
-  }
-
-  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
-      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
-    super(glide, requestManager ,transcodeClass, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  protected GlideRequest<File> getDownloadOnlyRequest() {
-    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
-  }
-
-  /**
-   * @see GlideOptions#sizeMultiplier(float)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useAnimationPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#onlyRetrieveFromCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#priority(Priority)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#theme(Resources.Theme)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#skipMemoryCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#signature(Key)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#set(Option<T>, T)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#decode(Class<?>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeQuality(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#frame(long)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#format(DecodeFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#disallowHardwareConfig()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#downsample(DownsampleStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#timeout(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCircleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transforms(Transformation<Bitmap>[])
-   */
-  @NonNull
-  @CheckResult
-  @SuppressWarnings({
-      "unchecked",
-      "varargs"
-  })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontTransform()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontAnimate()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#test()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> test() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
-    }
-    return this;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
-    return (GlideRequest<TranscodeType>) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
-    return (GlideRequest<TranscodeType>) super.transition(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.listener(listener);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.addListener(listener);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.error(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object o) {
-    return (GlideRequest<TranscodeType>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<TranscodeType>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
-    return (GlideRequest<TranscodeType>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String string) {
-    return (GlideRequest<TranscodeType>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
-    return (GlideRequest<TranscodeType>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File file) {
-    return (GlideRequest<TranscodeType>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<TranscodeType>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL url) {
-    return (GlideRequest<TranscodeType>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
-    return (GlideRequest<TranscodeType>) super.load(bytes);
-  }
-
-  @Override
-  @CheckResult
-  public GlideRequest<TranscodeType> clone() {
-    return (GlideRequest<TranscodeType>) super.clone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/Extension.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/Extension.java
deleted file mode 100644
index b6c72bbad..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/Extension.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
-
-@GlideExtension
-public final class Extension {
-
-  private Extension() {
-    // Utility class.
-  }
-
-  @GlideOption(staticMethodName = "testSomething")
-  public static void test(RequestOptions requestOptions) {
-    requestOptions.centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
deleted file mode 100644
index 27dae5637..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideOptions.java
+++ /dev/null
@@ -1,641 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see Extension
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform0;
-
-  private static GlideOptions centerInsideTransform1;
-
-  private static GlideOptions centerCropTransform2;
-
-  private static GlideOptions circleCropTransform3;
-
-  private static GlideOptions noTransformation4;
-
-  private static GlideOptions noAnimation5;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform0 == null) {
-      GlideOptions.fitCenterTransform0 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform0;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform1 == null) {
-      GlideOptions.centerInsideTransform1 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform2 == null) {
-      GlideOptions.centerCropTransform2 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform2;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform3 == null) {
-      GlideOptions.circleCropTransform3 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation4 == null) {
-      GlideOptions.noTransformation4 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation4;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation5 == null) {
-      GlideOptions.noAnimation5 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation5;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerCrop() {
-    return (GlideOptions) super.centerCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-
-  /**
-   * @see Extension#test(RequestOptions)
-   */
-  @CheckResult
-  @NonNull
-  public GlideOptions test() {
-    if (isAutoCloneEnabled()) {
-      return clone().test();
-    }
-    Extension.test(this);
-    return this;
-  }
-
-  /**
-   * @see Extension#test(RequestOptions)
-   */
-  @CheckResult
-  public static GlideOptions testSomething() {
-    return new GlideOptions().test();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
deleted file mode 100644
index f0377a0a7..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionOptionsTest/StaticMethodName/GlideRequest.java
+++ /dev/null
@@ -1,791 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.TransitionOptions;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
- * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
- * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * <p>Generated code, do not modify.
- *
- * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
- */
-@SuppressWarnings({
-    "unused",
-    "deprecation"
-})
-public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
-    super(transcodeClass, other);
-  }
-
-  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
-      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
-    super(glide, requestManager ,transcodeClass, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  protected GlideRequest<File> getDownloadOnlyRequest() {
-    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
-  }
-
-  /**
-   * @see GlideOptions#sizeMultiplier(float)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useAnimationPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#onlyRetrieveFromCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#priority(Priority)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#theme(Resources.Theme)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#skipMemoryCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#signature(Key)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#set(Option<T>, T)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#decode(Class<?>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeQuality(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#frame(long)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#format(DecodeFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#disallowHardwareConfig()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#downsample(DownsampleStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#timeout(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCircleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transforms(Transformation<Bitmap>[])
-   */
-  @NonNull
-  @CheckResult
-  @SuppressWarnings({
-      "unchecked",
-      "varargs"
-  })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontTransform()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontAnimate()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#test()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> test() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).test();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).test();
-    }
-    return this;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
-    return (GlideRequest<TranscodeType>) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
-    return (GlideRequest<TranscodeType>) super.transition(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.listener(listener);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.addListener(listener);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.error(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object o) {
-    return (GlideRequest<TranscodeType>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<TranscodeType>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
-    return (GlideRequest<TranscodeType>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String string) {
-    return (GlideRequest<TranscodeType>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
-    return (GlideRequest<TranscodeType>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File file) {
-    return (GlideRequest<TranscodeType>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<TranscodeType>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL url) {
-    return (GlideRequest<TranscodeType>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
-    return (GlideRequest<TranscodeType>) super.load(bytes);
-  }
-
-  @Override
-  @CheckResult
-  public GlideRequest<TranscodeType> clone() {
-    return (GlideRequest<TranscodeType>) super.clone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/ExtensionWithOption.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/ExtensionWithOption.java
deleted file mode 100644
index b67065d43..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/ExtensionWithOption.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
-
-@GlideExtension
-public final class ExtensionWithOption {
-
-  private ExtensionWithOption() {
-    // Utility class.
-  }
-
-  @GlideOption
-  public static void squareThumb(RequestOptions requestOptions) {
-    requestOptions.centerCrop();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
deleted file mode 100644
index c4cef3aa9..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideOptions.java
+++ /dev/null
@@ -1,641 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see ExtensionWithOption
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform0;
-
-  private static GlideOptions centerInsideTransform1;
-
-  private static GlideOptions centerCropTransform2;
-
-  private static GlideOptions circleCropTransform3;
-
-  private static GlideOptions noTransformation4;
-
-  private static GlideOptions noAnimation5;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform0 == null) {
-      GlideOptions.fitCenterTransform0 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform0;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform1 == null) {
-      GlideOptions.centerInsideTransform1 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform2 == null) {
-      GlideOptions.centerCropTransform2 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform2;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform3 == null) {
-      GlideOptions.circleCropTransform3 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation4 == null) {
-      GlideOptions.noTransformation4 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation4;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation5 == null) {
-      GlideOptions.noAnimation5 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation5;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerCrop() {
-    return (GlideOptions) super.centerCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-
-  /**
-   * @see ExtensionWithOption#squareThumb(RequestOptions)
-   */
-  @CheckResult
-  @NonNull
-  public GlideOptions squareThumb() {
-    if (isAutoCloneEnabled()) {
-      return clone().squareThumb();
-    }
-    ExtensionWithOption.squareThumb(this);
-    return this;
-  }
-
-  /**
-   * @see ExtensionWithOption#squareThumb(RequestOptions)
-   */
-  @CheckResult
-  public static GlideOptions squareThumbOf() {
-    return new GlideOptions().squareThumb();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
deleted file mode 100644
index 05b6b7d5c..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithOptionTest/GlideRequest.java
+++ /dev/null
@@ -1,791 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.TransitionOptions;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestListener;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Contains all public methods from {@link RequestBuilder<TranscodeType>}, all options from
- * {@link RequestOptions} and all generated options from
- * {@link com.bumptech.glide.annotation.GlideOption} in annotated methods in
- * {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * <p>Generated code, do not modify.
- *
- * @see RequestBuilder<TranscodeType>
- * @see RequestOptions
- */
-@SuppressWarnings({
-    "unused",
-    "deprecation"
-})
-public class GlideRequest<TranscodeType> extends RequestBuilder<TranscodeType> implements Cloneable {
-  GlideRequest(@NonNull Class<TranscodeType> transcodeClass, @NonNull RequestBuilder<?> other) {
-    super(transcodeClass, other);
-  }
-
-  GlideRequest(@NonNull Glide glide, @NonNull RequestManager requestManager,
-      @NonNull Class<TranscodeType> transcodeClass, @NonNull Context context) {
-    super(glide, requestManager ,transcodeClass, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  protected GlideRequest<File> getDownloadOnlyRequest() {
-    return new GlideRequest<>(File.class, this).apply(DOWNLOAD_ONLY_OPTIONS);
-  }
-
-  /**
-   * @see GlideOptions#sizeMultiplier(float)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).sizeMultiplier(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).sizeMultiplier(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useUnlimitedSourceGeneratorsPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useUnlimitedSourceGeneratorsPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useUnlimitedSourceGeneratorsPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#useAnimationPool(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> useAnimationPool(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).useAnimationPool(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).useAnimationPool(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#onlyRetrieveFromCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> onlyRetrieveFromCache(boolean flag) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).onlyRetrieveFromCache(flag);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).onlyRetrieveFromCache(flag);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#diskCacheStrategy(DiskCacheStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).diskCacheStrategy(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).diskCacheStrategy(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#priority(Priority)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> priority(@NonNull Priority priority) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).priority(priority);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).priority(priority);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#placeholder(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> placeholder(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).placeholder(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).placeholder(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fallback(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fallback(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fallback(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fallback(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(Drawable)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@Nullable Drawable drawable) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(drawable);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(drawable);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#error(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> error(@DrawableRes int id) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).error(id);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).error(id);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#theme(Resources.Theme)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> theme(@Nullable Resources.Theme theme) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).theme(theme);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).theme(theme);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#skipMemoryCache(boolean)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> skipMemoryCache(boolean skip) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).skipMemoryCache(skip);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).skipMemoryCache(skip);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int, int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int width, int height) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(width, height);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(width, height);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#override(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> override(int size) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).override(size);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).override(size);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#signature(Key)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> signature(@NonNull Key key) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).signature(key);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).signature(key);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#set(Option<T>, T)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> set(@NonNull Option<T> option, @NonNull T t) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).set(option, t);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).set(option, t);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#decode(Class<?>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> decode(@NonNull Class<?> clazz) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).decode(clazz);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).decode(clazz);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeFormat(Bitmap.CompressFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeFormat(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeFormat(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#encodeQuality(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).encodeQuality(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).encodeQuality(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#frame(long)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> frame(@IntRange(from = 0) long value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).frame(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).frame(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#format(DecodeFormat)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> format(@NonNull DecodeFormat format) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).format(format);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).format(format);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#disallowHardwareConfig()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> disallowHardwareConfig() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).disallowHardwareConfig();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).disallowHardwareConfig();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#downsample(DownsampleStrategy)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> downsample(@NonNull DownsampleStrategy strategy) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).downsample(strategy);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).downsample(strategy);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#timeout(int)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> timeout(@IntRange(from = 0) int value) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).timeout(value);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).timeout(value);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalFitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalFitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalFitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> fitCenter() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).fitCenter();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).fitCenter();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCenterInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCenterInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCenterInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> centerInside() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).centerInside();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).centerInside();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalCircleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalCircleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalCircleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalCircleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> circleCrop() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).circleCrop();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).circleCrop();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transforms(Transformation<Bitmap>[])
-   */
-  @NonNull
-  @CheckResult
-  @SuppressWarnings({
-      "unchecked",
-      "varargs"
-  })
-  public GlideRequest<TranscodeType> transforms(@NonNull Transformation<Bitmap>... transformations) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transforms(transformations);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transforms(transformations);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Transformation<Bitmap>)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#optionalTransform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).optionalTransform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).optionalTransform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#transform(Class<T>, Transformation<T>)
-   */
-  @NonNull
-  @CheckResult
-  public <T> GlideRequest<TranscodeType> transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).transform(clazz, transformation);
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).transform(clazz, transformation);
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontTransform()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontTransform() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontTransform();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontTransform();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#dontAnimate()
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> dontAnimate() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).dontAnimate();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).dontAnimate();
-    }
-    return this;
-  }
-
-  /**
-   * @see GlideOptions#squareThumb()
-   */
-  @CheckResult
-  @NonNull
-  public GlideRequest<TranscodeType> squareThumb() {
-    if (getMutableOptions() instanceof GlideOptions) {
-      this.requestOptions = ((GlideOptions) getMutableOptions()).squareThumb();
-    } else {
-      this.requestOptions = new GlideOptions().apply(this.requestOptions).squareThumb();
-    }
-    return this;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> apply(@NonNull RequestOptions options) {
-    return (GlideRequest<TranscodeType>) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> transition(@NonNull TransitionOptions<?, ? super TranscodeType> options) {
-    return (GlideRequest<TranscodeType>) super.transition(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> listener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.listener(listener);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> addListener(@Nullable RequestListener<TranscodeType> listener) {
-    return (GlideRequest<TranscodeType>) super.addListener(listener);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequest<TranscodeType> error(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.error(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType> builder) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builder);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  public final GlideRequest<TranscodeType> thumbnail(@Nullable RequestBuilder<TranscodeType>... builders) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(builders);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> thumbnail(float sizeMultiplier) {
-    return (GlideRequest<TranscodeType>) super.thumbnail(sizeMultiplier);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Object o) {
-    return (GlideRequest<TranscodeType>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<TranscodeType>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Drawable drawable) {
-    return (GlideRequest<TranscodeType>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable String string) {
-    return (GlideRequest<TranscodeType>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable Uri uri) {
-    return (GlideRequest<TranscodeType>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable File file) {
-    return (GlideRequest<TranscodeType>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<TranscodeType>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable URL url) {
-    return (GlideRequest<TranscodeType>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<TranscodeType> load(@Nullable byte[] bytes) {
-    return (GlideRequest<TranscodeType>) super.load(bytes);
-  }
-
-  @Override
-  @CheckResult
-  public GlideRequest<TranscodeType> clone() {
-    return (GlideRequest<TranscodeType>) super.clone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
deleted file mode 100644
index 47c22dd4d..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.bumptech.glide.test;
-
-import com.bumptech.glide.RequestBuilder;
-import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideType;
-
-@GlideExtension
-public final class ExtensionWithType {
-
-  private ExtensionWithType() {
-    // Utility class.
-  }
-
-  @GlideType(Number.class)
-  public static void asInteger(RequestBuilder<Number> builder) {}
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
deleted file mode 100644
index 558dc9f8c..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideOptions.java
+++ /dev/null
@@ -1,620 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.FloatRange;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.bumptech.glide.Priority;
-import com.bumptech.glide.load.DecodeFormat;
-import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Transformation;
-import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.request.RequestOptions;
-import java.lang.Class;
-import java.lang.Cloneable;
-import java.lang.Override;
-import java.lang.SafeVarargs;
-import java.lang.SuppressWarnings;
-
-/**
- * Automatically generated from {@link com.bumptech.glide.annotation.GlideExtension} annotated classes.
- *
- * @see RequestOptions
- * @see ExtensionWithType
- */
-@SuppressWarnings("deprecation")
-public final class GlideOptions extends RequestOptions implements Cloneable {
-  private static GlideOptions fitCenterTransform0;
-
-  private static GlideOptions centerInsideTransform1;
-
-  private static GlideOptions centerCropTransform2;
-
-  private static GlideOptions circleCropTransform3;
-
-  private static GlideOptions noTransformation4;
-
-  private static GlideOptions noAnimation5;
-
-  /**
-   * @see RequestOptions#sizeMultiplierOf(float)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions sizeMultiplierOf(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return new GlideOptions().sizeMultiplier(value);
-  }
-
-  /**
-   * @see RequestOptions#diskCacheStrategyOf(DiskCacheStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy strategy) {
-    return new GlideOptions().diskCacheStrategy(strategy);
-  }
-
-  /**
-   * @see RequestOptions#priorityOf(Priority)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions priorityOf(@NonNull Priority priority) {
-    return new GlideOptions().priority(priority);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@Nullable Drawable drawable) {
-    return new GlideOptions().placeholder(drawable);
-  }
-
-  /**
-   * @see RequestOptions#placeholderOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions placeholderOf(@DrawableRes int id) {
-    return new GlideOptions().placeholder(id);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(Drawable)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@Nullable Drawable drawable) {
-    return new GlideOptions().error(drawable);
-  }
-
-  /**
-   * @see RequestOptions#errorOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions errorOf(@DrawableRes int id) {
-    return new GlideOptions().error(id);
-  }
-
-  /**
-   * @see RequestOptions#skipMemoryCacheOf(boolean)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions skipMemoryCacheOf(boolean skipMemoryCache) {
-    return new GlideOptions().skipMemoryCache(skipMemoryCache);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int, int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value0,
-      @IntRange(from = 0) int value1) {
-    return new GlideOptions().override(value0, value1);
-  }
-
-  /**
-   * @see RequestOptions#overrideOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions overrideOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().override(value);
-  }
-
-  /**
-   * @see RequestOptions#signatureOf(Key)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions signatureOf(@NonNull Key key) {
-    return new GlideOptions().signature(key);
-  }
-
-  /**
-   * @see RequestOptions#fitCenterTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions fitCenterTransform() {
-    if (GlideOptions.fitCenterTransform0 == null) {
-      GlideOptions.fitCenterTransform0 =
-          new GlideOptions().fitCenter().autoClone();
-    }
-    return GlideOptions.fitCenterTransform0;
-  }
-
-  /**
-   * @see RequestOptions#centerInsideTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerInsideTransform() {
-    if (GlideOptions.centerInsideTransform1 == null) {
-      GlideOptions.centerInsideTransform1 =
-          new GlideOptions().centerInside().autoClone();
-    }
-    return GlideOptions.centerInsideTransform1;
-  }
-
-  /**
-   * @see RequestOptions#centerCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions centerCropTransform() {
-    if (GlideOptions.centerCropTransform2 == null) {
-      GlideOptions.centerCropTransform2 =
-          new GlideOptions().centerCrop().autoClone();
-    }
-    return GlideOptions.centerCropTransform2;
-  }
-
-  /**
-   * @see RequestOptions#circleCropTransform()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions circleCropTransform() {
-    if (GlideOptions.circleCropTransform3 == null) {
-      GlideOptions.circleCropTransform3 =
-          new GlideOptions().circleCrop().autoClone();
-    }
-    return GlideOptions.circleCropTransform3;
-  }
-
-  /**
-   * @see RequestOptions#bitmapTransform(Transformation)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions bitmapTransform(@NonNull Transformation<Bitmap> transformation) {
-    return new GlideOptions().transform(transformation);
-  }
-
-  /**
-   * @see RequestOptions#noTransformation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noTransformation() {
-    if (GlideOptions.noTransformation4 == null) {
-      GlideOptions.noTransformation4 =
-          new GlideOptions().dontTransform().autoClone();
-    }
-    return GlideOptions.noTransformation4;
-  }
-
-  /**
-   * @see RequestOptions#option(Option, T)
-   */
-  @CheckResult
-  @NonNull
-  public static <T> GlideOptions option(@NonNull Option<T> option, @NonNull T t) {
-    return new GlideOptions().set(option, t);
-  }
-
-  /**
-   * @see RequestOptions#decodeTypeOf(Class)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions decodeTypeOf(@NonNull Class<?> clazz) {
-    return new GlideOptions().decode(clazz);
-  }
-
-  /**
-   * @see RequestOptions#formatOf(DecodeFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions formatOf(@NonNull DecodeFormat format) {
-    return new GlideOptions().format(format);
-  }
-
-  /**
-   * @see RequestOptions#frameOf(long)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions frameOf(@IntRange(from = 0) long value) {
-    return new GlideOptions().frame(value);
-  }
-
-  /**
-   * @see RequestOptions#downsampleOf(DownsampleStrategy)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions downsampleOf(@NonNull DownsampleStrategy strategy) {
-    return new GlideOptions().downsample(strategy);
-  }
-
-  /**
-   * @see RequestOptions#timeoutOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions timeoutOf(@IntRange(from = 0) int value) {
-    return new GlideOptions().timeout(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeQualityOf(int)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeQualityOf(@IntRange(from = 0, to = 100) int value) {
-    return new GlideOptions().encodeQuality(value);
-  }
-
-  /**
-   * @see RequestOptions#encodeFormatOf(CompressFormat)
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions encodeFormatOf(@NonNull Bitmap.CompressFormat format) {
-    return new GlideOptions().encodeFormat(format);
-  }
-
-  /**
-   * @see RequestOptions#noAnimation()
-   */
-  @CheckResult
-  @NonNull
-  public static GlideOptions noAnimation() {
-    if (GlideOptions.noAnimation5 == null) {
-      GlideOptions.noAnimation5 =
-          new GlideOptions().dontAnimate().autoClone();
-    }
-    return GlideOptions.noAnimation5;
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions sizeMultiplier(@FloatRange(from = 0.0, to = 1.0) float value) {
-    return (GlideOptions) super.sizeMultiplier(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    return (GlideOptions) super.useUnlimitedSourceGeneratorsPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions useAnimationPool(boolean flag) {
-    return (GlideOptions) super.useAnimationPool(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions onlyRetrieveFromCache(boolean flag) {
-    return (GlideOptions) super.onlyRetrieveFromCache(flag);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    return (GlideOptions) super.diskCacheStrategy(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions priority(@NonNull Priority priority) {
-    return (GlideOptions) super.priority(priority);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@Nullable Drawable drawable) {
-    return (GlideOptions) super.placeholder(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions placeholder(@DrawableRes int id) {
-    return (GlideOptions) super.placeholder(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@Nullable Drawable drawable) {
-    return (GlideOptions) super.fallback(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fallback(@DrawableRes int id) {
-    return (GlideOptions) super.fallback(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@Nullable Drawable drawable) {
-    return (GlideOptions) super.error(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions error(@DrawableRes int id) {
-    return (GlideOptions) super.error(id);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions theme(@Nullable Resources.Theme theme) {
-    return (GlideOptions) super.theme(theme);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions skipMemoryCache(boolean skip) {
-    return (GlideOptions) super.skipMemoryCache(skip);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int width, int height) {
-    return (GlideOptions) super.override(width, height);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions override(int size) {
-    return (GlideOptions) super.override(size);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions signature(@NonNull Key key) {
-    return (GlideOptions) super.signature(key);
-  }
-
-  @Override
-  @CheckResult
-  public final GlideOptions clone() {
-    return (GlideOptions) super.clone();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions set(@NonNull Option<T> option, @NonNull T t) {
-    return (GlideOptions) super.set(option, t);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions decode(@NonNull Class<?> clazz) {
-    return (GlideOptions) super.decode(clazz);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return (GlideOptions) super.encodeFormat(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions encodeQuality(@IntRange(from = 0, to = 100) int value) {
-    return (GlideOptions) super.encodeQuality(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions frame(@IntRange(from = 0) long value) {
-    return (GlideOptions) super.frame(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions format(@NonNull DecodeFormat format) {
-    return (GlideOptions) super.format(format);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions disallowHardwareConfig() {
-    return (GlideOptions) super.disallowHardwareConfig();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return (GlideOptions) super.downsample(strategy);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions timeout(@IntRange(from = 0) int value) {
-    return (GlideOptions) super.timeout(value);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterCrop() {
-    return (GlideOptions) super.optionalCenterCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerCrop() {
-    return (GlideOptions) super.centerCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalFitCenter() {
-    return (GlideOptions) super.optionalFitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions fitCenter() {
-    return (GlideOptions) super.fitCenter();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCenterInside() {
-    return (GlideOptions) super.optionalCenterInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions centerInside() {
-    return (GlideOptions) super.centerInside();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalCircleCrop() {
-    return (GlideOptions) super.optionalCircleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions circleCrop() {
-    return (GlideOptions) super.circleCrop();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.transform(transformation);
-  }
-
-  @Override
-  @SafeVarargs
-  @SuppressWarnings("varargs")
-  @NonNull
-  @CheckResult
-  public final GlideOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return (GlideOptions) super.transforms(transformations);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return (GlideOptions) super.optionalTransform(transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions optionalTransform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.optionalTransform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final <T> GlideOptions transform(@NonNull Class<T> clazz,
-      @NonNull Transformation<T> transformation) {
-    return (GlideOptions) super.transform(clazz, transformation);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontTransform() {
-    return (GlideOptions) super.dontTransform();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions dontAnimate() {
-    return (GlideOptions) super.dontAnimate();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public final GlideOptions apply(@NonNull RequestOptions options) {
-    return (GlideOptions) super.apply(options);
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions lock() {
-    return (GlideOptions) super.lock();
-  }
-
-  @Override
-  @NonNull
-  public final GlideOptions autoClone() {
-    return (GlideOptions) super.autoClone();
-  }
-}
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
deleted file mode 100644
index 69707f838..000000000
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/GlideRequests.java
+++ /dev/null
@@ -1,185 +0,0 @@
-package com.bumptech.glide.test;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.support.annotation.CheckResult;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import com.bumptech.glide.Glide;
-import com.bumptech.glide.RequestManager;
-import com.bumptech.glide.load.resource.gif.GifDrawable;
-import com.bumptech.glide.manager.Lifecycle;
-import com.bumptech.glide.manager.RequestManagerTreeNode;
-import com.bumptech.glide.request.RequestOptions;
-import java.io.File;
-import java.lang.Class;
-import java.lang.Deprecated;
-import java.lang.Integer;
-import java.lang.Number;
-import java.lang.Object;
-import java.lang.Override;
-import java.lang.String;
-import java.lang.SuppressWarnings;
-import java.net.URL;
-
-/**
- * Includes all additions from methods in {@link com.bumptech.glide.annotation.GlideExtension}s
- * annotated with {@link com.bumptech.glide.annotation.GlideType}
- *
- * <p>Generated code, do not modify
- */
-@SuppressWarnings("deprecation")
-public class GlideRequests extends RequestManager {
-  public GlideRequests(@NonNull Glide glide, @NonNull Lifecycle lifecycle,
-      @NonNull RequestManagerTreeNode treeNode, @NonNull Context context) {
-    super(glide, lifecycle, treeNode, context);
-  }
-
-  @Override
-  @CheckResult
-  @NonNull
-  public <ResourceType> GlideRequest<ResourceType> as(@NonNull Class<ResourceType> resourceClass) {
-    return new GlideRequest<>(glide, this, resourceClass, context);
-  }
-
-  /**
-   * @see ExtensionWithType#asInteger(RequestBuilder)
-   */
-  @NonNull
-  @CheckResult
-  public GlideRequest<Number> asInteger() {
-    GlideRequest<Number> requestBuilder = this.as(Number.class);
-    ExtensionWithType.asInteger(requestBuilder);
-    return requestBuilder;
-  }
-
-  @Override
-  @NonNull
-  public GlideRequests applyDefaultRequestOptions(@NonNull RequestOptions options) {
-    return (GlideRequests) super.applyDefaultRequestOptions(options);
-  }
-
-  @Override
-  @NonNull
-  public GlideRequests setDefaultRequestOptions(@NonNull RequestOptions options) {
-    return (GlideRequests) super.setDefaultRequestOptions(options);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Bitmap> asBitmap() {
-    return (GlideRequest<Bitmap>) super.asBitmap();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<GifDrawable> asGif() {
-    return (GlideRequest<GifDrawable>) super.asGif();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> asDrawable() {
-    return (GlideRequest<Drawable>) super.asDrawable();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Bitmap bitmap) {
-    return (GlideRequest<Drawable>) super.load(bitmap);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Drawable drawable) {
-    return (GlideRequest<Drawable>) super.load(drawable);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable String string) {
-    return (GlideRequest<Drawable>) super.load(string);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Uri uri) {
-    return (GlideRequest<Drawable>) super.load(uri);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable File file) {
-    return (GlideRequest<Drawable>) super.load(file);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@RawRes @DrawableRes @Nullable Integer id) {
-    return (GlideRequest<Drawable>) super.load(id);
-  }
-
-  @Override
-  @Deprecated
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable URL url) {
-    return (GlideRequest<Drawable>) super.load(url);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable byte[] bytes) {
-    return (GlideRequest<Drawable>) super.load(bytes);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<Drawable> load(@Nullable Object o) {
-    return (GlideRequest<Drawable>) super.load(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<File> downloadOnly() {
-    return (GlideRequest<File>) super.downloadOnly();
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<File> download(@Nullable Object o) {
-    return (GlideRequest<File>) super.download(o);
-  }
-
-  @Override
-  @NonNull
-  @CheckResult
-  public GlideRequest<File> asFile() {
-    return (GlideRequest<File>) super.asFile();
-  }
-
-  @Override
-  protected void setRequestOptions(@NonNull RequestOptions toSet) {
-    if (toSet instanceof com.bumptech.glide.test.GlideOptions) {
-      super.setRequestOptions(toSet);
-    } else {
-      super.setRequestOptions(new com.bumptech.glide.test.GlideOptions().apply(toSet));
-    }
-  }
-}
diff --git a/gradle.properties b/gradle.properties
index c8e1e4eb0..0af4d3a62 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,9 +1,9 @@
 org.gradle.daemon=true
 org.gradle.configureondemand=false
 
-VERSION_NAME=4.8.0
+VERSION_NAME=4.9.0-SNAPSHOT
 VERSION_MAJOR=4
-VERSION_MINOR=8
+VERSION_MINOR=9
 VERSION_PATCH=0
 GROUP=com.github.bumptech.glide
 
diff --git a/integration/recyclerview/lint.xml b/integration/recyclerview/lint.xml
index ff7e5955c..5e2b51e98 100644
--- a/integration/recyclerview/lint.xml
+++ b/integration/recyclerview/lint.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <lint>
     <issue id="AllowBackup" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore" />
 </lint>
diff --git a/library/lint.xml b/library/lint.xml
index c6cf01b20..d904731d9 100644
--- a/library/lint.xml
+++ b/library/lint.xml
@@ -2,4 +2,5 @@
 <lint>
     <issue id="AllowBackup" severity="ignore"/>
     <issue id="ExifInterface" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore"/>
 </lint>
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index f200fa96c..89b950cd8 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -22,6 +22,7 @@
 import android.view.View;
 import com.bumptech.glide.gifdecoder.GifDecoder;
 import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.ImageHeaderParser;
 import com.bumptech.glide.load.ResourceDecoder;
 import com.bumptech.glide.load.data.InputStreamRewinder;
 import com.bumptech.glide.load.engine.Engine;
@@ -76,6 +77,7 @@
 import com.bumptech.glide.manager.ConnectivityMonitorFactory;
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.module.ManifestParser;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.Target;
@@ -319,7 +321,8 @@ private static void throwIncorrectGlideModule(Exception e) {
       @NonNull ConnectivityMonitorFactory connectivityMonitorFactory,
       int logLevel,
       @NonNull RequestOptions defaultRequestOptions,
-      @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions) {
+      @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,
+      @NonNull List<RequestListener<Object>> defaultRequestListeners) {
     this.engine = engine;
     this.bitmapPool = bitmapPool;
     this.arrayPool = arrayPool;
@@ -342,10 +345,15 @@ private static void throwIncorrectGlideModule(Exception e) {
     }
     registry.register(new DefaultImageHeaderParser());
 
-    Downsampler downsampler = new Downsampler(registry.getImageHeaderParsers(),
-        resources.getDisplayMetrics(), bitmapPool, arrayPool);
+    List<ImageHeaderParser> imageHeaderParsers = registry.getImageHeaderParsers();
+    Downsampler downsampler =
+        new Downsampler(
+            imageHeaderParsers,
+            resources.getDisplayMetrics(),
+            bitmapPool,
+            arrayPool);
     ByteBufferGifDecoder byteBufferGifDecoder =
-        new ByteBufferGifDecoder(context, registry.getImageHeaderParsers(), bitmapPool, arrayPool);
+        new ByteBufferGifDecoder(context, imageHeaderParsers, bitmapPool, arrayPool);
     ResourceDecoder<ParcelFileDescriptor, Bitmap> parcelFileDescriptorVideoDecoder =
         VideoDecoder.parcel(bitmapPool);
     ByteBufferBitmapDecoder byteBufferBitmapDecoder = new ByteBufferBitmapDecoder(downsampler);
@@ -409,7 +417,7 @@ private static void throwIncorrectGlideModule(Exception e) {
             Registry.BUCKET_GIF,
             InputStream.class,
             GifDrawable.class,
-            new StreamGifDecoder(registry.getImageHeaderParsers(), byteBufferGifDecoder, arrayPool))
+            new StreamGifDecoder(imageHeaderParsers, byteBufferGifDecoder, arrayPool))
         .append(Registry.BUCKET_GIF, ByteBuffer.class, GifDrawable.class, byteBufferGifDecoder)
         .append(GifDrawable.class, new GifDrawableEncoder())
         /* GIF Frames */
@@ -512,6 +520,7 @@ private static void throwIncorrectGlideModule(Exception e) {
             imageViewTargetFactory,
             defaultRequestOptions,
             defaultTransitionOptions,
+            defaultRequestListeners,
             engine,
             logLevel);
   }
diff --git a/library/src/main/java/com/bumptech/glide/GlideBuilder.java b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
index 311258207..bdfae965b 100644
--- a/library/src/main/java/com/bumptech/glide/GlideBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/GlideBuilder.java
@@ -6,7 +6,9 @@
 import android.support.annotation.Nullable;
 import android.support.v4.util.ArrayMap;
 import android.util.Log;
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.Engine;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
 import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;
@@ -22,8 +24,12 @@
 import com.bumptech.glide.manager.DefaultConnectivityMonitorFactory;
 import com.bumptech.glide.manager.RequestManagerRetriever;
 import com.bumptech.glide.manager.RequestManagerRetriever.RequestManagerFactory;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 import java.util.Map;
 
 /**
@@ -46,6 +52,8 @@
   private RequestManagerFactory requestManagerFactory;
   private GlideExecutor animationExecutor;
   private boolean isActiveResourceRetentionAllowed;
+  @Nullable
+  private List<RequestListener<Object>> defaultRequestListeners;
 
   /**
    * Sets the {@link com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool} implementation to use
@@ -372,6 +380,32 @@ public GlideBuilder setIsActiveResourceRetentionAllowed(
     return this;
   }
 
+  /**
+   * Adds a global {@link RequestListener} that will be added to every request started with Glide.
+   *
+   * <p>Multiple {@link RequestListener}s can be added here, in {@link RequestManager} scopes or
+   * to individual {@link RequestBuilder}s. {@link RequestListener}s are called in the order they're
+   * added. Even if an earlier {@link RequestListener} returns {@code true} from
+   * {@link RequestListener#onLoadFailed(GlideException, Object, Target, boolean)} or
+   * {@link RequestListener#onResourceReady(Object, Object, Target, DataSource, boolean)}, it will
+   * not prevent subsequent {@link RequestListener}s from being called.
+   *
+   * <p>Because Glide requests can be started for any number of individual resource types, any
+   * listener added here has to accept any generic resource type in
+   * {@link RequestListener#onResourceReady(Object, Object, Target, DataSource, boolean)}. If you
+   * must base the behavior of the listener on the resource type, you will need to use
+   * {@code instanceof} to do so. It's not safe to cast resource types without first checking
+   * with {@code instanceof}.
+   */
+  @NonNull
+  public GlideBuilder addGlobalRequestListener(@NonNull RequestListener<Object> listener) {
+    if (defaultRequestListeners == null) {
+      defaultRequestListeners = new ArrayList<>();
+    }
+    defaultRequestListeners.add(listener);
+    return this;
+  }
+
   void setRequestManagerFactory(@Nullable RequestManagerFactory factory) {
     this.requestManagerFactory = factory;
   }
@@ -437,6 +471,12 @@ Glide build(@NonNull Context context) {
               isActiveResourceRetentionAllowed);
     }
 
+    if (defaultRequestListeners == null) {
+      defaultRequestListeners = Collections.emptyList();
+    } else {
+      defaultRequestListeners = Collections.unmodifiableList(defaultRequestListeners);
+    }
+
     RequestManagerRetriever requestManagerRetriever =
         new RequestManagerRetriever(requestManagerFactory);
 
@@ -450,6 +490,7 @@ Glide build(@NonNull Context context) {
         connectivityMonitorFactory,
         logLevel,
         defaultRequestOptions.lock(),
-        defaultTransitionOptions);
+        defaultTransitionOptions,
+        defaultRequestListeners);
   }
 }
diff --git a/library/src/main/java/com/bumptech/glide/GlideContext.java b/library/src/main/java/com/bumptech/glide/GlideContext.java
index eeb98cc5f..a587b19bd 100644
--- a/library/src/main/java/com/bumptech/glide/GlideContext.java
+++ b/library/src/main/java/com/bumptech/glide/GlideContext.java
@@ -9,9 +9,11 @@
 import android.widget.ImageView;
 import com.bumptech.glide.load.engine.Engine;
 import com.bumptech.glide.load.engine.bitmap_recycle.ArrayPool;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
 import com.bumptech.glide.request.target.ViewTarget;
+import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 
@@ -28,6 +30,7 @@
   private final Registry registry;
   private final ImageViewTargetFactory imageViewTargetFactory;
   private final RequestOptions defaultRequestOptions;
+  private final List<RequestListener<Object>> defaultRequestListeners;
   private final Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions;
   private final Engine engine;
   private final int logLevel;
@@ -39,6 +42,7 @@ public GlideContext(
       @NonNull ImageViewTargetFactory imageViewTargetFactory,
       @NonNull RequestOptions defaultRequestOptions,
       @NonNull Map<Class<?>, TransitionOptions<?, ?>> defaultTransitionOptions,
+      @NonNull List<RequestListener<Object>> defaultRequestListeners,
       @NonNull Engine engine,
       int logLevel) {
     super(context.getApplicationContext());
@@ -46,6 +50,7 @@ public GlideContext(
     this.registry = registry;
     this.imageViewTargetFactory = imageViewTargetFactory;
     this.defaultRequestOptions = defaultRequestOptions;
+    this.defaultRequestListeners = defaultRequestListeners;
     this.defaultTransitionOptions = defaultTransitionOptions;
     this.engine = engine;
     this.logLevel = logLevel;
@@ -53,6 +58,10 @@ public GlideContext(
     mainHandler = new Handler(Looper.getMainLooper());
   }
 
+  public List<RequestListener<Object>> getDefaultRequestListeners() {
+    return defaultRequestListeners;
+  }
+
   public RequestOptions getDefaultRequestOptions() {
     return defaultRequestOptions;
   }
diff --git a/library/src/main/java/com/bumptech/glide/Registry.java b/library/src/main/java/com/bumptech/glide/Registry.java
index 62f135d7d..c5903fcf2 100644
--- a/library/src/main/java/com/bumptech/glide/Registry.java
+++ b/library/src/main/java/com/bumptech/glide/Registry.java
@@ -265,7 +265,9 @@ public Registry() {
   // Final to avoid a PMD error.
   @NonNull
   public final Registry setResourceDecoderBucketPriorityList(@NonNull List<String> buckets) {
-    List<String> modifiedBuckets = new ArrayList<>(buckets);
+    // See #3296 and https://bugs.openjdk.java.net/browse/JDK-6260652.
+    List<String> modifiedBuckets = new ArrayList<>(buckets.size());
+    modifiedBuckets.addAll(buckets);
     modifiedBuckets.add(0, BUCKET_PREPEND_ALL);
     modifiedBuckets.add(BUCKET_APPEND_ALL);
     decoderRegistry.setBucketPriorityList(modifiedBuckets);
@@ -523,9 +525,11 @@ public Registry register(@NonNull ImageHeaderParser parser) {
 
   @NonNull
   public <Model, TResource, Transcode> List<Class<?>> getRegisteredResourceClasses(
-      @NonNull Class<Model> modelClass, @NonNull Class<TResource> resourceClass,
+      @NonNull Class<Model> modelClass,
+      @NonNull Class<TResource> resourceClass,
       @NonNull Class<Transcode> transcodeClass) {
-    List<Class<?>> result = modelToResourceClassCache.get(modelClass, resourceClass);
+    List<Class<?>> result =
+        modelToResourceClassCache.get(modelClass, resourceClass, transcodeClass);
 
     if (result == null) {
       result = new ArrayList<>();
@@ -541,8 +545,8 @@ public Registry register(@NonNull ImageHeaderParser parser) {
           }
         }
       }
-      modelToResourceClassCache.put(modelClass, resourceClass,
-          Collections.unmodifiableList(result));
+      modelToResourceClassCache.put(
+          modelClass, resourceClass, transcodeClass, Collections.unmodifiableList(result));
     }
 
     return result;
diff --git a/library/src/main/java/com/bumptech/glide/RequestBuilder.java b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
index 1438311e2..a01d45500 100644
--- a/library/src/main/java/com/bumptech/glide/RequestBuilder.java
+++ b/library/src/main/java/com/bumptech/glide/RequestBuilder.java
@@ -4,6 +4,7 @@
 import static com.bumptech.glide.request.RequestOptions.signatureOf;
 import static com.bumptech.glide.request.RequestOptions.skipMemoryCacheOf;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
@@ -16,6 +17,7 @@
 import android.widget.ImageView;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.request.ErrorRequestCoordinator;
 import com.bumptech.glide.request.FutureTarget;
 import com.bumptech.glide.request.Request;
@@ -45,7 +47,8 @@
  */
 // Public API.
 @SuppressWarnings({"unused", "WeakerAccess"})
-public class RequestBuilder<TranscodeType> implements Cloneable,
+public class RequestBuilder<TranscodeType> extends BaseRequestOptions<RequestBuilder<TranscodeType>>
+    implements Cloneable,
     ModelTypes<RequestBuilder<TranscodeType>> {
   // Used in generated subclasses
   protected static final RequestOptions DOWNLOAD_ONLY_OPTIONS =
@@ -55,12 +58,9 @@
   private final Context context;
   private final RequestManager requestManager;
   private final Class<TranscodeType> transcodeClass;
-  private final RequestOptions defaultRequestOptions;
   private final Glide glide;
   private final GlideContext glideContext;
 
-  @NonNull protected RequestOptions requestOptions;
-
   @NonNull
   @SuppressWarnings("unchecked")
   private TransitionOptions<?, ? super TranscodeType> transitionOptions;
@@ -76,51 +76,61 @@
   private boolean isModelSet;
   private boolean isThumbnailBuilt;
 
-  protected RequestBuilder(Glide glide, RequestManager requestManager,
-      Class<TranscodeType> transcodeClass, Context context) {
+  // We only override the method to change the return type, not the functionality.
+  @SuppressLint("CheckResult")
+  @SuppressWarnings("PMD.ConstructorCallsOverridableMethod")
+  protected RequestBuilder(
+      @NonNull Glide glide,
+      RequestManager requestManager,
+      Class<TranscodeType> transcodeClass,
+      Context context) {
     this.glide = glide;
     this.requestManager = requestManager;
     this.transcodeClass = transcodeClass;
-    this.defaultRequestOptions = requestManager.getDefaultRequestOptions();
     this.context = context;
     this.transitionOptions = requestManager.getDefaultTransitionOptions(transcodeClass);
-    this.requestOptions = defaultRequestOptions;
     this.glideContext = glide.getGlideContext();
+
+    initRequestListeners(requestManager.getDefaultRequestListeners());
+    apply(requestManager.getDefaultRequestOptions());
   }
 
+  @SuppressWarnings("PMD.ConstructorCallsOverridableMethod")
   protected RequestBuilder(Class<TranscodeType> transcodeClass, RequestBuilder<?> other) {
     this(other.glide, other.requestManager, transcodeClass, other.context);
     model = other.model;
     isModelSet = other.isModelSet;
-    requestOptions = other.requestOptions;
+
+    apply(other);
+  }
+
+  // Casting from Object to a specific type is always safe.
+  @SuppressWarnings("unchecked")
+  // addListener always returns the same instance.
+  @SuppressLint("CheckResult")
+  private void initRequestListeners(List<RequestListener<Object>> requestListeners) {
+    for (RequestListener<Object> listener : requestListeners) {
+      addListener((RequestListener<TranscodeType>) listener);
+    }
   }
 
   /**
    * Applies the given options to the request.
    *
-   * <p>As with {@link RequestOptions#apply(RequestOptions)}, {@code #apply} only replaces those
+   * <p>As with {@link RequestOptions#apply(BaseRequestOptions)}, {@code #apply} only replaces those
    * values that are explicitly set in the given {@link RequestOptions} object. If you need to
    * completely reset all previously set options, create a new {@code RequestBuilder} instead of
    * using this method.
    *
-   * @see RequestOptions#apply(RequestOptions)
+   * @see RequestOptions#apply(BaseRequestOptions)
    * @return This request builder.
    */
   @NonNull
   @CheckResult
-  public RequestBuilder<TranscodeType> apply(@NonNull RequestOptions requestOptions) {
+  @Override
+  public RequestBuilder<TranscodeType> apply(@NonNull BaseRequestOptions<?> requestOptions) {
     Preconditions.checkNotNull(requestOptions);
-    this.requestOptions = getMutableOptions().apply(requestOptions);
-    return this;
-  }
-
-  // We're checking to see if we need to clone our options object because we want to make sure the
-  // original is never modified, so we need reference equality.
-  @SuppressWarnings("ReferenceEquality")
-  @NonNull
-  protected RequestOptions getMutableOptions() {
-    return defaultRequestOptions == this.requestOptions
-        ? this.requestOptions.clone() : this.requestOptions;
+    return super.apply(requestOptions);
   }
 
   /**
@@ -370,7 +380,7 @@ protected RequestOptions getMutableOptions() {
    * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method.
    *
    * <p>The {@link DiskCacheStrategy} is set to {@link DiskCacheStrategy#NONE}. Previous calls to
-   * {@link #apply(RequestOptions)} or previously applied {@link DiskCacheStrategy}s will be
+   * {@link #apply(BaseRequestOptions)} or previously applied {@link DiskCacheStrategy}s will be
    * overridden by this method. Applying an {@link DiskCacheStrategy} other than
    * {@link DiskCacheStrategy#NONE} after calling this method may result in undefined behavior.
    *
@@ -397,7 +407,7 @@ protected RequestOptions getMutableOptions() {
    * {@link com.bumptech.glide.load.ResourceDecoder} instead of using this method.
    *
    * <p>The {@link DiskCacheStrategy} is set to {@link DiskCacheStrategy#NONE}. Previous calls to
-   * {@link #apply(RequestOptions)} or previously applied {@link DiskCacheStrategy}s will be
+   * {@link #apply(BaseRequestOptions)} or previously applied {@link DiskCacheStrategy}s will be
    * overridden by this method. Applying an {@link DiskCacheStrategy} other than
    * {@link DiskCacheStrategy#NONE} after calling this method may result in undefined behavior.
    *
@@ -557,10 +567,10 @@ protected RequestOptions getMutableOptions() {
   @Override
   public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {
     RequestBuilder<TranscodeType> result = loadGeneric(model);
-    if (!result.requestOptions.isDiskCacheStrategySet()) {
+    if (!result.isDiskCacheStrategySet()) {
         result = result.apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));
     }
-    if (!result.requestOptions.isSkipMemoryCacheSet()) {
+    if (!result.isSkipMemoryCacheSet()) {
       result = result.apply(skipMemoryCacheOf(true /*skipMemoryCache*/));
     }
     return result;
@@ -582,14 +592,9 @@ protected RequestOptions getMutableOptions() {
   @CheckResult
   @Override
   public RequestBuilder<TranscodeType> clone() {
-    try {
-      RequestBuilder<TranscodeType> result = (RequestBuilder<TranscodeType>) super.clone();
-      result.requestOptions = result.requestOptions.clone();
-      result.transitionOptions = result.transitionOptions.clone();
-      return result;
-    } catch (CloneNotSupportedException e) {
-      throw new RuntimeException(e);
-    }
+    RequestBuilder<TranscodeType> result = super.clone();
+    result.transitionOptions = result.transitionOptions.clone();
+    return result;
   }
 
   /**
@@ -608,20 +613,19 @@ protected RequestOptions getMutableOptions() {
   @Synthetic <Y extends Target<TranscodeType>> Y into(
       @NonNull Y target,
       @Nullable RequestListener<TranscodeType> targetListener) {
-    return into(target, targetListener, getMutableOptions());
+    return into(target, targetListener, /*options=*/ this);
   }
 
   private <Y extends Target<TranscodeType>> Y into(
       @NonNull Y target,
       @Nullable RequestListener<TranscodeType> targetListener,
-      @NonNull RequestOptions options) {
+      BaseRequestOptions<?> options) {
     Util.assertMainThread();
     Preconditions.checkNotNull(target);
     if (!isModelSet) {
       throw new IllegalArgumentException("You must call #load() before calling #into()");
     }
 
-    options = options.autoClone();
     Request request = buildRequest(target, targetListener, options);
 
     Request previous = target.getRequest();
@@ -654,7 +658,7 @@ protected RequestOptions getMutableOptions() {
   // because the previous request must also be using skipMemoryCache for the requests to be
   // equivalent. See #2663 for additional context.
   private boolean isSkipMemoryCacheWithCompletePreviousRequest(
-      RequestOptions options, Request previous) {
+      BaseRequestOptions<?> options, Request previous) {
     return !options.isMemoryCacheable() && previous.isComplete();
   }
 
@@ -674,7 +678,7 @@ private boolean isSkipMemoryCacheWithCompletePreviousRequest(
     Util.assertMainThread();
     Preconditions.checkNotNull(view);
 
-    RequestOptions requestOptions = this.requestOptions;
+    BaseRequestOptions<?> requestOptions = this;
     if (!requestOptions.isTransformationSet()
         && requestOptions.isTransformationAllowed()
         && view.getScaleType() != null) {
@@ -868,14 +872,14 @@ private Priority getThumbnailPriority(@NonNull Priority current) {
       case IMMEDIATE:
         return Priority.IMMEDIATE;
       default:
-        throw new IllegalArgumentException("unknown priority: " + requestOptions.getPriority());
+        throw new IllegalArgumentException("unknown priority: " + getPriority());
     }
   }
 
   private Request buildRequest(
       Target<TranscodeType> target,
       @Nullable RequestListener<TranscodeType> targetListener,
-      RequestOptions requestOptions) {
+      BaseRequestOptions<?> requestOptions) {
     return buildRequestRecursive(
         target,
         targetListener,
@@ -895,7 +899,7 @@ private Request buildRequestRecursive(
       Priority priority,
       int overrideWidth,
       int overrideHeight,
-      RequestOptions requestOptions) {
+      BaseRequestOptions<?> requestOptions) {
 
     // Build the ErrorRequestCoordinator first if necessary so we can update parentCoordinator.
     ErrorRequestCoordinator errorRequestCoordinator = null;
@@ -919,10 +923,10 @@ private Request buildRequestRecursive(
       return mainRequest;
     }
 
-    int errorOverrideWidth = errorBuilder.requestOptions.getOverrideWidth();
-    int errorOverrideHeight = errorBuilder.requestOptions.getOverrideHeight();
+    int errorOverrideWidth = errorBuilder.getOverrideWidth();
+    int errorOverrideHeight = errorBuilder.getOverrideHeight();
     if (Util.isValidDimensions(overrideWidth, overrideHeight)
-        && !errorBuilder.requestOptions.isValidOverride()) {
+        && !errorBuilder.isValidOverride()) {
       errorOverrideWidth = requestOptions.getOverrideWidth();
       errorOverrideHeight = requestOptions.getOverrideHeight();
     }
@@ -932,10 +936,10 @@ private Request buildRequestRecursive(
         targetListener,
         errorRequestCoordinator,
         errorBuilder.transitionOptions,
-        errorBuilder.requestOptions.getPriority(),
+        errorBuilder.getPriority(),
         errorOverrideWidth,
         errorOverrideHeight,
-        errorBuilder.requestOptions);
+        errorBuilder);
     errorRequestCoordinator.setRequests(mainRequest, errorRequest);
     return errorRequestCoordinator;
   }
@@ -948,7 +952,7 @@ private Request buildThumbnailRequestRecursive(
       Priority priority,
       int overrideWidth,
       int overrideHeight,
-      RequestOptions requestOptions) {
+      BaseRequestOptions<?> requestOptions) {
     if (thumbnailBuilder != null) {
       // Recursive case: contains a potentially recursive thumbnail request builder.
       if (isThumbnailBuilt) {
@@ -965,13 +969,13 @@ private Request buildThumbnailRequestRecursive(
         thumbTransitionOptions = transitionOptions;
       }
 
-      Priority thumbPriority = thumbnailBuilder.requestOptions.isPrioritySet()
-          ? thumbnailBuilder.requestOptions.getPriority() : getThumbnailPriority(priority);
+      Priority thumbPriority = thumbnailBuilder.isPrioritySet()
+          ? thumbnailBuilder.getPriority() : getThumbnailPriority(priority);
 
-      int thumbOverrideWidth = thumbnailBuilder.requestOptions.getOverrideWidth();
-      int thumbOverrideHeight = thumbnailBuilder.requestOptions.getOverrideHeight();
+      int thumbOverrideWidth = thumbnailBuilder.getOverrideWidth();
+      int thumbOverrideHeight = thumbnailBuilder.getOverrideHeight();
       if (Util.isValidDimensions(overrideWidth, overrideHeight)
-          && !thumbnailBuilder.requestOptions.isValidOverride()) {
+          && !thumbnailBuilder.isValidOverride()) {
         thumbOverrideWidth = requestOptions.getOverrideWidth();
         thumbOverrideHeight = requestOptions.getOverrideHeight();
       }
@@ -998,7 +1002,7 @@ private Request buildThumbnailRequestRecursive(
               thumbPriority,
               thumbOverrideWidth,
               thumbOverrideHeight,
-              thumbnailBuilder.requestOptions);
+              thumbnailBuilder);
       isThumbnailBuilt = false;
       coordinator.setRequests(fullRequest, thumbRequest);
       return coordinator;
@@ -1015,8 +1019,8 @@ private Request buildThumbnailRequestRecursive(
               priority,
               overrideWidth,
               overrideHeight);
-      RequestOptions thumbnailOptions = requestOptions.clone()
-          .sizeMultiplier(thumbSizeMultiplier);
+      BaseRequestOptions<?> thumbnailOptions =
+          requestOptions.clone().sizeMultiplier(thumbSizeMultiplier);
 
       Request thumbnailRequest =
           obtainRequest(
@@ -1048,7 +1052,7 @@ private Request buildThumbnailRequestRecursive(
   private Request obtainRequest(
       Target<TranscodeType> target,
       RequestListener<TranscodeType> targetListener,
-      RequestOptions requestOptions,
+      BaseRequestOptions<?> requestOptions,
       RequestCoordinator requestCoordinator,
       TransitionOptions<?, ? super TranscodeType> transitionOptions,
       Priority priority,
diff --git a/library/src/main/java/com/bumptech/glide/RequestManager.java b/library/src/main/java/com/bumptech/glide/RequestManager.java
index 139df6f43..9e0cdb6c3 100644
--- a/library/src/main/java/com/bumptech/glide/RequestManager.java
+++ b/library/src/main/java/com/bumptech/glide/RequestManager.java
@@ -16,7 +16,9 @@
 import android.support.annotation.Nullable;
 import android.support.annotation.RawRes;
 import android.view.View;
+import com.bumptech.glide.load.DataSource;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
 import com.bumptech.glide.manager.ConnectivityMonitor;
 import com.bumptech.glide.manager.ConnectivityMonitorFactory;
@@ -26,6 +28,7 @@
 import com.bumptech.glide.manager.RequestTracker;
 import com.bumptech.glide.manager.TargetTracker;
 import com.bumptech.glide.request.Request;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;
@@ -34,6 +37,8 @@
 import com.bumptech.glide.util.Util;
 import java.io.File;
 import java.net.URL;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
  * A class for managing and starting requests for Glide. Can use activity, fragment and connectivity
@@ -69,6 +74,10 @@ public void run() {
   };
   private final Handler mainHandler = new Handler(Looper.getMainLooper());
   private final ConnectivityMonitor connectivityMonitor;
+  // Adding default listeners should be much less common than starting new requests. We want
+  // some way of making sure that requests don't mutate our listeners without creating a new copy of
+  // the list each time a request is started.
+  private final CopyOnWriteArrayList<RequestListener<Object>> defaultRequestListeners;
 
   private RequestOptions requestOptions;
 
@@ -115,6 +124,8 @@ public RequestManager(
     }
     lifecycle.addListener(connectivityMonitor);
 
+    defaultRequestListeners =
+        new CopyOnWriteArrayList<>(glide.getGlideContext().getDefaultRequestListeners());
     setRequestOptions(glide.getGlideContext().getDefaultRequestOptions());
 
     glide.registerRequestManager(this);
@@ -174,6 +185,29 @@ public RequestManager setDefaultRequestOptions(@NonNull RequestOptions requestOp
     return this;
   }
 
+  /**
+   * Adds a default {@link RequestListener} that will be added to every request started with this
+   * {@link RequestManager}.
+   *
+   * <p>Multiple {@link RequestListener}s can be added here, in {@link RequestManager} scopes or
+   * to individual {@link RequestBuilder}s. {@link RequestListener}s are called in the order they're
+   * added. Even if an earlier {@link RequestListener} returns {@code true} from
+   * {@link RequestListener#onLoadFailed(GlideException, Object, Target, boolean)} or
+   * {@link RequestListener#onResourceReady(Object, Object, Target, DataSource, boolean)}, it will
+   * not prevent subsequent {@link RequestListener}s from being called.
+   *
+   * <p>Because Glide requests can be started for any number of individual resource types, any
+   * listener added here has to accept any generic resource type in
+   * {@link RequestListener#onResourceReady(Object, Object, Target, DataSource, boolean)}. If you
+   * must base the behavior of the listener on the resource type, you will need to use
+   * {@code instanceof} to do so. It's not safe to cast resource types without first checking
+   * with {@code instanceof}.
+   */
+  public RequestManager addDefaultRequestListener(RequestListener<Object> requestListener) {
+    defaultRequestListeners.add(requestListener);
+    return this;
+  }
+
   /**
    * Returns true if loads for this {@link RequestManager} are currently paused.
    *
@@ -614,6 +648,10 @@ void track(@NonNull Target<?> target, @NonNull Request request) {
     requestTracker.runRequest(request);
   }
 
+  List<RequestListener<Object>> getDefaultRequestListeners() {
+    return defaultRequestListeners;
+  }
+
   RequestOptions getDefaultRequestOptions() {
     return requestOptions;
   }
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 86cdfb506..aee163a33 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -50,12 +50,9 @@ public boolean startNext() {
       if (File.class.equals(helper.getTranscodeClass())) {
         return false;
       }
-      // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes
-      // all loads to fail. Without this assertion it causes loads to miss the disk cache
-      // unnecessarily
-      // throw new IllegalStateException(
-      //    "Failed to find any load path from " + helper.getModelClass() + " to "
-      //        + helper.getTranscodeClass());
+      throw new IllegalStateException(
+         "Failed to find any load path from " + helper.getModelClass() + " to "
+             + helper.getTranscodeClass());
     }
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;
diff --git a/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
index ac417c13f..4740f4b5a 100644
--- a/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
+++ b/library/src/main/java/com/bumptech/glide/provider/ModelToResourceClassCache.java
@@ -17,12 +17,15 @@
       new ArrayMap<>();
 
   @Nullable
-  public List<Class<?>> get(@NonNull Class<?> modelClass, @NonNull Class<?> resourceClass) {
+  public List<Class<?>> get(
+      @NonNull Class<?> modelClass,
+      @NonNull Class<?> resourceClass,
+      @NonNull Class<?> transcodeClass) {
     MultiClassKey key = resourceClassKeyRef.getAndSet(null);
     if (key == null) {
-      key = new MultiClassKey(modelClass, resourceClass);
+      key = new MultiClassKey(modelClass, resourceClass, transcodeClass);
     } else {
-      key.set(modelClass, resourceClass);
+      key.set(modelClass, resourceClass, transcodeClass);
     }
     final List<Class<?>> result;
     synchronized (registeredResourceClassCache) {
@@ -32,11 +35,14 @@
     return result;
   }
 
-  public void put(@NonNull Class<?> modelClass, @NonNull Class<?> resourceClass,
+  public void put(
+      @NonNull Class<?> modelClass,
+      @NonNull Class<?> resourceClass,
+      @NonNull Class<?> transcodeClass,
       @NonNull List<Class<?>> resourceClasses) {
     synchronized (registeredResourceClassCache) {
       registeredResourceClassCache
-          .put(new MultiClassKey(modelClass, resourceClass), resourceClasses);
+          .put(new MultiClassKey(modelClass, resourceClass, transcodeClass), resourceClasses);
     }
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java
new file mode 100644
index 000000000..08136a327
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java
@@ -0,0 +1,1430 @@
+package com.bumptech.glide.request;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.CheckResult;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.FloatRange;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.bumptech.glide.Priority;
+import com.bumptech.glide.load.DecodeFormat;
+import com.bumptech.glide.load.Key;
+import com.bumptech.glide.load.MultiTransformation;
+import com.bumptech.glide.load.Option;
+import com.bumptech.glide.load.Options;
+import com.bumptech.glide.load.Transformation;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.bumptech.glide.load.model.stream.HttpGlideUrlLoader;
+import com.bumptech.glide.load.resource.bitmap.BitmapEncoder;
+import com.bumptech.glide.load.resource.bitmap.CenterCrop;
+import com.bumptech.glide.load.resource.bitmap.CenterInside;
+import com.bumptech.glide.load.resource.bitmap.CircleCrop;
+import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
+import com.bumptech.glide.load.resource.bitmap.Downsampler;
+import com.bumptech.glide.load.resource.bitmap.DrawableTransformation;
+import com.bumptech.glide.load.resource.bitmap.FitCenter;
+import com.bumptech.glide.load.resource.bitmap.VideoDecoder;
+import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;
+import com.bumptech.glide.load.resource.gif.GifOptions;
+import com.bumptech.glide.signature.EmptySignature;
+import com.bumptech.glide.util.CachedHashCodeArrayMap;
+import com.bumptech.glide.util.Preconditions;
+import com.bumptech.glide.util.Util;
+import java.util.Map;
+
+/**
+ * A base object to allow method sharing between {@link RequestOptions} and
+ * {@link com.bumptech.glide.RequestBuilder}.
+ *
+ * <p>This class is not meant for general use and may change at any time.
+ *
+ * @param <T> The particular child implementation
+ */
+@SuppressWarnings({"PMD.UseUtilityClass", "unused"})
+public abstract class BaseRequestOptions<T extends BaseRequestOptions<T>> implements Cloneable {
+  private static final int UNSET = -1;
+  private static final int SIZE_MULTIPLIER = 1 << 1;
+  private static final int DISK_CACHE_STRATEGY = 1 << 2;
+  private static final int PRIORITY = 1 << 3;
+  private static final int ERROR_PLACEHOLDER = 1 << 4;
+  private static final int ERROR_ID = 1 << 5;
+  private static final int PLACEHOLDER = 1 << 6;
+  private static final int PLACEHOLDER_ID = 1 << 7;
+  private static final int IS_CACHEABLE = 1 << 8;
+  private static final int OVERRIDE = 1 << 9;
+  private static final int SIGNATURE = 1 << 10;
+  private static final int TRANSFORMATION = 1 << 11;
+  private static final int RESOURCE_CLASS = 1 << 12;
+  private static final int FALLBACK = 1 << 13;
+  private static final int FALLBACK_ID = 1 << 14;
+  private static final int THEME = 1 << 15;
+  private static final int TRANSFORMATION_ALLOWED = 1 << 16;
+  private static final int TRANSFORMATION_REQUIRED = 1 << 17;
+  private static final int USE_UNLIMITED_SOURCE_GENERATORS_POOL = 1 << 18;
+  private static final int ONLY_RETRIEVE_FROM_CACHE = 1 << 19;
+  private static final int USE_ANIMATION_POOL = 1 << 20;
+
+  private int fields;
+  private float sizeMultiplier = 1f;
+  @NonNull
+  private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.AUTOMATIC;
+  @NonNull
+  private Priority priority = Priority.NORMAL;
+  @Nullable
+  private Drawable errorPlaceholder;
+  private int errorId;
+  @Nullable
+  private Drawable placeholderDrawable;
+  private int placeholderId;
+  private boolean isCacheable = true;
+  private int overrideHeight = UNSET;
+  private int overrideWidth = UNSET;
+  @NonNull
+  private Key signature = EmptySignature.obtain();
+  private boolean isTransformationRequired;
+  private boolean isTransformationAllowed = true;
+  @Nullable
+  private Drawable fallbackDrawable;
+  private int fallbackId;
+  @NonNull
+  private Options options = new Options();
+  @NonNull
+  private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();
+  @NonNull
+  private Class<?> resourceClass = Object.class;
+  private boolean isLocked;
+  @Nullable
+  private Resources.Theme theme;
+  private boolean isAutoCloneEnabled;
+  private boolean useUnlimitedSourceGeneratorsPool;
+  private boolean onlyRetrieveFromCache;
+  private boolean isScaleOnlyOrNoTransform = true;
+  private boolean useAnimationPool;
+
+
+  private static boolean isSet(int fields, int flag) {
+    return (fields & flag) != 0;
+  }
+
+  /**
+   * Applies a multiplier to the {@link com.bumptech.glide.request.target.Target}'s size before
+   * loading the resource. Useful for loading thumbnails or trying to avoid loading huge resources
+   * (particularly {@link Bitmap}s on devices with overly dense screens.
+   *
+   * @param sizeMultiplier The multiplier to apply to the
+   *                       {@link com.bumptech.glide.request.target.Target}'s dimensions when
+   *                       loading the resource.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T sizeMultiplier(@FloatRange(from = 0, to = 1) float sizeMultiplier) {
+    if (isAutoCloneEnabled) {
+      return clone().sizeMultiplier(sizeMultiplier);
+    }
+
+    if (sizeMultiplier < 0f || sizeMultiplier > 1f) {
+      throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");
+    }
+    this.sizeMultiplier = sizeMultiplier;
+    fields |= SIZE_MULTIPLIER;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * If set to {@code true}, uses a cached unlimited {@link java.util.concurrent.Executor} to run
+   * the request.
+   *
+   * <p>This method should <em>ONLY</em> be used when a Glide load is started recursively on one
+   * of Glide's threads as part of another request. Using this method in other scenarios can lead
+   * to excessive memory usage and OOMs and/or a significant decrease in performance across an
+   * application.
+   *
+   * <p>If both this method and {@link #useAnimationPool(boolean)} are set, this method will be
+   * preferred and {@link #useAnimationPool(boolean)} will be ignored.
+   */
+  @NonNull
+  @CheckResult
+  public T useUnlimitedSourceGeneratorsPool(boolean flag) {
+    if (isAutoCloneEnabled) {
+      return clone().useUnlimitedSourceGeneratorsPool(flag);
+    }
+
+    this.useUnlimitedSourceGeneratorsPool = flag;
+    fields |= USE_UNLIMITED_SOURCE_GENERATORS_POOL;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * If set to {@code true}, uses a special {@link java.util.concurrent.Executor} that is used
+   * exclusively for decoding frames of animated resources, like GIFs.
+   *
+   * <p>The animation executor disallows network operations and must not be used for loads that
+   * may load remote data. The animation executor has fewer threads available to it than Glide's
+   * normal executors and is only useful as a way of avoiding blocking on longer and more expensive
+   * reads for critical requests like those in an animating GIF.
+   *
+   * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and this method are set,
+   * {@link #useUnlimitedSourceGeneratorsPool(boolean)} will be preferred and this method will be
+   * ignored.
+   */
+  @NonNull
+  @CheckResult
+  public T useAnimationPool(boolean flag) {
+    if (isAutoCloneEnabled) {
+      return clone().useAnimationPool(flag);
+    }
+
+    useAnimationPool = flag;
+    fields |= USE_ANIMATION_POOL;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   *
+   * If set to true, will only load an item if found in the cache, and will not fetch from source.
+   */
+  @NonNull
+  @CheckResult
+  public T onlyRetrieveFromCache(boolean flag) {
+    if (isAutoCloneEnabled) {
+      return clone().onlyRetrieveFromCache(flag);
+    }
+
+    this.onlyRetrieveFromCache = flag;
+    fields |= ONLY_RETRIEVE_FROM_CACHE;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets the {@link DiskCacheStrategy} to use for this load.
+   *
+   * <p> Defaults to {@link DiskCacheStrategy#AUTOMATIC}. </p>
+   *
+   * <p> For most applications {@link DiskCacheStrategy#RESOURCE} is
+   * ideal. Applications that use the same resource multiple times in multiple sizes and are willing
+   * to trade off some speed and disk space in return for lower bandwidth usage may want to consider
+   * using {@link DiskCacheStrategy#DATA} or
+   * {@link DiskCacheStrategy#ALL}. </p>
+   *
+   * @param strategy The strategy to use.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
+    if (isAutoCloneEnabled) {
+      return clone().diskCacheStrategy(strategy);
+    }
+    this.diskCacheStrategy = Preconditions.checkNotNull(strategy);
+    fields |= DISK_CACHE_STRATEGY;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets the priority for this load.
+   *
+   * @param priority A priority.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T priority(@NonNull Priority priority) {
+    if (isAutoCloneEnabled) {
+      return clone().priority(priority);
+    }
+
+    this.priority = Preconditions.checkNotNull(priority);
+    fields |= PRIORITY;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets an {@link Drawable} to display while a resource is loading.
+   *
+   * <p>Replaces any previous calls to this method or {@link #placeholder(int)}.
+   *
+   * @param drawable The drawable to display as a placeholder.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T placeholder(@Nullable Drawable drawable) {
+    if (isAutoCloneEnabled) {
+      return clone().placeholder(drawable);
+    }
+
+    this.placeholderDrawable = drawable;
+    fields |= PLACEHOLDER;
+
+    placeholderId = 0;
+    fields &= ~PLACEHOLDER_ID;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets an Android resource id for a {@link Drawable} resource to
+   * display while a resource is loading.
+   *
+   * <p>Replaces any previous calls to this method or {@link #placeholder(Drawable)}
+   *
+   * @param resourceId The id of the resource to use as a placeholder
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T placeholder(@DrawableRes int resourceId) {
+    if (isAutoCloneEnabled) {
+      return clone().placeholder(resourceId);
+    }
+
+    this.placeholderId = resourceId;
+    fields |= PLACEHOLDER_ID;
+
+    placeholderDrawable = null;
+    fields &= ~PLACEHOLDER;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets an {@link Drawable} to display if the model provided to
+   * {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}.
+   *
+   * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the
+   * error drawable is not set, the placeholder will be displayed.
+   *
+   * <p>Replaces any previous calls to this method or {@link #fallback(int)}.
+   *
+   * @see #placeholder(Drawable)
+   * @see #placeholder(int)
+   *
+   * @param drawable The drawable to display as a placeholder.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T fallback(@Nullable Drawable drawable) {
+    if (isAutoCloneEnabled) {
+      return clone().fallback(drawable);
+    }
+
+    this.fallbackDrawable = drawable;
+    fields |= FALLBACK;
+
+    fallbackId = 0;
+    fields &= ~FALLBACK_ID;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets a resource to display if the model provided to
+   * {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}.
+   *
+   * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If
+   * the error drawable is not set, the placeholder will be displayed.
+   *
+   * <p>Replaces any previous calls to this method or {@link #fallback(Drawable)}.
+   *
+   * @see #placeholder(Drawable)
+   * @see #placeholder(int)
+   *
+   * @param resourceId The id of the resource to use as a fallback.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T fallback(@DrawableRes int resourceId) {
+    if (isAutoCloneEnabled) {
+      return clone().fallback(resourceId);
+    }
+
+    this.fallbackId = resourceId;
+    fields |= FALLBACK_ID;
+
+    fallbackDrawable = null;
+    fields &= ~FALLBACK;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets a {@link Drawable} to display if a load fails.
+   *
+   * <p>Replaces any previous calls to this method or {@link #error(int)}
+   *
+   * @param drawable The drawable to display.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T error(@Nullable Drawable drawable) {
+    if (isAutoCloneEnabled) {
+      return clone().error(drawable);
+    }
+
+    this.errorPlaceholder = drawable;
+    fields |= ERROR_PLACEHOLDER;
+
+    this.errorId = 0;
+    fields &= ~ERROR_ID;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets a resource to display if a load fails.
+   *
+   * <p>Replaces any previous calls to this method or {@link #error(Drawable)}
+   *
+   * @param resourceId The id of the resource to use as a placeholder.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T error(@DrawableRes int resourceId) {
+    if (isAutoCloneEnabled) {
+      return clone().error(resourceId);
+    }
+    this.errorId = resourceId;
+    fields |= ERROR_ID;
+
+    this.errorPlaceholder = null;
+    fields &= ~ERROR_PLACEHOLDER;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Sets the {@link android.content.res.Resources.Theme} to apply when loading {@link Drawable}s
+   * for resource ids provided via {@link #error(int)}, {@link #placeholder(int)}, and
+   * {@link #fallback(Drawable)}.
+   *
+   * <p>The theme is <em>NOT</em> applied in the decoder that will attempt to decode a given
+   * resource id model on Glide's background threads. The theme is used exclusively on the main
+   * thread to obtain placeholder/error/fallback drawables to avoid leaking Activities.
+   *
+   * <p>If the {@link android.content.Context} of the {@link android.app.Fragment} or
+   * {@link android.app.Activity} used to start this load has a different
+   * {@link android.content.res.Resources.Theme}, the {@link android.content.res.Resources.Theme}
+   * provided here will override the {@link android.content.res.Resources.Theme} of the
+   * {@link android.content.Context}.
+   *
+   * @param theme The theme to use when loading Drawables.
+   * @return this request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T theme(@Nullable Resources.Theme theme) {
+    if (isAutoCloneEnabled) {
+      return clone().theme(theme);
+    }
+
+    this.theme = theme;
+    fields |= THEME;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Allows the loaded resource to skip the memory cache.
+   *
+   * <p> Note - this is not a guarantee. If a request is already pending for this resource and that
+   * request is not also skipping the memory cache, the resource will be cached in memory.</p>
+   *
+   * @param skip True to allow the resource to skip the memory cache.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T skipMemoryCache(boolean skip) {
+    if (isAutoCloneEnabled) {
+      return clone().skipMemoryCache(true);
+    }
+
+    this.isCacheable = !skip;
+    fields |= IS_CACHEABLE;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
+   * given values. This is useful for thumbnails, and should only be used for other cases when you
+   * need a very specific image size.
+   *
+   * @param width  The width in pixels to use to load the resource.
+   * @param height The height in pixels to use to load the resource.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T override(int width, int height) {
+    if (isAutoCloneEnabled) {
+      return clone().override(width, height);
+    }
+
+    this.overrideWidth = width;
+    this.overrideHeight = height;
+    fields |= OVERRIDE;
+
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
+   * given size.
+   *
+   * @see #override(int, int)
+   * @param size The width and height to use.
+   * @return This request builder.
+   */
+  @NonNull
+  @CheckResult
+  public T override(int size) {
+    return override(size, size);
+  }
+
+  /**
+   * Sets some additional data to be mixed in to the memory and disk cache keys allowing the caller
+   * more control over when cached data is invalidated.
+   *
+   * <p> Note - The signature does not replace the cache key, it is purely additive. </p>
+   *
+   * @param signature A unique non-null {@link Key} representing the current
+   *                  state of the model that will be mixed in to the cache key.
+   * @return This request builder.
+   * @see com.bumptech.glide.signature.ObjectKey
+   */
+  @NonNull
+  @CheckResult
+  public T signature(@NonNull Key signature) {
+    if (isAutoCloneEnabled) {
+      return clone().signature(signature);
+    }
+
+    this.signature = Preconditions.checkNotNull(signature);
+    fields |= SIGNATURE;
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Returns a copy of this request builder with all of the options put so far on this builder.
+   *
+   * <p> This method returns a "deep" copy in that all non-immutable arguments are copied such that
+   * changes to one builder will not affect the other builder. However, in addition to immutable
+   * arguments, the current model is not copied copied so changes to the model will affect both
+   * builders. </p>
+   *
+   * <p> Even if this object was locked, the cloned object returned from this method will not be
+   * locked. </p>
+   */
+  @SuppressWarnings({
+      "unchecked",
+      // we don't want to throw to be user friendly
+      "PMD.CloneThrowsCloneNotSupportedException",
+      // The types we're using here do this automatically.
+      "PMD.CloneMethodReturnTypeMustMatchClassName"
+  })
+  @CheckResult
+  @Override
+  public T clone() {
+    try {
+      BaseRequestOptions<?> result = (BaseRequestOptions<?>) super.clone();
+      result.options = new Options();
+      result.options.putAll(options);
+      result.transformations = new CachedHashCodeArrayMap<>();
+      result.transformations.putAll(transformations);
+      result.isLocked = false;
+      result.isAutoCloneEnabled = false;
+      return (T) result;
+    } catch (CloneNotSupportedException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  @NonNull
+  @CheckResult
+  public <Y> T set(@NonNull Option<Y> option, @NonNull Y value) {
+    if (isAutoCloneEnabled) {
+      return clone().set(option, value);
+    }
+
+    Preconditions.checkNotNull(option);
+    Preconditions.checkNotNull(value);
+    options.set(option, value);
+    return selfOrThrowIfLocked();
+  }
+
+  @NonNull
+  @CheckResult
+  public T decode(@NonNull Class<?> resourceClass) {
+    if (isAutoCloneEnabled) {
+      return clone().decode(resourceClass);
+    }
+
+    this.resourceClass = Preconditions.checkNotNull(resourceClass);
+    fields |= RESOURCE_CLASS;
+    return selfOrThrowIfLocked();
+  }
+
+  public final boolean isTransformationAllowed() {
+    return isTransformationAllowed;
+  }
+
+  public final boolean isTransformationSet() {
+    return isSet(TRANSFORMATION);
+  }
+
+  public final boolean isLocked() {
+    return isLocked;
+  }
+
+  /**
+   * Sets the value for key
+   * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
+   */
+  @NonNull
+  @CheckResult
+  public T encodeFormat(@NonNull Bitmap.CompressFormat format) {
+    return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
+  }
+
+  /**
+   * Sets the value for key
+   * {@link BitmapEncoder#COMPRESSION_QUALITY}.
+   */
+  @NonNull
+  @CheckResult
+  public T encodeQuality(@IntRange(from = 0, to = 100) int quality) {
+    return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
+  }
+
+  /**
+   * Sets the time position of the frame to extract from a video.
+   *
+   * <p>This is a component option specific to {@link VideoDecoder}. If the default video
+   * decoder is replaced or skipped because of your configuration, this option may be ignored.
+   *
+   * @see VideoDecoder#TARGET_FRAME
+   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
+   *                        Android framework implementation return a representative frame.
+   */
+  @NonNull
+  @CheckResult
+  public T frame(@IntRange(from = 0) long frameTimeMicros) {
+    return set(VideoDecoder.TARGET_FRAME, frameTimeMicros);
+  }
+
+  /**
+   * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using
+   * {@link Downsampler} and Glide's default GIF decoders.
+   *
+   * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be
+   * decoded using a decoder that cannot control the format
+   * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to
+   * ignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the
+   * image has alpha).
+   *
+   * <p>This is a component option specific to {@link Downsampler} and Glide's GIF decoders. If the
+   * default Bitmap decoders are replaced or skipped because of your configuration, this option may
+   * be ignored.
+   *
+   * <p>To set only the format used when decoding {@link Bitmap}s, use
+   * {@link #set(Option, Object)}} and {@link Downsampler#DECODE_FORMAT}. To set only the format
+   * used when decoding GIF frames, use {@link #set(Option, Object)} and
+   * {@link GifOptions#DECODE_FORMAT}.
+   *
+   * @see Downsampler#DECODE_FORMAT
+   * @see GifOptions#DECODE_FORMAT
+   */
+  @NonNull
+  @CheckResult
+  public T format(@NonNull DecodeFormat format) {
+    Preconditions.checkNotNull(format);
+    return set(Downsampler.DECODE_FORMAT, format)
+        .set(GifOptions.DECODE_FORMAT, format);
+  }
+
+  /**
+   * Disables the use of {@link android.graphics.Bitmap.Config#HARDWARE} in {@link Downsampler} to
+   * avoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled,
+   * drawing to {@link android.graphics.Canvas}s backed by {@link Bitmap}s etc.
+   *
+   * <p>It's almost never safe to set {@link Downsampler#ALLOW_HARDWARE_CONFIG} to {@code true} so
+   * we only provide a way to disable hardware configs entirely. If no option is set for
+   * {@link Downsampler#ALLOW_HARDWARE_CONFIG}, Glide will set the value per request based on
+   * whether or not a {@link Transformation} is applied and if one is, the type of
+   * {@link Transformation} applied. Built in transformations like {@link FitCenter} and
+   * {@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.CenterOutside} can safely use
+   * {@link android.graphics.Bitmap.Config#HARDWARE} because they can be entirely replaced by
+   * scaling within {@link Downsampler}. {@link Transformation}s like {@link #circleCrop()} that
+   * can't be replicated by {@link Downsampler} cannot use {@link Bitmap.Config#HARDWARE} because
+   * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
+   * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
+   */
+  @NonNull
+  @CheckResult
+  public T disallowHardwareConfig() {
+    return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
+  }
+
+  /**
+   * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using
+   * {@link Downsampler}.
+   *
+   * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
+   * is replaced or skipped because of your configuration, this option may be ignored.
+   */
+  @NonNull
+  @CheckResult
+  public T downsample(@NonNull DownsampleStrategy strategy) {
+    return set(DownsampleStrategy.OPTION, Preconditions.checkNotNull(strategy));
+  }
+
+  /**
+   * Sets the read and write timeout for the http requests used to load the image.
+   *
+   * <p>This is a component option specific to Glide's default networking library and
+   * {@link com.bumptech.glide.load.model.stream.HttpGlideUrlLoader}. If you use any other
+   * networking library including Glide's Volley or OkHttp integration libraries, this option will
+   * be ignored.
+   *
+   * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
+   * @param timeoutMs The read and write timeout in milliseconds.
+   */
+  @NonNull
+  @CheckResult
+  public T timeout(@IntRange(from = 0) int timeoutMs) {
+    return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
+  }
+
+  /**
+   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types, and
+   * ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @see #optionalTransform(Class, Transformation)
+   * @see #centerCrop()
+   */
+  @NonNull
+  @CheckResult
+  public T optionalCenterCrop() {
+    return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
+  }
+
+  /**
+   * Applies {@link CenterCrop} to all default types and
+   * throws an exception if asked to transform an unknown type.
+   *
+   * <p>this will override previous calls to {@link #dontTransform()} ()}.
+   *
+   * @see #transform(Class, Transformation)
+   * @see #optionalCenterCrop()
+   */
+  @NonNull
+  @CheckResult
+  public T centerCrop() {
+    return transform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
+  }
+
+  /**
+   *
+   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
+   * image types, and ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
+   *
+   * @see #optionalTransform(Class, Transformation)
+   * @see #fitCenter()
+   */
+  @NonNull
+  @CheckResult
+  public T optionalFitCenter() {
+    return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
+  }
+
+  /**
+   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
+   * image types, and throws an exception if asked to transform an unknown
+   * type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
+   *
+   * @see #transform(Class, Transformation)
+   * @see #optionalFitCenter()
+   */
+  @NonNull
+  @CheckResult
+  public T fitCenter() {
+    return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
+  }
+
+  /**
+   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types,
+   * {@link DownsampleStrategy#CENTER_INSIDE} to image types, and ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
+   *
+   * @see #optionalTransform(Class, Transformation)
+   * @see #centerInside()
+   */
+  @NonNull
+  @CheckResult
+  public T optionalCenterInside() {
+    return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
+  }
+
+  /**
+   * Applies {@link CenterInside} to all default types, {@link DownsampleStrategy#CENTER_INSIDE} to
+   * image types and throws an exception if asked to transform an unknown type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
+   * {@link #downsample(DownsampleStrategy)}.
+   *
+   * @see #transform(Class, Transformation)
+   * @see #optionalCenterInside()
+   */
+  @NonNull
+  @CheckResult
+  public T centerInside() {
+    return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
+  }
+
+  /**
+   * Applies {@link CircleCrop} to all default types, and ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @see #optionalTransform(Transformation)
+   * @see #circleCrop()
+   */
+  @NonNull
+  @CheckResult
+  public T optionalCircleCrop() {
+    return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
+  }
+
+  /**
+   * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform
+   * an unknown type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @see #transform(Class, Transformation)
+   * @see #optionalCenterCrop()
+   */
+  @NonNull
+  @CheckResult
+  public T circleCrop() {
+    return transform(DownsampleStrategy.CENTER_INSIDE, new CircleCrop());
+  }
+
+  // calling optionalTransform() on the result of clone() requires greater access.
+  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"WeakerAccess", "CheckResult"})
+  @NonNull
+  final T optionalTransform(@NonNull DownsampleStrategy downsampleStrategy,
+      @NonNull Transformation<Bitmap> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().optionalTransform(downsampleStrategy, transformation);
+    }
+
+    downsample(downsampleStrategy);
+    return transform(transformation, /*isRequired=*/ false);
+  }
+
+  // calling transform() on the result of clone() requires greater access.
+  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"WeakerAccess", "CheckResult"})
+  @NonNull
+  @CheckResult
+  final T transform(@NonNull DownsampleStrategy downsampleStrategy,
+      @NonNull Transformation<Bitmap> transformation) {
+    if (isAutoCloneEnabled) {
+      return clone().transform(downsampleStrategy, transformation);
+    }
+
+    downsample(downsampleStrategy);
+    return transform(transformation);
+  }
+
+  @NonNull
+  private T scaleOnlyTransform(
+      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
+    return scaleOnlyTransform(strategy, transformation, true /*isTransformationRequired*/);
+  }
+
+  @NonNull
+  private T optionalScaleOnlyTransform(
+      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
+    return scaleOnlyTransform(strategy, transformation, false /*isTransformationRequired*/);
+  }
+
+  // We know that result will always be T since we created result.
+  @SuppressWarnings("unchecked")
+  @NonNull
+  private T scaleOnlyTransform(
+      @NonNull DownsampleStrategy strategy,
+      @NonNull Transformation<Bitmap> transformation,
+      boolean isTransformationRequired) {
+    BaseRequestOptions<T> result = isTransformationRequired
+          ? transform(strategy, transformation) : optionalTransform(strategy, transformation);
+    result.isScaleOnlyOrNoTransform = true;
+    return (T) result;
+  }
+
+  /**
+   * Applies the given {@link Transformation} for
+   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
+   * {@link android.graphics.drawable.BitmapDrawable}, and
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
+   * and throws an exception if asked to transform an unknown type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
+   * @see #optionalTransform(Transformation)
+   * @see #optionalTransform(Class, Transformation)
+   */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @NonNull
+  @CheckResult
+  public T transform(@NonNull Transformation<Bitmap> transformation) {
+    return transform(transformation, /*isRequired=*/ true);
+  }
+
+  /**
+   * Applies the given {@link Transformation}s in the given order for
+   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
+   * {@link android.graphics.drawable.BitmapDrawable}, and
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
+   * and throws an exception if asked to transform an unknown type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param transformations One or more {@link Transformation}s for {@link Bitmap}s.
+   * @see #optionalTransform(Transformation)
+   * @see #optionalTransform(Class, Transformation)
+   */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings({"unchecked", "varargs", "CheckResult"})
+  @NonNull
+  @CheckResult
+  public T transforms(@NonNull Transformation<Bitmap>... transformations) {
+    return transform(new MultiTransformation<>(transformations), /*isRequired=*/ true);
+  }
+
+  /**
+   * Applies the given {@link Transformation} for
+   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
+   * {@link android.graphics.drawable.BitmapDrawable}, and
+   * {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and ignores unknown types.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
+   * @see #transform(Transformation)
+   * @see #transform(Class, Transformation)
+   */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @NonNull
+  @CheckResult
+  public T optionalTransform(@NonNull Transformation<Bitmap> transformation) {
+    return transform(transformation, /*isRequired=*/ false);
+  }
+
+  @NonNull
+  T transform(
+      @NonNull Transformation<Bitmap> transformation, boolean isRequired) {
+    if (isAutoCloneEnabled) {
+      return clone().transform(transformation, isRequired);
+    }
+
+    DrawableTransformation drawableTransformation =
+        new DrawableTransformation(transformation, isRequired);
+    transform(Bitmap.class, transformation, isRequired);
+    transform(Drawable.class, drawableTransformation, isRequired);
+    // TODO: remove BitmapDrawable decoder and this transformation.
+    // Registering as BitmapDrawable is simply an optimization to avoid some iteration and
+    // isAssignableFrom checks when obtaining the transformation later on. It can be removed without
+    // affecting the functionality.
+    transform(BitmapDrawable.class, drawableTransformation.asBitmapDrawable(), isRequired);
+    transform(GifDrawable.class, new GifDrawableTransformation(transformation), isRequired);
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Applies the given {@link Transformation} for any decoded resource of
+   * the given type and allows unknown resource types to be ignored.
+   *
+   * <p> Users can apply different transformations for each resource class. Applying a
+   * {@link Transformation} for a resource type that already has a
+   * {@link Transformation} will override the previous call. </p>
+   *
+   * <p> If any calls are made to the non-optional transform methods, then attempting to transform
+   * an unknown resource class will throw an exception. To allow unknown types, users must always
+   * call the optional version of each method. </p>
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param resourceClass  The type of resource to transform.
+   * @param transformation The {@link Transformation} to apply.
+   */
+  @NonNull
+  @CheckResult
+  public <Y> T optionalTransform(
+      @NonNull Class<Y> resourceClass, @NonNull Transformation<Y> transformation) {
+    return transform(resourceClass, transformation, /*isRequired=*/ false);
+  }
+
+  @NonNull
+  <Y> T transform(
+      @NonNull Class<Y> resourceClass,
+      @NonNull Transformation<Y> transformation,
+      boolean isRequired) {
+    if (isAutoCloneEnabled) {
+      return clone().transform(resourceClass, transformation, isRequired);
+    }
+
+    Preconditions.checkNotNull(resourceClass);
+    Preconditions.checkNotNull(transformation);
+    transformations.put(resourceClass, transformation);
+    fields |= TRANSFORMATION;
+    isTransformationAllowed = true;
+    fields |= TRANSFORMATION_ALLOWED;
+    // Always set to false here. Known scale only transformations will call this method and then
+    // set isScaleOnlyOrNoTransform to true immediately after.
+    isScaleOnlyOrNoTransform = false;
+    if (isRequired) {
+      fields |= TRANSFORMATION_REQUIRED;
+      isTransformationRequired = true;
+    }
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Applies the given {@link Transformation} for any decoded resource of
+   * the given type and throws if asked to transform an unknown resource type.
+   *
+   * <p>This will override previous calls to {@link #dontTransform()}.
+   *
+   * @param resourceClass  The type of resource to transform.
+   * @param transformation The {@link Transformation} to apply.
+   * @see #optionalTransform(Class, Transformation)
+   */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @NonNull
+  @CheckResult
+  public <Y> T transform(
+      @NonNull Class<Y> resourceClass, @NonNull Transformation<Y> transformation) {
+    return transform(resourceClass, transformation, /*isRequired=*/ true);
+  }
+
+  /**
+   * Removes all applied {@link Transformation Transformations} for all
+   * resource classes and allows unknown resource types to be transformed without throwing an
+   * exception.
+   */
+  @NonNull
+  @CheckResult
+  public T dontTransform() {
+    if (isAutoCloneEnabled) {
+      return clone().dontTransform();
+    }
+
+    transformations.clear();
+    fields &= ~TRANSFORMATION;
+    isTransformationRequired = false;
+    fields &= ~TRANSFORMATION_REQUIRED;
+    isTransformationAllowed = false;
+    fields |= TRANSFORMATION_ALLOWED;
+    isScaleOnlyOrNoTransform = true;
+    return selfOrThrowIfLocked();
+  }
+
+  /**
+   * Disables resource decoders that return animated resources so any resource returned will be
+   * static.
+   *
+   * <p> To disable transitions (fades etc) use
+   * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
+   */
+  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
+  @SuppressWarnings("CheckResult")
+  @NonNull
+  @CheckResult
+  public T dontAnimate() {
+    return set(GifOptions.DISABLE_ANIMATION, true);
+  }
+
+  /**
+   * Updates this options set with any options that are explicitly set in the given
+   * {@code T} object and returns this object if {@link #autoClone()} is disabled or
+   * a new {@code T} object if {@link #autoClone()} is enabled.
+   *
+   * <p>{@code #apply} only replaces those values that are explicitly set in the given
+   * {@code T}. If you need to completely reset all previously set options, create a
+   * new {@code T} object instead of using this method.
+   *
+   * <p>The options that will be set to values in the returned {@code T} object is the
+   * intersection of the set of options in this {@code T} object and the given
+   * {@code T} object that were explicitly set. If the values of any of the options
+   * conflict, the values in the returned {@code T} object will be set to those in the
+   * given {@code T} object.
+   */
+  @NonNull
+  @CheckResult
+  public T apply(@NonNull BaseRequestOptions<?> o) {
+    if (isAutoCloneEnabled) {
+      return clone().apply(o);
+    }
+    BaseRequestOptions<?> other = o;
+
+    if (isSet(other.fields, SIZE_MULTIPLIER)) {
+      sizeMultiplier = other.sizeMultiplier;
+    }
+    if (isSet(other.fields, USE_UNLIMITED_SOURCE_GENERATORS_POOL)) {
+      useUnlimitedSourceGeneratorsPool = other.useUnlimitedSourceGeneratorsPool;
+    }
+    if (isSet(other.fields, USE_ANIMATION_POOL)) {
+      useAnimationPool = other.useAnimationPool;
+    }
+    if (isSet(other.fields, DISK_CACHE_STRATEGY)) {
+      diskCacheStrategy = other.diskCacheStrategy;
+    }
+    if (isSet(other.fields, PRIORITY)) {
+      priority = other.priority;
+    }
+    if (isSet(other.fields, ERROR_PLACEHOLDER)) {
+      errorPlaceholder = other.errorPlaceholder;
+      errorId = 0;
+      fields &= ~ERROR_ID;
+    }
+    if (isSet(other.fields, ERROR_ID)) {
+      errorId = other.errorId;
+      errorPlaceholder = null;
+      fields &= ~ERROR_PLACEHOLDER;
+    }
+    if (isSet(other.fields, PLACEHOLDER)) {
+      placeholderDrawable = other.placeholderDrawable;
+      placeholderId = 0;
+      fields &= ~PLACEHOLDER_ID;
+    }
+    if (isSet(other.fields, PLACEHOLDER_ID)) {
+      placeholderId = other.placeholderId;
+      placeholderDrawable = null;
+      fields &= ~PLACEHOLDER;
+    }
+    if (isSet(other.fields, IS_CACHEABLE)) {
+      isCacheable = other.isCacheable;
+    }
+    if (isSet(other.fields, OVERRIDE)) {
+      overrideWidth = other.overrideWidth;
+      overrideHeight = other.overrideHeight;
+    }
+    if (isSet(other.fields, SIGNATURE)) {
+      signature = other.signature;
+    }
+    if (isSet(other.fields, RESOURCE_CLASS)) {
+      resourceClass = other.resourceClass;
+    }
+    if (isSet(other.fields, FALLBACK)) {
+      fallbackDrawable = other.fallbackDrawable;
+      fallbackId = 0;
+      fields &= ~FALLBACK_ID;
+    }
+    if (isSet(other.fields, FALLBACK_ID)) {
+      fallbackId = other.fallbackId;
+      fallbackDrawable = null;
+      fields &= ~FALLBACK;
+    }
+    if (isSet(other.fields, THEME)) {
+      theme = other.theme;
+    }
+    if (isSet(other.fields, TRANSFORMATION_ALLOWED)) {
+      isTransformationAllowed = other.isTransformationAllowed;
+    }
+    if (isSet(other.fields, TRANSFORMATION_REQUIRED)) {
+      isTransformationRequired = other.isTransformationRequired;
+    }
+    if (isSet(other.fields, TRANSFORMATION)) {
+      transformations.putAll(other.transformations);
+      isScaleOnlyOrNoTransform = other.isScaleOnlyOrNoTransform;
+    }
+    if (isSet(other.fields, ONLY_RETRIEVE_FROM_CACHE)) {
+      onlyRetrieveFromCache = other.onlyRetrieveFromCache;
+    }
+
+    // Applying options with dontTransform() is expected to clear our transformations.
+    if (!isTransformationAllowed) {
+      transformations.clear();
+      fields &= ~TRANSFORMATION;
+      isTransformationRequired = false;
+      fields &= ~TRANSFORMATION_REQUIRED;
+      isScaleOnlyOrNoTransform = true;
+    }
+
+    fields |= other.fields;
+    options.putAll(other.options);
+
+    return selfOrThrowIfLocked();
+  }
+
+
+  @Override
+  public boolean equals(Object o) {
+    if (o instanceof BaseRequestOptions<?>) {
+      BaseRequestOptions<?> other = (BaseRequestOptions<?>) o;
+      return Float.compare(other.sizeMultiplier, sizeMultiplier) == 0
+          && errorId == other.errorId
+          && Util.bothNullOrEqual(errorPlaceholder, other.errorPlaceholder)
+          && placeholderId == other.placeholderId
+          && Util.bothNullOrEqual(placeholderDrawable, other.placeholderDrawable)
+          && fallbackId == other.fallbackId
+          && Util.bothNullOrEqual(fallbackDrawable, other.fallbackDrawable)
+          && isCacheable == other.isCacheable
+          && overrideHeight == other.overrideHeight
+          && overrideWidth == other.overrideWidth
+          && isTransformationRequired == other.isTransformationRequired
+          && isTransformationAllowed == other.isTransformationAllowed
+          && useUnlimitedSourceGeneratorsPool == other.useUnlimitedSourceGeneratorsPool
+          && onlyRetrieveFromCache == other.onlyRetrieveFromCache
+          && diskCacheStrategy.equals(other.diskCacheStrategy)
+          && priority == other.priority
+          && options.equals(other.options)
+          && transformations.equals(other.transformations)
+          && resourceClass.equals(other.resourceClass)
+          && Util.bothNullOrEqual(signature, other.signature)
+          && Util.bothNullOrEqual(theme, other.theme);
+    }
+    return false;
+  }
+
+  @Override
+  public int hashCode() {
+    int hashCode = Util.hashCode(sizeMultiplier);
+    hashCode = Util.hashCode(errorId, hashCode);
+    hashCode = Util.hashCode(errorPlaceholder, hashCode);
+    hashCode = Util.hashCode(placeholderId, hashCode);
+    hashCode = Util.hashCode(placeholderDrawable, hashCode);
+    hashCode = Util.hashCode(fallbackId, hashCode);
+    hashCode = Util.hashCode(fallbackDrawable, hashCode);
+    hashCode = Util.hashCode(isCacheable, hashCode);
+    hashCode = Util.hashCode(overrideHeight, hashCode);
+    hashCode = Util.hashCode(overrideWidth, hashCode);
+    hashCode = Util.hashCode(isTransformationRequired, hashCode);
+    hashCode = Util.hashCode(isTransformationAllowed, hashCode);
+    hashCode = Util.hashCode(useUnlimitedSourceGeneratorsPool, hashCode);
+    hashCode = Util.hashCode(onlyRetrieveFromCache, hashCode);
+    hashCode = Util.hashCode(diskCacheStrategy, hashCode);
+    hashCode = Util.hashCode(priority, hashCode);
+    hashCode = Util.hashCode(options, hashCode);
+    hashCode = Util.hashCode(transformations, hashCode);
+    hashCode = Util.hashCode(resourceClass, hashCode);
+    hashCode = Util.hashCode(signature, hashCode);
+    hashCode = Util.hashCode(theme, hashCode);
+    return hashCode;
+  }
+
+  /**
+   * Throws if any further mutations are attempted.
+   *
+   * <p> Once locked, the only way to unlock is to use {@link #clone()} </p>
+   */
+  @NonNull
+  @SuppressWarnings("unchecked")
+  public T lock() {
+    isLocked = true;
+    // This is the only place we should not check locked.
+    return self();
+  }
+
+  /**
+   * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen
+   * before the mutation resulting in all methods returning a new Object and leaving the original
+   * locked object unmodified.
+   *
+   * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects
+   * are mutable and are not locked.
+   */
+  @NonNull
+  public T autoClone() {
+    if (isLocked && !isAutoCloneEnabled) {
+      throw new IllegalStateException("You cannot auto lock an already locked options object"
+          + ", try clone() first");
+    }
+    isAutoCloneEnabled = true;
+    return lock();
+  }
+
+  @NonNull
+  @SuppressWarnings("unchecked")
+  private T selfOrThrowIfLocked() {
+    if (isLocked) {
+      throw new IllegalStateException("You cannot modify locked T, consider clone()");
+    }
+    return self();
+  }
+
+  protected boolean isAutoCloneEnabled() {
+    return isAutoCloneEnabled;
+  }
+
+  public final boolean isDiskCacheStrategySet() {
+    return isSet(DISK_CACHE_STRATEGY);
+  }
+
+  public final boolean isSkipMemoryCacheSet() {
+    return isSet(IS_CACHEABLE);
+  }
+
+  @NonNull
+  public final Map<Class<?>, Transformation<?>> getTransformations() {
+    return transformations;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  public final boolean isTransformationRequired() {
+    return isTransformationRequired;
+  }
+
+  @NonNull
+  public final Options getOptions() {
+    return options;
+  }
+
+  @NonNull
+  public final Class<?> getResourceClass() {
+    return resourceClass;
+  }
+
+  @NonNull
+  public final DiskCacheStrategy getDiskCacheStrategy() {
+    return diskCacheStrategy;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  @Nullable
+  public final Drawable getErrorPlaceholder() {
+    return errorPlaceholder;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  public final int getErrorId() {
+    return errorId;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  public final int getPlaceholderId() {
+    return placeholderId;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  @Nullable
+  public final Drawable getPlaceholderDrawable() {
+    return placeholderDrawable;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  public final int getFallbackId() {
+    return fallbackId;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  @Nullable
+  public final Drawable getFallbackDrawable() {
+    return fallbackDrawable;
+  }
+
+  @Nullable
+  public final Resources.Theme getTheme() {
+    return theme;
+  }
+
+  @SuppressWarnings("WeakerAccess")
+  public final boolean isMemoryCacheable() {
+    return isCacheable;
+  }
+
+  @NonNull
+  public final Key getSignature() {
+    return signature;
+  }
+
+  public final boolean isPrioritySet() {
+    return isSet(PRIORITY);
+  }
+
+  @NonNull
+  public final Priority getPriority() {
+    return priority;
+  }
+
+  public final int getOverrideWidth() {
+    return overrideWidth;
+  }
+
+  public final boolean isValidOverride() {
+    return Util.isValidDimensions(overrideWidth, overrideHeight);
+  }
+
+  public final int getOverrideHeight() {
+    return overrideHeight;
+  }
+
+  public final float getSizeMultiplier() {
+    return sizeMultiplier;
+  }
+
+  boolean isScaleOnlyOrNoTransform() {
+    return isScaleOnlyOrNoTransform;
+  }
+
+  private boolean isSet(int flag) {
+    return isSet(fields, flag);
+  }
+
+  // get is just as clear.
+  @SuppressWarnings("PMD.BooleanGetMethodName")
+  public final boolean getUseUnlimitedSourceGeneratorsPool() {
+    return useUnlimitedSourceGeneratorsPool;
+  }
+
+  // get is just as clear.
+  @SuppressWarnings("PMD.BooleanGetMethodName")
+  public final boolean getUseAnimationPool() {
+    return useAnimationPool;
+  }
+
+  // get is just as clear.
+  @SuppressWarnings("PMD.BooleanGetMethodName")
+  public final boolean getOnlyRetrieveFromCache() {
+    return onlyRetrieveFromCache;
+  }
+
+  @SuppressWarnings("unchecked")
+  private T self() {
+    return (T) this;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
index 75d3a2325..f712ce726 100644
--- a/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
+++ b/library/src/main/java/com/bumptech/glide/request/RequestOptions.java
@@ -1,8 +1,6 @@
 package com.bumptech.glide.request;
 
-import android.content.res.Resources;
 import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.CheckResult;
 import android.support.annotation.DrawableRes;
@@ -13,56 +11,19 @@
 import com.bumptech.glide.Priority;
 import com.bumptech.glide.load.DecodeFormat;
 import com.bumptech.glide.load.Key;
-import com.bumptech.glide.load.MultiTransformation;
 import com.bumptech.glide.load.Option;
-import com.bumptech.glide.load.Options;
 import com.bumptech.glide.load.Transformation;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
-import com.bumptech.glide.load.model.stream.HttpGlideUrlLoader;
-import com.bumptech.glide.load.resource.bitmap.BitmapEncoder;
-import com.bumptech.glide.load.resource.bitmap.CenterCrop;
-import com.bumptech.glide.load.resource.bitmap.CenterInside;
-import com.bumptech.glide.load.resource.bitmap.CircleCrop;
 import com.bumptech.glide.load.resource.bitmap.DownsampleStrategy;
-import com.bumptech.glide.load.resource.bitmap.Downsampler;
-import com.bumptech.glide.load.resource.bitmap.DrawableTransformation;
-import com.bumptech.glide.load.resource.bitmap.FitCenter;
-import com.bumptech.glide.load.resource.bitmap.VideoDecoder;
-import com.bumptech.glide.load.resource.gif.GifDrawable;
-import com.bumptech.glide.load.resource.gif.GifDrawableTransformation;
-import com.bumptech.glide.load.resource.gif.GifOptions;
-import com.bumptech.glide.signature.EmptySignature;
-import com.bumptech.glide.util.CachedHashCodeArrayMap;
-import com.bumptech.glide.util.Preconditions;
-import com.bumptech.glide.util.Util;
-import java.util.Map;
 
 /**
  * Provides type independent options to customize loads with Glide.
+ *
+ * <p>Non-final to allow Glide's generated classes to be assignable to their non-generated
+ * equivalents.
  */
-@SuppressWarnings({"PMD.UseUtilityClass", "unused"})
-public class RequestOptions implements Cloneable {
-  private static final int UNSET = -1;
-  private static final int SIZE_MULTIPLIER = 1 << 1;
-  private static final int DISK_CACHE_STRATEGY = 1 << 2;
-  private static final int PRIORITY = 1 << 3;
-  private static final int ERROR_PLACEHOLDER = 1 << 4;
-  private static final int ERROR_ID = 1 << 5;
-  private static final int PLACEHOLDER = 1 << 6;
-  private static final int PLACEHOLDER_ID = 1 << 7;
-  private static final int IS_CACHEABLE = 1 << 8;
-  private static final int OVERRIDE = 1 << 9;
-  private static final int SIGNATURE = 1 << 10;
-  private static final int TRANSFORMATION = 1 << 11;
-  private static final int RESOURCE_CLASS = 1 << 12;
-  private static final int FALLBACK = 1 << 13;
-  private static final int FALLBACK_ID = 1 << 14;
-  private static final int THEME = 1 << 15;
-  private static final int TRANSFORMATION_ALLOWED = 1 << 16;
-  private static final int TRANSFORMATION_REQUIRED = 1 << 17;
-  private static final int USE_UNLIMITED_SOURCE_GENERATORS_POOL = 1 << 18;
-  private static final int ONLY_RETRIEVE_FROM_CACHE = 1 << 19;
-  private static final int USE_ANIMATION_POOL = 1 << 20;
+@SuppressWarnings("PMD.UseUtilityClass")
+public class RequestOptions extends BaseRequestOptions<RequestOptions> {
 
   @Nullable
   private static RequestOptions skipMemoryCacheTrueOptions;
@@ -81,42 +42,6 @@
   @Nullable
   private static RequestOptions noAnimationOptions;
 
-  private int fields;
-  private float sizeMultiplier = 1f;
-  @NonNull
-  private DiskCacheStrategy diskCacheStrategy = DiskCacheStrategy.AUTOMATIC;
-  @NonNull
-  private Priority priority = Priority.NORMAL;
-  @Nullable
-  private Drawable errorPlaceholder;
-  private int errorId;
-  @Nullable
-  private Drawable placeholderDrawable;
-  private int placeholderId;
-  private boolean isCacheable = true;
-  private int overrideHeight = RequestOptions.UNSET;
-  private int overrideWidth = RequestOptions.UNSET;
-  @NonNull
-  private Key signature = EmptySignature.obtain();
-  private boolean isTransformationRequired;
-  private boolean isTransformationAllowed = true;
-  @Nullable
-  private Drawable fallbackDrawable;
-  private int fallbackId;
-  @NonNull
-  private Options options = new Options();
-  @NonNull
-  private Map<Class<?>, Transformation<?>> transformations = new CachedHashCodeArrayMap<>();
-  @NonNull
-  private Class<?> resourceClass = Object.class;
-  private boolean isLocked;
-  @Nullable
-  private Resources.Theme theme;
-  private boolean isAutoCloneEnabled;
-  private boolean useUnlimitedSourceGeneratorsPool;
-  private boolean onlyRetrieveFromCache;
-  private boolean isScaleOnlyOrNoTransform = true;
-  private boolean useAnimationPool;
 
   /**
    * Returns a {@link RequestOptions} object with {@link #sizeMultiplier(float)} set.
@@ -139,7 +64,8 @@ public static RequestOptions diskCacheStrategyOf(@NonNull DiskCacheStrategy disk
   }
 
   /**
-   * Returns a {@link RequestOptions} object with {@link #priority(Priority)}} set.
+   * Returns a {@link RequestOptions} object with {@link BaseRequestOptions#priority(Priority)}}
+   * set.
    */
   @SuppressWarnings("WeakerAccess") // Public API
   @NonNull
@@ -415,1314 +341,4 @@ public static RequestOptions noAnimation() {
     return noAnimationOptions;
   }
 
-  private static boolean isSet(int fields, int flag) {
-    return (fields & flag) != 0;
-  }
-
-  /**
-   * Applies a multiplier to the {@link com.bumptech.glide.request.target.Target}'s size before
-   * loading the resource. Useful for loading thumbnails or trying to avoid loading huge resources
-   * (particularly {@link Bitmap}s on devices with overly dense screens.
-   *
-   * @param sizeMultiplier The multiplier to apply to the
-   *                       {@link com.bumptech.glide.request.target.Target}'s dimensions when
-   *                       loading the resource.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions sizeMultiplier(@FloatRange(from = 0, to = 1) float sizeMultiplier) {
-    if (isAutoCloneEnabled) {
-      return clone().sizeMultiplier(sizeMultiplier);
-    }
-
-    if (sizeMultiplier < 0f || sizeMultiplier > 1f) {
-      throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");
-    }
-    this.sizeMultiplier = sizeMultiplier;
-    fields |= SIZE_MULTIPLIER;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * If set to {@code true}, uses a cached unlimited {@link java.util.concurrent.Executor} to run
-   * the request.
-   *
-   * <p>This method should <em>ONLY</em> be used when a Glide load is started recursively on one
-   * of Glide's threads as part of another request. Using this method in other scenarios can lead
-   * to excessive memory usage and OOMs and/or a significant decrease in performance across an
-   * application.
-   *
-   * <p>If both this method and {@link #useAnimationPool(boolean)} are set, this method will be
-   * preferred and {@link #useAnimationPool(boolean)} will be ignored.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions useUnlimitedSourceGeneratorsPool(boolean flag) {
-    if (isAutoCloneEnabled) {
-      return clone().useUnlimitedSourceGeneratorsPool(flag);
-    }
-
-    this.useUnlimitedSourceGeneratorsPool = flag;
-    fields |= USE_UNLIMITED_SOURCE_GENERATORS_POOL;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * If set to {@code true}, uses a special {@link java.util.concurrent.Executor} that is used
-   * exclusively for decoding frames of animated resources, like GIFs.
-   *
-   * <p>The animation executor disallows network operations and must not be used for loads that
-   * may load remote data. The animation executor has fewer threads available to it than Glide's
-   * normal executors and is only useful as a way of avoiding blocking on longer and more expensive
-   * reads for critical requests like those in an animating GIF.
-   *
-   * <p>If both {@link #useUnlimitedSourceGeneratorsPool(boolean)} and this method are set,
-   * {@link #useUnlimitedSourceGeneratorsPool(boolean)} will be preferred and this method will be
-   * ignored.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions useAnimationPool(boolean flag) {
-    if (isAutoCloneEnabled) {
-      return clone().useAnimationPool(flag);
-    }
-
-    useAnimationPool = flag;
-    fields |= USE_ANIMATION_POOL;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   *
-   * If set to true, will only load an item if found in the cache, and will not fetch from source.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions onlyRetrieveFromCache(boolean flag) {
-    if (isAutoCloneEnabled) {
-      return clone().onlyRetrieveFromCache(flag);
-    }
-
-    this.onlyRetrieveFromCache = flag;
-    fields |= ONLY_RETRIEVE_FROM_CACHE;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets the {@link DiskCacheStrategy} to use for this load.
-   *
-   * <p> Defaults to {@link DiskCacheStrategy#AUTOMATIC}. </p>
-   *
-   * <p> For most applications {@link DiskCacheStrategy#RESOURCE} is
-   * ideal. Applications that use the same resource multiple times in multiple sizes and are willing
-   * to trade off some speed and disk space in return for lower bandwidth usage may want to consider
-   * using {@link DiskCacheStrategy#DATA} or
-   * {@link DiskCacheStrategy#ALL}. </p>
-   *
-   * @param strategy The strategy to use.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions diskCacheStrategy(@NonNull DiskCacheStrategy strategy) {
-    if (isAutoCloneEnabled) {
-      return clone().diskCacheStrategy(strategy);
-    }
-    this.diskCacheStrategy = Preconditions.checkNotNull(strategy);
-    fields |= DISK_CACHE_STRATEGY;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets the priority for this load.
-   *
-   * @param priority A priority.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions priority(@NonNull Priority priority) {
-    if (isAutoCloneEnabled) {
-      return clone().priority(priority);
-    }
-
-    this.priority = Preconditions.checkNotNull(priority);
-    fields |= PRIORITY;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets an {@link Drawable} to display while a resource is loading.
-   *
-   * <p>Replaces any previous calls to this method or {@link #placeholder(int)}.
-   *
-   * @param drawable The drawable to display as a placeholder.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions placeholder(@Nullable Drawable drawable) {
-    if (isAutoCloneEnabled) {
-      return clone().placeholder(drawable);
-    }
-
-    this.placeholderDrawable = drawable;
-    fields |= PLACEHOLDER;
-
-    placeholderId = 0;
-    fields &= ~PLACEHOLDER_ID;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets an Android resource id for a {@link Drawable} resource to
-   * display while a resource is loading.
-   *
-   * <p>Replaces any previous calls to this method or {@link #placeholder(Drawable)}
-   *
-   * @param resourceId The id of the resource to use as a placeholder
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions placeholder(@DrawableRes int resourceId) {
-    if (isAutoCloneEnabled) {
-      return clone().placeholder(resourceId);
-    }
-
-    this.placeholderId = resourceId;
-    fields |= PLACEHOLDER_ID;
-
-    placeholderDrawable = null;
-    fields &= ~PLACEHOLDER;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets an {@link Drawable} to display if the model provided to
-   * {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}.
-   *
-   * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If the
-   * error drawable is not set, the placeholder will be displayed.
-   *
-   * <p>Replaces any previous calls to this method or {@link #fallback(int)}.
-   *
-   * @see #placeholder(Drawable)
-   * @see #placeholder(int)
-   *
-   * @param drawable The drawable to display as a placeholder.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions fallback(@Nullable Drawable drawable) {
-    if (isAutoCloneEnabled) {
-      return clone().fallback(drawable);
-    }
-
-    this.fallbackDrawable = drawable;
-    fields |= FALLBACK;
-
-    fallbackId = 0;
-    fields &= ~FALLBACK_ID;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets a resource to display if the model provided to
-   * {@link com.bumptech.glide.RequestBuilder#load(Object)} is {@code null}.
-   *
-   * <p> If a fallback is not set, null models will cause the error drawable to be displayed. If
-   * the error drawable is not set, the placeholder will be displayed.
-   *
-   * <p>Replaces any previous calls to this method or {@link #fallback(Drawable)}.
-   *
-   * @see #placeholder(Drawable)
-   * @see #placeholder(int)
-   *
-   * @param resourceId The id of the resource to use as a fallback.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions fallback(@DrawableRes int resourceId) {
-    if (isAutoCloneEnabled) {
-      return clone().fallback(resourceId);
-    }
-
-    this.fallbackId = resourceId;
-    fields |= FALLBACK_ID;
-
-    fallbackDrawable = null;
-    fields &= ~FALLBACK;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets a {@link Drawable} to display if a load fails.
-   *
-   * <p>Replaces any previous calls to this method or {@link #error(int)}
-   *
-   * @param drawable The drawable to display.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions error(@Nullable Drawable drawable) {
-    if (isAutoCloneEnabled) {
-      return clone().error(drawable);
-    }
-
-    this.errorPlaceholder = drawable;
-    fields |= ERROR_PLACEHOLDER;
-
-    this.errorId = 0;
-    fields &= ~ERROR_ID;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets a resource to display if a load fails.
-   *
-   * <p>Replaces any previous calls to this method or {@link #error(Drawable)}
-   *
-   * @param resourceId The id of the resource to use as a placeholder.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions error(@DrawableRes int resourceId) {
-    if (isAutoCloneEnabled) {
-      return clone().error(resourceId);
-    }
-    this.errorId = resourceId;
-    fields |= ERROR_ID;
-
-    this.errorPlaceholder = null;
-    fields &= ~ERROR_PLACEHOLDER;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Sets the {@link android.content.res.Resources.Theme} to apply when loading {@link Drawable}s
-   * for resource ids provided via {@link #error(int)}, {@link #placeholder(int)}, and
-   * {@link #fallback(Drawable)}.
-   *
-   * <p>The theme is <em>NOT</em> applied in the decoder that will attempt to decode a given
-   * resource id model on Glide's background threads. The theme is used exclusively on the main
-   * thread to obtain placeholder/error/fallback drawables to avoid leaking Activities.
-   *
-   * <p>If the {@link android.content.Context} of the {@link android.app.Fragment} or
-   * {@link android.app.Activity} used to start this load has a different
-   * {@link android.content.res.Resources.Theme}, the {@link android.content.res.Resources.Theme}
-   * provided here will override the {@link android.content.res.Resources.Theme} of the
-   * {@link android.content.Context}.
-   *
-   * @param theme The theme to use when loading Drawables.
-   * @return this request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions theme(@Nullable Resources.Theme theme) {
-    if (isAutoCloneEnabled) {
-      return clone().theme(theme);
-    }
-
-    this.theme = theme;
-    fields |= THEME;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Allows the loaded resource to skip the memory cache.
-   *
-   * <p> Note - this is not a guarantee. If a request is already pending for this resource and that
-   * request is not also skipping the memory cache, the resource will be cached in memory.</p>
-   *
-   * @param skip True to allow the resource to skip the memory cache.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions skipMemoryCache(boolean skip) {
-    if (isAutoCloneEnabled) {
-      return clone().skipMemoryCache(true);
-    }
-
-    this.isCacheable = !skip;
-    fields |= IS_CACHEABLE;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
-   * given values. This is useful for thumbnails, and should only be used for other cases when you
-   * need a very specific image size.
-   *
-   * @param width  The width in pixels to use to load the resource.
-   * @param height The height in pixels to use to load the resource.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions override(int width, int height) {
-    if (isAutoCloneEnabled) {
-      return clone().override(width, height);
-    }
-
-    this.overrideWidth = width;
-    this.overrideHeight = height;
-    fields |= OVERRIDE;
-
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Overrides the {@link com.bumptech.glide.request.target.Target}'s width and height with the
-   * given size.
-   *
-   * @see #override(int, int)
-   * @param size The width and height to use.
-   * @return This request builder.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions override(int size) {
-    return override(size, size);
-  }
-
-  /**
-   * Sets some additional data to be mixed in to the memory and disk cache keys allowing the caller
-   * more control over when cached data is invalidated.
-   *
-   * <p> Note - The signature does not replace the cache key, it is purely additive. </p>
-   *
-   * @param signature A unique non-null {@link Key} representing the current
-   *                  state of the model that will be mixed in to the cache key.
-   * @return This request builder.
-   * @see com.bumptech.glide.signature.ObjectKey
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions signature(@NonNull Key signature) {
-    if (isAutoCloneEnabled) {
-      return clone().signature(signature);
-    }
-
-    this.signature = Preconditions.checkNotNull(signature);
-    fields |= SIGNATURE;
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Returns a copy of this request builder with all of the options put so far on this builder.
-   *
-   * <p> This method returns a "deep" copy in that all non-immutable arguments are copied such that
-   * changes to one builder will not affect the other builder. However, in addition to immutable
-   * arguments, the current model is not copied copied so changes to the model will affect both
-   * builders. </p>
-   *
-   * <p> Even if this object was locked, the cloned object returned from this method will not be
-   * locked. </p>
-   */
-  @SuppressWarnings({
-      "unchecked",
-      // we don't want to throw to be user friendly
-      "PMD.CloneThrowsCloneNotSupportedException"
-  })
-  @CheckResult
-  @Override
-  public RequestOptions clone() {
-    try {
-      RequestOptions result = (RequestOptions) super.clone();
-      result.options = new Options();
-      result.options.putAll(options);
-      result.transformations = new CachedHashCodeArrayMap<>();
-      result.transformations.putAll(transformations);
-      result.isLocked = false;
-      result.isAutoCloneEnabled = false;
-      return result;
-    } catch (CloneNotSupportedException e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  @NonNull
-  @CheckResult
-  public <T> RequestOptions set(@NonNull Option<T> option, @NonNull T value) {
-    if (isAutoCloneEnabled) {
-      return clone().set(option, value);
-    }
-
-    Preconditions.checkNotNull(option);
-    Preconditions.checkNotNull(value);
-    options.set(option, value);
-    return selfOrThrowIfLocked();
-  }
-
-  @NonNull
-  @CheckResult
-  public RequestOptions decode(@NonNull Class<?> resourceClass) {
-    if (isAutoCloneEnabled) {
-      return clone().decode(resourceClass);
-    }
-
-    this.resourceClass = Preconditions.checkNotNull(resourceClass);
-    fields |= RESOURCE_CLASS;
-    return selfOrThrowIfLocked();
-  }
-
-  public final boolean isTransformationAllowed() {
-    return isTransformationAllowed;
-  }
-
-  public final boolean isTransformationSet() {
-    return isSet(TRANSFORMATION);
-  }
-
-  public final boolean isLocked() {
-    return isLocked;
-  }
-
-  /**
-   * Sets the value for key
-   * {@link com.bumptech.glide.load.resource.bitmap.BitmapEncoder#COMPRESSION_FORMAT}.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions encodeFormat(@NonNull Bitmap.CompressFormat format) {
-    return set(BitmapEncoder.COMPRESSION_FORMAT, Preconditions.checkNotNull(format));
-  }
-
-  /**
-   * Sets the value for key
-   * {@link BitmapEncoder#COMPRESSION_QUALITY}.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions encodeQuality(@IntRange(from = 0, to = 100) int quality) {
-    return set(BitmapEncoder.COMPRESSION_QUALITY, quality);
-  }
-
-  /**
-   * Sets the time position of the frame to extract from a video.
-   *
-   * <p>This is a component option specific to {@link VideoDecoder}. If the default video
-   * decoder is replaced or skipped because of your configuration, this option may be ignored.
-   *
-   * @see VideoDecoder#TARGET_FRAME
-   * @param frameTimeMicros The time position in microseconds of the desired frame. If negative, the
-   *                        Android framework implementation return a representative frame.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions frame(@IntRange(from = 0) long frameTimeMicros) {
-    return set(VideoDecoder.TARGET_FRAME, frameTimeMicros);
-  }
-
-  /**
-   * Sets the {@link DecodeFormat} to use when decoding {@link Bitmap} objects using
-   * {@link Downsampler} and Glide's default GIF decoders.
-   *
-   * <p>{@link DecodeFormat} is a request, not a requirement. It's possible the resource will be
-   * decoded using a decoder that cannot control the format
-   * ({@link android.media.MediaMetadataRetriever} for example), or that the decoder may choose to
-   * ignore the requested format if it can't display the image (i.e. RGB_565 is requested, but the
-   * image has alpha).
-   *
-   * <p>This is a component option specific to {@link Downsampler} and Glide's GIF decoders. If the
-   * default Bitmap decoders are replaced or skipped because of your configuration, this option may
-   * be ignored.
-   *
-   * <p>To set only the format used when decoding {@link Bitmap}s, use
-   * {@link #option(Option, Object)} and {@link Downsampler#DECODE_FORMAT}. To set only the format
-   * used when decoding GIF frames, use {@link #option(Option, Object)} and
-   * {@link GifOptions#DECODE_FORMAT}.
-   *
-   * @see Downsampler#DECODE_FORMAT
-   * @see GifOptions#DECODE_FORMAT
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions format(@NonNull DecodeFormat format) {
-    Preconditions.checkNotNull(format);
-    return set(Downsampler.DECODE_FORMAT, format)
-        .set(GifOptions.DECODE_FORMAT, format);
-  }
-
-  /**
-   * Disables the use of {@link android.graphics.Bitmap.Config#HARDWARE} in {@link Downsampler} to
-   * avoid errors caused by inspecting Bitmap pixels, drawing with hardware support disabled,
-   * drawing to {@link android.graphics.Canvas}s backed by {@link Bitmap}s etc.
-   *
-   * <p>It's almost never safe to set {@link Downsampler#ALLOW_HARDWARE_CONFIG} to {@code true} so
-   * we only provide a way to disable hardware configs entirely. If no option is set for
-   * {@link Downsampler#ALLOW_HARDWARE_CONFIG}, Glide will set the value per request based on
-   * whether or not a {@link Transformation} is applied and if one is, the type of
-   * {@link Transformation} applied. Built in transformations like {@link FitCenter} and
-   * {@link com.bumptech.glide.load.resource.bitmap.DownsampleStrategy.CenterOutside} can safely use
-   * {@link android.graphics.Bitmap.Config#HARDWARE} because they can be entirely replaced by
-   * scaling within {@link Downsampler}. {@link Transformation}s like {@link #circleCrop()} that
-   * can't be replicated by {@link Downsampler} cannot use {@link Bitmap.Config#HARDWARE} because
-   * {@link android.graphics.Bitmap.Config#HARDWARE} cannot be drawn to
-   * {@link android.graphics.Canvas}s, which is required by most {@link Transformation}s.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions disallowHardwareConfig() {
-    return set(Downsampler.ALLOW_HARDWARE_CONFIG, false);
-  }
-
-  /**
-   * Sets the {@link DownsampleStrategy} to use when decoding {@link Bitmap Bitmaps} using
-   * {@link Downsampler}.
-   *
-   * <p>This is a component option specific to {@link Downsampler}. If the defautlt Bitmap decoder
-   * is replaced or skipped because of your configuration, this option may be ignored.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions downsample(@NonNull DownsampleStrategy strategy) {
-    return set(DownsampleStrategy.OPTION, Preconditions.checkNotNull(strategy));
-  }
-
-  /**
-   * Sets the read and write timeout for the http requests used to load the image.
-   *
-   * <p>This is a component option specific to Glide's default networking library and
-   * {@link com.bumptech.glide.load.model.stream.HttpGlideUrlLoader}. If you use any other
-   * networking library including Glide's Volley or OkHttp integration libraries, this option will
-   * be ignored.
-   *
-   * @see com.bumptech.glide.load.model.stream.HttpGlideUrlLoader#TIMEOUT
-   * @param timeoutMs The read and write timeout in milliseconds.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions timeout(@IntRange(from = 0) int timeoutMs) {
-    return set(HttpGlideUrlLoader.TIMEOUT, timeoutMs);
-  }
-
-  /**
-   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterCrop} to all default types, and
-   * ignores unknown types.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @see #optionalTransform(Class, Transformation)
-   * @see #centerCrop()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions optionalCenterCrop() {
-    return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
-  }
-
-  /**
-   * Applies {@link CenterCrop} to all default types and
-   * throws an exception if asked to transform an unknown type.
-   *
-   * <p>this will override previous calls to {@link #dontTransform()} ()}.
-   *
-   * @see #transform(Class, Transformation)
-   * @see #optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions centerCrop() {
-    return transform(DownsampleStrategy.CENTER_OUTSIDE, new CenterCrop());
-  }
-
-  /**
-   *
-   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
-   * image types, and ignores unknown types.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
-   * {@link #downsample(DownsampleStrategy)}.
-   *
-   * @see #optionalTransform(Class, Transformation)
-   * @see #fitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions optionalFitCenter() {
-    return optionalScaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
-  }
-
-  /**
-   * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to
-   * image types, and throws an exception if asked to transform an unknown
-   * type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
-   * {@link #downsample(DownsampleStrategy)}.
-   *
-   * @see #transform(Class, Transformation)
-   * @see #optionalFitCenter()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions fitCenter() {
-    return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());
-  }
-
-  /**
-   * Applies {@link com.bumptech.glide.load.resource.bitmap.CenterInside} to all default types,
-   * {@link DownsampleStrategy#CENTER_INSIDE} to image types, and ignores unknown types.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
-   * {@link #downsample(DownsampleStrategy)}.
-   *
-   * @see #optionalTransform(Class, Transformation)
-   * @see #centerInside()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions optionalCenterInside() {
-    return optionalScaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
-  }
-
-  /**
-   * Applies {@link CenterInside} to all default types, {@link DownsampleStrategy#CENTER_INSIDE} to
-   * image types and throws an exception if asked to transform an unknown type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()} and previous calls to
-   * {@link #downsample(DownsampleStrategy)}.
-   *
-   * @see #transform(Class, Transformation)
-   * @see #optionalCenterInside()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions centerInside() {
-    return scaleOnlyTransform(DownsampleStrategy.CENTER_INSIDE, new CenterInside());
-  }
-
-  /**
-   * Applies {@link CircleCrop} to all default types, and ignores unknown types.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @see #optionalTransform(Transformation)
-   * @see #circleCrop()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions optionalCircleCrop() {
-    return optionalTransform(DownsampleStrategy.CENTER_OUTSIDE, new CircleCrop());
-  }
-
-  /**
-   * Applies {@link CircleCrop} to all default types and throws an exception if asked to transform
-   * an unknown type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @see #transform(Class, Transformation)
-   * @see #optionalCenterCrop()
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions circleCrop() {
-    return transform(DownsampleStrategy.CENTER_INSIDE, new CircleCrop());
-  }
-
-  // calling optionalTransform() on the result of clone() requires greater access.
-  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings({"WeakerAccess", "CheckResult"})
-  @NonNull
-  final RequestOptions optionalTransform(@NonNull DownsampleStrategy downsampleStrategy,
-      @NonNull Transformation<Bitmap> transformation) {
-    if (isAutoCloneEnabled) {
-      return clone().optionalTransform(downsampleStrategy, transformation);
-    }
-
-    downsample(downsampleStrategy);
-    return transform(transformation, /*isRequired=*/ false);
-  }
-
-  // calling transform() on the result of clone() requires greater access.
-  // calling downsample is guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings({"WeakerAccess", "CheckResult"})
-  @NonNull
-  @CheckResult
-  final RequestOptions transform(@NonNull DownsampleStrategy downsampleStrategy,
-      @NonNull Transformation<Bitmap> transformation) {
-    if (isAutoCloneEnabled) {
-      return clone().transform(downsampleStrategy, transformation);
-    }
-
-    downsample(downsampleStrategy);
-    return transform(transformation);
-  }
-
-  @NonNull
-  private RequestOptions scaleOnlyTransform(
-      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
-    return scaleOnlyTransform(strategy, transformation, true /*isTransformationRequired*/);
-  }
-
-  @NonNull
-  private RequestOptions optionalScaleOnlyTransform(
-      @NonNull DownsampleStrategy strategy, @NonNull Transformation<Bitmap> transformation) {
-    return scaleOnlyTransform(strategy, transformation, false /*isTransformationRequired*/);
-  }
-
-  @NonNull
-  private RequestOptions scaleOnlyTransform(
-      @NonNull DownsampleStrategy strategy,
-      @NonNull Transformation<Bitmap> transformation,
-      boolean isTransformationRequired) {
-    RequestOptions result = isTransformationRequired
-          ? transform(strategy, transformation) : optionalTransform(strategy, transformation);
-    result.isScaleOnlyOrNoTransform = true;
-    return result;
-  }
-
-  /**
-   * Applies the given {@link Transformation} for
-   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
-   * {@link android.graphics.drawable.BitmapDrawable}, and
-   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
-   * and throws an exception if asked to transform an unknown type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
-   * @see #optionalTransform(Transformation)
-   * @see #optionalTransform(Class, Transformation)
-   */
-  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings("CheckResult")
-  @NonNull
-  @CheckResult
-  public RequestOptions transform(@NonNull Transformation<Bitmap> transformation) {
-    return transform(transformation, /*isRequired=*/ true);
-  }
-
-  /**
-   * Applies the given {@link Transformation}s in the given order for
-   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
-   * {@link android.graphics.drawable.BitmapDrawable}, and
-   * {@link com.bumptech.glide.load.resource.gif.GifDrawable})
-   * and throws an exception if asked to transform an unknown type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param transformations One or more {@link Transformation}s for {@link Bitmap}s.
-   * @see #optionalTransform(Transformation)
-   * @see #optionalTransform(Class, Transformation)
-   */
-  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings({"unchecked", "varargs", "CheckResult"})
-  @NonNull
-  @CheckResult
-  public RequestOptions transforms(@NonNull Transformation<Bitmap>... transformations) {
-    return transform(new MultiTransformation<>(transformations), /*isRequired=*/ true);
-  }
-
-  /**
-   * Applies the given {@link Transformation} for
-   * {@link Bitmap Bitmaps} to the default types ({@link Bitmap},
-   * {@link android.graphics.drawable.BitmapDrawable}, and
-   * {@link com.bumptech.glide.load.resource.gif.GifDrawable}) and ignores unknown types.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param transformation Any {@link Transformation} for {@link Bitmap}s.
-   * @see #transform(Transformation)
-   * @see #transform(Class, Transformation)
-   */
-  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings("CheckResult")
-  @NonNull
-  @CheckResult
-  public RequestOptions optionalTransform(@NonNull Transformation<Bitmap> transformation) {
-    return transform(transformation, /*isRequired=*/ false);
-  }
-
-  @NonNull
-  private RequestOptions transform(
-      @NonNull Transformation<Bitmap> transformation, boolean isRequired) {
-    if (isAutoCloneEnabled) {
-      return clone().transform(transformation, isRequired);
-    }
-
-    DrawableTransformation drawableTransformation =
-        new DrawableTransformation(transformation, isRequired);
-    transform(Bitmap.class, transformation, isRequired);
-    transform(Drawable.class, drawableTransformation, isRequired);
-    // TODO: remove BitmapDrawable decoder and this transformation.
-    // Registering as BitmapDrawable is simply an optimization to avoid some iteration and
-    // isAssignableFrom checks when obtaining the transformation later on. It can be removed without
-    // affecting the functionality.
-    transform(BitmapDrawable.class, drawableTransformation.asBitmapDrawable(), isRequired);
-    transform(GifDrawable.class, new GifDrawableTransformation(transformation), isRequired);
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Applies the given {@link Transformation} for any decoded resource of
-   * the given type and allows unknown resource types to be ignored.
-   *
-   * <p> Users can apply different transformations for each resource class. Applying a
-   * {@link Transformation} for a resource type that already has a
-   * {@link Transformation} will override the previous call. </p>
-   *
-   * <p> If any calls are made to the non-optional transform methods, then attempting to transform
-   * an unknown resource class will throw an exception. To allow unknown types, users must always
-   * call the optional version of each method. </p>
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param resourceClass  The type of resource to transform.
-   * @param transformation The {@link Transformation} to apply.
-   */
-  @NonNull
-  @CheckResult
-  public <T> RequestOptions optionalTransform(
-      @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
-    return transform(resourceClass, transformation, /*isRequired=*/ false);
-  }
-
-  @NonNull
-  private <T> RequestOptions transform(
-      @NonNull Class<T> resourceClass,
-      @NonNull Transformation<T> transformation,
-      boolean isRequired) {
-    if (isAutoCloneEnabled) {
-      return clone().transform(resourceClass, transformation, isRequired);
-    }
-
-    Preconditions.checkNotNull(resourceClass);
-    Preconditions.checkNotNull(transformation);
-    transformations.put(resourceClass, transformation);
-    fields |= TRANSFORMATION;
-    isTransformationAllowed = true;
-    fields |= TRANSFORMATION_ALLOWED;
-    // Always set to false here. Known scale only transformations will call this method and then
-    // set isScaleOnlyOrNoTransform to true immediately after.
-    isScaleOnlyOrNoTransform = false;
-    if (isRequired) {
-      fields |= TRANSFORMATION_REQUIRED;
-      isTransformationRequired = true;
-    }
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Applies the given {@link Transformation} for any decoded resource of
-   * the given type and throws if asked to transform an unknown resource type.
-   *
-   * <p>This will override previous calls to {@link #dontTransform()}.
-   *
-   * @param resourceClass  The type of resource to transform.
-   * @param transformation The {@link Transformation} to apply.
-   * @see #optionalTransform(Class, Transformation)
-   */
-  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings("CheckResult")
-  @NonNull
-  @CheckResult
-  public <T> RequestOptions transform(
-      @NonNull Class<T> resourceClass, @NonNull Transformation<T> transformation) {
-    return transform(resourceClass, transformation, /*isRequired=*/ true);
-  }
-
-  /**
-   * Removes all applied {@link Transformation Transformations} for all
-   * resource classes and allows unknown resource types to be transformed without throwing an
-   * exception.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions dontTransform() {
-    if (isAutoCloneEnabled) {
-      return clone().dontTransform();
-    }
-
-    transformations.clear();
-    fields &= ~TRANSFORMATION;
-    isTransformationRequired = false;
-    fields &= ~TRANSFORMATION_REQUIRED;
-    isTransformationAllowed = false;
-    fields |= TRANSFORMATION_ALLOWED;
-    isScaleOnlyOrNoTransform = true;
-    return selfOrThrowIfLocked();
-  }
-
-  /**
-   * Disables resource decoders that return animated resources so any resource returned will be
-   * static.
-   *
-   * <p> To disable transitions (fades etc) use
-   * {@link com.bumptech.glide.TransitionOptions#dontTransition()}</p>
-   */
-  // Guaranteed to modify the current object by the isAutoCloneEnabledCheck.
-  @SuppressWarnings("CheckResult")
-  @NonNull
-  @CheckResult
-  public RequestOptions dontAnimate() {
-    return set(GifOptions.DISABLE_ANIMATION, true);
-  }
-
-  /**
-   * Updates this options set with any options that are explicitly set in the given
-   * {@code RequestOptions} object and returns this object if {@link #autoClone()} is disabled or
-   * a new {@code RequestOptions} object if {@link #autoClone()} is enabled.
-   *
-   * <p>{@code #apply} only replaces those values that are explicitly set in the given
-   * {@code RequestOptions}. If you need to completely reset all previously set options, create a
-   * new {@code RequestOptions} object instead of using this method.
-   *
-   * <p>The options that will be set to values in the returned {@code RequestOptions} object is the
-   * intersection of the set of options in this {@code RequestOptions} object and the given
-   * {@code RequestOptions} object that were explicitly set. If the values of any of the options
-   * conflict, the values in the returned {@code RequestOptions} object will be set to those in the
-   * given {@code RequestOptions} object.
-   */
-  @NonNull
-  @CheckResult
-  public RequestOptions apply(@NonNull RequestOptions other) {
-    if (isAutoCloneEnabled) {
-      return clone().apply(other);
-    }
-
-    if (isSet(other.fields, SIZE_MULTIPLIER)) {
-      sizeMultiplier = other.sizeMultiplier;
-    }
-    if (isSet(other.fields, USE_UNLIMITED_SOURCE_GENERATORS_POOL)) {
-      useUnlimitedSourceGeneratorsPool = other.useUnlimitedSourceGeneratorsPool;
-    }
-    if (isSet(other.fields, USE_ANIMATION_POOL)) {
-      useAnimationPool = other.useAnimationPool;
-    }
-    if (isSet(other.fields, DISK_CACHE_STRATEGY)) {
-      diskCacheStrategy = other.diskCacheStrategy;
-    }
-    if (isSet(other.fields, PRIORITY)) {
-      priority = other.priority;
-    }
-    if (isSet(other.fields, ERROR_PLACEHOLDER)) {
-      errorPlaceholder = other.errorPlaceholder;
-      errorId = 0;
-      fields &= ~ERROR_ID;
-    }
-    if (isSet(other.fields, ERROR_ID)) {
-      errorId = other.errorId;
-      errorPlaceholder = null;
-      fields &= ~ERROR_PLACEHOLDER;
-    }
-    if (isSet(other.fields, PLACEHOLDER)) {
-      placeholderDrawable = other.placeholderDrawable;
-      placeholderId = 0;
-      fields &= ~PLACEHOLDER_ID;
-    }
-    if (isSet(other.fields, PLACEHOLDER_ID)) {
-      placeholderId = other.placeholderId;
-      placeholderDrawable = null;
-      fields &= ~PLACEHOLDER;
-    }
-    if (isSet(other.fields, IS_CACHEABLE)) {
-      isCacheable = other.isCacheable;
-    }
-    if (isSet(other.fields, OVERRIDE)) {
-      overrideWidth = other.overrideWidth;
-      overrideHeight = other.overrideHeight;
-    }
-    if (isSet(other.fields, SIGNATURE)) {
-      signature = other.signature;
-    }
-    if (isSet(other.fields, RESOURCE_CLASS)) {
-      resourceClass = other.resourceClass;
-    }
-    if (isSet(other.fields, FALLBACK)) {
-      fallbackDrawable = other.fallbackDrawable;
-      fallbackId = 0;
-      fields &= ~FALLBACK_ID;
-    }
-    if (isSet(other.fields, FALLBACK_ID)) {
-      fallbackId = other.fallbackId;
-      fallbackDrawable = null;
-      fields &= ~FALLBACK;
-    }
-    if (isSet(other.fields, THEME)) {
-      theme = other.theme;
-    }
-    if (isSet(other.fields, TRANSFORMATION_ALLOWED)) {
-      isTransformationAllowed = other.isTransformationAllowed;
-    }
-    if (isSet(other.fields, TRANSFORMATION_REQUIRED)) {
-      isTransformationRequired = other.isTransformationRequired;
-    }
-    if (isSet(other.fields, TRANSFORMATION)) {
-      transformations.putAll(other.transformations);
-      isScaleOnlyOrNoTransform = other.isScaleOnlyOrNoTransform;
-    }
-    if (isSet(other.fields, ONLY_RETRIEVE_FROM_CACHE)) {
-      onlyRetrieveFromCache = other.onlyRetrieveFromCache;
-    }
-
-    // Applying options with dontTransform() is expected to clear our transformations.
-    if (!isTransformationAllowed) {
-      transformations.clear();
-      fields &= ~TRANSFORMATION;
-      isTransformationRequired = false;
-      fields &= ~TRANSFORMATION_REQUIRED;
-      isScaleOnlyOrNoTransform = true;
-    }
-
-    fields |= other.fields;
-    options.putAll(other.options);
-
-    return selfOrThrowIfLocked();
-  }
-
-
-  @Override
-  public boolean equals(Object o) {
-    if (o instanceof RequestOptions) {
-      RequestOptions other = (RequestOptions) o;
-      return Float.compare(other.sizeMultiplier, sizeMultiplier) == 0
-          && errorId == other.errorId
-          && Util.bothNullOrEqual(errorPlaceholder, other.errorPlaceholder)
-          && placeholderId == other.placeholderId
-          && Util.bothNullOrEqual(placeholderDrawable, other.placeholderDrawable)
-          && fallbackId == other.fallbackId
-          && Util.bothNullOrEqual(fallbackDrawable, other.fallbackDrawable)
-          && isCacheable == other.isCacheable
-          && overrideHeight == other.overrideHeight
-          && overrideWidth == other.overrideWidth
-          && isTransformationRequired == other.isTransformationRequired
-          && isTransformationAllowed == other.isTransformationAllowed
-          && useUnlimitedSourceGeneratorsPool == other.useUnlimitedSourceGeneratorsPool
-          && onlyRetrieveFromCache == other.onlyRetrieveFromCache
-          && diskCacheStrategy.equals(other.diskCacheStrategy)
-          && priority == other.priority
-          && options.equals(other.options)
-          && transformations.equals(other.transformations)
-          && resourceClass.equals(other.resourceClass)
-          && Util.bothNullOrEqual(signature, other.signature)
-          && Util.bothNullOrEqual(theme, other.theme);
-    }
-    return false;
-  }
-
-  @Override
-  public int hashCode() {
-    int hashCode = Util.hashCode(sizeMultiplier);
-    hashCode = Util.hashCode(errorId, hashCode);
-    hashCode = Util.hashCode(errorPlaceholder, hashCode);
-    hashCode = Util.hashCode(placeholderId, hashCode);
-    hashCode = Util.hashCode(placeholderDrawable, hashCode);
-    hashCode = Util.hashCode(fallbackId, hashCode);
-    hashCode = Util.hashCode(fallbackDrawable, hashCode);
-    hashCode = Util.hashCode(isCacheable, hashCode);
-    hashCode = Util.hashCode(overrideHeight, hashCode);
-    hashCode = Util.hashCode(overrideWidth, hashCode);
-    hashCode = Util.hashCode(isTransformationRequired, hashCode);
-    hashCode = Util.hashCode(isTransformationAllowed, hashCode);
-    hashCode = Util.hashCode(useUnlimitedSourceGeneratorsPool, hashCode);
-    hashCode = Util.hashCode(onlyRetrieveFromCache, hashCode);
-    hashCode = Util.hashCode(diskCacheStrategy, hashCode);
-    hashCode = Util.hashCode(priority, hashCode);
-    hashCode = Util.hashCode(options, hashCode);
-    hashCode = Util.hashCode(transformations, hashCode);
-    hashCode = Util.hashCode(resourceClass, hashCode);
-    hashCode = Util.hashCode(signature, hashCode);
-    hashCode = Util.hashCode(theme, hashCode);
-    return hashCode;
-  }
-
-  /**
-   * Throws if any further mutations are attempted.
-   *
-   * <p> Once locked, the only way to unlock is to use {@link #clone()} </p>
-   */
-  @NonNull
-  @SuppressWarnings("unchecked")
-  public RequestOptions lock() {
-    isLocked = true;
-    // This is the only place we should not check locked.
-    return this;
-  }
-
-  /**
-   * Similar to {@link #lock()} except that mutations cause a {@link #clone()} operation to happen
-   * before the mutation resulting in all methods returning a new Object and leaving the original
-   * locked object unmodified.
-   *
-   * <p>Auto clone is not retained by cloned objects returned from mutations. The cloned objects
-   * are mutable and are not locked.
-   */
-  @NonNull
-  public RequestOptions autoClone() {
-    if (isLocked && !isAutoCloneEnabled) {
-      throw new IllegalStateException("You cannot auto lock an already locked options object"
-          + ", try clone() first");
-    }
-    isAutoCloneEnabled = true;
-    return lock();
-  }
-
-  @NonNull
-  @SuppressWarnings("unchecked")
-  private RequestOptions selfOrThrowIfLocked() {
-    if (isLocked) {
-      throw new IllegalStateException("You cannot modify locked RequestOptions, consider clone()");
-    }
-    return this;
-  }
-
-  protected boolean isAutoCloneEnabled() {
-    return isAutoCloneEnabled;
-  }
-
-  public final boolean isDiskCacheStrategySet() {
-    return isSet(DISK_CACHE_STRATEGY);
-  }
-
-  public final boolean isSkipMemoryCacheSet() {
-    return isSet(IS_CACHEABLE);
-  }
-
-  @NonNull
-  public final Map<Class<?>, Transformation<?>> getTransformations() {
-    return transformations;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  public final boolean isTransformationRequired() {
-    return isTransformationRequired;
-  }
-
-  @NonNull
-  public final Options getOptions() {
-    return options;
-  }
-
-  @NonNull
-  public final Class<?> getResourceClass() {
-    return resourceClass;
-  }
-
-  @NonNull
-  public final DiskCacheStrategy getDiskCacheStrategy() {
-    return diskCacheStrategy;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  @Nullable
-  public final Drawable getErrorPlaceholder() {
-    return errorPlaceholder;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  public final int getErrorId() {
-    return errorId;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  public final int getPlaceholderId() {
-    return placeholderId;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  @Nullable
-  public final Drawable getPlaceholderDrawable() {
-    return placeholderDrawable;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  public final int getFallbackId() {
-    return fallbackId;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  @Nullable
-  public final Drawable getFallbackDrawable() {
-    return fallbackDrawable;
-  }
-
-  @Nullable
-  public final Resources.Theme getTheme() {
-    return theme;
-  }
-
-  @SuppressWarnings("WeakerAccess")
-  public final boolean isMemoryCacheable() {
-    return isCacheable;
-  }
-
-  @NonNull
-  public final Key getSignature() {
-    return signature;
-  }
-
-  public final boolean isPrioritySet() {
-    return isSet(PRIORITY);
-  }
-
-  @NonNull
-  public final Priority getPriority() {
-    return priority;
-  }
-
-  public final int getOverrideWidth() {
-    return overrideWidth;
-  }
-
-  public final boolean isValidOverride() {
-    return Util.isValidDimensions(overrideWidth, overrideHeight);
-  }
-
-  public final int getOverrideHeight() {
-    return overrideHeight;
-  }
-
-  public final float getSizeMultiplier() {
-    return sizeMultiplier;
-  }
-
-  boolean isScaleOnlyOrNoTransform() {
-    return isScaleOnlyOrNoTransform;
-  }
-
-  private boolean isSet(int flag) {
-    return isSet(fields, flag);
-  }
-
-  // get is just as clear.
-  @SuppressWarnings("PMD.BooleanGetMethodName")
-  public final boolean getUseUnlimitedSourceGeneratorsPool() {
-    return useUnlimitedSourceGeneratorsPool;
-  }
-
-  // get is just as clear.
-  @SuppressWarnings("PMD.BooleanGetMethodName")
-  public final boolean getUseAnimationPool() {
-    return useAnimationPool;
-  }
-
-  // get is just as clear.
-  @SuppressWarnings("PMD.BooleanGetMethodName")
-  public final boolean getOnlyRetrieveFromCache() {
-    return onlyRetrieveFromCache;
-  }
 }
diff --git a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
index d04890c11..7207bc57e 100644
--- a/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
+++ b/library/src/main/java/com/bumptech/glide/request/SingleRequest.java
@@ -91,7 +91,7 @@
   @Nullable
   private Object model;
   private Class<R> transcodeClass;
-  private RequestOptions requestOptions;
+  private BaseRequestOptions<?> requestOptions;
   private int overrideWidth;
   private int overrideHeight;
   private Priority priority;
@@ -114,7 +114,7 @@
       GlideContext glideContext,
       Object model,
       Class<R> transcodeClass,
-      RequestOptions requestOptions,
+      BaseRequestOptions<?> requestOptions,
       int overrideWidth,
       int overrideHeight,
       Priority priority,
@@ -158,7 +158,7 @@ private void init(
       GlideContext glideContext,
       Object model,
       Class<R> transcodeClass,
-      RequestOptions requestOptions,
+      BaseRequestOptions<?> requestOptions,
       int overrideWidth,
       int overrideHeight,
       Priority priority,
diff --git a/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
new file mode 100644
index 000000000..ede0b2baf
--- /dev/null
+++ b/library/src/main/java/com/bumptech/glide/request/target/CustomTarget.java
@@ -0,0 +1,123 @@
+package com.bumptech.glide.request.target;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.widget.ImageView;
+import com.bumptech.glide.request.Request;
+import com.bumptech.glide.request.transition.Transition;
+import com.bumptech.glide.util.Util;
+
+/**
+ * A base {@link Target} for loading resources ({@link android.graphics.Bitmap}, {@link Drawable}
+ * etc) that are used outside of {@link android.view.View}s.
+ *
+ * <p>If you're loading a resource into a {@link View}, use
+ * {@link com.bumptech.glide.RequestBuilder#into(ImageView)}, a subclass of {@link ImageViewTarget},
+ * or {@link CustomViewTarget}. Using this class to load resources into {@link View}s can prevent
+ * Glide from correctly cancelling any previous loads, which may result in incorrect images
+ * appearing in the view, especially in scrolling views like
+ * {@link android.support.v7.widget.RecyclerView}.
+ *
+ * <p>You <em>MUST</em> implement {@link #onLoadCleared(Drawable)} and ensure that all references to
+ * any resource passed into the target in {@link #onResourceReady(Object, Transition)} are removed
+ * before {@link #onLoadCleared(Drawable)} completes. Failing to do so can result in graphical
+ * corruption, crashes caused by recycled {@link Bitmap}s, and other undefined behavior. It is never
+ * safe to leave {@link #onLoadCleared(Drawable)} unimplemented or empty. Even if you do not
+ * manually clear this {@link Target}, Glide may do so automatically after certain lifecycle events
+ * in {@link android.support.v4.app.Fragment}s and {@link android.app.Activity}s.
+ *
+ * <p>This class can only be used with {@link Target#SIZE_ORIGINAL} or when the desired resource
+ * dimensions are known when the {@link Target} is created. If you'd like to run some asynchronous
+ * process and make full use of {@link #getSize(SizeReadyCallback)} and {@link SizeReadyCallback},
+ * extend {@link Target} directly instead of using this class.
+ *
+ * @param <T> The type of resource that will be loaded (e.g. {@link Bitmap}).
+ */
+public abstract class CustomTarget<T> implements Target<T> {
+
+  private final int width;
+  private final int height;
+
+  @Nullable
+  private Request request;
+
+  /**
+   * Creates a new {@link CustomTarget} that will attempt to load the resource in its original size.
+   *
+   * <p>This constructor can cause very memory inefficient loads if the resource is large and can
+   * cause OOMs. It's provided as a convenience for when you'd like to specify dimensions with
+   * {@link com.bumptech.glide.request.RequestOptions#override(int)}. In all other cases, prefer
+   * {@link #CustomTarget(int, int)}.
+   */
+  public CustomTarget() {
+    this(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);
+  }
+
+  /**
+   * Creates a new {@code CustomTarget} that will return the given {@code width} and {@link @code}
+   * as the requested size (unless overridden by
+   * {@link com.bumptech.glide.request.RequestOptions#override(int)} in the request).
+   *
+   * @param width The requested width (>= 0, or == Target.SIZE_ORIGINAL).
+   * @param height The requested height (>= 0, or == Target.SIZE_ORIGINAL).
+   */
+  public CustomTarget(int width, int height) {
+     if (!Util.isValidDimensions(width, height)) {
+      throw new IllegalArgumentException(
+          "Width and height must both be > 0 or Target#SIZE_ORIGINAL, but given" + " width: "
+              + width + " and height: " + height);
+    }
+
+    this.width = width;
+    this.height = height;
+  }
+
+  @Override
+  public void onStart() {
+    // Intentionally empty, this can be optionally implemented by subclasses.
+  }
+
+  @Override
+  public void onStop() {
+    // Intentionally empty, this can be optionally implemented by subclasses.
+  }
+
+  @Override
+  public void onDestroy() {
+    // Intentionally empty, this can be optionally implemented by subclasses.
+  }
+
+  @Override
+  public void onLoadStarted(@Nullable Drawable placeholder) {
+    // Intentionally empty, this can be optionally implemented by subclasses.
+  }
+
+  @Override
+  public void onLoadFailed(@Nullable Drawable errorDrawable) {
+    // Intentionally empty, this can be optionally implemented by subclasses.
+  }
+
+  @Override
+  public final void getSize(@NonNull SizeReadyCallback cb) {
+    cb.onSizeReady(width, height);
+  }
+
+  @Override
+  public final void removeCallback(@NonNull SizeReadyCallback cb) {
+    // Do nothing, this class does not retain SizeReadyCallbacks.
+  }
+
+  @Override
+  public final void setRequest(@Nullable Request request) {
+    this.request = request;
+  }
+
+  @Nullable
+  @Override
+  public final Request getRequest() {
+    return request;
+  }
+}
diff --git a/library/src/main/java/com/bumptech/glide/request/target/CustomViewTarget.java b/library/src/main/java/com/bumptech/glide/request/target/CustomViewTarget.java
index 77f69eb4a..28aa06465 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/CustomViewTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/CustomViewTarget.java
@@ -24,12 +24,13 @@
 import java.util.List;
 
 /**
- * A base {@link Target} for loading {@link android.graphics.Bitmap}s into {@link View}s that
- * provides default implementations for most methods and can determine the size of views using a
- * {@link android.view.ViewTreeObserver.OnDrawListener}.
+ * A base {@link Target} for loading resources ({@link android.graphics.Bitmap}, {@link Drawable}
+ * etc) into {@link View}s that provides default implementations for most methods and can determine
+ * the size of views using a {@link android.view.ViewTreeObserver.OnDrawListener}.
  *
- * @param <T> The specific subclass of view wrapped by this target.
- * @param <Z> The resource type this target will receive.
+ * @param <T> The specific subclass of view wrapped by this target (e.g.
+ *          {@link android.widget.ImageView})
+ * @param <Z> The resource type this target will receive (e.g. {@link android.graphics.Bitmap}).
  */
 public abstract class CustomViewTarget<T extends View, Z> implements Target<Z> {
   private static final String TAG = "CustomViewTarget";
diff --git a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
index 107330551..9d28c0bd0 100644
--- a/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
+++ b/library/src/main/java/com/bumptech/glide/request/target/SimpleTarget.java
@@ -61,8 +61,8 @@
  * @param <Z> The type of resource that this target will receive.
  * @deprecated Use {@link CustomViewTarget} if loading the content into a view, the download API if
  *     in the background
- *     (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a a fully
- *     implemented {@link Target} for any specialized use-cases. Using BaseView is unsafe if the
+ *     (http://bumptech.github.io/glide/doc/getting-started.html#background-threads), or a
+ *     {@link CustomTarget} for any specialized use-cases. Using BaseView is unsafe if the
  *     user does not implement {@link #onLoadCleared}, resulting in recycled bitmaps being
  *     referenced from the UI and hard to root-cause crashes.
  */
diff --git a/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java b/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
index 2281d5706..34dc8de84 100644
--- a/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/GlideContextTest.java
@@ -12,8 +12,10 @@
 import com.bumptech.glide.load.engine.bitmap_recycle.LruArrayPool;
 import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
 import com.bumptech.glide.load.resource.gif.GifDrawable;
+import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.RequestOptions;
 import com.bumptech.glide.request.target.ImageViewTargetFactory;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import org.junit.Before;
@@ -41,6 +43,7 @@ public void setUp() {
         new ImageViewTargetFactory(),
         new RequestOptions(),
         transitionOptions,
+        /*defaultRequestListeners=*/ Collections.<RequestListener<Object>>emptyList(),
         mock(Engine.class),
         Log.DEBUG);
   }
diff --git a/library/test/src/test/java/com/bumptech/glide/RegistryTest.java b/library/test/src/test/java/com/bumptech/glide/RegistryTest.java
new file mode 100644
index 000000000..defe8463b
--- /dev/null
+++ b/library/test/src/test/java/com/bumptech/glide/RegistryTest.java
@@ -0,0 +1,162 @@
+package com.bumptech.glide;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import com.bumptech.glide.load.ResourceDecoder;
+import com.bumptech.glide.load.model.ModelLoaderFactory;
+import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
+import java.util.List;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+@RunWith(RobolectricTestRunner.class)
+@Config(manifest = Config.NONE)
+public class RegistryTest {
+
+  @Mock private ModelLoaderFactory<Model, Data> modelLoaderFactory;
+  @Mock private ResourceDecoder<Data, ResourceOne> resourceOneDecoder;
+  @Mock private ResourceDecoder<Data, ResourceTwo> resourceTwoDecoder;
+  @Mock private ResourceTranscoder<ResourceOne, TranscodeOne> resourceOneTranscodeOneTranscoder;
+  private Registry registry;
+
+  @Before
+  public void setUp() {
+    MockitoAnnotations.initMocks(this);
+    registry = new Registry();
+  }
+
+  @Test
+  public void getRegisteredResourceClasses_withNoResources_isEmpty() {
+    assertThat(getRegisteredResourceClasses()).isEmpty();
+  }
+
+  @Test
+  public void getRegisteredResourceClasses_withOneDataClass_noResourceClasses_isEmpty() {
+    registry.append(Model.class, Data.class, modelLoaderFactory);
+    assertThat(getRegisteredResourceClasses()).isEmpty();
+  }
+
+  @Test
+  public void getRegisteredResourceClasses_withOneDataAndResourceClass_noTranscodeClass_isEmpty() {
+    registry.append(Model.class, Data.class, modelLoaderFactory);
+    registry.append(Data.class, ResourceOne.class, resourceOneDecoder);
+    assertThat(getRegisteredResourceClasses()).isEmpty();
+  }
+
+  @Test
+  public void getRegisteredResourceClasses_withOneDataAndResourceAndTranscodeClass_isNotEmpty() {
+    registry.append(Model.class, Data.class, modelLoaderFactory);
+    registry.append(Data.class, ResourceOne.class, resourceOneDecoder);
+    registry.register(ResourceOne.class, TranscodeOne.class, resourceOneTranscodeOneTranscoder);
+    assertThat(getRegisteredResourceClasses()).containsExactly(ResourceOne.class);
+  }
+
+  @Test
+  public void getRegisteredResourceClasses_withMissingTranscodeForOneOfTwoResources_isNotEmpty() {
+    // The loop allows us to make sure that the order in which we call getRegisteredResourceClasses
+    // doesn't affect the output.
+    for (int i = 0; i < 2; i++) {
+      Registry registry = new Registry();
+      registry.append(Model.class, Data.class, modelLoaderFactory);
+
+      registry.append(Data.class, ResourceOne.class, resourceOneDecoder);
+      registry.append(Data.class, ResourceTwo.class, resourceTwoDecoder);
+
+      registry.register(ResourceOne.class, TranscodeOne.class, resourceOneTranscodeOneTranscoder);
+
+      List<Class<?>> resourceOneClasses;
+      List<Class<?>> resourceTwoClasses;
+      if (i == 0) {
+        resourceOneClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceOne.class, TranscodeOne.class);
+        resourceTwoClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceTwo.class, TranscodeOne.class);
+      } else {
+        resourceTwoClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceTwo.class, TranscodeOne.class);
+        resourceOneClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceOne.class, TranscodeOne.class);
+      }
+      // ResourceOne has a corresponding transcode class, so we should return it.
+      assertThat(resourceOneClasses).containsExactly(ResourceOne.class);
+      // ResourceTwo has no matching transcode class, so we shouldn't return it.
+      assertThat(resourceTwoClasses).isEmpty();
+    }
+  }
+
+  @Test
+  public void getRegisteredResourceClasses_withOneOfTwoMissingTranscoders_isNotEmpty() {
+    // The loop allows us to make sure that the order in which we call getRegisteredResourceClasses
+    // doesn't affect the output.
+    for (int i = 0; i < 2; i++) {
+      Registry registry = new Registry();
+      registry.append(Model.class, Data.class, modelLoaderFactory);
+
+      registry.append(Data.class, ResourceOne.class, resourceOneDecoder);
+
+      registry.register(ResourceOne.class, TranscodeOne.class, resourceOneTranscodeOneTranscoder);
+
+      List<Class<?>> transcodeOneClasses;
+      List<Class<?>> transcodeTwoClasses;
+      if (i == 0) {
+        transcodeOneClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceOne.class, TranscodeOne.class);
+        transcodeTwoClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceOne.class, TranscodeTwo.class);
+      } else {
+        transcodeTwoClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceOne.class, TranscodeTwo.class);
+        transcodeOneClasses =
+            registry.getRegisteredResourceClasses(
+                Model.class, ResourceOne.class, TranscodeOne.class);
+      }
+      // TranscodeOne has a corresponding ResourceTranscoder, so we expect to see the resource
+      // class.
+      assertThat(transcodeOneClasses).containsExactly(ResourceOne.class);
+      // TranscodeTwo has no corresponding ResourceTranscoder class, so we shouldn't return the
+      // resource class.
+      assertThat(transcodeTwoClasses).isEmpty();
+    }
+  }
+
+  private List<Class<?>> getRegisteredResourceClasses() {
+    return registry.getRegisteredResourceClasses(
+        Model.class, ResourceOne.class, TranscodeOne.class);
+  }
+
+  private static final class Model {
+    // Empty class to represent model classes for readability.
+  }
+
+  private static final class Data {
+    // Empty class to represent data classes for readability.
+  }
+
+  private static final class ResourceOne {
+    // Empty class to represent resource classes for readability.
+  }
+
+  private static final class ResourceTwo {
+    // Empty class to represent another resource class for readability.
+  }
+
+  private static final class TranscodeOne {
+    // Empty class to represent transcode classes for readability.
+  }
+
+  private static final class TranscodeTwo {
+    // Empty class to represent transcode classes for readability.
+  }
+}
diff --git a/samples/contacturi/lint.xml b/samples/contacturi/lint.xml
index ab5a637a0..bd2bae772 100644
--- a/samples/contacturi/lint.xml
+++ b/samples/contacturi/lint.xml
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <lint>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore"/>
 </lint>
diff --git a/samples/flickr/lint.xml b/samples/flickr/lint.xml
index ac292ab1a..0808ec2c6 100644
--- a/samples/flickr/lint.xml
+++ b/samples/flickr/lint.xml
@@ -4,4 +4,5 @@
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="IconMissingDensityFolder" severity="ignore"/>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore" />
 </lint>
diff --git a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java
index 1a5346d09..57c9ee173 100644
--- a/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java
+++ b/samples/flickr/src/main/java/com/bumptech/glide/samples/flickr/FlickrGlideExtension.java
@@ -3,7 +3,7 @@
 import android.support.annotation.NonNull;
 import com.bumptech.glide.annotation.GlideExtension;
 import com.bumptech.glide.annotation.GlideOption;
-import com.bumptech.glide.request.RequestOptions;
+import com.bumptech.glide.request.BaseRequestOptions;
 import com.bumptech.glide.samples.flickr.api.Api;
 
 /**
@@ -20,13 +20,13 @@ private FlickrGlideExtension() {
 
   @NonNull
   @GlideOption
-  public static RequestOptions squareThumb(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> squareThumb(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop();
   }
 
   @NonNull
   @GlideOption
-  public static RequestOptions squareMiniThumb(RequestOptions requestOptions) {
+  public static BaseRequestOptions<?> squareMiniThumb(BaseRequestOptions<?> requestOptions) {
     return requestOptions.centerCrop().override(Api.SQUARE_THUMB_SIZE);
   }
 }
diff --git a/samples/gallery/lint.xml b/samples/gallery/lint.xml
index ac292ab1a..0808ec2c6 100644
--- a/samples/gallery/lint.xml
+++ b/samples/gallery/lint.xml
@@ -4,4 +4,5 @@
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="IconMissingDensityFolder" severity="ignore"/>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore" />
 </lint>
diff --git a/samples/giphy/lint.xml b/samples/giphy/lint.xml
index 94bb2b69c..c02d95c38 100644
--- a/samples/giphy/lint.xml
+++ b/samples/giphy/lint.xml
@@ -3,4 +3,5 @@
     <!-- Not supported by all build systems -->
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore" />
 </lint>
diff --git a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
index e58c5bd0d..4f78d2d69 100644
--- a/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
+++ b/samples/giphy/src/main/java/com/bumptech/glide/samples/giphy/Api.java
@@ -3,6 +3,7 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
+import com.bumptech.glide.util.Util;
 import com.google.gson.Gson;
 import java.io.IOException;
 import java.io.InputStream;
@@ -140,11 +141,31 @@ public String toString() {
 
   /**
    * A POJO mirroring an individual GIF image returned from Giphy's api.
+   *
+   * <p>Implements equals and hashcode so that in memory caching will work when this object is used
+   * as a model for loading Glide's images.
    */
   public static final class GifResult {
     public String id;
     GifUrlSet images;
 
+    @Override
+    public int hashCode() {
+      int result = id != null ? id.hashCode() : 17;
+      result = 31 * result + (images != null ? images.hashCode() : 17);
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj instanceof GifResult) {
+        GifResult other = (GifResult) obj;
+        return Util.bothNullOrEqual(id, other.id)
+            && Util.bothNullOrEqual(images, other.images);
+      }
+      return false;
+    }
+
     @Override
     public String toString() {
       return "GifResult{" + "id='" + id + '\'' + ", images=" + images
@@ -161,6 +182,25 @@ public String toString() {
     GifImage fixed_width;
     GifImage fixed_height;
 
+    @Override
+    public int hashCode() {
+      int result = original != null ? original.hashCode() : 17;
+      result = 31 * result + (fixed_width != null ? fixed_width.hashCode() : 17);
+      result = 31 * result + (fixed_height != null ? fixed_height.hashCode() : 17);
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj instanceof GifUrlSet) {
+        GifUrlSet other = (GifUrlSet) obj;
+        return Util.bothNullOrEqual(original, other.original)
+            && Util.bothNullOrEqual(fixed_width, other.fixed_width)
+            && Util.bothNullOrEqual(fixed_height, other.fixed_height);
+      }
+      return false;
+    }
+
     @Override
     public String toString() {
       return "GifUrlSet{" + "original=" + original + ", fixed_width="
@@ -179,6 +219,24 @@ public String toString() {
     int height;
 
     @Override
+    public int hashCode() {
+      int result = url != null ? url.hashCode() : 17;
+      result = 31 * result + width;
+      result = 31 * result + height;
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (obj instanceof GifImage) {
+        GifImage other = (GifImage) obj;
+        return other.width == width
+            && other.height == height
+            && Util.bothNullOrEqual(url, other.url);
+      }
+      return false;
+    }
+
     public String toString() {
       return "GifImage{" + "url='" + url + '\'' + ", width=" + width + ", height=" + height + '}';
     }
diff --git a/samples/imgur/lint.xml b/samples/imgur/lint.xml
index ac292ab1a..0808ec2c6 100644
--- a/samples/imgur/lint.xml
+++ b/samples/imgur/lint.xml
@@ -4,4 +4,5 @@
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="IconMissingDensityFolder" severity="ignore"/>
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore" />
 </lint>
diff --git a/samples/svg/lint.xml b/samples/svg/lint.xml
index 94bb2b69c..11fca2666 100644
--- a/samples/svg/lint.xml
+++ b/samples/svg/lint.xml
@@ -3,4 +3,5 @@
     <!-- Not supported by all build systems -->
     <issue id="GradleOverrides" severity="ignore" />
     <issue id="GoogleAppIndexingWarning" severity="ignore"/>
+    <issue id="GradleDependency" severity="ignore"/>
 </lint>
