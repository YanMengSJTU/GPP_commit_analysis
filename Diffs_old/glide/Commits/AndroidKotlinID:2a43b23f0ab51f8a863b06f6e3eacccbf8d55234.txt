diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
index 28cd3a489..57c48916e 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/load/resource/gif/GifDrawableTest.java
@@ -1,34 +1,27 @@
 package com.bumptech.glide.load.resource.gif;
 
-import static android.support.test.InstrumentationRegistry.getTargetContext;
 import static com.google.common.truth.Truth.assertThat;
-import static org.junit.Assert.fail;
-import static org.junit.Assume.assumeTrue;
 
+import android.Manifest.permission;
 import android.content.Context;
-import android.graphics.drawable.Drawable;
 import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.Nullable;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.rule.GrantPermissionRule;
 import android.support.test.runner.AndroidJUnit4;
 import android.view.View;
 import android.view.WindowManager;
 import android.view.WindowManager.LayoutParams;
 import android.widget.ImageView;
-import com.bumptech.glide.load.DataSource;
-import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.resource.gif.GifDrawable.GifState;
 import com.bumptech.glide.load.resource.gif.GifFrameLoader.OnEveryFrameListener;
-import com.bumptech.glide.request.RequestListener;
 import com.bumptech.glide.request.target.Target;
+import com.bumptech.glide.test.ConcurrencyHelper;
 import com.bumptech.glide.test.GlideApp;
 import com.bumptech.glide.test.ResourceIds;
 import com.bumptech.glide.test.TearDownGlide;
 import com.bumptech.glide.util.Preconditions;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -37,18 +30,120 @@
 
 @RunWith(AndroidJUnit4.class)
 public class GifDrawableTest {
-  @Rule public TestName testName = new TestName();
-  @Rule public TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public final TestName testName = new TestName();
+  @Rule public final TearDownGlide tearDownGlide = new TearDownGlide();
+  @Rule public final GrantPermissionRule grantPermissionRule;
+  private final ConcurrencyHelper concurrencyHelper = new ConcurrencyHelper();
+
+  {
+    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) {
+      grantPermissionRule = GrantPermissionRule.grant(permission.SYSTEM_ALERT_WINDOW);
+    } else {
+      grantPermissionRule = GrantPermissionRule.grant();
+    }
+  }
+
   private Context context;
-  private Handler mainHandler;
 
   @Before
   public void setUp() {
-    // Required for us to add a View to a Window.
-    assumeTrue(Build.VERSION.SDK_INT < Build.VERSION_CODES.M);
+    context = InstrumentationRegistry.getTargetContext();
+  }
+
+  @Test
+  public void loadGif_withInterlacedTransparentGif_sizeOriginal_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.interlaced_transparent_gif)
+                .submit());
+    assertThat(gifDrawable).isNotNull();
+  }
 
-    context = getTargetContext();
-    mainHandler = new Handler(Looper.getMainLooper());
+  @Test
+  public void loadGif_withInterlacedTransparentGif_downsampled_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.interlaced_transparent_gif)
+                .submit(10, 10));
+    assertThat(gifDrawable).isNotNull();
+  }
+
+  @Test
+  public void loadGif_withTransparentGif_sizeOriginal_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.transparent_gif)
+                .submit());
+    assertThat(gifDrawable).isNotNull();
+  }
+
+  @Test
+  public void loadGif_withTransparentGif_downsampled_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.transparent_gif)
+                .submit(10, 10));
+    assertThat(gifDrawable).isNotNull();
+  }
+
+  @Test
+  public void loadGif_withOpaqueGif_sizeOriginal_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.opaque_gif)
+                .submit());
+    assertThat(gifDrawable).isNotNull();
+  }
+
+  @Test
+  public void loadGif_withOpaqueGif_downsampled_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.opaque_gif)
+                .submit(10, 10));
+    assertThat(gifDrawable).isNotNull();
+  }
+
+  @Test
+  public void loadGif_withOpaqueInterlacedGif_sizeOriginal_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+              .load(ResourceIds.raw.opaque_interlaced_gif)
+              .submit());
+    assertThat(gifDrawable).isNotNull();
+  }
+
+  @Test
+  public void loadGif_withOpaqueInterlacedGif_downsampled_succeeds()
+      throws ExecutionException, InterruptedException {
+    GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.opaque_interlaced_gif)
+                .submit(10, 10));
+    assertThat(gifDrawable).isNotNull();
   }
 
   @Test
@@ -56,14 +151,16 @@ public void loadGif_intoImageView_afterStop_restartsGif()
       throws ExecutionException, InterruptedException {
     // Mimic the state the Drawable can get into if it was loaded into a View previously and stopped
     // so that it ended up with a pending frame that finished after the stop call.
-    final GifDrawable gifDrawable = GlideApp.with(context)
-        .asGif()
-        .load(ResourceIds.raw.dl_world_anim)
-        .submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)
-        .get();
+    final GifDrawable gifDrawable =
+        concurrencyHelper.get(
+            GlideApp.with(context)
+                .asGif()
+                .load(ResourceIds.raw.dl_world_anim)
+                .submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL));
+
     final CountDownLatch waitForGifFrame = new CountDownLatch(1);
     // Starting/Stopping loads in GIFs must happen on the main thread.
-    mainHandler.post(
+    concurrencyHelper.runOnMainThread(
         new Runnable() {
           @Override
           public void run() {
@@ -80,81 +177,44 @@ public void onFrameReady() {
             gifDrawable.stop();
           }
         });
-    waitOrThrow(waitForGifFrame);
+    ConcurrencyHelper.waitOnLatch(waitForGifFrame);
 
     // Load the Drawable with the pending frame into a new View and make sure it ends up in the
     // running state.
     final ImageView imageView = new ImageView(context);
-    final WaitForLoad<Drawable> waitForLoad = new WaitForLoad<>();
-    // Starting loads into Views must happen on the main thread.
-    mainHandler
-        .post(new Runnable() {
+    concurrencyHelper.runOnMainThread(
+        new Runnable() {
           @Override
           public void run() {
             addViewToWindow(imageView);
-            GlideApp.with(context)
-                .load(gifDrawable)
-                .listener(waitForLoad)
-                .override(Target.SIZE_ORIGINAL)
-                .into(imageView);
           }
         });
-    waitForLoad.await();
+
+    concurrencyHelper.loadOnMainThread(
+        GlideApp.with(context)
+            .load(gifDrawable)
+            .override(Target.SIZE_ORIGINAL),
+        imageView);
 
     GifDrawable drawableFromView = (GifDrawable) imageView.getDrawable();
     assertThat(drawableFromView.isRunning()).isTrue();
 
-    gifDrawable.stop();
     drawableFromView.stop();
+    gifDrawable.stop();
   }
 
-  // LayoutParams.TYPE_SYSTEM_ALERT.
   @SuppressWarnings("deprecation")
   private void addViewToWindow(View view) {
-    final WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
+    WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
     layoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
     layoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
-    layoutParams.type = LayoutParams.TYPE_SYSTEM_ALERT;
-    final WindowManager windowManager =
+    layoutParams.type =
+        Build.VERSION.SDK_INT >= Build.VERSION_CODES.O
+            ? LayoutParams.TYPE_APPLICATION_OVERLAY
+            : Build.VERSION.SDK_INT == Build.VERSION_CODES.M
+                ? LayoutParams.TYPE_TOAST : LayoutParams.TYPE_SYSTEM_ALERT;
+    WindowManager windowManager =
         (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
     Preconditions.checkNotNull(windowManager).addView(view, layoutParams);
   }
-
-  private static void waitOrThrow(CountDownLatch latch) {
-    try {
-      if (!latch.await(5, TimeUnit.SECONDS)) {
-        fail("Failed to reach expected condition in the alloted time.");
-      }
-    } catch (InterruptedException e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  private final class WaitForLoad<T> implements RequestListener<T> {
-    private final CountDownLatch countDownLatch = new CountDownLatch(1);
-
-    void await() {
-      waitOrThrow(countDownLatch);
-    }
-
-    @Override
-    public boolean onLoadFailed(@Nullable GlideException e, Object model,
-        Target<T> target,
-        boolean isFirstResource) {
-      throw new RuntimeException(e);
-    }
-
-    @Override
-    public boolean onResourceReady(T resource, Object model, Target<T> target,
-        DataSource dataSource,
-        boolean isFirstResource) {
-      mainHandler.post(new Runnable() {
-        @Override
-        public void run() {
-          countDownLatch.countDown();
-        }
-      });
-      return false;
-    }
-  }
 }
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
index c95bc6a4e..940a913ae 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ConcurrencyHelper.java
@@ -276,7 +276,7 @@ public void run() {
     waitOnLatch(latch);
   }
 
-  static void waitOnLatch(final CountDownLatch latch) {
+  public static void waitOnLatch(final CountDownLatch latch) {
     wait(new Waiter() {
       @Override
       public boolean await(long timeout, TimeUnit timeUnit) throws InterruptedException {
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
index 9aabb9867..292f0e7b4 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/ResourceIds.java
@@ -16,6 +16,10 @@ private ResourceIds() {
   public interface raw {
     int dl_world_anim = getResourceId("raw", "dl_world_anim");
     int canonical = getResourceId("raw", "canonical");
+    int interlaced_transparent_gif = getResourceId("raw", "interlaced_transparent_gif");
+    int transparent_gif = getResourceId("raw", "transparent_gif");
+    int opaque_gif = getResourceId("raw", "opaque_gif");
+    int opaque_interlaced_gif = getResourceId("raw", "opaque_interlaced_gif");
   }
 
   public interface drawable {
diff --git a/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
index 529933d51..a99644ddb 100644
--- a/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
+++ b/instrumentation/src/androidTest/java/com/bumptech/glide/test/TearDownGlide.java
@@ -1,6 +1,8 @@
 package com.bumptech.glide.test;
 
+import android.support.test.InstrumentationRegistry;
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.RequestManager;
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
@@ -18,6 +20,15 @@ public void evaluate() throws Throwable {
         try {
           base.evaluate();
         } finally {
+          new ConcurrencyHelper().runOnMainThread(new Runnable() {
+            @Override
+            public void run() {
+              RequestManager requestManager =
+                  Glide.with(InstrumentationRegistry.getTargetContext());
+              requestManager.onStop();
+              requestManager.onDestroy();
+            }
+          });
           Glide.tearDown();
         }
       }
diff --git a/instrumentation/src/main/res/raw/interlaced_transparent_gif.gif b/instrumentation/src/main/res/raw/interlaced_transparent_gif.gif
new file mode 100644
index 000000000..283e0fb16
Binary files /dev/null and b/instrumentation/src/main/res/raw/interlaced_transparent_gif.gif differ
diff --git a/instrumentation/src/main/res/raw/opaque_gif.gif b/instrumentation/src/main/res/raw/opaque_gif.gif
new file mode 100644
index 000000000..3b50db910
Binary files /dev/null and b/instrumentation/src/main/res/raw/opaque_gif.gif differ
diff --git a/instrumentation/src/main/res/raw/opaque_interlaced_gif.gif b/instrumentation/src/main/res/raw/opaque_interlaced_gif.gif
new file mode 100644
index 000000000..4ebf12daf
Binary files /dev/null and b/instrumentation/src/main/res/raw/opaque_interlaced_gif.gif differ
diff --git a/instrumentation/src/main/res/raw/transparent_gif.gif b/instrumentation/src/main/res/raw/transparent_gif.gif
new file mode 100644
index 000000000..88c7097e7
Binary files /dev/null and b/instrumentation/src/main/res/raw/transparent_gif.gif differ
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index 42abbb23c..be50104bc 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -200,6 +200,9 @@ public static synchronized void init(Context context, GlideBuilder builder) {
   @VisibleForTesting
   public static synchronized void tearDown() {
     if (glide != null) {
+      glide.getContext()
+          .getApplicationContext()
+          .unregisterComponentCallbacks(glide);
       glide.engine.shutdown();
     }
     glide = null;
diff --git a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
index d0356882b..7ba271baa 100644
--- a/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
+++ b/third_party/gif_decoder/src/main/java/com/bumptech/glide/gifdecoder/StandardGifDecoder.java
@@ -602,8 +602,7 @@ private void copyCopyIntoScratchRobust(GifFrame currentFrame) {
             averageColor = act[currentColorIndex];
             if (averageColor != COLOR_TRANSPARENT_BLACK) {
               dest[dx] = averageColor;
-            } else if (
-                isFirstFrameTransparent == null && isFirstFrame && !isFirstFrameTransparent) {
+            } else if (isFirstFrame && isFirstFrameTransparent == null) {
               isFirstFrameTransparent = true;
             }
             sx += sampleSize;
@@ -619,7 +618,7 @@ private void copyCopyIntoScratchRobust(GifFrame currentFrame) {
             averageColor = averageColorsNear(sx, maxPositionInSource, currentFrame.iw);
             if (averageColor != COLOR_TRANSPARENT_BLACK) {
               dest[dx] = averageColor;
-            } else if (isFirstFrame && !isFirstFrameTransparent) {
+            } else if (isFirstFrame && isFirstFrameTransparent == null) {
               isFirstFrameTransparent = true;
             }
             sx += sampleSize;
@@ -635,7 +634,6 @@ private void copyCopyIntoScratchRobust(GifFrame currentFrame) {
     }
   }
 
-
   @ColorInt
   private int averageColorsNear(int positionInMainPixels, int maxPositionInMainPixels,
       int currentFrameIw) {
