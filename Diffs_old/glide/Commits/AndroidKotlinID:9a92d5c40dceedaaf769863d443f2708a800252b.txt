diff --git a/.gitignore b/.gitignore
index fc8c263ba..e4715bcbf 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,6 +8,7 @@ proguard-project.txt
 **/.gradle
 **/.settings
 **/build
+**/jacoco.exec
 
 # gh-pages
 doc/**
diff --git a/.travis.yml b/.travis.yml
index a58bf294a..1c57d4fc8 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,7 +7,7 @@ android:
   - tools
   - platform-tools
   - tools
-  - build-tools-26.0.1
+  - build-tools-26.0.2
   - android-26
 
 licenses:
diff --git a/annotation/compiler/test/build.gradle b/annotation/compiler/test/build.gradle
index b27a956cc..26c47d534 100644
--- a/annotation/compiler/test/build.gradle
+++ b/annotation/compiler/test/build.gradle
@@ -11,19 +11,19 @@ sourceSets {
 // easier to parse as a separate module given the existing complexity here and in the compiler
 dependencies {
     // build.gradle file.
-    testCompile project(':glide')
-    testCompile project(':annotation:compiler')
-    testCompile 'com.squareup:javapoet:1.9.0'
-    testCompile 'com.google.auto.service:auto-service:1.0-rc3'
-    testCompile 'com.google.code.findbugs:jsr305:3.0.1'
-    testCompile 'com.google.testing.compile:compile-testing:0.10'
+    testImplementation project(':glide')
+    testImplementation project(':annotation:compiler')
+    testImplementation 'com.squareup:javapoet:1.9.0'
+    testImplementation 'com.google.auto.service:auto-service:1.0-rc3'
+    testImplementation 'com.google.code.findbugs:jsr305:3.0.1'
+    testImplementation 'com.google.testing.compile:compile-testing:0.10'
     // Use a stupidly old version of the Android classes jar. This works because we just need to get
     // our generated classes to compile and our generated classes tend to use simple and stable
     // Android APIs. If that changes, we'll need to find an alternative.
-    testCompile 'com.google.android:android:4.1.1.4'
+    testImplementation 'com.google.android:android:4.1.1.4'
     // Use a stupidly old version of v4 because it's a jar. The newer support v4 packages are aars,
     // which we can't depend on in a standard Java test. Since our usage of v4 is pretty simple,
     // hopefully this will continue to work going forward.
-    testCompile 'com.google.android:support-v4:r6'
-    testCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    testImplementation 'com.google.android:support-v4:r6'
+    testImplementation "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
diff --git a/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
index 7c0db39d6..58197a802 100644
--- a/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
+++ b/annotation/src/main/java/com/bumptech/glide/annotation/GlideOption.java
@@ -28,11 +28,11 @@
  *
  * <pre>
  * {@code
- * @GlideExtenion
+ * {@link @}GlideExtension
  * public class MyExtension {
  *   private MyExtension() {}
  *
- *   @GlideOption
+ *   {@literal @}GlideOption
  *   public static RequestOptions myOption(RequestOptions options) {
  *     return options
  *         .optionOne()
@@ -51,12 +51,12 @@
  *
  * <pre>
  * {@code
- * @GlideExtenion
+ * {@literal @}GlideExtension
  * public class MyExtension {
  *   private MyExtension() {}
  *
  *   // Deprecated! Use the new style of GlideOption extensions instead.
- *   @GlideOption
+ *   {@literal @}GlideOption
  *   public static void myOption(RequestOptions options) {
  *     options
  *         .optionOne()
diff --git a/build.gradle b/build.gradle
index a0f6158a8..54d487860 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,6 +1,7 @@
 buildscript {
     repositories {
         jcenter()
+        google()
         maven {
             url "https://oss.sonatype.org/content/repositories/snapshots"
         }
diff --git a/glide/build.gradle b/glide/build.gradle
index 3c03c394f..bb7a98b70 100644
--- a/glide/build.gradle
+++ b/glide/build.gradle
@@ -82,8 +82,11 @@ static def getAndroidLibraryVariants(projects, variantName) {
 }
 
 def getSourceFilesForVariantJar(variantName) {
-    getAndroidLibraryVariantsForJar(variantName).collect { it.getJavaCompiler().source } +
-            getInternalJavaProjectsForJar().collect { it.sourceSets.main.allJava }
+    getAndroidLibraryVariantsForJar(variantName).collect {
+        it.getJavaCompiler().source.findAll {
+            return !it.getName().equals("R.java") && !it.getName().equals("BuildConfig.java")
+        }
+    } + getInternalJavaProjectsForJar().collect { it.sourceSets.main.allJava }
 }
 
 def getSourceFilesForVariantJavadoc(variantName) {
@@ -109,33 +112,34 @@ project.archivesBaseName = "${POM_ARTIFACT_ID}-${VERSION_NAME}"
         source = getSourceFilesForVariantJar(variantName)
         source += getSourceFilesForVariantJavadoc(variantName)
 
-        classpath = project.files(
-                getAndroidJar(),
-                getAndroidLibraryVariantsForJar(variantName).collect { LibraryVariant lib ->
-                    lib.getJavaCompiler().classpath.files
-                },
-                getAndroidLibraryVariantsForJavadoc(variantName).collect { LibraryVariant lib ->
-                    lib.getJavaCompiler().classpath.files
-                },
-                getInternalJavaProjectsForJavadoc().collect { Project project ->
-                    project.sourceSets.main.compileClasspath.files
-                },
-                getInternalJavaProjectsForJar().collect { Project project ->
-                    project.sourceSets.main.compileClasspath.files
-                },
-                // Finds dependencies of Android packages that would otherwise be ignored (Volley in
-                // particular)
-                getInternalAndroidProjectsForJavadoc().collect { Project project ->
-                    project.file('build/intermediates/classes/release')
-                }
-        )
+        doFirst {
+            it.classpath =
+                    project.files(
+                            getAndroidJar(),
+                            getAndroidLibraryVariantsForJar(variantName).collect {
+                                LibraryVariant lib -> lib.getJavaCompiler().classpath.files
+                            },
+                            getAndroidLibraryVariantsForJavadoc(variantName).collect {
+                                LibraryVariant lib -> lib.getJavaCompiler().classpath.files
+                            },
+                            getInternalJavaProjectsForJavadoc().collect { Project project ->
+                                project.sourceSets.main.compileClasspath.files
+                            },
+                            getInternalJavaProjectsForJar().collect { Project project ->
+                                project.sourceSets.main.compileClasspath.files
+                            },
+                            // Finds dependencies of Android packages that would otherwise be
+                            // ignored (Volley in particular)
+                            getInternalAndroidProjectsForJavadoc().collect { Project project ->
+                                project.file('build/intermediates/classes/release')
+                            }
+            )
+        }
 
         options {
             links("http://docs.oracle.com/javase/7/docs/api/")
             links("https://square.github.io/okhttp/3.x/okhttp/")
             links("https://square.github.io/okhttp/2.x/okhttp/")
-            // TODO: Ideally this would point to something hosted by Android.
-            links("http://afzaln.com/volley/")
             linksOffline("http://d.android.com/reference",
                     "${getAndroidSdkDirectory()}/docs/reference")
         }
@@ -161,15 +165,17 @@ jar {
                 variant.getJavaCompiler().destinationDir
             }
     )
+    from files(getInternalJavaProjectsForJar().collect { it.sourceSets.main.output })
     exclude "**/R.class"
     exclude "**/BuildConfig.class"
-    from files(getInternalJavaProjectsForJar().collect { it.sourceSets.main.output })
+    exclude "**/R\$*.class"
+    exclude "android/**"
 }
 
 (getInternalAndroidProjectsForJar() + getInternalAndroidProjectsForJavadoc()).each {
     project ->
-        releaseJavadoc.dependsOn(project.tasks.compileDebugJavaWithJavac)
-        jar.dependsOn(project.tasks.compileDebugJavaWithJavac)
+        releaseJavadoc.dependsOn(project.tasks.compileReleaseSources)
+        jar.dependsOn(project.tasks.compileReleaseSources)
 }
 
 (getInternalJavaProjectsForJar() + getInternalJavaProjectsForJavadoc()).each {
diff --git a/gradle.properties b/gradle.properties
index e65ffa385..3f39fc7a0 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -15,10 +15,10 @@ POM_SCM_DEV_CONNECTION=scm:git@github.com:bumptech/glide.git
 POM_DEVELOPER_ID=sjudd
 POM_DEVELOPER_NAME=Sam Judd
 POM_DEVELOPER_EMAIL=judds@google.com
-ANDROID_SUPPORT_VERSION=26.0.2
+ANDROID_SUPPORT_VERSION=27.0.1
 VOLLEY_VERSION=1.0.0
 OK_HTTP_VERSION=3.9.0
-ANDROID_GRADLE_VERSION=2.3.3
+ANDROID_GRADLE_VERSION=3.0.0
 DAGGER_VERSION=2.11
 
 COVERALLS_GRADLE_VERSION=2.4.0
@@ -35,7 +35,7 @@ FINDBUGS_VERSION=3.0.0
 JACOCO_VERSION=0.7.1.201405082137
 
 COMPILE_SDK_VERSION=26
-BUILD_TOOLS_VERSION=26.0.1
+BUILD_TOOLS_VERSION=26.0.2
 TARGET_SDK_VERSION=26
 MIN_SDK_VERSION=14
 
diff --git a/instrumentation/build.gradle b/instrumentation/build.gradle
index 354630173..08ab0431b 100644
--- a/instrumentation/build.gradle
+++ b/instrumentation/build.gradle
@@ -7,19 +7,25 @@ apply plugin: 'com.android.application'
 
 dependencies {
     // Appcompat is required to ensure that Glide's runtime detection the v7 support Drawable
-    // loading classes functions. It's not clear why androidTestCompile isn't sufficient, but for
+    // loading classes functions. It's not clear why androidTestImplementation isn't sufficient, but for
     // whatever reason, compile is the only dependency that seems to work.
-    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation ("com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}") {
+        exclude group: 'android.arch.core'
+    }
     annotationProcessor project(":annotation:compiler")
-    compile project(":library")
+    implementation project(":library")
+
+    androidTestImplementation project(':library')
+    androidTestImplementation "org.mockito:mockito-android:${MOCKITO_ANDROID_VERSION}"
+    androidTestImplementation "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    androidTestImplementation "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    androidTestImplementation 'com.android.support.test:runner:1.0.1'
+    androidTestImplementation 'com.android.support.test:rules:1.0.1'
+    androidTestImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    // Not totally clear why this is required, but it seems to be missing when tests are run on
+    // 4.1.2 and 4.2.0 emulators.
+    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
 
-    androidTestCompile project(':library')
-    androidTestCompile "org.mockito:mockito-android:${MOCKITO_ANDROID_VERSION}"
-    androidTestCompile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
-    androidTestCompile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
-    androidTestCompile 'com.android.support.test:runner:0.5'
-    androidTestCompile 'com.android.support.test:rules:0.5'
-    androidTestCompile "com.google.truth:truth:${TRUTH_VERSION}"
 }
 
 android {
diff --git a/integration/gifencoder/build.gradle b/integration/gifencoder/build.gradle
index a5defa841..966d40965 100644
--- a/integration/gifencoder/build.gradle
+++ b/integration/gifencoder/build.gradle
@@ -1,14 +1,14 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile project(':library')
-
-    testCompile project(":testutil")
-    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    testCompile "junit:junit:${JUNIT_VERSION}"
-    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
-    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
+    implementation project(':library')
+
+    testImplementation project(":testutil")
+    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    testImplementation "junit:junit:${JUNIT_VERSION}"
+    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/okhttp/build.gradle b/integration/okhttp/build.gradle
index b30b8fb59..5482f12c9 100644
--- a/integration/okhttp/build.gradle
+++ b/integration/okhttp/build.gradle
@@ -1,11 +1,11 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile project(':library')
+    implementation project(':library')
     annotationProcessor project(':annotation:compiler')
 
-    compile "com.squareup.okhttp:okhttp:2.7.1"
-    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    api "com.squareup.okhttp:okhttp:2.7.1"
+    api "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/okhttp3/build.gradle b/integration/okhttp3/build.gradle
index 5290c6a42..5cf1c2e81 100644
--- a/integration/okhttp3/build.gradle
+++ b/integration/okhttp3/build.gradle
@@ -1,11 +1,11 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile project(':library')
+    implementation project(':library')
     annotationProcessor project(':annotation:compiler')
 
-    compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
-    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    api "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
+    api "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/recyclerview/build.gradle b/integration/recyclerview/build.gradle
index 24eb09e46..8031d9730 100644
--- a/integration/recyclerview/build.gradle
+++ b/integration/recyclerview/build.gradle
@@ -1,9 +1,9 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile project(':library')
-    provided "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
-    provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    implementation project(':library')
+    compileOnly "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    compileOnly "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/integration/volley/build.gradle b/integration/volley/build.gradle
index b4c5a53ff..b396ef394 100644
--- a/integration/volley/build.gradle
+++ b/integration/volley/build.gradle
@@ -1,17 +1,17 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile project(':library')
-    compile "com.android.volley:volley:${VOLLEY_VERSION}"
-    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    implementation project(':library')
+    api "com.android.volley:volley:${VOLLEY_VERSION}"
+    api "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 
-    testCompile project(":testutil")
-    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    testCompile "junit:junit:${JUNIT_VERSION}"
-    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
-    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    testCompile "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
+    testImplementation project(":testutil")
+    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    testImplementation "junit:junit:${JUNIT_VERSION}"
+    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
 }
 
 android {
diff --git a/library/build.gradle b/library/build.gradle
index d69a6f3ef..e9ff851da 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -6,19 +6,19 @@ apply plugin: 'jacoco'
 apply plugin: 'com.github.kt3k.coveralls'
 
 dependencies {
-    compile project(':third_party:gif_decoder')
-    compile project(':third_party:disklrucache')
-    compile project(':annotation')
-    provided "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
-    provided "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
-    testCompile project(':testutil')
-    testCompile 'com.google.guava:guava-testlib:18.0'
-    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    testCompile "junit:junit:${JUNIT_VERSION}"
-    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
-    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
-    testCompile "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
-    testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
+    api project(':third_party:gif_decoder')
+    api project(':third_party:disklrucache')
+    api project(':annotation')
+    api "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    compileOnly "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    testImplementation project(':testutil')
+    testImplementation 'com.google.guava:guava-testlib:18.0'
+    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    testImplementation "junit:junit:${JUNIT_VERSION}"
+    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
+    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
 }
 
 android.testOptions.unitTests.all { Test testTask ->
@@ -72,6 +72,13 @@ afterEvaluate {
         source android.sourceSets.main.java.srcDirs
         classpath = project.configurations.compile
         classpath += files(android.bootClasspath)
+        doFirst {
+            it.classpath +=
+                    files(project.android.libraryVariants.collect {
+                        it.javaCompile.classpath.files
+                    })
+        }
+
 
         effort = 'max'
 
diff --git a/library/lint.xml b/library/lint.xml
index 869eb6598..c6cf01b20 100644
--- a/library/lint.xml
+++ b/library/lint.xml
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <lint>
     <issue id="AllowBackup" severity="ignore"/>
-    <!-- TODO: Fix this after RequestManager#get(View) uses official APIs -->
-    <issue id="RestrictedApi" severity="ignore"/>
+    <issue id="ExifInterface" severity="ignore"/>
 </lint>
diff --git a/library/src/main/java/com/bumptech/glide/TransitionOptions.java b/library/src/main/java/com/bumptech/glide/TransitionOptions.java
index 7768f6fcc..42e25115a 100644
--- a/library/src/main/java/com/bumptech/glide/TransitionOptions.java
+++ b/library/src/main/java/com/bumptech/glide/TransitionOptions.java
@@ -53,6 +53,13 @@ public final CHILD transition(ViewPropertyTransition.Animator animator) {
     return transition(new ViewPropertyAnimationFactory<TranscodeType>(animator));
   }
 
+  /**
+   * Uses the given {@link TransitionFactory} to build a
+   * {@link com.bumptech.glide.request.transition.Transition} for each request started with these
+   * {@code TransitionOptions}.
+   *
+   * @return This request builder.
+   */
   public final CHILD transition(TransitionFactory<? super TranscodeType> transitionFactory) {
     this.transitionFactory = Preconditions.checkNotNull(transitionFactory);
     return self();
diff --git a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
index 48d06dc15..2f90275c7 100644
--- a/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
+++ b/library/src/main/java/com/bumptech/glide/load/resource/drawable/DrawableDecoderCompat.java
@@ -20,7 +20,7 @@ private DrawableDecoderCompat() {
   }
 
   /**
-   * @see #getDrawable(Context, int, Theme)
+   * See {@code getDrawable(Context, int, Theme)}.
    */
   public static Drawable getDrawable(Context context, @DrawableRes int id) {
     return getDrawable(context, id, /*theme=*/ null);
@@ -42,6 +42,9 @@ public static Drawable getDrawable(Context context, @DrawableRes int id, @Nullab
       }
     } catch (NoClassDefFoundError error) {
       shouldCallAppCompatResources = false;
+    } catch (Resources.NotFoundException e) {
+      // Ignored, this can be thrown when drawable compat attempts to decode a canary resource. If
+      // that decode attempt fails, we still want to try with the v4 ResourcesCompat below.
     }
 
     return loadDrawableV4(context, id, theme != null ? theme : context.getTheme());
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
index c4227a0cc..7df0a942a 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapDrawableTransformationTest.java
@@ -55,7 +55,7 @@ public void setUp() {
     BitmapDrawable drawableToTransform = new BitmapDrawable(bitmapToTransform);
 
     context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     when(drawableResourceToTransform.get()).thenReturn(drawableToTransform);
     transformation = new BitmapDrawableTransformation(wrapped);
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
index d7d22f0c3..8c024b5b5 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/BitmapTransformationTest.java
@@ -38,7 +38,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     context = RuntimeEnvironment.application;
 
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
   }
 
   @After
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
index a421660e0..684b9bf87 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterCropTest.java
@@ -57,7 +57,7 @@ public void setUp() {
     when(pool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
         .thenAnswer(new Util.CreateBitmap());
     context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(pool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(pool));
 
     centerCrop = new CenterCrop();
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
index ebb4129a8..507871700 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CenterInsideTest.java
@@ -57,7 +57,7 @@ public void setUp() {
 
     context = RuntimeEnvironment.application;
     BitmapPool pool = new BitmapPoolAdapter();
-    Glide.init(new GlideBuilder().setBitmapPool(pool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(pool));
 
     centerInside = new CenterInside();
   }
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
index 740472103..e64b9e2be 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/CircleCropTest.java
@@ -38,7 +38,7 @@ public void setup() {
     when(bitmapPool.get(anyInt(), anyInt(), any(Bitmap.Config.class)))
         .thenAnswer(new Util.CreateBitmap());
     Context context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     circleCrop = new CircleCrop();
   }
 
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
index f0a39f65e..fccc93b6a 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/DrawableTransformationTest.java
@@ -49,9 +49,7 @@ public void setUp() {
     transformation = new DrawableTransformation(bitmapTransformation, /*isRequired=*/ true);
     context = RuntimeEnvironment.application;
     bitmapPool = new BitmapPoolAdapter();
-    Glide.init(new GlideBuilder()
-        .setBitmapPool(bitmapPool)
-        .build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
   }
 
   @After
@@ -102,7 +100,7 @@ public void transform_withBitmapDrawable_andFunctionalBitmapTransformation_doesN
   public void transform_withColorDrawable_andUnitBitmapTransformation_recycles() {
     bitmapPool = mock(BitmapPool.class);
     Glide.tearDown();
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     when(
         bitmapTransformation
             .transform(
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
index 65b073205..329268a9c 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/bitmap/FitCenterTest.java
@@ -56,7 +56,7 @@ public void setUp() {
 
     BitmapPool pool = new BitmapPoolAdapter();
     context = RuntimeEnvironment.application;
-    Glide.init(new GlideBuilder().setBitmapPool(pool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(pool));
 
 
     fitCenter = new FitCenter();
diff --git a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
index f73dc91a5..cba9aad12 100644
--- a/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/resource/gif/GifDrawableTransformationTest.java
@@ -46,7 +46,7 @@ public void setUp() {
     MockitoAnnotations.initMocks(this);
     context = RuntimeEnvironment.application;
 
-    Glide.init(new GlideBuilder().setBitmapPool(bitmapPool).build(context));
+    Glide.init(context, new GlideBuilder().setBitmapPool(bitmapPool));
     transformation = new GifDrawableTransformation(wrapped);
   }
 
diff --git a/samples/contacturi/build.gradle b/samples/contacturi/build.gradle
index e8753dd15..6ee0639ea 100644
--- a/samples/contacturi/build.gradle
+++ b/samples/contacturi/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    compile project(':library')
-    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation project(':library')
+    implementation "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 }
 
diff --git a/samples/flickr/build.gradle b/samples/flickr/build.gradle
index 73b2b4e01..425d0fdcb 100644
--- a/samples/flickr/build.gradle
+++ b/samples/flickr/build.gradle
@@ -1,15 +1,15 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    compile project(':library')
-    compile(project(':integration:recyclerview')) {
+    implementation project(':library')
+    implementation(project(':integration:recyclerview')) {
         transitive = false
     }
     annotationProcessor project(':annotation:compiler')
 
-    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.android.volley:volley:${VOLLEY_VERSION}"
-    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.volley:volley:${VOLLEY_VERSION}"
+    implementation "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/samples/gallery/build.gradle b/samples/gallery/build.gradle
index bc2e3fde3..d368136a9 100644
--- a/samples/gallery/build.gradle
+++ b/samples/gallery/build.gradle
@@ -1,12 +1,12 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    compile project(':library')
-    compile(project(':integration:recyclerview')) {
+    implementation project(':library')
+    implementation(project(':integration:recyclerview')) {
         transitive = false
     }
-    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 }
 
diff --git a/samples/gallery/src/main/res/layout/main_activity.xml b/samples/gallery/src/main/res/layout/main_activity.xml
index 8a31cf241..26fd8b6a8 100644
--- a/samples/gallery/src/main/res/layout/main_activity.xml
+++ b/samples/gallery/src/main/res/layout/main_activity.xml
@@ -1,7 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <FrameLayout
   xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:tools="http://schemas.android.com/tools"
+  tools:ignore="MergeRootFrame"
   android:id="@+id/fragment_container"
   android:layout_width="match_parent"
-  android:layout_height="match_parent">
-</FrameLayout>
+  android:layout_height="match_parent" />
diff --git a/samples/giphy/build.gradle b/samples/giphy/build.gradle
index 9512035e5..fc6b8b094 100644
--- a/samples/giphy/build.gradle
+++ b/samples/giphy/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    compile project(':library')
-    compile(project(':integration:recyclerview')) {
+    implementation project(':library')
+    implementation(project(':integration:recyclerview')) {
         transitive = false
     }
-    compile 'com.google.code.gson:gson:2.8.0'
-    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    implementation 'com.google.code.gson:gson:2.8.0'
+    implementation "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
     annotationProcessor project(':annotation:compiler')
 }
 
diff --git a/samples/imgur/build.gradle b/samples/imgur/build.gradle
index df3acd658..e1e3a27e0 100644
--- a/samples/imgur/build.gradle
+++ b/samples/imgur/build.gradle
@@ -27,26 +27,28 @@ android {
 }
 
 dependencies {
-    compile project(':library')
+    implementation project(':library')
     annotationProcessor project(':annotation:compiler')
 
-    compile "com.google.dagger:dagger:${DAGGER_VERSION}"
+    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
     annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
-    compile "com.google.dagger:dagger-android:${DAGGER_VERSION}"
-    compile "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
+    implementation "com.google.dagger:dagger-android:${DAGGER_VERSION}"
+    implementation ("com.google.dagger:dagger-android-support:${DAGGER_VERSION}") {
+        exclude group: "com.android.support"
+    }
     annotationProcessor "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
 
-    compile "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
-    compile 'com.squareup.retrofit2:retrofit:2.2.0'
-    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
-    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
+    implementation "com.squareup.okhttp3:okhttp:${OK_HTTP_VERSION}"
+    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
+    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
+    implementation 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
 
-    compile 'io.reactivex:rxandroid:1.2.1'
-    compile 'io.reactivex:rxjava:1.2.9'
+    implementation 'io.reactivex:rxandroid:1.2.1'
+    implementation 'io.reactivex:rxjava:1.2.9'
 
-    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_VERSION}"
-    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:cardview-v7:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
 }
 
 task run(type: Exec, dependsOn: 'installDebug') {
diff --git a/samples/svg/build.gradle b/samples/svg/build.gradle
index 433c9c4d5..516e0b0a5 100644
--- a/samples/svg/build.gradle
+++ b/samples/svg/build.gradle
@@ -1,10 +1,10 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    compile project(':library')
+    implementation project(':library')
     annotationProcessor project(':annotation:compiler')
-    compile 'com.caverock:androidsvg:1.2.1'
-    compile "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
+    implementation 'com.caverock:androidsvg:1.2.1'
+    implementation "com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}"
 }
 
 android {
diff --git a/samples/svg/src/main/res/layout/activity_main.xml b/samples/svg/src/main/res/layout/activity_main.xml
index 704faa1f9..bff58690a 100644
--- a/samples/svg/src/main/res/layout/activity_main.xml
+++ b/samples/svg/src/main/res/layout/activity_main.xml
@@ -16,7 +16,7 @@
         android:onClick="clearCache"
         android:clickable="true"
         android:text="@string/hello_world"
-        />
+        android:focusable="true"/>
 
     <Button
         android:id="@+id/button"
diff --git a/scripts/travis_firebase.sh b/scripts/travis_firebase.sh
index 6815797a8..f52efafff 100755
--- a/scripts/travis_firebase.sh
+++ b/scripts/travis_firebase.sh
@@ -15,8 +15,8 @@ wait $pid
 apk_dir=instrumentation/build/outputs/apk
 ./google-cloud-sdk/bin/gcloud firebase test android run \
   --type instrumentation \
-  --app $apk_dir/instrumentation-debug.apk \
-  --test $apk_dir/instrumentation-debug-androidTest.apk \
+  --app $apk_dir/debug/instrumentation-debug.apk \
+  --test $apk_dir/androidTest/debug/instrumentation-debug-androidTest.apk \
   --device model=Nexus6P,version=26,locale=en,orientation=portrait \
   --device model=Nexus6P,version=25,locale=en,orientation=portrait \
   --device model=Nexus6P,version=24,locale=en,orientation=portrait \
diff --git a/scripts/travis_samples.sh b/scripts/travis_samples.sh
index b827db3f7..52ef25e88 100755
--- a/scripts/travis_samples.sh
+++ b/scripts/travis_samples.sh
@@ -15,14 +15,14 @@ if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
   wait $pid
   echo "Unable to run Firebase tests for pull requests, exiting"
   exit 0
-else 
+else
   ./scripts/install_firebase.sh
   wait $pid
 fi
 
 
-declare -a samples=("flickr" 
-                "giphy" 
+declare -a samples=("flickr"
+                "giphy"
                 "contacturi"
                 "gallery"
                 "imgur"
@@ -31,7 +31,7 @@ pids=()
 
 for sample in "${samples[@]}"
 do
-  sample_dir="samples/${sample}/build/outputs/apk/"
+  sample_dir="samples/${sample}/build/outputs/apk/debug"
   sample_apk="${sample_dir}/${sample}-debug.apk"
   ./google-cloud-sdk/bin/gcloud firebase test android run \
     --type robo \
@@ -48,6 +48,5 @@ for current in "${pids[@]}"
 do
   wait $current
 done
-       
 
 
diff --git a/scripts/upload.gradle b/scripts/upload.gradle
index c690a364a..302073759 100644
--- a/scripts/upload.gradle
+++ b/scripts/upload.gradle
@@ -130,10 +130,11 @@ afterEvaluate { project ->
             source = releaseVariants.collect { it.javaCompile.source }
             classpath = files(
                     getAndroidJar,
-                    releaseVariants.collect { it.javaCompile.classpath.files },
                     project.file("build/intermediates/classes/release")
             )
-
+            doFirst {
+                classpath += files(releaseVariants.collect { it.javaCompile.classpath.files })
+            }
             options {
                 links("http://docs.oracle.com/javase/7/docs/api/")
                 linksOffline("http://d.android.com/reference",
diff --git a/third_party/gif_decoder/build.gradle b/third_party/gif_decoder/build.gradle
index a19bcda5f..4ff3c6670 100644
--- a/third_party/gif_decoder/build.gradle
+++ b/third_party/gif_decoder/build.gradle
@@ -1,14 +1,14 @@
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
+    implementation "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
 
-    testCompile project(':testutil')
-    testCompile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
-    testCompile "com.google.truth:truth:${TRUTH_VERSION}"
-    testCompile "junit:junit:${JUNIT_VERSION}"
-    testCompile "org.mockito:mockito-core:${MOCKITO_VERSION}"
-    testCompile "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
+    testImplementation project(':testutil')
+    testImplementation "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
+    testImplementation "com.google.truth:truth:${TRUTH_VERSION}"
+    testImplementation "junit:junit:${JUNIT_VERSION}"
+    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
+    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
 }
 
 android {
