diff --git a/.github/stale.yml b/.github/stale.yml
new file mode 100644
index 000000000..935131154
--- /dev/null
+++ b/.github/stale.yml
@@ -0,0 +1,20 @@
+# Number of days of inactivity before an issue becomes stale
+daysUntilStale: 7
+# Number of days of inactivity before a stale issue is closed
+daysUntilClose: 7
+# Issues with these labels will never be considered stale
+exemptLabels:
+  - bug
+  - enhancement
+  - feature
+  - documentation
+# Label to use when marking an issue as stale
+staleLabel: stale
+# Comment to post when marking an issue as stale. Set to `false` to disable
+markComment: >
+  This issue has been automatically marked as stale because it has not had
+  activity in the last seven days. It will be closed if no further activity
+  occurs within the next seven days. Thank you for your contributions.
+# Comment to post when closing a stale issue. Set to `false` to disable
+closeComment: false
+unmarkComment: false
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
index 55f07d5af..af7ffe469 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppAndLibraryGlideModulesTest.java
@@ -17,11 +17,14 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Tests adding both an empty {@link com.bumptech.glide.module.AppGlideModule} and an empty
  * {@link com.bumptech.glide.module.LibraryGlideModule} in a single project.
  */
+@RunWith(JUnit4.class)
 public class EmptyAppAndLibraryGlideModulesTest {
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
index 682afa0f2..f852f4dbc 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyAppGlideModuleTest.java
@@ -12,10 +12,13 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Tests adding a single {@link com.bumptech.glide.test.EmptyAppModule} in a project.
  */
+@RunWith(JUnit4.class)
 public class EmptyAppGlideModuleTest {
   private static final String MODULE_NAME = "EmptyAppModule.java";
   private Compilation compilation;
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
index a8e459b25..db6d337d1 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/EmptyLibraryGlideModuleTest.java
@@ -11,10 +11,13 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Tests adding a single {@link com.bumptech.glide.module.LibraryGlideModule} in a project.
  */
+@RunWith(JUnit4.class)
 public class EmptyLibraryGlideModuleTest {
   private static final String MODULE_NAME = "EmptyLibraryModule.java";
   private Compilation compilation;
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
index 23bd5f121..8ee72aacf 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionOptionsTest.java
@@ -10,12 +10,15 @@
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Verifies only the output we expect to change based on the various configurations of GlideOptions.
  *
  * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
  */
+@RunWith(JUnit4.class)
 public class GlideExtensionOptionsTest {
   private static final String EXTENSION_NAME = "Extension.java";
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
index b817a574d..ac56e2fa0 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithOptionTest.java
@@ -14,11 +14,14 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Verifies the output of the processor with a simple single extension option in the new
  * option style where extension methods always return values.
  */
+@RunWith(JUnit4.class)
 public class GlideExtensionWithOptionTest {
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
index c30527bce..832fad600 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/GlideExtensionWithTypeTest.java
@@ -14,10 +14,13 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Verifies the output of the processor with a simple single extension type.
  */
+@RunWith(JUnit4.class)
 public class GlideExtensionWithTypeTest {
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
index e12d5b292..9a77c4644 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideExtensionTest.java
@@ -9,12 +9,15 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s themselves.
  */
 // Avoid warnings when using ExpectedException.
 @SuppressWarnings("ResultOfMethodCallIgnored")
+@RunWith(JUnit4.class)
 public class InvalidGlideExtensionTest {
   @Rule public ExpectedException expectedException = ExpectedException.none();
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
index edd87a8af..b2448d49b 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideOptionsExtensionTest.java
@@ -9,6 +9,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s for methods annotated
@@ -16,6 +18,7 @@
  */
 // Ignore warnings since most methods use ExpectedException
 @SuppressWarnings("ResultOfMethodCallIgnored")
+@RunWith(JUnit4.class)
 public class InvalidGlideOptionsExtensionTest {
   @Rule public ExpectedException expectedException = ExpectedException.none();
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
index d1be3bff3..976571f11 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/InvalidGlideTypeExtensionTest.java
@@ -12,6 +12,8 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Checks assertions on {@link com.bumptech.glide.annotation.GlideExtension}s for methods annotated
@@ -19,6 +21,7 @@
  */
 // Ignore warnings since most methods use ExpectedException
 @SuppressWarnings("ResultOfMethodCallIgnored")
+@RunWith(JUnit4.class)
 public class InvalidGlideTypeExtensionTest {
   @Rule public ExpectedException expectedException = ExpectedException.none();
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
index 174943da6..2cc9e38b7 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionOptionsTest.java
@@ -10,6 +10,8 @@
 import java.io.IOException;
 import javax.tools.JavaFileObject;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Verifies only the output we expect to change based on the various configurations of GlideOptions
@@ -17,6 +19,7 @@
  *
  * <p>The output for all classes is tested in {@link LegacyGlideExtensionWithOptionTest}.
  */
+@RunWith(JUnit4.class)
 public class LegacyGlideExtensionOptionsTest {
   private static final String EXTENSION_NAME = "Extension.java";
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
index c27831b5d..5f09e8f0b 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithOptionTest.java
@@ -14,11 +14,14 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Verifies the output of the processor with a simple single extension option in the legacy
  * option style where extension methods always returned {@code null}.
  */
+@RunWith(JUnit4.class)
 public class LegacyGlideExtensionWithOptionTest {
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
index 47be57f75..9688e8d34 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/LegacyGlideExtensionWithTypeTest.java
@@ -14,10 +14,13 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Verifies the output of the processor with a simple single extension type.
  */
+@RunWith(JUnit4.class)
 public class LegacyGlideExtensionWithTypeTest {
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
index 17f8d648c..889a3d07f 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleAppGlideModuleTest.java
@@ -9,11 +9,14 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Ensures that adding more than one {@link com.bumptech.glide.module.AppGlideModule} to a project
  * will fail.
  */
+@RunWith(JUnit4.class)
 public class MultipleAppGlideModuleTest {
   @Rule public ExpectedException expectedException = ExpectedException.none();
   private static final String FIRST_MODULE = "EmptyAppModule1.java";
diff --git a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
index 7b0bc7366..65b21812a 100644
--- a/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
+++ b/annotation/compiler/test/src/test/java/com/bumptech/glide/annotation/compiler/MultipleEmptyLibraryGlideModuleTest.java
@@ -11,10 +11,13 @@
 import javax.tools.JavaFileObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 
 /**
  * Tests adding multiple {@link com.bumptech.glide.module.LibraryGlideModule}s in a project.
  */
+@RunWith(JUnit4.class)
 public class MultipleEmptyLibraryGlideModuleTest {
   private Compilation compilation;
 
diff --git a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
index 3cee57111..dd7816ef6 100644
--- a/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
+++ b/annotation/compiler/test/src/test/resources/EmptyAppGlideModuleTest/GlideApp.java
@@ -9,7 +9,9 @@
 import android.support.v4.app.FragmentActivity;
 import android.view.View;
 import com.bumptech.glide.Glide;
+import com.bumptech.glide.GlideBuilder;
 import java.io.File;
+import java.lang.Deprecated;
 import java.lang.String;
 
 /**
@@ -51,12 +53,22 @@ public static Glide get(Context context) {
   /**
    * @see Glide#init(Glide)
    */
+  @Deprecated
   @VisibleForTesting
   @SuppressLint("VisibleForTests")
   public static void init(Glide glide) {
     Glide.init(glide);
   }
 
+  /**
+   * @see Glide#init(Context, GlideBuilder)
+   */
+  @VisibleForTesting
+  @SuppressLint("VisibleForTests")
+  public static void init(Context context, GlideBuilder builder) {
+    Glide.init(context, builder);
+  }
+
   /**
    * @see Glide#tearDown()
    */
diff --git a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
index c640dc455..6761e6d56 100644
--- a/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
+++ b/annotation/compiler/test/src/test/resources/GlideExtensionWithTypeTest/ExtensionWithType.java
@@ -2,9 +2,7 @@
 
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
 import com.bumptech.glide.annotation.GlideType;
-import com.bumptech.glide.request.RequestOptions;
 
 @GlideExtension
 public final class ExtensionWithType {
diff --git a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
index 7df95adb5..47c22dd4d 100644
--- a/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
+++ b/annotation/compiler/test/src/test/resources/LegacyGlideExtensionWithTypeTest/ExtensionWithType.java
@@ -2,9 +2,7 @@
 
 import com.bumptech.glide.RequestBuilder;
 import com.bumptech.glide.annotation.GlideExtension;
-import com.bumptech.glide.annotation.GlideOption;
 import com.bumptech.glide.annotation.GlideType;
-import com.bumptech.glide.request.RequestOptions;
 
 @GlideExtension
 public final class ExtensionWithType {
diff --git a/library/src/main/java/com/bumptech/glide/Glide.java b/library/src/main/java/com/bumptech/glide/Glide.java
index d655e2377..f1ce6fd7e 100644
--- a/library/src/main/java/com/bumptech/glide/Glide.java
+++ b/library/src/main/java/com/bumptech/glide/Glide.java
@@ -177,20 +177,38 @@ private static void checkAndInitializeGlide(Context context) {
     isInitializing = false;
   }
 
+  /**
+   * @deprecated Use {@link #init(Context, GlideBuilder)} to get a singleton compatible with
+   * Glide's generated API.
+   *
+   * <p>This method will be removed in a future version of Glide.
+   */
   @VisibleForTesting
+  @Deprecated
   public static synchronized void init(Glide glide) {
     Glide.glide = glide;
   }
 
+  @VisibleForTesting
+  public static synchronized void init(Context context, GlideBuilder builder) {
+    initializeGlide(context, builder);
+  }
+
   @VisibleForTesting
   public static synchronized void tearDown() {
+    if (glide != null) {
+      glide.engine.tearDown();
+    }
     glide = null;
   }
 
-  @SuppressWarnings("deprecation")
   private static void initializeGlide(Context context) {
-    Context applicationContext = context.getApplicationContext();
+    initializeGlide(context, new GlideBuilder());
+  }
 
+  @SuppressWarnings("deprecation")
+  private static void initializeGlide(Context context, GlideBuilder builder) {
+    Context applicationContext = context.getApplicationContext();
     GeneratedAppGlideModule annotationGeneratedModule = getAnnotationGeneratedGlideModules();
     List<com.bumptech.glide.module.GlideModule> manifestModules = Collections.emptyList();
     if (annotationGeneratedModule == null || annotationGeneratedModule.isManifestParsingEnabled()) {
@@ -223,8 +241,7 @@ private static void initializeGlide(Context context) {
     RequestManagerRetriever.RequestManagerFactory factory =
         annotationGeneratedModule != null
             ? annotationGeneratedModule.getRequestManagerFactory() : null;
-    GlideBuilder builder = new GlideBuilder()
-        .setRequestManagerFactory(factory);
+    builder.setRequestManagerFactory(factory);
     for (com.bumptech.glide.module.GlideModule module : manifestModules) {
       module.applyOptions(applicationContext, builder);
     }
@@ -238,7 +255,7 @@ private static void initializeGlide(Context context) {
     if (annotationGeneratedModule != null) {
       annotationGeneratedModule.registerComponents(applicationContext, glide, glide.registry);
     }
-    context.getApplicationContext().registerComponentCallbacks(glide);
+    applicationContext.registerComponentCallbacks(glide);
     Glide.glide = glide;
   }
 
diff --git a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
index db2052254..0f1aed67a 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/Engine.java
@@ -2,6 +2,7 @@
 
 import android.os.Looper;
 import android.os.MessageQueue;
+import android.support.annotation.VisibleForTesting;
 import android.support.v4.util.Pools;
 import android.util.Log;
 import com.bumptech.glide.GlideContext;
@@ -341,6 +342,11 @@ public void clearDiskCache() {
     diskCacheProvider.getDiskCache().clear();
   }
 
+  @VisibleForTesting
+  public void tearDown() {
+    engineJobFactory.tearDown();
+  }
+
   private ReferenceQueue<EngineResource<?>> getReferenceQueue() {
     if (resourceReferenceQueue == null) {
       resourceReferenceQueue = new ReferenceQueue<>();
@@ -497,6 +503,14 @@ public boolean queueIdle() {
       this.listener = listener;
     }
 
+    @VisibleForTesting
+    void tearDown() {
+      diskCacheExecutor.shutdown();
+      sourceExecutor.shutdown();
+      sourceUnlimitedExecutor.shutdown();
+      animationExecutor.shutdown();
+    }
+
     @SuppressWarnings("unchecked")
     <R> EngineJob<R> build(Key key, boolean isMemoryCacheable,
         boolean useUnlimitedSourceGeneratorPool, boolean useAnimationPool) {
diff --git a/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
index 02a26aa26..e43af2c21 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/GlideUrl.java
@@ -26,7 +26,7 @@
  * convenience. </p>
  */
 public class GlideUrl implements Key {
-  private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
+  private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%;$";
   private final Headers headers;
   @Nullable private final URL url;
   @Nullable private final String stringUrl;
diff --git a/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java b/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
index 2548b0e59..6bc1ddd29 100644
--- a/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
+++ b/library/src/test/java/com/bumptech/glide/load/model/GlideUrlTest.java
@@ -1,5 +1,6 @@
 package com.bumptech.glide.load.model;
 
+import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
@@ -87,6 +88,16 @@ public void testIssue133() throws MalformedURLException {
     assertEquals(escaped, glideUrlFromEscapedUrl.toURL().toString());
   }
 
+  @Test
+  public void issue_2583() throws MalformedURLException {
+    String original =
+        "http://api.met.no/weatherapi/weathericon/1.1/?symbol=9;content_type=image/png";
+
+    GlideUrl glideUrl = new GlideUrl(original);
+    assertThat(glideUrl.toURL().toString()).isEqualTo(original);
+    assertThat(glideUrl.toStringUrl()).isEqualTo(original);
+  }
+
   @Test
   public void testEquals() throws MalformedURLException {
     Headers headers = mock(Headers.class);
