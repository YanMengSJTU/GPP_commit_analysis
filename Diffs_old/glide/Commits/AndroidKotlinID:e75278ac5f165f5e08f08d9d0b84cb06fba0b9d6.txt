diff --git a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
index 4e427b920..86cdfb506 100644
--- a/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
+++ b/library/src/main/java/com/bumptech/glide/load/engine/ResourceCacheGenerator.java
@@ -37,6 +37,8 @@
     this.cb = cb;
   }
 
+  // See TODO below.
+  @SuppressWarnings("PMD.CollapsibleIfStatements")
   @Override
   public boolean startNext() {
     List<Key> sourceIds = helper.getCacheKeys();
@@ -48,9 +50,12 @@ public boolean startNext() {
       if (File.class.equals(helper.getTranscodeClass())) {
         return false;
       }
-      throw new IllegalStateException(
-          "Failed to find any load path from " + helper.getModelClass() + " to "
-              + helper.getTranscodeClass());
+      // TODO(b/73882030): This case gets triggered when it shouldn't. With this assertion it causes
+      // all loads to fail. Without this assertion it causes loads to miss the disk cache
+      // unnecessarily
+      // throw new IllegalStateException(
+      //    "Failed to find any load path from " + helper.getModelClass() + " to "
+      //        + helper.getTranscodeClass());
     }
     while (modelLoaders == null || !hasNextModelLoader()) {
       resourceClassIndex++;
diff --git a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
index 5b0dafe49..bbe616a76 100644
--- a/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
+++ b/library/src/main/java/com/bumptech/glide/load/model/MultiModelLoader.java
@@ -80,7 +80,6 @@ public String toString() {
     private DataCallback<? super Data> callback;
     @Nullable
     private List<Throwable> exceptions;
-    private boolean isCancelled;
 
     MultiFetcher(
         @NonNull List<DataFetcher<Data>> fetchers,
@@ -113,7 +112,6 @@ public void cleanup() {
 
     @Override
     public void cancel() {
-      isCancelled = true;
       for (DataFetcher<Data> fetcher : fetchers) {
         fetcher.cancel();
       }
@@ -133,10 +131,6 @@ public DataSource getDataSource() {
 
     @Override
     public void onDataReady(@Nullable Data data) {
-      if (isCancelled) {
-        return;
-      }
-
       if (data != null) {
         callback.onDataReady(data);
       } else {
@@ -146,19 +140,11 @@ public void onDataReady(@Nullable Data data) {
 
     @Override
     public void onLoadFailed(@NonNull Exception e) {
-      if (isCancelled) {
-        return;
-      }
-
       Preconditions.checkNotNull(exceptions).add(e);
       startNextOrFail();
     }
 
     private void startNextOrFail() {
-      if (isCancelled) {
-        return;
-      }
-
       if (currentIndex < fetchers.size() - 1) {
         currentIndex++;
         loadData(priority, callback);
