diff --git a/robospice-cache-parent/robospice-cache/pom.xml b/robospice-cache-parent/robospice-cache/pom.xml
index 0d88dbea0..793affe33 100644
--- a/robospice-cache-parent/robospice-cache/pom.xml
+++ b/robospice-cache-parent/robospice-cache/pom.xml
@@ -26,6 +26,11 @@
 			<groupId>org.apache.commons</groupId>
 			<artifactId>commons-io</artifactId>
 		</dependency>
+        <dependency>
+            <groupId>com.google.android</groupId>
+            <artifactId>support-v4</artifactId>
+            <version>r7</version>
+        </dependency>
 	</dependencies>
 
 	<build>
@@ -48,7 +53,7 @@
 			</plugin>
 		</plugins>
 	</build>
-	
+
 	<profiles>
 		<profile>
 			<!-- copy dependencies for ant users and deploy them to github -->
diff --git a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java
index 8981b5bd4..782a7b9c1 100644
--- a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java
+++ b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java
@@ -8,11 +8,9 @@
 
 /**
  * Concrete implementation of {@link InMemoryLRUCacheObjectPersister} for bitmap
- * objects.
- *
- * By default, it creates an LRU cache that can fill up to 1/4 of application
- * memory. This value can be changed by passing a different cache size in the
- * constructor method.
+ * objects. By default, it creates an LRU cache that can fill up to 1/4 of
+ * application memory. This value can be changed by passing a different cache
+ * size in the constructor method.
  */
 
 public class InMemoryBitmapObjectPersister extends
@@ -20,10 +18,13 @@
 
     private final int cacheSize;
 
+    private static final int DEFAULT_CACHE_SIZE = 1024 * 1024 * 4;
+    private static final int BASELINE_MEMCLASS = 16;
+
     /**
      * Convenience constructor with the default cache size.
-     *
-     * @param application the Android application object
+     * @param application
+     *            the Android application object
      */
 
     public InMemoryBitmapObjectPersister(Application application) {
@@ -32,12 +33,14 @@ public InMemoryBitmapObjectPersister(Application application) {
 
     /**
      * Default constructor method.
-     *
-     * @param application the Android application object
-     * @param cacheSize the requested cache size, in bytes. If the size is less
-     *                  than one, the cache size is limited to 1/4 of the
-     *                  application memory.
+     * @param application
+     *            the Android application object
+     * @param cacheSize
+     *            the requested cache size, in bytes. If the size is less than
+     *            one, the cache size is limited to 1/4 of the application
+     *            memory.
      */
+
     public InMemoryBitmapObjectPersister(Application application, int cacheSize) {
         super(application, Bitmap.class);
 
@@ -47,15 +50,15 @@ public InMemoryBitmapObjectPersister(Application application, int cacheSize) {
             this.cacheSize = cacheSize;
         } else {
             int memClass = ((ActivityManager) application
-                .getSystemService( Context.ACTIVITY_SERVICE )).getMemoryClass();
-            this.cacheSize = 1024 * 1024 * 4 * (memClass / 16);
+                .getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();
+            this.cacheSize = DEFAULT_CACHE_SIZE
+                * (memClass / BASELINE_MEMCLASS);
         }
     }
 
     /**
      * Creates the LRUCache, calculating the size of the object based on the
      * number of bytes in the bitmap.
-     *
      * @return the instantiated cache
      */
 
@@ -65,7 +68,8 @@ public InMemoryBitmapObjectPersister(Application application, int cacheSize) {
 
             @Override
             protected int sizeOf(Object key, CacheItem<Bitmap> value) {
-                return value.data.getRowBytes() * value.data.getHeight();
+                Bitmap data = value.getData();
+                return data.getRowBytes() * data.getHeight();
             }
 
             @Override
diff --git a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryLRUCacheObjectPersister.java b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryLRUCacheObjectPersister.java
index 9cfa0f885..870b32ac8 100644
--- a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryLRUCacheObjectPersister.java
+++ b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryLRUCacheObjectPersister.java
@@ -13,10 +13,8 @@
 
 /**
  * @author David Stemmer
- * @author Mike Jancola
- *
- * Abstract in-memory object persister, based on the Android LRUCache.
- *
+ * @author Mike Jancola Abstract in-memory object persister, based on the
+ *         Android LRUCache.
  */
 
 public abstract class InMemoryLRUCacheObjectPersister<T> extends
@@ -40,7 +38,6 @@ protected InMemoryLRUCacheObjectPersister(Application application,
 
     /**
      * Subclasses must implement this method to instantiate the LRU cache.
-     *
      * @return the instantiated cache object
      */
 
@@ -50,26 +47,37 @@ protected InMemoryLRUCacheObjectPersister(Application application,
      * The CacheItem class represents a cached object, consisting of a piece of
      * immutable data and a timestamp marking when the data was added to the
      * cache.
-     *
-     * @param <T> the type of object that will be stored in the cache
+     * @param <T>
+     *            the type of object that will be stored in the cache
      */
 
     protected static class CacheItem<T> {
-        public final long created;
-        public final T data;
+        private final long created;
+        private final T data;
 
         public CacheItem(long created, T data) {
             this.created = created;
             this.data = data;
         }
+
+        public long getCreated() {
+            return created;
+        }
+
+        public T getData() {
+            return data;
+        }
     }
 
     /**
-     *
-     * @param cacheKey the cacheKey of the data to load.
-     * @param maxTimeInCacheBeforeExpiry max time, in milliseconds, that the data should remain in the cache
+     * @param cacheKey
+     *            the cacheKey of the data to load.
+     * @param maxTimeInCacheBeforeExpiry
+     *            max time, in milliseconds, that the data should remain in the
+     *            cache
      * @return the cached data
-     * @throws CacheLoadingException when the cache data is null
+     * @throws CacheLoadingException
+     *             when the cache data is null
      */
 
     @Override
@@ -80,13 +88,13 @@ public T loadDataFromCache(Object cacheKey, long maxTimeInCacheBeforeExpiry)
         String errorMsg = String.format(CACHE_MISS_NOT_FOUND, cacheKey);
 
         /*
-        Since this is an in-memory cache and will be dumped when the
-        device reboots, the timestamp is retrieved via the
-        {@link android.os.SystemClock#elapsedRealtime()} method. This method
-        counts the time since boot and is safer than
-        {@link System#currentTimeMillis()} which can be dependant on user
-        configuration.
-        */
+         * Since this is an in-memory cache and will be dumped when the device
+         * reboots, the timestamp is retrieved via the {@link
+         * android.os.SystemClock#elapsedRealtime()} method. This method counts
+         * the time since boot and is safer than {@link
+         * System#currentTimeMillis()} which can be dependant on user
+         * configuration.
+         */
 
         if (cacheItem != null) {
             long timeInCache = SystemClock.elapsedRealtime()
@@ -122,7 +130,7 @@ public T saveDataToCacheAndReturnData(T bitmap, Object cacheKey)
         throws CacheSavingException {
         CacheItem<T> itemToCache = new CacheItem<T>(
             SystemClock.elapsedRealtime(), bitmap);
-        getMemoryCache().put( cacheKey, itemToCache);
+        getMemoryCache().put(cacheKey, itemToCache);
 
         return bitmap;
     }
