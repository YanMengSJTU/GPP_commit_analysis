diff --git a/pom.xml b/pom.xml
index 9388c77fe..0d172286c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 	<modelVersion>4.0.0</modelVersion>
 
 	<!-- Sonatype config to publish on Maven Central -->
@@ -14,7 +13,7 @@
 
 	<groupId>com.octo.android.robospice</groupId>
 	<artifactId>robospice-parent</artifactId>
-	<version>1.3.1-SNAPSHOT</version>
+	<version>1.3.2-SNAPSHOT</version>
 	<packaging>pom</packaging>
 	<name>Robospice - Parent</name>
 	<description>RoboSpice is a modular android library that eases the development of Data-Driven Android applications.</description>
@@ -71,6 +70,11 @@
 		</mailingList>
 	</mailingLists>
 
+	<ciManagement>
+		<system>continuum</system>
+		<url>https://robospice.ci.cloudbees.com/job/Build%20RoboSpice/</url>
+	</ciManagement>
+
 	<modules>
 		<!-- persistence -->
 		<module>robospice-cache</module>
@@ -82,7 +86,7 @@
 		<module>robospice-google-http-client</module>
 		<!-- sample -->
 		<module>robospice-sample</module>
-		<!-- sample offline requests-->
+		<!-- sample offline requests -->
 		<module>robospice-sample-offline-request</module>
 		<!-- tests -->
 		<module>robospice-sample-it</module>
@@ -110,7 +114,7 @@
 		<github.global.server>github</github.global.server>
 	</properties>
 
-	<!--  TODO : remove this when android maven plugin 3.4.2 is out -->
+	<!-- TODO : remove this when android maven plugin 3.4.2 is out -->
 	<pluginRepositories>
 		<pluginRepository>
 			<id>oss.sonatype.org-jayway-snapshots</id>
diff --git a/robospice-cache/pom.xml b/robospice-cache/pom.xml
index bb50ae681..f27011dbb 100644
--- a/robospice-cache/pom.xml
+++ b/robospice-cache/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>com.octo.android.robospice</groupId>
 		<artifactId>robospice-parent</artifactId>
-		<version>1.3.1-SNAPSHOT</version>
+		<version>1.3.2-SNAPSHOT</version>
 	</parent>
 
 	<artifactId>robospice-cache</artifactId>
diff --git a/robospice-google-http-client/pom.xml b/robospice-google-http-client/pom.xml
index 9163bf583..ab43a9000 100644
--- a/robospice-google-http-client/pom.xml
+++ b/robospice-google-http-client/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>com.octo.android.robospice</groupId>
 		<artifactId>robospice-parent</artifactId>
-		<version>1.3.1-SNAPSHOT</version>
+		<version>1.3.2-SNAPSHOT</version>
 	</parent>
 
 	<artifactId>robospice-google-http-client</artifactId>
diff --git a/robospice-motivations/pom.xml b/robospice-motivations/pom.xml
index 58d0d52f0..41f6eea7c 100644
--- a/robospice-motivations/pom.xml
+++ b/robospice-motivations/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>com.octo.android.robospice</groupId>
 		<artifactId>robospice-parent</artifactId>
-		<version>1.3.1-SNAPSHOT</version>
+		<version>1.3.2-SNAPSHOT</version>
 	</parent>
 
 	<artifactId>robospice-motivations</artifactId>
diff --git a/robospice-sample-it/pom.xml b/robospice-sample-it/pom.xml
index 3fecf055b..ade29a606 100644
--- a/robospice-sample-it/pom.xml
+++ b/robospice-sample-it/pom.xml
@@ -5,7 +5,7 @@
         <parent>
              <groupId>com.octo.android.robospice</groupId>
              <artifactId>robospice-parent</artifactId>
-             <version>1.3.1-SNAPSHOT</version>
+             <version>1.3.2-SNAPSHOT</version>
         </parent>
 
         <artifactId>robospice-sample-it</artifactId>
diff --git a/robospice-sample-it/src/com/octo/android/robospice/SpiceManagerTest.java b/robospice-sample-it/src/com/octo/android/robospice/SpiceManagerTest.java
index eef853474..793d6f72a 100644
--- a/robospice-sample-it/src/com/octo/android/robospice/SpiceManagerTest.java
+++ b/robospice-sample-it/src/com/octo/android/robospice/SpiceManagerTest.java
@@ -10,6 +10,7 @@
 import com.octo.android.robospice.stub.ContentRequestFailingStub;
 import com.octo.android.robospice.stub.ContentRequestStub;
 import com.octo.android.robospice.stub.ContentRequestSucceedingStub;
+import com.octo.android.robospice.stub.ContentRequestWaitingStub;
 import com.octo.android.robospice.stub.RequestListenerStub;
 import com.octo.android.robospice.stub.RequestListenerWithProgressStub;
 
@@ -91,8 +92,8 @@ public void test_executeContentRequest_when_request_succeeds() throws Interrupte
 
         // test
         assertTrue( contentRequestStub.isLoadDataFromNetworkCalled() );
-        assertTrue( requestListenerStub.isExecutedInUIThread() );
         assertTrue( requestListenerStub.isSuccessful() );
+        assertTrue( requestListenerStub.isExecutedInUIThread() );
     }
 
     public void test_executeContentRequest_when_request_fails() throws InterruptedException {
@@ -126,8 +127,8 @@ public void testCancel() throws InterruptedException {
     public void testCancelAllRequests() throws InterruptedException {
         // given
         spiceManager.start( getInstrumentation().getTargetContext() );
-        ContentRequestStub< String > contentRequestStub = new ContentRequestFailingStub< String >( TEST_CLASS );
-        ContentRequestStub< String > contentRequestStub2 = new ContentRequestFailingStub< String >( TEST_CLASS );
+        ContentRequestStub< String > contentRequestStub = new ContentRequestFailingStub< String >( TEST_CLASS, WAIT_BEFORE_EXECUTING_REQUEST );
+        ContentRequestStub< String > contentRequestStub2 = new ContentRequestFailingStub< String >( TEST_CLASS, WAIT_BEFORE_EXECUTING_REQUEST );
         RequestListenerWithProgressStub< String > requestListenerStub = new RequestListenerWithProgressStub< String >();
         RequestListenerWithProgressStub< String > requestListenerStub2 = new RequestListenerWithProgressStub< String >();
 
@@ -136,16 +137,16 @@ public void testCancelAllRequests() throws InterruptedException {
         spiceManager.execute( contentRequestStub2, TEST_CACHE_KEY2, TEST_DURATION, requestListenerStub2 );
         spiceManager.cancelAllRequests();
 
-        contentRequestStub.await( WAIT_BEFORE_EXECUTING_REQUEST + REQUEST_COMPLETION_TIME_OUT );
+        contentRequestStub.await( REQUEST_COMPLETION_TIME_OUT );
         contentRequestStub2.await( REQUEST_COMPLETION_TIME_OUT );
 
         // test
         assertTrue( contentRequestStub.isCancelled() );
         assertTrue( contentRequestStub2.isCancelled() );
-        assertFalse( requestListenerStub.isSuccessful() );
-        assertFalse( requestListenerStub2.isSuccessful() );
         assertTrue( requestListenerStub.isComplete() );
         assertTrue( requestListenerStub2.isComplete() );
+        assertFalse( requestListenerStub.isSuccessful() );
+        assertFalse( requestListenerStub2.isSuccessful() );
         assertTrue( requestListenerStub.getReceivedException() instanceof RequestCancelledException );
         assertTrue( requestListenerStub2.getReceivedException() instanceof RequestCancelledException );
     }
@@ -167,6 +168,58 @@ public void addListenerIfPending_receives_no_events() throws InterruptedExceptio
         assertNull( requestListenerStub.getReceivedException() );
     }
 
+    public void test_ShouldStopStopsRequests() throws InterruptedException {
+        // given
+        spiceManager.start( getInstrumentation().getTargetContext() );
+        ContentRequestStub< String > contentRequestStub = new ContentRequestFailingStub< String >( TEST_CLASS, WAIT_BEFORE_EXECUTING_REQUEST );
+        ContentRequestStub< String > contentRequestStub2 = new ContentRequestFailingStub< String >( TEST_CLASS, WAIT_BEFORE_EXECUTING_REQUEST );
+        RequestListenerStub< String > requestListenerStub = new RequestListenerStub< String >();
+        RequestListenerStub< String > requestListenerStub2 = new RequestListenerStub< String >();
+
+        // when
+        spiceManager.execute( contentRequestStub, TEST_CACHE_KEY, TEST_DURATION, requestListenerStub );
+        spiceManager.execute( contentRequestStub2, TEST_CACHE_KEY2, TEST_DURATION, requestListenerStub2 );
+        spiceManager.shouldStop();
+
+        contentRequestStub.await( WAIT_BEFORE_EXECUTING_REQUEST + REQUEST_COMPLETION_TIME_OUT );
+        contentRequestStub2.await( WAIT_BEFORE_EXECUTING_REQUEST + REQUEST_COMPLETION_TIME_OUT );
+
+        // test
+        // no guarantee on that
+        // assertTrue( contentRequestStub.isLoadDataFromNetworkCalled() );
+        // assertTrue( contentRequestStub2.isLoadDataFromNetworkCalled() );
+        assertNull( requestListenerStub.isSuccessful() );
+        assertNull( requestListenerStub2.isSuccessful() );
+    }
+
+    public void test_ShouldStopStopsRequests_dont_notify_listeners_after_requests_are_executed() throws InterruptedException {
+        // given
+        spiceManager.start( getInstrumentation().getTargetContext() );
+        ContentRequestWaitingStub< String > contentRequestStub = new ContentRequestWaitingStub< String >( TEST_CLASS, WAIT_BEFORE_EXECUTING_REQUEST );
+        ContentRequestWaitingStub< String > contentRequestStub2 = new ContentRequestWaitingStub< String >( TEST_CLASS, WAIT_BEFORE_EXECUTING_REQUEST );
+        RequestListenerStub< String > requestListenerStub = new RequestListenerStub< String >();
+        RequestListenerStub< String > requestListenerStub2 = new RequestListenerStub< String >();
+
+        // when
+        spiceManager.execute( contentRequestStub, TEST_CACHE_KEY, TEST_DURATION, requestListenerStub );
+        spiceManager.execute( contentRequestStub2, TEST_CACHE_KEY2, TEST_DURATION, requestListenerStub2 );
+
+        // wait for requests begin to be executed
+        contentRequestStub.await( REQUEST_COMPLETION_TIME_OUT );
+        contentRequestStub2.await( REQUEST_COMPLETION_TIME_OUT );
+        // stop before
+        spiceManager.shouldStop();
+
+        requestListenerStub.await( REQUEST_COMPLETION_TIME_OUT );
+        requestListenerStub2.await( REQUEST_COMPLETION_TIME_OUT );
+
+        // test
+        assertTrue( contentRequestStub.isLoadDataFromNetworkCalled() );
+        assertTrue( contentRequestStub2.isLoadDataFromNetworkCalled() );
+        assertNull( requestListenerStub.isSuccessful() );
+        assertNull( requestListenerStub2.isSuccessful() );
+    }
+
     public void test_dontNotifyRequestListenersForRequest() throws InterruptedException {
         // given
         spiceManager.start( getInstrumentation().getTargetContext() );
diff --git a/robospice-sample-it/src/com/octo/android/robospice/stub/ContentRequestWaitingStub.java b/robospice-sample-it/src/com/octo/android/robospice/stub/ContentRequestWaitingStub.java
new file mode 100644
index 000000000..bd5097cf2
--- /dev/null
+++ b/robospice-sample-it/src/com/octo/android/robospice/stub/ContentRequestWaitingStub.java
@@ -0,0 +1,59 @@
+package com.octo.android.robospice.stub;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.ReentrantLock;
+
+public class ContentRequestWaitingStub< T > extends ContentRequestStub< T > {
+    protected boolean isLoadDataFromNetworkCalled = false;
+
+    private ReentrantLock lock = new ReentrantLock();
+    private Condition requestFinishedCondition = lock.newCondition();
+
+    private long waitBeforeExecution;
+
+    public ContentRequestWaitingStub( Class< T > clazz ) {
+        this( clazz, 0 );
+    }
+
+    public ContentRequestWaitingStub( Class< T > clazz, long waitBeforeExecution ) {
+        super( clazz );
+        this.waitBeforeExecution = waitBeforeExecution;
+    }
+
+    @Override
+    public boolean isLoadDataFromNetworkCalled() {
+        lock.lock();
+        try {
+            requestFinishedCondition.signal();
+        } finally {
+            lock.unlock();
+        }
+        return isLoadDataFromNetworkCalled;
+    }
+
+    @Override
+    public T loadDataFromNetwork() throws Exception {
+        lock.lock();
+        isLoadDataFromNetworkCalled = true;
+        try {
+            requestFinishedCondition.signal();
+        } finally {
+            lock.unlock();
+        }
+        if ( waitBeforeExecution != 0 ) {
+            Thread.sleep( waitBeforeExecution );
+        }
+        return null;
+    }
+
+    @Override
+    public void await( long millisecond ) throws InterruptedException {
+        lock.lock();
+        try {
+            requestFinishedCondition.await( millisecond, TimeUnit.MILLISECONDS );
+        } finally {
+            lock.unlock();
+        }
+    }
+}
\ No newline at end of file
diff --git a/robospice-sample-offline-request/pom.xml b/robospice-sample-offline-request/pom.xml
index 65aa0f80e..1ca408dc1 100644
--- a/robospice-sample-offline-request/pom.xml
+++ b/robospice-sample-offline-request/pom.xml
@@ -5,7 +5,7 @@
         <parent>
                 <groupId>com.octo.android.robospice</groupId>
                 <artifactId>robospice-parent</artifactId>
-                <version>1.3.1-SNAPSHOT</version>
+                <version>1.3.2-SNAPSHOT</version>
         </parent>
 
         <artifactId>robospice-sample-offline-request</artifactId>
diff --git a/robospice-sample/pom.xml b/robospice-sample/pom.xml
index ef38221fe..2ea068fab 100644
--- a/robospice-sample/pom.xml
+++ b/robospice-sample/pom.xml
@@ -5,7 +5,7 @@
         <parent>
                 <groupId>com.octo.android.robospice</groupId>
                 <artifactId>robospice-parent</artifactId>
-                <version>1.3.1-SNAPSHOT</version>
+                <version>1.3.2-SNAPSHOT</version>
         </parent>
 
         <artifactId>robospice-sample</artifactId>
diff --git a/robospice-spring-android/pom.xml b/robospice-spring-android/pom.xml
index 84e6cdb23..5b1ecc02f 100644
--- a/robospice-spring-android/pom.xml
+++ b/robospice-spring-android/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>com.octo.android.robospice</groupId>
 		<artifactId>robospice-parent</artifactId>
-		<version>1.3.1-SNAPSHOT</version>
+		<version>1.3.2-SNAPSHOT</version>
 	</parent>
 
 	<artifactId>robospice-spring-android</artifactId>
diff --git a/robospice/pom.xml b/robospice/pom.xml
index 4939381f9..ff7ecccb9 100644
--- a/robospice/pom.xml
+++ b/robospice/pom.xml
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>com.octo.android.robospice</groupId>
 		<artifactId>robospice-parent</artifactId>
-		<version>1.3.1-SNAPSHOT</version>
+		<version>1.3.2-SNAPSHOT</version>
 	</parent>
 
 	<artifactId>robospice</artifactId>
diff --git a/robospice/src/com/octo/android/robospice/SpiceManager.java b/robospice/src/com/octo/android/robospice/SpiceManager.java
index 80909e621..bf7701b53 100644
--- a/robospice/src/com/octo/android/robospice/SpiceManager.java
+++ b/robospice/src/com/octo/android/robospice/SpiceManager.java
@@ -168,15 +168,15 @@ public void run() {
         try {
             waitForServiceToBeBound();
             while ( !isStopped ) {
-                CachedSpiceRequest< ? > restRequest = requestQueue.take();
+                CachedSpiceRequest< ? > spiceRequest = requestQueue.take();
                 try {
                     lockSendRequestsToService.lock();
-                    if ( restRequest != null ) {
-                        Set< RequestListener< ? >> listRequestListener = mapRequestToLaunchToRequestListener.get( restRequest );
-                        mapRequestToLaunchToRequestListener.remove( restRequest );
-                        mapPendingRequestToRequestListener.put( restRequest, listRequestListener );
-                        Ln.d( "Sending request to service : " + restRequest.getClass().getSimpleName() );
-                        spiceService.addRequest( restRequest, listRequestListener );
+                    if ( spiceRequest != null ) {
+                        Set< RequestListener< ? >> listRequestListener = mapRequestToLaunchToRequestListener.get( spiceRequest );
+                        mapRequestToLaunchToRequestListener.remove( spiceRequest );
+                        mapPendingRequestToRequestListener.put( spiceRequest, listRequestListener );
+                        Ln.d( "Sending request to service : " + spiceRequest.getClass().getSimpleName() );
+                        spiceService.addRequest( spiceRequest, listRequestListener );
                     }
                 } finally {
                     lockSendRequestsToService.unlock();
@@ -528,16 +528,17 @@ protected void dontNotifyAnyRequestListenersInternal() {
     private void removeListenersOfAllPendingCachedRequests() throws InterruptedException {
         synchronized ( mapPendingRequestToRequestListener ) {
             if ( !mapPendingRequestToRequestListener.isEmpty() ) {
-                waitForServiceToBeBound();
                 if ( spiceService == null ) {
                     return;
                 }
+                for ( CachedSpiceRequest< ? > cachedContentRequest : mapPendingRequestToRequestListener.keySet() ) {
+
+                    final Set< RequestListener< ? >> setRequestListeners = mapPendingRequestToRequestListener.get( cachedContentRequest );
+                    Ln.d( "Removing listeners of request : " + cachedContentRequest.toString() + " : " + setRequestListeners.size() );
+                    spiceService.dontNotifyRequestListenersForRequest( cachedContentRequest, setRequestListeners );
+                }
+                mapPendingRequestToRequestListener.clear();
             }
-            for ( CachedSpiceRequest< ? > cachedContentRequest : mapPendingRequestToRequestListener.keySet() ) {
-                final Set< RequestListener< ? >> setRequestListeners = mapPendingRequestToRequestListener.get( cachedContentRequest );
-                spiceService.dontNotifyRequestListenersForRequest( cachedContentRequest, setRequestListeners );
-            }
-            mapPendingRequestToRequestListener.clear();
             Ln.v( "Cleared listeners of all pending requests" );
         }
     }
diff --git a/robospice/src/com/octo/android/robospice/request/RequestProcessor.java b/robospice/src/com/octo/android/robospice/request/RequestProcessor.java
index a4ad272ce..c8955729e 100644
--- a/robospice/src/com/octo/android/robospice/request/RequestProcessor.java
+++ b/robospice/src/com/octo/android/robospice/request/RequestProcessor.java
@@ -172,7 +172,6 @@ public void run() {
 
         T result = null;
         final Set< RequestListener< ? >> listeners = mapRequestToRequestListener.get( request );
-        mapRequestToRequestListener.remove( request );
 
         if ( !request.isProcessable() ) {
             notifyOfRequestProcessed( request );
@@ -187,6 +186,7 @@ public void onRequestProgressUpdate( RequestProgress progress ) {
         };
         request.setRequestProgressListener( requestProgressListener );
 
+        // TODO remove this
         if ( request.isCancelled() ) {
             notifyListenersOfRequestCancellation( request, listeners );
             return;
@@ -199,13 +199,13 @@ public void onRequestProgressUpdate( RequestProgress progress ) {
                 request.setStatus( RequestStatus.READING_FROM_CACHE );
                 result = loadDataFromCache( request.getResultType(), request.getRequestCacheKey(), request.getCacheDuration() );
                 if ( result != null ) {
-                    notifyListenersOfRequestSuccess( request, listeners, result );
+                    notifyListenersOfRequestSuccess( request, result );
                     return;
                 }
             } catch ( CacheLoadingException e ) {
                 Ln.d( e, "Cache file could not be read." );
                 if ( failOnCacheError ) {
-                    notifyListenersOfRequestFailure( request, listeners, e );
+                    notifyListenersOfRequestFailure( request, e );
                     return;
                 }
                 cacheManager.removeDataFromCache( request.getResultType(), request.getRequestCacheKey() );
@@ -222,7 +222,7 @@ public void onRequestProgressUpdate( RequestProgress progress ) {
             Ln.d( "Cache content not available or expired or disabled" );
             if ( !isNetworkAvailable( applicationContext ) ) {
                 Ln.e( "Network is down." );
-                notifyListenersOfRequestFailure( request, listeners, new NoNetworkException() );
+                notifyListenersOfRequestFailure( request, new NoNetworkException() );
                 return;
             }
 
@@ -246,7 +246,7 @@ public void onRequestProgressUpdate( RequestProgress progress ) {
                  * if ( request.isCancelled() ) { notifyListenersOfRequestCancellation( request, listeners ); return; }
                  */
                 Ln.e( e, "An exception occured during request network execution :" + e.getMessage() );
-                notifyListenersOfRequestFailure( request, listeners, new NetworkException( "Exception occured during invocation of web service.", e ) );
+                notifyListenersOfRequestFailure( request, new NetworkException( "Exception occured during invocation of web service.", e ) );
                 return;
             }
 
@@ -260,24 +260,24 @@ public void onRequestProgressUpdate( RequestProgress progress ) {
                     Ln.d( "Start caching content..." );
                     request.setStatus( RequestStatus.WRITING_TO_CACHE );
                     result = saveDataToCacheAndReturnData( result, request.getRequestCacheKey() );
-                    notifyListenersOfRequestSuccess( request, listeners, result );
+                    notifyListenersOfRequestSuccess( request, result );
                     return;
                 } catch ( CacheSavingException e ) {
                     Ln.d( "An exception occured during service execution :" + e.getMessage(), e );
                     if ( failOnCacheError ) {
-                        notifyListenersOfRequestFailure( request, listeners, e );
+                        notifyListenersOfRequestFailure( request, e );
                         return;
                     } else {
                         // result can't be saved to cache but we reached that point after a success of load data from
                         // network
-                        notifyListenersOfRequestSuccess( request, listeners, result );
+                        notifyListenersOfRequestSuccess( request, result );
                     }
                     cacheManager.removeDataFromCache( request.getResultType(), request.getRequestCacheKey() );
                     Ln.d( e, "Cache file deleted." );
                 }
             } else {
                 // result can't be saved to cache but we reached that point after a success of load data from network
-                notifyListenersOfRequestSuccess( request, listeners, result );
+                notifyListenersOfRequestSuccess( request, result );
                 return;
             }
         }
@@ -303,14 +303,16 @@ private void checkAllRequestComplete() {
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
-    private < T > void notifyListenersOfRequestSuccess( CachedSpiceRequest< T > request, Set< RequestListener< ? >> listeners, T result ) {
+    private < T > void notifyListenersOfRequestSuccess( CachedSpiceRequest< T > request, T result ) {
+        final Set< RequestListener< ? >> listeners = mapRequestToRequestListener.get( request );
         notifyListenersOfRequestProgress( request, listeners, RequestStatus.COMPLETE );
         post( new ResultRunnable( listeners, result ), request.getRequestCacheKey() );
         notifyOfRequestProcessed( request );
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
-    private < T > void notifyListenersOfRequestFailure( CachedSpiceRequest< T > request, Set< RequestListener< ? >> listeners, SpiceException e ) {
+    private < T > void notifyListenersOfRequestFailure( CachedSpiceRequest< T > request, SpiceException e ) {
+        final Set< RequestListener< ? >> listeners = mapRequestToRequestListener.get( request );
         notifyListenersOfRequestProgress( request, listeners, RequestStatus.COMPLETE );
         post( new ResultRunnable( listeners, e ), request.getRequestCacheKey() );
         notifyOfRequestProcessed( request );
@@ -336,8 +338,11 @@ private void notifyListenersOfRequestCancellation( CachedSpiceRequest< ? > reque
      */
     public void dontNotifyRequestListenersForRequest( CachedSpiceRequest< ? > request, Collection< RequestListener< ? >> listRequestListener ) {
         handlerResponse.removeCallbacksAndMessages( request.getRequestCacheKey() );
+        // Ouh that hurts, Release 1.3.0 fails, it doesn't have any request in map any more
+        // TODO
         Set< RequestListener< ? >> setRequestListener = mapRequestToRequestListener.get( request );
         if ( setRequestListener != null && listRequestListener != null ) {
+            Ln.d( "Removing listeners of request : " + request.toString() + " : " + setRequestListener.size() );
             setRequestListener.removeAll( listRequestListener );
         }
     }
@@ -488,6 +493,7 @@ public void removeContentServiceListener( SpiceServiceServiceListener spiceServi
 
     protected void notifyOfRequestProcessed( CachedSpiceRequest< ? > request ) {
         Ln.v( "Removing %s  size is %d", request, mapRequestToRequestListener.size() );
+        mapRequestToRequestListener.remove( request );
 
         checkAllRequestComplete();
         synchronized ( contentServiceListenerSet ) {
