diff --git a/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java b/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java
index 4885cd5a1..f0cc3ef45 100644
--- a/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java
+++ b/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/request/RequestProcessorTest.java
@@ -53,20 +53,18 @@ public void allRequestComplete() {
         };
         ExecutorService executorService = Executors.newSingleThreadExecutor();
         networkStateChecker = new MockNetworkStateChecker();
-        requestProcessorUnderTest = new RequestProcessor(getInstrumentation().getTargetContext(), mockCacheManager,
-            executorService, requestProcessorListener, networkStateChecker);
+        requestProcessorUnderTest = new RequestProcessor(getInstrumentation().getTargetContext(), mockCacheManager, executorService,
+            requestProcessorListener, networkStateChecker);
     }
 
     // ============================================================================================
     // TESTING WITH FAIL ON ERROR = false
     // ============================================================================================
 
-    public void testAddRequest_when_cache_is_not_used() throws CacheLoadingException, CacheSavingException,
-        InterruptedException {
+    public void testAddRequest_when_cache_is_not_used() throws CacheLoadingException, CacheSavingException, InterruptedException {
         // given
         String cacheKey = null;
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, cacheKey, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, cacheKey, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
@@ -86,19 +84,16 @@ public void testAddRequest_when_cache_is_not_used() throws CacheLoadingException
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_something_is_found_in_cache() throws CacheLoadingException, CacheSavingException,
-        InterruptedException {
+    public void testAddRequest_when_something_is_found_in_cache() throws CacheLoadingException, CacheSavingException, InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(TEST_RETURNED_DATA);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(TEST_RETURNED_DATA);
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -114,23 +109,19 @@ public void testAddRequest_when_something_is_found_in_cache() throws CacheLoadin
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_nothing_is_found_in_cache_and_request_succeeds() throws CacheLoadingException,
-        CacheSavingException, InterruptedException {
+    public void testAddRequest_when_nothing_is_found_in_cache_and_request_succeeds() throws CacheLoadingException, CacheSavingException,
+        InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
-        EasyMock
-            .expect(
-                mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),
-                    EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(
+            TEST_RETURNED_DATA);
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -146,8 +137,8 @@ public void testAddRequest_when_nothing_is_found_in_cache_and_request_succeeds()
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_nothing_is_found_in_cache_and_request_fails() throws CacheLoadingException,
-        CacheSavingException, InterruptedException {
+    public void testAddRequest_when_nothing_is_found_in_cache_and_request_fails() throws CacheLoadingException, CacheSavingException,
+        InterruptedException {
         // given
         CachedSpiceRequestStub<String> stubRequest = createFailedRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION);
 
@@ -155,9 +146,8 @@ public void testAddRequest_when_nothing_is_found_in_cache_and_request_fails() th
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -173,23 +163,18 @@ public void testAddRequest_when_nothing_is_found_in_cache_and_request_fails() th
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_saving_to_cache_throws_exception() throws CacheLoadingException,
-        CacheSavingException, InterruptedException {
+    public void testAddRequest_when_saving_to_cache_throws_exception() throws CacheLoadingException, CacheSavingException, InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
-        EasyMock
-            .expect(
-                mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),
-                    EasyMock.eq(TEST_CACHE_KEY))).andThrow(new CacheSavingException(""));
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andThrow(
+            new CacheSavingException(""));
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -205,24 +190,20 @@ public void testAddRequest_when_saving_to_cache_throws_exception() throws CacheL
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_request_is_cancelled_and_new_one_relaunched_with_same_key()
-        throws CacheLoadingException, CacheSavingException, InterruptedException {
+    public void testAddRequest_when_request_is_cancelled_and_new_one_relaunched_with_same_key() throws CacheLoadingException, CacheSavingException,
+        InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
         EasyMock.expectLastCall().anyTimes();
-        EasyMock
-            .expect(
-                mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),
-                    EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(
+            TEST_RETURNED_DATA);
         EasyMock.expectLastCall().anyTimes();
         EasyMock.replay(mockCacheManager);
 
@@ -247,27 +228,46 @@ public void testAddRequest_when_request_is_cancelled_and_new_one_relaunched_with
         assertTrue(mockRequestListener.isComplete());
     }
 
+    public void testAddRequest_with_null_listener() throws CacheLoadingException, CacheSavingException, InterruptedException {
+        // given
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
+
+        Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
+        requestListenerSet.add(null);
+
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
+        EasyMock.expectLastCall().anyTimes();
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(
+            TEST_RETURNED_DATA);
+        EasyMock.expectLastCall().anyTimes();
+        EasyMock.replay(mockCacheManager);
+
+        // when
+        requestProcessorUnderTest.addRequest(stubRequest, requestListenerSet);
+        stubRequest.await(REQUEST_COMPLETION_TIME_OUT);
+        // then
+        // EasyMock.verify( mockCacheManager );
+        assertTrue(stubRequest.isLoadDataFromNetworkCalled());
+    }
+
     // ============================================================================================
     // TESTING WITH FAIL ON ERROR = true
     // ============================================================================================
 
-    public void testAddRequest_fail_on_error_true_when_nothing_is_found_in_cache() throws CacheLoadingException,
-        CacheSavingException, InterruptedException {
+    public void testAddRequest_fail_on_error_true_when_nothing_is_found_in_cache() throws CacheLoadingException, CacheSavingException,
+        InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
-        EasyMock
-            .expect(
-                mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),
-                    EasyMock.eq(TEST_CACHE_KEY))).andReturn(TEST_RETURNED_DATA);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andReturn(
+            TEST_RETURNED_DATA);
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -284,19 +284,17 @@ public void testAddRequest_fail_on_error_true_when_nothing_is_found_in_cache() t
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_fail_on_error_true_loading_from_cache_throws_exception()
-        throws CacheLoadingException, CacheSavingException, InterruptedException {
+    public void testAddRequest_when_fail_on_error_true_loading_from_cache_throws_exception() throws CacheLoadingException, CacheSavingException,
+        InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andThrow(new CacheLoadingException(""));
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andThrow(new CacheLoadingException(""));
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -312,23 +310,19 @@ public void testAddRequest_when_fail_on_error_true_loading_from_cache_throws_exc
         assertTrue(mockRequestListener.isComplete());
     }
 
-    public void testAddRequest_when_fail_on_error_true_saving_to_cache_throws_exception() throws CacheLoadingException,
-        CacheSavingException, InterruptedException {
+    public void testAddRequest_when_fail_on_error_true_saving_to_cache_throws_exception() throws CacheLoadingException, CacheSavingException,
+        InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
-        EasyMock
-            .expect(
-                mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),
-                    EasyMock.eq(TEST_CACHE_KEY))).andThrow(new CacheSavingException(""));
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY))).andThrow(
+            new CacheSavingException(""));
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -347,11 +341,9 @@ public void testAddRequest_when_fail_on_error_true_saving_to_cache_throws_except
 
     public void testAddRequest_doesnt_aggregate_requests_with_null_cache_key() throws InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest1 = createSuccessfulRequest(TEST_CLASS, null, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest1 = createSuccessfulRequest(TEST_CLASS, null, TEST_DURATION, TEST_RETURNED_DATA);
 
-        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, null, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, null, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerWithProgressStub<String> mockRequestListener1 = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet1 = new HashSet<RequestListener<?>>();
@@ -386,13 +378,12 @@ public void testAddRequest_doesnt_aggregate_requests_with_null_cache_key() throw
     // ============================================================================================
     // DO NOT NOTIFY LISTENERS
     // ============================================================================================
-    public void test_dontNotifyRequestListenersForRequest_with_2_request_and_one_not_notified()
-        throws InterruptedException, CacheLoadingException, CacheSavingException {
+    public void test_dontNotifyRequestListenersForRequest_with_2_request_and_one_not_notified() throws InterruptedException, CacheLoadingException,
+        CacheSavingException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA, WAIT_BEFORE_REQUEST_EXECUTION);
-        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY2,
-            TEST_DURATION, TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA,
+            WAIT_BEFORE_REQUEST_EXECUTION);
+        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY2, TEST_DURATION, TEST_RETURNED_DATA);
         RequestListenerWithProgressStub<String> requestListenerStub = new RequestListenerWithProgressStub<String>();
         RequestListenerWithProgressStub<String> requestListenerStub2 = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
@@ -400,13 +391,10 @@ public void test_dontNotifyRequestListenersForRequest_with_2_request_and_one_not
         Set<RequestListener<?>> requestListenerSet2 = new HashSet<RequestListener<?>>();
         requestListenerSet2.add(requestListenerStub2);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY2),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
-        EasyMock
-            .expect(
-                mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA),
-                    EasyMock.eq(TEST_CACHE_KEY2))).andReturn(TEST_RETURNED_DATA);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY2), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
+        EasyMock.expect(mockCacheManager.saveDataToCacheAndReturnData(EasyMock.eq(TEST_RETURNED_DATA), EasyMock.eq(TEST_CACHE_KEY2))).andReturn(
+            TEST_RETURNED_DATA);
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -431,13 +419,10 @@ public void test_dontNotifyRequestListenersForRequest_with_2_request_and_one_not
     // ============================================================================================
     // DO NOT NOTIFY LISTENERS
     // ============================================================================================
-    public void test_addRequest_with_2_requests_and_one_is_cancelled() throws InterruptedException,
-        CacheLoadingException, CacheSavingException {
+    public void test_addRequest_with_2_requests_and_one_is_cancelled() throws InterruptedException, CacheLoadingException, CacheSavingException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
-        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY2,
-            TEST_DURATION, TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest2 = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY2, TEST_DURATION, TEST_RETURNED_DATA);
         RequestListenerWithProgressStub<String> requestListenerStub = new RequestListenerWithProgressStub<String>();
         RequestListenerWithProgressStub<String> requestListenerStub2 = new RequestListenerWithProgressStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
@@ -445,9 +430,8 @@ public void test_addRequest_with_2_requests_and_one_is_cancelled() throws Interr
         Set<RequestListener<?>> requestListenerSet2 = new HashSet<RequestListener<?>>();
         requestListenerSet2.add(requestListenerStub2);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY2),
-                EasyMock.eq(TEST_DURATION))).andReturn(TEST_RETURNED_DATA);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY2), EasyMock.eq(TEST_DURATION)))
+            .andReturn(TEST_RETURNED_DATA);
         EasyMock.replay(mockCacheManager);
 
         stubRequest.cancel();
@@ -513,19 +497,16 @@ public void testRemoveAllDataFromCache_for_given_class_and_cachekey() {
     // ============================================================================================
     // TESTING NETWORK MANAGER DEPENDENCY
     // ============================================================================================
-    public void testAddRequestWhenNetworkIsDown() throws CacheLoadingException, CacheSavingException,
-        InterruptedException {
+    public void testAddRequestWhenNetworkIsDown() throws CacheLoadingException, CacheSavingException, InterruptedException {
         // given
-        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION,
-            TEST_RETURNED_DATA);
+        CachedSpiceRequestStub<String> stubRequest = createSuccessfulRequest(TEST_CLASS, TEST_CACHE_KEY, TEST_DURATION, TEST_RETURNED_DATA);
 
         RequestListenerStub<String> mockRequestListener = new RequestListenerStub<String>();
         Set<RequestListener<?>> requestListenerSet = new HashSet<RequestListener<?>>();
         requestListenerSet.add(mockRequestListener);
 
-        EasyMock.expect(
-            mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY),
-                EasyMock.eq(TEST_DURATION))).andReturn(null);
+        EasyMock.expect(mockCacheManager.loadDataFromCache(EasyMock.eq(TEST_CLASS), EasyMock.eq(TEST_CACHE_KEY), EasyMock.eq(TEST_DURATION)))
+            .andReturn(null);
         EasyMock.replay(mockCacheManager);
 
         // when
@@ -551,16 +532,14 @@ protected void tearDown() throws Exception {
     // PRIVATE METHODS
     // ============================================================================================
 
-    private <T> CachedSpiceRequestStub<T> createSuccessfulRequest(Class<T> clazz, String cacheKey, long maxTimeInCache,
-        T returnedData) {
+    private <T> CachedSpiceRequestStub<T> createSuccessfulRequest(Class<T> clazz, String cacheKey, long maxTimeInCache, T returnedData) {
         SpiceRequestStub<T> stubContentRequest = new SpiceRequestSucceedingStub<T>(clazz, returnedData);
         return new CachedSpiceRequestStub<T>(stubContentRequest, cacheKey, maxTimeInCache);
     }
 
-    private <T> CachedSpiceRequestStub<T> createSuccessfulRequest(Class<T> clazz, String cacheKey, long maxTimeInCache,
-        T returnedData, long waitBeforeExecution) {
-        SpiceRequestStub<T> stubContentRequest = new SpiceRequestSucceedingStub<T>(clazz, returnedData,
-            waitBeforeExecution);
+    private <T> CachedSpiceRequestStub<T> createSuccessfulRequest(Class<T> clazz, String cacheKey, long maxTimeInCache, T returnedData,
+        long waitBeforeExecution) {
+        SpiceRequestStub<T> stubContentRequest = new SpiceRequestSucceedingStub<T>(clazz, returnedData, waitBeforeExecution);
         return new CachedSpiceRequestStub<T>(stubContentRequest, cacheKey, maxTimeInCache);
     }
 
diff --git a/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/stub/SpiceRequestStub.java b/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/stub/SpiceRequestStub.java
index 90f149890..fdfc53b23 100644
--- a/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/stub/SpiceRequestStub.java
+++ b/robospice-core-parent/robospice-core-test/src/main/java/com/octo/android/robospice/stub/SpiceRequestStub.java
@@ -43,11 +43,11 @@ protected void signalStopWaiting() {
      *         {@link #loadDataFromNetwork()} method has been called.
      */
     public boolean isLoadDataFromNetworkCalled() {
+        signalStopWaiting();
         return isLoadDataFromNetworkCalled;
     }
 
-    public void awaitForLoadDataFromNetworkIsCalled(long millisecond)
-        throws InterruptedException {
+    public void awaitForLoadDataFromNetworkIsCalled(long millisecond) throws InterruptedException {
         if (isLoadDataFromNetworkCalled) {
             return;
         }
diff --git a/robospice-core-parent/robospice/src/main/java/com/octo/android/robospice/request/RequestProcessor.java b/robospice-core-parent/robospice/src/main/java/com/octo/android/robospice/request/RequestProcessor.java
index a4072b11a..7610702ad 100644
--- a/robospice-core-parent/robospice/src/main/java/com/octo/android/robospice/request/RequestProcessor.java
+++ b/robospice-core-parent/robospice/src/main/java/com/octo/android/robospice/request/RequestProcessor.java
@@ -85,19 +85,15 @@
      *            notified when no more requests are left, typically allowing
      *            the {@link SpiceService} to stop itself.
      */
-    public RequestProcessor(final Context context,
-        final ICacheManager cacheManager,
-        final ExecutorService executorService,
-        final RequestProcessorListener requestProcessorListener,
-        final NetworkStateChecker networkStateChecker) {
+    public RequestProcessor(final Context context, final ICacheManager cacheManager, final ExecutorService executorService,
+        final RequestProcessorListener requestProcessorListener, final NetworkStateChecker networkStateChecker) {
         this.applicationContext = context;
         this.cacheManager = cacheManager;
         this.requestProcessorListener = requestProcessorListener;
         this.networkStateChecker = networkStateChecker;
 
         handlerResponse = new Handler(Looper.getMainLooper());
-        spiceServiceListenerSet = Collections
-            .synchronizedSet(new HashSet<SpiceServiceServiceListener>());
+        spiceServiceListenerSet = Collections.synchronizedSet(new HashSet<SpiceServiceServiceListener>());
         this.executorService = executorService;
 
         this.networkStateChecker.checkPermissions(context);
@@ -106,14 +102,11 @@ public RequestProcessor(final Context context,
     // ============================================================================================
     // PUBLIC
     // ============================================================================================
-    public void addRequest(final CachedSpiceRequest<?> request,
-        final Set<RequestListener<?>> listRequestListener) {
-        Ln.d("Adding request to queue " + hashCode() + ": " + request
-            + " size is " + mapRequestToRequestListener.size());
+    public void addRequest(final CachedSpiceRequest<?> request, final Set<RequestListener<?>> listRequestListener) {
+        Ln.d("Adding request to queue " + hashCode() + ": " + request + " size is " + mapRequestToRequestListener.size());
 
         if (request.isCancelled()) {
-            for (final CachedSpiceRequest<?> cachedSpiceRequest : mapRequestToRequestListener
-                .keySet()) {
+            for (final CachedSpiceRequest<?> cachedSpiceRequest : mapRequestToRequestListener.keySet()) {
                 if (cachedSpiceRequest.equals(request)) {
                     cachedSpiceRequest.cancel();
                     return;
@@ -123,24 +116,19 @@ public void addRequest(final CachedSpiceRequest<?> request,
 
         boolean aggregated = false;
         if (listRequestListener != null) {
-            Set<RequestListener<?>> listRequestListenerForThisRequest = mapRequestToRequestListener
-                .get(request);
+            Set<RequestListener<?>> listRequestListenerForThisRequest = mapRequestToRequestListener.get(request);
 
             if (listRequestListenerForThisRequest == null) {
                 listRequestListenerForThisRequest = new HashSet<RequestListener<?>>();
-                this.mapRequestToRequestListener.put(request,
-                    listRequestListenerForThisRequest);
+                this.mapRequestToRequestListener.put(request, listRequestListenerForThisRequest);
             } else {
-                Ln.d(String.format(
-                    "Request for type %s and cacheKey %s already exists.",
-                    request.getResultType(), request.getRequestCacheKey()));
+                Ln.d(String.format("Request for type %s and cacheKey %s already exists.", request.getResultType(), request.getRequestCacheKey()));
                 aggregated = true;
             }
 
             listRequestListenerForThisRequest.addAll(listRequestListener);
             if (request.isProcessable()) {
-                notifyListenersOfRequestProgress(request, listRequestListener,
-                    request.getProgress());
+                notifyListenersOfRequestProgress(request, listRequestListener, request.getProgress());
             }
         }
 
@@ -153,8 +141,7 @@ public void addRequest(final CachedSpiceRequest<?> request,
             @Override
             public void onRequestCancelled() {
                 mapRequestToRequestListener.remove(request);
-                notifyListenersOfRequestCancellation(request,
-                    listRequestListener);
+                notifyListenersOfRequestCancellation(request, listRequestListener);
             }
         };
         request.setRequestCancellationListener(requestCancellationListener);
@@ -171,10 +158,7 @@ public void run() {
                     try {
                         processRequest(request);
                     } catch (final Throwable t) {
-                        Ln.d(
-                            t,
-                            "An unexpected error occured when processsing request %s",
-                            request.toString());
+                        Ln.d(t, "An unexpected error occured when processsing request %s", request.toString());
 
                     }
                 }
@@ -198,8 +182,7 @@ public void run() {
         final RequestProgressListener requestProgressListener = new RequestProgressListener() {
             @Override
             public void onRequestProgressUpdate(final RequestProgress progress) {
-                final Set<RequestListener<?>> listeners = mapRequestToRequestListener
-                    .get(request);
+                final Set<RequestListener<?>> listeners = mapRequestToRequestListener.get(request);
                 notifyListenersOfRequestProgress(request, listeners, progress);
             }
         };
@@ -210,11 +193,9 @@ public void onRequestProgressUpdate(final RequestProgress progress) {
             try {
                 Ln.d("Loading request from cache : " + request);
                 request.setStatus(RequestStatus.READING_FROM_CACHE);
-                result = loadDataFromCache(request.getResultType(),
-                    request.getRequestCacheKey(), request.getCacheDuration());
+                result = loadDataFromCache(request.getResultType(), request.getRequestCacheKey(), request.getCacheDuration());
                 if (result != null) {
-                    Ln.d("Request loaded from cache : " + request + " result="
-                        + result);
+                    Ln.d("Request loaded from cache : " + request + " result=" + result);
                     notifyListenersOfRequestSuccess(request, result);
                     return;
                 }
@@ -224,8 +205,7 @@ public void onRequestProgressUpdate(final RequestProgress progress) {
                     notifyListenersOfRequestFailure(request, e);
                     return;
                 }
-                cacheManager.removeDataFromCache(request.getResultType(),
-                    request.getRequestCacheKey());
+                cacheManager.removeDataFromCache(request.getResultType(), request.getRequestCacheKey());
                 Ln.d(e, "Cache file deleted.");
             }
         }
@@ -235,8 +215,7 @@ public void onRequestProgressUpdate(final RequestProgress progress) {
             Ln.d("Cache content not available or expired or disabled");
             if (!isNetworkAvailable(applicationContext)) {
                 Ln.e("Network is down.");
-                notifyListenersOfRequestFailure(request,
-                    new NoNetworkException());
+                notifyListenersOfRequestFailure(request, new NoNetworkException());
                 return;
             }
 
@@ -247,11 +226,8 @@ public void onRequestProgressUpdate(final RequestProgress progress) {
                 result = request.loadDataFromNetwork();
                 Ln.d("Network request call ended.");
             } catch (final Exception e) {
-                Ln.e(e,
-                    "An exception occured during request network execution :"
-                        + e.getMessage());
-                notifyListenersOfRequestFailure(request, new NetworkException(
-                    "Exception occured during invocation of web service.", e));
+                Ln.e(e, "An exception occured during request network execution :" + e.getMessage());
+                notifyListenersOfRequestFailure(request, new NetworkException("Exception occured during invocation of web service.", e));
                 return;
             }
 
@@ -261,14 +237,11 @@ public void onRequestProgressUpdate(final RequestProgress progress) {
                 try {
                     Ln.d("Start caching content...");
                     request.setStatus(RequestStatus.WRITING_TO_CACHE);
-                    result = saveDataToCacheAndReturnData(result,
-                        request.getRequestCacheKey());
+                    result = saveDataToCacheAndReturnData(result, request.getRequestCacheKey());
                     notifyListenersOfRequestSuccess(request, result);
                     return;
                 } catch (final CacheSavingException e) {
-                    Ln.d(
-                        "An exception occured during service execution :"
-                            + e.getMessage(), e);
+                    Ln.d("An exception occured during service execution :" + e.getMessage(), e);
                     if (failOnCacheError) {
                         notifyListenersOfRequestFailure(request, e);
                         return;
@@ -280,8 +253,7 @@ public void onRequestProgressUpdate(final RequestProgress progress) {
                         // network
                         notifyListenersOfRequestSuccess(request, result);
                     }
-                    cacheManager.removeDataFromCache(request.getResultType(),
-                        request.getRequestCacheKey());
+                    cacheManager.removeDataFromCache(request.getResultType(), request.getRequestCacheKey());
                     Ln.d(e, "Cache file deleted.");
                 }
             } else {
@@ -298,18 +270,14 @@ private void post(final Runnable r, final Object token) {
         handlerResponse.postAtTime(r, token, 0);
     }
 
-    private <T> void notifyListenersOfRequestProgress(
-        final CachedSpiceRequest<?> request,
-        final Set<RequestListener<?>> listeners, final RequestStatus status) {
-        notifyListenersOfRequestProgress(request, listeners,
-            new RequestProgress(status));
+    private <T> void notifyListenersOfRequestProgress(final CachedSpiceRequest<?> request, final Set<RequestListener<?>> listeners,
+        final RequestStatus status) {
+        notifyListenersOfRequestProgress(request, listeners, new RequestProgress(status));
     }
 
-    private <T> void notifyListenersOfRequestProgress(
-        final CachedSpiceRequest<?> request,
-        final Set<RequestListener<?>> listeners, final RequestProgress progress) {
-        post(new ProgressRunnable(listeners, progress),
-            request.getRequestCacheKey());
+    private <T> void notifyListenersOfRequestProgress(final CachedSpiceRequest<?> request, final Set<RequestListener<?>> listeners,
+        final RequestProgress progress) {
+        post(new ProgressRunnable(listeners, progress), request.getRequestCacheKey());
         checkAllRequestComplete();
     }
 
@@ -320,39 +288,26 @@ private void checkAllRequestComplete() {
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
-    private <T> void notifyListenersOfRequestSuccess(
-        final CachedSpiceRequest<T> request, final T result) {
-        final Set<RequestListener<?>> listeners = mapRequestToRequestListener
-            .get(request);
-        notifyListenersOfRequestProgress(request, listeners,
-            RequestStatus.COMPLETE);
-        post(new ResultRunnable(listeners, result),
-            request.getRequestCacheKey());
+    private <T> void notifyListenersOfRequestSuccess(final CachedSpiceRequest<T> request, final T result) {
+        final Set<RequestListener<?>> listeners = mapRequestToRequestListener.get(request);
+        notifyListenersOfRequestProgress(request, listeners, RequestStatus.COMPLETE);
+        post(new ResultRunnable(listeners, result), request.getRequestCacheKey());
         notifyOfRequestProcessed(request);
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
-    private <T> void notifyListenersOfRequestFailure(
-        final CachedSpiceRequest<T> request, final SpiceException e) {
-        final Set<RequestListener<?>> listeners = mapRequestToRequestListener
-            .get(request);
-        notifyListenersOfRequestProgress(request, listeners,
-            RequestStatus.COMPLETE);
+    private <T> void notifyListenersOfRequestFailure(final CachedSpiceRequest<T> request, final SpiceException e) {
+        final Set<RequestListener<?>> listeners = mapRequestToRequestListener.get(request);
+        notifyListenersOfRequestProgress(request, listeners, RequestStatus.COMPLETE);
         post(new ResultRunnable(listeners, e), request.getRequestCacheKey());
         notifyOfRequestProcessed(request);
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
-    private void notifyListenersOfRequestCancellation(
-        final CachedSpiceRequest<?> request,
-        final Set<RequestListener<?>> listeners) {
-        Ln.d("Not calling network request : " + request
-            + " as it is cancelled. ");
-        notifyListenersOfRequestProgress(request, listeners,
-            RequestStatus.COMPLETE);
-        post(new ResultRunnable(listeners, new RequestCancelledException(
-            "Request has been cancelled explicitely.")),
-            request.getRequestCacheKey());
+    private void notifyListenersOfRequestCancellation(final CachedSpiceRequest<?> request, final Set<RequestListener<?>> listeners) {
+        Ln.d("Not calling network request : " + request + " as it is cancelled. ");
+        notifyListenersOfRequestProgress(request, listeners, RequestStatus.COMPLETE);
+        post(new ResultRunnable(listeners, new RequestCancelledException("Request has been cancelled explicitely.")), request.getRequestCacheKey());
         notifyOfRequestProcessed(request);
     }
 
@@ -366,16 +321,11 @@ private void notifyListenersOfRequestCancellation(
      *            the collection of listeners associated to request not to be
      *            notified
      */
-    public void dontNotifyRequestListenersForRequest(
-        final CachedSpiceRequest<?> request,
-        final Collection<RequestListener<?>> listRequestListener) {
-        handlerResponse
-            .removeCallbacksAndMessages(request.getRequestCacheKey());
-        final Set<RequestListener<?>> setRequestListener = mapRequestToRequestListener
-            .get(request);
+    public void dontNotifyRequestListenersForRequest(final CachedSpiceRequest<?> request, final Collection<RequestListener<?>> listRequestListener) {
+        handlerResponse.removeCallbacksAndMessages(request.getRequestCacheKey());
+        final Set<RequestListener<?>> setRequestListener = mapRequestToRequestListener.get(request);
         if (setRequestListener != null && listRequestListener != null) {
-            Ln.d("Removing listeners of request : " + request.toString()
-                + " : " + setRequestListener.size());
+            Ln.d("Removing listeners of request : " + request.toString() + " : " + setRequestListener.size());
             setRequestListener.removeAll(listRequestListener);
         }
     }
@@ -392,12 +342,10 @@ public void checkPermissions(final Context context) {
     }
 
     public static boolean hasNetworkPermission(final Context context) {
-        return context.getPackageManager().checkPermission(
-            "android.permission.INTERNET", context.getPackageName()) == PackageManager.PERMISSION_GRANTED;
+        return context.getPackageManager().checkPermission("android.permission.INTERNET", context.getPackageName()) == PackageManager.PERMISSION_GRANTED;
     }
 
-    public boolean removeDataFromCache(final Class<?> clazz,
-        final Object cacheKey) {
+    public boolean removeDataFromCache(final Class<?> clazz, final Object cacheKey) {
         return cacheManager.removeDataFromCache(clazz, cacheKey);
     }
 
@@ -421,15 +369,11 @@ public void setFailOnCacheError(final boolean failOnCacheError) {
     // PRIVATE
     // ============================================================================================
 
-    private <T> T loadDataFromCache(final Class<T> clazz,
-        final Object cacheKey, final long maxTimeInCacheBeforeExpiry)
-        throws CacheLoadingException {
-        return cacheManager.loadDataFromCache(clazz, cacheKey,
-            maxTimeInCacheBeforeExpiry);
+    private <T> T loadDataFromCache(final Class<T> clazz, final Object cacheKey, final long maxTimeInCacheBeforeExpiry) throws CacheLoadingException {
+        return cacheManager.loadDataFromCache(clazz, cacheKey, maxTimeInCacheBeforeExpiry);
     }
 
-    private <T> T saveDataToCacheAndReturnData(final T data,
-        final Object cacheKey) throws CacheSavingException {
+    private <T> T saveDataToCacheAndReturnData(final T data, final Object cacheKey) throws CacheSavingException {
         return cacheManager.saveDataToCacheAndReturnData(data, cacheKey);
     }
 
@@ -437,8 +381,7 @@ public void setFailOnCacheError(final boolean failOnCacheError) {
         private final RequestProgress progress;
         private final Set<RequestListener<?>> listeners;
 
-        public ProgressRunnable(final Set<RequestListener<?>> listeners,
-            final RequestProgress progress) {
+        public ProgressRunnable(final Set<RequestListener<?>> listeners, final RequestProgress progress) {
             this.progress = progress;
             this.listeners = listeners;
         }
@@ -450,13 +393,11 @@ public void run() {
                 return;
             }
 
-            Ln.v("Notifying " + listeners.size() + " listeners of progress "
-                + progress);
+            Ln.v("Notifying " + listeners.size() + " listeners of progress " + progress);
             for (final RequestListener<?> listener : listeners) {
-                if (listener instanceof RequestProgressListener) {
+                if (listener != null && listener instanceof RequestProgressListener) {
                     Ln.v("Notifying %s", listener.getClass().getSimpleName());
-                    ((RequestProgressListener) listener)
-                        .onRequestProgressUpdate(progress);
+                    ((RequestProgressListener) listener).onRequestProgressUpdate(progress);
                 }
             }
         }
@@ -468,14 +409,12 @@ public void run() {
         private T result;
         private final Set<RequestListener<?>> listeners;
 
-        public ResultRunnable(final Set<RequestListener<?>> listeners,
-            final T result) {
+        public ResultRunnable(final Set<RequestListener<?>> listeners, final T result) {
             this.result = result;
             this.listeners = listeners;
         }
 
-        public ResultRunnable(final Set<RequestListener<?>> listeners,
-            final SpiceException spiceException) {
+        public ResultRunnable(final Set<RequestListener<?>> listeners, final SpiceException spiceException) {
             this.spiceException = spiceException;
             this.listeners = listeners;
         }
@@ -486,18 +425,18 @@ public void run() {
                 return;
             }
 
-            final String resultMsg = spiceException == null ? "success"
-                : "failure";
-            Ln.v("Notifying " + listeners.size() + " listeners of request "
-                + resultMsg);
+            final String resultMsg = spiceException == null ? "success" : "failure";
+            Ln.v("Notifying " + listeners.size() + " listeners of request " + resultMsg);
             for (final RequestListener<?> listener : listeners) {
-                @SuppressWarnings("unchecked")
-                final RequestListener<T> listener2 = (RequestListener<T>) listener;
-                Ln.v("Notifying %s", listener.getClass().getSimpleName());
-                if (spiceException == null) {
-                    listener2.onRequestSuccess(result);
-                } else {
-                    listener.onRequestFailure(spiceException);
+                if (listener != null) {
+                    @SuppressWarnings("unchecked")
+                    final RequestListener<T> listenerOfT = (RequestListener<T>) listener;
+                    Ln.v("Notifying %s", listener.getClass().getSimpleName());
+                    if (spiceException == null) {
+                        listenerOfT.onRequestSuccess(result);
+                    } else {
+                        listener.onRequestFailure(spiceException);
+                    }
                 }
             }
         }
@@ -514,8 +453,7 @@ public String toString() {
         stringBuilder.append(mapRequestToRequestListener.keySet().size());
 
         stringBuilder.append(", listeners per requests = [");
-        for (final Map.Entry<CachedSpiceRequest<?>, Set<RequestListener<?>>> entry : mapRequestToRequestListener
-            .entrySet()) {
+        for (final Map.Entry<CachedSpiceRequest<?>, Set<RequestListener<?>>> entry : mapRequestToRequestListener.entrySet()) {
             stringBuilder.append(entry.getKey().getClass().getName());
             stringBuilder.append(":");
             stringBuilder.append(entry.getKey());
@@ -532,19 +470,16 @@ public String toString() {
         return stringBuilder.toString();
     }
 
-    public void addSpiceServiceListener(
-        final SpiceServiceServiceListener spiceServiceServiceListener) {
+    public void addSpiceServiceListener(final SpiceServiceServiceListener spiceServiceServiceListener) {
         this.spiceServiceListenerSet.add(spiceServiceServiceListener);
     }
 
-    public void removeSpiceServiceListener(
-        final SpiceServiceServiceListener spiceServiceServiceListener) {
+    public void removeSpiceServiceListener(final SpiceServiceServiceListener spiceServiceServiceListener) {
         this.spiceServiceListenerSet.add(spiceServiceServiceListener);
     }
 
     protected void notifyOfRequestProcessed(final CachedSpiceRequest<?> request) {
-        Ln.v("Removing %s  size is %d", request,
-            mapRequestToRequestListener.size());
+        Ln.v("Removing %s  size is %d", request, mapRequestToRequestListener.size());
         mapRequestToRequestListener.remove(request);
 
         checkAllRequestComplete();
