diff --git a/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersisterTest.java b/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersisterTest.java
index d383b6b47..e43bb34a0 100644
--- a/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersisterTest.java
+++ b/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersisterTest.java
@@ -1,8 +1,10 @@
 package com.octo.android.robospice.persistence.binary;
 
-import android.app.Application;
-import android.graphics.Bitmap;
 import android.test.InstrumentationTestCase;
+import android.graphics.BitmapFactory;
+import android.graphics.Bitmap;
+import android.app.Application;
+
 import com.octo.android.robospice.persistence.DurationInMillis;
 import com.octo.android.robospice.persistence.exception.CacheLoadingException;
 
@@ -10,15 +12,19 @@
 
     private static final int BITMAP_HEIGHT = 10;
     private static final int BITMAP_WIDTH = 10;
-    private static final int BYTES_PER_PIXEL = 4;
-    private static final Bitmap testBitmap = Bitmap.createBitmap(BITMAP_WIDTH,
-        BITMAP_HEIGHT, Bitmap.Config.ARGB_8888);
+    private static final int BYTES_PER_PIXEL_ARGB_8888 = 4;
+    private static final int BYTES_PER_PIXEL_RGB_565 = 2;
+    private static final Bitmap testBitmapLarge = Bitmap.createBitmap(
+        BITMAP_WIDTH, BITMAP_HEIGHT, Bitmap.Config.ARGB_8888);
+    private static final Bitmap testBitmapSmall = Bitmap.createBitmap(
+        BITMAP_WIDTH, BITMAP_HEIGHT, Bitmap.Config.RGB_565);
 
     private static final String CACHE_KEY_1 = "cacheKey1";
 
-    private static final int BITMAP_SIZE = BITMAP_HEIGHT * BITMAP_WIDTH
-        * BYTES_PER_PIXEL;
-
+    private static final int LARGE_BITMAP_SIZE = BITMAP_HEIGHT * BITMAP_WIDTH
+        * BYTES_PER_PIXEL_ARGB_8888;
+    private static final int SMALL_BITMAP_SIZE = BITMAP_HEIGHT * BITMAP_WIDTH
+        * BYTES_PER_PIXEL_RGB_565;
     private static final long ONE_MILLISECOND = 1;
     private static final String EXPIRED_DATA_MSG = "Cache loaded expired data instead of throwing a CacheLoadingException.";
 
@@ -41,30 +47,33 @@ private void assertBitmapSizeEquals(Bitmap bitmap, int bytes) {
     }
 
     public void testSaveDataToCache() throws Exception {
-        assertNotNull(testPersister.saveDataToCacheAndReturnData(testBitmap,
-            CACHE_KEY_1));
+        assertNotNull(testPersister.saveDataToCacheAndReturnData(
+            testBitmapLarge, CACHE_KEY_1));
         assertTrue(testPersister.getCacheFile(CACHE_KEY_1).exists());
     }
 
     public void testLoadDataFromCacheNoExpiration() throws Exception {
-        testPersister.saveDataToCacheAndReturnData(testBitmap, CACHE_KEY_1);
+        testPersister
+            .saveDataToCacheAndReturnData(testBitmapLarge, CACHE_KEY_1);
         Bitmap data = testPersister.loadDataFromCache(CACHE_KEY_1,
             DurationInMillis.ALWAYS);
         assertNotNull(data);
-        assertBitmapSizeEquals(data, BITMAP_SIZE);
+        assertBitmapSizeEquals(data, LARGE_BITMAP_SIZE);
 
     }
 
     public void testLoadDataFromCacheNotExpired() throws Exception {
-        testPersister.saveDataToCacheAndReturnData(testBitmap, CACHE_KEY_1);
+        testPersister
+            .saveDataToCacheAndReturnData(testBitmapLarge, CACHE_KEY_1);
         Bitmap data = testPersister.loadDataFromCache(CACHE_KEY_1,
             Long.MAX_VALUE);
         assertNotNull(data);
-        assertBitmapSizeEquals(data, BITMAP_SIZE);
+        assertBitmapSizeEquals(data, LARGE_BITMAP_SIZE);
     }
 
     public void testLoadDataFromCacheExpired() throws Exception {
-        testPersister.saveDataToCacheAndReturnData(testBitmap, CACHE_KEY_1);
+        testPersister
+            .saveDataToCacheAndReturnData(testBitmapLarge, CACHE_KEY_1);
         Thread.sleep(ONE_MILLISECOND);
         try {
             testPersister.loadDataFromCache(CACHE_KEY_1, ONE_MILLISECOND);
@@ -74,4 +83,27 @@ public void testLoadDataFromCacheExpired() throws Exception {
         }
     }
 
+    public void testLoadDataFromCacheNonDefaultDecoding() throws Exception {
+
+        testPersister
+            .saveDataToCacheAndReturnData(testBitmapSmall, CACHE_KEY_1);
+        Bitmap data = testPersister.loadDataFromCache(CACHE_KEY_1,
+            DurationInMillis.ALWAYS);
+        assertNotNull(data);
+        assertBitmapSizeEquals(data, SMALL_BITMAP_SIZE);
+    }
+
+    public void testLoadDataFromCacheWithDecodingOptions() throws Exception {
+        BitmapFactory.Options opts = new BitmapFactory.Options();
+        opts.inSampleSize = 2;
+        testPersister.setDecodingOptions(opts);
+
+        testPersister
+            .saveDataToCacheAndReturnData(testBitmapLarge, CACHE_KEY_1);
+        Bitmap data = testPersister.loadDataFromCache(CACHE_KEY_1,
+            DurationInMillis.ALWAYS);
+        assertNotNull(data);
+        assertBitmapSizeEquals(data, LARGE_BITMAP_SIZE / 4);
+    }
+
 }
diff --git a/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersisterTest.java b/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersisterTest.java
index ce69932b4..5a96cce0a 100644
--- a/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersisterTest.java
+++ b/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersisterTest.java
@@ -1,9 +1,9 @@
 package com.octo.android.robospice.persistence.binary;
 
-import android.app.Application;
-import android.graphics.Bitmap;
-import android.support.v4.util.LruCache;
 import android.test.InstrumentationTestCase;
+import android.support.v4.util.LruCache;
+import android.graphics.Bitmap;
+import android.app.Application;
 
 public class InMemoryBitmapObjectPersisterTest extends InstrumentationTestCase {
 
@@ -25,9 +25,8 @@
 
     private class TestBitmapPersister extends InMemoryBitmapObjectPersister {
 
-        private TestBitmapPersister( Application application, int cacheSize )
-        {
-            super( application, cacheSize );
+        private TestBitmapPersister(Application application, int cacheSize) {
+            super(application, cacheSize);
         }
 
         // increase visibility
@@ -53,5 +52,4 @@ public void testCacheSizeCalculation() throws Exception {
         assertEquals(testPersister.getMemoryCache().size(), BITMAP_SIZE);
     }
 
-
 }
diff --git a/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersisterTest.java b/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersisterTest.java
index d8549d8ac..1411be76b 100644
--- a/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersisterTest.java
+++ b/robospice-cache-parent/robospice-cache-test/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersisterTest.java
@@ -1,8 +1,9 @@
 package com.octo.android.robospice.persistence.memory;
 
-import android.app.Application;
-import android.support.v4.util.LruCache;
 import android.test.InstrumentationTestCase;
+import android.support.v4.util.LruCache;
+import android.app.Application;
+
 import com.octo.android.robospice.persistence.DurationInMillis;
 import com.octo.android.robospice.persistence.ObjectPersister;
 import com.octo.android.robospice.persistence.exception.CacheLoadingException;
@@ -11,67 +12,64 @@
 public class InMemoryLRUCacheObjectPersisterTest extends
     InstrumentationTestCase {
 
-    private static final int    CACHE_SIZE      = 2;
-    private static final String CACHE_KEY_1     = "cacheKey1";
-    private static final String CACHE_KEY_2     = "cacheKey2";
-    private static final String CACHE_KEY_3     = "cacheKey3";
-    private static final String GENERIC_DATA    = "hello world!";
-    private static final long   ONE_MILLISECOND = 1;
-    private static final long   TEN_MILLISECONDS = ONE_MILLISECOND * 10;
+    private static final int CACHE_SIZE = 2;
+    private static final String CACHE_KEY_1 = "cacheKey1";
+    private static final String CACHE_KEY_2 = "cacheKey2";
+    private static final String CACHE_KEY_3 = "cacheKey3";
+    private static final String GENERIC_DATA = "hello world!";
+    private static final long ONE_MILLISECOND = 1;
+    private static final long TEN_MILLISECONDS = ONE_MILLISECOND * 10;
 
-    private static final String EXPIRED_DATA_MSG      = "Cache loaded expired data instead of throwing a CacheLoadingException.";
+    private static final String EXPIRED_DATA_MSG = "Cache loaded expired data instead of throwing a CacheLoadingException.";
     private static final String DID_NOT_PURGE_LRU_MSG = "Cache loaded old data that should have been purged by the LRUCache.";
 
     private TestLRUPersister testPersister;
     private TestLRUPersister testPersisterWithFallback;
 
-    private class TestLRUPersister extends InMemoryLRUCacheObjectPersister<String>
-    {
+    private class TestLRUPersister extends
+        InMemoryLRUCacheObjectPersister<String> {
 
-        private TestLRUPersister( Application application )
-        {
-            super( application, String.class );
+        private TestLRUPersister(Application application) {
+            super(application, String.class);
         }
 
-        private TestLRUPersister( Application application,
-                                  ObjectPersister<String> fallback )
-        {
-            super( application, String.class, fallback );
+        private TestLRUPersister(Application application,
+            ObjectPersister<String> fallback) {
+            super(application, String.class, fallback);
         }
 
         @Override
-        protected LruCache<Object, CacheItem<String>> instantiateLRUCache()
-        {
+        protected LruCache<Object, CacheItem<String>> instantiateLRUCache() {
             return new LruCache<Object, CacheItem<String>>(CACHE_SIZE);
         }
 
         // increase visibility
         @Override
-        public LruCache<Object, CacheItem<String>> getMemoryCache()
-        {
+        public LruCache<Object, CacheItem<String>> getMemoryCache() {
             return super.getMemoryCache();
         }
 
-
     }
 
     public void setUp() {
         Application application = (Application) getInstrumentation()
             .getTargetContext().getApplicationContext();
-        testPersister = new TestLRUPersister( application );
+        testPersister = new TestLRUPersister(application);
 
-        InFileStringObjectPersister fallbackPersister = new InFileStringObjectPersister( application );
+        InFileStringObjectPersister fallbackPersister = new InFileStringObjectPersister(
+            application);
 
-        testPersisterWithFallback = new TestLRUPersister( application, fallbackPersister );
+        testPersisterWithFallback = new TestLRUPersister(application,
+            fallbackPersister);
     }
 
     public void tearDown() {
-        testPersisterWithFallback.getFallbackPersister().removeAllDataFromCache();
+        testPersisterWithFallback.getFallbackPersister()
+            .removeAllDataFromCache();
     }
 
     public void testSaveDataToCacheAndReturnData() throws Exception {
 
-
         testPersister.saveDataToCacheAndReturnData(GENERIC_DATA, CACHE_KEY_1);
         assertNotNull(testPersister.getMemoryCache().get(CACHE_KEY_1));
     }
@@ -95,7 +93,7 @@ public void testLoadDataFromCacheExpired() throws Exception {
         Thread.sleep(TEN_MILLISECONDS);
         try {
             Object data = testPersister.loadDataFromCache(CACHE_KEY_1,
-                                                          ONE_MILLISECOND);
+                ONE_MILLISECOND);
             throw new Exception(EXPIRED_DATA_MSG);
         } catch (CacheLoadingException e) {
             // throwing this error is the expected behavior
@@ -116,9 +114,11 @@ public void testPurgeLeastRecentlyUsed() throws Exception {
     }
 
     public void testFallback() throws Exception {
-        testPersisterWithFallback.saveDataToCacheAndReturnData(GENERIC_DATA, CACHE_KEY_1);
+        testPersisterWithFallback.saveDataToCacheAndReturnData(GENERIC_DATA,
+            CACHE_KEY_1);
         testPersisterWithFallback.getMemoryCache().evictAll();
-        assertNotNull( testPersisterWithFallback.loadDataFromCache( CACHE_KEY_1, DurationInMillis.ALWAYS) );
+        assertNotNull(testPersisterWithFallback.loadDataFromCache(CACHE_KEY_1,
+            DurationInMillis.ALWAYS));
     }
 
 }
diff --git a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersister.java b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersister.java
index 534efed25..7c5c52f6d 100644
--- a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersister.java
+++ b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InFileBitmapObjectPersister.java
@@ -8,22 +8,39 @@
 import com.octo.android.robospice.persistence.exception.CacheSavingException;
 import com.octo.android.robospice.persistence.file.InFileObjectPersister;
 
-import java.io.*;
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
 
 /**
  * @author David Stemmer
  */
 public class InFileBitmapObjectPersister extends InFileObjectPersister<Bitmap> {
 
+    private static final int DEFAULT_COMPRESS_QUALITY = 100;
+
     private static final String ERROR_CACHE_MISS_EXPIRED = "Found file in cache but the data was stale: %s";
     private static final String ERROR_CACHE_MISS_NOT_FOUND = "No cached file for path: %s";
     private static final String ERROR_COULD_NOT_COMPRESS_BITMAP = "Could not compress bitmap for path: %s";
     private static final String ERROR_COULD_NOT_DECODE_BITMAP = "Found the file but could not decode bitmap for path: %s";
 
+    private int compressionQuality = DEFAULT_COMPRESS_QUALITY;
+    private BitmapFactory.Options decodingOptions = null;
+
     public InFileBitmapObjectPersister(Application application) {
         super(application, Bitmap.class);
     }
 
+    public void setCompressionQuality(int quality) {
+        compressionQuality = quality;
+    }
+
+    public void setDecodingOptions(BitmapFactory.Options opts) {
+        decodingOptions = opts;
+    }
+
     @Override
     public Bitmap loadDataFromCache(Object cacheKey, long maxTimeInCache)
         throws CacheLoadingException {
@@ -38,14 +55,16 @@ public Bitmap loadDataFromCache(Object cacheKey, long maxTimeInCache)
         }
 
         boolean dataDoesExpire = maxTimeInCache != DurationInMillis.ALWAYS;
-        boolean dataIsStale = System.currentTimeMillis() - cachedFile.lastModified() > maxTimeInCache;
+        boolean dataIsStale = System.currentTimeMillis()
+            - cachedFile.lastModified() > maxTimeInCache;
         if (dataDoesExpire && dataIsStale) {
             String errorMsg = String.format(ERROR_CACHE_MISS_EXPIRED,
                 cachedFile.getAbsolutePath());
             throw new CacheLoadingException(errorMsg);
         }
 
-        Bitmap data = BitmapFactory.decodeFile(cachedFile.getAbsolutePath());
+        Bitmap data = BitmapFactory.decodeFile(cachedFile.getAbsolutePath(),
+            decodingOptions);
 
         boolean bitmapNotLoaded = data == null;
         if (bitmapNotLoaded) {
@@ -66,8 +85,8 @@ public Bitmap saveDataToCacheAndReturnData(Bitmap data, Object cacheKey)
             BufferedOutputStream out = new BufferedOutputStream(
                 new FileOutputStream(cacheFile));
 
-            boolean didCompress = data.compress(Bitmap.CompressFormat.PNG, 100,
-                out);
+            boolean didCompress = data.compress(Bitmap.CompressFormat.PNG,
+                compressionQuality, out);
             if (!didCompress) {
                 /*
                  * we don't throw the error immediately so the stream has an
diff --git a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java
index 3972b5c5a..21d00f3fe 100644
--- a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java
+++ b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/binary/InMemoryBitmapObjectPersister.java
@@ -1,10 +1,11 @@
 package com.octo.android.robospice.persistence.binary;
 
-import android.app.ActivityManager;
-import android.app.Application;
-import android.content.Context;
-import android.graphics.Bitmap;
 import android.support.v4.util.LruCache;
+import android.graphics.Bitmap;
+import android.content.Context;
+import android.app.Application;
+import android.app.ActivityManager;
+
 import com.octo.android.robospice.persistence.ObjectPersister;
 import com.octo.android.robospice.persistence.memory.InMemoryLRUCacheObjectPersister;
 
@@ -26,7 +27,8 @@
     private static final int BASELINE_MEMCLASS = 16;
 
     /**
-     * Convenience constructor with the default cache size and no fallback persister.
+     * Convenience constructor with the default cache size and no fallback
+     * persister.
      * @param application
      *            the Android application object
      */
@@ -42,7 +44,7 @@ public InMemoryBitmapObjectPersister(Application application) {
      */
 
     public InMemoryBitmapObjectPersister(Application application, int cacheSize) {
-        this (application, cacheSize, null);
+        this(application, cacheSize, null);
     }
 
     /**
@@ -55,10 +57,8 @@ public InMemoryBitmapObjectPersister(Application application, int cacheSize) {
      *            memory.
      */
 
-    public InMemoryBitmapObjectPersister (
-        Application application,
-        int cacheSize,
-        ObjectPersister<Bitmap> fallbackPersister) {
+    public InMemoryBitmapObjectPersister(Application application,
+        int cacheSize, ObjectPersister<Bitmap> fallbackPersister) {
         super(application, Bitmap.class, fallbackPersister);
 
         // base Android memory class is 16 MB per process
diff --git a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersister.java b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersister.java
index 3466118fa..d3efeb4ed 100644
--- a/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersister.java
+++ b/robospice-cache-parent/robospice-cache/src/main/java/com/octo/android/robospice/persistence/memory/InMemoryLRUCacheObjectPersister.java
@@ -99,7 +99,7 @@ public T loadDataFromCache(Object cacheKey, long maxTimeInCacheBeforeExpiry)
         String keyString = cacheKey.toString();
         CacheItem<T> cacheItem = getMemoryCache().get(keyString);
 
-        T dataToReturn =  null;
+        T dataToReturn = null;
 
         /*
          * Since this is an in-memory cache and will be dumped when the device
@@ -112,21 +112,22 @@ public T loadDataFromCache(Object cacheKey, long maxTimeInCacheBeforeExpiry)
 
         if (cacheItem != null) {
             boolean dataDoesExpire = maxTimeInCacheBeforeExpiry != DurationInMillis.ALWAYS;
-            boolean dataIsStale = SystemClock.elapsedRealtime() - cacheItem.created > maxTimeInCacheBeforeExpiry;
+            boolean dataIsStale = SystemClock.elapsedRealtime()
+                - cacheItem.created > maxTimeInCacheBeforeExpiry;
             if (dataDoesExpire && dataIsStale) {
                 String errorMsg = String.format(CACHE_MISS_EXPIRED, cacheKey);
-                throw new CacheLoadingException( errorMsg );
+                throw new CacheLoadingException(errorMsg);
             } else {
                 dataToReturn = cacheItem.data;
             }
-        } else if (fallbackPersister != null ){
-            dataToReturn = fallbackPersister.loadDataFromCache( cacheKey,
-                                                        maxTimeInCacheBeforeExpiry );
+        } else if (fallbackPersister != null) {
+            dataToReturn = fallbackPersister.loadDataFromCache(cacheKey,
+                maxTimeInCacheBeforeExpiry);
         }
 
         boolean dataIsMissing = dataToReturn == null;
-        if (dataIsMissing)  {
-            String errorMsg = String.format( CACHE_MISS_NOT_FOUND, cacheKey );
+        if (dataIsMissing) {
+            String errorMsg = String.format(CACHE_MISS_NOT_FOUND, cacheKey);
             throw new CacheLoadingException(errorMsg);
         }
 
