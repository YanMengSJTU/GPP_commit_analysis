diff --git a/README.md b/README.md
index eee7819d..855fd9a3 100644
--- a/README.md
+++ b/README.md
@@ -35,10 +35,7 @@ Instead, do one of following:
     * or, [StackOverflow](http://stackoverflow.com), `#jackson`
 * For reporting issue on Jackson implementation, report it against one of components
     * Most commonly issue you have is with [Jackson databind](../../../jackson-databind/issues)
-
-With that the valid use case for *issues for this repository* are:
-    * Changes to this `README.md`, including links, often for adding links to new related projects
-    * Suggestions for new Jackson modules, possibly including transfer of existing github projects under `FasterXML` organization
+* For suggestion new ideas try [Jackson Future Ideas](../../../jackson-future-ideas)
 
 ## Actively developed versions
 
@@ -49,7 +46,7 @@ This is by design and was chosen as the strategy to allow smoother migration fro
 
 The latest stable versions from these branches are:
 
-* [2.6.4](../../wiki/Jackson-Release-2.6.4), released 07-Dec-2015
+* [2.7.0](../../wiki/Jackson-Release-2.7), released 10-Dec-2015
 * [1.9.13](wiki.fasterxml.com/JacksonRelease19), released 14-Jul-2013
 
 Recommended way to use Jackson is through Maven repositories; releases are made to Central Maven Repository (CMR).
@@ -80,12 +77,14 @@ serializers and deserializers so that Jackson `databind` package (`ObjectMapper`
 
 Datatype modules directly maintained by Jackson team are:
 
+* Standard [Collections](../../../jackson-datatypes-collections) datatype modules:
+    * [HPPC](../../../jackson-datatypes-collections/tree/master/hppc): support for [High-Performance Primitive Containers](http://labs.carrotsearch.com/hppc.html) containers
+    * [PCollections](../../../jackson-datatypes-collections/tree/master/pcollections): support for [PCollections](http://pcollections.org/) datatypes (NEW in Jackson 2.7!)
 * [Guava](../../../jackson-datatype-guava): support for many of [Guava](http://code.google.com/p/guava-libraries/) datatypes.
 * [Hibernate](../../../jackson-datatype-hibernate): support for Hibernate features (lazy-loading, proxies)
-* [HPPC](../../../jackson-datatype-hppc): support for [High-Performance Primitive Containers](http://labs.carrotsearch.com/hppc.html) containers
 * [Joda](../../../jackson-datatype-joda): support for types of [Joda](http://joda-time.sourceforge.net/) date/time library datatypes
 * [JDK7](../../../jackson-datatype-jdk7): support for JDK 7 data types not included in previous versions
-    * Planned to be deprecated in 2.7, as baseline JDK becomes 7, support to be included in `jackson-databind`
+    * Deprecated in 2.7, as baseline JDK becomes 7, support to be included in `jackson-databind`
 * [JDK8](../../../jackson-datatype-jdk8): support for JDK 8 data types not included in previous versions, including `Optional` (but excluding new Date types which are in JSR-310 module above)
 * [JSR-310 (Java 8 Date)](../../../jackson-datatype-jsr310): support for "Java 8 Dates" (ones added in JDK 8)
     * Also, for pre-Java8 users can use one of alternate pre-Java8 backports:
@@ -116,7 +115,7 @@ In addition, we are aware of additional modules that are not directly maintained
 [Jackson JAX-RS Providers](../../../jackson-jaxrs-providers) has handlers to add dataformat
 support for JAX-RS implementations (like Jersey, RESTeasy, CXF).
 Providers implement `MessageBodyReader` and `MessageBodyWriter`.
-Supported formats currently include `JSON`, `Smile`, `XML` and `CBOR`.
+Supported formats currently include `JSON`, `Smile`, `XML`, `YAML` and `CBOR`.
 
 ### Data format modules
 
@@ -136,6 +135,7 @@ Currently following data format modules are fully usable and supported:
 
 There are also other data format modules, provided by developers outside Jackson core team:
 
+* [BEncode](https://github.com/zsoltm/jackson-dataformat-bencode): support for reading/writing [BEncode](https://en.wikipedia.org/wiki/Bencode) (BitTorrent format) encoded data
 * [bson4jackson](https://github.com/michel-kraemer/bson4jackson): adds support for [BSON](http://en.wikipedia.org/wiki/BSON) data format (by Mongo project).
     * Implemented as full streaming implementation, which allows full access (streaming, data-binding, tree-model)
     * Also see [MongoJack] library below; while not a dataformat module, it allows access to BSON data as well.
@@ -166,10 +166,11 @@ Other fully usable modules by FasterXML team include:
 
 * [Afterburner](../../../jackson-module-afterburner): speed up databinding by 30-40% with bytecode generation to replace use of Reflection
 * [JAXB Annotations](../../../jackson-module-jaxb-annotations): allow use of `JAXB` annotations as an alternative (in addition to or instead of) standard Jackson annotations
-* [Mr Bean](../../../jackson-module-mrbean): "type materialization" -- let Mr Bean generate implementation classes on-the-fly (NO source code generation), to avoid monkey code
-* [OSGi](../../../jackson-module-osgi): allows injection of values from OSGi registry, via standard Jackson `@JacksonInject` annotation
 * [Paranamer](../../../jackson-module-paranamer): tiny extension for automatically figuring out creator (constructor, factory method) parameter names, to avoid having to specify `@JsonProperty`.
 * [JDK 8 Parameter names](../../../jackson-module-parameter-names): Module that adds support for using a new JDK8 feature: ability to access names of constructor and method parameters.
+* [Base](../../../jackson-modules-base) modules:
+    * [Mr Bean](../../../jackson-modules-base/tree/master/mrbean): "type materialization" -- let Mr Bean generate implementation classes on-the-fly (NO source code generation), to avoid monkey code
+    * [OSGi](../../../jackson-modules-base/tree/master/osgi): allows injection of values from OSGi registry, via standard Jackson `@JacksonInject` annotation
 
 ### Other modules, experimental
 
@@ -244,9 +245,3 @@ here are links to some of existing independent comparisons:
 * [Be a Lazy but a Productive Android Developer, Part 3: JSON Parsing Library](http://java.dzone.com/articles/be-lazy-productive-android) (April 2014)
 * ["Can anyone recommend a good Java JSON library"](https://www.linkedin.com/groups/Can-anyone-recommend-good-Java-50472.S.226644043) (Linked-In group) (March 2013)
 * ["Which JSON library to use on Android?"](http://thetarah.com/2012/09/21/which-json-library-should-i-use-in-my-android-and-java-projects/) (September 2012) 
-
-### Older resources
-
-These are obsolete resources, mostly useful for historical interest:
-
-- NONE -
