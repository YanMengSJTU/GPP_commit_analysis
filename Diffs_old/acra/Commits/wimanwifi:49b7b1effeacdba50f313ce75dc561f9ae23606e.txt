diff --git a/acra/build.gradle b/acra/build.gradle
index 9fe1c54e..cb8f8afd 100644
--- a/acra/build.gradle
+++ b/acra/build.gradle
@@ -32,111 +32,4 @@ dependencies {
 }
 
 
-/*
-* How to oss upload:
-* Edit or create the file at ~/.gradle/gradle.properties and add
-* ossrhUser = <OSSRH user>
-* ossrhPassword = <OSSRH password>
-* signing.keyId=<short ID of your key>
-* signing.password=<passphrase for your key>
-* signing.secretKeyRingFile=<path to your key ring>
-*
-* Then run
-* gradlew release
-*/
 
-release{
-    failOnUnversionedFiles = false
-    failOnCommitNeeded = false
-    tagTemplate = '$name-$version'
-    git{
-        requireBranch = ""
-    }
-}
-afterReleaseBuild.dependsOn ':closeAndPromoteRepository'
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    source += files('build/generated/source/aidl/release') + files('build/generated/source/buildConfig/release')
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    failOnError false
-}
-
-afterEvaluate {
-    javadoc.classpath += files(android.libraryVariants.collect { variant ->
-        variant.javaCompile.classpath.files
-    })
-    javadoc.dependsOn generateReleaseSources
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc
-}
-
-artifacts {
-    archives javadocJar, sourcesJar
-}
-
-signing {
-    sign configurations.archives
-}
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            // POM signature
-            beforeDeployment { deployment -> signing.signPom(deployment) }
-            // Target repository
-            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
-                authentication(userName: ossrhUser, password: ossrhPassword)
-            }
-            pom.project {
-                name 'Application Crash Report for Android'
-                description 'Publishes a report of an Android application crash to Google docs (or some other end point).'
-                packaging 'aar'
-                url 'http://acra.ch'
-
-                scm {
-                    connection 'scm:git:https://github.com/ACRA/acra.git'
-                    developerConnection 'scm:git:git@github.com:ACRA/acra.git'
-                    url 'https://github.com/ACRA/acra.git'
-                }
-
-                licenses {
-                    license {
-                        name 'Apache 2'
-                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                        distribution 'repo'
-                    }
-                }
-
-                developers {
-                    developer {
-                        id = 'kevin.gaudin'
-                        name = 'Kevin Gaudin'
-                    }
-                    developer {
-                        id = 'william.ferguson'
-                        name = 'William Ferguson'
-                    }
-                    developer {
-                        id = 'f43nd1r'
-                        name = 'Lukas Morawietz'
-                    }
-                }
-            }
-        }
-    }
-}
-
-nexusStaging {
-    username = ossrhUser
-    password = ossrhPassword
-    packageGroup = group
-}
diff --git a/acra/gradle.properties b/acra/gradle.properties
index 9ca6f9a3..bf4923b3 100644
--- a/acra/gradle.properties
+++ b/acra/gradle.properties
@@ -1,5 +1,5 @@
 version=4.9.3-SNAPSHOT
-group=ch.acra
+group=me.acra
 archivesBaseName=acra
 androidVersion=23
 supportVersion=24.1.1
diff --git a/acra/src/main/AndroidManifest.xml b/acra/src/main/AndroidManifest.xml
index b94b34d0..0993b705 100644
--- a/acra/src/main/AndroidManifest.xml
+++ b/acra/src/main/AndroidManifest.xml
@@ -15,11 +15,11 @@
   ~ limitations under the License.
   -->
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="ch.acra.acra">
+          package="me.acra.acra">
 
     <application>
         <activity
-            android:name="org.acra.dialog.CrashReportDialog"
+            android:name="me.wimanacra.dialog.CrashReportDialog"
             android:theme="@android:style/Theme.Dialog"
             android:launchMode="singleInstance"
             android:excludeFromRecents="true"
@@ -27,13 +27,13 @@
             android:process=":acra"/>
 
         <service
-            android:name="org.acra.sender.SenderService"
+            android:name="me.wimanacra.sender.SenderService"
             android:exported="false"
             android:process=":acra" />
 
         <provider
             android:authorities="${applicationId}.acra"
-            android:name="org.acra.attachment.AcraContentProvider"
+            android:name="me.wimanacra.attachment.AcraContentProvider"
             android:exported="false"
             android:process=":acra"
             android:grantUriPermissions="true"/>
diff --git a/acra/src/main/java/org/acra/ACRA.java b/acra/src/main/java/me/wimanacra/ACRA.java
similarity index 96%
rename from acra/src/main/java/org/acra/ACRA.java
rename to acra/src/main/java/me/wimanacra/ACRA.java
index 5a53edf8..f7e29dae 100644
--- a/acra/src/main/java/org/acra/ACRA.java
+++ b/acra/src/main/java/me/wimanacra/ACRA.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra;
+package me.wimanacra;
 
 import android.app.Application;
 import android.content.Context;
@@ -23,16 +23,16 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
-import org.acra.config.ACRAConfigurationException;
-import org.acra.config.ConfigurationBuilder;
-import org.acra.legacy.LegacyFileHandler;
-import org.acra.log.ACRALog;
-import org.acra.log.AndroidLogDelegate;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.util.ApplicationStartupProcessor;
-import org.acra.util.IOUtils;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.config.ACRAConfigurationException;
+import me.wimanacra.config.ConfigurationBuilder;
+import me.wimanacra.legacy.LegacyFileHandler;
+import me.wimanacra.log.ACRALog;
+import me.wimanacra.log.AndroidLogDelegate;
+import me.wimanacra.prefs.SharedPreferencesFactory;
+import me.wimanacra.util.ApplicationStartupProcessor;
+import me.wimanacra.util.IOUtils;
 
 import java.io.FileInputStream;
 import java.io.IOException;
diff --git a/acra/src/main/java/org/acra/ACRAConstants.java b/acra/src/main/java/me/wimanacra/ACRAConstants.java
similarity index 78%
rename from acra/src/main/java/org/acra/ACRAConstants.java
rename to acra/src/main/java/me/wimanacra/ACRAConstants.java
index 07ffa3ff..5f1cce04 100644
--- a/acra/src/main/java/org/acra/ACRAConstants.java
+++ b/acra/src/main/java/me/wimanacra/ACRAConstants.java
@@ -13,17 +13,16 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra;
+package me.wimanacra;
 
 import android.content.Context;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.StringRes;
 
-import org.acra.dialog.CrashReportDialog;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
 
-import static org.acra.ReportField.*;
+import me.wimanacra.annotation.ReportsCrashes;
 
 /**
  * Responsible for collating those constants shared among the ACRA components.
@@ -45,7 +44,7 @@ private ACRAConstants(){}
      * This key is used to store the silent state of a report sent by
      * handleSilentException().
      */
-    public static final String SILENT_SUFFIX = "-" + IS_SILENT;
+    public static final String SILENT_SUFFIX = "-" + ReportField.IS_SILENT;
     /**
      * This is the maximum number of previously stored reports that we send
      * in one batch to avoid overloading the network.
@@ -74,7 +73,7 @@ private ACRAConstants(){}
     public static final String EXTRA_REPORT_CONFIG = "REPORT_CONFIG";
 
     /**
-     * Set this extra to true to force the deletion of reports by the {@link CrashReportDialog} activity.
+     * Set this extra to true to force the deletion of reports by the {@link me.wimanacra.dialog.CrashReportDialog} activity.
      */
     public static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
     /**
@@ -141,23 +140,23 @@ private ACRAConstants(){}
     /**
      * Default list of {@link ReportField}s to be sent in email reports. You can
      * set your own list with
-     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
+     * {@link ReportsCrashes#customReportContent()}.
      * 
-     * @see org.acra.annotation.ReportsCrashes#mailTo()
+     * @see ReportsCrashes#mailTo()
      */
-    public static final ReportField[] DEFAULT_MAIL_REPORT_FIELDS = { USER_COMMENT, ANDROID_VERSION, APP_VERSION_NAME,
-            BRAND, PHONE_MODEL, CUSTOM_DATA, STACK_TRACE };
+    public static final ReportField[] DEFAULT_MAIL_REPORT_FIELDS = { ReportField.USER_COMMENT, ReportField.ANDROID_VERSION, ReportField.APP_VERSION_NAME,
+            ReportField.BRAND, ReportField.PHONE_MODEL, ReportField.CUSTOM_DATA, ReportField.STACK_TRACE };
 
     /**
      * Default list of {@link ReportField}s to be sent in reports. You can set
      * your own list with
-     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
+     * {@link ReportsCrashes#customReportContent()}.
      */
-    public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
-            PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
-            AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
-            DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
-            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES };
+    public static final ReportField[] DEFAULT_REPORT_FIELDS = { ReportField.REPORT_ID, ReportField.APP_VERSION_CODE, ReportField.APP_VERSION_NAME,
+            ReportField.PACKAGE_NAME, ReportField.FILE_PATH, ReportField.PHONE_MODEL, ReportField.BRAND, ReportField.PRODUCT, ReportField.ANDROID_VERSION, ReportField.BUILD, ReportField.TOTAL_MEM_SIZE,
+            ReportField.AVAILABLE_MEM_SIZE, ReportField.BUILD_CONFIG, ReportField.CUSTOM_DATA, ReportField.IS_SILENT, ReportField.STACK_TRACE, ReportField.INITIAL_CONFIGURATION, ReportField.CRASH_CONFIGURATION,
+            ReportField.DISPLAY, ReportField.USER_COMMENT, ReportField.USER_EMAIL, ReportField.USER_APP_START_DATE, ReportField.USER_CRASH_DATE, ReportField.DUMPSYS_MEMINFO, ReportField.LOGCAT,
+            ReportField.INSTALLATION_ID, ReportField.DEVICE_FEATURES, ReportField.ENVIRONMENT, ReportField.SHARED_PREFERENCES };
 
     public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
 
diff --git a/acra/src/main/java/me/wimanacra/CrashReportDialog.java b/acra/src/main/java/me/wimanacra/CrashReportDialog.java
new file mode 100644
index 00000000..2979b7da
--- /dev/null
+++ b/acra/src/main/java/me/wimanacra/CrashReportDialog.java
@@ -0,0 +1,18 @@
+package me.wimanacra;
+
+import android.os.Bundle;
+
+
+/**
+ * Old crash report dialog.
+ *
+ * @deprecated since 4.8.0 use {@link me.wimanacra.dialog.CrashReportDialog} instead
+ **/
+public final class CrashReportDialog extends me.wimanacra.dialog.CrashReportDialog {
+
+    @Override
+    protected void buildAndShowDialog(Bundle savedInstanceState){
+        ACRA.log.w(ACRA.LOG_TAG, "me.wimanacra.CrashReportDialog has been deprecated. Please use me.wimanacra.dialog.CrashReportDialog instead");
+        super.buildAndShowDialog(savedInstanceState);
+    }
+}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/ErrorReporter.java b/acra/src/main/java/me/wimanacra/ErrorReporter.java
similarity index 91%
rename from acra/src/main/java/org/acra/ErrorReporter.java
rename to acra/src/main/java/me/wimanacra/ErrorReporter.java
index 94e2738a..5b3cf206 100644
--- a/acra/src/main/java/org/acra/ErrorReporter.java
+++ b/acra/src/main/java/me/wimanacra/ErrorReporter.java
@@ -13,33 +13,31 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra;
+package me.wimanacra;
 
 import android.app.Application;
 import android.content.SharedPreferences;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.LastActivityManager;
-import org.acra.builder.NoOpReportPrimer;
-import org.acra.builder.ReportBuilder;
-import org.acra.builder.ReportExecutor;
-import org.acra.builder.ReportPrimer;
-import org.acra.collector.ConfigurationCollector;
-import org.acra.collector.CrashReportDataFactory;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
-import org.acra.util.ApplicationStartupProcessor;
-import org.acra.util.InstanceCreator;
-import org.acra.util.ProcessFinisher;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.builder.LastActivityManager;
+import me.wimanacra.builder.NoOpReportPrimer;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.builder.ReportExecutor;
+import me.wimanacra.builder.ReportPrimer;
+import me.wimanacra.collector.ConfigurationCollector;
+import me.wimanacra.collector.CrashReportDataFactory;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.Element;
+import me.wimanacra.util.ApplicationStartupProcessor;
+import me.wimanacra.util.InstanceCreator;
+import me.wimanacra.util.ProcessFinisher;
 
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * <p>
  * The ErrorReporter is a Singleton object in charge of collecting crash context
@@ -256,8 +254,8 @@ public void uncaughtException(@Nullable Thread t, @NonNull Throwable e) {
         }
 
         try {
-            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Building report");
+            ACRA.log.e(ACRA.LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Building report");
 
             performDeprecatedReportPriming();
 
@@ -270,7 +268,7 @@ public void uncaughtException(@Nullable Thread t, @NonNull Throwable e) {
 
         } catch (Throwable fatality) {
             // ACRA failed. Prevent any recursive call to ACRA.uncaughtException(), let the native reporter do its job.
-            ACRA.log.e(LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter" , fatality);
+            ACRA.log.e(ACRA.LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter" , fatality);
             reportExecutor.handReportToDefaultExceptionHandler(t, e);
         }
     }
@@ -299,10 +297,10 @@ public void handleSilentException(@Nullable Throwable e) {
      */
     public void setEnabled(boolean enabled) {
         if (supportedAndroidVersion) {
-            ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
+            ACRA.log.i(ACRA.LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
             reportExecutor.setEnabled(enabled);
         } else {
-            ACRA.log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+            ACRA.log.w(ACRA.LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
         }
     }
 
@@ -374,7 +372,7 @@ private void performDeprecatedReportPriming() {
         try {
             exceptionHandlerInitializer.initializeExceptionHandler(this);
         } catch (Exception exceptionInRunnable) {
-            ACRA.log.w(LOG_TAG, "Failed to initialize " + exceptionHandlerInitializer + " from #handleException");
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to initialize " + exceptionHandlerInitializer + " from #handleException");
         }
     }
 }
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/ExceptionHandlerInitializer.java b/acra/src/main/java/me/wimanacra/ExceptionHandlerInitializer.java
similarity index 81%
rename from acra/src/main/java/org/acra/ExceptionHandlerInitializer.java
rename to acra/src/main/java/me/wimanacra/ExceptionHandlerInitializer.java
index 4e48616c..f76a6766 100644
--- a/acra/src/main/java/org/acra/ExceptionHandlerInitializer.java
+++ b/acra/src/main/java/me/wimanacra/ExceptionHandlerInitializer.java
@@ -1,4 +1,6 @@
-package org.acra;
+package me.wimanacra;
+
+import me.wimanacra.builder.ReportPrimer;
 
 /**
  * The interface can be used with
@@ -7,7 +9,7 @@
  * exception is handled.
  * 
  * @see ErrorReporter#setExceptionHandlerInitializer(ExceptionHandlerInitializer)
- * @deprecated since 4.8.0 use {@link org.acra.builder.ReportPrimer} mechanism instead.
+ * @deprecated since 4.8.0 use {@link ReportPrimer} mechanism instead.
  */
 public interface ExceptionHandlerInitializer {
     /**
diff --git a/acra/src/main/java/org/acra/ReportField.java b/acra/src/main/java/me/wimanacra/ReportField.java
similarity index 99%
rename from acra/src/main/java/org/acra/ReportField.java
rename to acra/src/main/java/me/wimanacra/ReportField.java
index cb9b1db6..c5c637c8 100644
--- a/acra/src/main/java/org/acra/ReportField.java
+++ b/acra/src/main/java/me/wimanacra/ReportField.java
@@ -13,11 +13,11 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra;
+package me.wimanacra;
 
 import android.content.res.Configuration;
 
-import org.acra.annotation.ReportsCrashes;
+import me.wimanacra.annotation.ReportsCrashes;
 
 /**
  * Specifies all the different fields available in a crash report.
diff --git a/acra/src/main/java/org/acra/ReportingInteractionMode.java b/acra/src/main/java/me/wimanacra/ReportingInteractionMode.java
similarity index 98%
rename from acra/src/main/java/org/acra/ReportingInteractionMode.java
rename to acra/src/main/java/me/wimanacra/ReportingInteractionMode.java
index 1d553857..f10610a1 100644
--- a/acra/src/main/java/org/acra/ReportingInteractionMode.java
+++ b/acra/src/main/java/me/wimanacra/ReportingInteractionMode.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra;
+package me.wimanacra;
 
 /**
  * Defines the different user interaction modes for ACRA.
diff --git a/acra/src/main/java/org/acra/annotation/ReportsCrashes.java b/acra/src/main/java/me/wimanacra/annotation/ReportsCrashes.java
similarity index 93%
rename from acra/src/main/java/org/acra/annotation/ReportsCrashes.java
rename to acra/src/main/java/me/wimanacra/annotation/ReportsCrashes.java
index 9ab49c1f..ab96c4d7 100644
--- a/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/acra/src/main/java/me/wimanacra/annotation/ReportsCrashes.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.annotation;
+package me.wimanacra.annotation;
 
 import android.content.Context;
 import android.content.SharedPreferences;
@@ -24,25 +24,23 @@
 import android.support.annotation.StringRes;
 import android.support.annotation.StyleRes;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.ReportingInteractionMode;
-import org.acra.attachment.AttachmentUriProvider;
-import org.acra.attachment.DefaultAttachmentProvider;
-import org.acra.builder.NoOpReportPrimer;
-import org.acra.builder.ReportPrimer;
-import org.acra.config.DefaultRetryPolicy;
-import org.acra.config.RetryPolicy;
-import org.acra.dialog.BaseCrashReportDialog;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.file.Directory;
-import org.acra.security.KeyStoreFactory;
-import org.acra.security.NoKeyStoreFactory;
-import org.acra.sender.DefaultReportSenderFactory;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.acra.sender.ReportSenderFactory;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.ReportingInteractionMode;
+import me.wimanacra.attachment.AttachmentUriProvider;
+import me.wimanacra.attachment.DefaultAttachmentProvider;
+import me.wimanacra.builder.NoOpReportPrimer;
+import me.wimanacra.builder.ReportPrimer;
+import me.wimanacra.config.DefaultRetryPolicy;
+import me.wimanacra.config.RetryPolicy;
+import me.wimanacra.dialog.BaseCrashReportDialog;
+import me.wimanacra.dialog.CrashReportDialog;
+import me.wimanacra.file.Directory;
+import me.wimanacra.security.KeyStoreFactory;
+import me.wimanacra.security.NoKeyStoreFactory;
+import me.wimanacra.sender.DefaultReportSenderFactory;
+import me.wimanacra.sender.ReportSenderFactory;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -51,6 +49,10 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import me.wimanacra.sender.EmailIntentSender;
+import me.wimanacra.sender.HttpSender;
+import me.wimanacra.sender.ReportSender;
+
 /**
  * Provide configuration elements to the
  * {@link ACRA#init(android.app.Application)} method. The only mandatory
@@ -538,12 +540,12 @@
     @NonNull Class buildConfigClass() default Object.class;
 
     /**
-     * The default {@link org.acra.sender.ReportSenderFactory} creates an {@link org.acra.sender.EmailIntentSender}
-     * if the 'mailTo' parameter is defined or an {@link org.acra.sender.HttpSender} if the 'formUri' parameter
+     * The default {@link ReportSenderFactory} creates an {@link EmailIntentSender}
+     * if the 'mailTo' parameter is defined or an {@link HttpSender} if the 'formUri' parameter
      * is defined (and internet permission has been granted.
      *
-     * @return List of the {@link org.acra.sender.ReportSenderFactory} with which to construct the
-     * {@link org.acra.sender.ReportSender}s that will send the crash reports.
+     * @return List of the {@link ReportSenderFactory} with which to construct the
+     * {@link ReportSender}s that will send the crash reports.
      */
     @NonNull Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() default {DefaultReportSenderFactory.class};
 
@@ -589,14 +591,14 @@
 
     /**
      * <p>
-     * The {@link Method} to be used when posting with {@link #formUri()}.
+     * The {@link HttpSender.Method} to be used when posting with {@link #formUri()}.
      * </p>
      *
      * @return HTTP method used when posting reports.
      */
-    @NonNull Method httpMethod() default Method.POST;
+    @NonNull HttpSender.Method httpMethod() default HttpSender.Method.POST;
 
-    @NonNull Type reportType() default Type.FORM;
+    @NonNull HttpSender.Type reportType() default HttpSender.Type.FORM;
 
     /**
      * @return Class which creates a keystore that can contain trusted certificates
@@ -638,7 +640,7 @@
      * where [applicationId] is your application package name,
      * [Directory] is one of the enum constants in {@link Directory} in lower case
      * and [Path] is the relative path to the file in that directory
-     * e.g. content://org.acra.provider/files/thisIsATest.txt
+     * e.g. content://me.wimanacra.provider/files/thisIsATest.txt
      * </p>
      * Side effects:
      * <ul>
diff --git a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java b/acra/src/main/java/me/wimanacra/attachment/AcraContentProvider.java
similarity index 97%
rename from acra/src/main/java/org/acra/attachment/AcraContentProvider.java
rename to acra/src/main/java/me/wimanacra/attachment/AcraContentProvider.java
index 1a0c4554..fa490744 100644
--- a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
+++ b/acra/src/main/java/me/wimanacra/attachment/AcraContentProvider.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.attachment;
+package me.wimanacra.attachment;
 
 import android.content.ContentProvider;
 import android.content.ContentValues;
@@ -28,9 +28,9 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import org.acra.ACRA;
-import org.acra.file.Directory;
-import org.acra.http.HttpUtils;
+import me.wimanacra.ACRA;
+import me.wimanacra.file.Directory;
+import me.wimanacra.http.HttpUtils;
 
 import java.io.File;
 import java.io.FileNotFoundException;
diff --git a/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java b/acra/src/main/java/me/wimanacra/attachment/AttachmentUriProvider.java
similarity index 80%
rename from acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java
rename to acra/src/main/java/me/wimanacra/attachment/AttachmentUriProvider.java
index 74d66927..6f5fd1ab 100644
--- a/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java
+++ b/acra/src/main/java/me/wimanacra/attachment/AttachmentUriProvider.java
@@ -1,10 +1,10 @@
-package org.acra.attachment;
+package me.wimanacra.attachment;
 
 import android.content.Context;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.config.ACRAConfiguration;
 
 import java.util.ArrayList;
 
diff --git a/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java b/acra/src/main/java/me/wimanacra/attachment/DefaultAttachmentProvider.java
similarity index 76%
rename from acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
rename to acra/src/main/java/me/wimanacra/attachment/DefaultAttachmentProvider.java
index ec23ae1b..125a944a 100644
--- a/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
+++ b/acra/src/main/java/me/wimanacra/attachment/DefaultAttachmentProvider.java
@@ -1,16 +1,14 @@
-package org.acra.attachment;
+package me.wimanacra.attachment;
 
 import android.content.Context;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.ACRA;
+import me.wimanacra.config.ACRAConfiguration;
 
 import java.util.ArrayList;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * @author F43nd1r
  * @since 10.03.2017
@@ -25,7 +23,7 @@
             try {
                 result.add(Uri.parse(s));
             }catch (Exception e){
-                ACRA.log.e(LOG_TAG, "Failed to parse Uri " + s, e);
+                ACRA.log.e(ACRA.LOG_TAG, "Failed to parse Uri " + s, e);
             }
         }
         return result;
diff --git a/acra/src/main/java/org/acra/builder/LastActivityManager.java b/acra/src/main/java/me/wimanacra/builder/LastActivityManager.java
similarity index 74%
rename from acra/src/main/java/org/acra/builder/LastActivityManager.java
rename to acra/src/main/java/me/wimanacra/builder/LastActivityManager.java
index 83f1c8f9..c25e07f2 100644
--- a/acra/src/main/java/org/acra/builder/LastActivityManager.java
+++ b/acra/src/main/java/me/wimanacra/builder/LastActivityManager.java
@@ -1,4 +1,4 @@
-package org.acra.builder;
+package me.wimanacra.builder;
 
 import android.app.Activity;
 import android.app.Application;
@@ -7,13 +7,11 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
-import org.acra.dialog.BaseCrashReportDialog;
+import me.wimanacra.ACRA;
+import me.wimanacra.dialog.BaseCrashReportDialog;
 
 import java.lang.ref.WeakReference;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Responsible for tracking the last Activity other than any CrashReport dialog that was created.
  *
@@ -31,7 +29,7 @@ public LastActivityManager(@NonNull Application application) {
             application.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {
                 @Override
                 public void onActivityCreated(@NonNull Activity activity, Bundle savedInstanceState) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityCreated " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityCreated " + activity.getClass());
                     if (!(activity instanceof BaseCrashReportDialog)) {
                         // Ignore CrashReportDialog because we want the last
                         // application Activity that was started so that we can explicitly kill it off.
@@ -41,22 +39,22 @@ public void onActivityCreated(@NonNull Activity activity, Bundle savedInstanceSt
 
                 @Override
                 public void onActivityStarted(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStarted " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityStarted " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityResumed(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityResumed " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityResumed " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityPaused(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityPaused " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityPaused " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityStopped(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStopped " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityStopped " + activity.getClass());
                     synchronized (this){
                         notify();
                     }
@@ -64,12 +62,12 @@ public void onActivityStopped(@NonNull Activity activity) {
 
                 @Override
                 public void onActivitySaveInstanceState(@NonNull Activity activity, Bundle outState) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityDestroyed(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityDestroyed " + activity.getClass());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityDestroyed " + activity.getClass());
                 }
             });
         }
diff --git a/acra/src/main/java/org/acra/builder/NoOpReportPrimer.java b/acra/src/main/java/me/wimanacra/builder/NoOpReportPrimer.java
similarity index 90%
rename from acra/src/main/java/org/acra/builder/NoOpReportPrimer.java
rename to acra/src/main/java/me/wimanacra/builder/NoOpReportPrimer.java
index 586ac940..5e915257 100644
--- a/acra/src/main/java/org/acra/builder/NoOpReportPrimer.java
+++ b/acra/src/main/java/me/wimanacra/builder/NoOpReportPrimer.java
@@ -1,4 +1,4 @@
-package org.acra.builder;
+package me.wimanacra.builder;
 
 import android.content.Context;
 
diff --git a/acra/src/main/java/org/acra/builder/ReportBuilder.java b/acra/src/main/java/me/wimanacra/builder/ReportBuilder.java
similarity index 99%
rename from acra/src/main/java/org/acra/builder/ReportBuilder.java
rename to acra/src/main/java/me/wimanacra/builder/ReportBuilder.java
index fa892481..df77c9b8 100644
--- a/acra/src/main/java/org/acra/builder/ReportBuilder.java
+++ b/acra/src/main/java/me/wimanacra/builder/ReportBuilder.java
@@ -1,4 +1,4 @@
-package org.acra.builder;
+package me.wimanacra.builder;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
diff --git a/acra/src/main/java/org/acra/builder/ReportExecutor.java b/acra/src/main/java/me/wimanacra/builder/ReportExecutor.java
similarity index 86%
rename from acra/src/main/java/org/acra/builder/ReportExecutor.java
rename to acra/src/main/java/me/wimanacra/builder/ReportExecutor.java
index f743ff4f..211d1db3 100644
--- a/acra/src/main/java/org/acra/builder/ReportExecutor.java
+++ b/acra/src/main/java/me/wimanacra/builder/ReportExecutor.java
@@ -1,4 +1,4 @@
-package org.acra.builder;
+package me.wimanacra.builder;
 
 import android.app.Notification;
 import android.app.NotificationManager;
@@ -13,26 +13,25 @@
 import android.support.v4.app.NotificationCompat;
 import android.widget.Toast;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportingInteractionMode;
-import org.acra.collector.CrashReportData;
-import org.acra.collector.CrashReportDataFactory;
-import org.acra.config.ACRAConfiguration;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.file.CrashReportPersister;
-import org.acra.file.ReportLocator;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.sender.SenderServiceStarter;
-import org.acra.util.ProcessFinisher;
-import org.acra.util.ToastSender;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportingInteractionMode;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.collector.CrashReportDataFactory;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.dialog.CrashReportDialog;
+import me.wimanacra.file.CrashReportPersister;
+import me.wimanacra.file.ReportLocator;
+import me.wimanacra.prefs.SharedPreferencesFactory;
+import me.wimanacra.sender.SenderServiceStarter;
+import me.wimanacra.util.ProcessFinisher;
+import me.wimanacra.util.ToastSender;
 
 import java.io.File;
 import java.util.Date;
 
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.USER_CRASH_DATE;
+import static me.wimanacra.ReportField.IS_SILENT;
+import static me.wimanacra.ReportField.USER_CRASH_DATE;
 
 /**
  * Collates, records and initiates the sending of a report.
@@ -91,12 +90,12 @@ public long getElapsedTime() {
 
     public void handReportToDefaultExceptionHandler(@Nullable Thread t, @NonNull Throwable e) {
         if (defaultExceptionHandler != null) {
-            ACRA.log.i(LOG_TAG, "ACRA is disabled for " + context.getPackageName()
+            ACRA.log.i(ACRA.LOG_TAG, "ACRA is disabled for " + context.getPackageName()
                     + " - forwarding uncaught Exception on to default ExceptionHandler");
             defaultExceptionHandler.uncaughtException(t, e);
         } else {
-            ACRA.log.e(LOG_TAG, "ACRA is disabled for " + context.getPackageName() + " - no default ExceptionHandler");
-            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+            ACRA.log.e(ACRA.LOG_TAG, "ACRA is disabled for " + context.getPackageName() + " - no default ExceptionHandler");
+            ACRA.log.e(ACRA.LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
         }
 
     }
@@ -117,7 +116,7 @@ public void setEnabled(boolean enabled) {
     public void execute(@NonNull final ReportBuilder reportBuilder) {
 
         if (!enabled) {
-            ACRA.log.v(LOG_TAG, "ACRA is disabled. Report not sent.");
+            ACRA.log.v(ACRA.LOG_TAG, "ACRA is disabled. Report not sent.");
             return;
         }
 
@@ -188,7 +187,7 @@ public void run() {
             }
 
         } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating Notification.");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Creating Notification.");
             createNotification(reportFile, reportBuilder);
         }
 
@@ -202,7 +201,7 @@ public void run() {
                 @Override
                 public void run() {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
+                        ACRA.log.d(ACRA.LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
                                 + " millis from " + sentToastTimeMillis.initialTimeMillis
                                 + " currentMillis=" + System.currentTimeMillis());
                     final long sleep = ACRAConstants.TOAST_WAIT_DURATION - sentToastTimeMillis.getElapsedTime();
@@ -211,9 +210,9 @@ public void run() {
                         if (sleep > 0L) Thread.sleep(sleep);
                     } catch (InterruptedException e1) {
                         if (ACRA.DEV_LOGGING)
-                            ACRA.log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
+                            ACRA.log.d(ACRA.LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
                     }
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished waiting for Toast");
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Finished waiting for Toast");
                     dialogAndEnd(reportBuilder, reportFile, showDirectDialog);
                 }
             }.start();
@@ -227,13 +226,13 @@ private void dialogAndEnd(@NonNull ReportBuilder reportBuilder, @NonNull File re
             // Create a new activity task with the confirmation dialog.
             // This new task will be persisted on application restart
             // right after its death.
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFile);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Creating CrashReportDialog for " + reportFile);
             final Intent dialogIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
             dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
             context.startActivity(dialogIntent);
         }
 
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.isEndApplication());
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.isEndApplication());
 
         if (reportBuilder.isEndApplication()) {
             if(Debug.isDebuggerConnected()){
@@ -247,7 +246,7 @@ public void run() {
                         Looper.loop();
                     }
                 }.start();
-                ACRA.log.w(LOG_TAG, warning);
+                ACRA.log.w(ACRA.LOG_TAG, warning);
                 //do as much cleanup as we can without killing the process
                 processFinisher.finishLastActivity(reportBuilder.getUncaughtExceptionThread());
             }else {
@@ -265,7 +264,7 @@ private void endApplication(@Nullable Thread uncaughtExceptionThread, Throwable
         final boolean handlingUncaughtException = uncaughtExceptionThread != null;
         if (handlingUncaughtException && letDefaultHandlerEndApplication && defaultExceptionHandler != null) {
             // Let the system default handler do it's job and display the force close dialog.
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Handing Exception on to default ExceptionHandler");
             defaultExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
         } else {
             processFinisher.endApplication(uncaughtExceptionThread);
@@ -282,7 +281,7 @@ private void startSendingReports(boolean onlySendSilentReports) {
             final SenderServiceStarter starter = new SenderServiceStarter(context, config);
             starter.startService(onlySendSilentReports, true);
         } else {
-            ACRA.log.w(LOG_TAG, "Would be sending reports, but ACRA is disabled");
+            ACRA.log.w(ACRA.LOG_TAG, "Would be sending reports, but ACRA is disabled");
         }
     }
 
@@ -304,7 +303,7 @@ private void createNotification(@NonNull File reportFile, @NonNull ReportBuilder
         final CharSequence tickerText = context.getText(config.resNotifTickerText());
         final long when = System.currentTimeMillis();
 
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating Notification for " + reportFile);
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Creating Notification for " + reportFile);
         final Intent crashReportDialogIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
         final PendingIntent contentIntent = PendingIntent.getActivity(context, mNotificationCounter++, crashReportDialogIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 
@@ -363,11 +362,11 @@ private File getReportFileName(@NonNull CrashReportData crashData) {
      */
     private void saveCrashReportFile(@NonNull File file, @NonNull CrashReportData crashData) {
         try {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Writing crash report file " + file);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Writing crash report file " + file);
             final CrashReportPersister persister = new CrashReportPersister();
             persister.store(crashData, file);
         } catch (Exception e) {
-            ACRA.log.e(LOG_TAG, "An error occurred while writing the report file...", e);
+            ACRA.log.e(ACRA.LOG_TAG, "An error occurred while writing the report file...", e);
         }
     }
 
@@ -380,7 +379,7 @@ private void saveCrashReportFile(@NonNull File file, @NonNull CrashReportData cr
      */
     @NonNull
     private Intent createCrashReportDialogIntent(@NonNull File reportFile, @NonNull ReportBuilder reportBuilder) {
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating DialogIntent for " + reportFile + " exception=" + reportBuilder.getException());
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Creating DialogIntent for " + reportFile + " exception=" + reportBuilder.getException());
         final Intent dialogIntent = new Intent(context, config.reportDialogClass());
         dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE, reportFile);
         dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION, reportBuilder.getException());
diff --git a/acra/src/main/java/org/acra/builder/ReportPrimer.java b/acra/src/main/java/me/wimanacra/builder/ReportPrimer.java
similarity index 85%
rename from acra/src/main/java/org/acra/builder/ReportPrimer.java
rename to acra/src/main/java/me/wimanacra/builder/ReportPrimer.java
index ee03d9b5..f3356289 100644
--- a/acra/src/main/java/org/acra/builder/ReportPrimer.java
+++ b/acra/src/main/java/me/wimanacra/builder/ReportPrimer.java
@@ -1,13 +1,15 @@
-package org.acra.builder;
+package me.wimanacra.builder;
 
 import android.content.Context;
 
 import java.util.Map;
 
+import me.wimanacra.annotation.ReportsCrashes;
+
 /**
  * Primes a {@link ReportBuilder} with any extra data to record for the current crash report.
  *
- * ReportPrimer is configured declaratively via {@link org.acra.annotation.ReportsCrashes#reportPrimerClass()}.
+ * ReportPrimer is configured declaratively via {@link ReportsCrashes#reportPrimerClass()}.
  * The ReportPrimer class MUST have a no arg constructor and is created when ACRA is initialised.
  *
  * Created by William on 9 Jan 2016.
diff --git a/acra/src/main/java/org/acra/collections/BoundedLinkedList.java b/acra/src/main/java/me/wimanacra/collections/BoundedLinkedList.java
similarity index 99%
rename from acra/src/main/java/org/acra/collections/BoundedLinkedList.java
rename to acra/src/main/java/me/wimanacra/collections/BoundedLinkedList.java
index 187ce428..ca98c729 100644
--- a/acra/src/main/java/org/acra/collections/BoundedLinkedList.java
+++ b/acra/src/main/java/me/wimanacra/collections/BoundedLinkedList.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collections;
+package me.wimanacra.collections;
 
 import android.support.annotation.NonNull;
 
diff --git a/acra/src/main/java/org/acra/collections/ImmutableList.java b/acra/src/main/java/me/wimanacra/collections/ImmutableList.java
similarity index 99%
rename from acra/src/main/java/org/acra/collections/ImmutableList.java
rename to acra/src/main/java/me/wimanacra/collections/ImmutableList.java
index 61324f93..3bcfa86b 100644
--- a/acra/src/main/java/org/acra/collections/ImmutableList.java
+++ b/acra/src/main/java/me/wimanacra/collections/ImmutableList.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collections;
+package me.wimanacra.collections;
 
 import android.support.annotation.NonNull;
 
diff --git a/acra/src/main/java/org/acra/collections/ImmutableMap.java b/acra/src/main/java/me/wimanacra/collections/ImmutableMap.java
similarity index 98%
rename from acra/src/main/java/org/acra/collections/ImmutableMap.java
rename to acra/src/main/java/me/wimanacra/collections/ImmutableMap.java
index dd3a2bb2..d9ac5ba0 100644
--- a/acra/src/main/java/org/acra/collections/ImmutableMap.java
+++ b/acra/src/main/java/me/wimanacra/collections/ImmutableMap.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collections;
+package me.wimanacra.collections;
 
 import android.support.annotation.NonNull;
 
diff --git a/acra/src/main/java/org/acra/collections/ImmutableSet.java b/acra/src/main/java/me/wimanacra/collections/ImmutableSet.java
similarity index 98%
rename from acra/src/main/java/org/acra/collections/ImmutableSet.java
rename to acra/src/main/java/me/wimanacra/collections/ImmutableSet.java
index e2781a8e..07b6685d 100644
--- a/acra/src/main/java/org/acra/collections/ImmutableSet.java
+++ b/acra/src/main/java/me/wimanacra/collections/ImmutableSet.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collections;
+package me.wimanacra.collections;
 
 import android.support.annotation.NonNull;
 
diff --git a/acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java b/acra/src/main/java/me/wimanacra/collections/UnmodifiableIteratorWrapper.java
similarity index 97%
rename from acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
rename to acra/src/main/java/me/wimanacra/collections/UnmodifiableIteratorWrapper.java
index c0308479..6f38ee74 100644
--- a/acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
+++ b/acra/src/main/java/me/wimanacra/collections/UnmodifiableIteratorWrapper.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collections;
+package me.wimanacra.collections;
 
 import java.util.Iterator;
 
diff --git a/acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java b/acra/src/main/java/me/wimanacra/collections/UnmodifiableListIteratorWrapper.java
similarity index 98%
rename from acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
rename to acra/src/main/java/me/wimanacra/collections/UnmodifiableListIteratorWrapper.java
index 97f0ab59..6c3506ce 100644
--- a/acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
+++ b/acra/src/main/java/me/wimanacra/collections/UnmodifiableListIteratorWrapper.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collections;
+package me.wimanacra.collections;
 
 import java.util.ListIterator;
 
diff --git a/acra/src/main/java/org/acra/collector/Collector.java b/acra/src/main/java/me/wimanacra/collector/Collector.java
similarity index 94%
rename from acra/src/main/java/org/acra/collector/Collector.java
rename to acra/src/main/java/me/wimanacra/collector/Collector.java
index 7de6c49c..6c6eb208 100644
--- a/acra/src/main/java/org/acra/collector/Collector.java
+++ b/acra/src/main/java/me/wimanacra/collector/Collector.java
@@ -13,14 +13,14 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Size;
 
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.Element;
 
 import java.util.Set;
 
diff --git a/acra/src/main/java/org/acra/collector/ConfigurationCollector.java b/acra/src/main/java/me/wimanacra/collector/ConfigurationCollector.java
similarity index 92%
rename from acra/src/main/java/org/acra/collector/ConfigurationCollector.java
rename to acra/src/main/java/me/wimanacra/collector/ConfigurationCollector.java
index ee5c0385..ceb61fc4 100644
--- a/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/ConfigurationCollector.java
@@ -13,19 +13,19 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.content.res.Configuration;
 import android.support.annotation.NonNull;
 import android.util.SparseArray;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 import org.json.JSONException;
 
 import java.lang.reflect.Field;
@@ -33,8 +33,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Inspects a {@link Configuration} object through reflection API in order to
  * generate a human readable String with values replaced with their constants
@@ -107,13 +105,13 @@ private static Element configToElement(@NonNull Configuration conf) {
                             result.put(fieldName, f.get(conf));
                         }
                     } catch (JSONException e) {
-                        ACRA.log.w(LOG_TAG, "Could not collect configuration field " + fieldName, e);
+                        ACRA.log.w(ACRA.LOG_TAG, "Could not collect configuration field " + fieldName, e);
                     }
                 }
             } catch (@NonNull IllegalArgumentException e) {
-                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
+                ACRA.log.e(ACRA.LOG_TAG, "Error while inspecting device configuration: ", e);
             } catch (@NonNull IllegalAccessException e) {
-                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
+                ACRA.log.e(ACRA.LOG_TAG, "Error while inspecting device configuration: ", e);
             }
         }
         return result;
@@ -155,9 +153,9 @@ private static Element configToElement(@NonNull Configuration conf) {
                         uiModeValues.put(f.getInt(null), fieldName);
                     }
                 } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
+                    ACRA.log.w(ACRA.LOG_TAG, "Error while inspecting device configuration: ", e);
                 } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
+                    ACRA.log.w(ACRA.LOG_TAG, "Error while inspecting device configuration: ", e);
                 }
             }
         }
@@ -253,7 +251,7 @@ public static Element collectConfiguration(@NonNull Context context) {
         try {
             return configToElement(context.getResources().getConfiguration());
         } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
+            ACRA.log.w(ACRA.LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
             return ACRAConstants.NOT_AVAILABLE;
         }
     }
diff --git a/acra/src/main/java/org/acra/collector/CrashReportData.java b/acra/src/main/java/me/wimanacra/collector/CrashReportData.java
similarity index 85%
rename from acra/src/main/java/org/acra/collector/CrashReportData.java
rename to acra/src/main/java/me/wimanacra/collector/CrashReportData.java
index 73ab4f60..302b11d0 100644
--- a/acra/src/main/java/org/acra/collector/CrashReportData.java
+++ b/acra/src/main/java/me/wimanacra/collector/CrashReportData.java
@@ -14,23 +14,23 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.support.annotation.NonNull;
 
-import org.acra.ReportField;
-import org.acra.model.BooleanElement;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
-import org.acra.util.JsonUtils;
+import me.wimanacra.ReportField;
+import me.wimanacra.model.BooleanElement;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.NumberElement;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.JsonUtils;
 import org.json.JSONObject;
 
 import java.util.EnumMap;
 import java.util.Properties;
 
 /**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
+ * Stores a crash reports data with {@link ReportField} enum values as keys.
  * <p>
  * This is basically the source of {@link Properties} adapted to extend an
  * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
diff --git a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java b/acra/src/main/java/me/wimanacra/collector/CrashReportDataFactory.java
similarity index 91%
rename from acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
rename to acra/src/main/java/me/wimanacra/collector/CrashReportDataFactory.java
index 7b95ab65..e87930cb 100644
--- a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/acra/src/main/java/me/wimanacra/collector/CrashReportDataFactory.java
@@ -14,18 +14,18 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
-import org.acra.util.PackageManagerWrapper;
+import me.wimanacra.ACRA;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.Element;
+import me.wimanacra.util.PackageManagerWrapper;
 
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -34,8 +34,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Responsible for creating the CrashReportData for an Exception.
  * <p>
@@ -132,16 +130,16 @@ public CrashReportData createCrashData(@NonNull ReportBuilder builder) {
                                 crashReportData.put(reportField, collector.collect(reportField, builder));
                             }
                         } catch (RuntimeException e) {
-                            ACRA.log.e(LOG_TAG, "Error while retrieving " + reportField.name() + " data", e);
+                            ACRA.log.e(ACRA.LOG_TAG, "Error while retrieving " + reportField.name() + " data", e);
                         }
                     }
                 } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), e);
+                    ACRA.log.e(ACRA.LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), e);
                 }
             }
 
         } catch (RuntimeException e) {
-            ACRA.log.e(LOG_TAG, "Error while retrieving crash data", e);
+            ACRA.log.e(ACRA.LOG_TAG, "Error while retrieving crash data", e);
         }
 
         return crashReportData;
diff --git a/acra/src/main/java/org/acra/collector/CustomDataCollector.java b/acra/src/main/java/me/wimanacra/collector/CustomDataCollector.java
similarity index 90%
rename from acra/src/main/java/org/acra/collector/CustomDataCollector.java
rename to acra/src/main/java/me/wimanacra/collector/CustomDataCollector.java
index 68bbceec..7d164945 100644
--- a/acra/src/main/java/org/acra/collector/CustomDataCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/CustomDataCollector.java
@@ -13,15 +13,15 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java b/acra/src/main/java/me/wimanacra/collector/DeviceFeaturesCollector.java
similarity index 86%
rename from acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
rename to acra/src/main/java/me/wimanacra/collector/DeviceFeaturesCollector.java
index 0a74e8b1..e462483c 100644
--- a/acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/DeviceFeaturesCollector.java
@@ -13,20 +13,18 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.content.pm.FeatureInfo;
 import android.content.pm.PackageManager;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-
-import static org.acra.ACRA.LOG_TAG;
+import me.wimanacra.ACRA;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 
 /**
  * Features declared as available on the device.
@@ -64,7 +62,7 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
                 }
             }
         } catch (Throwable e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceFeatures for " + context.getPackageName(), e);
+            ACRA.log.w(ACRA.LOG_TAG, "Couldn't retrieve DeviceFeatures for " + context.getPackageName(), e);
         }
 
         return result;
diff --git a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java b/acra/src/main/java/me/wimanacra/collector/DeviceIdCollector.java
similarity index 86%
rename from acra/src/main/java/org/acra/collector/DeviceIdCollector.java
rename to acra/src/main/java/me/wimanacra/collector/DeviceIdCollector.java
index d94229a7..600f377a 100644
--- a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/DeviceIdCollector.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.Manifest;
 import android.annotation.SuppressLint;
@@ -23,18 +23,16 @@
 import android.support.annotation.Nullable;
 import android.telephony.TelephonyManager;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.PackageManagerWrapper;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.PackageManagerWrapper;
 
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collects the device ID
  *
@@ -78,7 +76,7 @@ private String getDeviceId() {
             final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
             return tm.getDeviceId();
         } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
+            ACRA.log.w(ACRA.LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
             return null;
         }
     }
diff --git a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java b/acra/src/main/java/me/wimanacra/collector/DisplayManagerCollector.java
similarity index 97%
rename from acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
rename to acra/src/main/java/me/wimanacra/collector/DisplayManagerCollector.java
index 82eed946..9fb77ed4 100644
--- a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/DisplayManagerCollector.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.graphics.Point;
@@ -26,11 +26,11 @@
 import android.view.Display;
 import android.view.Surface;
 
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ACRA;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
diff --git a/acra/src/main/java/org/acra/collector/DropBoxCollector.java b/acra/src/main/java/me/wimanacra/collector/DropBoxCollector.java
similarity index 92%
rename from acra/src/main/java/org/acra/collector/DropBoxCollector.java
rename to acra/src/main/java/me/wimanacra/collector/DropBoxCollector.java
index 2d1fd55e..510fb8f7 100644
--- a/acra/src/main/java/org/acra/collector/DropBoxCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/DropBoxCollector.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.Manifest;
 import android.content.Context;
@@ -21,14 +21,14 @@
 import android.os.DropBoxManager;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-import org.acra.util.PackageManagerWrapper;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
+import me.wimanacra.util.PackageManagerWrapper;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -38,8 +38,6 @@
 import java.util.Locale;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collects data from the {@link DropBoxManager}. A
  * set of DropBox tags have been identified in the Android source code. , we
@@ -125,7 +123,7 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
             return dropboxContent;
 
         } catch (Exception e) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "DropBoxManager not available.");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "DropBoxManager not available.");
         }
 
         return ACRAConstants.NOT_AVAILABLE;
diff --git a/acra/src/main/java/org/acra/collector/LogCatCollector.java b/acra/src/main/java/me/wimanacra/collector/LogCatCollector.java
similarity index 89%
rename from acra/src/main/java/org/acra/collector/LogCatCollector.java
rename to acra/src/main/java/me/wimanacra/collector/LogCatCollector.java
index bfc6729e..673b48ee 100644
--- a/acra/src/main/java/org/acra/collector/LogCatCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/LogCatCollector.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.Manifest;
 import android.os.Build;
@@ -22,16 +22,16 @@
 
 import com.android.internal.util.Predicate;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
-import org.acra.util.PackageManagerWrapper;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.IOUtils;
+import me.wimanacra.util.PackageManagerWrapper;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -39,8 +39,6 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-
 
 /**
  * Executes logcat commands and collects it's output.
@@ -97,7 +95,7 @@ private Element collectLogCat(@Nullable String bufferName) {
         try {
             final Process process =  new ProcessBuilder().command(commandLine).redirectErrorStream(true).start();
 
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Retrieving logcat output...");
 
             logcat = new StringElement(streamToString(process.getInputStream(), new Predicate<String>() {
                 @Override
@@ -108,7 +106,7 @@ public boolean apply(String s) {
             process.destroy();
 
         } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
+            ACRA.log.e(ACRA.LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
             logcat = ACRAConstants.NOT_AVAILABLE;
         }
 
diff --git a/acra/src/main/java/org/acra/collector/LogFileCollector.java b/acra/src/main/java/me/wimanacra/collector/LogFileCollector.java
similarity index 79%
rename from acra/src/main/java/org/acra/collector/LogFileCollector.java
rename to acra/src/main/java/me/wimanacra/collector/LogFileCollector.java
index 5e17f4b4..fe35ee81 100644
--- a/acra/src/main/java/org/acra/collector/LogFileCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/LogFileCollector.java
@@ -14,21 +14,21 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.app.Application;
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.Directory;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.file.Directory;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.IOUtils;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -36,8 +36,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collects the N last lines of a text stream. Use this collector if your
  * application handles its own logging system.
@@ -85,16 +83,16 @@ private InputStream getStream(@NonNull Directory directory, @NonNull String file
         final File file = directory.getFile(context, fileName);
         if (!file.exists()) {
             if (ACRA.DEV_LOGGING)
-                ACRA.log.d(LOG_TAG, "Log file '" + file.getPath() + "' does not exist");
+                ACRA.log.d(ACRA.LOG_TAG, "Log file '" + file.getPath() + "' does not exist");
         } else if (file.isDirectory()) {
-            ACRA.log.e(LOG_TAG, "Log file '" + file.getPath() + "' is a directory");
+            ACRA.log.e(ACRA.LOG_TAG, "Log file '" + file.getPath() + "' is a directory");
         } else if (!file.canRead()) {
-            ACRA.log.e(LOG_TAG, "Log file '" + file.getPath() + "' can't be read");
+            ACRA.log.e(ACRA.LOG_TAG, "Log file '" + file.getPath() + "' can't be read");
         } else {
             try {
                 return new FileInputStream(file);
             } catch (IOException e) {
-                ACRA.log.e(LOG_TAG, "Could not open stream for log file '" + file.getPath() + "'");
+                ACRA.log.e(ACRA.LOG_TAG, "Could not open stream for log file '" + file.getPath() + "'");
             }
         }
         return new ByteArrayInputStream(new byte[0]);
diff --git a/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java b/acra/src/main/java/me/wimanacra/collector/MediaCodecListCollector.java
similarity index 97%
rename from acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
rename to acra/src/main/java/me/wimanacra/collector/MediaCodecListCollector.java
index 44f72b32..87416143 100644
--- a/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/MediaCodecListCollector.java
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.annotation.TargetApi;
 import android.media.MediaCodecInfo;
@@ -24,12 +24,12 @@
 import android.support.annotation.Nullable;
 import android.util.SparseArray;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
diff --git a/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java b/acra/src/main/java/me/wimanacra/collector/MemoryInfoCollector.java
similarity index 91%
rename from acra/src/main/java/org/acra/collector/MemoryInfoCollector.java
rename to acra/src/main/java/me/wimanacra/collector/MemoryInfoCollector.java
index 9e328151..96c36f94 100644
--- a/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/MemoryInfoCollector.java
@@ -13,21 +13,21 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.os.Build;
 import android.os.Environment;
 import android.os.StatFs;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.NumberElement;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.IOUtils;
 
 import java.io.File;
 import java.io.IOException;
@@ -35,8 +35,6 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collects results of the <code>dumpsys</code> command.
  *
@@ -86,7 +84,7 @@ private static Element collectMemInfo() {
             final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
             return new StringElement(IOUtils.streamToString(process.getInputStream()));
         } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "MemoryInfoCollector.meminfo could not retrieve data", e);
+            ACRA.log.e(ACRA.LOG_TAG, "MemoryInfoCollector.meminfo could not retrieve data", e);
             return ACRAConstants.NOT_AVAILABLE;
         }
     }
diff --git a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java b/acra/src/main/java/me/wimanacra/collector/PackageManagerCollector.java
similarity index 83%
rename from acra/src/main/java/org/acra/collector/PackageManagerCollector.java
rename to acra/src/main/java/me/wimanacra/collector/PackageManagerCollector.java
index 2abee1e5..d80e2da7 100644
--- a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/PackageManagerCollector.java
@@ -13,18 +13,18 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.pm.PackageInfo;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
-import org.acra.util.PackageManagerWrapper;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.NumberElement;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.PackageManagerWrapper;
 
 /**
  * Collects PackageInfo values
diff --git a/acra/src/main/java/org/acra/collector/ReflectionCollector.java b/acra/src/main/java/me/wimanacra/collector/ReflectionCollector.java
similarity index 92%
rename from acra/src/main/java/org/acra/collector/ReflectionCollector.java
rename to acra/src/main/java/me/wimanacra/collector/ReflectionCollector.java
index e4dc768e..38d0e87f 100644
--- a/acra/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/ReflectionCollector.java
@@ -14,20 +14,20 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.os.Build;
 import android.os.Environment;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -37,8 +37,6 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collector retrieving key/value pairs from static fields and getters.
  * Reflection API usage allows to retrieve data without having to
@@ -157,7 +155,7 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
         try {
             return Class.forName(className);
         } catch (ClassNotFoundException e) {
-            ACRA.log.e(LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
+            ACRA.log.e(ACRA.LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
             throw e;
         }
     }
diff --git a/acra/src/main/java/org/acra/collector/SettingsCollector.java b/acra/src/main/java/me/wimanacra/collector/SettingsCollector.java
similarity index 95%
rename from acra/src/main/java/org/acra/collector/SettingsCollector.java
rename to acra/src/main/java/me/wimanacra/collector/SettingsCollector.java
index 3a55e7bc..84ad24e0 100644
--- a/acra/src/main/java/org/acra/collector/SettingsCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/SettingsCollector.java
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.os.Build;
@@ -24,18 +24,18 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 import org.json.JSONException;
 
 import java.lang.reflect.Field;
 
-import static org.acra.ACRA.LOG_TAG;
+import static me.wimanacra.ACRA.LOG_TAG;
 
 /**
  * collects data from {@link System}, {@link Global} and {@link Secure} Settings
diff --git a/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/acra/src/main/java/me/wimanacra/collector/SharedPreferencesCollector.java
similarity index 90%
rename from acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
rename to acra/src/main/java/me/wimanacra/collector/SharedPreferencesCollector.java
index f3f4082c..8ca1defa 100644
--- a/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/SharedPreferencesCollector.java
@@ -13,22 +13,22 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -36,8 +36,6 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collects the content (key/value pairs) of SharedPreferences, from the
  * application default preferences or any other preferences asked by the
@@ -128,7 +126,7 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
                 try {
                     return collect();
                 } catch (JSONException e) {
-                    ACRA.log.w(LOG_TAG, "Could not collect shared preferences", e);
+                    ACRA.log.w(ACRA.LOG_TAG, "Could not collect shared preferences", e);
                     return ACRAConstants.NOT_AVAILABLE;
                 }
             default:
diff --git a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java b/acra/src/main/java/me/wimanacra/collector/SimpleValuesCollector.java
similarity index 90%
rename from acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
rename to acra/src/main/java/me/wimanacra/collector/SimpleValuesCollector.java
index f57f3899..a6b78fba 100644
--- a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/SimpleValuesCollector.java
@@ -13,19 +13,19 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.content.Context;
 import android.os.Build;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.BooleanElement;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.Installation;
+import me.wimanacra.ACRA;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.BooleanElement;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.Installation;
 
 import java.io.File;
 import java.net.InetAddress;
@@ -35,8 +35,6 @@
 import java.util.Set;
 import java.util.UUID;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collects various simple values
  *
@@ -95,7 +93,7 @@ private String getApplicationFilePath() {
             return filesDir.getAbsolutePath();
         }
 
-        ACRA.log.w(LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
+        ACRA.log.w(ACRA.LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
         return "Couldn't retrieve ApplicationFilePath";
     }
 
@@ -118,7 +116,7 @@ private static String getLocalIpAddress() {
                 }
             }
         } catch (SocketException ex) {
-            ACRA.log.w(LOG_TAG, ex.toString());
+            ACRA.log.w(ACRA.LOG_TAG, ex.toString());
         }
         return result.toString();
     }
diff --git a/acra/src/main/java/org/acra/collector/StacktraceCollector.java b/acra/src/main/java/me/wimanacra/collector/StacktraceCollector.java
similarity index 94%
rename from acra/src/main/java/org/acra/collector/StacktraceCollector.java
rename to acra/src/main/java/me/wimanacra/collector/StacktraceCollector.java
index 98b03fb1..88d7887c 100644
--- a/acra/src/main/java/org/acra/collector/StacktraceCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/StacktraceCollector.java
@@ -13,16 +13,16 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
diff --git a/acra/src/main/java/org/acra/collector/ThreadCollector.java b/acra/src/main/java/me/wimanacra/collector/ThreadCollector.java
similarity index 89%
rename from acra/src/main/java/org/acra/collector/ThreadCollector.java
rename to acra/src/main/java/me/wimanacra/collector/ThreadCollector.java
index aab9e7d4..70a8cd37 100644
--- a/acra/src/main/java/org/acra/collector/ThreadCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/ThreadCollector.java
@@ -14,15 +14,15 @@
  *  limitations under the License.
  */
 
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.model.Element;
 import org.json.JSONException;
 
 /**
diff --git a/acra/src/main/java/org/acra/collector/TimeCollector.java b/acra/src/main/java/me/wimanacra/collector/TimeCollector.java
similarity index 90%
rename from acra/src/main/java/org/acra/collector/TimeCollector.java
rename to acra/src/main/java/me/wimanacra/collector/TimeCollector.java
index a34fb4f5..a1d3eab1 100644
--- a/acra/src/main/java/org/acra/collector/TimeCollector.java
+++ b/acra/src/main/java/me/wimanacra/collector/TimeCollector.java
@@ -13,15 +13,15 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.collector;
+package me.wimanacra.collector;
 
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.builder.ReportBuilder;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.StringElement;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
diff --git a/acra/src/main/java/org/acra/config/ACRAConfigurationException.java b/acra/src/main/java/me/wimanacra/config/ACRAConfigurationException.java
similarity index 97%
rename from acra/src/main/java/org/acra/config/ACRAConfigurationException.java
rename to acra/src/main/java/me/wimanacra/config/ACRAConfigurationException.java
index 380d3e79..4f786241 100644
--- a/acra/src/main/java/org/acra/config/ACRAConfigurationException.java
+++ b/acra/src/main/java/me/wimanacra/config/ACRAConfigurationException.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.config;
+package me.wimanacra.config;
 
 /**
  * A simple Exception used when required configuration items are missing.
diff --git a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java b/acra/src/main/java/me/wimanacra/config/ConfigurationBuilder.java
similarity index 84%
rename from acra/src/main/java/org/acra/config/ConfigurationBuilder.java
rename to acra/src/main/java/me/wimanacra/config/ConfigurationBuilder.java
index 19781b2e..7b2c6b55 100644
--- a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
+++ b/acra/src/main/java/me/wimanacra/config/ConfigurationBuilder.java
@@ -13,16 +13,16 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.config;
+package me.wimanacra.config;
 
 import android.app.Application;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.annotation.NoPropagation;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.sender.HttpSender;
+import me.wimanacra.ACRA;
+import me.wimanacra.ReportField;
+import me.wimanacra.annotation.NoPropagation;
+import me.wimanacra.dialog.CrashReportDialog;
+import me.wimanacra.sender.HttpSender;
 
 import java.lang.reflect.Modifier;
 import java.util.Arrays;
@@ -32,8 +32,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ACRAConstants.*;
+import me.wimanacra.ACRAConstants;
 
 /**
  * Builder responsible for programmatic construction of an immutable {@link ACRAConfiguration}.
@@ -41,7 +40,7 @@
  * @since 4.8.1
  */
 @SuppressWarnings("unused")
-@org.acra.annotation.ConfigurationBuilder
+@me.wimanacra.annotation.ConfigurationBuilder
 public final class ConfigurationBuilder extends BaseConfigurationBuilder<ConfigurationBuilder> {
 
     private final Map<String, String> httpHeaders;
@@ -75,20 +74,20 @@ public ACRAConfiguration build() throws ACRAConfigurationException {
 
         switch (reportingInteractionMode()) {
             case TOAST:
-                if (resToastText() == DEFAULT_RES_VALUE) {
+                if (resToastText() == ACRAConstants.DEFAULT_RES_VALUE) {
                     throw new ACRAConfigurationException("TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
                 }
                 break;
             case NOTIFICATION:
-                if (resNotifTickerText() == DEFAULT_RES_VALUE || resNotifTitle() == DEFAULT_RES_VALUE || resNotifText() == DEFAULT_RES_VALUE) {
+                if (resNotifTickerText() == ACRAConstants.DEFAULT_RES_VALUE || resNotifTitle() == ACRAConstants.DEFAULT_RES_VALUE || resNotifText() == ACRAConstants.DEFAULT_RES_VALUE) {
                     throw new ACRAConfigurationException("NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
                 }
-                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
+                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == ACRAConstants.DEFAULT_RES_VALUE) {
                     throw new ACRAConfigurationException("NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
                 }
                 break;
             case DIALOG:
-                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
+                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == ACRAConstants.DEFAULT_RES_VALUE) {
                     throw new ACRAConfigurationException("DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
                 }
                 break;
@@ -163,14 +162,14 @@ public ConfigurationBuilder setHttpHeaders(@NonNull Map<String, String> headers)
     Set<ReportField> reportContent() {
         final Set<ReportField> reportContent = new LinkedHashSet<ReportField>();
         if (customReportContent().length != 0) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using custom Report Fields");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Using custom Report Fields");
             reportContent.addAll(Arrays.asList(customReportContent()));
-        } else if (DEFAULT_STRING_VALUE.equals(mailTo())) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Report Fields");
-            reportContent.addAll(Arrays.asList(DEFAULT_REPORT_FIELDS));
+        } else if (ACRAConstants.DEFAULT_STRING_VALUE.equals(mailTo())) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Using default Report Fields");
+            reportContent.addAll(Arrays.asList(ACRAConstants.DEFAULT_REPORT_FIELDS));
         } else {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
-            reportContent.addAll(Arrays.asList(DEFAULT_MAIL_REPORT_FIELDS));
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Using default Mail Report Fields");
+            reportContent.addAll(Arrays.asList(ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS));
         }
 
         // Add or remove any extra fields.
diff --git a/acra/src/main/java/org/acra/config/DefaultRetryPolicy.java b/acra/src/main/java/me/wimanacra/config/DefaultRetryPolicy.java
similarity index 93%
rename from acra/src/main/java/org/acra/config/DefaultRetryPolicy.java
rename to acra/src/main/java/me/wimanacra/config/DefaultRetryPolicy.java
index d03639cf..24d726cb 100644
--- a/acra/src/main/java/org/acra/config/DefaultRetryPolicy.java
+++ b/acra/src/main/java/me/wimanacra/config/DefaultRetryPolicy.java
@@ -13,9 +13,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.config;
+package me.wimanacra.config;
 
-import org.acra.sender.ReportSender;
+import me.wimanacra.sender.ReportSender;
 
 import java.util.List;
 
diff --git a/acra/src/main/java/org/acra/config/RetryPolicy.java b/acra/src/main/java/me/wimanacra/config/RetryPolicy.java
similarity index 92%
rename from acra/src/main/java/org/acra/config/RetryPolicy.java
rename to acra/src/main/java/me/wimanacra/config/RetryPolicy.java
index b27b24ee..e10abe56 100644
--- a/acra/src/main/java/org/acra/config/RetryPolicy.java
+++ b/acra/src/main/java/me/wimanacra/config/RetryPolicy.java
@@ -13,10 +13,10 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.config;
+package me.wimanacra.config;
 
-import org.acra.sender.ReportSender;
-import org.acra.sender.ReportSenderException;
+import me.wimanacra.sender.ReportSender;
+import me.wimanacra.sender.ReportSenderException;
 
 import java.util.List;
 
diff --git a/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java b/acra/src/main/java/me/wimanacra/dialog/BaseCrashReportDialog.java
similarity index 83%
rename from acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
rename to acra/src/main/java/me/wimanacra/dialog/BaseCrashReportDialog.java
index 45676c9c..db4b7610 100644
--- a/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
+++ b/acra/src/main/java/me/wimanacra/dialog/BaseCrashReportDialog.java
@@ -1,27 +1,26 @@
-package org.acra.dialog;
+package me.wimanacra.dialog;
 
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.app.FragmentActivity;
 import android.widget.Toast;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.BulkReportDeleter;
-import org.acra.file.CrashReportPersister;
-import org.acra.sender.SenderServiceStarter;
-import org.acra.util.ToastSender;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.file.BulkReportDeleter;
+import me.wimanacra.file.CrashReportPersister;
+import me.wimanacra.sender.SenderServiceStarter;
+import me.wimanacra.util.ToastSender;
 import org.json.JSONException;
 
 import java.io.File;
 import java.io.IOException;
 import java.io.Serializable;
 
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.USER_COMMENT;
-import static org.acra.ReportField.USER_EMAIL;
+import static me.wimanacra.ReportField.USER_COMMENT;
+import static me.wimanacra.ReportField.USER_EMAIL;
 
 /**
  * Activity which implements the base functionality for a CrashReportDialog.
@@ -61,7 +60,7 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
 
 
         if (ACRA.DEV_LOGGING) {
-            ACRA.log.d(LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
+            ACRA.log.d(ACRA.LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
         }
 
         final Serializable sConfig = getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_CONFIG);
@@ -70,7 +69,7 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
         final boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
 
         if (forceCancel) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Forced reports deletion.");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Forced reports deletion.");
             cancelReports();
             finish();
         } else if ((sConfig instanceof ACRAConfiguration) && (sReportFile instanceof File) && ((sException instanceof Throwable) || sException == null)) {
@@ -79,7 +78,7 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
             exception = (Throwable) sException;
             init(savedInstanceState);
         } else {
-            ACRA.log.w(LOG_TAG, "Illegal or incomplete call of BaseCrashReportDialog.");
+            ACRA.log.w(ACRA.LOG_TAG, "Illegal or incomplete call of BaseCrashReportDialog.");
             finish();
         }
     }
@@ -122,15 +121,15 @@ protected final void cancelReports() {
     protected final void sendCrash(@Nullable String comment, @Nullable String userEmail) {
         final CrashReportPersister persister = new CrashReportPersister();
         try {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Add user comment to " + reportFile);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Add user comment to " + reportFile);
             final CrashReportData crashData = persister.load(reportFile);
             crashData.putString(USER_COMMENT, comment == null ? "" : comment);
             crashData.putString(USER_EMAIL, userEmail == null ? "" : userEmail);
             persister.store(crashData, reportFile);
         } catch (IOException e) {
-            ACRA.log.w(LOG_TAG, "User comment not added: ", e);
+            ACRA.log.w(ACRA.LOG_TAG, "User comment not added: ", e);
         } catch (JSONException e) {
-            ACRA.log.w(LOG_TAG, "User comment not added: ", e);
+            ACRA.log.w(ACRA.LOG_TAG, "User comment not added: ", e);
         }
 
         // Start the report sending task
diff --git a/acra/src/main/java/org/acra/dialog/CrashReportDialog.java b/acra/src/main/java/me/wimanacra/dialog/CrashReportDialog.java
similarity index 98%
rename from acra/src/main/java/org/acra/dialog/CrashReportDialog.java
rename to acra/src/main/java/me/wimanacra/dialog/CrashReportDialog.java
index f71f0313..e0c4944a 100644
--- a/acra/src/main/java/org/acra/dialog/CrashReportDialog.java
+++ b/acra/src/main/java/me/wimanacra/dialog/CrashReportDialog.java
@@ -1,4 +1,4 @@
-package org.acra.dialog;
+package me.wimanacra.dialog;
 
 import android.app.AlertDialog;
 import android.content.DialogInterface;
@@ -15,10 +15,10 @@
 import android.widget.ScrollView;
 import android.widget.TextView;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.prefs.PrefUtils;
-import org.acra.prefs.SharedPreferencesFactory;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.prefs.PrefUtils;
+import me.wimanacra.prefs.SharedPreferencesFactory;
 
 
 /**
diff --git a/acra/src/main/java/org/acra/file/BulkReportDeleter.java b/acra/src/main/java/me/wimanacra/file/BulkReportDeleter.java
similarity index 84%
rename from acra/src/main/java/org/acra/file/BulkReportDeleter.java
rename to acra/src/main/java/me/wimanacra/file/BulkReportDeleter.java
index edc9b6b1..0bed9d52 100644
--- a/acra/src/main/java/org/acra/file/BulkReportDeleter.java
+++ b/acra/src/main/java/me/wimanacra/file/BulkReportDeleter.java
@@ -1,15 +1,13 @@
-package org.acra.file;
+package me.wimanacra.file;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
+import me.wimanacra.ACRA;
 
 import java.io.File;
 import java.util.Arrays;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Deletes unsent reports.
  */
@@ -33,7 +31,7 @@ public void deleteReports(boolean approved, int nrToKeep) {
 
         for (int i = 0; i < files.length - nrToKeep; i++) {
             if (!files[i].delete()) {
-                ACRA.log.w(LOG_TAG, "Could not delete report : " + files[i]);
+                ACRA.log.w(ACRA.LOG_TAG, "Could not delete report : " + files[i]);
             }
         }
     }
diff --git a/acra/src/main/java/org/acra/file/CrashReportFileNameParser.java b/acra/src/main/java/me/wimanacra/file/CrashReportFileNameParser.java
similarity index 95%
rename from acra/src/main/java/org/acra/file/CrashReportFileNameParser.java
rename to acra/src/main/java/me/wimanacra/file/CrashReportFileNameParser.java
index 91b64642..618637f9 100644
--- a/acra/src/main/java/org/acra/file/CrashReportFileNameParser.java
+++ b/acra/src/main/java/me/wimanacra/file/CrashReportFileNameParser.java
@@ -13,12 +13,12 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.file;
+package me.wimanacra.file;
 
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
-import org.acra.ErrorReporter;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ErrorReporter;
 
 /**
  * Responsible for determining the state of a Crash Report based on its file name.
diff --git a/acra/src/main/java/org/acra/file/CrashReportPersister.java b/acra/src/main/java/me/wimanacra/file/CrashReportPersister.java
similarity index 91%
rename from acra/src/main/java/org/acra/file/CrashReportPersister.java
rename to acra/src/main/java/me/wimanacra/file/CrashReportPersister.java
index aa275ba4..f69cb9ce 100644
--- a/acra/src/main/java/org/acra/file/CrashReportPersister.java
+++ b/acra/src/main/java/me/wimanacra/file/CrashReportPersister.java
@@ -17,14 +17,15 @@
  *  limitations under the License.
  */
 
-package org.acra.file;
+package me.wimanacra.file;
 
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
-import org.acra.collector.CrashReportData;
-import org.acra.util.JsonUtils;
-import org.acra.util.IOUtils;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.util.JsonUtils;
+import me.wimanacra.util.IOUtils;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -37,7 +38,7 @@
 import java.io.OutputStreamWriter;
 
 /**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
+ * Stores a crash reports data with {@link ReportField} enum values as keys.
  * This is basically the source of {@link java.util.Properties} adapted to extend an
  * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
  * amounts of android time in the generation of a date comment when storing to
diff --git a/acra/src/main/java/org/acra/file/Directory.java b/acra/src/main/java/me/wimanacra/file/Directory.java
similarity index 99%
rename from acra/src/main/java/org/acra/file/Directory.java
rename to acra/src/main/java/me/wimanacra/file/Directory.java
index c3903d8b..5bf18a78 100644
--- a/acra/src/main/java/org/acra/file/Directory.java
+++ b/acra/src/main/java/me/wimanacra/file/Directory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.acra.file;
+package me.wimanacra.file;
 
 import android.content.Context;
 import android.os.Environment;
diff --git a/acra/src/main/java/org/acra/file/LastModifiedComparator.java b/acra/src/main/java/me/wimanacra/file/LastModifiedComparator.java
similarity index 94%
rename from acra/src/main/java/org/acra/file/LastModifiedComparator.java
rename to acra/src/main/java/me/wimanacra/file/LastModifiedComparator.java
index a12a5e18..0815300f 100644
--- a/acra/src/main/java/org/acra/file/LastModifiedComparator.java
+++ b/acra/src/main/java/me/wimanacra/file/LastModifiedComparator.java
@@ -1,4 +1,4 @@
-package org.acra.file;
+package me.wimanacra.file;
 
 import android.support.annotation.NonNull;
 
diff --git a/acra/src/main/java/org/acra/file/ReportLocator.java b/acra/src/main/java/me/wimanacra/file/ReportLocator.java
similarity index 98%
rename from acra/src/main/java/org/acra/file/ReportLocator.java
rename to acra/src/main/java/me/wimanacra/file/ReportLocator.java
index 838a145c..19959ba3 100644
--- a/acra/src/main/java/org/acra/file/ReportLocator.java
+++ b/acra/src/main/java/me/wimanacra/file/ReportLocator.java
@@ -1,4 +1,4 @@
-package org.acra.file;
+package me.wimanacra.file;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
diff --git a/acra/src/main/java/org/acra/http/BaseHttpRequest.java b/acra/src/main/java/me/wimanacra/http/BaseHttpRequest.java
similarity index 84%
rename from acra/src/main/java/org/acra/http/BaseHttpRequest.java
rename to acra/src/main/java/me/wimanacra/http/BaseHttpRequest.java
index dda45c15..35c9e1aa 100644
--- a/acra/src/main/java/org/acra/http/BaseHttpRequest.java
+++ b/acra/src/main/java/me/wimanacra/http/BaseHttpRequest.java
@@ -13,19 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.acra.http;
+package me.wimanacra.http;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Base64;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
-import org.acra.security.KeyStoreHelper;
-import org.acra.sender.HttpSender.Method;
-import org.acra.util.IOUtils;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.security.KeyStoreHelper;
+import me.wimanacra.util.IOUtils;
 
 import java.io.BufferedOutputStream;
 import java.io.IOException;
@@ -40,9 +39,8 @@
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManagerFactory;
 
-import ch.acra.acra.BuildConfig;
-
-import static org.acra.ACRA.LOG_TAG;
+import me.acra.acra.BuildConfig;
+import me.wimanacra.sender.HttpSender;
 
 /**
  * @author F43nd1r
@@ -55,14 +53,14 @@
     @NonNull
     private final Context context;
     @NonNull
-    private final Method method;
+    private final HttpSender.Method method;
     private final String login;
     private final String password;
     private final int connectionTimeOut;
     private final int socketTimeOut;
     private final Map<String, String> headers;
 
-    public BaseHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull Method method,
+    public BaseHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Method method,
                            @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
         this.config = config;
         this.context = context;
@@ -90,15 +88,15 @@ public void send(@NonNull URL url, @NonNull T content) throws IOException {
             try {
                 configureHttps((HttpsURLConnection) urlConnection);
             } catch (GeneralSecurityException e) {
-                ACRA.log.e(LOG_TAG, "Could not configure SSL for ACRA request to " + url, e);
+                ACRA.log.e(ACRA.LOG_TAG, "Could not configure SSL for ACRA request to " + url, e);
             }
         }
         configureTimeouts(urlConnection, connectionTimeOut, socketTimeOut);
         configureHeaders(urlConnection, login, password, headers, content);
         if(ACRA.DEV_LOGGING){
-            ACRA.log.d(LOG_TAG, "Sending request to " + url);
-            ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
-            ACRA.log.d(LOG_TAG, content.toString());
+            ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
+            ACRA.log.d(ACRA.LOG_TAG, "Http " + method.name() + " content : ");
+            ACRA.log.d(ACRA.LOG_TAG, content.toString());
         }
         writeContent(urlConnection, method, content);
         handleResponse(urlConnection.getResponseCode(), urlConnection.getResponseMessage());
@@ -158,7 +156,7 @@ protected void configureHeaders(@NonNull HttpURLConnection connection, @Nullable
     protected abstract String getContentType(@NonNull Context context, @NonNull T t);
 
     @SuppressWarnings("WeakerAccess")
-    protected void writeContent(@NonNull HttpURLConnection connection, @NonNull Method method, @NonNull T content) throws IOException{
+    protected void writeContent(@NonNull HttpURLConnection connection, @NonNull HttpSender.Method method, @NonNull T content) throws IOException{
         final byte[] contentAsBytes = asBytes(content);
         // write output - see http://developer.android.com/reference/java/net/HttpURLConnection.html
         connection.setRequestMethod(method.name());
@@ -183,19 +181,19 @@ protected void writeContent(@NonNull HttpURLConnection connection, @NonNull Meth
 
     @SuppressWarnings("WeakerAccess")
     protected void handleResponse(int responseCode, String responseMessage) throws IOException {
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Request response : " + responseCode + " : " + responseMessage);
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Request response : " + responseCode + " : " + responseMessage);
         if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {
             // All is good
-            ACRA.log.i(LOG_TAG, "Request received by server");
+            ACRA.log.i(ACRA.LOG_TAG, "Request received by server");
         } else if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT || responseCode >= HttpURLConnection.HTTP_INTERNAL_ERROR) {
             //timeout or server error. Repeat the request later.
-            ACRA.log.w(LOG_TAG, "Could not send ACRA Post responseCode=" + responseCode + " message=" + responseMessage);
+            ACRA.log.w(ACRA.LOG_TAG, "Could not send ACRA Post responseCode=" + responseCode + " message=" + responseMessage);
             throw new IOException("Host returned error code " + responseCode);
         } else if (responseCode >= HttpURLConnection.HTTP_BAD_REQUEST && responseCode < HttpURLConnection.HTTP_INTERNAL_ERROR) {
             // Client error. The request must not be repeated. Discard it.
-            ACRA.log.w(LOG_TAG, responseCode + ": Client error - request will be discarded");
+            ACRA.log.w(ACRA.LOG_TAG, responseCode + ": Client error - request will be discarded");
         } else {
-            ACRA.log.w(LOG_TAG, "Could not send ACRA Post - request will be discarded. responseCode=" + responseCode + " message=" + responseMessage);
+            ACRA.log.w(ACRA.LOG_TAG, "Could not send ACRA Post - request will be discarded. responseCode=" + responseCode + " message=" + responseMessage);
         }
     }
 }
diff --git a/acra/src/main/java/org/acra/http/BinaryHttpRequest.java b/acra/src/main/java/me/wimanacra/http/BinaryHttpRequest.java
similarity index 90%
rename from acra/src/main/java/org/acra/http/BinaryHttpRequest.java
rename to acra/src/main/java/me/wimanacra/http/BinaryHttpRequest.java
index a5dd08c3..c5b5c281 100644
--- a/acra/src/main/java/org/acra/http/BinaryHttpRequest.java
+++ b/acra/src/main/java/me/wimanacra/http/BinaryHttpRequest.java
@@ -1,12 +1,12 @@
-package org.acra.http;
+package me.wimanacra.http;
 
 import android.content.Context;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.config.ACRAConfiguration;
-import org.acra.sender.HttpSender;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.sender.HttpSender;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/acra/src/main/java/org/acra/http/DefaultHttpRequest.java b/acra/src/main/java/me/wimanacra/http/DefaultHttpRequest.java
similarity index 91%
rename from acra/src/main/java/org/acra/http/DefaultHttpRequest.java
rename to acra/src/main/java/me/wimanacra/http/DefaultHttpRequest.java
index 2e1a4052..4aad39a3 100644
--- a/acra/src/main/java/org/acra/http/DefaultHttpRequest.java
+++ b/acra/src/main/java/me/wimanacra/http/DefaultHttpRequest.java
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.acra.http;
+package me.wimanacra.http;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
-import org.acra.sender.HttpSender;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.sender.HttpSender;
 
 import java.io.IOException;
 import java.util.Map;
diff --git a/acra/src/main/java/org/acra/http/HttpRequest.java b/acra/src/main/java/me/wimanacra/http/HttpRequest.java
similarity index 96%
rename from acra/src/main/java/org/acra/http/HttpRequest.java
rename to acra/src/main/java/me/wimanacra/http/HttpRequest.java
index 79e6ed16..ae9fb167 100644
--- a/acra/src/main/java/org/acra/http/HttpRequest.java
+++ b/acra/src/main/java/me/wimanacra/http/HttpRequest.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.acra.http;
+package me.wimanacra.http;
 
 import android.support.annotation.NonNull;
 
diff --git a/acra/src/main/java/org/acra/http/HttpUtils.java b/acra/src/main/java/me/wimanacra/http/HttpUtils.java
similarity index 98%
rename from acra/src/main/java/org/acra/http/HttpUtils.java
rename to acra/src/main/java/me/wimanacra/http/HttpUtils.java
index ffddb072..c0ae8d10 100644
--- a/acra/src/main/java/org/acra/http/HttpUtils.java
+++ b/acra/src/main/java/me/wimanacra/http/HttpUtils.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.acra.http;
+package me.wimanacra.http;
 
 import android.content.ContentResolver;
 import android.content.Context;
@@ -23,7 +23,7 @@
 import android.support.annotation.NonNull;
 import android.webkit.MimeTypeMap;
 
-import org.acra.ACRAConstants;
+import me.wimanacra.ACRAConstants;
 
 import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
diff --git a/acra/src/main/java/org/acra/http/MultipartHttpRequest.java b/acra/src/main/java/me/wimanacra/http/MultipartHttpRequest.java
similarity index 95%
rename from acra/src/main/java/org/acra/http/MultipartHttpRequest.java
rename to acra/src/main/java/me/wimanacra/http/MultipartHttpRequest.java
index 0031bd0d..368db066 100644
--- a/acra/src/main/java/org/acra/http/MultipartHttpRequest.java
+++ b/acra/src/main/java/me/wimanacra/http/MultipartHttpRequest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.http;
+package me.wimanacra.http;
 
 import android.content.Context;
 import android.net.Uri;
@@ -22,9 +22,9 @@
 import android.support.annotation.Nullable;
 import android.util.Pair;
 
-import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
-import org.acra.sender.HttpSender;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.sender.HttpSender;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java b/acra/src/main/java/me/wimanacra/legacy/LegacyFileHandler.java
similarity index 96%
rename from acra/src/main/java/org/acra/legacy/LegacyFileHandler.java
rename to acra/src/main/java/me/wimanacra/legacy/LegacyFileHandler.java
index e73638a2..1415b8de 100644
--- a/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java
+++ b/acra/src/main/java/me/wimanacra/legacy/LegacyFileHandler.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package org.acra.legacy;
+package me.wimanacra.legacy;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 
-import org.acra.prefs.PrefUtils;
+import me.wimanacra.prefs.PrefUtils;
 
 /**
  * @author F43nd1r
diff --git a/acra/src/main/java/org/acra/legacy/ReportConverter.java b/acra/src/main/java/me/wimanacra/legacy/ReportConverter.java
similarity index 93%
rename from acra/src/main/java/org/acra/legacy/ReportConverter.java
rename to acra/src/main/java/me/wimanacra/legacy/ReportConverter.java
index 071c1191..41ec6a6b 100644
--- a/acra/src/main/java/org/acra/legacy/ReportConverter.java
+++ b/acra/src/main/java/me/wimanacra/legacy/ReportConverter.java
@@ -14,23 +14,23 @@
  * limitations under the License.
  */
 
-package org.acra.legacy;
+package me.wimanacra.legacy;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.file.CrashReportPersister;
-import org.acra.file.ReportLocator;
-import org.acra.model.BooleanElement;
-import org.acra.model.ComplexElement;
-import org.acra.collector.CrashReportData;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.file.CrashReportPersister;
+import me.wimanacra.file.ReportLocator;
+import me.wimanacra.model.BooleanElement;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.model.Element;
+import me.wimanacra.model.NumberElement;
+import me.wimanacra.model.StringElement;
+import me.wimanacra.util.IOUtils;
 import org.json.JSONException;
 
 import java.io.BufferedInputStream;
@@ -45,8 +45,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Converts acras old file format to json
  *
@@ -63,7 +61,7 @@
     }
 
     void convert() {
-        ACRA.log.i(LOG_TAG, "Converting unsent ACRA reports to json");
+        ACRA.log.i(ACRA.LOG_TAG, "Converting unsent ACRA reports to json");
         final ReportLocator locator = new ReportLocator(context);
         final CrashReportPersister persister = new CrashReportPersister();
         final List<File> reportFiles = new ArrayList<File>();
@@ -86,17 +84,17 @@ void convert() {
                 try {
                     //If this succeeds the report has already been converted, happens e.g. on preference clear.
                     persister.load(report);
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Tried to convert already converted report file " + report.getPath() + ". Ignoring");
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Tried to convert already converted report file " + report.getPath() + ". Ignoring");
                 } catch (Throwable t) {
                     //File matches neither of the known formats, remove it.
-                    ACRA.log.w(LOG_TAG, "Unable to read report file " + report.getPath() + ". Deleting", e);
+                    ACRA.log.w(ACRA.LOG_TAG, "Unable to read report file " + report.getPath() + ". Deleting", e);
                     IOUtils.deleteReport(report);
                 }
             } finally {
                 IOUtils.safeClose(in);
             }
         }
-        ACRA.log.i(LOG_TAG, "Converted " + converted + " unsent reports");
+        ACRA.log.i(ACRA.LOG_TAG, "Converted " + converted + " unsent reports");
     }
 
 
diff --git a/acra/src/main/java/org/acra/legacy/ReportMigrator.java b/acra/src/main/java/me/wimanacra/legacy/ReportMigrator.java
similarity index 68%
rename from acra/src/main/java/org/acra/legacy/ReportMigrator.java
rename to acra/src/main/java/me/wimanacra/legacy/ReportMigrator.java
index f6abe927..c0386d19 100644
--- a/acra/src/main/java/org/acra/legacy/ReportMigrator.java
+++ b/acra/src/main/java/me/wimanacra/legacy/ReportMigrator.java
@@ -1,18 +1,16 @@
-package org.acra.legacy;
+package me.wimanacra.legacy;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.file.CrashReportFileNameParser;
-import org.acra.file.ReportLocator;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.file.CrashReportFileNameParser;
+import me.wimanacra.file.ReportLocator;
 
 import java.io.File;
 import java.io.FilenameFilter;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Migrates reports from the pre 4.8.0 location to the 4.8.0+ locations.
  */
@@ -29,7 +27,7 @@
     }
 
     void migrate() {
-        ACRA.log.i(LOG_TAG, "Migrating unsent ACRA reports to new file locations");
+        ACRA.log.i(ACRA.LOG_TAG, "Migrating unsent ACRA reports to new file locations");
 
         final File[] reportFiles = getCrashReportFiles();
 
@@ -38,15 +36,15 @@ void migrate() {
             final String fileName = file.getName();
             if (fileNameParser.isApproved(fileName)) {
                 if (file.renameTo(new File(reportLocator.getApprovedFolder(), fileName))) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Cold not migrate unsent ACRA crash report : " + fileName);
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Cold not migrate unsent ACRA crash report : " + fileName);
                 }
             } else {
                 if (file.renameTo(new File(reportLocator.getUnapprovedFolder(), fileName))) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Cold not migrate unsent ACRA crash report : " + fileName);
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Cold not migrate unsent ACRA crash report : " + fileName);
                 }
             }
         }
-        ACRA.log.i(LOG_TAG, "Migrated " + reportFiles.length + " unsent reports");
+        ACRA.log.i(ACRA.LOG_TAG, "Migrated " + reportFiles.length + " unsent reports");
     }
 
     /**
@@ -58,11 +56,11 @@ void migrate() {
     private File[] getCrashReportFiles() {
         final File dir = context.getFilesDir();
         if (dir == null) {
-            ACRA.log.w(LOG_TAG, "Application files directory does not exist! The application may not be installed correctly. Please try reinstalling.");
+            ACRA.log.w(ACRA.LOG_TAG, "Application files directory does not exist! The application may not be installed correctly. Please try reinstalling.");
             return new File[0];
         }
 
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
 
         // Filter for ".stacktrace" files
         final FilenameFilter filter = new FilenameFilter() {
diff --git a/acra/src/main/java/org/acra/log/ACRALog.java b/acra/src/main/java/me/wimanacra/log/ACRALog.java
similarity index 98%
rename from acra/src/main/java/org/acra/log/ACRALog.java
rename to acra/src/main/java/me/wimanacra/log/ACRALog.java
index c909448a..788a3c71 100644
--- a/acra/src/main/java/org/acra/log/ACRALog.java
+++ b/acra/src/main/java/me/wimanacra/log/ACRALog.java
@@ -1,4 +1,4 @@
-package org.acra.log;
+package me.wimanacra.log;
 
 import android.support.annotation.Nullable;
 
diff --git a/acra/src/main/java/org/acra/log/AndroidLogDelegate.java b/acra/src/main/java/me/wimanacra/log/AndroidLogDelegate.java
similarity index 98%
rename from acra/src/main/java/org/acra/log/AndroidLogDelegate.java
rename to acra/src/main/java/me/wimanacra/log/AndroidLogDelegate.java
index d7e585e5..69adec1b 100644
--- a/acra/src/main/java/org/acra/log/AndroidLogDelegate.java
+++ b/acra/src/main/java/me/wimanacra/log/AndroidLogDelegate.java
@@ -1,4 +1,4 @@
-package org.acra.log;
+package me.wimanacra.log;
 
 
 import android.util.Log;
diff --git a/acra/src/main/java/org/acra/log/HollowLog.java b/acra/src/main/java/me/wimanacra/log/HollowLog.java
similarity index 92%
rename from acra/src/main/java/org/acra/log/HollowLog.java
rename to acra/src/main/java/me/wimanacra/log/HollowLog.java
index 94b2cb6c..0758efea 100644
--- a/acra/src/main/java/org/acra/log/HollowLog.java
+++ b/acra/src/main/java/me/wimanacra/log/HollowLog.java
@@ -1,9 +1,9 @@
-package org.acra.log;
+package me.wimanacra.log;
 
 import android.support.annotation.Nullable;
 
 /**
- * Stub implementation of {@link org.acra.log.ACRALog}, quenches all logging.
+ * Stub implementation of {@link ACRALog}, quenches all logging.
  */
 @SuppressWarnings("unused")
 public final class HollowLog implements ACRALog {
diff --git a/acra/src/main/java/org/acra/model/BooleanElement.java b/acra/src/main/java/me/wimanacra/model/BooleanElement.java
similarity index 97%
rename from acra/src/main/java/org/acra/model/BooleanElement.java
rename to acra/src/main/java/me/wimanacra/model/BooleanElement.java
index 29559568..627665ce 100644
--- a/acra/src/main/java/org/acra/model/BooleanElement.java
+++ b/acra/src/main/java/me/wimanacra/model/BooleanElement.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package me.wimanacra.model;
 
 /**
  * @author F43nd1r
diff --git a/acra/src/main/java/org/acra/model/ComplexElement.java b/acra/src/main/java/me/wimanacra/model/ComplexElement.java
similarity index 96%
rename from acra/src/main/java/org/acra/model/ComplexElement.java
rename to acra/src/main/java/me/wimanacra/model/ComplexElement.java
index 7e2a9f84..745cf454 100644
--- a/acra/src/main/java/org/acra/model/ComplexElement.java
+++ b/acra/src/main/java/me/wimanacra/model/ComplexElement.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package me.wimanacra.model;
 
 import android.support.annotation.NonNull;
 
-import org.acra.util.JsonUtils;
+import me.wimanacra.util.JsonUtils;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
diff --git a/acra/src/main/java/org/acra/model/Element.java b/acra/src/main/java/me/wimanacra/model/Element.java
similarity index 96%
rename from acra/src/main/java/org/acra/model/Element.java
rename to acra/src/main/java/me/wimanacra/model/Element.java
index 7e7e1ac0..f9dd9b85 100644
--- a/acra/src/main/java/org/acra/model/Element.java
+++ b/acra/src/main/java/me/wimanacra/model/Element.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package me.wimanacra.model;
 
 /**
  * @author F43nd1r
diff --git a/acra/src/main/java/org/acra/model/NumberElement.java b/acra/src/main/java/me/wimanacra/model/NumberElement.java
similarity index 97%
rename from acra/src/main/java/org/acra/model/NumberElement.java
rename to acra/src/main/java/me/wimanacra/model/NumberElement.java
index 98c8109d..7d5859b8 100644
--- a/acra/src/main/java/org/acra/model/NumberElement.java
+++ b/acra/src/main/java/me/wimanacra/model/NumberElement.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package me.wimanacra.model;
 
 /**
  * @author F43nd1r
diff --git a/acra/src/main/java/org/acra/model/StringElement.java b/acra/src/main/java/me/wimanacra/model/StringElement.java
similarity index 97%
rename from acra/src/main/java/org/acra/model/StringElement.java
rename to acra/src/main/java/me/wimanacra/model/StringElement.java
index 8d33b72f..27979b36 100644
--- a/acra/src/main/java/org/acra/model/StringElement.java
+++ b/acra/src/main/java/me/wimanacra/model/StringElement.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package me.wimanacra.model;
 
 /**
  * @author F43nd1r
diff --git a/acra/src/main/java/org/acra/prefs/PrefUtils.java b/acra/src/main/java/me/wimanacra/prefs/PrefUtils.java
similarity index 93%
rename from acra/src/main/java/org/acra/prefs/PrefUtils.java
rename to acra/src/main/java/me/wimanacra/prefs/PrefUtils.java
index 1359c6b5..8bceaeab 100644
--- a/acra/src/main/java/org/acra/prefs/PrefUtils.java
+++ b/acra/src/main/java/me/wimanacra/prefs/PrefUtils.java
@@ -1,4 +1,4 @@
-package org.acra.prefs;
+package me.wimanacra.prefs;
 
 import android.content.SharedPreferences;
 import android.os.Build;
diff --git a/acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java b/acra/src/main/java/me/wimanacra/prefs/SharedPreferencesFactory.java
similarity index 92%
rename from acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
rename to acra/src/main/java/me/wimanacra/prefs/SharedPreferencesFactory.java
index c9695c79..3cbfc3e6 100644
--- a/acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
+++ b/acra/src/main/java/me/wimanacra/prefs/SharedPreferencesFactory.java
@@ -1,12 +1,12 @@
-package org.acra.prefs;
+package me.wimanacra.prefs;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.config.ACRAConfiguration;
 
 /**
  * Responsible for creating a SharedPreferences instance which stores ACRA settings.
diff --git a/acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java b/acra/src/main/java/me/wimanacra/security/AssetKeyStoreFactory.java
similarity index 89%
rename from acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java
rename to acra/src/main/java/me/wimanacra/security/AssetKeyStoreFactory.java
index 9f3779a6..8caefbbe 100644
--- a/acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java
+++ b/acra/src/main/java/me/wimanacra/security/AssetKeyStoreFactory.java
@@ -13,18 +13,16 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
+import me.wimanacra.ACRA;
 
 import java.io.IOException;
 import java.io.InputStream;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * KeyStoreFactory for a certificate stored in an asset file
  *
@@ -50,7 +48,7 @@ public InputStream getInputStream(@NonNull Context context) {
         try {
             return context.getAssets().open(assetName);
         } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "Could not open certificate in asset://"+assetName, e);
+            ACRA.log.e(ACRA.LOG_TAG, "Could not open certificate in asset://"+assetName, e);
         }
         return null;
     }
diff --git a/acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java b/acra/src/main/java/me/wimanacra/security/BaseKeyStoreFactory.java
similarity index 89%
rename from acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java
rename to acra/src/main/java/me/wimanacra/security/BaseKeyStoreFactory.java
index b51c9821..986f5938 100644
--- a/acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java
+++ b/acra/src/main/java/me/wimanacra/security/BaseKeyStoreFactory.java
@@ -13,15 +13,15 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.util.IOUtils;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.util.IOUtils;
 
 import java.io.BufferedInputStream;
 import java.io.IOException;
@@ -33,8 +33,6 @@
 import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Provides base KeyStoreFactory implementation
  *
@@ -101,13 +99,13 @@ public final KeyStore create(@NonNull Context context) {
                 }
                 return keyStore;
             } catch (CertificateException e) {
-                ACRA.log.e(LOG_TAG, "Could not load certificate", e);
+                ACRA.log.e(ACRA.LOG_TAG, "Could not load certificate", e);
             } catch (KeyStoreException e) {
-                ACRA.log.e(LOG_TAG, "Could not load keystore", e);
+                ACRA.log.e(ACRA.LOG_TAG, "Could not load keystore", e);
             } catch (NoSuchAlgorithmException e) {
-                ACRA.log.e(LOG_TAG, "Could not load keystore", e);
+                ACRA.log.e(ACRA.LOG_TAG, "Could not load keystore", e);
             } catch (IOException e) {
-                ACRA.log.e(LOG_TAG, "Could not load keystore", e);
+                ACRA.log.e(ACRA.LOG_TAG, "Could not load keystore", e);
             } finally {
                 IOUtils.safeClose(bufferedInputStream);
             }
diff --git a/acra/src/main/java/org/acra/security/FileKeyStoreFactory.java b/acra/src/main/java/me/wimanacra/security/FileKeyStoreFactory.java
similarity index 90%
rename from acra/src/main/java/org/acra/security/FileKeyStoreFactory.java
rename to acra/src/main/java/me/wimanacra/security/FileKeyStoreFactory.java
index 3aaa9d02..6b913853 100644
--- a/acra/src/main/java/org/acra/security/FileKeyStoreFactory.java
+++ b/acra/src/main/java/me/wimanacra/security/FileKeyStoreFactory.java
@@ -13,19 +13,17 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
+import me.wimanacra.ACRA;
 
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.InputStream;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * KeyStoreFactory for a certificate stored in a file
  *
@@ -51,7 +49,7 @@ public InputStream getInputStream(@NonNull Context context) {
         try {
             return new FileInputStream(filePath);
         } catch (FileNotFoundException e) {
-            ACRA.log.e(LOG_TAG, "Could not find File "+filePath, e);
+            ACRA.log.e(ACRA.LOG_TAG, "Could not find File "+filePath, e);
         }
         return null;
     }
diff --git a/acra/src/main/java/org/acra/security/KeyStoreFactory.java b/acra/src/main/java/me/wimanacra/security/KeyStoreFactory.java
similarity index 96%
rename from acra/src/main/java/org/acra/security/KeyStoreFactory.java
rename to acra/src/main/java/me/wimanacra/security/KeyStoreFactory.java
index abd981c0..d23713ca 100644
--- a/acra/src/main/java/org/acra/security/KeyStoreFactory.java
+++ b/acra/src/main/java/me/wimanacra/security/KeyStoreFactory.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
diff --git a/acra/src/main/java/org/acra/security/KeyStoreHelper.java b/acra/src/main/java/me/wimanacra/security/KeyStoreHelper.java
similarity index 94%
rename from acra/src/main/java/org/acra/security/KeyStoreHelper.java
rename to acra/src/main/java/me/wimanacra/security/KeyStoreHelper.java
index ace808b3..03ba6322 100644
--- a/acra/src/main/java/org/acra/security/KeyStoreHelper.java
+++ b/acra/src/main/java/me/wimanacra/security/KeyStoreHelper.java
@@ -13,15 +13,15 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
-import org.acra.util.InstanceCreator;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.util.InstanceCreator;
 
 import java.security.KeyStore;
 
diff --git a/acra/src/main/java/org/acra/security/NoKeyStoreFactory.java b/acra/src/main/java/me/wimanacra/security/NoKeyStoreFactory.java
similarity index 97%
rename from acra/src/main/java/org/acra/security/NoKeyStoreFactory.java
rename to acra/src/main/java/me/wimanacra/security/NoKeyStoreFactory.java
index da833424..e04eab50 100644
--- a/acra/src/main/java/org/acra/security/NoKeyStoreFactory.java
+++ b/acra/src/main/java/me/wimanacra/security/NoKeyStoreFactory.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
diff --git a/acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java b/acra/src/main/java/me/wimanacra/security/ResourceKeyStoreFactory.java
similarity index 97%
rename from acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
rename to acra/src/main/java/me/wimanacra/security/ResourceKeyStoreFactory.java
index dc8f1344..c7fdf148 100644
--- a/acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
+++ b/acra/src/main/java/me/wimanacra/security/ResourceKeyStoreFactory.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.security;
+package me.wimanacra.security;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
diff --git a/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java b/acra/src/main/java/me/wimanacra/sender/DefaultReportSenderFactory.java
similarity index 82%
rename from acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
rename to acra/src/main/java/me/wimanacra/sender/DefaultReportSenderFactory.java
index e11db3e2..22bcfd30 100644
--- a/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
+++ b/acra/src/main/java/me/wimanacra/sender/DefaultReportSenderFactory.java
@@ -1,14 +1,12 @@
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.Manifest;
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
-import org.acra.util.PackageManagerWrapper;
-
-import static org.acra.ACRA.LOG_TAG;
+import me.wimanacra.ACRA;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.util.PackageManagerWrapper;
 
 /**
  * Will send reports by email if the 'mailTo' parameter is configured,
@@ -25,14 +23,14 @@ public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration
         final PackageManagerWrapper pm = new PackageManagerWrapper(context);
         if (!"".equals(config.mailTo())) {
             // Try to send by mail. If a mailTo address is provided, do not add other senders.
-            ACRA.log.i(LOG_TAG, context.getPackageName() + " reports will be sent by email (if accepted by user).");
+            ACRA.log.i(ACRA.LOG_TAG, context.getPackageName() + " reports will be sent by email (if accepted by user).");
             return new EmailIntentSenderFactory().create(context, config);
         } else if (!pm.hasPermission(Manifest.permission.INTERNET)) {
             // NB If the PackageManager has died then this will erroneously log
             // the error that the App doesn't have Internet (even though it does).
             // I think that is a small price to pay to ensure that ACRA doesn't
             // crash if the PackageManager has died.
-            ACRA.log.e(LOG_TAG,
+            ACRA.log.e(ACRA.LOG_TAG,
                     context.getPackageName()
                             + " should be granted permission "
                             + Manifest.permission.INTERNET
@@ -40,7 +38,7 @@ public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration
             return new NullSender();
         } else if (config.formUri() != null && !"".equals(config.formUri())) {
             // If formUri is set, instantiate a sender for a generic HTTP POST form with default mapping.
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, context.getPackageName() + " reports will be sent by Http.");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, context.getPackageName() + " reports will be sent by Http.");
             return new HttpSenderFactory().create(context, config);
         } else {
             return new NullSender();
diff --git a/acra/src/main/java/org/acra/sender/EmailIntentSender.java b/acra/src/main/java/me/wimanacra/sender/EmailIntentSender.java
similarity index 92%
rename from acra/src/main/java/org/acra/sender/EmailIntentSender.java
rename to acra/src/main/java/me/wimanacra/sender/EmailIntentSender.java
index 6df0a895..c86f62bb 100644
--- a/acra/src/main/java/org/acra/sender/EmailIntentSender.java
+++ b/acra/src/main/java/me/wimanacra/sender/EmailIntentSender.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.ComponentName;
 import android.content.Context;
@@ -25,17 +25,17 @@
 import android.support.annotation.NonNull;
 import android.text.TextUtils;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.attachment.DefaultAttachmentProvider;
-import org.acra.collections.ImmutableSet;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.CrashReportPersister;
-import org.acra.model.Element;
-import org.acra.util.InstanceCreator;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.attachment.DefaultAttachmentProvider;
+import me.wimanacra.collections.ImmutableSet;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.file.CrashReportPersister;
+import me.wimanacra.model.Element;
+import me.wimanacra.util.InstanceCreator;
 
 import java.io.File;
 import java.io.IOException;
@@ -43,13 +43,13 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
+import static me.wimanacra.ACRA.LOG_TAG;
 
 /**
  * Send reports through an email intent.
  * <p>
  * The user will be asked to chose his preferred email client. Included report fields can be defined using
- * {@link org.acra.annotation.ReportsCrashes#customReportContent()}. Crash receiving mailbox has to be
+ * {@link ReportsCrashes#customReportContent()}. Crash receiving mailbox has to be
  * defined with {@link ReportsCrashes#mailTo()}.
  */
 public class EmailIntentSender implements ReportSender {
diff --git a/acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java b/acra/src/main/java/me/wimanacra/sender/EmailIntentSenderFactory.java
similarity index 83%
rename from acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
rename to acra/src/main/java/me/wimanacra/sender/EmailIntentSenderFactory.java
index 6b23f66a..550802cd 100644
--- a/acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
+++ b/acra/src/main/java/me/wimanacra/sender/EmailIntentSenderFactory.java
@@ -1,9 +1,9 @@
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.config.ACRAConfiguration;
 
 /**
  * Constructs an {@link EmailIntentSender}.
diff --git a/acra/src/main/java/org/acra/sender/HttpSender.java b/acra/src/main/java/me/wimanacra/sender/HttpSender.java
similarity index 95%
rename from acra/src/main/java/org/acra/sender/HttpSender.java
rename to acra/src/main/java/me/wimanacra/sender/HttpSender.java
index 32807d3e..e4d36939 100644
--- a/acra/src/main/java/org/acra/sender/HttpSender.java
+++ b/acra/src/main/java/me/wimanacra/sender/HttpSender.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.net.Uri;
@@ -22,20 +22,20 @@
 import android.text.TextUtils;
 import android.util.Pair;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.attachment.DefaultAttachmentProvider;
-import org.acra.collections.ImmutableSet;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.http.BinaryHttpRequest;
-import org.acra.http.DefaultHttpRequest;
-import org.acra.http.HttpUtils;
-import org.acra.http.MultipartHttpRequest;
-import org.acra.model.Element;
-import org.acra.util.InstanceCreator;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.ReportField;
+import me.wimanacra.annotation.ReportsCrashes;
+import me.wimanacra.attachment.DefaultAttachmentProvider;
+import me.wimanacra.collections.ImmutableSet;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.http.BinaryHttpRequest;
+import me.wimanacra.http.DefaultHttpRequest;
+import me.wimanacra.http.HttpUtils;
+import me.wimanacra.http.MultipartHttpRequest;
+import me.wimanacra.model.Element;
+import me.wimanacra.util.InstanceCreator;
 import org.json.JSONObject;
 
 import java.io.IOException;
@@ -46,8 +46,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * <p>
  * The {@link ReportSender} used by ACRA when {@link ReportsCrashes#formUri()}
@@ -232,7 +230,7 @@ public void send(@NonNull Context context, @NonNull CrashReportData report) thro
 
         try {
             final String baseUrl = mFormUri == null ? config.formUri() : mFormUri.toString();
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Connect to " + baseUrl);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Connect to " + baseUrl);
 
             final String login = mUsername != null ? mUsername : isNull(config.formUriBasicAuthLogin()) ? null : config.formUriBasicAuthLogin();
             final String password = mPassword != null ? mPassword : isNull(config.formUriBasicAuthPassword()) ? null : config.formUriBasicAuthPassword();
diff --git a/acra/src/main/java/org/acra/sender/HttpSenderFactory.java b/acra/src/main/java/me/wimanacra/sender/HttpSenderFactory.java
similarity index 85%
rename from acra/src/main/java/org/acra/sender/HttpSenderFactory.java
rename to acra/src/main/java/me/wimanacra/sender/HttpSenderFactory.java
index 69fc1d6f..ddbe483e 100644
--- a/acra/src/main/java/org/acra/sender/HttpSenderFactory.java
+++ b/acra/src/main/java/me/wimanacra/sender/HttpSenderFactory.java
@@ -1,9 +1,9 @@
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.config.ACRAConfiguration;
 
 /**
  * Constructs a {@link HttpSender} with no report field mappings.
diff --git a/acra/src/main/java/org/acra/sender/NullSender.java b/acra/src/main/java/me/wimanacra/sender/NullSender.java
similarity index 50%
rename from acra/src/main/java/org/acra/sender/NullSender.java
rename to acra/src/main/java/me/wimanacra/sender/NullSender.java
index a3539c06..43a68ccd 100644
--- a/acra/src/main/java/org/acra/sender/NullSender.java
+++ b/acra/src/main/java/me/wimanacra/sender/NullSender.java
@@ -1,12 +1,10 @@
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.collector.CrashReportData;
-
-import static org.acra.ACRA.LOG_TAG;
+import me.wimanacra.ACRA;
+import me.wimanacra.collector.CrashReportData;
 
 /**
  * Sends no report.
@@ -14,6 +12,6 @@
 final class NullSender implements ReportSender {
     @Override
     public void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException {
-        ACRA.log.w(LOG_TAG, context.getPackageName() + " reports will NOT be sent - no valid ReportSender is configured. Try setting 'formUri' or 'mailTo'");
+        ACRA.log.w(ACRA.LOG_TAG, context.getPackageName() + " reports will NOT be sent - no valid ReportSender is configured. Try setting 'formUri' or 'mailTo'");
     }
 }
diff --git a/acra/src/main/java/org/acra/sender/ReportDistributor.java b/acra/src/main/java/me/wimanacra/sender/ReportDistributor.java
similarity index 81%
rename from acra/src/main/java/org/acra/sender/ReportDistributor.java
rename to acra/src/main/java/me/wimanacra/sender/ReportDistributor.java
index 9a4fdd20..9f414274 100644
--- a/acra/src/main/java/org/acra/sender/ReportDistributor.java
+++ b/acra/src/main/java/me/wimanacra/sender/ReportDistributor.java
@@ -13,20 +13,20 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.support.annotation.NonNull;
-import org.acra.ACRA;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.config.DefaultRetryPolicy;
-import org.acra.config.RetryPolicy;
-import org.acra.file.CrashReportPersister;
-import org.acra.util.IOUtils;
-import org.acra.util.InstanceCreator;
+import me.wimanacra.ACRA;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.config.DefaultRetryPolicy;
+import me.wimanacra.config.RetryPolicy;
+import me.wimanacra.file.CrashReportPersister;
+import me.wimanacra.util.IOUtils;
+import me.wimanacra.util.InstanceCreator;
 import org.json.JSONException;
 
 import java.io.File;
@@ -34,8 +34,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Distributes reports to all Senders.
  *
@@ -68,23 +66,23 @@
      */
     public void distribute(@NonNull File reportFile) {
 
-        ACRA.log.i(LOG_TAG, "Sending report " + reportFile );
+        ACRA.log.i(ACRA.LOG_TAG, "Sending report " + reportFile );
         try {
             final CrashReportPersister persister = new CrashReportPersister();
             final CrashReportData previousCrashReport = persister.load(reportFile);
             sendCrashReport(previousCrashReport);
             IOUtils.deleteReport(reportFile);
         } catch (RuntimeException e) {
-            ACRA.log.e(LOG_TAG, "Failed to send crash reports for " + reportFile, e);
+            ACRA.log.e(ACRA.LOG_TAG, "Failed to send crash reports for " + reportFile, e);
             IOUtils.deleteReport(reportFile);
         } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
+            ACRA.log.e(ACRA.LOG_TAG, "Failed to load crash report for " + reportFile, e);
             IOUtils.deleteReport(reportFile);
         } catch (JSONException e) {
-            ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
+            ACRA.log.e(ACRA.LOG_TAG, "Failed to load crash report for " + reportFile, e);
             IOUtils.deleteReport(reportFile);
         }catch (ReportSenderException e) {
-            ACRA.log.e(LOG_TAG, "Failed to send crash report for " + reportFile, e);
+            ACRA.log.e(ACRA.LOG_TAG, "Failed to send crash report for " + reportFile, e);
             // An issue occurred while sending this report but we can still try to
             // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
             // so there's not much to fear about overloading a failing server.
@@ -104,9 +102,9 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
             final List<RetryPolicy.FailedSender> failedSenders = new LinkedList<RetryPolicy.FailedSender>();
             for (ReportSender sender : reportSenders) {
                 try {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Sending report using " + sender.getClass().getName());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Sending report using " + sender.getClass().getName());
                     sender.send(context, errorContent);
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Sent report using " + sender.getClass().getName());
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Sent report using " + sender.getClass().getName());
                 } catch (ReportSenderException e) {
                     failedSenders.add(new RetryPolicy.FailedSender(sender, e));
                 }
@@ -114,7 +112,7 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
 
             final InstanceCreator instanceCreator = new InstanceCreator();
             if (failedSenders.isEmpty()) {
-                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Report was sent by all senders");
+                if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Report was sent by all senders");
             } else if (instanceCreator.create(config.retryPolicyClass(), new DefaultRetryPolicy()).shouldRetrySend(reportSenders, failedSenders)) {
                 final Throwable firstFailure = failedSenders.get(0).getException();
                 throw new ReportSenderException("Policy marked this task as incomplete. ACRA will try to send this report again.", firstFailure);
@@ -125,7 +123,7 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
                     builder.append(", ");
                 }
                 builder.append("] failed, but Policy marked this task as complete. ACRA will not send this report again.");
-                ACRA.log.w(LOG_TAG, builder.toString());
+                ACRA.log.w(ACRA.LOG_TAG, builder.toString());
             }
         }
     }
diff --git a/acra/src/main/java/org/acra/sender/ReportSender.java b/acra/src/main/java/me/wimanacra/sender/ReportSender.java
similarity index 93%
rename from acra/src/main/java/org/acra/sender/ReportSender.java
rename to acra/src/main/java/me/wimanacra/sender/ReportSender.java
index f7cb4125..27ad2bb4 100644
--- a/acra/src/main/java/org/acra/sender/ReportSender.java
+++ b/acra/src/main/java/me/wimanacra/sender/ReportSender.java
@@ -13,12 +13,13 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.collector.CrashReportData;
+import me.wimanacra.ReportField;
+import me.wimanacra.collector.CrashReportData;
 
 /**
  * A simple interface for defining various crash report senders.
@@ -40,7 +41,7 @@
      *
      * @param context       Android Context in which to send the crash report.
      * @param errorContent  Stores key/value pairs for each report field.
-     *                      A report field is identified by a {@link org.acra.ReportField} enum value.
+     *                      A report field is identified by a {@link ReportField} enum value.
      * @throws ReportSenderException
      *             If anything goes fatally wrong during the handling of crash
      *             data, you can (should) throw a {@link ReportSenderException}
diff --git a/acra/src/main/java/org/acra/sender/ReportSenderException.java b/acra/src/main/java/me/wimanacra/sender/ReportSenderException.java
similarity index 98%
rename from acra/src/main/java/org/acra/sender/ReportSenderException.java
rename to acra/src/main/java/me/wimanacra/sender/ReportSenderException.java
index 7b832dc4..acb1a4fc 100644
--- a/acra/src/main/java/org/acra/sender/ReportSenderException.java
+++ b/acra/src/main/java/me/wimanacra/sender/ReportSenderException.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.sender;
+package me.wimanacra.sender;
 
 /**
  * This exception is thrown when an error occurred while sending crash data in a
diff --git a/acra/src/main/java/org/acra/sender/ReportSenderFactory.java b/acra/src/main/java/me/wimanacra/sender/ReportSenderFactory.java
similarity index 90%
rename from acra/src/main/java/org/acra/sender/ReportSenderFactory.java
rename to acra/src/main/java/me/wimanacra/sender/ReportSenderFactory.java
index 122abb2e..421f58bb 100644
--- a/acra/src/main/java/org/acra/sender/ReportSenderFactory.java
+++ b/acra/src/main/java/me/wimanacra/sender/ReportSenderFactory.java
@@ -1,8 +1,8 @@
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.config.ACRAConfiguration;
 
 /**
  * Factory for creating and configuring a {@link ReportSender} instance.
diff --git a/acra/src/main/java/org/acra/sender/SenderService.java b/acra/src/main/java/me/wimanacra/sender/SenderService.java
similarity index 82%
rename from acra/src/main/java/org/acra/sender/SenderService.java
rename to acra/src/main/java/me/wimanacra/sender/SenderService.java
index 607e5670..9744761b 100644
--- a/acra/src/main/java/org/acra/sender/SenderService.java
+++ b/acra/src/main/java/me/wimanacra/sender/SenderService.java
@@ -13,27 +13,25 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.app.IntentService;
 import android.content.Intent;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.CrashReportFileNameParser;
-import org.acra.file.ReportLocator;
-import org.acra.util.InstanceCreator;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.file.CrashReportFileNameParser;
+import me.wimanacra.file.ReportLocator;
+import me.wimanacra.util.InstanceCreator;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
-
 public class SenderService extends IntentService {
 
     public static final String EXTRA_ONLY_SEND_SILENT_REPORTS = "onlySendSilentReports";
@@ -50,7 +48,7 @@ public SenderService() {
     @Override
     protected void onHandleIntent(@Nullable final Intent intent) {
         if (intent == null || !intent.hasExtra(EXTRA_ACRA_CONFIG)) {
-            if(ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "SenderService was started but no valid intent was delivered, will now quit");
+            if(ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "SenderService was started but no valid intent was delivered, will now quit");
             return;
         }
 
@@ -61,7 +59,7 @@ protected void onHandleIntent(@Nullable final Intent intent) {
 
         final Collection<Class<? extends ReportSenderFactory>> senderFactoryClasses = config.reportSenderFactoryClasses();
 
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "About to start sending reports from SenderService");
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "About to start sending reports from SenderService");
         try {
             final List<ReportSender> senderInstances = getSenderInstances(config, senderFactoryClasses);
 
@@ -91,10 +89,10 @@ protected void onHandleIntent(@Nullable final Intent intent) {
                 reportsSentCount++;
             }
         } catch (Exception e) {
-            ACRA.log.e(LOG_TAG, "", e);
+            ACRA.log.e(ACRA.LOG_TAG, "", e);
         }
 
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished sending reports from SenderService");
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Finished sending reports from SenderService");
     }
 
     @NonNull
@@ -111,12 +109,12 @@ protected void onHandleIntent(@Nullable final Intent intent) {
      * Flag all pending reports as "approved" by the user. These reports can be sent.
      */
     private void markReportsAsApproved() {
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Mark all pending reports as approved.");
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Mark all pending reports as approved.");
 
         for (File report : locator.getUnapprovedReports()) {
             final File approvedReport = new File(locator.getApprovedFolder(), report.getName());
             if (!report.renameTo(approvedReport)) {
-                ACRA.log.w(LOG_TAG, "Could not rename approved report from " + report + " to " + approvedReport);
+                ACRA.log.w(ACRA.LOG_TAG, "Could not rename approved report from " + report + " to " + approvedReport);
             }
         }
     }
diff --git a/acra/src/main/java/org/acra/sender/SenderServiceStarter.java b/acra/src/main/java/me/wimanacra/sender/SenderServiceStarter.java
similarity index 89%
rename from acra/src/main/java/org/acra/sender/SenderServiceStarter.java
rename to acra/src/main/java/me/wimanacra/sender/SenderServiceStarter.java
index 4475e247..89879fc1 100644
--- a/acra/src/main/java/org/acra/sender/SenderServiceStarter.java
+++ b/acra/src/main/java/me/wimanacra/sender/SenderServiceStarter.java
@@ -1,13 +1,13 @@
-package org.acra.sender;
+package me.wimanacra.sender;
 
 import android.content.Context;
 import android.content.Intent;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
+import me.wimanacra.ACRA;
+import me.wimanacra.config.ACRAConfiguration;
 
-import static org.acra.ACRA.LOG_TAG;
+import static me.wimanacra.ACRA.LOG_TAG;
 
 /**
  * Starts the Service(Intent)Service to process and send pending reports.
diff --git a/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java b/acra/src/main/java/me/wimanacra/util/ApplicationStartupProcessor.java
similarity index 89%
rename from acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
rename to acra/src/main/java/me/wimanacra/util/ApplicationStartupProcessor.java
index 9f21df82..a1b1af79 100644
--- a/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
+++ b/acra/src/main/java/me/wimanacra/util/ApplicationStartupProcessor.java
@@ -1,19 +1,19 @@
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.support.annotation.NonNull;
 import android.widget.Toast;
-import org.acra.ACRA;
-import org.acra.ReportingInteractionMode;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.BulkReportDeleter;
-import org.acra.file.CrashReportFileNameParser;
-import org.acra.file.ReportLocator;
-import org.acra.prefs.PrefUtils;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.sender.SenderServiceStarter;
+import me.wimanacra.ACRA;
+import me.wimanacra.ReportingInteractionMode;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.file.BulkReportDeleter;
+import me.wimanacra.file.CrashReportFileNameParser;
+import me.wimanacra.file.ReportLocator;
+import me.wimanacra.prefs.PrefUtils;
+import me.wimanacra.prefs.SharedPreferencesFactory;
+import me.wimanacra.sender.SenderServiceStarter;
 
 import java.io.File;
 
diff --git a/acra/src/main/java/org/acra/util/IOUtils.java b/acra/src/main/java/me/wimanacra/util/IOUtils.java
similarity index 97%
rename from acra/src/main/java/org/acra/util/IOUtils.java
rename to acra/src/main/java/me/wimanacra/util/IOUtils.java
index edb13c70..f2380736 100644
--- a/acra/src/main/java/org/acra/util/IOUtils.java
+++ b/acra/src/main/java/me/wimanacra/util/IOUtils.java
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -21,9 +21,9 @@
 
 import com.android.internal.util.Predicate;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.collections.BoundedLinkedList;
+import me.wimanacra.ACRA;
+import me.wimanacra.ACRAConstants;
+import me.wimanacra.collections.BoundedLinkedList;
 
 import java.io.BufferedReader;
 import java.io.Closeable;
@@ -34,7 +34,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
+import static me.wimanacra.ACRA.LOG_TAG;
 
 /**
  * @author William Ferguson, F43nd1r
diff --git a/acra/src/main/java/org/acra/util/Installation.java b/acra/src/main/java/me/wimanacra/util/Installation.java
similarity index 88%
rename from acra/src/main/java/org/acra/util/Installation.java
rename to acra/src/main/java/me/wimanacra/util/Installation.java
index 3000000c..bc3f7609 100644
--- a/acra/src/main/java/org/acra/util/Installation.java
+++ b/acra/src/main/java/me/wimanacra/util/Installation.java
@@ -2,12 +2,12 @@
  * Class copied from the Android Developers Blog:
  * http://android-developers.blogspot.com/2011/03/identifying-app-installations.html 
  */
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
+import me.wimanacra.ACRA;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -15,8 +15,6 @@
 import java.io.RandomAccessFile;
 import java.util.UUID;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * <p>
  * Creates a file storing a UUID on the first application start. This UUID can then be used as a identifier of this
@@ -44,10 +42,10 @@ public static synchronized String id(@NonNull Context context) {
                 }
                 sID = readInstallationFile(installation);
             } catch (IOException e) {
-                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+                ACRA.log.w(ACRA.LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
                 return "Couldn't retrieve InstallationId";
             } catch (RuntimeException e) {
-                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+                ACRA.log.w(ACRA.LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
                 return "Couldn't retrieve InstallationId";
             }
         }
diff --git a/acra/src/main/java/org/acra/util/InstanceCreator.java b/acra/src/main/java/me/wimanacra/util/InstanceCreator.java
similarity index 88%
rename from acra/src/main/java/org/acra/util/InstanceCreator.java
rename to acra/src/main/java/me/wimanacra/util/InstanceCreator.java
index 8b2c85a4..3c3b8c99 100644
--- a/acra/src/main/java/org/acra/util/InstanceCreator.java
+++ b/acra/src/main/java/me/wimanacra/util/InstanceCreator.java
@@ -13,19 +13,17 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
+import me.wimanacra.ACRA;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * @author F43nd1r
  * @since 09.03.2017
@@ -43,9 +41,9 @@
         try {
             return clazz.newInstance();
         } catch (InstantiationException e) {
-            ACRA.log.e(LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
+            ACRA.log.e(ACRA.LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
         } catch (IllegalAccessException e) {
-            ACRA.log.e(LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
+            ACRA.log.e(ACRA.LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
         }
         return fallback;
     }
diff --git a/acra/src/main/java/org/acra/util/JsonUtils.java b/acra/src/main/java/me/wimanacra/util/JsonUtils.java
similarity index 92%
rename from acra/src/main/java/org/acra/util/JsonUtils.java
rename to acra/src/main/java/me/wimanacra/util/JsonUtils.java
index f05d09d9..925c3d40 100644
--- a/acra/src/main/java/org/acra/util/JsonUtils.java
+++ b/acra/src/main/java/me/wimanacra/util/JsonUtils.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.util.Log;
 
-import org.acra.ReportField;
-import org.acra.model.ComplexElement;
-import org.acra.collector.CrashReportData;
-import org.acra.model.Element;
+import me.wimanacra.ReportField;
+import me.wimanacra.model.ComplexElement;
+import me.wimanacra.collector.CrashReportData;
+import me.wimanacra.model.Element;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -31,7 +31,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.acra.ACRA.LOG_TAG;
+import static me.wimanacra.ACRA.LOG_TAG;
 
 /**
  * @author F43nd1r
diff --git a/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java b/acra/src/main/java/me/wimanacra/util/NonBlockingBufferedReader.java
similarity index 98%
rename from acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java
rename to acra/src/main/java/me/wimanacra/util/NonBlockingBufferedReader.java
index e9ceb54b..229b23bb 100644
--- a/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java
+++ b/acra/src/main/java/me/wimanacra/util/NonBlockingBufferedReader.java
@@ -1,4 +1,4 @@
-package org.acra.util;
+package me.wimanacra.util;
 
 import java.io.BufferedReader;
 import java.io.IOException;
diff --git a/acra/src/main/java/org/acra/util/PackageManagerWrapper.java b/acra/src/main/java/me/wimanacra/util/PackageManagerWrapper.java
similarity index 93%
rename from acra/src/main/java/org/acra/util/PackageManagerWrapper.java
rename to acra/src/main/java/me/wimanacra/util/PackageManagerWrapper.java
index ae08e026..0218dcfd 100644
--- a/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
+++ b/acra/src/main/java/me/wimanacra/util/PackageManagerWrapper.java
@@ -1,4 +1,4 @@
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.content.Context;
 import android.content.pm.PackageInfo;
@@ -6,9 +6,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
-
-import static org.acra.ACRA.LOG_TAG;
+import me.wimanacra.ACRA;
 
 /**
  * Responsible for wrapping calls to PackageManager to ensure that they always complete without throwing RuntimeExceptions.
@@ -66,7 +64,7 @@ public PackageInfo getPackageInfo() {
         try {
             return pm.getPackageInfo(context.getPackageName(), 0);
         } catch (PackageManager.NameNotFoundException e) {
-            ACRA.log.w(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
             return null;
         } catch (RuntimeException e) {
             // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
diff --git a/acra/src/main/java/org/acra/util/ProcessFinisher.java b/acra/src/main/java/me/wimanacra/util/ProcessFinisher.java
similarity index 90%
rename from acra/src/main/java/org/acra/util/ProcessFinisher.java
rename to acra/src/main/java/me/wimanacra/util/ProcessFinisher.java
index 968106a1..b764c210 100644
--- a/acra/src/main/java/org/acra/util/ProcessFinisher.java
+++ b/acra/src/main/java/me/wimanacra/util/ProcessFinisher.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.app.Activity;
 import android.app.ActivityManager;
@@ -24,15 +24,13 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
-import org.acra.builder.LastActivityManager;
-import org.acra.config.ACRAConfiguration;
-import org.acra.sender.SenderService;
+import me.wimanacra.ACRA;
+import me.wimanacra.builder.LastActivityManager;
+import me.wimanacra.config.ACRAConfiguration;
+import me.wimanacra.sender.SenderService;
 
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Takes care of cleaning up a process and killing it.
  *
@@ -64,13 +62,13 @@ public void finishLastActivity(@Nullable Thread uncaughtExceptionThread) {
         final Activity lastActivity = lastActivityManager.getLastActivity();
         if (lastActivity != null) {
             if (ACRA.DEV_LOGGING)
-                ACRA.log.d(LOG_TAG, "Finishing the last Activity prior to killing the Process");
+                ACRA.log.d(ACRA.LOG_TAG, "Finishing the last Activity prior to killing the Process");
             lastActivity.runOnUiThread(new Runnable() {
                 @Override
                 public void run() {
                     lastActivity.finish();
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "Finished " + lastActivity.getClass());
+                        ACRA.log.d(ACRA.LOG_TAG, "Finished " + lastActivity.getClass());
                 }
             });
 
diff --git a/acra/src/main/java/org/acra/util/ToastSender.java b/acra/src/main/java/me/wimanacra/util/ToastSender.java
similarity index 91%
rename from acra/src/main/java/org/acra/util/ToastSender.java
rename to acra/src/main/java/me/wimanacra/util/ToastSender.java
index 526fc6b4..5fb92c12 100644
--- a/acra/src/main/java/org/acra/util/ToastSender.java
+++ b/acra/src/main/java/me/wimanacra/util/ToastSender.java
@@ -1,4 +1,4 @@
-package org.acra.util;
+package me.wimanacra.util;
 
 import android.content.Context;
 import android.support.annotation.IntRange;
@@ -6,9 +6,9 @@
 import android.support.annotation.StringRes;
 import android.widget.Toast;
 
-import org.acra.ACRA;
+import me.wimanacra.ACRA;
 
-import static org.acra.ACRA.LOG_TAG;
+import static me.wimanacra.ACRA.LOG_TAG;
 
 /**
  * Responsible for sending Toasts under all circumstances.
diff --git a/acra/src/main/java/org/acra/CrashReportDialog.java b/acra/src/main/java/org/acra/CrashReportDialog.java
deleted file mode 100644
index f113167f..00000000
--- a/acra/src/main/java/org/acra/CrashReportDialog.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.acra;
-
-import android.os.Bundle;
-
-import static org.acra.ACRA.LOG_TAG;
-
-
-/**
- * Old crash report dialog.
- *
- * @deprecated since 4.8.0 use {@link org.acra.dialog.CrashReportDialog} instead
- **/
-public final class CrashReportDialog extends org.acra.dialog.CrashReportDialog {
-
-    @Override
-    protected void buildAndShowDialog(Bundle savedInstanceState){
-        ACRA.log.w(LOG_TAG, "org.acra.CrashReportDialog has been deprecated. Please use org.acra.dialog.CrashReportDialog instead");
-        super.buildAndShowDialog(savedInstanceState);
-    }
-}
\ No newline at end of file
diff --git a/acra/src/main/proguard/proguard.cfg b/acra/src/main/proguard/proguard.cfg
index 5c4d5e30..ce3546fc 100644
--- a/acra/src/main/proguard/proguard.cfg
+++ b/acra/src/main/proguard/proguard.cfg
@@ -10,10 +10,10 @@
 -keepattributes *Annotation*
 
 # Keep all the ACRA classes
--keep class org.acra.** { *; }
+-keep class me.wimanacra.** { *; }
 
 # Don't warn about removed methods from AppCompat
 -dontwarn android.support.v4.app.NotificationCompat*
 
 # These classes are constucted with reflection.
--keep public class * implements org.acra.sender.ReportSenderFactory { public <methods>; }
+-keep public class * implements me.wimanacra.sender.ReportSenderFactory { public <methods>; }
diff --git a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java b/annotationprocessor/src/main/java/me/wimanacra/AcraAnnotationProcessor.java
similarity index 98%
rename from annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
rename to annotationprocessor/src/main/java/me/wimanacra/AcraAnnotationProcessor.java
index 581bf0fb..77119d83 100644
--- a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
+++ b/annotationprocessor/src/main/java/me/wimanacra/AcraAnnotationProcessor.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra;
+package me.wimanacra;
 
 import com.google.auto.service.AutoService;
 import com.squareup.javapoet.AnnotationSpec;
@@ -27,8 +27,8 @@
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
 
-import org.acra.annotation.Configuration;
-import org.acra.annotation.ConfigurationBuilder;
+import me.wimanacra.annotation.Configuration;
+import me.wimanacra.annotation.ConfigurationBuilder;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -56,7 +56,8 @@
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic;
 
-import static org.acra.ModelUtils.*;
+import static me.wimanacra.ModelUtils.*;
+
 
 @AutoService(Processor.class)
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
diff --git a/annotationprocessor/src/main/java/org/acra/MethodDefinition.java b/annotationprocessor/src/main/java/me/wimanacra/MethodDefinition.java
similarity index 98%
rename from annotationprocessor/src/main/java/org/acra/MethodDefinition.java
rename to annotationprocessor/src/main/java/me/wimanacra/MethodDefinition.java
index d21cc58a..f740d5fa 100644
--- a/annotationprocessor/src/main/java/org/acra/MethodDefinition.java
+++ b/annotationprocessor/src/main/java/me/wimanacra/MethodDefinition.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra;
+package me.wimanacra;
 
 import com.squareup.javapoet.AnnotationSpec;
 
diff --git a/annotationprocessor/src/main/java/org/acra/ModelUtils.java b/annotationprocessor/src/main/java/me/wimanacra/ModelUtils.java
similarity index 93%
rename from annotationprocessor/src/main/java/org/acra/ModelUtils.java
rename to annotationprocessor/src/main/java/me/wimanacra/ModelUtils.java
index 55d54059..49c8bed6 100644
--- a/annotationprocessor/src/main/java/org/acra/ModelUtils.java
+++ b/annotationprocessor/src/main/java/me/wimanacra/ModelUtils.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package org.acra;
+package me.wimanacra;
 
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeSpec;
 
-import org.acra.annotation.NoPropagation;
+import me.wimanacra.annotation.NoPropagation;
 
 import java.io.IOException;
 import java.util.List;
@@ -46,7 +46,7 @@
  */
 
 class ModelUtils {
-    static final String CONFIGURATION_PACKAGE = "org.acra.config";
+    static final String CONFIGURATION_PACKAGE = "me.wimanacra.config";
     static final String CONFIGURATION_BUILDER = "BaseConfigurationBuilder";
     static final String ACRA_CONFIGURATION = "ACRAConfiguration";
     static final String PREFIX_SETTER = "set";
@@ -55,9 +55,9 @@
     static final String VAR_ANNOTATION_CONFIG = "annotationConfig";
     static final ClassName APPLICATION = ClassName.bestGuess("android.app.Application");
     static final ClassName ANNOTATION_NON_NULL = ClassName.bestGuess("android.support.annotation.NonNull");
-    private static final String IMMUTABLE_MAP = "org.acra.collections.ImmutableMap";
-    private static final String IMMUTABLE_LIST = "org.acra.collections.ImmutableList";
-    private static final String IMMUTABLE_SET = "org.acra.collections.ImmutableSet";
+    private static final String IMMUTABLE_MAP = "me.wimanacra.collections.ImmutableMap";
+    private static final String IMMUTABLE_LIST = "me.wimanacra.collections.ImmutableList";
+    private static final String IMMUTABLE_SET = "me.wimanacra.collections.ImmutableSet";
     private static final ClassName ANNOTATION_NO_PROPAGATION = ClassName.get(NoPropagation.class);
 
     private final Types typeUtils;
diff --git a/annotations/src/main/java/org/acra/annotation/Configuration.java b/annotations/src/main/java/me/wimanacra/annotation/Configuration.java
similarity index 96%
rename from annotations/src/main/java/org/acra/annotation/Configuration.java
rename to annotations/src/main/java/me/wimanacra/annotation/Configuration.java
index 6e4f9fda..10b42766 100644
--- a/annotations/src/main/java/org/acra/annotation/Configuration.java
+++ b/annotations/src/main/java/me/wimanacra/annotation/Configuration.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.annotation;
+package me.wimanacra.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java b/annotations/src/main/java/me/wimanacra/annotation/ConfigurationBuilder.java
similarity index 96%
rename from annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
rename to annotations/src/main/java/me/wimanacra/annotation/ConfigurationBuilder.java
index d7039851..ca31b789 100644
--- a/annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
+++ b/annotations/src/main/java/me/wimanacra/annotation/ConfigurationBuilder.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.annotation;
+package me.wimanacra.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
diff --git a/annotations/src/main/java/org/acra/annotation/NoPropagation.java b/annotations/src/main/java/me/wimanacra/annotation/NoPropagation.java
similarity index 96%
rename from annotations/src/main/java/org/acra/annotation/NoPropagation.java
rename to annotations/src/main/java/me/wimanacra/annotation/NoPropagation.java
index aa6b819e..5c1b21bb 100644
--- a/annotations/src/main/java/org/acra/annotation/NoPropagation.java
+++ b/annotations/src/main/java/me/wimanacra/annotation/NoPropagation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.acra.annotation;
+package me.wimanacra.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
