diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index a3425a22..8143cf23 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -15,10 +15,6 @@
  */
 package org.acra;
 
-import org.acra.annotation.ReportsCrashes;
-import org.acra.log.ACRALog;
-import org.acra.log.AndroidLogDelegate;
-
 import android.app.Application;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
@@ -27,70 +23,66 @@
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.preference.PreferenceManager;
 
+import org.acra.annotation.ReportsCrashes;
+import org.acra.log.ACRALog;
+import org.acra.log.AndroidLogDelegate;
+
+import java.util.Arrays;
+
 /**
  * Use this class to initialize the crash reporting feature using
  * {@link #init(Application)} as soon as possible in your {@link Application}
  * subclass {@link Application#onCreate()} method. Configuration items must have
  * been set by using {@link ReportsCrashes} above the declaration of your
  * {@link Application} subclass.
- * 
+ *
  * @author Kevin Gaudin
- * 
  */
 public class ACRA {
 
     public static final boolean DEV_LOGGING = false; // Should be false for
-                                                     // release.
+    // release.
     public static final String LOG_TAG = ACRA.class.getSimpleName();
-    
-    public static ACRALog log = new AndroidLogDelegate();
-
     /**
      * The key of the application default SharedPreference where you can put a
      * 'true' Boolean value to disable ACRA.
      */
     public static final String PREF_DISABLE_ACRA = "acra.disable";
-
     /**
      * Alternatively, you can use this key if you prefer your users to have the
      * checkbox ticked to enable crash reports. If both acra.disable and
      * acra.enable are set, the value of acra.disable takes over the other.
      */
     public static final String PREF_ENABLE_ACRA = "acra.enable";
-
     /**
      * The key of the SharedPreference allowing the user to disable sending
      * content of logcat/dropbox. System logs collection is also dependent of
      * the READ_LOGS permission.
      */
     public static final String PREF_ENABLE_SYSTEM_LOGS = "acra.syslog.enable";
-
     /**
      * The key of the SharedPreference allowing the user to disable sending his
      * device id. Device ID collection is also dependent of the READ_PHONE_STATE
      * permission.
      */
     public static final String PREF_ENABLE_DEVICE_ID = "acra.deviceid.enable";
-
     /**
      * The key of the SharedPreference allowing the user to always include his
      * email address.
      */
     public static final String PREF_USER_EMAIL_ADDRESS = "acra.user.email";
-
     /**
      * The key of the SharedPreference allowing the user to automatically accept
      * sending reports.
      */
     public static final String PREF_ALWAYS_ACCEPT = "acra.alwaysaccept";
-
     /**
      * The version number of the application the last time ACRA was started.
      * This is used to determine whether unsent reports should be discarded
      * because they are old and out of date.
      */
     public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
-
+    public static ACRALog log = new AndroidLogDelegate();
     private static Application mApplication;
 
     // Accessible via ACRA#getErrorReporter().
@@ -99,6 +91,7 @@
     // NB don't convert to a local field because then it could be garbage
     // collected and then we would have no PreferenceListener.
     private static OnSharedPreferenceChangeListener mPrefListener;
+    private static ACRAConfiguration configProxy;
 
     /**
      * <p>
@@ -106,8 +99,8 @@
      * be placed as soon as possible in the {@link Application#onCreate()}
      * method.
      * </p>
-     * 
-     * @param app   Your Application class.
+     *
+     * @param app Your Application class.
      * @throws IllegalStateException if it is called more than once.
      */
     public static void init(Application app) {
@@ -127,8 +120,8 @@ public static void init(Application app) {
      * method.
      * </p>
      *
-     * @param app       Your Application class.
-     * @param config    ACRAConfiguration to manually set up ACRA configuration.
+     * @param app    Your Application class.
+     * @param config ACRAConfiguration to manually set up ACRA configuration.
      * @throws IllegalStateException if it is called more than once.
      */
     public static void init(Application app, ACRAConfiguration config) {
@@ -142,23 +135,23 @@ public static void init(Application app, ACRAConfiguration config) {
      * method.
      * </p>
      *
-     * @param app       Your Application class.
-     * @param config    ACRAConfiguration to manually set up ACRA configuration.
-     * @param checkReportsOnApplicationStart    Whether to invoke
-     *     ErrorReporter.checkReportsOnApplicationStart(). Apps which adjust the
-     *     ReportSenders should set this to false and call
-     *     checkReportsOnApplicationStart() themselves to prevent a potential
-     *     race with the SendWorker and list of ReportSenders.
+     * @param app                            Your Application class.
+     * @param config                         ACRAConfiguration to manually set up ACRA configuration.
+     * @param checkReportsOnApplicationStart Whether to invoke
+     *                                       ErrorReporter.checkReportsOnApplicationStart(). Apps which adjust the
+     *                                       ReportSenders should set this to false and call
+     *                                       checkReportsOnApplicationStart() themselves to prevent a potential
+     *                                       race with the SendWorker and list of ReportSenders.
      * @throws IllegalStateException if it is called more than once.
      */
-    public static void init(Application app, ACRAConfiguration config, boolean checkReportsOnApplicationStart){
+    public static void init(Application app, ACRAConfiguration config, boolean checkReportsOnApplicationStart) {
 
         if (mApplication != null) {
             log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
             return;
         }
         mApplication = app;
-        
+
         if (config == null) {
             log.e(LOG_TAG, "ACRA#init called but no ACRAConfiguration provided");
             return;
@@ -212,9 +205,8 @@ public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, Strin
 
     /**
      * @return the current instance of ErrorReporter.
-     * @throws IllegalStateException
-     *             if {@link ACRA#init(android.app.Application)} has not yet
-     *             been called.
+     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet
+     *                               been called.
      */
     public static ErrorReporter getErrorReporter() {
         if (errorReporterSingleton == null) {
@@ -223,16 +215,13 @@ public static ErrorReporter getErrorReporter() {
         return errorReporterSingleton;
     }
 
-    
-
     /**
      * Check if the application default shared preferences contains true for the
      * key "acra.disable", do not activate ACRA. Also checks the alternative
      * opposite setting "acra.enable" if "acra.disable" is not found.
-     * 
-     * @param prefs
-     *            SharedPreferences to check to see whether ACRA should be
-     *            disabled.
+     *
+     * @param prefs SharedPreferences to check to see whether ACRA should be
+     *              disabled.
      * @return true if prefs indicate that ACRA should be disabled.
      */
     private static boolean shouldDisableACRA(SharedPreferences prefs) {
@@ -248,36 +237,41 @@ private static boolean shouldDisableACRA(SharedPreferences prefs) {
 
     /**
      * Checks that mandatory configuration items have been provided.
-     * 
-     * @throws ACRAConfigurationException
-     *             if required values are missing.
+     *
+     * @throws ACRAConfigurationException if required values are missing.
      */
     static void checkCrashResources(ReportsCrashes conf) throws ACRAConfigurationException {
         switch (conf.mode()) {
-        case TOAST:
-            if (conf.resToastText() == 0) {
-                throw new ACRAConfigurationException(
-                        "TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
-            }
-            break;
-        case NOTIFICATION:
-            if (conf.resNotifTickerText() == 0 || conf.resNotifTitle() == 0 || conf.resNotifText() == 0) {
-                throw new ACRAConfigurationException(
-                        "NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
-            }
-            if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
-                throw new ACRAConfigurationException(
-                        "NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-            }
-            break;
-        case DIALOG:
-            if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
-                throw new ACRAConfigurationException(
-                        "DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-            }
-            break;
-		default:
-			break;
+            case TOAST:
+                if (conf.resToastText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            case NOTIFICATION:
+                if (conf.resNotifTickerText() == 0 || conf.resNotifTitle() == 0 || conf.resNotifText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
+                }
+                if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            case DIALOG:
+                if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            default:
+                break;
+        }
+
+        if (conf.dropDuplicateReports() && !Arrays.asList(conf.customReportContent()).contains(ReportField.STACK_TRACE_HASH)) {
+            throw new ACRAConfigurationException(
+                    "Duplicate report dropping depends on stack trace hash. Enable ReportField.STACK_TRACE_HASH in customReportContent in your @ReportsCrashes() annotation.");
+
         }
     }
 
@@ -286,9 +280,9 @@ static void checkCrashResources(ReportsCrashes conf) throws ACRAConfigurationExc
      * settings for ACRA are stored. Default are the Application default
      * SharedPreferences, but you can provide another SharedPreferences name
      * with {@link ReportsCrashes#sharedPreferencesName()}.
-     * 
+     *
      * @return The Shared Preferences where ACRA will retrieve its user
-     *         adjustable setting.
+     * adjustable setting.
      */
     public static SharedPreferences getACRASharedPreferences() {
         ReportsCrashes conf = getConfig();
@@ -301,7 +295,7 @@ public static SharedPreferences getACRASharedPreferences() {
 
     /**
      * Provides the current ACRA configuration.
-     * 
+     *
      * @return Current ACRA {@link ReportsCrashes} configuration instance.
      */
     public static ACRAConfiguration getConfig() {
@@ -317,32 +311,29 @@ public static ACRAConfiguration getConfig() {
 
     /**
      * Sets the whole ACRA configuration.
-     * 
-     * @param conf
-     *            ACRAConfiguration to use as a proxy for config info.
+     *
+     * @param conf ACRAConfiguration to use as a proxy for config info.
      */
     public static void setConfig(ACRAConfiguration conf) {
         configProxy = conf;
     }
 
     /**
-     * @param app       Your Application class.
+     * @param app Your Application class.
      * @return new {@link ACRAConfiguration} instance with values initialized
-     *         from the {@link ReportsCrashes} annotation.
+     * from the {@link ReportsCrashes} annotation.
      */
     public static ACRAConfiguration getNewDefaultConfig(Application app) {
-        if(app != null) {
+        if (app != null) {
             return new ACRAConfiguration(app.getClass().getAnnotation(ReportsCrashes.class));
         } else {
             return new ACRAConfiguration(null);
         }
     }
 
-    private static ACRAConfiguration configProxy;
-
     /**
      * Returns true if the application is debuggable.
-     * 
+     *
      * @return true if the application is debuggable.
      */
     static boolean isDebuggable() {
@@ -353,11 +344,11 @@ static boolean isDebuggable() {
             return false;
         }
     }
-    
+
     static Application getApplication() {
         return mApplication;
     }
-    
+
     public static void setLog(ACRALog log) {
         ACRA.log = log;
     }
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index add1f1bf..85b7dbc4 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -28,7 +28,29 @@
 import java.security.KeyStore;
 import java.util.Map;
 
-import static org.acra.ACRAConstants.*;
+import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
+import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
+import static org.acra.ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
+import static org.acra.ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
+import static org.acra.ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
+import static org.acra.ACRAConstants.DEFAULT_DIALOG_ICON;
+import static org.acra.ACRAConstants.DEFAULT_DISABLE_SSL_CERT_VALIDATION;
+import static org.acra.ACRAConstants.DEFAULT_DROPBOX_COLLECTION_MINUTES;
+import static org.acra.ACRAConstants.DEFAULT_DUPLICATE_DROPPING;
+import static org.acra.ACRAConstants.DEFAULT_DUPLICATE_RELEVANCY_TIME;
+import static org.acra.ACRAConstants.DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST;
+import static org.acra.ACRAConstants.DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
+import static org.acra.ACRAConstants.DEFAULT_LOGCAT_FILTER_BY_PID;
+import static org.acra.ACRAConstants.DEFAULT_LOGCAT_LINES;
+import static org.acra.ACRAConstants.DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES;
+import static org.acra.ACRAConstants.DEFAULT_NOTIFICATION_ICON;
+import static org.acra.ACRAConstants.DEFAULT_RES_VALUE;
+import static org.acra.ACRAConstants.DEFAULT_SEND_REPORTS_AT_SHUTDOWN;
+import static org.acra.ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
+import static org.acra.ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
+import static org.acra.ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
+import static org.acra.ACRAConstants.DEFAULT_STRING_VALUE;
+import static org.acra.ACRAConstants.NULL_VALUE;
 
 /**
  * This class is to be used if you need to apply dynamic settings. This is
@@ -95,24 +117,36 @@
     private Map<String, String> mHttpHeaders;
     private KeyStore mKeyStore;
 
+
+    private Boolean mDropDuplicateReports;
+
+    private Long mDropDuplicateReportsRelevancyTime;
+
+
     /**
-     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
-     * This should be used also by third party senders.
-     * 
-     * @param headers
-     *            A map associating HTTP header names to their values.
-     * @return The updated ACRA configuration
+     * @param defaults Defaults with which to initialise this {@link ACRAConfiguration}.
      */
-    public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
-        this.mHttpHeaders = headers;
-        return this;
+    public ACRAConfiguration(ReportsCrashes defaults) {
+        mReportsCrashes = defaults;
+    }
+
+    /**
+     * Empty constructor which sets no defaults.
+     */
+    @SuppressWarnings("unused")
+    public ACRAConfiguration() {
+        this(null);
+    }
+
+    public static boolean isNull(String aString) {
+        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
     }
 
     /**
      * Retrieve HTTP headers defined by the application developer. These should
      * be added to requests sent by any third-party sender (over HTTP of
      * course).
-     * 
+     *
      * @return A map associating http header names to their values.
      */
     public Map<String, String> getHttpHeaders() {
@@ -120,87 +154,92 @@ public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
     }
 
     /**
-     * @param additionalDropboxTags
-     *            the additionalDropboxTags to set
+     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
+     * This should be used also by third party senders.
+     *
+     * @param headers A map associating HTTP header names to their values.
+     * @return The updated ACRA configuration
+     */
+    public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
+        this.mHttpHeaders = headers;
+        return this;
+    }
+
+    /**
+     * @param additionalDropboxTags the additionalDropboxTags to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setAdditionalDropboxTags(String[] additionalDropboxTags) {
         this.mAdditionalDropboxTags = additionalDropboxTags;
         return this;
     }
 
     /**
-     * @param additionalSharedPreferences
-     *            the additionalSharedPreferences to set
+     * @param additionalSharedPreferences the additionalSharedPreferences to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setAdditionalSharedPreferences(String[] additionalSharedPreferences) {
         this.mAdditionalSharedPreferences = additionalSharedPreferences;
         return this;
     }
 
     /**
-     * @param connectionTimeout
-     *            the connectionTimeout to set
+     * @param connectionTimeout the connectionTimeout to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setConnectionTimeout(Integer connectionTimeout) {
         this.mConnectionTimeout = connectionTimeout;
         return this;
     }
 
     /**
-     * @param customReportContent
-     *            the customReportContent to set
+     * @param customReportContent the customReportContent to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setCustomReportContent(ReportField[] customReportContent) {
         this.mCustomReportContent = customReportContent;
         return this;
     }
 
     /**
-     * @param deleteUnapprovedReportsOnApplicationStart
-     *            the deleteUnapprovedReportsOnApplicationStart to set
+     * @param deleteUnapprovedReportsOnApplicationStart the deleteUnapprovedReportsOnApplicationStart to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setDeleteUnapprovedReportsOnApplicationStart(Boolean deleteUnapprovedReportsOnApplicationStart) {
         this.mDeleteUnapprovedReportsOnApplicationStart = deleteUnapprovedReportsOnApplicationStart;
         return this;
     }
 
     /**
-     * @param deleteOldUnsentReportsOnApplicationStart    When to delete old (unsent) reports on startup.
+     * @param deleteOldUnsentReportsOnApplicationStart When to delete old (unsent) reports on startup.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setDeleteOldUnsentReportsOnApplicationStart(Boolean deleteOldUnsentReportsOnApplicationStart) {
         this.mDeleteOldUnsentReportsOnApplicationStart = deleteOldUnsentReportsOnApplicationStart;
         return this;
     }
 
     /**
-     * @param dropboxCollectionMinutes
-     *            the dropboxCollectionMinutes to set
+     * @param dropboxCollectionMinutes the dropboxCollectionMinutes to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setDropboxCollectionMinutes(Integer dropboxCollectionMinutes) {
         this.mDropboxCollectionMinutes = dropboxCollectionMinutes;
         return this;
     }
 
     /**
-     * @param forceCloseDialogAfterToast
-     *            the forceCloseDialogAfterToast to set
+     * @param forceCloseDialogAfterToast the forceCloseDialogAfterToast to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setForceCloseDialogAfterToast(Boolean forceCloseDialogAfterToast) {
         this.mForceCloseDialogAfterToast = forceCloseDialogAfterToast;
         return this;
@@ -211,56 +250,51 @@ public ACRAConfiguration setForceCloseDialogAfterToast(Boolean forceCloseDialogA
      * call {@link ErrorReporter#setDefaultReportSenders()} after modifying this
      * value if you were not using a formUri before (a mailTo or formKey
      * instead).
-     * 
-     * @param formUri
-     *            the formUri to set
+     *
+     * @param formUri the formUri to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setFormUri(String formUri) {
         this.mFormUri = formUri;
         return this;
     }
 
     /**
-     * @param formUriBasicAuthLogin
-     *            the formUriBasicAuthLogin to set
+     * @param formUriBasicAuthLogin the formUriBasicAuthLogin to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setFormUriBasicAuthLogin(String formUriBasicAuthLogin) {
         this.mFormUriBasicAuthLogin = formUriBasicAuthLogin;
         return this;
     }
 
     /**
-     * @param formUriBasicAuthPassword
-     *            the formUriBasicAuthPassword to set
+     * @param formUriBasicAuthPassword the formUriBasicAuthPassword to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setFormUriBasicAuthPassword(String formUriBasicAuthPassword) {
         this.mFormUriBasicAuthPassword = formUriBasicAuthPassword;
         return this;
     }
 
     /**
-     * @param includeDropboxSystemTags
-     *            the includeDropboxSystemTags to set
+     * @param includeDropboxSystemTags the includeDropboxSystemTags to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setIncludeDropboxSystemTags(Boolean includeDropboxSystemTags) {
         this.mIncludeDropboxSystemTags = includeDropboxSystemTags;
         return this;
     }
 
     /**
-     * @param logcatArguments
-     *            the logcatArguments to set
+     * @param logcatArguments the logcatArguments to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setLogcatArguments(String[] logcatArguments) {
         this.mLogcatArguments = logcatArguments;
         return this;
@@ -271,23 +305,21 @@ public ACRAConfiguration setLogcatArguments(String[] logcatArguments) {
      * {@link ErrorReporter#setDefaultReportSenders()} after modifying this
      * value if you were not using a formKey before (a formKey or formUri
      * instead).
-     * 
-     * @param mailTo
-     *            the mailTo to set
+     *
+     * @param mailTo the mailTo to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setMailTo(String mailTo) {
         this.mMailTo = mailTo;
         return this;
     }
 
     /**
-     * @param maxNumberOfRequestRetries
-     *            the maxNumberOfRequestRetries to set
+     * @param maxNumberOfRequestRetries the maxNumberOfRequestRetries to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setMaxNumberOfRequestRetries(Integer maxNumberOfRequestRetries) {
         this.mMaxNumberOfRequestRetries = maxNumberOfRequestRetries;
         return this;
@@ -296,33 +328,31 @@ public ACRAConfiguration setMaxNumberOfRequestRetries(Integer maxNumberOfRequest
     /**
      * Change the current {@link ReportingInteractionMode}. You must set
      * required configuration items first.
-     * 
-     * @param mode
-     *            the new mode to set.
+     *
+     * @param mode the new mode to set.
      * @return The updated ACRA configuration
-     * @throws ACRAConfigurationException
-     *             if a configuration item is missing for this mode.
+     * @throws ACRAConfigurationException if a configuration item is missing for this mode.
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setMode(ReportingInteractionMode mode) throws ACRAConfigurationException {
         this.mMode = mode;
         ACRA.checkCrashResources(this);
         return this;
     }
 
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogPositiveButtonText(int resId) {
         mResDialogPositiveButtonText = resId;
         return this;
     }
 
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogNegativeButtonText(int resId) {
         mResDialogNegativeButtonText = resId;
         return this;
     }
 
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setReportDialogClass(Class<? extends BaseCrashReportDialog> reportDialogClass) {
         mReportDialogClass = reportDialogClass;
         return this;
@@ -332,13 +362,12 @@ public ACRAConfiguration setReportDialogClass(Class<? extends BaseCrashReportDia
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resDialogCommentPrompt()} comes from an Android
      * Library Project.
-     * 
-     * @param resId
-     *            The resource id, see
-     *            {@link ReportsCrashes#resDialogCommentPrompt()}
+     *
+     * @param resId The resource id, see
+     *              {@link ReportsCrashes#resDialogCommentPrompt()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogCommentPrompt(int resId) {
         mResDialogCommentPrompt = resId;
         return this;
@@ -348,13 +377,12 @@ public ACRAConfiguration setResDialogCommentPrompt(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resDialogEmailPrompt()} comes from an Android
      * Library Project.
-     * 
-     * @param resId
-     *            The resource id, see
-     *            {@link ReportsCrashes#resDialogEmailPrompt()}
+     *
+     * @param resId The resource id, see
+     *              {@link ReportsCrashes#resDialogEmailPrompt()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogEmailPrompt(int resId) {
         mResDialogEmailPrompt = resId;
         return this;
@@ -364,12 +392,11 @@ public ACRAConfiguration setResDialogEmailPrompt(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resDialogIcon()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogIcon()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resDialogIcon()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogIcon(int resId) {
         mResDialogIcon = resId;
         return this;
@@ -379,12 +406,11 @@ public ACRAConfiguration setResDialogIcon(int resId) {
      * Use this method BEFORE if the id you wanted to give to
      * {@link ReportsCrashes#resDialogOkToast()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogOkToast()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resDialogOkToast()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogOkToast(int resId) {
         mResDialogOkToast = resId;
         return this;
@@ -394,12 +420,11 @@ public ACRAConfiguration setResDialogOkToast(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resDialogText()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogText()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resDialogText()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogText(int resId) {
         mResDialogText = resId;
         return this;
@@ -409,12 +434,11 @@ public ACRAConfiguration setResDialogText(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resDialogTitle()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogTitle()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resDialogTitle()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResDialogTitle(int resId) {
         mResDialogTitle = resId;
         return this;
@@ -424,12 +448,11 @@ public ACRAConfiguration setResDialogTitle(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resNotifIcon()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resNotifIcon()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resNotifIcon()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResNotifIcon(int resId) {
         mResNotifIcon = resId;
         return this;
@@ -439,12 +462,11 @@ public ACRAConfiguration setResNotifIcon(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resNotifText()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resNotifText()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resNotifText()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResNotifText(int resId) {
         mResNotifText = resId;
         return this;
@@ -454,13 +476,12 @@ public ACRAConfiguration setResNotifText(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resNotifTickerText()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see
-     *            {@link ReportsCrashes#resNotifTickerText()}
+     *
+     * @param resId The resource id, see
+     *              {@link ReportsCrashes#resNotifTickerText()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResNotifTickerText(int resId) {
         mResNotifTickerText = resId;
         return this;
@@ -470,12 +491,11 @@ public ACRAConfiguration setResNotifTickerText(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resNotifTitle()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resNotifTitle()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resNotifTitle()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResNotifTitle(int resId) {
         mResNotifTitle = resId;
         return this;
@@ -485,155 +505,136 @@ public ACRAConfiguration setResNotifTitle(int resId) {
      * Use this method if the id you wanted to give to
      * {@link ReportsCrashes#resToastText()} comes from an Android Library
      * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resToastText()}
+     *
+     * @param resId The resource id, see {@link ReportsCrashes#resToastText()}
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setResToastText(int resId) {
         mResToastText = resId;
         return this;
     }
 
     /**
-     * @param sharedPreferenceMode
-     *            the sharedPreferenceMode to set
+     * @param sharedPreferenceMode the sharedPreferenceMode to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setSharedPreferenceMode(Integer sharedPreferenceMode) {
         this.mSharedPreferenceMode = sharedPreferenceMode;
         return this;
     }
 
     /**
-     * @param sharedPreferenceName
-     *            the sharedPreferenceName to set
+     * @param sharedPreferenceName the sharedPreferenceName to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setSharedPreferenceName(String sharedPreferenceName) {
         this.mSharedPreferenceName = sharedPreferenceName;
         return this;
     }
 
     /**
-     * @param socketTimeout
-     *            the socketTimeout to set
+     * @param socketTimeout the socketTimeout to set
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setSocketTimeout(Integer socketTimeout) {
         this.mSocketTimeout = socketTimeout;
         return this;
     }
 
     /**
-     * 
-     * @param filterByPid
-     *            true if you want to collect only logcat lines related to your
-     *            application process.
+     * @param filterByPid true if you want to collect only logcat lines related to your
+     *                    application process.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setLogcatFilterByPid(Boolean filterByPid) {
         mLogcatFilterByPid = filterByPid;
         return this;
     }
 
     /**
-     * 
-     * @param sendReportsInDevMode
-     *            false if you want to disable sending reports in development
-     *            mode. Reports will be sent only on signed applications.
+     * @param sendReportsInDevMode false if you want to disable sending reports in development
+     *                             mode. Reports will be sent only on signed applications.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setSendReportsInDevMode(Boolean sendReportsInDevMode) {
         mSendReportsInDevMode = sendReportsInDevMode;
         return this;
     }
 
     /**
-     * 
-     * @param sendReportsAtShutdown
-     *            false if you want to disable sending reports at the time the
-     *            exception is caught. Reports will be sent when the application
-     *            is restarted.
+     * @param sendReportsAtShutdown false if you want to disable sending reports at the time the
+     *                              exception is caught. Reports will be sent when the application
+     *                              is restarted.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setSendReportsAtShutdown(Boolean sendReportsAtShutdown) {
         mSendReportsAtShutdown = sendReportsAtShutdown;
         return this;
     }
 
     /**
-     * 
-     * @param excludeMatchingSharedPreferencesKeys
-     *            an array of Strings containing regexp defining
-     *            SharedPreferences keys that should be excluded from the data
-     *            collection.
+     * @param excludeMatchingSharedPreferencesKeys an array of Strings containing regexp defining
+     *                                             SharedPreferences keys that should be excluded from the data
+     *                                             collection.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingSharedPreferencesKeys) {
         mExcludeMatchingSharedPreferencesKeys = excludeMatchingSharedPreferencesKeys;
         return this;
     }
 
     /**
-     * 
-     * @param excludeMatchingSettingsKeys
-     *            an array of Strings containing regexp defining
-     *            Settings.System, Settings.Secure and Settings.Global keys that
-     *            should be excluded from the data collection.
+     * @param excludeMatchingSettingsKeys an array of Strings containing regexp defining
+     *                                    Settings.System, Settings.Secure and Settings.Global keys that
+     *                                    should be excluded from the data collection.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setExcludeMatchingSettingsKeys(String[] excludeMatchingSettingsKeys) {
         mExcludeMatchingSettingsKeys = excludeMatchingSettingsKeys;
         return this;
     }
 
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setBuildConfigClass(Class buildConfigClass) {
         mBuildConfigClass = buildConfigClass;
         return this;
     }
+
     /**
-     * 
-     * @param applicationLogFile
-     *            The path and file name of your application log file, to be
-     *            used with {@link ReportField#APPLICATION_LOG}.
+     * @param applicationLogFile The path and file name of your application log file, to be
+     *                           used with {@link ReportField#APPLICATION_LOG}.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setApplicationLogFile(String applicationLogFile) {
         mApplicationLogFile = applicationLogFile;
         return this;
     }
 
     /**
-     * 
-     * @param applicationLogFileLines
-     *            The number of lines of your application log to be collected,
-     *            to be used with {@link ReportField#APPLICATION_LOG} and
-     *            {@link ReportsCrashes#applicationLogFile()}.
+     * @param applicationLogFileLines The number of lines of your application log to be collected,
+     *                                to be used with {@link ReportField#APPLICATION_LOG} and
+     *                                {@link ReportsCrashes#applicationLogFile()}.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setApplicationLogFileLines(int applicationLogFileLines) {
         mApplicationLogFileLines = applicationLogFileLines;
         return this;
     }
 
     /**
-     * 
-     * @param disableSSLCertValidation
-     *            Set this to true if you need to send reports to a server over
-     *            SSL using a self-signed certificate.
+     * @param disableSSLCertValidation Set this to true if you need to send reports to a server over
+     *                                 SSL using a self-signed certificate.
      * @return The updated ACRA configuration
      */
     public ACRAConfiguration setDisableSSLCertValidation(boolean disableSSLCertValidation) {
@@ -642,53 +643,52 @@ public ACRAConfiguration setDisableSSLCertValidation(boolean disableSSLCertValid
     }
 
     /**
-     * 
-     * @param httpMethod
-     *            The method to be used to send data to the server.
+     * @param httpMethod The method to be used to send data to the server.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setHttpMethod(Method httpMethod) {
         mHttpMethod = httpMethod;
         return this;
     }
 
     /**
-     * 
-     * @param type
-     *            The type of content encoding to be used to send data to the
-     *            server.
+     * @param type The type of content encoding to be used to send data to the
+     *             server.
      * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ACRAConfiguration setReportType(Type type) {
         mReportType = type;
         return this;
     }
 
     /**
-     * 
-     * @param keyStore
-     *            Set this to the keystore that contains the trusted certificates
+     * @param keyStore Set this to the keystore that contains the trusted certificates
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public void setKeyStore(KeyStore keyStore) {
         mKeyStore = keyStore;
     }
 
     /**
-     * @param defaults  Defaults with which to initialise this {@link ACRAConfiguration}.
+     * @param dropDuplicateReports whether to turn duplicate dropping on or off
+     * @return The updated ACRA configuration
      */
-    public ACRAConfiguration(ReportsCrashes defaults) {
-        mReportsCrashes = defaults;
+    @SuppressWarnings("unused")
+    public ACRAConfiguration setDropDuplicateReports(boolean dropDuplicateReports) {
+        this.mDropDuplicateReports = dropDuplicateReports;
+        return this;
     }
 
     /**
-     * Empty constructor which sets no defaults.
+     * @param dropDuplicateReportsRelevancyTime time for which duplicates are considered relevant
+     * @return The updated ACRA configuration
      */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration(){
-        this(null);
+    @SuppressWarnings("unused")
+    public ACRAConfiguration setDropDuplicateReportsRelevancyTime(long dropDuplicateReportsRelevancyTime) {
+        this.mDropDuplicateReportsRelevancyTime = dropDuplicateReportsRelevancyTime;
+        return this;
     }
 
     @Override
@@ -862,7 +862,7 @@ public boolean includeDropBoxSystemTags() {
             return mReportsCrashes.logcatArguments();
         }
 
-        return new String[] { "-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time" };
+        return new String[]{"-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time"};
     }
 
     @Override
@@ -878,6 +878,32 @@ public String mailTo() {
         return DEFAULT_STRING_VALUE;
     }
 
+    @Override
+    public boolean dropDuplicateReports() {
+        if (mDropDuplicateReports != null) {
+            return mDropDuplicateReports;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.dropDuplicateReports();
+        }
+
+        return DEFAULT_DUPLICATE_DROPPING;
+    }
+
+    @Override
+    public long dropDuplicateReportsRelevancyTime() {
+        if (mDropDuplicateReportsRelevancyTime != null) {
+            return mDropDuplicateReportsRelevancyTime;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.dropDuplicateReportsRelevancyTime();
+        }
+
+        return DEFAULT_DUPLICATE_RELEVANCY_TIME;
+    }
+
     @Override
     public int maxNumberOfRequestRetries() {
         if (mMaxNumberOfRequestRetries != null) {
@@ -1246,7 +1272,6 @@ public String httpsSocketFactoryFactoryClass() {
         return null;
     }
 
-
     @Override
     public Class<? extends BaseCrashReportDialog> reportDialogClass() {
         if (mReportDialogClass != null) {
@@ -1261,9 +1286,9 @@ public String httpsSocketFactoryFactoryClass() {
     }
 
     /**
-     * @param httpsSocketFactoryFactory  HttpsSocketFactoryFactory to set.
+     * @param httpsSocketFactoryFactory HttpsSocketFactoryFactory to set.
      */
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public void setHttpsSocketFactoryFactory(HttpsSocketFactoryFactory httpsSocketFactoryFactory) {
         this.mHttpsSocketFactoryFactory = httpsSocketFactoryFactory;
     }
@@ -1295,7 +1320,6 @@ public HttpsSocketFactoryFactory getHttpSocketFactoryFactory() {
         return mHttpsSocketFactoryFactory;
     }
 
-
     @Override
     public Method httpMethod() {
         if (mHttpMethod != null) {
@@ -1330,8 +1354,4 @@ public KeyStore keyStore() {
         return null;
     }
 
-    public static boolean isNull(String aString) {
-        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
-    }
-
 }
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index d34f3acf..c339fd13 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -17,35 +17,48 @@
 
 import android.content.Context;
 
-import static org.acra.ReportField.*;
+import static org.acra.ReportField.ANDROID_VERSION;
+import static org.acra.ReportField.APP_VERSION_CODE;
+import static org.acra.ReportField.APP_VERSION_NAME;
+import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
+import static org.acra.ReportField.BRAND;
+import static org.acra.ReportField.BUILD;
+import static org.acra.ReportField.BUILD_CONFIG;
+import static org.acra.ReportField.CRASH_CONFIGURATION;
+import static org.acra.ReportField.CUSTOM_DATA;
+import static org.acra.ReportField.DEVICE_FEATURES;
+import static org.acra.ReportField.DISPLAY;
+import static org.acra.ReportField.DUMPSYS_MEMINFO;
+import static org.acra.ReportField.ENVIRONMENT;
+import static org.acra.ReportField.FILE_PATH;
+import static org.acra.ReportField.INITIAL_CONFIGURATION;
+import static org.acra.ReportField.INSTALLATION_ID;
+import static org.acra.ReportField.IS_SILENT;
+import static org.acra.ReportField.LOGCAT;
+import static org.acra.ReportField.PACKAGE_NAME;
+import static org.acra.ReportField.PHONE_MODEL;
+import static org.acra.ReportField.PRODUCT;
+import static org.acra.ReportField.REPORT_ID;
+import static org.acra.ReportField.SETTINGS_GLOBAL;
+import static org.acra.ReportField.SETTINGS_SECURE;
+import static org.acra.ReportField.SETTINGS_SYSTEM;
+import static org.acra.ReportField.SHARED_PREFERENCES;
+import static org.acra.ReportField.STACK_TRACE;
+import static org.acra.ReportField.TOTAL_MEM_SIZE;
+import static org.acra.ReportField.USER_APP_START_DATE;
+import static org.acra.ReportField.USER_COMMENT;
+import static org.acra.ReportField.USER_CRASH_DATE;
+import static org.acra.ReportField.USER_EMAIL;
 
 /**
  * Responsible for collating those constants shared among the ACRA components.
- * 
+ *
  * @author William Ferguson
  * @since 4.3.0
  */
 public final class ACRAConstants {
 
     public static final String REPORTFILE_EXTENSION = ".stacktrace";
-
-    /**
-     * Suffix to be added to report files when they have been approved by the
-     * user in NOTIFICATION mode
-     */
-    static final String APPROVED_SUFFIX = "-approved";
-    /**
-     * This key is used to store the silent state of a report sent by
-     * handleSilentException().
-     */
-    static final String SILENT_SUFFIX = "-" + IS_SILENT;
-    /**
-     * This is the number of previously stored reports that we send in
-     * {@link SendWorker#checkAndSendReports(android.content.Context, boolean)}.
-     * The number of reports is limited to avoid ANR on application start.
-     */
-    static final int MAX_SEND_REPORTS = 5;
-
     /**
      * Used in the intent starting CrashReportDialog to provide the name of the
      * latest generated report file in order to be able to associate the user
@@ -54,101 +67,100 @@
     public static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
     /**
      * Used in the intent starting CrashReportDialog to provide the Exception that caused the crash.
-     *
+     * <p/>
      * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
      */
     public static final String EXTRA_REPORT_EXCEPTION = "REPORT_EXCEPTION";
-
-    /**
-     * Set this extra to true to force the deletion of reports by the
-     * {@link CrashReportDialog} activity.
-     */
-    protected static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
     /**
-     * This is the identifier (value = 666) use for the status bar notification
-     * issued when crashes occur.
+     * A special String value to allow the usage of a pseudo-null default value
+     * in annotation parameters.
      */
-    static final int NOTIF_CRASH_ID = 666;
+    public static final String NULL_VALUE = "ACRA-NULL-STRING";
     /**
-     * Number of milliseconds to wait after displaying a toast.
+     * Duplicity detection mode off by default.
      */
-    static final int TOAST_WAIT_DURATION = 2000;
-
+    public static final boolean DEFAULT_DUPLICATE_DROPPING = false;
     /**
-     * A special String value to allow the usage of a pseudo-null default value
-     * in annotation parameters.
+     * Time in milliseconds, when old reports are considered relevant for duplicity detection.
      */
-    public static final String NULL_VALUE = "ACRA-NULL-STRING";
-
+    public static final long DEFAULT_DUPLICATE_RELEVANCY_TIME = 36000000;
     public static final boolean DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST = false;
-
     public static final int DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES = 3;
-
     public static final int DEFAULT_SOCKET_TIMEOUT = 5000;
-
     public static final int DEFAULT_CONNECTION_TIMEOUT = 3000;
-
     public static final boolean DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START = true;
-
     public static final boolean DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START = true;
-
     public static final int DEFAULT_DROPBOX_COLLECTION_MINUTES = 5;
-
     public static final boolean DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS = false;
-
     public static final int DEFAULT_SHARED_PREFERENCES_MODE = Context.MODE_PRIVATE;
-
     public static final int DEFAULT_NOTIFICATION_ICON = android.R.drawable.stat_notify_error;
-
     public static final int DEFAULT_DIALOG_ICON = android.R.drawable.ic_dialog_alert;
-
     public static final int DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT = android.R.string.ok;
-
     public static final int DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT = android.R.string.cancel;
-
     public static final int DEFAULT_RES_VALUE = 0;
-
     public static final String DEFAULT_STRING_VALUE = "";
-
+    public static final String DEFAULT_APPLICATION_LOGFILE = DEFAULT_STRING_VALUE;
     public static final int DEFAULT_LOGCAT_LINES = 100;
-
+    public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
     public static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 8192;
-
     public static final boolean DEFAULT_LOGCAT_FILTER_BY_PID = false;
-
     public static final boolean DEFAULT_SEND_REPORTS_IN_DEV_MODE = true;
-
     public static final boolean DEFAULT_SEND_REPORTS_AT_SHUTDOWN = true;
-
-    public static final String DEFAULT_APPLICATION_LOGFILE = DEFAULT_STRING_VALUE;
-
-    public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
-
     public static final boolean DEFAULT_DISABLE_SSL_CERT_VALIDATION = false;
-
     public static final String DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS = "org.acra.util.DefaultHttpsSocketFactoryFactory";
-
     /**
      * Default list of {@link ReportField}s to be sent in email reports. You can
      * set your own list with
      * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
-     * 
+     *
      * @see org.acra.annotation.ReportsCrashes#mailTo()
      */
-    public final static ReportField[] DEFAULT_MAIL_REPORT_FIELDS = { USER_COMMENT, ANDROID_VERSION, APP_VERSION_NAME,
-            BRAND, PHONE_MODEL, CUSTOM_DATA, STACK_TRACE };
-
+    public final static ReportField[] DEFAULT_MAIL_REPORT_FIELDS = {USER_COMMENT, ANDROID_VERSION, APP_VERSION_NAME,
+            BRAND, PHONE_MODEL, CUSTOM_DATA, STACK_TRACE};
     /**
      * Default list of {@link ReportField}s to be sent in reports. You can set
      * your own list with
      * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
      */
-    public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
+    public static final ReportField[] DEFAULT_REPORT_FIELDS = {REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
             PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
             AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
             DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
             INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES, SETTINGS_SYSTEM, SETTINGS_SECURE,
-            SETTINGS_GLOBAL };
-
+            SETTINGS_GLOBAL};
     public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
+    /**
+     * Set this extra to true to force the deletion of reports by the
+     * {@link CrashReportDialog} activity.
+     */
+    protected static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
+    /**
+     * Suffix to be added to report files when they have been approved by the
+     * user in NOTIFICATION mode
+     */
+    static final String APPROVED_SUFFIX = "-approved";
+    /**
+     * Suffix to be added to report files when they have been handled in duplicate dropping mode
+     */
+    static final String HANDLED_SUFFIX = "-handled";
+    /**
+     * This key is used to store the silent state of a report sent by
+     * handleSilentException().
+     */
+    static final String SILENT_SUFFIX = "-" + IS_SILENT;
+    /**
+     * This is the number of previously stored reports that we send in
+     * {@link SendWorker#checkAndSendReports(android.content.Context, boolean)}.
+     * The number of reports is limited to avoid ANR on application start.
+     */
+    static final int MAX_SEND_REPORTS = 5;
+    /**
+     * This is the identifier (value = 666) use for the status bar notification
+     * issued when crashes occur.
+     */
+    static final int NOTIF_CRASH_ID = 666;
+    /**
+     * Number of milliseconds to wait after displaying a toast.
+     */
+    static final int TOAST_WAIT_DURATION = 2000;
 }
diff --git a/src/main/java/org/acra/CrashReportFileNameParser.java b/src/main/java/org/acra/CrashReportFileNameParser.java
index 609906d0..299cdf2b 100644
--- a/src/main/java/org/acra/CrashReportFileNameParser.java
+++ b/src/main/java/org/acra/CrashReportFileNameParser.java
@@ -18,6 +18,7 @@
 /**
  * Responsible for determining the state of a Crash Report based on its file name.
  * <p/>
+ *
  * @author William Ferguson
  * @since 4.3.0
  */
@@ -26,7 +27,7 @@
     /**
      * Guess that a report is silent from its file name.
      *
-     * @param reportFileName    Name of the report to check whether it should be sent silently.
+     * @param reportFileName Name of the report to check whether it should be sent silently.
      * @return True if the report has been declared explicitly silent using {@link ErrorReporter#handleSilentException(Throwable)}.
      */
     public boolean isSilent(String reportFileName) {
@@ -36,17 +37,28 @@ public boolean isSilent(String reportFileName) {
     /**
      * Returns true if the report is considered as approved.
      * <p>
-          This includes:
+     * This includes:
      * </p>
      * <ul>
      * <li>Reports which were pending when the user agreed to send a report in the NOTIFICATION mode Dialog.</li>
      * <li>Explicit silent reports</li>
      * </ul>
      *
-     * @param reportFileName    Name of report to check whether it is approved to be sent.
+     * @param reportFileName Name of report to check whether it is approved to be sent.
      * @return True if a report can be sent.
      */
     public boolean isApproved(String reportFileName) {
         return isSilent(reportFileName) || reportFileName.contains(ACRAConstants.APPROVED_SUFFIX);
     }
+
+    /**
+     * Returns timestamp in milliseconds when this report was created.
+     *
+     * @param reportFileName Name of the report to give timestamp.
+     * @return True if older than given time.
+     */
+    public long timeStamp(String reportFileName) {
+        // first get only the first portion of filename (timestamp), then parse the number
+        return Long.parseLong(reportFileName.split("[^0-9]")[0]);
+    }
 }
diff --git a/src/main/java/org/acra/CrashReportFinder.java b/src/main/java/org/acra/CrashReportFinder.java
index f7562c1b..b5df7e6a 100644
--- a/src/main/java/org/acra/CrashReportFinder.java
+++ b/src/main/java/org/acra/CrashReportFinder.java
@@ -15,17 +15,18 @@
  */
 package org.acra;
 
-import static org.acra.ACRA.LOG_TAG;
+import android.content.Context;
+import android.util.Log;
 
 import java.io.File;
 import java.io.FilenameFilter;
 
-import android.content.Context;
-import android.util.Log;
+import static org.acra.ACRA.LOG_TAG;
 
 /**
  * Responsible for retrieving the location of Crash Report files.
  * <p/>
+ *
  * @author William Ferguson
  * @since 4.3.0
  */
@@ -43,6 +44,16 @@ public CrashReportFinder(Context context) {
      * @return an array containing the names of pending crash report files.
      */
     public String[] getCrashReportFiles() {
+        return getCrashReportFiles(false);
+    }
+
+    /**
+     * Returns an array containing the names of pending crash report files.
+     *
+     * @param all true for all reports, false for only unhandled
+     * @return an array containing the names of pending crash report files.
+     */
+    public String[] getCrashReportFiles(final boolean all) {
         if (context == null) {
             Log.e(LOG_TAG, "Trying to get ACRA reports but ACRA is not initialized.");
             return new String[0];
@@ -59,10 +70,14 @@ public CrashReportFinder(Context context) {
         // Filter for ".stacktrace" files
         final FilenameFilter filter = new FilenameFilter() {
             public boolean accept(File dir, String name) {
-                return name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
+                if (all) {
+                    return name.contains(ACRAConstants.REPORTFILE_EXTENSION);
+                } else {
+                    return name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
+                }
             }
         };
         final String[] result = dir.list(filter);
         return (result == null) ? new String[0] : result;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index b3b62b44..e80ef177 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -30,6 +30,7 @@
 import android.text.format.Time;
 import android.util.Log;
 import android.widget.Toast;
+
 import org.acra.annotation.ReportsCrashes;
 import org.acra.collector.Compatibility;
 import org.acra.collector.ConfigurationCollector;
@@ -44,6 +45,7 @@
 import org.acra.util.ToastSender;
 
 import java.io.File;
+import java.io.IOException;
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -81,56 +83,45 @@
  */
 public class ErrorReporter implements Thread.UncaughtExceptionHandler {
 
-    private boolean enabled = false;
-
+    private static final ExceptionHandlerInitializer NULL_EXCEPTION_HANDLER_INITIALIZER = new ExceptionHandlerInitializer() {
+        @Override
+        public void initializeExceptionHandler(ErrorReporter reporter) {
+        }
+    };
+    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = NULL_EXCEPTION_HANDLER_INITIALIZER;
+    /**
+     * This is used to wait for the crash toast to end it's display duration
+     * before killing the Application.
+     */
+    private static boolean toastWaitEnded = true;
+    /**
+     * Used to create a new (non-cached) PendingIntent each time a new crash occurs.
+     */
+    private static int mNotificationCounter = 0;
     private final Application mContext;
     private final SharedPreferences prefs;
-
     /**
      * Contains the active {@link ReportSender}s.
      */
     private final List<ReportSender> mReportSenders = new ArrayList<ReportSender>();
-
     private final CrashReportDataFactory crashReportDataFactory;
-
     private final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
-
     // A reference to the system's previous default UncaughtExceptionHandler
     // kept in order to execute the default exception handling after sending the
     // report.
     private final Thread.UncaughtExceptionHandler mDfltExceptionHandler;
-
+    // set of stacktrace hashes of old reports
+    Map<String, Long> mHashes = null;
+    private boolean enabled = false;
     private WeakReference<Activity> lastActivityCreated = new WeakReference<Activity>(null);
 
-    /**
-     * This is used to wait for the crash toast to end it's display duration
-     * before killing the Application.
-     */
-    private static boolean toastWaitEnded = true;
-
-    private static final ExceptionHandlerInitializer NULL_EXCEPTION_HANDLER_INITIALIZER = new ExceptionHandlerInitializer() {
-        @Override
-        public void initializeExceptionHandler(ErrorReporter reporter) {
-        }
-    };
-
-    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = NULL_EXCEPTION_HANDLER_INITIALIZER;
-
-    /**
-     * Used to create a new (non-cached) PendingIntent each time a new crash occurs.
-     */
-    private static int mNotificationCounter = 0;
-
     /**
      * Can only be constructed from within this class.
      *
-     * @param context
-     *            Context for the application in which ACRA is running.
-     * @param prefs
-     *            SharedPreferences used by ACRA.
-     * @param enabled
-     *            Whether this ErrorReporter should capture Exceptions and
-     *            forward their reports.
+     * @param context Context for the application in which ACRA is running.
+     * @param prefs   SharedPreferences used by ACRA.
+     * @param enabled Whether this ErrorReporter should capture Exceptions and
+     *                forward their reports.
      */
     ErrorReporter(Application context, SharedPreferences prefs, boolean enabled) {
 
@@ -210,11 +201,10 @@ public void onActivityDestroyed(Activity activity) {
 
     /**
      * @return the current instance of ErrorReporter.
-     * @throws IllegalStateException
-     *             if {@link ACRA#init(android.app.Application)} has not yet
-     *             been called.
+     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet
+     *                               been called.
      * @deprecated since 4.3.0 Use {@link org.acra.ACRA#getErrorReporter()}
-     *             instead.
+     * instead.
      */
     @Deprecated
     public static ErrorReporter getInstance() {
@@ -224,10 +214,8 @@ public static ErrorReporter getInstance() {
     /**
      * Deprecated. Use {@link #putCustomData(String, String)}.
      *
-     * @param key
-     *            A key for your custom data.
-     * @param value
-     *            The value associated to your key.
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
      */
     @Deprecated
     @SuppressWarnings("unused")
@@ -248,10 +236,8 @@ public void addCustomData(String key, String value) {
      * "custom" column, as a text containing a 'key = value' pair on each line.
      * </p>
      *
-     * @param key
-     *            A key for your custom data.
-     * @param value
-     *            The value associated to your key.
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
      * @return The previous value for this key if there was one, or null.
      * @see #removeCustomData(String)
      * @see #getCustomData(String)
@@ -278,7 +264,7 @@ public String putCustomData(String key, String value) {
      * <p>
      * Example. Add to the {@link Application#onCreate()}:
      * </p>
-     * 
+     * <p/>
      * <pre>
      * ACRA.getErrorReporter().setExceptionHandlerInitializer(new ExceptionHandlerInitializer() {
      *     <code>@Override</code> public void initializeExceptionHandler(ErrorReporter reporter) {
@@ -286,8 +272,8 @@ public String putCustomData(String key, String value) {
      *     }
      * });
      * </pre>
-     * 
-     * @param initializer   The initializer. Can be <code>null</code>.
+     *
+     * @param initializer The initializer. Can be <code>null</code>.
      */
     public void setExceptionHandlerInitializer(ExceptionHandlerInitializer initializer) {
         exceptionHandlerInitializer = (initializer != null) ? initializer : NULL_EXCEPTION_HANDLER_INITIALIZER;
@@ -296,8 +282,7 @@ public void setExceptionHandlerInitializer(ExceptionHandlerInitializer initializ
     /**
      * Removes a key/value pair from your reports custom data field.
      *
-     * @param key
-     *            The key of the data to be removed.
+     * @param key The key of the data to be removed.
      * @return The value for this key before removal.
      * @see #putCustomData(String, String)
      * @see #getCustomData(String)
@@ -318,8 +303,7 @@ public void clearCustomData() {
     /**
      * Gets the current value for a key in your reports custom data field.
      *
-     * @param key
-     *            The key of the data to be retrieved.
+     * @param key The key of the data to be retrieved.
      * @return The value for this key.
      * @see #putCustomData(String, String)
      * @see #removeCustomData(String)
@@ -332,8 +316,7 @@ public String getCustomData(String key) {
     /**
      * Add a {@link ReportSender} to the list of active {@link ReportSender}s.
      *
-     * @param sender
-     *            The {@link ReportSender} to be added.
+     * @param sender The {@link ReportSender} to be added.
      */
     public void addReportSender(ReportSender sender) {
         mReportSenders.add(sender);
@@ -343,8 +326,7 @@ public void addReportSender(ReportSender sender) {
      * Remove a specific instance of {@link ReportSender} from the list of
      * active {@link ReportSender}s.
      *
-     * @param sender
-     *            The {@link ReportSender} instance to be removed.
+     * @param sender The {@link ReportSender} instance to be removed.
      */
     @SuppressWarnings("unused")
     public void removeReportSender(ReportSender sender) {
@@ -354,8 +336,7 @@ public void removeReportSender(ReportSender sender) {
     /**
      * Remove all {@link ReportSender} instances from a specific class.
      *
-     * @param senderClass
-     *            ReportSender class whose instances should be removed.
+     * @param senderClass ReportSender class whose instances should be removed.
      */
     @SuppressWarnings("unused")
     public void removeReportSenders(Class<?> senderClass) {
@@ -381,8 +362,7 @@ public void removeAllReportSenders() {
      * Removes all previously set {@link ReportSender}s and set the given one as
      * the new {@link ReportSender}.
      *
-     * @param sender
-     *            ReportSender to set as the sole sender for this ErrorReporter.
+     * @param sender ReportSender to set as the sole sender for this ErrorReporter.
      */
     public void setReportSender(ReportSender sender) {
         removeAllReportSenders();
@@ -404,27 +384,27 @@ public void uncaughtException(Thread t, Throwable e) {
             if (!enabled) {
                 if (mDfltExceptionHandler != null) {
                     Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
-                        + " - forwarding uncaught Exception on to default ExceptionHandler");
+                            + " - forwarding uncaught Exception on to default ExceptionHandler");
                     mDfltExceptionHandler.uncaughtException(t, e);
                 } else {
                     Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
-                        + " - no default ExceptionHandler");
+                            + " - no default ExceptionHandler");
                     Log.e(ACRA.LOG_TAG,
-                          "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
+                            "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
                 }
                 return;
             }
 
             Log.e(ACRA.LOG_TAG,
-                  "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
+                    "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
             Log.d(ACRA.LOG_TAG, "Building report");
 
             // Generate and send crash report
             reportBuilder()
-                .uncaughtExceptionThread(t)
-                .exception(e)
-                .endsApplication()
-                .send();
+                    .uncaughtExceptionThread(t)
+                    .exception(e)
+                    .endsApplication()
+                    .send();
         } catch (Throwable fatality) {
             // ACRA failed. Prevent any recursive call to
             // ACRA.uncaughtException(), let the native reporter do its job.
@@ -441,8 +421,8 @@ private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
         // TODO It would be better to create an explicit config attribute #letDefaultHandlerEndApplication
         // as the intent is clearer and would allows you to switch it off for SILENT.
         final boolean letDefaultHandlerEndApplication = (
-             ACRA.getConfig().mode() == ReportingInteractionMode.SILENT ||
-            (ACRA.getConfig().mode() == ReportingInteractionMode.TOAST && ACRA.getConfig().forceCloseDialogAfterToast())
+                ACRA.getConfig().mode() == ReportingInteractionMode.SILENT ||
+                        (ACRA.getConfig().mode() == ReportingInteractionMode.TOAST && ACRA.getConfig().forceCloseDialogAfterToast())
         );
 
         final boolean handlingUncaughtException = uncaughtExceptionThread != null;
@@ -478,17 +458,16 @@ private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
      * {@link ReportingInteractionMode#SILENT} for this report, whatever is the
      * mode set for the application. Very useful for tracking difficult defects.
      *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
+     * @param e The {@link Throwable} to be reported. If null the report will
+     *          contain a new Exception("Report requested by developer").
      */
     public void handleSilentException(Throwable e) {
         // Mark this report as silent.
         if (enabled) {
             reportBuilder()
-                .exception(e)
-                .forceSilent()
-                .send();
+                    .exception(e)
+                    .forceSilent()
+                    .send();
             Log.d(LOG_TAG, "ACRA sent Silent report.");
             return;
         }
@@ -499,9 +478,8 @@ public void handleSilentException(Throwable e) {
     /**
      * Enable or disable this ErrorReporter. By default it is enabled.
      *
-     * @param enabled
-     *            Whether this ErrorReporter should capture Exceptions and
-     *            forward them as crash reports.
+     * @param enabled Whether this ErrorReporter should capture Exceptions and
+     *                forward them as crash reports.
      */
     public void setEnabled(boolean enabled) {
         Log.i(ACRA.LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + mContext.getPackageName());
@@ -511,10 +489,8 @@ public void setEnabled(boolean enabled) {
     /**
      * Starts a Thread to start sending outstanding error reports.
      *
-     * @param onlySendSilentReports
-     *            If true then only send silent reports.
-     * @param approveReportsFirst
-     *            If true then approve unapproved reports first.
+     * @param onlySendSilentReports If true then only send silent reports.
+     * @param approveReportsFirst   If true then approve unapproved reports first.
      * @return SendWorker that will be sending the report.s
      */
     SendWorker startSendingReports(boolean onlySendSilentReports, boolean approveReportsFirst) {
@@ -556,7 +532,7 @@ public void checkReportsOnApplicationStart() {
         ReportingInteractionMode reportingInteractionMode = ACRA.getConfig().mode();
 
         if ((reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG)
-            && ACRA.getConfig().deleteUnapprovedReportsOnApplicationStart()) {
+                && ACRA.getConfig().deleteUnapprovedReportsOnApplicationStart()) {
             // NOTIFICATION or DIALOG mode, and there are unapproved reports to
             // send (latest notification/dialog has been ignored: neither
             // accepted
@@ -581,8 +557,8 @@ public void checkReportsOnApplicationStart() {
             final boolean onlySilentOrApprovedReports = containsOnlySilentOrApprovedReports(filesList);
 
             if (reportingInteractionMode == ReportingInteractionMode.SILENT
-                || reportingInteractionMode == ReportingInteractionMode.TOAST
-                || (onlySilentOrApprovedReports && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG))) {
+                    || reportingInteractionMode == ReportingInteractionMode.TOAST
+                    || (onlySilentOrApprovedReports && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG))) {
 
                 if (reportingInteractionMode == ReportingInteractionMode.TOAST && !onlySilentOrApprovedReports) {
                     // Display the Toast in TOAST mode only if there are
@@ -600,8 +576,7 @@ public void checkReportsOnApplicationStart() {
     /**
      * Delete all pending non approved reports.
      *
-     * @param keepOne
-     *            If you need to keep the latest report, set this to true.
+     * @param keepOne If you need to keep the latest report, set this to true.
      */
     void deletePendingNonApprovedReports(boolean keepOne) {
         // In NOTIFICATION AND DIALOG mode, we have to keep the latest report
@@ -615,17 +590,15 @@ void deletePendingNonApprovedReports(boolean keepOne) {
      * Send a report for a {@link Throwable} with the reporting interaction mode
      * configured by the developer.
      *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
-     * @param endApplication
-     *            Set this to true if you want the application to be ended after
-     *            sending the report.
+     * @param e              The {@link Throwable} to be reported. If null the report will
+     *                       contain a new Exception("Report requested by developer").
+     * @param endApplication Set this to true if you want the application to be ended after
+     *                       sending the report.
      */
     @SuppressWarnings("unused")
     public void handleException(Throwable e, boolean endApplication) {
         final ReportBuilder builder = reportBuilder()
-            .exception(e);
+                .exception(e);
         if (endApplication) {
             builder.endsApplication();
         }
@@ -637,15 +610,14 @@ public void handleException(Throwable e, boolean endApplication) {
      * configured by the developer, the application is then killed and restarted
      * by the system.
      *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
+     * @param e The {@link Throwable} to be reported. If null the report will
+     *          contain a new Exception("Report requested by developer").
      */
     @SuppressWarnings("unused")
     public void handleException(Throwable e) {
         reportBuilder()
-            .exception(e)
-            .send();
+                .exception(e)
+                .send();
     }
 
     /**
@@ -657,25 +629,6 @@ public ReportBuilder reportBuilder() {
         return new ReportBuilder();
     }
 
-    /**
-     * Helps manage
-     */
-    private static class TimeHelper {
-
-        private Long initialTimeMillis;
-
-        public void setInitialTimeMillis(long initialTimeMillis) {
-            this.initialTimeMillis = initialTimeMillis;
-        }
-
-        /**
-         * @return 0 if the initial time has yet to be set otherwise returns the difference between now and the initial time.
-         */
-        public long getElapsedTime() {
-            return (initialTimeMillis == null) ? 0 : System.currentTimeMillis() - initialTimeMillis;
-        }
-    }
-
     /**
      * Try to send a report, if an error occurs stores a report file for a later
      * attempt.
@@ -694,6 +647,67 @@ private void report(final ReportBuilder reportBuilder) {
             Log.d(ACRA.LOG_TAG, "Failed to initlize " + exceptionHandlerInitializer + " from #handleException");
         }
 
+        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(reportBuilder.mMessage,
+                reportBuilder.mException, reportBuilder.mCustomData,
+                reportBuilder.mForceSilent, reportBuilder.mUncaughtExceptionThread);
+
+        // *********************************************
+
+        if (ACRA.getConfig().dropDuplicateReports()) {
+            synchronized (this) {
+                final CrashReportFinder reportFinder = new CrashReportFinder(mContext);
+                final List<String> reportFilesHandled = Arrays.asList(reportFinder.getCrashReportFiles(true));
+
+                long timestampNow = System.currentTimeMillis();
+                // generate list of old reports
+                if (mHashes == null) {
+                    mHashes = new HashMap<String, Long>();
+                    for (String curFileName : reportFilesHandled) {
+                        long timestampFile = fileNameParser.timeStamp(curFileName);
+                        // delete old (irrelevant) handled reports
+                        if (curFileName.contains(ACRAConstants.HANDLED_SUFFIX)
+                                && ((timestampNow - timestampFile) > ACRA.getConfig().dropDuplicateReportsRelevancyTime())) {
+                            // delete old handled report, identical report can be now submitted again
+                            final boolean deleted = mContext.deleteFile(curFileName);
+                            if (!deleted) {
+                                Log.w(ACRA.LOG_TAG, "Could not delete old error report : " + curFileName);
+                            } else {
+                                Log.d(ACRA.LOG_TAG, "Deleted old error report : " + curFileName);
+                            }
+                        } else {
+                            // add to set of handled hashes
+                            try {
+                                final CrashReportPersister persister = new CrashReportPersister(mContext);
+                                final CrashReportData previousCrashReport = persister.load(curFileName);
+                                // add stack trace hash to a hashmap
+                                mHashes.put(previousCrashReport.getProperty(ReportField.STACK_TRACE_HASH), timestampFile);
+                                Log.d(LOG_TAG, "Adding hash of file " + curFileName + " " + previousCrashReport.getProperty(ReportField.STACK_TRACE_HASH));
+                            } catch (IOException e) {
+                                Log.e(ACRA.LOG_TAG, "Failed to load crash report for " + curFileName, e);
+                            }
+                        }
+                    }
+                }
+
+                String hash = crashReportData.getProperty(ReportField.STACK_TRACE_HASH);
+
+                // check if already handled
+                if (mHashes.containsKey(hash)) {
+                    if ((timestampNow - mHashes.get(hash)) > ACRA.getConfig().dropDuplicateReportsRelevancyTime()) {
+                        // this record is too old, get rid of it
+                        mHashes.remove(hash);
+                    } else {
+                        // report with same stacktrace hash has been handled recently or is already pending
+                        // and new report can be ignored
+                        Log.d(LOG_TAG, "Hash already on list ");
+                        return;
+                    }
+                }
+                mHashes.put(hash, timestampNow);
+            }
+        }
+        // *********************************************
+
         boolean sendOnlySilentReports = false;
         ReportingInteractionMode reportingInteractionMode;
         if (!reportBuilder.mForceSilent) {
@@ -713,7 +727,7 @@ private void report(final ReportBuilder reportBuilder) {
         }
 
         final boolean shouldDisplayToast = reportingInteractionMode == ReportingInteractionMode.TOAST
-            || (ACRA.getConfig().resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
+                || (ACRA.getConfig().resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
 
         final TimeHelper sentToastTimeMillis = new TimeHelper();
         if (shouldDisplayToast) {
@@ -738,10 +752,6 @@ public void run() {
             // that the Toast can be read by the user.
         }
 
-        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(reportBuilder.mMessage,
-                                                                                       reportBuilder.mException, reportBuilder.mCustomData,
-                                                                                       reportBuilder.mForceSilent, reportBuilder.mUncaughtExceptionThread);
-
         // Always write the report file
 
         final String reportFileName = getReportFileName(crashReportData);
@@ -754,8 +764,8 @@ public void run() {
         SendWorker sender = null;
 
         if (reportingInteractionMode == ReportingInteractionMode.SILENT
-            || reportingInteractionMode == ReportingInteractionMode.TOAST
-            || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
+                || reportingInteractionMode == ReportingInteractionMode.TOAST
+                || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
 
             // Approve and then send reports now
             Log.d(ACRA.LOG_TAG, "About to start ReportSenderWorker from #handleException");
@@ -782,8 +792,8 @@ public void run() {
                 @Override
                 public void run() {
                     Log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
-                        + " millis from " + sentToastTimeMillis.initialTimeMillis
-                        + " currentMillis=" + System.currentTimeMillis());
+                            + " millis from " + sentToastTimeMillis.initialTimeMillis
+                            + " currentMillis=" + System.currentTimeMillis());
                     while (sentToastTimeMillis.getElapsedTime() < ACRAConstants.TOAST_WAIT_DURATION) {
                         try {
                             // Wait a bit to let the user read the toast
@@ -801,7 +811,7 @@ public void run() {
         // Once sent, call endApplication() if reportBuilder.mEndApplication
         final SendWorker worker = sender;
         final boolean showDirectDialog = (reportingInteractionMode == ReportingInteractionMode.DIALOG)
-            && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
+                && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
 
         new Thread() {
 
@@ -846,8 +856,8 @@ public void run() {
     /**
      * Creates an Intent that can be used to create and show a CrashReportDialog.
      *
-     * @param reportFileName    Name of the error report to display in the crash report dialog.
-     * @param reportBuilder     ReportBuilder containing the details of the crash.
+     * @param reportFileName Name of the error report to display in the crash report dialog.
+     * @param reportBuilder  ReportBuilder containing the details of the crash.
      */
     private Intent createCrashReportDialogIntent(String reportFileName, ReportBuilder reportBuilder) {
         Log.d(LOG_TAG, "Creating DialogIntent for " + reportFileName + " exception=" + reportBuilder.mException);
@@ -857,10 +867,9 @@ private Intent createCrashReportDialogIntent(String reportFileName, ReportBuilde
         return dialogIntent;
     }
 
-
     /**
      * Creates a status bar notification.
-     *
+     * <p/>
      * The action triggered when the notification is selected is to start the
      * {@link CrashReportDialog} Activity.
      *
@@ -901,28 +910,24 @@ private void createNotification(String reportFileName, ReportBuilder reportBuild
     }
 
     private String getReportFileName(CrashReportData crashData) {
-        final Time now = new Time();
-        now.setToNow();
-        final long timestamp = now.toMillis(false);
+        final long timestamp = System.currentTimeMillis();
         final String isSilent = crashData.getProperty(IS_SILENT);
         return "" + timestamp + (isSilent != null ? ACRAConstants.SILENT_SUFFIX : "")
-            + ACRAConstants.REPORTFILE_EXTENSION;
+                + ACRAConstants.REPORTFILE_EXTENSION;
     }
 
     /**
      * When a report can't be sent, it is saved here in a file in the root of
      * the application private directory.
      *
-     * @param fileName
-     *            In a few rare cases, we write the report again with additional
-     *            data (user comment for example). In such cases, you can
-     *            provide the already existing file name here to overwrite the
-     *            report file. If null, a new file report will be generated
-     * @param crashData
-     *            Can be used to save an alternative (or previously generated)
-     *            report data. Used to store again a report with the addition of
-     *            user comment. If null, the default current crash data are
-     *            used.
+     * @param fileName  In a few rare cases, we write the report again with additional
+     *                  data (user comment for example). In such cases, you can
+     *                  provide the already existing file name here to overwrite the
+     *                  report file. If null, a new file report will be generated
+     * @param crashData Can be used to save an alternative (or previously generated)
+     *                  report data. Used to store again a report with the addition of
+     *                  user comment. If null, the default current crash data are
+     *                  used.
      */
     private void saveCrashReportFile(String fileName, CrashReportData crashData) {
         try {
@@ -937,12 +942,9 @@ private void saveCrashReportFile(String fileName, CrashReportData crashData) {
     /**
      * Delete pending reports.
      *
-     * @param deleteApprovedReports
-     *            Set to true to delete approved and silent reports.
-     * @param deleteNonApprovedReports
-     *            Set to true to delete non approved/silent reports.
-     * @param nbOfLatestToKeep
-     *            Number of pending reports to retain.
+     * @param deleteApprovedReports    Set to true to delete approved and silent reports.
+     * @param deleteNonApprovedReports Set to true to delete non approved/silent reports.
+     * @param nbOfLatestToKeep         Number of pending reports to retain.
      */
     private void deletePendingReports(boolean deleteApprovedReports, boolean deleteNonApprovedReports,
                                       int nbOfLatestToKeep) {
@@ -968,10 +970,9 @@ private void deletePendingReports(boolean deleteApprovedReports, boolean deleteN
      * Checks if an array of reports files names contains only silent or
      * approved reports.
      *
-     * @param reportFileNames
-     *            Array of report locations to check.
+     * @param reportFileNames Array of report locations to check.
      * @return True if there are only silent or approved reports. False if there
-     *         is at least one non-approved report.
+     * is at least one non-approved report.
      */
     private boolean containsOnlySilentOrApprovedReports(String[] reportFileNames) {
         for (String reportFileName : reportFileNames) {
@@ -1007,10 +1008,10 @@ public void setDefaultReportSenders() {
             // I think that is a small price to pay to ensure that ACRA doesn't
             // crash if the PackageManager has died.
             Log.e(LOG_TAG,
-                  mApplication.getPackageName()
-                      + " should be granted permission "
-                      + permission.INTERNET
-                      + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @ReportsCrashes(mailTo=\"your.account@domain.com\"");
+                    mApplication.getPackageName()
+                            + " should be granted permission "
+                            + permission.INTERNET
+                            + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @ReportsCrashes(mailTo=\"your.account@domain.com\"");
             return;
         }
 
@@ -1021,6 +1022,25 @@ public void setDefaultReportSenders() {
         }
     }
 
+    /**
+     * Helps manage
+     */
+    private static class TimeHelper {
+
+        private Long initialTimeMillis;
+
+        public void setInitialTimeMillis(long initialTimeMillis) {
+            this.initialTimeMillis = initialTimeMillis;
+        }
+
+        /**
+         * @return 0 if the initial time has yet to be set otherwise returns the difference between now and the initial time.
+         */
+        public long getElapsedTime() {
+            return (initialTimeMillis == null) ? 0 : System.currentTimeMillis() - initialTimeMillis;
+        }
+    }
+
     /**
      * Fluent API used to assemble the different options used for a crash report
      */
@@ -1048,7 +1068,7 @@ public ReportBuilder message(String msg) {
         /**
          * Sets the Thread on which an uncaught Exception occurred.
          *
-         * @param thread    Thread on which an uncaught Exception occurred.
+         * @param thread Thread on which an uncaught Exception occurred.
          * @return the updated {@code ReportBuilder}
          */
         private ReportBuilder uncaughtExceptionThread(Thread thread) {
@@ -1068,7 +1088,7 @@ public ReportBuilder exception(Throwable e) {
         }
 
         private void initCustomData() {
-            if (mCustomData ==  null)
+            if (mCustomData == null)
                 mCustomData = new HashMap<String, String>();
         }
 
@@ -1090,7 +1110,7 @@ public ReportBuilder customData(Map<String, String> customData) {
          * Sets an additional value to be added to {@code CUSTOM_DATA}. The value
          * specified here takes precedence over globally specified custom data.
          *
-         * @param key the key identifying the custom data
+         * @param key   the key identifying the custom data
          * @param value the value for the custom data entry
          * @return the updated {@code ReportBuilder}
          */
diff --git a/src/main/java/org/acra/SendWorker.java b/src/main/java/org/acra/SendWorker.java
index 1f804ab7..b021a06a 100644
--- a/src/main/java/org/acra/SendWorker.java
+++ b/src/main/java/org/acra/SendWorker.java
@@ -15,23 +15,23 @@
  */
 package org.acra;
 
-import static org.acra.ACRA.LOG_TAG;
+import android.content.Context;
+import android.util.Log;
+
+import org.acra.collector.CrashReportData;
+import org.acra.sender.ReportSender;
+import org.acra.sender.ReportSenderException;
 
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 
-import org.acra.collector.CrashReportData;
-import org.acra.sender.ReportSender;
-import org.acra.sender.ReportSenderException;
-
-import android.content.Context;
-import android.util.Log;
+import static org.acra.ACRA.LOG_TAG;
 
 /**
  * Checks and send reports on a separate Thread.
- * 
+ *
  * @author Kevin Gaudin
  */
 final class SendWorker extends Thread {
@@ -44,20 +44,16 @@
 
     /**
      * Creates a new {@link SendWorker} to try sending pending reports.
-     * 
-     * @param context
-     *            ApplicationContext in which the reports are being sent.
-     * @param reportSenders
-     *            List of ReportSender to use to send the crash reports.
-     * @param sendOnlySilentReports
-     *            If set to true, will send only reports which have been
-     *            explicitly declared as silent by the application developer.
-     * @param approvePendingReports
-     *            if this endWorker should approve pending reports before
-     *            sending any reports.
+     *
+     * @param context               ApplicationContext in which the reports are being sent.
+     * @param reportSenders         List of ReportSender to use to send the crash reports.
+     * @param sendOnlySilentReports If set to true, will send only reports which have been
+     *                              explicitly declared as silent by the application developer.
+     * @param approvePendingReports if this endWorker should approve pending reports before
+     *                              sending any reports.
      */
     public SendWorker(Context context, List<ReportSender> reportSenders, boolean sendOnlySilentReports,
-            boolean approvePendingReports) {
+                      boolean approvePendingReports) {
         this.context = context;
         this.reportSenders = reportSenders;
         this.sendOnlySilentReports = sendOnlySilentReports;
@@ -87,6 +83,13 @@ private void approvePendingReports() {
         final CrashReportFinder reportFinder = new CrashReportFinder(context);
         final String[] reportFileNames = reportFinder.getCrashReportFiles();
 
+        /*
+         * @ duplicate detection
+         * if a report is waiting for approval here, it means its hash is not identical
+         * to some already handled report
+         * it is only necessary to check if unapproved hashes are identical
+         */
+
         for (String reportFileName : reportFileNames) {
             if (!fileNameParser.isApproved(reportFileName)) {
                 final File reportFile = new File(context.getFilesDir(), reportFileName);
@@ -108,13 +111,11 @@ private void approvePendingReports() {
 
     /**
      * Send pending reports.
-     * 
-     * @param context
-     *            The application context.
-     * @param sendOnlySilentReports
-     *            Send only reports explicitly declared as SILENT by the
-     *            developer (sent via
-     *            {@link ErrorReporter#handleSilentException(Throwable)}.
+     *
+     * @param context               The application context.
+     * @param sendOnlySilentReports Send only reports explicitly declared as SILENT by the
+     *                              developer (sent via
+     *                              {@link ErrorReporter#handleSilentException(Throwable)}.
      */
     private void checkAndSendReports(Context context, boolean sendOnlySilentReports) {
         Log.d(LOG_TAG, "#checkAndSendReports - start");
@@ -131,7 +132,7 @@ private void checkAndSendReports(Context context, boolean sendOnlySilentReports)
 
             if (reportsSentCount >= ACRAConstants.MAX_SEND_REPORTS) {
                 break; // send only a few reports to avoid overloading the
-                       // network
+                // network
             }
 
             Log.i(LOG_TAG, "Sending file " + curFileName);
@@ -139,17 +140,23 @@ private void checkAndSendReports(Context context, boolean sendOnlySilentReports)
                 final CrashReportPersister persister = new CrashReportPersister(context);
                 final CrashReportData previousCrashReport = persister.load(curFileName);
                 sendCrashReport(previousCrashReport);
-                deleteFile(context, curFileName);
+                // *********************************************
+                if (ACRA.getConfig().dropDuplicateReports()) {
+                    renameFile(context, curFileName, curFileName + ACRAConstants.HANDLED_SUFFIX);
+                } else {
+                    // *********************************************
+                    deleteFile(context, curFileName);
+                }
             } catch (RuntimeException e) {
                 Log.e(ACRA.LOG_TAG, "Failed to send crash reports for " + curFileName, e);
                 deleteFile(context, curFileName);
                 break; // Something really unexpected happened. Don't try to
-                       // send any more reports now.
+                // send any more reports now.
             } catch (IOException e) {
                 Log.e(ACRA.LOG_TAG, "Failed to load crash report for " + curFileName, e);
                 deleteFile(context, curFileName);
                 break; // Something unexpected happened when reading the crash
-                       // report. Don't try to send any more reports now.
+                // report. Don't try to send any more reports now.
             } catch (ReportSenderException e) {
                 Log.e(ACRA.LOG_TAG, "Failed to send crash report for " + curFileName, e);
                 // An issue occurred while sending this report but we can still try to
@@ -165,11 +172,9 @@ private void checkAndSendReports(Context context, boolean sendOnlySilentReports)
      * Sends the report with all configured ReportSenders. If at least one
      * sender completed its job, the report is considered as sent and will not
      * be sent again for failing senders.
-     * 
-     * @param errorContent
-     *            Crash data.
-     * @throws ReportSenderException
-     *             if unable to send the crash report.
+     *
+     * @param errorContent Crash data.
+     * @throws ReportSenderException if unable to send the crash report.
      */
     private void sendCrashReport(CrashReportData errorContent) throws ReportSenderException {
         if (!ACRA.isDebuggable() || ACRA.getConfig().sendReportsInDevMode()) {
@@ -183,7 +188,7 @@ private void sendCrashReport(CrashReportData errorContent) throws ReportSenderEx
                 } catch (ReportSenderException e) {
                     if (!sentAtLeastOnce) {
                         throw e; // Don't log here because we aren't dealing
-                                 // with the Exception here.
+                        // with the Exception here.
                     } else {
                         Log.w(LOG_TAG,
                                 "ReportSender of class "
@@ -201,4 +206,15 @@ private void deleteFile(Context context, String fileName) {
             Log.w(ACRA.LOG_TAG, "Could not delete error report : " + fileName);
         }
     }
+
+    private void renameFile(Context context, String originalFileName, String newFileName) {
+        File originalFile = context.getFileStreamPath(originalFileName);
+        File newFile = new File(originalFile.getParent(), newFileName);
+        if (newFile.exists()) {
+            context.deleteFile(newFileName);
+        }
+        if (!originalFile.renameTo(newFile)) {
+            Log.w(ACRA.LOG_TAG, "Could not rename error report : " + originalFileName + " to " + newFileName);
+        }
+    }
 }
diff --git a/src/main/java/org/acra/annotation/ReportsCrashes.java b/src/main/java/org/acra/annotation/ReportsCrashes.java
index d4683609..f28f2fc0 100644
--- a/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -15,12 +15,9 @@
  */
 package org.acra.annotation;
 
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
@@ -31,18 +28,20 @@
 import org.acra.sender.HttpSender.Method;
 import org.acra.sender.HttpSender.Type;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Provide configuration elements to the
  * {@link ACRA#init(android.app.Application)} method. The only mandatory
  * configuration item is the {@link #formUri()} parameter which is the Uri
  * to the server that will receive your reports.
- * 
+ *
  * @author Kevin Gaudin
- * 
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
@@ -54,7 +53,7 @@
      * The Uri of your own server-side script that will receive reports. This is
      * to use if you don't want to send reports to Google Docs but to your own,
      * self-hosted script.
-     * 
+     *
      * @return URI of a custom server to which to post reports.
      */
     String formUri() default ACRAConstants.DEFAULT_STRING_VALUE;
@@ -81,44 +80,44 @@
      * <p>
      * Default is {@link ReportingInteractionMode#SILENT}
      * </p>
-     * 
+     *
      * @return the interaction mode that you want ACRA to implement.
      */
     ReportingInteractionMode mode() default ReportingInteractionMode.SILENT;
 
     /**
      * @return Resource id for the label of positive button in the crash dialog.
-     *         If not provided, defaults to 'OK'.
+     * If not provided, defaults to 'OK'.
      */
     int resDialogPositiveButtonText() default ACRAConstants.DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT;
 
     /**
      * @return Resource id for the label of negative button in the crash dialog.
-     *         If not provided, defaults to 'cancel'.
+     * If not provided, defaults to 'cancel'.
      */
     int resDialogNegativeButtonText() default ACRAConstants.DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT;
 
     /**
      * @return Resource id for the user comment input label in the crash dialog.
-     *         If not provided, disables the input field.
+     * If not provided, disables the input field.
      */
     int resDialogCommentPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
 
     /**
      * @return Resource id for the user email address input label in the crash
-     *         dialog. If not provided, disables the input field.
+     * dialog. If not provided, disables the input field.
      */
     int resDialogEmailPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
 
     /**
      * @return Resource id for the icon in the crash dialog. Default value is
-     *         the system alert icon.
+     * the system alert icon.
      */
     int resDialogIcon() default ACRAConstants.DEFAULT_DIALOG_ICON;
 
     /**
      * @return Resource id for the Toast text triggered when the user accepts to
-     *         send a report in the crash dialog.
+     * send a report in the crash dialog.
      */
     int resDialogOkToast() default ACRAConstants.DEFAULT_RES_VALUE;
 
@@ -134,7 +133,7 @@
 
     /**
      * @return Resource id for the icon in the status bar notification. Default
-     *         is the system error notification icon.
+     * is the system error notification icon.
      */
     int resNotifIcon() default ACRAConstants.DEFAULT_NOTIFICATION_ICON;
 
@@ -161,28 +160,28 @@
      * while the report is being created, before the dialog/notification
      * appears. This allows the user to know what is happening just before the
      * application is terminated.
-     * 
+     *
      * @return Resource id for the Toast text triggered when the application
-     *         crashes.
+     * crashes.
      */
     int resToastText() default ACRAConstants.DEFAULT_RES_VALUE;
 
     /**
      * @return Name of the SharedPreferences that will host ACRA settings you
-     *         can make accessible to your users through a preferences screen:
-     *         <ul>
-     *         <li>
-     *         {@link ACRA#PREF_DISABLE_ACRA} or {@link ACRA#PREF_ENABLE_ACRA}</li>
-     *         <li>
-     *         {@link ACRA#PREF_ALWAYS_ACCEPT}</li>
-     *         <li>
-     *         {@link ACRA#PREF_ENABLE_DEVICE_ID}</li>
-     *         <li>
-     *         {@link ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
-     *         </ul>
-     *         preference. Default is to use the application default
-     *         SharedPreferences, as retrieved with
-     *         {@link PreferenceManager#getDefaultSharedPreferences(Context)}.
+     * can make accessible to your users through a preferences screen:
+     * <ul>
+     * <li>
+     * {@link ACRA#PREF_DISABLE_ACRA} or {@link ACRA#PREF_ENABLE_ACRA}</li>
+     * <li>
+     * {@link ACRA#PREF_ALWAYS_ACCEPT}</li>
+     * <li>
+     * {@link ACRA#PREF_ENABLE_DEVICE_ID}</li>
+     * <li>
+     * {@link ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
+     * </ul>
+     * preference. Default is to use the application default
+     * SharedPreferences, as retrieved with
+     * {@link PreferenceManager#getDefaultSharedPreferences(Context)}.
      */
     String sharedPreferencesName() default ACRAConstants.DEFAULT_STRING_VALUE;
 
@@ -192,7 +191,7 @@
      * {@link Context#MODE_PRIVATE}, {@link Context#MODE_WORLD_READABLE} or
      * {@link Context#MODE_WORLD_WRITEABLE}. Default is
      * {@link Context#MODE_PRIVATE}.
-     * 
+     *
      * @return Mode to use with the SharedPreference creation.
      * @see Context#getSharedPreferences(String, int)
      */
@@ -217,20 +216,20 @@
      * <li>SYSTEM_TOMBSTONE</li>
      * <li>data_app_strictmode</li>
      * </ul>
-     * 
+     *
      * @return True if system tags are to be included as part of DropBox events.
      */
     boolean includeDropBoxSystemTags() default ACRAConstants.DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
 
     /**
      * @return Array of tags that you want to be fetched when collecting DropBox
-     *         entries.
+     * entries.
      */
     String[] additionalDropBoxTags() default {};
 
     /**
      * @return Number of minutes to look back when collecting events from
-     *         DropBoxManager.
+     * DropBoxManager.
      */
     int dropboxCollectionMinutes() default ACRAConstants.DEFAULT_DROPBOX_COLLECTION_MINUTES;
 
@@ -239,11 +238,11 @@
      * Arguments to be passed to the logcat command line. Default is { "-t",
      * "100", "-v", "time" } for:
      * </p>
-     * 
+     * <p/>
      * <pre>
      * logcat -t 100 -v time
      * </pre>
-     * 
+     * <p/>
      * <p>
      * Do not include -b arguments for buffer selection, include
      * {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in
@@ -251,24 +250,24 @@
      * logcat buffers reporting. They will use the same other arguments as those
      * provided here.
      * </p>
-     * 
+     * <p/>
      * <p>
      * See <a href=
      * "http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions"
      * >Listing of logcat Command Options</a>.
      * </p>
-     * 
+     *
      * @return Array of arguments to supply if retrieving the log as part of the
-     *         report.
+     * report.
      */
-    String[] logcatArguments() default { "-t", "" + ACRAConstants.DEFAULT_LOGCAT_LINES, "-v", "time" };
+    String[] logcatArguments() default {"-t", "" + ACRAConstants.DEFAULT_LOGCAT_LINES, "-v", "time"};
 
     /**
      * When using the {@link #formUri()} parameter to send reports to a custom
      * server-side script, you can set here and in
      * {@link #formUriBasicAuthPassword()} the credentials for a BASIC HTTP
      * authentication.
-     * 
+     *
      * @return Login to use when posting reports to a custom server.
      */
     String formUriBasicAuthLogin() default ACRAConstants.NULL_VALUE;
@@ -278,7 +277,7 @@
      * server-side script, you can set here and in
      * {@link #formUriBasicAuthLogin()} the credentials for a BASIC HTTP
      * authentication.
-     * 
+     *
      * @return Password to use when posting reports to a custom server.
      */
     String formUriBasicAuthPassword() default ACRAConstants.NULL_VALUE;
@@ -361,9 +360,9 @@
      * <li>
      * {@link ReportField#SETTINGS_GLOBAL}</li>
      * </ul>
-     * 
+     *
      * @return ReportField Array listing the fields to be included in the
-     *         report.
+     * report.
      */
     ReportField[] customReportContent() default {};
 
@@ -390,11 +389,25 @@
      * <li>
      * {@link ReportField#STACK_TRACE}</li>
      * </ul>
-     * 
+     *
      * @return email address to which to send reports.
      */
     String mailTo() default ACRAConstants.DEFAULT_STRING_VALUE;
 
+    /**
+     * Controls whether reports are dropped if same have been handled recently.
+     *
+     * @return true if ACRA should drop report if it has been handled recently
+     */
+    boolean dropDuplicateReports() default ACRAConstants.DEFAULT_DUPLICATE_DROPPING;
+
+    /**
+     * Controls time in milliseconds for which old reports are considered relevant.
+     *
+     * @return time in milliseconds for which old reports are considered relevant
+     */
+    long dropDuplicateReportsRelevancyTime() default ACRAConstants.DEFAULT_DUPLICATE_RELEVANCY_TIME;
+
     /**
      * Controls whether unapproved reports are deleted on application start or
      * not. Default is true. This is a change from versions of ACRA before 3.2
@@ -404,41 +417,41 @@
      * restart, ACRA was issuing a new crash notification for previous reports
      * pending for approval. This could be misunderstood by the user with a new
      * crash, resulting in bad appreciation of the application.
-     * 
+     *
      * @return true if ACRA should delete unapproved reports on application
-     *         start.
+     * start.
      */
     boolean deleteUnapprovedReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
 
     /**
      * This property can be used to determine whether old (out of date) reports
      * should be sent or not. By default they are discarded.
-     * 
+     *
      * @return true if ACRA should delete any unsent reports on startup if the
-     *         application has been updated since the last time the application
-     *         was started.
+     * application has been updated since the last time the application
+     * was started.
      */
     boolean deleteOldUnsentReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
 
     /**
      * @return Value in milliseconds for timeout attempting to connect to a
-     *         network (default 3000ms).
+     * network (default 3000ms).
      */
     int connectionTimeout() default ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
 
     /**
      * If the request is retried due to timeout, the socketTimeout will double
      * before retrying the request.
-     * 
+     *
      * @return Value in milliseconds for timeout receiving a response to a
-     *         network request (default 5000ms).
+     * network request (default 5000ms).
      * @see #maxNumberOfRequestRetries()
      */
     int socketTimeout() default ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
 
     /**
      * @return Maximum number of times a network request will be retried when
-     *         receiving the response times out (default 3).
+     * receiving the response times out (default 3).
      * @see #socketTimeout()
      */
     int maxNumberOfRequestRetries() default ACRAConstants.DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES;
@@ -446,7 +459,7 @@
     /**
      * In {@link ReportingInteractionMode#TOAST} mode, set this to true if you
      * prefer displaying the native Force Close dialog after the Toast.
-     * 
+     *
      * @return true if the Force Close dialog has to be displayed.
      */
     boolean forceCloseDialogAfterToast() default ACRAConstants.DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST;
@@ -455,7 +468,7 @@
      * Add here your {@link SharedPreferences} identifier Strings if you use
      * others than your application's default. They will be added to the
      * {@link ReportField#SHARED_PREFERENCES} field.
-     * 
+     *
      * @return String Array containing the names of the additional preferences.
      */
     String[] additionalSharedPreferences() default {};
@@ -463,7 +476,7 @@
     /**
      * Set this to true if you want to include only logcat lines related to your
      * Application process.
-     * 
+     *
      * @return true if you want to filter logcat with your process id.
      */
     boolean logcatFilterByPid() default ACRAConstants.DEFAULT_LOGCAT_FILTER_BY_PID;
@@ -472,7 +485,7 @@
      * Set this to false if you want to disable sending reports in development
      * mode. Only signed application packages will send reports. Default value
      * is true.
-     * 
+     *
      * @return false if reports should not be sent.
      */
     boolean sendReportsInDevMode() default ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
@@ -490,7 +503,7 @@
      * Provide here regex patterns to be evaluated on each SharedPreference key
      * to exclude KV pairs from the collected SharedPreferences. This allows you
      * to exclude sensitive user data like passwords to be collected.
-     * 
+     *
      * @return an array of regex patterns, every matching key is not collected.
      */
     String[] excludeMatchingSharedPreferencesKeys() default {};
@@ -500,7 +513,7 @@
      * Settings.Secure and Settings.Global key to exclude KV pairs from the
      * collected SharedPreferences. This allows you to exclude sensitive data to
      * be collected.
-     * 
+     *
      * @return an array of regex patterns, every matching key is not collected.
      */
     String[] excludeMatchingSettingsKeys() default {};
@@ -517,10 +530,10 @@
      * path/name of your application log file. If the string does not contain
      * any path separator, the file is assumed as being in
      * {@link Context#getFilesDir()}.
-     * 
+     *
      * @return a String containing the path/name of your application log file.
-     *         If the string does not containt any path separator, the file is
-     *         assumed as being in {@link Context#getFilesDir()}.
+     * If the string does not containt any path separator, the file is
+     * assumed as being in {@link Context#getFilesDir()}.
      */
     String applicationLogFile() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
 
@@ -528,7 +541,7 @@
      * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
      * number of latest lines of your application log file to be collected.
      * Default value is 100.
-     * 
+     *
      * @return number of lines to collect.
      */
     int applicationLogFileLines() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
@@ -538,9 +551,9 @@
      * Set this to true if you need to post reports to your own server using an
      * SSL connection with a self-signed certificate.
      * </p>
-     * 
+     *
      * @return True if SSL certificates validation has to be ignored when
-     *         posting reports.
+     * posting reports.
      */
     boolean disableSSLCertValidation() default ACRAConstants.DEFAULT_DISABLE_SSL_CERT_VALIDATION;
 
@@ -548,7 +561,7 @@
 
     /**
      * @return Class for the CrashReportDialog used when sending intent.
-     *  If not provided, defaults to CrashReportDialog.class
+     * If not provided, defaults to CrashReportDialog.class
      */
     Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
 
