diff --git a/.gitignore b/.gitignore
index 04a2dd73..1b0642ed 100644
--- a/.gitignore
+++ b/.gitignore
@@ -6,3 +6,4 @@ pom.xml.releaseBackup
 release.properties
 *.iml
 *.idea/*
+build/
\ No newline at end of file
diff --git a/README.md b/README.md
index 7c2a2517..f9e5ed1f 100644
--- a/README.md
+++ b/README.md
@@ -1,12 +1,5 @@
 [![Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !](https://pledgie.com/campaigns/18789.png?skin_name=chrome)](http://www.pledgie.com/campaigns/18789) [![Flattr this project](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=kevingaudin&url=http://acra.ch&title=ACRA%20-%20Application%20Crash%20Reports%20for%20Android&language=&tags=opensource%2Candroid&category=software&description=ACRA%20%28Application%20Crash%20Reports%20for%20Android%29%20is%20an%20open%20source%20android%20library%20for%20developers%2C%20enabling%20their%20apps%20to%20send%20detailed%20reports%20when%20they%20crash.)
 
-Please tell us how you use ACRA
-===============================
-
-In order to focus future developments on what is really important to you, please [take this survey](https://spreadsheets.google.com/viewform?hl=en&formkey=dDV5ek03OS1SOWNlZlBxNkFXbV9kSmc6MQ#gid=0)!
-
-You can view the survey results [here](https://spreadsheets.google.com/spreadsheet/viewanalytics?hl=en&formkey=dDV5ek03OS1SOWNlZlBxNkFXbV9kSmc6MQ).
-
 <a href="https://plus.google.com/118444843928759726538" rel="publisher">Follow ACRA on Google+ for latest news and tips.</a>
 
 [![](https://ssl.gstatic.com/images/icons/gplus-32.png)](https://plus.google.com/118444843928759726538)
@@ -16,7 +9,7 @@ What is ACRA ?
 
 ACRA is a library enabling Android Application to automatically post their crash reports to a GoogleDoc form. It is targetted to android applications developers to help them get data from their applications when they crash or behave erroneously.
 
-ACRA is used in 2.76% ([See AppBrain/stats](http://www.appbrain.com/stats/libraries/details/acra/acra)) of all apps on Google Play as of Jan 2015. That's over 40M **apps** using ACRA. And since the average US user has 41 apps installed on their phone that means there is a 70% that ACRA is running on any phone. That means ACRA is running on over a **billion devices**.
+ACRA is used in 2.76% ([See AppBrain/stats](http://www.appbrain.com/stats/libraries/details/acra/acra)) of all apps on Google Play as of Jan 2015. That's over 40M **apps** using ACRA. And since the average US user has 41 apps installed on their phone that means there is a 70% chance that ACRA is running on any phone. That means ACRA is running on over a **billion devices**.
 
 See [BasicSetup](http://github.com/ACRA/acra/wiki/BasicSetup) for a step-by-step installation and usage guide.
 
@@ -43,6 +36,31 @@ Change Log
 
 For a complete changelog, please see the [ChangeLog page](http://github.com/ACRA/acra/wiki/ChangeLog) in the Wiki.
 
+ACRA v4.8
+===============================
+- SenderService now invoked to send all report in a separate process.
+- AAR contains Proguard config
+- AAR contains AndroidManifest with condig for RpoertDialog and SenderService.
+- Substantial refactoring to simplify internals.
+  NB ACRAConfiguration has moved to org.acra.config package.
+
+
+ACRA v4.7
+===============================
+- Support for Android M (6.0)
+  - Using HtttpUrlConnection instead of Apache Http
+  - Using com.android.support:support-v4 to provide support fro removed Notification methods.
+- Minimum Android version is Froyo (2.2). ACRA will disable itself for anything prior to that.  
+- Packaging as an AAR.
+  In order to use com.android.support:support-v4 ACRA now needs to be packaged as an AAR instead of a JAR.
+- Removal of maxNumberOfRequestRetries config as HttpUrlConnection does not natively support retries on Socket timeout.
+- Removal of httpsSocketFactoryFactoryClass config and TlsSniSocketFactory as it was not natively supported with HttpUrlConnection and it is questionable as to whether it is still required.
+  HttpUrlConnection decides upon the Socket to use based upon protocol.
+- Removal of disableSSLCertValidation (this hasn't been used since the introduction of the keystore parameter).  
+- Increase of default connection timeout to 5000ms
+- Increase of default socket timeout to 8000ms
+
+
 ACRA v4.6
 ===============================
 
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 00000000..ce388534
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,29 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
+
+    lintOptions {
+        abortOnError false
+    }
+
+    defaultConfig {
+        minSdkVersion 4
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0"
+    }
+    
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'src/main/proguard/proguard.cfg'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.android.support:support-v4:23.1.1'
+}
diff --git a/pom.xml b/pom.xml
index 997b9727..12482407 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,8 @@
     </parent>
 	<groupId>ch.acra</groupId>
 	<artifactId>acra</artifactId>
-	<version>4.6.3-SNAPSHOT</version>
+	<packaging>aar</packaging>
+	<version>4.8.1-SNAPSHOT</version>
 
 	<name>Application Crash Report for Android</name>
 
@@ -35,17 +36,25 @@
 				<role>developer</role>
 			</roles>
 		</developer>
+		<developer>
+			<id>william.ferguson</id>
+			<name>William Ferguson</name>
+			<roles>
+				<role>developer</role>
+			</roles>
+		</developer>
 	</developers>
 
 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
 		<!--
-			NB ACRA supports back to API3.
+			NB ACRA supports back to API 8.
+
 			But in order to compile classes and method that will NOT be used except when the target platform is of sufficient version
-			we need to compile against version 17.
+			we need to compile against version 23. All such classes are in the org.acra.jraf package.
 		-->
-        <android.version>17</android.version>
+        <android.version>23</android.version>
 	</properties>
 
 	<dependencies>
@@ -59,12 +68,18 @@
             NB The AndroidAPI dependency is included below to allow test execution and javadoc generation.
         -->
         <dependency>
-            <groupId>com.google.android</groupId>
+            <groupId>android</groupId> <!-- deployed using the android-maven-sdk-deployer -->
             <artifactId>android</artifactId>
-            <version>4.1.1.4</version>
+            <version>6.0_r1</version>
             <type>jar</type>
-            <scope>test</scope>
+            <scope>provided</scope>
         </dependency>
+		<dependency>
+			<groupId>com.android.support</groupId>
+			<artifactId>support-v4</artifactId>
+			<version>23.1.1</version>
+			<type>aar</type>
+		</dependency>
 		<dependency>
 			<groupId>junit</groupId>
 			<artifactId>junit</artifactId>
@@ -72,6 +87,7 @@
 			<type>jar</type>
 			<scope>test</scope>
 		</dependency>
+
         <dependency>
             <groupId>org.json</groupId>
             <artifactId>json</artifactId>
@@ -107,6 +123,18 @@
 		</pluginManagement>
 
 		<plugins>
+			<plugin>
+				<groupId>com.simpligility.maven.plugins</groupId>
+				<artifactId>android-maven-plugin</artifactId>
+				<version>4.3.0</version>
+				<extensions>true</extensions>
+				<configuration>
+					<consumerProguardFiles>
+						<consumerProguardFile>src/main/proguard/proguard.cfg</consumerProguardFile>
+					</consumerProguardFiles>
+				</configuration>
+			</plugin>
+
 			<plugin>
 				<artifactId>maven-compiler-plugin</artifactId>
 				<configuration>
diff --git a/src/main/AndroidManifest.xml b/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..6f6690a3
--- /dev/null
+++ b/src/main/AndroidManifest.xml
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (c) Xandar IP 2013.
+  ~
+  ~ All Rights Reserved
+  ~ No part of this application may be reproduced, copied, modified or adapted, without the prior written consent
+  ~ of the author, unless otherwise indicated for stand-alone materials.
+  ~
+  ~ Contact support@xandar.com.au for copyright requests.
+  -->
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          android:versionCode="0"
+          android:versionName="UPDATED-BY-BUILD"
+          package="ch.acra.acra">
+    
+    <!--
+        Version API Name
+        6.0     23  Marshmallow
+        5.0     21  Lollipop
+        4.4W    20  KitKat Watch
+        4.4.2   19  KitKat
+        4.3     18
+        4.2     17
+        4.1     16  Jelly Bean
+        4.0.3   15
+        4.0     14  Ice Cream Sandwich
+        3.2     13
+        3.1.X   12
+        3.0     11  Honeycomb
+        2.3.3   10  Gingerbread
+        2.3     9
+        2.2     8   Froyo
+        2.1     7   Eclair
+        2.0.1   6
+        2.0     5
+        1.6     4   Donut
+        1.5     3   Cupcake
+        1.1     2
+        1.0     1
+    -->
+    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="23"/>
+
+    <application>
+        <activity
+            android:name="org.acra.dialog.CrashReportDialog"
+            android:theme="@android:style/Theme.Dialog"
+            android:launchMode="singleInstance"
+            android:excludeFromRecents="true"
+            android:finishOnTaskLaunch="true"/>
+
+        <service
+            android:name="org.acra.sender.SenderService"
+            android:exported="false"
+            android:process=":acra" />
+    </application>
+</manifest>
\ No newline at end of file
diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index 04fd7f9f..55abc82e 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -15,18 +15,23 @@
  */
 package org.acra;
 
-import org.acra.annotation.ReportsCrashes;
-import org.acra.log.ACRALog;
-import org.acra.log.HollowLog;
-import org.acra.log.AndroidLogDelegate;
-
+import android.app.ActivityManager;
 import android.app.Application;
+import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.preference.PreferenceManager;
+import android.os.Build;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.util.ApplicationStartupProcessor;
+import org.acra.config.ACRAConfig;
+import org.acra.config.ACRAConfiguration;
+import org.acra.config.ACRAConfigurationException;
+import org.acra.config.ACRAConfigurationFactory;
+import org.acra.legacy.ReportMigrator;
+import org.acra.log.ACRALog;
+import org.acra.log.AndroidLogDelegate;
+import org.acra.prefs.PrefUtils;
+import org.acra.prefs.SharedPreferencesFactory;
 
 /**
  * Use this class to initialize the crash reporting feature using
@@ -40,12 +45,14 @@
  */
 public class ACRA {
 
-    public static final boolean DEV_LOGGING = false; // Should be false for
-                                                     // release.
+    public static boolean DEV_LOGGING = false; // Should be false for release.
+
     public static final String LOG_TAG = ACRA.class.getSimpleName();
     
     public static ACRALog log = new AndroidLogDelegate();
 
+    private static final String ACRA_PRIVATE_PROCESS_NAME= ":acra";
+
     /**
      * The key of the application default SharedPreference where you can put a
      * 'true' Boolean value to disable ACRA.
@@ -92,20 +99,26 @@
      */
     public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
 
+    private static final String PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0 = "acra.legacyAlreadyConvertedTo4.8.0";
+
     private static Application mApplication;
+    private static ACRAConfiguration configProxy;
 
     // Accessible via ACRA#getErrorReporter().
     private static ErrorReporter errorReporterSingleton;
 
     // NB don't convert to a local field because then it could be garbage
     // collected and then we would have no PreferenceListener.
-    private static OnSharedPreferenceChangeListener mPrefListener;
+    private static OnSharedPreferenceChangeListener mPrefListener; // TODO consider moving to ErrorReport so it doesn't need to be a static field.
 
     /**
      * <p>
-     * Initialize ACRA for a given Application. The call to this method should
-     * be placed as soon as possible in the {@link Application#onCreate()}
-     * method.
+     * Initialize ACRA for a given Application.
+     *
+     * The call to this method should be placed as soon as possible in the {@link Application#onCreate()} method.
+     *
+     * Uses the configuration as configured with the @ReportCrashes annotation.
+     * Sends any unsent reports.
      * </p>
      * 
      * @param app   Your Application class.
@@ -114,8 +127,7 @@
     public static void init(Application app) {
         final ReportsCrashes reportsCrashes = app.getClass().getAnnotation(ReportsCrashes.class);
         if (reportsCrashes == null) {
-            log.e(LOG_TAG,
-                    "ACRA#init called but no ReportsCrashes annotation on Application " + app.getPackageName());
+            log.e(LOG_TAG, "ACRA#init called but no ReportsCrashes annotation on Application " + app.getPackageName());
             return;
         }
         init(app, new ACRAConfiguration(reportsCrashes));
@@ -123,9 +135,11 @@ public static void init(Application app) {
 
     /**
      * <p>
-     * Initialize ACRA for a given Application. The call to this method should
-     * be placed as soon as possible in the {@link Application#onCreate()}
-     * method.
+     * Initialize ACRA for a given Application.
+     *
+     * The call to this method should be placed as soon as possible in the {@link Application#onCreate()} method.
+     *
+     * Sends any unsent reports.
      * </p>
      *
      * @param app       Your Application class.
@@ -145,15 +159,21 @@ public static void init(Application app, ACRAConfiguration config) {
      *
      * @param app       Your Application class.
      * @param config    ACRAConfiguration to manually set up ACRA configuration.
-     * @param checkReportsOnApplicationStart    Whether to invoke
-     *     ErrorReporter.checkReportsOnApplicationStart(). Apps which adjust the
-     *     ReportSenders should set this to false and call
-     *     checkReportsOnApplicationStart() themselves to prevent a potential
-     *     race with the SendWorker and list of ReportSenders.
+     * @param checkReportsOnApplicationStart    Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
      * @throws IllegalStateException if it is called more than once.
      */
     public static void init(Application app, ACRAConfiguration config, boolean checkReportsOnApplicationStart){
 
+        final boolean senderServiceProcess = isACRASenderServiceProcess(app);
+        if (senderServiceProcess) {
+            if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "Not initialising ACRA to listen for uncaught Exceptions as this is the SendWorker process and we only send reports, we don't capture them to avoid infinite loops");
+        }
+
+        boolean supportedAndroidVersion = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO);
+        if (!supportedAndroidVersion){
+            log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+        }
+
         if (mApplication != null) {
             log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
             return;
@@ -166,25 +186,39 @@ public static void init(Application app, ACRAConfiguration config, boolean check
         }
         configProxy = config;
 
-        final SharedPreferences prefs = getACRASharedPreferences();
+        final SharedPreferences prefs = new SharedPreferencesFactory(mApplication, configProxy).create();
 
         try {
-            checkCrashResources(config);
+            config.checkCrashResources();
 
-            log.d(LOG_TAG, "ACRA is enabled for " + mApplication.getPackageName() + ", initializing...");
-
-            // Initialize ErrorReporter with all required data
-            final boolean enableAcra = !shouldDisableACRA(prefs);
-            final ErrorReporter errorReporter = new ErrorReporter(mApplication, prefs, enableAcra);
+            // Check prefs to see if we have converted from legacy (pre 4.8.0) ACRA
+            if (!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, false)) {
+                // If not then move reports to approved/unapproved folders and mark as converted.
+                new ReportMigrator(app).migrate();
 
-            // Append ReportSenders.
-            errorReporter.setDefaultReportSenders();
-
-            errorReporterSingleton = errorReporter;
+                // Mark as converted.
+                final SharedPreferences.Editor editor = prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, true);
+                PrefUtils.save(editor);
+            }
 
-            // Check for pending reports
-            if (checkReportsOnApplicationStart) {
-                errorReporter.checkReportsOnApplicationStart();
+            // Initialize ErrorReporter with all required data
+            final boolean enableAcra = supportedAndroidVersion && !shouldDisableACRA(prefs);
+            if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "ACRA is " + (enableAcra ? "enabled" : "disabled") + " for " + mApplication.getPackageName() + ", initializing...");
+            errorReporterSingleton = new ErrorReporter(mApplication, configProxy, prefs, enableAcra, supportedAndroidVersion, !senderServiceProcess);
+
+            // Check for approved reports and send them (if enabled).
+            // NB don't check if senderServiceProcess as it will gather these reports itself.
+            if (checkReportsOnApplicationStart && !senderServiceProcess) {
+                final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(mApplication,  config);
+                if (config.deleteOldUnsentReportsOnApplicationStart()) {
+                    startupProcessor.deleteUnsentReportsFromOldAppVersion();
+                }
+                if (config.deleteUnapprovedReportsOnApplicationStart()) {
+                    startupProcessor.deleteAllUnapprovedReportsBarOne();
+                }
+                if (enableAcra) {
+                    startupProcessor.sendApprovedReports();
+                }
             }
 
         } catch (ACRAConfigurationException e) {
@@ -211,11 +245,37 @@ public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, Strin
         prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
     }
 
+    /**
+     * @return true is ACRA has been initialised.
+     */
+    @SuppressWarnings("unused")
+    public static boolean isInitialised() {
+        return (configProxy != null);
+    }
+
+    /**
+     * @return true if the current process is the process running the SenderService.
+     */
+    private static boolean isACRASenderServiceProcess(Application app) {
+        final String processName = getCurrentProcessName(app);
+        if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "ACRA processName='" + processName + "'");
+        return (processName != null) && processName.endsWith(ACRA_PRIVATE_PROCESS_NAME);
+    }
+
+    private static String getCurrentProcessName(Application app) {
+        final int processId = android.os.Process.myPid();
+        final ActivityManager manager = (ActivityManager) app.getSystemService(Context.ACTIVITY_SERVICE);
+        for (final ActivityManager.RunningAppProcessInfo processInfo : manager.getRunningAppProcesses()){
+            if(processInfo.pid == processId){
+                return processInfo.processName;
+            }
+        }
+        return null;
+    }
+
     /**
      * @return the current instance of ErrorReporter.
-     * @throws IllegalStateException
-     *             if {@link ACRA#init(android.app.Application)} has not yet
-     *             been called.
+     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet been called.
      */
     public static ErrorReporter getErrorReporter() {
         if (errorReporterSingleton == null) {
@@ -248,105 +308,36 @@ private static boolean shouldDisableACRA(SharedPreferences prefs) {
     }
 
     /**
-     * Checks that mandatory configuration items have been provided.
-     * 
-     * @throws ACRAConfigurationException
-     *             if required values are missing.
-     */
-    static void checkCrashResources(ReportsCrashes conf) throws ACRAConfigurationException {
-        switch (conf.mode()) {
-        case TOAST:
-            if (conf.resToastText() == 0) {
-                throw new ACRAConfigurationException(
-                        "TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
-            }
-            break;
-        case NOTIFICATION:
-            if (conf.resNotifTickerText() == 0 || conf.resNotifTitle() == 0 || conf.resNotifText() == 0) {
-                throw new ACRAConfigurationException(
-                        "NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
-            }
-            if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
-                throw new ACRAConfigurationException(
-                        "NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-            }
-            break;
-        case DIALOG:
-            if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
-                throw new ACRAConfigurationException(
-                        "DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-            }
-            break;
-		default:
-			break;
-        }
-    }
-
-    /**
-     * Retrieves the {@link SharedPreferences} instance where user adjustable
-     * settings for ACRA are stored. Default are the Application default
-     * SharedPreferences, but you can provide another SharedPreferences name
-     * with {@link ReportsCrashes#sharedPreferencesName()}.
-     * 
-     * @return The Shared Preferences where ACRA will retrieve its user
-     *         adjustable setting.
+     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
+     * @deprecated since 4.8.0 use {@link SharedPreferencesFactory} instead.
      */
+    @SuppressWarnings( "unused" )
     public static SharedPreferences getACRASharedPreferences() {
-        ReportsCrashes conf = getConfig();
-        if (!"".equals(conf.sharedPreferencesName())) {
-            return mApplication.getSharedPreferences(conf.sharedPreferencesName(), conf.sharedPreferencesMode());
-        } else {
-            return PreferenceManager.getDefaultSharedPreferences(mApplication);
-        }
+        return new SharedPreferencesFactory(mApplication, configProxy).create();
     }
 
     /**
      * Provides the current ACRA configuration.
      * 
      * @return Current ACRA {@link ReportsCrashes} configuration instance.
+     * @deprecated since 4.8.0 {@link ACRAConfig} should be passed into classes instead of retrieved statically.
      */
+    @SuppressWarnings( "unused" )
     public static ACRAConfiguration getConfig() {
-        if (configProxy == null) {
-            if (mApplication == null) {
-                log.w(LOG_TAG,
-                        "Calling ACRA.getConfig() before ACRA.init() gives you an empty configuration instance. You might prefer calling ACRA.getNewDefaultConfig(Application) to get an instance with default values taken from a @ReportsCrashes annotation.");
-            }
-            configProxy = getNewDefaultConfig(mApplication);
+        if (mApplication == null) {
+            throw new IllegalStateException("Cannot call ACRA.getConfig() before ACRA.init().");
         }
         return configProxy;
     }
 
     /**
      * @param app       Your Application class.
-     * @return new {@link ACRAConfiguration} instance with values initialized
-     *         from the {@link ReportsCrashes} annotation.
+     * @return new {@link ACRAConfiguration} instance with values initialized from the {@link ReportsCrashes} annotation.
+     * @deprecated since 4.8.0 use {@link ACRAConfigurationFactory} instead.
      */
+    @SuppressWarnings( "unused" )
     public static ACRAConfiguration getNewDefaultConfig(Application app) {
-        if(app != null) {
-            return new ACRAConfiguration(app.getClass().getAnnotation(ReportsCrashes.class));
-        } else {
-            return new ACRAConfiguration(null);
-        }
-    }
-
-    private static ACRAConfiguration configProxy;
-
-    /**
-     * Returns true if the application is debuggable.
-     * 
-     * @return true if the application is debuggable.
-     */
-    static boolean isDebuggable() {
-        PackageManager pm = mApplication.getPackageManager();
-        try {
-            return ((pm.getApplicationInfo(mApplication.getPackageName(), 0).flags & ApplicationInfo.FLAG_DEBUGGABLE) > 0);
-        } catch (NameNotFoundException e) {
-            return false;
-        }
-    }
-    
-    static Application getApplication() {
-        return mApplication;
+        return new ACRAConfigurationFactory().create(app);
     }
 
     public static void setLog(ACRALog log) {
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index d34f3acf..b99379ee 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -16,6 +16,7 @@
 package org.acra;
 
 import android.content.Context;
+import org.acra.dialog.CrashReportDialog;
 
 import static org.acra.ReportField.*;
 
@@ -33,25 +34,26 @@
      * Suffix to be added to report files when they have been approved by the
      * user in NOTIFICATION mode
      */
-    static final String APPROVED_SUFFIX = "-approved";
+    public static final String APPROVED_SUFFIX = "-approved";
     /**
      * This key is used to store the silent state of a report sent by
      * handleSilentException().
      */
-    static final String SILENT_SUFFIX = "-" + IS_SILENT;
+    public static final String SILENT_SUFFIX = "-" + IS_SILENT;
     /**
-     * This is the number of previously stored reports that we send in
-     * {@link SendWorker#checkAndSendReports(android.content.Context, boolean)}.
-     * The number of reports is limited to avoid ANR on application start.
+     * This is the maximum number of previously stored reports that we send
+     * in one batch to avoid overloading the network.
      */
-    static final int MAX_SEND_REPORTS = 5;
+    public static final int MAX_SEND_REPORTS = 5;
 
     /**
      * Used in the intent starting CrashReportDialog to provide the name of the
      * latest generated report file in order to be able to associate the user
      * comment.
      */
+    public static final String EXTRA_REPORT_FILE = "REPORT_FILE";
     public static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
+
     /**
      * Used in the intent starting CrashReportDialog to provide the Exception that caused the crash.
      *
@@ -60,19 +62,24 @@
     public static final String EXTRA_REPORT_EXCEPTION = "REPORT_EXCEPTION";
 
     /**
-     * Set this extra to true to force the deletion of reports by the
-     * {@link CrashReportDialog} activity.
+     * Used in the intent starting CrashReportDialog to provide the AcraConfig to use when gathering the crash info.
+     *
+     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
      */
-    protected static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
+    public static final String EXTRA_REPORT_CONFIG = "REPORT_CONFIG";
+
     /**
-     * This is the identifier (value = 666) use for the status bar notification
-     * issued when crashes occur.
+     * Set this extra to true to force the deletion of reports by the {@link CrashReportDialog} activity.
      */
-    static final int NOTIF_CRASH_ID = 666;
+    public static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
+    /**
+     * This is the identifier (value = 666) use for the status bar notification issued when crashes occur.
+     */
+    public static final int NOTIF_CRASH_ID = 666;
     /**
      * Number of milliseconds to wait after displaying a toast.
      */
-    static final int TOAST_WAIT_DURATION = 2000;
+    public static final int TOAST_WAIT_DURATION = 2000;
 
     /**
      * A special String value to allow the usage of a pseudo-null default value
@@ -82,11 +89,9 @@
 
     public static final boolean DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST = false;
 
-    public static final int DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES = 3;
-
-    public static final int DEFAULT_SOCKET_TIMEOUT = 5000;
+    public static final int DEFAULT_SOCKET_TIMEOUT = 8000;
 
-    public static final int DEFAULT_CONNECTION_TIMEOUT = 3000;
+    public static final int DEFAULT_CONNECTION_TIMEOUT = 5000;
 
     public static final boolean DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START = true;
 
@@ -124,10 +129,6 @@
 
     public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
 
-    public static final boolean DEFAULT_DISABLE_SSL_CERT_VALIDATION = false;
-
-    public static final String DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS = "org.acra.util.DefaultHttpsSocketFactoryFactory";
-
     /**
      * Default list of {@link ReportField}s to be sent in email reports. You can
      * set your own list with
@@ -147,8 +148,7 @@
             PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
             AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
             DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
-            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES, SETTINGS_SYSTEM, SETTINGS_SECURE,
-            SETTINGS_GLOBAL };
+            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES };
 
     public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
 }
diff --git a/src/main/java/org/acra/CrashReportDialog.java b/src/main/java/org/acra/CrashReportDialog.java
index c55f5923..cba356ba 100644
--- a/src/main/java/org/acra/CrashReportDialog.java
+++ b/src/main/java/org/acra/CrashReportDialog.java
@@ -1,169 +1,19 @@
-package org.acra;
-
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.text.InputType;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.EditText;
-import android.widget.LinearLayout;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-
-/**
- * This is the dialog Activity used by ACRA to get authorization from the user
- * to send reports. Requires android:launchMode="singleInstance" in your
- * AndroidManifest to work properly.
- **/
-public class CrashReportDialog extends BaseCrashReportDialog implements DialogInterface.OnClickListener, DialogInterface.OnDismissListener {
-
-    private static final String STATE_EMAIL = "email";
-    private static final String STATE_COMMENT = "comment";
-    private EditText userCommentView;
-    private EditText userEmailView;
-
-    AlertDialog mDialog;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        final AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
-        final int titleResourceId = ACRA.getConfig().resDialogTitle();
-        if (titleResourceId != 0) {
-            dialogBuilder.setTitle(titleResourceId);
-        }
-        final int iconResourceId = ACRA.getConfig().resDialogIcon();
-        if (iconResourceId != 0) {
-            dialogBuilder.setIcon(iconResourceId);
-        }
-        dialogBuilder.setView(buildCustomView(savedInstanceState));
-        dialogBuilder.setPositiveButton(getText(ACRA.getConfig().resDialogPositiveButtonText()), CrashReportDialog.this);
-        dialogBuilder.setNegativeButton(getText(ACRA.getConfig().resDialogNegativeButtonText()), CrashReportDialog.this);
-
-        mDialog = dialogBuilder.create();
-        mDialog.setCanceledOnTouchOutside(false);
-        mDialog.setOnDismissListener(this);
-        mDialog.show();
-    }
-
-    protected View buildCustomView(Bundle savedInstanceState) {
-        final LinearLayout root = new LinearLayout(this);
-        root.setOrientation(LinearLayout.VERTICAL);
-        root.setPadding(10, 10, 10, 10);
-        root.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
-        root.setFocusable(true);
-        root.setFocusableInTouchMode(true);
-
-        final ScrollView scroll = new ScrollView(this);
-        root.addView(scroll, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT, 1.0f));
-        final LinearLayout scrollable = new LinearLayout(this);
-        scrollable.setOrientation(LinearLayout.VERTICAL);
-        scroll.addView(scrollable);
-
-        final TextView text = new TextView(this);
-        final int dialogTextId = ACRA.getConfig().resDialogText();
-        if (dialogTextId != 0) {
-            text.setText(getText(dialogTextId));
-        }
-        scrollable.addView(text);
-
-        // Add an optional prompt for user comments
-        final int commentPromptId = ACRA.getConfig().resDialogCommentPrompt();
-        if (commentPromptId != 0) {
-            final TextView label = new TextView(this);
-            label.setText(getText(commentPromptId));
-
-            label.setPadding(label.getPaddingLeft(), 10, label.getPaddingRight(), label.getPaddingBottom());
-            scrollable.addView(label, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
-
-            userCommentView = new EditText(this);
-            userCommentView.setLines(2);
-            if (savedInstanceState != null) {
-                String savedValue = savedInstanceState.getString(STATE_COMMENT);
-                if (savedValue != null) {
-                    userCommentView.setText(savedValue);
-                }
-            }
-            scrollable.addView(userCommentView);
-        }
-
-        // Add an optional user email field
-        final int emailPromptId = ACRA.getConfig().resDialogEmailPrompt();
-        if (emailPromptId != 0) {
-            final TextView label = new TextView(this);
-            label.setText(getText(emailPromptId));
-
-            label.setPadding(label.getPaddingLeft(), 10, label.getPaddingRight(), label.getPaddingBottom());
-            scrollable.addView(label);
-
-            userEmailView = new EditText(this);
-            userEmailView.setSingleLine();
-            userEmailView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
-
-            String savedValue = null;
-            if (savedInstanceState != null) {
-                savedValue = savedInstanceState.getString(STATE_EMAIL);
-            }
-            if (savedValue != null) {
-                userEmailView.setText(savedValue);
-            } else {
-                final SharedPreferences prefs = ACRA.getACRASharedPreferences();
-                userEmailView.setText(prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, ""));
-            }
-            scrollable.addView(userEmailView);
-        }
-
-        return root;
-    }
-
-    @Override
-    public void onClick(DialogInterface dialog, int which) {
-        if (which == DialogInterface.BUTTON_POSITIVE) {
-            // Retrieve user comment
-            final String comment = userCommentView != null ? userCommentView.getText().toString() : "";
-
-            // Store the user email
-            final String userEmail;
-            final SharedPreferences prefs = ACRA.getACRASharedPreferences();
-            if (userEmailView != null) {
-                userEmail = userEmailView.getText().toString();
-                final SharedPreferences.Editor prefEditor = prefs.edit();
-                prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, userEmail);
-                prefEditor.commit();
-            } else {
-                userEmail = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "");
-            }
-            sendCrash(comment, userEmail);
-        } else {
-            cancelReports();
-        }
-
-        finish();
-    }
-
-
-    @Override
-    public void onDismiss(DialogInterface dialog) {
-        finish();
-    }
-
-    /*
-     * (non-Javadoc)
-     * 
-     * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)
-     */
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        if (userCommentView != null && userCommentView.getText() != null) {
-            outState.putString(STATE_COMMENT, userCommentView.getText().toString());
-        }
-        if (userEmailView != null && userEmailView.getText() != null) {
-            outState.putString(STATE_EMAIL, userEmailView.getText().toString());
-        }
-    }
+package org.acra;
+
+import android.os.Bundle;
+
+import static org.acra.ACRA.LOG_TAG;
+
+
+/**
+ * Old crash report dialog.
+ *
+ * @deprecated since 4.8.0 use {@link org.acra.dialog.CrashReportDialog} instead
+ **/
+public final class CrashReportDialog extends org.acra.dialog.CrashReportDialog {
+
+    protected void buildAndShowDialog(Bundle savedInstanceState){
+        ACRA.log.w(LOG_TAG, "org.acra.CrashReportDialog has been deprecated. Please use org.acra.dialog.CrashReportDialog instead");
+        super.buildAndShowDialog(savedInstanceState);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/acra/CrashReportFinder.java b/src/main/java/org/acra/CrashReportFinder.java
deleted file mode 100644
index 118fb7e0..00000000
--- a/src/main/java/org/acra/CrashReportFinder.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import static org.acra.ACRA.LOG_TAG;
-
-import java.io.File;
-import java.io.FilenameFilter;
-
-import android.content.Context;
-
-/**
- * Responsible for retrieving the location of Crash Report files.
- * <p/>
- * @author William Ferguson
- * @since 4.3.0
- */
-final class CrashReportFinder {
-
-    private final Context context;
-
-    public CrashReportFinder(Context context) {
-        this.context = context;
-    }
-
-    /**
-     * Returns an array containing the names of pending crash report files.
-     *
-     * @return an array containing the names of pending crash report files.
-     */
-    public String[] getCrashReportFiles() {
-        if (context == null) {
-            ACRA.log.e(LOG_TAG, "Trying to get ACRA reports but ACRA is not initialized.");
-            return new String[0];
-        }
-
-        final File dir = context.getFilesDir();
-        if (dir == null) {
-            ACRA.log.w(LOG_TAG, "Application files directory does not exist! The application may not be installed correctly. Please try reinstalling.");
-            return new String[0];
-        }
-
-        ACRA.log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
-
-        // Filter for ".stacktrace" files
-        final FilenameFilter filter = new FilenameFilter() {
-            public boolean accept(File dir, String name) {
-                return name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
-            }
-        };
-        final String[] result = dir.list(filter);
-        return (result == null) ? new String[0] : result;
-    }
-}
diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index d34e4af0..6c76984b 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -15,44 +15,21 @@
  */
 package org.acra;
 
-import android.Manifest.permission;
-import android.app.Activity;
 import android.app.Application;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.content.Context;
-import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.os.Bundle;
-import android.os.Looper;
-import android.text.format.Time;
-import android.widget.Toast;
 import org.acra.annotation.ReportsCrashes;
-import org.acra.collector.Compatibility;
+import org.acra.builder.*;
 import org.acra.collector.ConfigurationCollector;
-import org.acra.collector.CrashReportData;
 import org.acra.collector.CrashReportDataFactory;
-import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat;
-import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper;
-import org.acra.sender.EmailIntentSender;
-import org.acra.sender.HttpSender;
-import org.acra.sender.ReportSender;
-import org.acra.util.PackageManagerWrapper;
-import org.acra.util.ToastSender;
+import org.acra.util.ApplicationStartupProcessor;
+import org.acra.config.ACRAConfig;
+import org.acra.config.ACRAConfiguration;
 
-import java.io.File;
 import java.lang.Thread.UncaughtExceptionHandler;
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
 
 import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.IS_SILENT;
 
 /**
  * <p>
@@ -80,159 +57,71 @@
  */
 public class ErrorReporter implements Thread.UncaughtExceptionHandler {
 
-    private boolean enabled = false;
+    private final boolean supportedAndroidVersion;
 
-    private final Application mContext;
-    private final SharedPreferences prefs;
-
-    /**
-     * Contains the active {@link ReportSender}s.
-     */
-    private final List<ReportSender> mReportSenders = new ArrayList<ReportSender>();
+    private final Application context;
+    private final ACRAConfig config;
 
     private final CrashReportDataFactory crashReportDataFactory;
+    private final ReportExecutor reportExecutor;
 
-    private final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
-
-    // A reference to the system's previous default UncaughtExceptionHandler
-    // kept in order to execute the default exception handling after sending the
-    // report.
-    private final Thread.UncaughtExceptionHandler mDfltExceptionHandler;
-
-    private WeakReference<Activity> lastActivityCreated = new WeakReference<Activity>(null);
-
-    /**
-     * This is used to wait for the crash toast to end it's display duration
-     * before killing the Application.
-     */
-    private boolean toastWaitEnded = true;
-
-    private static final ExceptionHandlerInitializer NULL_EXCEPTION_HANDLER_INITIALIZER = new ExceptionHandlerInitializer() {
+    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = new ExceptionHandlerInitializer() {
         @Override
         public void initializeExceptionHandler(ErrorReporter reporter) {
         }
     };
 
-    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = NULL_EXCEPTION_HANDLER_INITIALIZER;
-
-    /**
-     * Used to create a new (non-cached) PendingIntent each time a new crash occurs.
-     */
-    private static int mNotificationCounter = 0;
 
     /**
      * Can only be constructed from within this class.
      *
-     * @param context
-     *            Context for the application in which ACRA is running.
-     * @param prefs
-     *            SharedPreferences used by ACRA.
-     * @param enabled
-     *            Whether this ErrorReporter should capture Exceptions and
-     *            forward their reports.
+     * @param context   Context for the application in which ACRA is running.
+     * @param config    AcraConfig to use when reporting and sending errors.
+     * @param prefs     SharedPreferences used by ACRA.
+     * @param enabled   Whether this ErrorReporter should capture Exceptions and forward their reports.
+     * @param listenForUncaughtExceptions   Whether to listen for uncaught Exceptions.
      */
-    ErrorReporter(Application context, SharedPreferences prefs, boolean enabled) {
+    ErrorReporter(Application context, ACRAConfig config, SharedPreferences prefs, boolean enabled, boolean supportedAndroidVersion, boolean listenForUncaughtExceptions) {
 
-        this.mContext = context;
-        this.prefs = prefs;
-        this.enabled = enabled;
+        this.context = context;
+        this.config = config;
+        this.supportedAndroidVersion = supportedAndroidVersion;
 
         // Store the initial Configuration state.
         // This is expensive to gather, so only do so if we plan to report it.
         final String initialConfiguration;
-        if (ACRA.getConfig().getReportFields().contains(ReportField.INITIAL_CONFIGURATION)) {
-            initialConfiguration = ConfigurationCollector.collectConfiguration(mContext);
+        if (config.getReportFields().contains(ReportField.INITIAL_CONFIGURATION)) {
+            initialConfiguration = ConfigurationCollector.collectConfiguration(this.context);
         } else {
             initialConfiguration = null;
         }
 
         // Sets the application start date.
-        // This will be included in the reports, will be helpful compared to
-        // user_crash date.
-        final Time appStartDate = new Time();
-        appStartDate.setToNow();
+        // This will be included in the reports, will be helpful compared to user_crash date.
+        final Calendar appStartDate = new GregorianCalendar();
 
-        if (Compatibility.getAPILevel() >= Compatibility.VERSION_CODES.ICE_CREAM_SANDWICH) { // ActivityLifecycleCallback
-            // only available for API14+
-            ApplicationHelper.registerActivityLifecycleCallbacks(context, new ActivityLifecycleCallbacksCompat() {
-                @Override
-                public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "onActivityCreated " + activity.getClass());
-                    if (!(activity instanceof BaseCrashReportDialog)) {
-                        // Ignore CrashReportDialog because we want the last
-                        // application Activity that was started so that we can
-                        // explicitly kill it off.
-                        lastActivityCreated = new WeakReference<Activity>(activity);
-                    }
-                }
+        crashReportDataFactory = new CrashReportDataFactory(this.context, config, prefs, appStartDate, initialConfiguration);
 
-                @Override
-                public void onActivityStarted(Activity activity) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "onActivityStarted " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityResumed(Activity activity) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "onActivityResumed " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityPaused(Activity activity) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "onActivityPaused " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityStopped(Activity activity) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "onActivityStopped " + activity.getClass());
-                }
-
-                @Override
-                public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.i(LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityDestroyed(Activity activity) {
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.i(LOG_TAG, "onActivityDestroyed " + activity.getClass());
-                }
-            });
+        final Thread.UncaughtExceptionHandler defaultExceptionHandler;
+        if (listenForUncaughtExceptions) {
+            defaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
+            Thread.setDefaultUncaughtExceptionHandler(this);
+        } else {
+            defaultExceptionHandler = null;
         }
 
-        crashReportDataFactory = new CrashReportDataFactory(mContext, prefs, appStartDate, initialConfiguration);
-
-        // If mDfltExceptionHandler is not null, initialization is already done.
-        // Don't do it twice to avoid losing the original handler.
-        mDfltExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
-        Thread.setDefaultUncaughtExceptionHandler(this);
-    }
+        final LastActivityManager lastActivityManager = new LastActivityManager(this.context);
+        final ReportPrimer reportPrimer = getReportPrimer(config);
 
-    /**
-     * @return the current instance of ErrorReporter.
-     * @throws IllegalStateException
-     *             if {@link ACRA#init(android.app.Application)} has not yet
-     *             been called.
-     * @deprecated since 4.3.0 Use {@link org.acra.ACRA#getErrorReporter()}
-     *             instead.
-     */
-    @Deprecated
-    public static ErrorReporter getInstance() {
-        return ACRA.getErrorReporter();
+        reportExecutor = new ReportExecutor(context, config, crashReportDataFactory, lastActivityManager, defaultExceptionHandler, reportPrimer);
+        reportExecutor.setEnabled(enabled);
     }
 
     /**
      * Deprecated. Use {@link #putCustomData(String, String)}.
      *
-     * @param key
-     *            A key for your custom data.
-     * @param value
-     *            The value associated to your key.
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
      */
     @Deprecated
     @SuppressWarnings("unused")
@@ -253,10 +142,8 @@ public void addCustomData(String key, String value) {
      * "custom" column, as a text containing a 'key = value' pair on each line.
      * </p>
      *
-     * @param key
-     *            A key for your custom data.
-     * @param value
-     *            The value associated to your key.
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
      * @return The previous value for this key if there was one, or null.
      * @see #removeCustomData(String)
      * @see #getCustomData(String)
@@ -283,7 +170,7 @@ public String putCustomData(String key, String value) {
      * <p>
      * Example. Add to the {@link Application#onCreate()}:
      * </p>
-     * 
+     *
      * <pre>
      * ACRA.getErrorReporter().setExceptionHandlerInitializer(new ExceptionHandlerInitializer() {
      *     <code>@Override</code> public void initializeExceptionHandler(ErrorReporter reporter) {
@@ -291,18 +178,24 @@ public String putCustomData(String key, String value) {
      *     }
      * });
      * </pre>
-     * 
+     *
      * @param initializer   The initializer. Can be <code>null</code>.
+     * @deprecated since 4.8.0 use {@link ReportPrimer} mechanism instead.
      */
     public void setExceptionHandlerInitializer(ExceptionHandlerInitializer initializer) {
-        exceptionHandlerInitializer = (initializer != null) ? initializer : NULL_EXCEPTION_HANDLER_INITIALIZER;
+        exceptionHandlerInitializer = (initializer != null)
+                ? initializer
+                : new ExceptionHandlerInitializer() {
+                    @Override
+                    public void initializeExceptionHandler(ErrorReporter reporter) {
+                    }
+                };
     }
 
     /**
      * Removes a key/value pair from your reports custom data field.
      *
-     * @param key
-     *            The key of the data to be removed.
+     * @param key   The key of the data to be removed.
      * @return The value for this key before removal.
      * @see #putCustomData(String, String)
      * @see #getCustomData(String)
@@ -334,66 +227,6 @@ public String getCustomData(String key) {
         return crashReportDataFactory.getCustomData(key);
     }
 
-    /**
-     * Add a {@link ReportSender} to the list of active {@link ReportSender}s.
-     *
-     * @param sender
-     *            The {@link ReportSender} to be added.
-     */
-    public void addReportSender(ReportSender sender) {
-        mReportSenders.add(sender);
-    }
-
-    /**
-     * Remove a specific instance of {@link ReportSender} from the list of
-     * active {@link ReportSender}s.
-     *
-     * @param sender
-     *            The {@link ReportSender} instance to be removed.
-     */
-    @SuppressWarnings("unused")
-    public void removeReportSender(ReportSender sender) {
-        mReportSenders.remove(sender);
-    }
-
-    /**
-     * Remove all {@link ReportSender} instances from a specific class.
-     *
-     * @param senderClass
-     *            ReportSender class whose instances should be removed.
-     */
-    @SuppressWarnings("unused")
-    public void removeReportSenders(Class<?> senderClass) {
-        if (ReportSender.class.isAssignableFrom(senderClass)) {
-            for (ReportSender sender : mReportSenders) {
-                if (senderClass.isInstance(sender)) {
-                    mReportSenders.remove(sender);
-                }
-            }
-        }
-    }
-
-    /**
-     * Clears the list of active {@link ReportSender}s. You should then call
-     * {@link #addReportSender(ReportSender)} or ACRA will not send any report
-     * anymore.
-     */
-    public void removeAllReportSenders() {
-        mReportSenders.clear();
-    }
-
-    /**
-     * Removes all previously set {@link ReportSender}s and set the given one as
-     * the new {@link ReportSender}.
-     *
-     * @param sender
-     *            ReportSender to set as the sole sender for this ErrorReporter.
-     */
-    public void setReportSender(ReportSender sender) {
-        removeAllReportSenders();
-        addReportSender(sender);
-    }
-
     /*
      * (non-Javadoc)
      *
@@ -403,102 +236,45 @@ public void setReportSender(ReportSender sender) {
      */
     @Override
     public void uncaughtException(Thread t, Throwable e) {
+
+        // If we're not enabled then just pass the Exception on to the defaultExceptionHandler.
+        if (!reportExecutor.isEnabled()) {
+            reportExecutor.handReportToDefaultExceptionHandler(t, e);
+            return;
+        }
+
         try {
-            // If we're not enabled then just pass the Exception on to any
-            // defaultExceptionHandler.
-            if (!enabled) {
-                if (mDfltExceptionHandler != null) {
-                    ACRA.log.e(LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
-                        + " - forwarding uncaught Exception on to default ExceptionHandler");
-                    mDfltExceptionHandler.uncaughtException(t, e);
-                } else {
-                    ACRA.log.e(LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
-                        + " - no default ExceptionHandler");
-                    ACRA.log.e(LOG_TAG,
-                          "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
-                }
-                return;
-            }
+            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Building report");
 
-            ACRA.log.e(LOG_TAG,
-                  "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
-            ACRA.log.d(LOG_TAG, "Building report");
+            performDeprecatedReportPriming();
 
             // Generate and send crash report
-            reportBuilder()
+            new ReportBuilder()
                 .uncaughtExceptionThread(t)
                 .exception(e)
-                .endsApplication()
-                .send();
-        } catch (Throwable fatality) {
-            // ACRA failed. Prevent any recursive call to
-            // ACRA.uncaughtException(), let the native reporter do its job.
-            if (mDfltExceptionHandler != null) {
-                mDfltExceptionHandler.uncaughtException(t, e);
-            }
-        }
-    }
+                .endApplication()
+                .build(reportExecutor);
 
-    /**
-     * End the application.
-     */
-    private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
-        // TODO It would be better to create an explicit config attribute #letDefaultHandlerEndApplication
-        // as the intent is clearer and would allows you to switch it off for SILENT.
-        final boolean letDefaultHandlerEndApplication = (
-             ACRA.getConfig().mode() == ReportingInteractionMode.SILENT ||
-            (ACRA.getConfig().mode() == ReportingInteractionMode.TOAST && ACRA.getConfig().forceCloseDialogAfterToast())
-        );
-
-        final boolean handlingUncaughtException = uncaughtExceptionThread != null;
-        if (handlingUncaughtException && letDefaultHandlerEndApplication && (mDfltExceptionHandler != null)) {
-            // Let the system default handler do it's job and display the force close dialog.
-            ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
-            mDfltExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
-        } else {
-            // If ACRA handles user notifications with a Toast or a Notification
-            // the Force Close dialog is one more notification to the user...
-            // We choose to close the process ourselves using the same actions.
-            ACRA.log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + th.getMessage(), th);
-
-            // Trying to solve
-            // https://github.com/ACRA/acra/issues/42#issuecomment-12134144
-            // Determine the current/last Activity that was started and close
-            // it. Activity#finish (and maybe it's parent too).
-            final Activity lastActivity = lastActivityCreated.get();
-            if (lastActivity != null) {
-                ACRA.log.i(LOG_TAG, "Finishing the last Activity prior to killing the Process");
-                lastActivity.finish();
-                ACRA.log.i(LOG_TAG, "Finished " + lastActivity.getClass());
-                lastActivityCreated.clear();
-            }
-
-            android.os.Process.killProcess(android.os.Process.myPid());
-            System.exit(10);
+        } catch (Throwable fatality) {
+            // ACRA failed. Prevent any recursive call to ACRA.uncaughtException(), let the native reporter do its job.
+            ACRA.log.e(LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter" , fatality);
+            reportExecutor.handReportToDefaultExceptionHandler(t, e);
         }
     }
 
     /**
-     * Send a report for this {@link Throwable} silently (forces the use of
-     * {@link ReportingInteractionMode#SILENT} for this report, whatever is the
-     * mode set for the application. Very useful for tracking difficult defects.
+     * Mark this report as silent as send it.
      *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
+     * @param e The {@link Throwable} to be reported. If null the report will
+     *          contain a new Exception("Report requested by developer").
      */
     public void handleSilentException(Throwable e) {
-        // Mark this report as silent.
-        if (enabled) {
-            reportBuilder()
+        performDeprecatedReportPriming();
+        new ReportBuilder()
                 .exception(e)
-                .forceSilent()
-                .send();
-            ACRA.log.d(LOG_TAG, "ACRA sent Silent report.");
-            return;
-        }
-
-        ACRA.log.d(LOG_TAG, "ACRA is disabled. Silent report not sent.");
+                .sendSilently()
+                .build(reportExecutor);
     }
 
     /**
@@ -509,113 +285,33 @@ public void handleSilentException(Throwable e) {
      *            forward them as crash reports.
      */
     public void setEnabled(boolean enabled) {
-        ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + mContext.getPackageName());
-        this.enabled = enabled;
+        if (!supportedAndroidVersion) {
+            ACRA.log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+        } else {
+            ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
+            reportExecutor.setEnabled(enabled);
+        }
     }
 
     /**
-     * Starts a Thread to start sending outstanding error reports.
+     * This method looks for pending reports and does the action required depending on the interaction mode set.
      *
-     * @param onlySendSilentReports
-     *            If true then only send silent reports.
-     * @param approveReportsFirst
-     *            If true then approve unapproved reports first.
-     * @return SendWorker that will be sending the report.s
-     */
-    SendWorker startSendingReports(boolean onlySendSilentReports, boolean approveReportsFirst) {
-        final SendWorker worker = new SendWorker(mContext, mReportSenders, onlySendSilentReports, approveReportsFirst);
-        worker.start();
-        return worker;
-    }
-
-    /**
-     * Delete all report files stored.
-     */
-    void deletePendingReports() {
-        deletePendingReports(true, true, 0);
-    }
-
-    /**
-     * This method looks for pending reports and does the action required
-     * depending on the interaction mode set.
+     * @deprecated since 4.8.0 No replacement. Whether to send report on app start is controlled by {@link ACRA#init(Application, ACRAConfiguration, boolean)}.
      */
+    @SuppressWarnings( " unused" )
     public void checkReportsOnApplicationStart() {
-
-        if (ACRA.getConfig().deleteOldUnsentReportsOnApplicationStart()) {
-            // Delete any old unsent reports if this is a newer version of the app
-            // than when we last started.
-            final long lastVersionNr = prefs.getInt(ACRA.PREF_LAST_VERSION_NR, 0);
-            final PackageManagerWrapper packageManagerWrapper = new PackageManagerWrapper(mContext);
-            final PackageInfo packageInfo = packageManagerWrapper.getPackageInfo();
-            if (packageInfo != null) {
-                final boolean newVersion = packageInfo.versionCode > lastVersionNr;
-                if (newVersion) {
-                    deletePendingReports();
-                }
-                final SharedPreferences.Editor prefsEditor = prefs.edit();
-                prefsEditor.putInt(ACRA.PREF_LAST_VERSION_NR, packageInfo.versionCode);
-                prefsEditor.commit();
-            }
+        final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(context,  config);
+        if (config.deleteOldUnsentReportsOnApplicationStart()) {
+            startupProcessor.deleteUnsentReportsFromOldAppVersion();
         }
-
-        ReportingInteractionMode reportingInteractionMode = ACRA.getConfig().mode();
-
-        if ((reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG)
-            && ACRA.getConfig().deleteUnapprovedReportsOnApplicationStart()) {
-            // NOTIFICATION or DIALOG mode, and there are unapproved reports to
-            // send (latest notification/dialog has been ignored: neither
-            // accepted
-            // nor refused). The application developer has decided that
-            // these reports should not be renotified ==> destroy them all but
-            // one.
-            deletePendingNonApprovedReports(true);
+        if (config.deleteUnapprovedReportsOnApplicationStart()) {
+            startupProcessor.deleteAllUnapprovedReportsBarOne();
         }
-
-        final CrashReportFinder reportFinder = new CrashReportFinder(mContext);
-        String[] filesList = reportFinder.getCrashReportFiles();
-
-        if (filesList != null && filesList.length > 0) {
-            // Immediately send reports for SILENT and TOAST modes.
-            // Immediately send reports in NOTIFICATION mode only if they are
-            // all silent or approved.
-            // If there is still one unapproved report in NOTIFICATION mode,
-            // notify it.
-            // If there are unapproved reports in DIALOG mode, show the dialog
-
-
-            final boolean onlySilentOrApprovedReports = containsOnlySilentOrApprovedReports(filesList);
-
-            if (reportingInteractionMode == ReportingInteractionMode.SILENT
-                || reportingInteractionMode == ReportingInteractionMode.TOAST
-                || (onlySilentOrApprovedReports && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG))) {
-
-                if (reportingInteractionMode == ReportingInteractionMode.TOAST && !onlySilentOrApprovedReports) {
-                    // Display the Toast in TOAST mode only if there are
-                    // non-silent reports.
-                    ToastSender.sendToast(mContext, ACRA.getConfig().resToastText(), Toast.LENGTH_LONG);
-                }
-
-                ACRA.log.v(LOG_TAG, "About to start ReportSenderWorker from #checkReportOnApplicationStart");
-                startSendingReports(false, false);
-            }
-
+        if (reportExecutor.isEnabled()) {
+            startupProcessor.sendApprovedReports();
         }
     }
 
-    /**
-     * Delete all pending non approved reports.
-     *
-     * @param keepOne
-     *            If you need to keep the latest report, set this to true.
-     */
-    void deletePendingNonApprovedReports(boolean keepOne) {
-        // In NOTIFICATION AND DIALOG mode, we have to keep the latest report
-        // which
-        // has been written before killing the app.
-        final int nbReportsToKeep = keepOne ? 1 : 0;
-        deletePendingReports(false, true, nbReportsToKeep);
-    }
-
     /**
      * Send a report for a {@link Throwable} with the reporting interaction mode
      * configured by the developer.
@@ -629,12 +325,13 @@ void deletePendingNonApprovedReports(boolean keepOne) {
      */
     @SuppressWarnings("unused")
     public void handleException(Throwable e, boolean endApplication) {
-        final ReportBuilder builder = reportBuilder()
-            .exception(e);
+        performDeprecatedReportPriming();
+        final ReportBuilder builder = new ReportBuilder();
+        builder.exception(e);
         if (endApplication) {
-            builder.endsApplication();
+            builder.endApplication();
         }
-        builder.send();
+        builder.build(reportExecutor);
     }
 
     /**
@@ -648,498 +345,30 @@ public void handleException(Throwable e, boolean endApplication) {
      */
     @SuppressWarnings("unused")
     public void handleException(Throwable e) {
-        reportBuilder()
-            .exception(e)
-            .send();
-    }
-
-    /**
-     * Creates a new crash report builder
-     *
-     * @return the newly created {@code ReportBuilder}
-     */
-    public ReportBuilder reportBuilder() {
-        return new ReportBuilder();
-    }
-
-    /**
-     * Helps manage
-     */
-    private static class TimeHelper {
-
-        private Long initialTimeMillis;
-
-        public void setInitialTimeMillis(long initialTimeMillis) {
-            this.initialTimeMillis = initialTimeMillis;
-        }
-
-        /**
-         * @return 0 if the initial time has yet to be set otherwise returns the difference between now and the initial time.
-         */
-        public long getElapsedTime() {
-            return (initialTimeMillis == null) ? 0 : System.currentTimeMillis() - initialTimeMillis;
-        }
+        handleException(e, false);
     }
 
     /**
-     * Try to send a report, if an error occurs stores a report file for a later
-     * attempt.
-     *
-     * @param reportBuilder The report builder used to assemble the report
+     * This method is only here to support the deprecated {@link ExceptionHandlerInitializer} mechanism
+     * for adding additional data to a crash report.
      */
-    private void report(final ReportBuilder reportBuilder) {
-
-        if (!enabled) {
-            return;
-        }
-
+    private void performDeprecatedReportPriming() {
         try {
             exceptionHandlerInitializer.initializeExceptionHandler(this);
         } catch (Exception exceptionInRunnable) {
-            ACRA.log.d(LOG_TAG, "Failed to initlize " + exceptionHandlerInitializer + " from #handleException");
-        }
-
-        boolean sendOnlySilentReports = false;
-        ReportingInteractionMode reportingInteractionMode;
-        if (!reportBuilder.mForceSilent) {
-            // No interaction mode defined, we assume it has been set during
-            // ACRA.initACRA()
-            reportingInteractionMode = ACRA.getConfig().mode();
-        } else {
-            reportingInteractionMode = ReportingInteractionMode.SILENT;
-
-            // An interaction mode has been provided. If ACRA has been
-            // initialized with a non SILENT mode and this mode is overridden
-            // with SILENT, then we have to send only reports which have been
-            // explicitly declared as silent via handleSilentException().
-            if (ACRA.getConfig().mode() != ReportingInteractionMode.SILENT) {
-                sendOnlySilentReports = true;
-            }
-        }
-
-        final boolean shouldDisplayToast = reportingInteractionMode == ReportingInteractionMode.TOAST
-            || (ACRA.getConfig().resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
-
-        final TimeHelper sentToastTimeMillis = new TimeHelper();
-        if (shouldDisplayToast) {
-            new Thread() {
-
-                /*
-                 * (non-Javadoc)
-                 *
-                 * @see java.lang.Thread#run()
-                 */
-                @Override
-                public void run() {
-                    Looper.prepare();
-                    ToastSender.sendToast(mContext, ACRA.getConfig().resToastText(), Toast.LENGTH_LONG);
-                    sentToastTimeMillis.setInitialTimeMillis(System.currentTimeMillis());
-                    Looper.loop();
-                }
-
-            }.start();
-
-            // We will wait a few seconds at the end of the method to be sure
-            // that the Toast can be read by the user.
-        }
-
-        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(reportBuilder.mMessage,
-                                                                                       reportBuilder.mException, reportBuilder.mCustomData,
-                                                                                       reportBuilder.mForceSilent, reportBuilder.mUncaughtExceptionThread);
-
-        // Always write the report file
-
-        final String reportFileName = getReportFileName(crashReportData);
-        saveCrashReportFile(reportFileName, crashReportData);
-
-        if (reportBuilder.mEndsApplication && !ACRA.getConfig().sendReportsAtShutdown()) {
-            endApplication(reportBuilder.mUncaughtExceptionThread, reportBuilder.mException);
-        }
-
-        SendWorker sender = null;
-
-        if (reportingInteractionMode == ReportingInteractionMode.SILENT
-            || reportingInteractionMode == ReportingInteractionMode.TOAST
-            || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
-
-            // Approve and then send reports now
-            ACRA.log.d(LOG_TAG, "About to start ReportSenderWorker from #handleException");
-            sender = startSendingReports(sendOnlySilentReports, true);
-            if ((reportingInteractionMode == ReportingInteractionMode.SILENT) && !reportBuilder.mEndsApplication) {
-                // Report is being sent silently and the application is not ending.
-                // So no need to wait around for the sender to complete.
-                return;
-            }
-
-        } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
-            ACRA.log.d(LOG_TAG, "Creating Notification.");
-            createNotification(reportFileName, reportBuilder);
+            ACRA.log.w(LOG_TAG, "Failed to initialize " + exceptionHandlerInitializer + " from #handleException");
         }
-
-        toastWaitEnded = true;
-        if (shouldDisplayToast) {
-            // A toast is being displayed, we have to wait for its end before doing anything else.
-            // The toastWaitEnded flag will be checked before any other operation.
-            toastWaitEnded = false;
-            new Thread() {
-
-                @Override
-                public void run() {
-                    ACRA.log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
-                        + " millis from " + sentToastTimeMillis.initialTimeMillis
-                        + " currentMillis=" + System.currentTimeMillis());
-                    while (sentToastTimeMillis.getElapsedTime() < ACRAConstants.TOAST_WAIT_DURATION) {
-                        try {
-                            // Wait a bit to let the user read the toast
-                            Thread.sleep(100);
-                        } catch (InterruptedException e1) {
-                            ACRA.log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
-                        }
-                    }
-                    toastWaitEnded = true;
-                }
-            }.start();
-        }
-
-        // Start an AsyncTask waiting for the end of the sender.
-        // Once sent, call endApplication() if reportBuilder.mEndApplication
-        final SendWorker worker = sender;
-        final boolean showDirectDialog = (reportingInteractionMode == ReportingInteractionMode.DIALOG)
-            && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
-
-        new Thread() {
-
-            @Override
-            public void run() {
-                // We have to wait for the toast display to be completed.
-                ACRA.log.d(LOG_TAG, "Waiting for Toast");
-                while (!toastWaitEnded) {
-                    try {
-                        Thread.sleep(100);
-                    } catch (InterruptedException e1) {
-                        ACRA.log.d(LOG_TAG, "Error : ", e1);
-                    }
-                }
-                ACRA.log.d(LOG_TAG, "Finished waiting for Toast");
-
-                // We have to wait for the worker job to be completed.
-                if (worker != null) {
-                    ACRA.log.d(LOG_TAG, "Waiting for Worker");
-                    while (worker.isAlive()) {
-                        try {
-                            Thread.sleep(100);
-                        } catch (InterruptedException e1) {
-                            ACRA.log.d(LOG_TAG, "Error : ", e1);
-                        }
-                    }
-                    ACRA.log.d(LOG_TAG, "Finished waiting for Worker");
-                }
-
-                if (showDirectDialog) {
-                    // Create a new activity task with the confirmation dialog.
-                    // This new task will be persisted on application restart
-                    // right after its death.
-                    ACRA.log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFileName);
-                    final Intent dialogIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
-                    dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                    mContext.startActivity(dialogIntent);
-                }
-
-                ACRA.log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.mEndsApplication);
-
-                if (reportBuilder.mEndsApplication) {
-                    endApplication(reportBuilder.mUncaughtExceptionThread, reportBuilder.mException);
-                }
-            }
-        }.start();
     }
 
-    /**
-     * Creates an Intent that can be used to create and show a CrashReportDialog.
-     *
-     * @param reportFileName    Name of the error report to display in the crash report dialog.
-     * @param reportBuilder     ReportBuilder containing the details of the crash.
-     */
-    private Intent createCrashReportDialogIntent(String reportFileName, ReportBuilder reportBuilder) {
-        ACRA.log.d(LOG_TAG, "Creating DialogIntent for " + reportFileName + " exception=" + reportBuilder.mException);
-        final Intent dialogIntent = new Intent(mContext, ACRA.getConfig().reportDialogClass());
-        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME, reportFileName);
-        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION, reportBuilder.mException);
-        return dialogIntent;
-    }
-
-
-    /**
-     * Creates a status bar notification.
-     *
-     * The action triggered when the notification is selected is to start the
-     * {@link CrashReportDialog} Activity.
-     *
-     * @param reportFileName Name of the report file to send.
-     */
-    private void createNotification(String reportFileName, ReportBuilder reportBuilder) {
-
-        final NotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
-
-        final ReportsCrashes conf = ACRA.getConfig();
-
-        // Default notification icon is the warning symbol
-        final int icon = conf.resNotifIcon();
-
-        final CharSequence tickerText = mContext.getText(conf.resNotifTickerText());
-        final long when = System.currentTimeMillis();
-        final Notification notification = new Notification(icon, tickerText, when);
-
-        final CharSequence contentTitle = mContext.getText(conf.resNotifTitle());
-        final CharSequence contentText = mContext.getText(conf.resNotifText());
-
-        ACRA.log.d(LOG_TAG, "Creating Notification for " + reportFileName);
-        final Intent crashReportDialogIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
-        final PendingIntent contentIntent = PendingIntent.getActivity(mContext, mNotificationCounter++, crashReportDialogIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-
-        notification.setLatestEventInfo(mContext, contentTitle, contentText, contentIntent);
-        notification.flags = notification.flags | Notification.FLAG_AUTO_CANCEL;
-
-        // The deleteIntent is invoked when the user swipes away the Notification.
-        // In this case we invoke the CrashReportDialog with EXTRA_FORCE_CANCEL==true
-        // which will cause BaseCrashReportDialog to clear the crash report and finish itself.
-        final Intent deleteIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
-        deleteIntent.putExtra(ACRAConstants.EXTRA_FORCE_CANCEL, true);
-        notification.deleteIntent = PendingIntent.getActivity(mContext, -1, deleteIntent, 0);
-
-        // Send new notification
-        notificationManager.notify(ACRAConstants.NOTIF_CRASH_ID, notification);
-    }
-
-    private String getReportFileName(CrashReportData crashData) {
-        final Time now = new Time();
-        now.setToNow();
-        final long timestamp = now.toMillis(false);
-        final String isSilent = crashData.getProperty(IS_SILENT);
-        return "" + timestamp + (isSilent != null ? ACRAConstants.SILENT_SUFFIX : "")
-            + ACRAConstants.REPORTFILE_EXTENSION;
-    }
-
-    /**
-     * When a report can't be sent, it is saved here in a file in the root of
-     * the application private directory.
-     *
-     * @param fileName
-     *            In a few rare cases, we write the report again with additional
-     *            data (user comment for example). In such cases, you can
-     *            provide the already existing file name here to overwrite the
-     *            report file. If null, a new file report will be generated
-     * @param crashData
-     *            Can be used to save an alternative (or previously generated)
-     *            report data. Used to store again a report with the addition of
-     *            user comment. If null, the default current crash data are
-     *            used.
-     */
-    private void saveCrashReportFile(String fileName, CrashReportData crashData) {
+    private static ReportPrimer getReportPrimer(ACRAConfig config) {
         try {
-            ACRA.log.d(LOG_TAG, "Writing crash report file " + fileName + ".");
-            final CrashReportPersister persister = new CrashReportPersister(mContext);
-            persister.store(crashData, fileName);
-        } catch (Exception e) {
-            ACRA.log.e(LOG_TAG, "An error occurred while writing the report file...", e);
-        }
-    }
-
-    /**
-     * Delete pending reports.
-     *
-     * @param deleteApprovedReports
-     *            Set to true to delete approved and silent reports.
-     * @param deleteNonApprovedReports
-     *            Set to true to delete non approved/silent reports.
-     * @param nbOfLatestToKeep
-     *            Number of pending reports to retain.
-     */
-    private void deletePendingReports(boolean deleteApprovedReports, boolean deleteNonApprovedReports,
-                                      int nbOfLatestToKeep) {
-        // TODO Check logic and instances where nbOfLatestToKeep = X, because
-        // that might stop us from deleting any reports.
-        final CrashReportFinder reportFinder = new CrashReportFinder(mContext);
-        final String[] filesList = reportFinder.getCrashReportFiles();
-        Arrays.sort(filesList);
-        for (int iFile = 0; iFile < filesList.length - nbOfLatestToKeep; iFile++) {
-            final String fileName = filesList[iFile];
-            final boolean isReportApproved = fileNameParser.isApproved(fileName);
-            if ((isReportApproved && deleteApprovedReports) || (!isReportApproved && deleteNonApprovedReports)) {
-                final File fileToDelete = new File(mContext.getFilesDir(), fileName);
-                ACRA.log.d(LOG_TAG, "Deleting file " + fileName);
-                if (!fileToDelete.delete()) {
-                    ACRA.log.e(LOG_TAG, "Could not delete report : " + fileToDelete);
-                }
-            }
-        }
-    }
-
-    /**
-     * Checks if an array of reports files names contains only silent or
-     * approved reports.
-     *
-     * @param reportFileNames
-     *            Array of report locations to check.
-     * @return True if there are only silent or approved reports. False if there
-     *         is at least one non-approved report.
-     */
-    private boolean containsOnlySilentOrApprovedReports(String[] reportFileNames) {
-        for (String reportFileName : reportFileNames) {
-            if (!fileNameParser.isApproved(reportFileName)) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    /**
-     * Sets relevant ReportSenders to the ErrorReporter, replacing any
-     * previously set ReportSender.
-     */
-    public void setDefaultReportSenders() {
-        ReportsCrashes conf = ACRA.getConfig();
-        Application mApplication = ACRA.getApplication();
-        removeAllReportSenders();
-
-        // Try to send by mail. If a mailTo address is provided, do not add
-        // other senders.
-        if (!"".equals(conf.mailTo())) {
-            ACRA.log.w(LOG_TAG, mApplication.getPackageName() + " reports will be sent by email (if accepted by user).");
-            setReportSender(new EmailIntentSender(mApplication));
-            return;
+            return config.reportPrimerClass().newInstance();
+        } catch (InstantiationException e) {
+            ACRA.log.w(LOG_TAG, "Could not construct ReportPrimer from " + config.reportPrimerClass() + " - not priming", e);
+        } catch (IllegalAccessException e) {
+            ACRA.log.w(LOG_TAG, "Could not construct ReportPrimer from " + config.reportPrimerClass() + " - not priming", e);
         }
 
-        final PackageManagerWrapper pm = new PackageManagerWrapper(mApplication);
-        if (!pm.hasPermission(permission.INTERNET)) {
-            // NB If the PackageManager has died then this will erroneously log
-            // the error that the App doesn't have Internet (even though it
-            // does).
-            // I think that is a small price to pay to ensure that ACRA doesn't
-            // crash if the PackageManager has died.
-            ACRA.log.e(LOG_TAG,
-                  mApplication.getPackageName()
-                      + " should be granted permission "
-                      + permission.INTERNET
-                      + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @ReportsCrashes(mailTo=\"your.account@domain.com\"");
-            return;
-        }
-
-        // If formUri is set, instantiate a sender for a generic HTTP POST form
-        // with default mapping.
-        if (conf.formUri() != null && !"".equals(conf.formUri())) {
-            setReportSender(new HttpSender(ACRA.getConfig().httpMethod(), ACRA.getConfig().reportType(), null));
-        }
-    }
-
-    /**
-     * Fluent API used to assemble the different options used for a crash report
-     */
-    public final class ReportBuilder {
-
-        private String mMessage;
-        private Thread mUncaughtExceptionThread;
-        private Throwable mException;
-        private Map<String, String> mCustomData;
-
-        private boolean mForceSilent = false;
-        private boolean mEndsApplication = false;
-
-        /**
-         * Set the error message to be reported.
-         *
-         * @param msg the error message
-         * @return the updated {@code ReportBuilder}
-         */
-        public ReportBuilder message(String msg) {
-            mMessage = msg;
-            return this;
-        }
-
-        /**
-         * Sets the Thread on which an uncaught Exception occurred.
-         *
-         * @param thread    Thread on which an uncaught Exception occurred.
-         * @return the updated {@code ReportBuilder}
-         */
-        private ReportBuilder uncaughtExceptionThread(Thread thread) {
-            mUncaughtExceptionThread = thread;
-            return this;
-        }
-
-        /**
-         * Set the stack trace to be reported
-         *
-         * @param e The exception that should be associated with this report
-         * @return the updated {@code ReportBuilder}
-         */
-        public ReportBuilder exception(Throwable e) {
-            mException = e;
-            return this;
-        }
-
-        private void initCustomData() {
-            if (mCustomData ==  null)
-                mCustomData = new HashMap<String, String>();
-        }
-
-        /**
-         * Sets additional values to be added to {@code CUSTOM_DATA}. Values
-         * specified here take precedence over globally specified custom data.
-         *
-         * @param customData a map of custom key-values to be attached to the report
-         * @return the updated {@code ReportBuilder}
-         */
-        @SuppressWarnings("unused")
-        public ReportBuilder customData(Map<String, String> customData) {
-            initCustomData();
-            mCustomData.putAll(customData);
-            return this;
-        }
-
-        /**
-         * Sets an additional value to be added to {@code CUSTOM_DATA}. The value
-         * specified here takes precedence over globally specified custom data.
-         *
-         * @param key the key identifying the custom data
-         * @param value the value for the custom data entry
-         * @return the updated {@code ReportBuilder}
-         */
-        @SuppressWarnings("unused")
-        public ReportBuilder customData(String key, String value) {
-            initCustomData();
-            mCustomData.put(key, value);
-            return this;
-        }
-
-        /**
-         * Forces the report to be sent silently, ignoring the default interaction mode set in the config
-         *
-         * @return the updated {@code ReportBuilder}
-         */
-        public ReportBuilder forceSilent() {
-            mForceSilent = true;
-            return this;
-        }
-
-        /**
-         * Ends the application after sending the crash report
-         *
-         * @return the updated {@code ReportBuilder}
-         */
-        public ReportBuilder endsApplication() {
-            mEndsApplication = true;
-            return this;
-        }
-
-        /**
-         * Assembles and sends the crash report
-         */
-        public void send() {
-            if (mMessage == null && mException == null) {
-                mMessage = "Report requested by developer";
-            }
-            report(this);
-        }
+        return new NoOpReportPrimer();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/org/acra/ExceptionHandlerInitializer.java b/src/main/java/org/acra/ExceptionHandlerInitializer.java
index fc532bb9..4e48616c 100644
--- a/src/main/java/org/acra/ExceptionHandlerInitializer.java
+++ b/src/main/java/org/acra/ExceptionHandlerInitializer.java
@@ -7,6 +7,7 @@
  * exception is handled.
  * 
  * @see ErrorReporter#setExceptionHandlerInitializer(ExceptionHandlerInitializer)
+ * @deprecated since 4.8.0 use {@link org.acra.builder.ReportPrimer} mechanism instead.
  */
 public interface ExceptionHandlerInitializer {
     /**
diff --git a/src/main/java/org/acra/ReportField.java b/src/main/java/org/acra/ReportField.java
index 3815b11b..637d341f 100644
--- a/src/main/java/org/acra/ReportField.java
+++ b/src/main/java/org/acra/ReportField.java
@@ -27,7 +27,7 @@
  */
 public enum ReportField {
     /**
-     * Report Identifier
+     * Report Identifier.
      */
     REPORT_ID,
     /**
diff --git a/src/main/java/org/acra/SendWorker.java b/src/main/java/org/acra/SendWorker.java
deleted file mode 100644
index 1a90da9a..00000000
--- a/src/main/java/org/acra/SendWorker.java
+++ /dev/null
@@ -1,212 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import static org.acra.ACRA.LOG_TAG;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-
-import org.acra.collector.CrashReportData;
-import org.acra.sender.ReportSender;
-import org.acra.sender.ReportSenderException;
-
-import android.content.Context;
-
-/**
- * Checks and send reports on a separate Thread.
- * 
- * @author Kevin Gaudin
- */
-final class SendWorker extends Thread {
-
-    private final Context context;
-    private final boolean sendOnlySilentReports;
-    private final boolean approvePendingReports;
-    private final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
-    private final List<ReportSender> reportSenders;
-
-    /**
-     * Creates a new {@link SendWorker} to try sending pending reports.
-     * 
-     * @param context
-     *            ApplicationContext in which the reports are being sent.
-     * @param reportSenders
-     *            List of ReportSender to use to send the crash reports.
-     * @param sendOnlySilentReports
-     *            If set to true, will send only reports which have been
-     *            explicitly declared as silent by the application developer.
-     * @param approvePendingReports
-     *            if this endWorker should approve pending reports before
-     *            sending any reports.
-     */
-    public SendWorker(Context context, List<ReportSender> reportSenders, boolean sendOnlySilentReports,
-            boolean approvePendingReports) {
-        this.context = context;
-        this.reportSenders = reportSenders;
-        this.sendOnlySilentReports = sendOnlySilentReports;
-        this.approvePendingReports = approvePendingReports;
-    }
-
-    /*
-     * (non-Javadoc)
-     * 
-     * @see java.lang.Thread#run()
-     */
-    @Override
-    public void run() {
-        if (approvePendingReports) {
-            approvePendingReports();
-        }
-        checkAndSendReports(context, sendOnlySilentReports);
-    }
-
-    /**
-     * Flag all pending reports as "approved" by the user. These reports can be
-     * sent.
-     */
-    private void approvePendingReports() {
-        ACRA.log.d(LOG_TAG, "Mark all pending reports as approved.");
-
-        final CrashReportFinder reportFinder = new CrashReportFinder(context);
-        final String[] reportFileNames = reportFinder.getCrashReportFiles();
-
-        for (String reportFileName : reportFileNames) {
-            if (!fileNameParser.isApproved(reportFileName)) {
-                final File reportFile = new File(context.getFilesDir(), reportFileName);
-
-                // TODO look into how this could cause a file to go from
-                // -approved.stacktrace to -approved-approved.stacktrace
-                final String newName = reportFileName.replace(ACRAConstants.REPORTFILE_EXTENSION,
-                        ACRAConstants.APPROVED_SUFFIX + ACRAConstants.REPORTFILE_EXTENSION);
-
-                // TODO Look into whether rename is atomic. Is there a better
-                // option?
-                final File newFile = new File(context.getFilesDir(), newName);
-                if (!reportFile.renameTo(newFile)) {
-                    ACRA.log.e(LOG_TAG, "Could not rename approved report from " + reportFile + " to " + newFile);
-                }
-            }
-        }
-    }
-
-    /**
-     * Send pending reports.
-     * 
-     * @param context
-     *            The application context.
-     * @param sendOnlySilentReports
-     *            Send only reports explicitly declared as SILENT by the
-     *            developer (sent via
-     *            {@link ErrorReporter#handleSilentException(Throwable)}.
-     */
-    private void checkAndSendReports(Context context, boolean sendOnlySilentReports) {
-        ACRA.log.d(LOG_TAG, "#checkAndSendReports - start");
-        final CrashReportFinder reportFinder = new CrashReportFinder(context);
-        final String[] reportFiles = reportFinder.getCrashReportFiles();
-        Arrays.sort(reportFiles);
-
-        int reportsSentCount = 0;
-
-        for (String curFileName : reportFiles) {
-            if (sendOnlySilentReports && !fileNameParser.isSilent(curFileName)) {
-                continue;
-            }
-
-            if (reportsSentCount >= ACRAConstants.MAX_SEND_REPORTS) {
-                break; // send only a few reports to avoid overloading the
-                       // network
-            }
-
-            ACRA.log.i(LOG_TAG, "Sending file " + curFileName);
-            try {
-                final CrashReportPersister persister = new CrashReportPersister(context);
-                final CrashReportData previousCrashReport = persister.load(curFileName);
-                sendCrashReport(previousCrashReport);
-                deleteFile(context, curFileName);
-            } catch (RuntimeException e) {
-                ACRA.log.e(LOG_TAG, "Failed to send crash reports for " + curFileName, e);
-                deleteFile(context, curFileName);
-                break; // Something really unexpected happened. Don't try to
-                       // send any more reports now.
-            } catch (IOException e) {
-                ACRA.log.e(LOG_TAG, "Failed to load crash report for " + curFileName, e);
-                deleteFile(context, curFileName);
-                break; // Something unexpected happened when reading the crash
-                       // report. Don't try to send any more reports now.
-            } catch (ReportSenderException e) {
-                ACRA.log.e(LOG_TAG, "Failed to send crash report for " + curFileName, e);
-                // An issue occurred while sending this report but we can still try to
-                // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
-                // so there's not much to fear about overloading a failing server.
-            }
-            reportsSentCount++;
-        }
-        ACRA.log.d(LOG_TAG, "#checkAndSendReports - finish");
-    }
-
-    /**
-     * Sends the report with all configured ReportSenders. If at least one
-     * sender completed its job, the report is considered as sent and will not
-     * be sent again for failing senders.
-     * 
-     * @param errorContent
-     *            Crash data.
-     * @throws ReportSenderException
-     *             if unable to send the crash report.
-     */
-    private void sendCrashReport(CrashReportData errorContent) throws ReportSenderException {
-        if (!ACRA.isDebuggable() || ACRA.getConfig().sendReportsInDevMode()) {
-            boolean sentAtLeastOnce = false;
-            ReportSenderException sendFailure = null;
-            String failedSender = null;
-            for (ReportSender sender : reportSenders) {
-                try {
-                    ACRA.log.d(LOG_TAG, "Sending report using " + sender.getClass().getName());
-                    sender.send(context, errorContent);
-                    ACRA.log.d(LOG_TAG, "Sent report using " + sender.getClass().getName());
-
-                    // If at least one sender worked, don't re-send the report later.
-                    sentAtLeastOnce = true;
-                } catch (ReportSenderException e) {
-                    sendFailure = e;
-                    failedSender = sender.getClass().getName();
-                }
-            }
-
-            if (sendFailure != null) {
-                // We had some failure
-                if (!sentAtLeastOnce) {
-                    throw sendFailure; // Don't log here because we aren't dealing with the Exception here.
-                } else {
-                    ACRA.log.w(LOG_TAG,
-                               "ReportSender of class "
-                                   + failedSender
-                                   + " failed but other senders completed their task. ACRA will not send this report again.");
-                }
-            }
-        }
-    }
-
-    private void deleteFile(Context context, String fileName) {
-        final boolean deleted = context.deleteFile(fileName);
-        if (!deleted) {
-            ACRA.log.w(LOG_TAG, "Could not delete error report : " + fileName);
-        }
-    }
-}
diff --git a/src/main/java/org/acra/annotation/ReportsCrashes.java b/src/main/java/org/acra/annotation/ReportsCrashes.java
index d4683609..c0441c10 100644
--- a/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -24,16 +24,20 @@
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
-import org.acra.BaseCrashReportDialog;
-import org.acra.CrashReportDialog;
+import org.acra.builder.NoOpReportPrimer;
+import org.acra.builder.ReportPrimer;
+import org.acra.dialog.BaseCrashReportDialog;
+import org.acra.dialog.CrashReportDialog;
 import org.acra.ReportField;
 import org.acra.ReportingInteractionMode;
+import org.acra.sender.DefaultReportSenderFactory;
 import org.acra.sender.HttpSender.Method;
 import org.acra.sender.HttpSender.Type;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
+import org.acra.sender.ReportSenderFactory;
 
 /**
  * Provide configuration elements to the
@@ -396,17 +400,21 @@
     String mailTo() default ACRAConstants.DEFAULT_STRING_VALUE;
 
     /**
-     * Controls whether unapproved reports are deleted on application start or
-     * not. Default is true. This is a change from versions of ACRA before 3.2
-     * as in {@link ReportingInteractionMode#NOTIFICATION} mode reports were
-     * previously kept until the user explicitly opens the Notification dialog
-     * AND choose to send or discard the report. Until then, on application
-     * restart, ACRA was issuing a new crash notification for previous reports
-     * pending for approval. This could be misunderstood by the user with a new
-     * crash, resulting in bad appreciation of the application.
-     * 
-     * @return true if ACRA should delete unapproved reports on application
-     *         start.
+     * Controls whether unapproved reports are deleted on application start or not.
+     * Default is true.
+     *
+     * Silent and Toast reports are automatically approved.
+     * Dialog and Notification reports required explicit approval by the user before they are sent.
+     *
+     * On application restart the user is prompted with approval for any unsent reports.
+     * So you generally don't want to accumulate unapproved reports, otherwise you will prompt them multiple times.
+     *
+     * If this is set to true then all unapproved reports bar one will be deleted on application start.
+     * The last report is always retained because that is the report that probably just happened.
+     *
+     * If set to false then on restart the user will be prompted with approval for each unapproved report.
+     *
+     * @return true if ACRA should delete unapproved reports on application start.
      */
     boolean deleteUnapprovedReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
 
@@ -421,8 +429,7 @@
     boolean deleteOldUnsentReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
 
     /**
-     * @return Value in milliseconds for timeout attempting to connect to a
-     *         network (default 3000ms).
+     * @return Value in milliseconds for timeout attempting to connect to a network (default 5000ms).
      */
     int connectionTimeout() default ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
 
@@ -430,19 +437,10 @@
      * If the request is retried due to timeout, the socketTimeout will double
      * before retrying the request.
      * 
-     * @return Value in milliseconds for timeout receiving a response to a
-     *         network request (default 5000ms).
-     * @see #maxNumberOfRequestRetries()
+     * @return Value in milliseconds for timeout receiving a response to a network request (default 8000ms).
      */
     int socketTimeout() default ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
 
-    /**
-     * @return Maximum number of times a network request will be retried when
-     *         receiving the response times out (default 3).
-     * @see #socketTimeout()
-     */
-    int maxNumberOfRequestRetries() default ACRAConstants.DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES;
-
     /**
      * In {@link ReportingInteractionMode#TOAST} mode, set this to true if you
      * prefer displaying the native Force Close dialog after the Toast.
@@ -512,6 +510,16 @@
      */
     Class buildConfigClass() default Object.class;
 
+    /**
+     * The default {@link org.acra.sender.ReportSenderFactory} creates an {@link org.acra.sender.EmailIntentSender}
+     * if the 'mailTo' parameter is defined or an {@link org.acra.sender.HttpSender} if the 'formUri' parameter
+     * is defined (and internet permission has been granted.
+     *
+     * @return List of the {@link org.acra.sender.ReportSenderFactory} with which to construct the
+     *         {@link org.acra.sender.ReportSender}s that will send the crash reports.
+     */
+    Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() default {DefaultReportSenderFactory.class};
+
     /**
      * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
      * path/name of your application log file. If the string does not contain
@@ -534,23 +542,15 @@
     int applicationLogFileLines() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
 
     /**
-     * <p>
-     * Set this to true if you need to post reports to your own server using an
-     * SSL connection with a self-signed certificate.
-     * </p>
-     * 
-     * @return True if SSL certificates validation has to be ignored when
-     *         posting reports.
+     * @return Class for the CrashReportDialog used when prompting the user for crash details.
+     *          If not provided, defaults to CrashReportDialog.class
      */
-    boolean disableSSLCertValidation() default ACRAConstants.DEFAULT_DISABLE_SSL_CERT_VALIDATION;
-
-    String httpsSocketFactoryFactoryClass() default ACRAConstants.DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS;
+    Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
 
     /**
-     * @return Class for the CrashReportDialog used when sending intent.
-     *  If not provided, defaults to CrashReportDialog.class
+     * @return Class that is ued to provide any extra details for a crash.
      */
-    Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
+    Class<? extends ReportPrimer> reportPrimerClass() default NoOpReportPrimer.class;
 
     /**
      * <p>
diff --git a/src/main/java/org/acra/builder/LastActivityManager.java b/src/main/java/org/acra/builder/LastActivityManager.java
new file mode 100644
index 00000000..9faa5ee0
--- /dev/null
+++ b/src/main/java/org/acra/builder/LastActivityManager.java
@@ -0,0 +1,80 @@
+package org.acra.builder;
+
+import android.app.Activity;
+import android.app.Application;
+import android.os.Bundle;
+import org.acra.ACRA;
+import org.acra.collector.Compatibility;
+import org.acra.dialog.BaseCrashReportDialog;
+import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat;
+import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper;
+
+import java.lang.ref.WeakReference;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for tracking the last Activity other than any CrashReport dialog that was created.
+ *
+ * @since 4.8.0
+ */
+public final class LastActivityManager {
+
+    private WeakReference<Activity> lastActivityCreated = new WeakReference<Activity>(null);
+
+    public LastActivityManager(Application application) {
+        if (Compatibility.getAPILevel() >= Compatibility.VERSION_CODES.ICE_CREAM_SANDWICH) {
+
+            // ActivityLifecycleCallback only available for API14+
+            ApplicationHelper.registerActivityLifecycleCallbacks(application, new ActivityLifecycleCallbacksCompat() {
+                @Override
+                public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityCreated " + activity.getClass());
+                    if (!(activity instanceof BaseCrashReportDialog)) {
+                        // Ignore CrashReportDialog because we want the last
+                        // application Activity that was started so that we can explicitly kill it off.
+                        lastActivityCreated = new WeakReference<Activity>(activity);
+                    }
+                }
+
+                @Override
+                public void onActivityStarted(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStarted " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityResumed(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityResumed " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityPaused(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityPaused " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityStopped(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStopped " + activity.getClass());
+                }
+
+                @Override
+                public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityDestroyed(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityDestroyed " + activity.getClass());
+                }
+            });
+        }
+    }
+
+    public Activity getLastActivity() {
+        return lastActivityCreated.get();
+    }
+
+    public void clearLastActivity() {
+        lastActivityCreated.clear();
+    }
+}
diff --git a/src/main/java/org/acra/builder/NoOpReportPrimer.java b/src/main/java/org/acra/builder/NoOpReportPrimer.java
new file mode 100644
index 00000000..586ac940
--- /dev/null
+++ b/src/main/java/org/acra/builder/NoOpReportPrimer.java
@@ -0,0 +1,16 @@
+package org.acra.builder;
+
+import android.content.Context;
+
+/**
+ * Does not perform any priming for the current report.
+ *
+ * @since 4.8.0
+ */
+public final class NoOpReportPrimer implements ReportPrimer {
+
+    @Override
+    public void primeReport(Context context, ReportBuilder builder) {
+        // Nothing to do.
+    }
+}
diff --git a/src/main/java/org/acra/builder/ReportBuilder.java b/src/main/java/org/acra/builder/ReportBuilder.java
new file mode 100644
index 00000000..a59df80a
--- /dev/null
+++ b/src/main/java/org/acra/builder/ReportBuilder.java
@@ -0,0 +1,136 @@
+package org.acra.builder;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Fluent API used to assemble the different options used for a crash report.
+ *
+ * @since 4.8.0
+ */
+public final class ReportBuilder {
+
+    private String message;
+    private Thread uncaughtExceptionThread;
+    private Throwable exception;
+    private final Map<String, String> customData = new HashMap<String, String>();
+
+    private boolean sendSilently = false;
+    private boolean endApplication = false;
+
+    /**
+     * Set the error message to be reported.
+     *
+     * @param msg the error message
+     * @return the updated {@code ReportBuilder}
+     */
+    @SuppressWarnings( "unused" )
+    public ReportBuilder message(String msg) {
+        message = msg;
+        return this;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    /**
+     * Sets the Thread on which an uncaught Exception occurred.
+     *
+     * @param thread    Thread on which an uncaught Exception occurred.
+     * @return the updated {@code ReportBuilder}
+     */
+    public ReportBuilder uncaughtExceptionThread(Thread thread) {
+        uncaughtExceptionThread = thread;
+        return this;
+    }
+
+    public Thread getUncaughtExceptionThread() {
+        return uncaughtExceptionThread;
+    }
+
+    /**
+     * Set the stack trace to be reported
+     *
+     * @param e The exception that should be associated with this report
+     * @return the updated {@code ReportBuilder}
+     */
+    public ReportBuilder exception(Throwable e) {
+        exception = e;
+        return this;
+    }
+
+    public Throwable getException() {
+        return exception;
+    }
+
+    /**
+     * Sets additional values to be added to {@code CUSTOM_DATA}. Values
+     * specified here take precedence over globally specified custom data.
+     *
+     * @param customData a map of custom key-values to be attached to the report
+     * @return the updated {@code ReportBuilder}
+     */
+    @SuppressWarnings("unused")
+    public ReportBuilder customData(Map<String, String> customData) {
+        this.customData.putAll(customData);
+        return this;
+    }
+
+    /**
+     * Sets an additional value to be added to {@code CUSTOM_DATA}. The value
+     * specified here takes precedence over globally specified custom data.
+     *
+     * @param key the key identifying the custom data
+     * @param value the value for the custom data entry
+     * @return the updated {@code ReportBuilder}
+     */
+    @SuppressWarnings("unused")
+    public ReportBuilder customData(String key, String value) {
+        customData.put(key, value);
+        return this;
+    }
+
+    public Map<String, String> getCustomData() {
+        return customData;
+    }
+
+    /**
+     * Forces the report to be sent silently, ignoring the default interaction mode set in the config
+     *
+     * @return the updated {@code ReportBuilder}
+     */
+    public ReportBuilder sendSilently() {
+        sendSilently = true;
+        return this;
+    }
+
+    public boolean isSendSilently() {
+        return sendSilently;
+    }
+
+    /**
+     * Ends the application after sending the crash report
+     *
+     * @return the updated {@code ReportBuilder}
+     */
+    public ReportBuilder endApplication() {
+        endApplication = true;
+        return this;
+    }
+
+    public boolean isEndApplication() {
+        return endApplication;
+    }
+
+    /**
+     * Assembles and sends the crash report
+     */
+    public void build(ReportExecutor reportExecutor) {
+        if (message == null && exception == null) {
+            message = "Report requested by developer";
+        }
+
+        reportExecutor.execute(this);
+    }
+}
diff --git a/src/main/java/org/acra/builder/ReportExecutor.java b/src/main/java/org/acra/builder/ReportExecutor.java
new file mode 100644
index 00000000..c1e80a38
--- /dev/null
+++ b/src/main/java/org/acra/builder/ReportExecutor.java
@@ -0,0 +1,413 @@
+package org.acra.builder;
+
+import android.app.Activity;
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Looper;
+import android.support.v4.app.NotificationCompat;
+import android.widget.Toast;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportingInteractionMode;
+import org.acra.collector.CrashReportData;
+import org.acra.collector.CrashReportDataFactory;
+import org.acra.file.CrashReportPersister;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.config.ACRAConfig;
+import org.acra.dialog.CrashReportDialog;
+import org.acra.file.ReportLocator;
+import org.acra.sender.SenderServiceStarter;
+import org.acra.util.ToastSender;
+
+import java.io.File;
+import java.util.Date;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.IS_SILENT;
+import static org.acra.ReportField.USER_CRASH_DATE;
+
+/**
+ * Collates, records and initiates the sending of a report.
+ *
+ * @since 4.8.0
+ */
+public final class ReportExecutor {
+
+    private final Context context;
+    private final ACRAConfig config;
+    private final CrashReportDataFactory crashReportDataFactory;
+    private final LastActivityManager lastActivityManager;
+
+    // A reference to the system's previous default UncaughtExceptionHandler
+    // kept in order to execute the default exception handling after sending the report.
+    private final Thread.UncaughtExceptionHandler defaultExceptionHandler;
+
+    private final ReportPrimer reportPrimer;
+
+    private boolean enabled = false;
+
+    // This is used to wait for the crash toast to end it's display duration before killing the Application.
+    // TODO make this a local variable. Only here because it cannot be non-final and referenced within an anonymous class.
+    private boolean toastWaitEnded = true;
+
+    /**
+     * Used to create a new (non-cached) PendingIntent each time a new crash occurs.
+     */
+    private static int mNotificationCounter = 0;
+
+    public ReportExecutor(Context context, ACRAConfig config, CrashReportDataFactory crashReportDataFactory, LastActivityManager lastActivityManager, Thread.UncaughtExceptionHandler defaultExceptionHandler, ReportPrimer reportPrimer) {
+        this.context = context;
+        this.config = config;
+        this.crashReportDataFactory = crashReportDataFactory;
+        this.lastActivityManager = lastActivityManager;
+        this.defaultExceptionHandler = defaultExceptionHandler;
+        this.reportPrimer = reportPrimer;
+    }
+
+    /**
+     * Helps manage
+     */
+    private static class TimeHelper {
+
+        private Long initialTimeMillis;
+
+        public void setInitialTimeMillis(long initialTimeMillis) {
+            this.initialTimeMillis = initialTimeMillis;
+        }
+
+        /**
+         * @return 0 if the initial time has yet to be set otherwise returns the difference between now and the initial time.
+         */
+        public long getElapsedTime() {
+            return (initialTimeMillis == null) ? 0 : System.currentTimeMillis() - initialTimeMillis;
+        }
+    }
+
+    public void handReportToDefaultExceptionHandler(Thread t, Throwable e) {
+        if (defaultExceptionHandler != null) {
+            ACRA.log.i(LOG_TAG, "ACRA is disabled for " + context.getPackageName()
+                    + " - forwarding uncaught Exception on to default ExceptionHandler");
+            defaultExceptionHandler.uncaughtException(t, e);
+        } else {
+            ACRA.log.e(LOG_TAG, "ACRA is disabled for " + context.getPackageName() + " - no default ExceptionHandler");
+            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+        }
+
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    /**
+     * Try to send a report, if an error occurs stores a report file for a later attempt.
+     *
+     * @param reportBuilder The report builder used to assemble the report
+     */
+    public void execute(final ReportBuilder reportBuilder) {
+
+        if (!enabled) {
+            ACRA.log.v(LOG_TAG, "ACRA is disabled. Report not sent.");
+            return;
+        }
+
+        // Prime this crash report with any extra data.
+        reportPrimer.primeReport(context, reportBuilder);
+
+        boolean sendOnlySilentReports = false;
+        final ReportingInteractionMode reportingInteractionMode;
+        if (!reportBuilder.isSendSilently()) {
+            // No interaction mode defined in the ReportBuilder, we assume it has been set during ACRA.initACRA()
+            reportingInteractionMode = config.mode();
+        } else {
+            reportingInteractionMode = ReportingInteractionMode.SILENT;
+
+            // An interaction mode has been provided. If ACRA has been
+            // initialized with a non SILENT mode and this mode is overridden
+            // with SILENT, then we have to send only reports which have been
+            // explicitly declared as silent via handleSilentException().
+            if (config.mode() != ReportingInteractionMode.SILENT) {
+                sendOnlySilentReports = true;
+            }
+        }
+
+        final boolean shouldDisplayToast = reportingInteractionMode == ReportingInteractionMode.TOAST
+                || (config.resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
+
+        final TimeHelper sentToastTimeMillis = new TimeHelper();
+        if (shouldDisplayToast) {
+            new Thread() {
+
+                /*
+                 * (non-Javadoc)
+                 *
+                 * @see java.lang.Thread#run()
+                 */
+                @Override
+                public void run() {
+                    Looper.prepare();
+                    ToastSender.sendToast(context, config.resToastText(), Toast.LENGTH_LONG);
+                    sentToastTimeMillis.setInitialTimeMillis(System.currentTimeMillis());
+                    Looper.loop();
+                }
+
+            }.start();
+
+            // We will wait a few seconds at the end of the method to be sure
+            // that the Toast can be read by the user.
+        }
+
+        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(reportBuilder);
+
+        // Always write the report file
+
+        final File reportFile = getReportFileName(crashReportData);
+        saveCrashReportFile(reportFile, crashReportData);
+
+        if (reportBuilder.isEndApplication() && !config.sendReportsAtShutdown()) {
+            endApplication(reportBuilder.getUncaughtExceptionThread(), reportBuilder.getException());
+        }
+
+        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
+        if (reportingInteractionMode == ReportingInteractionMode.SILENT
+                || reportingInteractionMode == ReportingInteractionMode.TOAST
+                || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
+
+            // Approve and then send reports now
+            startSendingReports(sendOnlySilentReports, true);
+            if ((reportingInteractionMode == ReportingInteractionMode.SILENT) && !reportBuilder.isEndApplication()) {
+                // Report is being sent silently and the application is not ending.
+                // So no need to wait around for the sender to complete.
+                return;
+            }
+
+        } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating Notification.");
+            createNotification(reportFile, reportBuilder);
+        }
+
+        // This is used to wait for the crash toast to end it's display duration before killing the Application.
+        toastWaitEnded = true;
+
+        if (shouldDisplayToast) {
+            // A toast is being displayed, we have to wait for its end before doing anything else.
+            // The toastWaitEnded flag will be checked before any other operation.
+            toastWaitEnded = false;
+            new Thread() {
+
+                @Override
+                public void run() {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
+                            + " millis from " + sentToastTimeMillis.initialTimeMillis
+                            + " currentMillis=" + System.currentTimeMillis());
+                    while (sentToastTimeMillis.getElapsedTime() < ACRAConstants.TOAST_WAIT_DURATION) {
+                        try {
+                            // Wait a bit to let the user read the toast
+                            Thread.sleep(100);
+                        } catch (InterruptedException e1) {
+                            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
+                        }
+                    }
+                    toastWaitEnded = true;
+                }
+            }.start();
+        }
+
+        final boolean showDirectDialog = (reportingInteractionMode == ReportingInteractionMode.DIALOG)
+                && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
+
+        new Thread() {
+
+            @Override
+            public void run() {
+                // We have to wait for the toast display to be completed.
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Waiting for Toast");
+                while (!toastWaitEnded) {
+                    try {
+                        Thread.sleep(100);
+                    } catch (InterruptedException e1) {
+                        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Interrupted waiting for Toast");
+                    }
+                }
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished waiting for Toast");
+
+                if (showDirectDialog) {
+                    // Create a new activity task with the confirmation dialog.
+                    // This new task will be persisted on application restart
+                    // right after its death.
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFile);
+                    final Intent dialogIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
+                    dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    context.startActivity(dialogIntent);
+                }
+
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.isEndApplication());
+
+                if (reportBuilder.isEndApplication()) {
+                    endApplication(reportBuilder.getUncaughtExceptionThread(), reportBuilder.getException());
+                }
+            }
+        }.start();
+    }
+
+    /**
+     * End the application.
+     */
+    private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
+        // TODO It would be better to create an explicit config attribute #letDefaultHandlerEndApplication
+        // as the intent is clearer and would allows you to switch it off for SILENT.
+        final boolean letDefaultHandlerEndApplication = (
+                config.mode() == ReportingInteractionMode.SILENT ||
+                        (config.mode() == ReportingInteractionMode.TOAST && config.forceCloseDialogAfterToast())
+        );
+
+        final boolean handlingUncaughtException = uncaughtExceptionThread != null;
+        if (handlingUncaughtException && letDefaultHandlerEndApplication && (defaultExceptionHandler != null)) {
+            // Let the system default handler do it's job and display the force close dialog.
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
+            defaultExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
+        } else {
+            // If ACRA handles user notifications with a Toast or a Notification
+            // the Force Close dialog is one more notification to the user...
+            // We choose to close the process ourselves using the same actions.
+
+            // Trying to solve https://github.com/ACRA/acra/issues/42#issuecomment-12134144
+            // Determine the current/last Activity that was started and close
+            // it. Activity#finish (and maybe it's parent too).
+            final Activity lastActivity = lastActivityManager.getLastActivity();
+            if (lastActivity != null) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finishing the last Activity prior to killing the Process");
+                lastActivity.finish();
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished " + lastActivity.getClass());
+                lastActivityManager.clearLastActivity();
+            }
+
+            android.os.Process.killProcess(android.os.Process.myPid());
+            System.exit(10);
+        }
+    }
+
+    /**
+     * Starts a Thread to start sending outstanding error reports.
+     *
+     * @param onlySendSilentReports If true then only send silent reports.
+     * @param approveReportsFirst   If true then approve unapproved reports first.
+     */
+    private void startSendingReports(boolean onlySendSilentReports, boolean approveReportsFirst) {
+        if (enabled) {
+            final SenderServiceStarter starter = new SenderServiceStarter(context, config);
+            starter.startService(onlySendSilentReports, approveReportsFirst);
+        } else {
+            ACRA.log.w(LOG_TAG, "Would be sending reports, but ACRA is disabled");
+        }
+    }
+
+    /**
+     * Creates a status bar notification.
+     *
+     * The action triggered when the notification is selected is to start the
+     * {@link CrashReportDialog} Activity.
+     *
+     * @param reportFile    Report file to send.
+     */
+    private void createNotification(File reportFile, ReportBuilder reportBuilder) {
+
+        final NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+
+        // Default notification icon is the warning symbol
+        final int icon = config.resNotifIcon();
+
+        final CharSequence tickerText = context.getText(config.resNotifTickerText());
+        final long when = System.currentTimeMillis();
+
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating Notification for " + reportFile);
+        final Intent crashReportDialogIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
+        final PendingIntent contentIntent = PendingIntent.getActivity(context, mNotificationCounter++, crashReportDialogIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+        final CharSequence contentTitle = context.getText(config.resNotifTitle());
+        final CharSequence contentText = context.getText(config.resNotifText());
+
+        final NotificationCompat.Builder builder = new NotificationCompat.Builder(context);
+        final Notification notification = builder
+                .setSmallIcon(icon)
+                .setTicker(tickerText)
+                .setWhen(when)
+                .setAutoCancel(true)
+                .setContentTitle(contentTitle)
+                .setContentText(contentText)
+                .setContentIntent(contentIntent)
+                .build();
+
+        notification.flags = notification.flags | Notification.FLAG_AUTO_CANCEL;
+
+        // The deleteIntent is invoked when the user swipes away the Notification.
+        // In this case we invoke the CrashReportDialog with EXTRA_FORCE_CANCEL==true
+        // which will cause BaseCrashReportDialog to clear the crash report and finish itself.
+        final Intent deleteIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
+        deleteIntent.putExtra(ACRAConstants.EXTRA_FORCE_CANCEL, true);
+        notification.deleteIntent = PendingIntent.getActivity(context, -1, deleteIntent, 0);
+
+        // Send new notification
+        notificationManager.notify(ACRAConstants.NOTIF_CRASH_ID, notification);
+    }
+
+    private File getReportFileName(CrashReportData crashData) {
+        final String timestamp = crashData.getProperty(USER_CRASH_DATE);
+        final String isSilent = crashData.getProperty(IS_SILENT);
+        final String fileName =  ""
+                + (timestamp != null ? timestamp : new Date().getTime()) // Need to check for null because old version of ACRA did not always capture USER_CRASH_DATE
+                + (isSilent != null ? ACRAConstants.SILENT_SUFFIX : "")
+                + ACRAConstants.REPORTFILE_EXTENSION;
+        final ReportLocator reportLocator = new ReportLocator(context);
+        return new File(reportLocator.getUnapprovedFolder(), fileName);
+    }
+
+    /**
+     * When a report can't be sent, it is saved here in a file in the root of
+     * the application private directory.
+     *
+     * @param file
+     *            In a few rare cases, we write the report again with additional
+     *            data (user comment for example). In such cases, you can
+     *            provide the already existing file name here to overwrite the
+     *            report file. If null, a new file report will be generated
+     * @param crashData
+     *            Can be used to save an alternative (or previously generated)
+     *            report data. Used to store again a report with the addition of
+     *            user comment. If null, the default current crash data are
+     *            used.
+     */
+    private void saveCrashReportFile(File file, CrashReportData crashData) {
+        try {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Writing crash report file " + file);
+            final CrashReportPersister persister = new CrashReportPersister();
+            persister.store(crashData, file);
+        } catch (Exception e) {
+            ACRA.log.e(LOG_TAG, "An error occurred while writing the report file...", e);
+        }
+    }
+
+
+    /**
+     * Creates an Intent that can be used to create and show a CrashReportDialog.
+     *
+     * @param reportFile        Error report file to display in the crash report dialog.
+     * @param reportBuilder     ReportBuilder containing the details of the crash.
+     */
+    private Intent createCrashReportDialogIntent(File reportFile, ReportBuilder reportBuilder) {
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating DialogIntent for " + reportFile + " exception=" + reportBuilder.getException());
+        final Intent dialogIntent = new Intent(context, config.reportDialogClass());
+        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE, reportFile);
+        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION, reportBuilder.getException());
+        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_CONFIG, config);
+        return dialogIntent;
+    }
+}
diff --git a/src/main/java/org/acra/builder/ReportPrimer.java b/src/main/java/org/acra/builder/ReportPrimer.java
new file mode 100644
index 00000000..be3cac4a
--- /dev/null
+++ b/src/main/java/org/acra/builder/ReportPrimer.java
@@ -0,0 +1,30 @@
+package org.acra.builder;
+
+import android.content.Context;
+
+import java.util.Map;
+
+/**
+ * Primes a {@link ReportBuilder} with any extra data to record for the current crash report.
+ *
+ * ReportPrimer is configured declaratively via {@link org.acra.annotation.ReportsCrashes#reportPrimerClass()}.
+ * The ReportPrimer class MUST have a no arg constructor and is created when ACRA is intialised.
+ *
+ * Created by William on 9 Jan 2016.
+ * @since 4.8.0
+ */
+public interface ReportPrimer {
+
+    /**
+     * Update builder via {@link ReportBuilder#customData(Map)} or {@link ReportBuilder#customData(String, String)}
+     * with any extra dta application to just this crash.
+     *
+     * Builder is fully constructed when this method is called, so it can be introspected for details of the crash.
+     *
+     * Note that this method will only be called if ACRA is currently enabled.
+     *
+     * @param context   Application context from whcih to retrieve resources.
+     * @param builder   Full configured {@link ReportBuilder} for the current crash report.
+     */
+    void primeReport(Context context, ReportBuilder builder);
+}
diff --git a/src/main/java/org/acra/collector/CrashReportData.java b/src/main/java/org/acra/collector/CrashReportData.java
index 60aae535..8fe2d2bc 100644
--- a/src/main/java/org/acra/collector/CrashReportData.java
+++ b/src/main/java/org/acra/collector/CrashReportData.java
@@ -26,10 +26,10 @@
 
 /**
  * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
+ *
  * This is basically the source of {@link Properties} adapted to extend an
  * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
- * amounts of android time in the generation of a date comment when storing to
- * file.
+ * amounts of android time in the generation of a date comment when storing to file.
  */
 public final class CrashReportData extends EnumMap<ReportField, String> {
 
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
index 368820b7..03b8692c 100644
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -16,32 +16,28 @@
 
 package org.acra.collector;
 
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.*;
-
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-
+import android.Manifest;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.os.Environment;
 import android.text.TextUtils;
 import org.acra.ACRA;
+import org.acra.builder.ReportBuilder;
 import org.acra.ReportField;
+import org.acra.config.ACRAConfig;
 import org.acra.util.Installation;
 import org.acra.util.PackageManagerWrapper;
 import org.acra.util.ReportUtils;
 
-import android.Manifest;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.os.Environment;
-import android.text.format.Time;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.util.*;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.*;
 
 /**
  * Responsible for creating the CrashReportData for an Exception.
@@ -55,14 +51,17 @@
 public final class CrashReportDataFactory {
 
     private final Context context;
+    private final ACRAConfig config;
     private final SharedPreferences prefs;
     private final Map<String, String> customParameters = new LinkedHashMap<String, String>();
-    private final Time appStartDate;
+    private final Calendar appStartDate;
     private final String initialConfiguration;
 
-    public CrashReportDataFactory(Context context, SharedPreferences prefs, Time appStartDate,
+    public CrashReportDataFactory(Context context, ACRAConfig config,
+                                  SharedPreferences prefs, Calendar appStartDate,
                                   String initialConfiguration) {
         this.context = context;
+        this.config = config;
         this.prefs = prefs;
         this.appStartDate = appStartDate;
         this.initialConfiguration = initialConfiguration;
@@ -120,22 +119,12 @@ public String getCustomData(String key) {
     /**
      * Collects crash data.
      *
-     * @param msg
-     *            A message to be associated with the crash report.
-     * @param th
-     *            Throwable that caused the crash.
-     * @param customData
-     *            Custom key/value pairs to be associated with the crash report.
-     * @param isSilentReport
-     *            Whether to report this report as being sent silently.
-     * @param brokenThread  Thread on which the error occurred.
-     * @return CrashReportData representing the current state of the application
-     *         at the instant of the Exception.
+     * @param builder   ReportBuilder for whom to crete the crash report.
      */
-    public CrashReportData createCrashData(String msg, Throwable th, Map<String, String> customData, boolean isSilentReport, Thread brokenThread) {
+    public CrashReportData createCrashData(ReportBuilder builder) {
         final CrashReportData crashReportData = new CrashReportData();
         try {
-            final List<ReportField> crashReportFields = ACRA.getConfig().getReportFields();
+            final List<ReportField> crashReportFields = config.getReportFields();
 
             // Make every entry here bullet proof and move any slightly dodgy
             // ones to the end.
@@ -143,39 +132,88 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             // something crashes the collection process.
 
             try {
-                crashReportData.put(STACK_TRACE, getStackTrace(msg, th));
+                crashReportData.put(STACK_TRACE, getStackTrace(builder.getMessage(), builder.getException()));
             } catch (RuntimeException e){
                 ACRA.log.e(LOG_TAG, "Error while retrieving STACK_TRACE data", e);
             }
 
+            // Collect DropBox and logcat. This is done first because some ROMs spam the log with every get on
+            // Settings.
+            final PackageManagerWrapper pm = new PackageManagerWrapper(context);
+
+            // Before JellyBean, this required the READ_LOGS permission
+            // Since JellyBean, READ_LOGS is not granted to third-party apps anymore for security reasons.
+            // Though, we can call logcat without any permission and still get traces related to our app.
+            final boolean hasReadLogsPermission = pm.hasPermission(Manifest.permission.READ_LOGS) || (Compatibility.getAPILevel() >= Compatibility.VERSION_CODES.JELLY_BEAN);
+            if (prefs.getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true) && hasReadLogsPermission) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "READ_LOGS granted! ACRA can include LogCat and DropBox data.");
+                final LogCatCollector logCatCollector = new LogCatCollector();
+                if (crashReportFields.contains(LOGCAT)) {
+                    try {
+                        crashReportData.put(LOGCAT, logCatCollector.collectLogCat(config, null));
+                    } catch (RuntimeException e){
+                        ACRA.log.e(LOG_TAG, "Error while retrieving LOGCAT data", e);
+                    }
+                }
+                if (crashReportFields.contains(EVENTSLOG)) {
+                    try {
+                        crashReportData.put(EVENTSLOG, logCatCollector.collectLogCat(config, "events"));
+                    } catch (RuntimeException e){
+                        ACRA.log.e(LOG_TAG, "Error while retrieving EVENTSLOG data", e);
+                    }
+                }
+                if (crashReportFields.contains(RADIOLOG)) {
+                    try {
+                        crashReportData.put(RADIOLOG, logCatCollector.collectLogCat(config, "radio"));
+                    } catch (RuntimeException e){
+                        ACRA.log.e(LOG_TAG, "Error while retrieving RADIOLOG data", e);
+                    }
+                }
+                if (crashReportFields.contains(DROPBOX)) {
+                    try {
+                        crashReportData.put(DROPBOX, new DropBoxCollector().read(context, config));
+                    } catch (RuntimeException e){
+                        ACRA.log.e(LOG_TAG, "Error while retrieving DROPBOX data", e);
+                    }
+                }
+            } else {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "READ_LOGS not allowed. ACRA will not include LogCat and DropBox data.");
+            }
+
             try {
                 crashReportData.put(ReportField.USER_APP_START_DATE, ReportUtils.getTimeString(appStartDate));
             } catch (RuntimeException e){
                 ACRA.log.e(LOG_TAG, "Error while retrieving USER_APP_START_DATE data", e);
             }
 
-            if (isSilentReport) {
+            if (builder.isSendSilently()) {
                 crashReportData.put(IS_SILENT, "true");
             }
 
+            // Always generate report uuid
+            try {
+                crashReportData.put(ReportField.REPORT_ID, UUID.randomUUID().toString());
+            } catch (RuntimeException e){
+                ACRA.log.e(LOG_TAG, "Error while retrieving REPORT_ID data", e);
+            }
+
+            // Always generate crash time
+            try {
+                final Calendar curDate = new GregorianCalendar();
+                crashReportData.put(ReportField.USER_CRASH_DATE, ReportUtils.getTimeString(curDate));
+            } catch (RuntimeException e){
+                ACRA.log.e(LOG_TAG, "Error while retrieving USER_CRASH_DATE data", e);
+            }
+
             // StackTrace hash
             if (crashReportFields.contains(STACK_TRACE_HASH)) {
                 try {
-                    crashReportData.put(ReportField.STACK_TRACE_HASH, getStackTraceHash(th));
+                    crashReportData.put(ReportField.STACK_TRACE_HASH, getStackTraceHash(builder.getException()));
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving STACK_TRACE_HASH data", e);
                 }
             }
 
-            // Generate report uuid
-            if (crashReportFields.contains(REPORT_ID)) {
-                try {
-                    crashReportData.put(ReportField.REPORT_ID, UUID.randomUUID().toString());
-                } catch (RuntimeException e){
-                    ACRA.log.e(LOG_TAG, "Error while retrieving REPORT_ID data", e);
-                }
-            }
-
             // Installation unique ID
             if (crashReportFields.contains(INSTALLATION_ID)) {
                 try {
@@ -202,7 +240,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             }
 
             // Collect meminfo
-            if (!(th instanceof OutOfMemoryError) && crashReportFields.contains(DUMPSYS_MEMINFO)) {
+            if (!(builder.getException() instanceof OutOfMemoryError) && crashReportFields.contains(DUMPSYS_MEMINFO)) {
                 try {
                     crashReportData.put(DUMPSYS_MEMINFO, DumpSysCollector.collectMemInfo());
                 } catch (RuntimeException e){
@@ -295,21 +333,10 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
                 }
             }
 
-            // User crash date with local timezone
-            if (crashReportFields.contains(USER_CRASH_DATE)) {
-                try {
-                    final Time curDate = new Time();
-                    curDate.setToNow();
-                    crashReportData.put(USER_CRASH_DATE, ReportUtils.getTimeString(curDate));
-                } catch (RuntimeException e){
-                    ACRA.log.e(LOG_TAG, "Error while retrieving USER_CRASH_DATE data", e);
-                }
-            }
-
             // Add custom info, they are all stored in a single field
             if (crashReportFields.contains(CUSTOM_DATA)) {
                 try {
-                    crashReportData.put(CUSTOM_DATA, createCustomInfoString(customData));
+                    crashReportData.put(CUSTOM_DATA, createCustomInfoString(builder.getCustomData()));
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving CUSTOM_DATA data", e);
                 }
@@ -353,10 +380,11 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
                 }
             }
 
+            final SettingsCollector settingsCollector = new SettingsCollector(context, config);
             // System settings
             if (crashReportFields.contains(SETTINGS_SYSTEM)) {
                 try {
-                    crashReportData.put(SETTINGS_SYSTEM, SettingsCollector.collectSystemSettings(context));
+                    crashReportData.put(SETTINGS_SYSTEM, settingsCollector.collectSystemSettings());
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving SETTINGS_SYSTEM data", e);
                 }
@@ -365,7 +393,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             // Secure settings
             if (crashReportFields.contains(SETTINGS_SECURE)) {
                 try {
-                    crashReportData.put(SETTINGS_SECURE, SettingsCollector.collectSecureSettings(context));
+                    crashReportData.put(SETTINGS_SECURE, settingsCollector.collectSecureSettings());
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving SETTINGS_SECURE data", e);
                 }
@@ -375,7 +403,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             if (crashReportFields.contains(SETTINGS_GLOBAL)) {
                 try {
 
-                    crashReportData.put(SETTINGS_GLOBAL, SettingsCollector.collectGlobalSettings(context));
+                    crashReportData.put(SETTINGS_GLOBAL, settingsCollector.collectGlobalSettings());
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving SETTINGS_GLOBAL data", e);
                 }
@@ -384,16 +412,14 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             // SharedPreferences
             if (crashReportFields.contains(SHARED_PREFERENCES)) {
                 try {
-                    crashReportData.put(SHARED_PREFERENCES, SharedPreferencesCollector.collect(context));
+                    crashReportData.put(SHARED_PREFERENCES, new SharedPreferencesCollector(context, config).collect());
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving SHARED_PREFERENCES data", e);
                 }
             }
 
-            // Now get all the crash data that relies on the PackageManager
+            // Now get all the crash data that relies on the PackageManager.getPackageInfo()
             // (which may or may not be here).
-            final PackageManagerWrapper pm = new PackageManagerWrapper(context);
-
             try {
                 final PackageInfo pi = pm.getPackageInfo();
                 if (pi != null) {
@@ -425,55 +451,13 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
                 }
             }
 
-            // Collect DropBox and logcat
-            // Before JellyBean, this required the READ_LOGS permission
-            // Since JellyBean, READ_LOGS is not granted to third-party apps anymore for security reasons.
-            // Though, we can call logcat without any permission and still get traces related to our app.
-            final boolean hasReadLogsPermission = pm.hasPermission(Manifest.permission.READ_LOGS) || (Compatibility.getAPILevel() >= Compatibility.VERSION_CODES.JELLY_BEAN);
-            if (prefs.getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true) && hasReadLogsPermission) {
-                ACRA.log.i(LOG_TAG, "READ_LOGS granted! ACRA can include LogCat and DropBox data.");
-                if (crashReportFields.contains(LOGCAT)) {
-                    try {
-                        crashReportData.put(LOGCAT, LogCatCollector.collectLogCat(null));
-                    } catch (RuntimeException e){
-                        ACRA.log.e(LOG_TAG, "Error while retrieving LOGCAT data", e);
-                    }
-                }
-                if (crashReportFields.contains(EVENTSLOG)) {
-                    try {
-                        crashReportData.put(EVENTSLOG, LogCatCollector.collectLogCat("events"));
-                    } catch (RuntimeException e){
-                        ACRA.log.e(LOG_TAG, "Error while retrieving EVENTSLOG data", e);
-                    }
-                }
-                if (crashReportFields.contains(RADIOLOG)) {
-                    try {
-                        crashReportData.put(RADIOLOG, LogCatCollector.collectLogCat("radio"));
-                    } catch (RuntimeException e){
-                        ACRA.log.e(LOG_TAG, "Error while retrieving RADIOLOG data", e);
-                    }
-                }
-                if (crashReportFields.contains(DROPBOX)) {
-                    try {
-                        crashReportData.put(DROPBOX,
-                                            DropBoxCollector.read(context, ACRA.getConfig().additionalDropBoxTags()));
-                    } catch (RuntimeException e){
-                        ACRA.log.e(LOG_TAG, "Error while retrieving DROPBOX data", e);
-                    }
-                }
-            } else {
-                ACRA.log.i(LOG_TAG, "READ_LOGS not allowed. ACRA will not include LogCat and DropBox data.");
-            }
-
             // Application specific log file
             if (crashReportFields.contains(APPLICATION_LOG)) {
                 try {
-                    final String logFile = LogFileCollector.collectLogFile(context,
-                                                                           ACRA.getConfig().applicationLogFile(),
-                                                                           ACRA.getConfig().applicationLogFileLines());
+                    final String logFile = new LogFileCollector().collectLogFile(context, config.applicationLogFile(), config.applicationLogFileLines());
                     crashReportData.put(APPLICATION_LOG, logFile);
                 } catch (IOException e) {
-                    ACRA.log.e(LOG_TAG, "Error while reading application log file " + ACRA.getConfig().applicationLogFile(), e);
+                    ACRA.log.e(LOG_TAG, "Error while reading application log file " + config.applicationLogFile(), e);
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving APPLICATION_LOG data", e);
 
@@ -492,7 +476,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             // Failing thread details
             if (crashReportFields.contains(THREAD_DETAILS)) {
                 try {
-                    crashReportData.put(THREAD_DETAILS, ThreadCollector.collect(brokenThread));
+                    crashReportData.put(THREAD_DETAILS, ThreadCollector.collect(builder.getUncaughtExceptionThread()));
                 } catch (RuntimeException e){
                     ACRA.log.e(LOG_TAG, "Error while retrieving THREAD_DETAILS data", e);
                 }
@@ -580,7 +564,7 @@ private String getStackTraceHash(Throwable th) {
     }
 
     private Class<?> getBuildConfigClass() throws ClassNotFoundException {
-        final Class configuredBuildConfig = ACRA.getConfig().buildConfigClass();
+        final Class configuredBuildConfig = config.buildConfigClass();
         if ((configuredBuildConfig != null) && !configuredBuildConfig.equals(Object.class)) {
             // If set via annotations or programatically then it will have a real value,
             // otherwise it will be Object.class (annotation default) or null (explicit programmatic).
diff --git a/src/main/java/org/acra/collector/DropBoxCollector.java b/src/main/java/org/acra/collector/DropBoxCollector.java
index a2673d12..775c30d2 100644
--- a/src/main/java/org/acra/collector/DropBoxCollector.java
+++ b/src/main/java/org/acra/collector/DropBoxCollector.java
@@ -15,17 +15,16 @@
  */
 package org.acra.collector;
 
-import java.lang.reflect.InvocationTargetException;
+import android.content.Context;
+import android.text.format.Time;
+import org.acra.ACRA;
+import org.acra.config.ACRAConfig;
+
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import org.acra.ACRA;
-
-import android.content.Context;
-import android.text.format.Time;
-
 import static org.acra.ACRA.LOG_TAG;
 
 /**
@@ -51,13 +50,11 @@
      * Read latest messages contained in the DropBox for system related tags and
      * optional developer-set tags.
      * 
-     * @param context
-     *            The application context.
-     * @param additionalTags
-     *            An array of tags provided by the application developer.
+     * @param context   The application context.
+     * @param config    AcraConfig describe what to collect.
      * @return A readable formatted String listing messages retrieved.
      */
-    public static String read(Context context, String[] additionalTags) {
+    public String read(Context context, ACRAConfig config) {
         try {
             // Use reflection API to allow compilation with API Level 5.
             final String serviceName = Compatibility.getDropBoxServiceName();
@@ -73,14 +70,15 @@ public static String read(Context context, String[] additionalTags) {
 
             final Time timer = new Time();
             timer.setToNow();
-            timer.minute -= ACRA.getConfig().dropboxCollectionMinutes();
+            timer.minute -= config.dropboxCollectionMinutes();
             timer.normalize(false);
             final long time = timer.toMillis(false);
 
             final List<String> tags = new ArrayList<String>();
-            if (ACRA.getConfig().includeDropBoxSystemTags()) {
+            if (config.includeDropBoxSystemTags()) {
                 tags.addAll(Arrays.asList(SYSTEM_TAGS));
             }
+            final String[] additionalTags = config.additionalDropBoxTags();
             if (additionalTags != null && additionalTags.length > 0) {
                 tags.addAll(Arrays.asList(additionalTags));
             }
@@ -117,18 +115,8 @@ public static String read(Context context, String[] additionalTags) {
             }
             return dropboxContent.toString();
 
-        } catch (SecurityException e) {
-            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
-        } catch (NoSuchMethodException e) {
-            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
-        } catch (IllegalArgumentException e) {
-            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
-        } catch (IllegalAccessException e) {
-            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
-        } catch (InvocationTargetException e) {
-            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
-        } catch (NoSuchFieldException e) {
-            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
+        } catch (Exception e) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "DropBoxManager not available.");
         }
 
         return NO_RESULT;
diff --git a/src/main/java/org/acra/collector/LogCatCollector.java b/src/main/java/org/acra/collector/LogCatCollector.java
index fd27ef26..d7cbbdff 100644
--- a/src/main/java/org/acra/collector/LogCatCollector.java
+++ b/src/main/java/org/acra/collector/LogCatCollector.java
@@ -29,6 +29,7 @@
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.annotation.ReportsCrashes;
+import org.acra.config.ACRAConfig;
 import org.acra.util.BoundedLinkedList;
 
 
@@ -48,10 +49,9 @@
     /**
      * Executes the logcat command with arguments taken from
      * {@link ReportsCrashes#logcatArguments()}
-     * 
-     * @param bufferName
-     *            The name of the buffer to be read: "main" (default), "radio"
-     *            or "events".
+     *
+     * @param config        AcraConfig to use when collecting logcat.
+     * @param bufferName    The name of the buffer to be read: "main" (default), "radio" or "events".
      * @return A {@link String} containing the latest lines of the output.
      *         Default is 100 lines, use "-t", "300" in
      *         {@link ReportsCrashes#logcatArguments()} if you want 300 lines.
@@ -59,10 +59,10 @@
      *         report generation time and a bigger footprint on the device data
      *         plan consumption.
      */
-    public static String collectLogCat(String bufferName) {
+    public String collectLogCat(ACRAConfig config, String bufferName) {
         final int myPid = android.os.Process.myPid();
         String myPidStr = null;
-        if (ACRA.getConfig().logcatFilterByPid() && myPid > 0) {
+        if (config.logcatFilterByPid() && myPid > 0) {
             myPidStr = Integer.toString(myPid) +"):";
         }
 
@@ -76,8 +76,7 @@ public static String collectLogCat(String bufferName) {
         // "-t n" argument has been introduced in FroYo (API level 8). For
         // devices with lower API level, we will have to emulate its job.
         final int tailCount;
-        final List<String> logcatArgumentsList = new ArrayList<String>(
-                Arrays.asList(ACRA.getConfig().logcatArguments()));
+        final List<String> logcatArgumentsList = new ArrayList<String>(Arrays.asList(config.logcatArguments()));
 
         final int tailIndex = logcatArgumentsList.indexOf("-t");
         if (tailIndex > -1 && tailIndex < logcatArgumentsList.size()) {
@@ -101,7 +100,7 @@ public static String collectLogCat(String bufferName) {
             final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
             bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
 
-            ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
 
             // Dump stderr to null
             new Thread(new Runnable() {
diff --git a/src/main/java/org/acra/collector/LogFileCollector.java b/src/main/java/org/acra/collector/LogFileCollector.java
index ca9679e4..3add7c45 100644
--- a/src/main/java/org/acra/collector/LogFileCollector.java
+++ b/src/main/java/org/acra/collector/LogFileCollector.java
@@ -16,18 +16,12 @@
 
 package org.acra.collector;
 
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStreamReader;
-
+import android.app.Application;
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.util.BoundedLinkedList;
 
-import android.app.Application;
-import android.content.Context;
+import java.io.*;
 
 import static org.acra.ACRA.LOG_TAG;
 
@@ -40,24 +34,19 @@
  */
 class LogFileCollector {
 
-    /**
-     * Private constructor to prevent instantiation.
-     */
-    private LogFileCollector() {
-    };
-
     /**
      * Reads the last lines of a custom log file. The file name is assumed as
      * located in the {@link Application#getFilesDir()} directory if it does not
      * contain any path separator.
      * 
-     * @param context
-     * @param fileName
-     * @param numberOfLines
-     * @return
+     * @param context       Application context.
+     * @param fileName      Log file to read. It can be an absolute path, or a relative path from the application
+     *                      files folder, or a file within the application files folder.
+     * @param numberOfLines Number of lines to retrieve.
+     * @return A single String containing all of the requested lines.
      * @throws IOException
      */
-    public static String collectLogFile(Context context, String fileName, int numberOfLines) throws IOException {
+    public String collectLogFile(Context context, String fileName, int numberOfLines) throws IOException {
         final BoundedLinkedList<String> resultBuffer = new BoundedLinkedList<String>(numberOfLines);
         final BufferedReader reader = getReader(context, fileName);
         try {
@@ -74,13 +63,20 @@ public static String collectLogFile(Context context, String fileName, int number
 
     private static BufferedReader getReader(Context context, String fileName) {
         try {
-            if (fileName.contains("/")) {
-                return new BufferedReader(new InputStreamReader(new FileInputStream(fileName)), 1024);
+            final FileInputStream inputStream;
+            if (fileName.startsWith("/")) {
+                // Absolute path
+                inputStream = new FileInputStream(fileName);
+            } else if (fileName.contains("/")) {
+                // Relative path from the application files folder (ie a sub folder)
+                inputStream = new FileInputStream(new File(context.getFilesDir(), fileName));
             } else {
-                return new BufferedReader(new InputStreamReader(context.openFileInput(fileName)), 1024);
+                // A file directly contained within the application files folder.
+                inputStream = context.openFileInput(fileName);
             }
+            return new BufferedReader(new InputStreamReader(inputStream), 1024);
         } catch (FileNotFoundException e) {
-            ACRA.log.e(LOG_TAG, "Cannot find application log file : '" + ACRA.getConfig().applicationLogFile() + "'");
+            ACRA.log.e(LOG_TAG, "Cannot find application log file : '" + fileName + "'");
             return new BufferedReader(new InputStreamReader(new ByteArrayInputStream(new byte[0])));
         }
     }
diff --git a/src/main/java/org/acra/collector/SettingsCollector.java b/src/main/java/org/acra/collector/SettingsCollector.java
index ef314f7b..fa48e80e 100644
--- a/src/main/java/org/acra/collector/SettingsCollector.java
+++ b/src/main/java/org/acra/collector/SettingsCollector.java
@@ -27,6 +27,7 @@
 import android.provider.Settings;
 import android.provider.Settings.Secure;
 import android.provider.Settings.System;
+import org.acra.config.ACRAConfig;
 
 import static org.acra.ACRA.LOG_TAG;
 
@@ -39,16 +40,22 @@
  */
 final class SettingsCollector {
 
+    private final Context context;
+    private final ACRAConfig config;
+
+    public SettingsCollector(Context context, ACRAConfig config) {
+        this.context = context;
+        this.config = config;
+    }
+
     /**
      * Collect data from {@link android.provider.Settings.System}. This
      * collector uses reflection to be sure to always get the most accurate data
      * whatever Android API level it runs on.
      * 
-     * @param ctx
-     *            Application context.
      * @return A human readable String containing one key=value pair per line.
      */
-    public static String collectSystemSettings(Context ctx) {
+    public String collectSystemSettings() {
         final StringBuilder result = new StringBuilder();
         final Field[] keys = Settings.System.class.getFields();
         for (final Field key : keys) {
@@ -57,7 +64,7 @@ public static String collectSystemSettings(Context ctx) {
             // logcat.
             if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class) {
                 try {
-                    final Object value = Settings.System.getString(ctx.getContentResolver(), (String) key.get(null));
+                    final Object value = Settings.System.getString(context.getContentResolver(), (String) key.get(null));
                     if (value != null) {
                         result.append(key.getName()).append("=").append(value).append("\n");
                     }
@@ -77,17 +84,15 @@ public static String collectSystemSettings(Context ctx) {
      * collector uses reflection to be sure to always get the most accurate data
      * whatever Android API level it runs on.
      * 
-     * @param ctx
-     *            Application context.
      * @return A human readable String containing one key=value pair per line.
      */
-    public static String collectSecureSettings(Context ctx) {
+    public String collectSecureSettings() {
         final StringBuilder result = new StringBuilder();
         final Field[] keys = Settings.Secure.class.getFields();
         for (final Field key : keys) {
             if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
                 try {
-                    final Object value = Settings.Secure.getString(ctx.getContentResolver(), (String) key.get(null));
+                    final Object value = Settings.Secure.getString(context.getContentResolver(), (String) key.get(null));
                     if (value != null) {
                         result.append(key.getName()).append("=").append(value).append("\n");
                     }
@@ -107,11 +112,9 @@ public static String collectSecureSettings(Context ctx) {
      * collector uses reflection to be sure to always get the most accurate data
      * whatever Android API level it runs on.
      * 
-     * @param ctx
-     *            Application context.
      * @return A human readable String containing one key=value pair per line.
      */
-    public static String collectGlobalSettings(Context ctx) {
+    public String collectGlobalSettings() {
         if (Compatibility.getAPILevel() < Compatibility.VERSION_CODES.JELLY_BEAN_MR1) {
             return "";
         }
@@ -123,7 +126,7 @@ public static String collectGlobalSettings(Context ctx) {
             final Method getString = globalClass.getMethod("getString", ContentResolver.class, String.class);
             for (final Field key : keys) {
                 if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
-                    final Object value = getString.invoke(null, ctx.getContentResolver(), (String) key.get(null));
+                    final Object value = getString.invoke(null, context.getContentResolver(), key.get(null));
                     if (value != null) {
                         result.append(key.getName()).append("=").append(value).append("\n");
                     }
@@ -146,11 +149,11 @@ public static String collectGlobalSettings(Context ctx) {
         return result.toString();
     }
 
-    private static boolean isAuthorized(Field key) {
+    private boolean isAuthorized(Field key) {
         if (key == null || key.getName().startsWith("WIFI_AP")) {
             return false;
         }
-        for (String regex : ACRA.getConfig().excludeMatchingSettingsKeys()) {
+        for (String regex : config.excludeMatchingSettingsKeys()) {
             if(key.getName().matches(regex)) {
                return false; 
             }
diff --git a/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index d4ef0f7b..ce9e88f1 100644
--- a/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -24,6 +24,7 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
+import org.acra.config.ACRAConfig;
 
 import static org.acra.ACRA.LOG_TAG;
 
@@ -34,6 +35,14 @@
  */
 final class SharedPreferencesCollector {
 
+    private final Context context;
+    private final ACRAConfig config;
+
+    public SharedPreferencesCollector(Context context, ACRAConfig config) {
+        this.context = context;
+        this.config = config;
+    }
+
     /**
      * Collects all key/value pairs in SharedPreferences and writes them in a
      * result String. The application default SharedPreferences are always
@@ -41,13 +50,9 @@
      * names in the {@link ReportsCrashes#additionalSharedPreferences()}
      * configuration item.
      * 
-     * 
-     * 
-     * @param context
-     *            the application context.
      * @return A readable formatted String containing all key/value pairs.
      */
-    public static String collect(Context context) {
+    public String collect() {
         final StringBuilder result = new StringBuilder();
 
         // Include the default SharedPreferences
@@ -55,7 +60,7 @@ public static String collect(Context context) {
         sharedPrefs.put("default", PreferenceManager.getDefaultSharedPreferences(context));
 
         // Add in any additional SharedPreferences
-        final String[] sharedPrefIds = ACRA.getConfig().additionalSharedPreferences();
+        final String[] sharedPrefIds = config.additionalSharedPreferences();
         if (sharedPrefIds != null) {
             for (final String sharedPrefId : sharedPrefIds) {
                 sharedPrefs.put(sharedPrefId, context.getSharedPreferences(sharedPrefId, Context.MODE_PRIVATE));
@@ -78,7 +83,7 @@ public static String collect(Context context) {
             // Add all non-filtered preferences from that preference file.
             for (final String key : prefEntries.keySet()) {
                 if (filteredKey(key)) {
-                    ACRA.log.d(LOG_TAG, "Filtered out sharedPreference=" + sharedPrefId + "  key=" + key + " due to filtering rule");
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Filtered out sharedPreference=" + sharedPrefId + "  key=" + key + " due to filtering rule");
                 } else {
                     final Object prefValue = prefEntries.get(key);
                     result.append(sharedPrefId).append('.').append(key).append('=');
@@ -100,8 +105,8 @@ public static String collect(Context context) {
      *            the name of the preference to be checked
      * @return true if the key has to be excluded from reports.
      */
-    private static boolean filteredKey(String key) {
-        for (String regex : ACRA.getConfig().excludeMatchingSharedPreferencesKeys()) {
+    private boolean filteredKey(String key) {
+        for (String regex : config.excludeMatchingSharedPreferencesKeys()) {
             if(key.matches(regex)) {
                return true; 
             }
diff --git a/src/main/java/org/acra/config/ACRAConfig.java b/src/main/java/org/acra/config/ACRAConfig.java
new file mode 100644
index 00000000..fb96ee68
--- /dev/null
+++ b/src/main/java/org/acra/config/ACRAConfig.java
@@ -0,0 +1,39 @@
+package org.acra.config;
+
+import org.acra.ReportField;
+import org.acra.annotation.ReportsCrashes;
+
+import java.io.Serializable;
+import java.security.KeyStore;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Configuration for ACRA.
+ *
+ * Declarative forms of this are made using the <pre>@ReportsCrashes</pre> annotation
+ * on the Application class.
+ *
+ * Programmatic versions can be configured using
+ */
+public interface ACRAConfig extends ReportsCrashes, Serializable {
+
+    /**
+     * Retrieve HTTP headers defined by the application developer. These should
+     * be added to requests sent by any third-party sender (over HTTP of
+     * course).
+     *
+     * @return A map associating http header names to their values.
+     */
+    Map<String, String> getHttpHeaders();
+
+    /**
+     * @return KeyStore to use (if any) when sending a HttpsRequest.
+     */
+    public KeyStore keyStore();
+
+    /**
+     * @return List of ReportField that ACRA will provide to the server.
+     */
+    public List<ReportField> getReportFields();
+}
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/config/ACRAConfiguration.java
similarity index 85%
rename from src/main/java/org/acra/ACRAConfiguration.java
rename to src/main/java/org/acra/config/ACRAConfiguration.java
index 666c0f13..2335bcc7 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/config/ACRAConfiguration.java
@@ -1,1360 +1,1322 @@
-/*
- *  Copyright 2011 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.sender.HttpSender;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.acra.util.DefaultHttpsSocketFactoryFactory;
-import org.acra.util.HttpsSocketFactoryFactory;
-import org.acra.util.ReflectionException;
-import org.acra.util.ReflectionHelper;
-
-import java.lang.annotation.Annotation;
-import java.security.KeyStore;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ACRAConstants.*;
-
-/**
- * This class is to be used if you need to apply dynamic settings. This is
- * needed for example when using ACRA in an Android Library Project since ADT
- * v14 where resource ids are not final anymore and can't be passed as
- * annotation parameters values.
- */
-public class ACRAConfiguration implements ReportsCrashes {
-
-    private final ReflectionHelper reflectionHelper = new ReflectionHelper();
-
-    private String[] mAdditionalDropboxTags = null;
-
-    private String[] mAdditionalSharedPreferences = null;
-    private Integer mConnectionTimeout = null;
-    private ReportField[] mCustomReportContent = null;
-    private Boolean mDeleteUnapprovedReportsOnApplicationStart = null;
-    private Boolean mDeleteOldUnsentReportsOnApplicationStart = null;
-    private Integer mDropboxCollectionMinutes = null;
-    private Boolean mForceCloseDialogAfterToast = null;
-    private String mFormUri = null;
-    private String mFormUriBasicAuthLogin = null;
-    private String mFormUriBasicAuthPassword = null;
-    private Boolean mIncludeDropboxSystemTags = null;
-
-    private String[] mLogcatArguments = null;
-    private String mMailTo = null;
-    private Integer mMaxNumberOfRequestRetries = null;
-    private ReportingInteractionMode mMode = null;
-    private ReportsCrashes mReportsCrashes = null;
-    private Class<? extends BaseCrashReportDialog> mReportDialogClass = null;
-
-    private Integer mResDialogPositiveButtonText = null;
-    private Integer mResDialogNegativeButtonText = null;
-    private Integer mResDialogCommentPrompt = null;
-    private Integer mResDialogEmailPrompt = null;
-    private Integer mResDialogIcon = null;
-    private Integer mResDialogOkToast = null;
-    private Integer mResDialogText = null;
-    private Integer mResDialogTitle = null;
-    private Integer mResNotifIcon = null;
-    private Integer mResNotifText = null;
-    private Integer mResNotifTickerText = null;
-    private Integer mResNotifTitle = null;
-    private Integer mResToastText = null;
-    private Integer mSharedPreferenceMode = null;
-    private String mSharedPreferenceName = null;
-    private Integer mSocketTimeout = null;
-    private Boolean mLogcatFilterByPid = null;
-    private Boolean mSendReportsInDevMode = null;
-    private Boolean mSendReportsAtShutdown = null;
-
-    private String[] mExcludeMatchingSharedPreferencesKeys = null;
-    private String[] mExcludeMatchingSettingsKeys = null;
-    private Class mBuildConfigClass;
-    private String mApplicationLogFile = null;
-    private Integer mApplicationLogFileLines = null;
-
-    private Boolean mDisableSSLCertValidation = null;
-    private String mHttpsSocketFactoryFactoryClass = null;
-    private HttpsSocketFactoryFactory mHttpsSocketFactoryFactory;
-    private Method mHttpMethod = null;
-    private Type mReportType = null;
-    private Map<String, String> mHttpHeaders;
-    private KeyStore mKeyStore;
-
-    /**
-     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
-     * This should be used also by third party senders.
-     * 
-     * @param headers
-     *            A map associating HTTP header names to their values.
-     * @return The updated ACRA configuration
-     */
-    public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
-        this.mHttpHeaders = headers;
-        return this;
-    }
-
-    /**
-     * Retrieve HTTP headers defined by the application developer. These should
-     * be added to requests sent by any third-party sender (over HTTP of
-     * course).
-     * 
-     * @return A map associating http header names to their values.
-     */
-    public Map<String, String> getHttpHeaders() {
-        return mHttpHeaders;
-    }
-
-    /**
-     * @return List of ReportField that ACRA will provide to the server.
-     */
-    public List<ReportField> getReportFields() {
-        final ReportField[] customReportFields = customReportContent();
-
-        final ReportField[] fieldsList;
-        if (customReportFields.length != 0) {
-            ACRA.log.d(LOG_TAG, "Using custom Report Fields");
-            fieldsList = customReportFields;
-        } else if (mailTo() == null || "".equals(mailTo())) {
-            ACRA.log.d(LOG_TAG, "Using default Report Fields");
-            fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
-        } else {
-            ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
-            fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
-        }
-        return Arrays.asList(fieldsList);
-    }
-
-    /**
-     * @param additionalDropboxTags
-     *            the additionalDropboxTags to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setAdditionalDropboxTags(String[] additionalDropboxTags) {
-        this.mAdditionalDropboxTags = additionalDropboxTags;
-        return this;
-    }
-
-    /**
-     * @param additionalSharedPreferences
-     *            the additionalSharedPreferences to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setAdditionalSharedPreferences(String[] additionalSharedPreferences) {
-        this.mAdditionalSharedPreferences = additionalSharedPreferences;
-        return this;
-    }
-
-    /**
-     * @param connectionTimeout
-     *            the connectionTimeout to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setConnectionTimeout(Integer connectionTimeout) {
-        this.mConnectionTimeout = connectionTimeout;
-        return this;
-    }
-
-    /**
-     * @param customReportContent
-     *            the customReportContent to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setCustomReportContent(ReportField[] customReportContent) {
-        this.mCustomReportContent = customReportContent;
-        return this;
-    }
-
-    /**
-     * @param deleteUnapprovedReportsOnApplicationStart
-     *            the deleteUnapprovedReportsOnApplicationStart to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setDeleteUnapprovedReportsOnApplicationStart(Boolean deleteUnapprovedReportsOnApplicationStart) {
-        this.mDeleteUnapprovedReportsOnApplicationStart = deleteUnapprovedReportsOnApplicationStart;
-        return this;
-    }
-
-    /**
-     * @param deleteOldUnsentReportsOnApplicationStart    When to delete old (unsent) reports on startup.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setDeleteOldUnsentReportsOnApplicationStart(Boolean deleteOldUnsentReportsOnApplicationStart) {
-        this.mDeleteOldUnsentReportsOnApplicationStart = deleteOldUnsentReportsOnApplicationStart;
-        return this;
-    }
-
-    /**
-     * @param dropboxCollectionMinutes
-     *            the dropboxCollectionMinutes to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setDropboxCollectionMinutes(Integer dropboxCollectionMinutes) {
-        this.mDropboxCollectionMinutes = dropboxCollectionMinutes;
-        return this;
-    }
-
-    /**
-     * @param forceCloseDialogAfterToast
-     *            the forceCloseDialogAfterToast to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setForceCloseDialogAfterToast(Boolean forceCloseDialogAfterToast) {
-        this.mForceCloseDialogAfterToast = forceCloseDialogAfterToast;
-        return this;
-    }
-
-    /**
-     * Modify the formUri of your backend server receiving reports. You need to
-     * call {@link ErrorReporter#setDefaultReportSenders()} after modifying this
-     * value if you were not using a formUri before (a mailTo or formKey
-     * instead).
-     * 
-     * @param formUri
-     *            the formUri to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setFormUri(String formUri) {
-        this.mFormUri = formUri;
-        return this;
-    }
-
-    /**
-     * @param formUriBasicAuthLogin
-     *            the formUriBasicAuthLogin to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setFormUriBasicAuthLogin(String formUriBasicAuthLogin) {
-        this.mFormUriBasicAuthLogin = formUriBasicAuthLogin;
-        return this;
-    }
-
-    /**
-     * @param formUriBasicAuthPassword
-     *            the formUriBasicAuthPassword to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setFormUriBasicAuthPassword(String formUriBasicAuthPassword) {
-        this.mFormUriBasicAuthPassword = formUriBasicAuthPassword;
-        return this;
-    }
-
-    /**
-     * @param includeDropboxSystemTags
-     *            the includeDropboxSystemTags to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setIncludeDropboxSystemTags(Boolean includeDropboxSystemTags) {
-        this.mIncludeDropboxSystemTags = includeDropboxSystemTags;
-        return this;
-    }
-
-    /**
-     * @param logcatArguments
-     *            the logcatArguments to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setLogcatArguments(String[] logcatArguments) {
-        this.mLogcatArguments = logcatArguments;
-        return this;
-    }
-
-    /**
-     * Modify the mailTo of the mail account receiving reports. You need to call
-     * {@link ErrorReporter#setDefaultReportSenders()} after modifying this
-     * value if you were not using a formKey before (a formKey or formUri
-     * instead).
-     * 
-     * @param mailTo
-     *            the mailTo to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setMailTo(String mailTo) {
-        this.mMailTo = mailTo;
-        return this;
-    }
-
-    /**
-     * @param maxNumberOfRequestRetries
-     *            the maxNumberOfRequestRetries to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setMaxNumberOfRequestRetries(Integer maxNumberOfRequestRetries) {
-        this.mMaxNumberOfRequestRetries = maxNumberOfRequestRetries;
-        return this;
-    }
-
-    /**
-     * Change the current {@link ReportingInteractionMode}. You must set
-     * required configuration items first.
-     * 
-     * @param mode
-     *            the new mode to set.
-     * @return The updated ACRA configuration
-     * @throws ACRAConfigurationException
-     *             if a configuration item is missing for this mode.
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setMode(ReportingInteractionMode mode) throws ACRAConfigurationException {
-        this.mMode = mode;
-        ACRA.checkCrashResources(this);
-        return this;
-    }
-
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogPositiveButtonText(int resId) {
-        mResDialogPositiveButtonText = resId;
-        return this;
-    }
-
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogNegativeButtonText(int resId) {
-        mResDialogNegativeButtonText = resId;
-        return this;
-    }
-
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setReportDialogClass(Class<? extends BaseCrashReportDialog> reportDialogClass) {
-        mReportDialogClass = reportDialogClass;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogCommentPrompt()} comes from an Android
-     * Library Project.
-     * 
-     * @param resId
-     *            The resource id, see
-     *            {@link ReportsCrashes#resDialogCommentPrompt()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogCommentPrompt(int resId) {
-        mResDialogCommentPrompt = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogEmailPrompt()} comes from an Android
-     * Library Project.
-     * 
-     * @param resId
-     *            The resource id, see
-     *            {@link ReportsCrashes#resDialogEmailPrompt()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogEmailPrompt(int resId) {
-        mResDialogEmailPrompt = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogIcon()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogIcon()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogIcon(int resId) {
-        mResDialogIcon = resId;
-        return this;
-    }
-
-    /**
-     * Use this method BEFORE if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogOkToast()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogOkToast()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogOkToast(int resId) {
-        mResDialogOkToast = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogText()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogText()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogText(int resId) {
-        mResDialogText = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogTitle()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resDialogTitle()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResDialogTitle(int resId) {
-        mResDialogTitle = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifIcon()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resNotifIcon()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResNotifIcon(int resId) {
-        mResNotifIcon = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifText()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resNotifText()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResNotifText(int resId) {
-        mResNotifText = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifTickerText()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see
-     *            {@link ReportsCrashes#resNotifTickerText()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResNotifTickerText(int resId) {
-        mResNotifTickerText = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifTitle()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resNotifTitle()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResNotifTitle(int resId) {
-        mResNotifTitle = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resToastText()} comes from an Android Library
-     * Project.
-     * 
-     * @param resId
-     *            The resource id, see {@link ReportsCrashes#resToastText()}
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setResToastText(int resId) {
-        mResToastText = resId;
-        return this;
-    }
-
-    /**
-     * @param sharedPreferenceMode
-     *            the sharedPreferenceMode to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setSharedPreferenceMode(Integer sharedPreferenceMode) {
-        this.mSharedPreferenceMode = sharedPreferenceMode;
-        return this;
-    }
-
-    /**
-     * @param sharedPreferenceName
-     *            the sharedPreferenceName to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setSharedPreferenceName(String sharedPreferenceName) {
-        this.mSharedPreferenceName = sharedPreferenceName;
-        return this;
-    }
-
-    /**
-     * @param socketTimeout
-     *            the socketTimeout to set
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setSocketTimeout(Integer socketTimeout) {
-        this.mSocketTimeout = socketTimeout;
-        return this;
-    }
-
-    /**
-     * 
-     * @param filterByPid
-     *            true if you want to collect only logcat lines related to your
-     *            application process.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setLogcatFilterByPid(Boolean filterByPid) {
-        mLogcatFilterByPid = filterByPid;
-        return this;
-    }
-
-    /**
-     * 
-     * @param sendReportsInDevMode
-     *            false if you want to disable sending reports in development
-     *            mode. Reports will be sent only on signed applications.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setSendReportsInDevMode(Boolean sendReportsInDevMode) {
-        mSendReportsInDevMode = sendReportsInDevMode;
-        return this;
-    }
-
-    /**
-     * 
-     * @param sendReportsAtShutdown
-     *            false if you want to disable sending reports at the time the
-     *            exception is caught. Reports will be sent when the application
-     *            is restarted.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setSendReportsAtShutdown(Boolean sendReportsAtShutdown) {
-        mSendReportsAtShutdown = sendReportsAtShutdown;
-        return this;
-    }
-
-    /**
-     * 
-     * @param excludeMatchingSharedPreferencesKeys
-     *            an array of Strings containing regexp defining
-     *            SharedPreferences keys that should be excluded from the data
-     *            collection.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingSharedPreferencesKeys) {
-        mExcludeMatchingSharedPreferencesKeys = excludeMatchingSharedPreferencesKeys;
-        return this;
-    }
-
-    /**
-     * 
-     * @param excludeMatchingSettingsKeys
-     *            an array of Strings containing regexp defining
-     *            Settings.System, Settings.Secure and Settings.Global keys that
-     *            should be excluded from the data collection.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setExcludeMatchingSettingsKeys(String[] excludeMatchingSettingsKeys) {
-        mExcludeMatchingSettingsKeys = excludeMatchingSettingsKeys;
-        return this;
-    }
-
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setBuildConfigClass(Class buildConfigClass) {
-        mBuildConfigClass = buildConfigClass;
-        return this;
-    }
-    /**
-     * 
-     * @param applicationLogFile
-     *            The path and file name of your application log file, to be
-     *            used with {@link ReportField#APPLICATION_LOG}.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setApplicationLogFile(String applicationLogFile) {
-        mApplicationLogFile = applicationLogFile;
-        return this;
-    }
-
-    /**
-     * 
-     * @param applicationLogFileLines
-     *            The number of lines of your application log to be collected,
-     *            to be used with {@link ReportField#APPLICATION_LOG} and
-     *            {@link ReportsCrashes#applicationLogFile()}.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setApplicationLogFileLines(int applicationLogFileLines) {
-        mApplicationLogFileLines = applicationLogFileLines;
-        return this;
-    }
-
-    /**
-     * 
-     * @param disableSSLCertValidation
-     *            Set this to true if you need to send reports to a server over
-     *            SSL using a self-signed certificate.
-     * @return The updated ACRA configuration
-     */
-    public ACRAConfiguration setDisableSSLCertValidation(boolean disableSSLCertValidation) {
-        mDisableSSLCertValidation = disableSSLCertValidation;
-        return this;
-    }
-
-    /**
-     * 
-     * @param httpMethod
-     *            The method to be used to send data to the server.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setHttpMethod(Method httpMethod) {
-        mHttpMethod = httpMethod;
-        return this;
-    }
-
-    /**
-     * 
-     * @param type
-     *            The type of content encoding to be used to send data to the
-     *            server.
-     * @return The updated ACRA configuration
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration setReportType(Type type) {
-        mReportType = type;
-        return this;
-    }
-
-    /**
-     * 
-     * @param keyStore
-     *            Set this to the keystore that contains the trusted certificates
-     */
-    @SuppressWarnings( "unused" )
-    public void setKeyStore(KeyStore keyStore) {
-        mKeyStore = keyStore;
-    }
-
-    /**
-     * @param defaults  Defaults with which to initialise this {@link ACRAConfiguration}.
-     */
-    public ACRAConfiguration(ReportsCrashes defaults) {
-        mReportsCrashes = defaults;
-    }
-
-    /**
-     * Empty constructor which sets no defaults.
-     */
-    @SuppressWarnings( "unused" )
-    public ACRAConfiguration(){
-        this(null);
-    }
-
-    @Override
-    public String[] additionalDropBoxTags() {
-        if (mAdditionalDropboxTags != null) {
-            return mAdditionalDropboxTags;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.additionalDropBoxTags();
-        }
-
-        return new String[0];
-    }
-
-    @Override
-    public String[] additionalSharedPreferences() {
-        if (mAdditionalSharedPreferences != null) {
-            return mAdditionalSharedPreferences;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.additionalSharedPreferences();
-        }
-
-        return new String[0];
-    }
-
-    @Override
-    public Class<? extends Annotation> annotationType() {
-        return mReportsCrashes.annotationType();
-    }
-
-    @Override
-    public int connectionTimeout() {
-        if (mConnectionTimeout != null) {
-            return mConnectionTimeout;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.connectionTimeout();
-        }
-
-        return DEFAULT_CONNECTION_TIMEOUT;
-    }
-
-    @Override
-    public ReportField[] customReportContent() {
-        if (mCustomReportContent != null) {
-            return mCustomReportContent;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.customReportContent();
-        }
-
-        return new ReportField[0];
-    }
-
-    @Override
-    public boolean deleteUnapprovedReportsOnApplicationStart() {
-        if (mDeleteUnapprovedReportsOnApplicationStart != null) {
-            return mDeleteUnapprovedReportsOnApplicationStart;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.deleteUnapprovedReportsOnApplicationStart();
-        }
-
-        return DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
-    }
-
-    @Override
-    public boolean deleteOldUnsentReportsOnApplicationStart() {
-        if (mDeleteOldUnsentReportsOnApplicationStart != null) {
-            return mDeleteOldUnsentReportsOnApplicationStart;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.deleteOldUnsentReportsOnApplicationStart();
-        }
-
-        return DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
-    }
-
-    @Override
-    public int dropboxCollectionMinutes() {
-        if (mDropboxCollectionMinutes != null) {
-            return mDropboxCollectionMinutes;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.dropboxCollectionMinutes();
-        }
-
-        return DEFAULT_DROPBOX_COLLECTION_MINUTES;
-    }
-
-    @Override
-    public boolean forceCloseDialogAfterToast() {
-        if (mForceCloseDialogAfterToast != null) {
-            return mForceCloseDialogAfterToast;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.forceCloseDialogAfterToast();
-        }
-
-        return DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST;
-    }
-
-    @Override
-    public String formUri() {
-        if (mFormUri != null) {
-            return mFormUri;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.formUri();
-        }
-
-        return DEFAULT_STRING_VALUE;
-    }
-
-    @Override
-    public String formUriBasicAuthLogin() {
-        if (mFormUriBasicAuthLogin != null) {
-            return mFormUriBasicAuthLogin;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.formUriBasicAuthLogin();
-        }
-
-        return NULL_VALUE;
-    }
-
-    @Override
-    public String formUriBasicAuthPassword() {
-        if (mFormUriBasicAuthPassword != null) {
-            return mFormUriBasicAuthPassword;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.formUriBasicAuthPassword();
-        }
-
-        return NULL_VALUE;
-    }
-
-    @Override
-    public boolean includeDropBoxSystemTags() {
-        if (mIncludeDropboxSystemTags != null) {
-            return mIncludeDropboxSystemTags;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.includeDropBoxSystemTags();
-        }
-
-        return DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
-    }
-
-    @Override
-    public String[] logcatArguments() {
-        if (mLogcatArguments != null) {
-            return mLogcatArguments;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.logcatArguments();
-        }
-
-        return new String[] { "-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time" };
-    }
-
-    @Override
-    public String mailTo() {
-        if (mMailTo != null) {
-            return mMailTo;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.mailTo();
-        }
-
-        return DEFAULT_STRING_VALUE;
-    }
-
-    @Override
-    public int maxNumberOfRequestRetries() {
-        if (mMaxNumberOfRequestRetries != null) {
-            return mMaxNumberOfRequestRetries;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.maxNumberOfRequestRetries();
-        }
-
-        return DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES;
-    }
-
-    @Override
-    public ReportingInteractionMode mode() {
-        if (mMode != null) {
-            return mMode;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.mode();
-        }
-
-        return ReportingInteractionMode.SILENT;
-    }
-
-    @Override
-    public int resDialogPositiveButtonText() {
-        if (mResDialogPositiveButtonText != null) {
-            return mResDialogPositiveButtonText;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogPositiveButtonText();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resDialogNegativeButtonText() {
-        if (mResDialogNegativeButtonText != null) {
-            return mResDialogNegativeButtonText;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogNegativeButtonText();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resDialogCommentPrompt() {
-        if (mResDialogCommentPrompt != null) {
-            return mResDialogCommentPrompt;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogCommentPrompt();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resDialogEmailPrompt() {
-        if (mResDialogEmailPrompt != null) {
-            return mResDialogEmailPrompt;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogEmailPrompt();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resDialogIcon() {
-        if (mResDialogIcon != null) {
-            return mResDialogIcon;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogIcon();
-        }
-
-        return DEFAULT_DIALOG_ICON;
-    }
-
-    @Override
-    public int resDialogOkToast() {
-        if (mResDialogOkToast != null) {
-            return mResDialogOkToast;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogOkToast();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resDialogText() {
-        if (mResDialogText != null) {
-            return mResDialogText;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogText();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resDialogTitle() {
-        if (mResDialogTitle != null) {
-            return mResDialogTitle;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resDialogTitle();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resNotifIcon() {
-        if (mResNotifIcon != null) {
-            return mResNotifIcon;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resNotifIcon();
-        }
-
-        return DEFAULT_NOTIFICATION_ICON;
-    }
-
-    @Override
-    public int resNotifText() {
-        if (mResNotifText != null) {
-            return mResNotifText;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resNotifText();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resNotifTickerText() {
-        if (mResNotifTickerText != null) {
-            return mResNotifTickerText;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resNotifTickerText();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resNotifTitle() {
-        if (mResNotifTitle != null) {
-            return mResNotifTitle;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resNotifTitle();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int resToastText() {
-        if (mResToastText != null) {
-            return mResToastText;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.resToastText();
-        }
-
-        return DEFAULT_RES_VALUE;
-    }
-
-    @Override
-    public int sharedPreferencesMode() {
-        if (mSharedPreferenceMode != null) {
-            return mSharedPreferenceMode;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.sharedPreferencesMode();
-        }
-
-        return DEFAULT_SHARED_PREFERENCES_MODE;
-    }
-
-    @Override
-    public String sharedPreferencesName() {
-        if (mSharedPreferenceName != null) {
-            return mSharedPreferenceName;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.sharedPreferencesName();
-        }
-
-        return DEFAULT_STRING_VALUE;
-    }
-
-    @Override
-    public int socketTimeout() {
-        if (mSocketTimeout != null) {
-            return mSocketTimeout;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.socketTimeout();
-        }
-
-        return DEFAULT_SOCKET_TIMEOUT;
-    }
-
-    @Override
-    public boolean logcatFilterByPid() {
-        if (mLogcatFilterByPid != null) {
-            return mLogcatFilterByPid;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.logcatFilterByPid();
-        }
-
-        return DEFAULT_LOGCAT_FILTER_BY_PID;
-    }
-
-    @Override
-    public boolean sendReportsInDevMode() {
-        if (mSendReportsInDevMode != null) {
-            return mSendReportsInDevMode;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.sendReportsInDevMode();
-        }
-
-        return DEFAULT_SEND_REPORTS_IN_DEV_MODE;
-    }
-
-    @Override
-    public boolean sendReportsAtShutdown() {
-        if (mSendReportsAtShutdown != null) {
-            return mSendReportsAtShutdown;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.sendReportsAtShutdown();
-        }
-
-        return DEFAULT_SEND_REPORTS_AT_SHUTDOWN;
-    }
-
-    @Override
-    public String[] excludeMatchingSharedPreferencesKeys() {
-        if (mExcludeMatchingSharedPreferencesKeys != null) {
-            return mExcludeMatchingSharedPreferencesKeys;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.excludeMatchingSharedPreferencesKeys();
-        }
-
-        return new String[0];
-    }
-
-    @Override
-    public String[] excludeMatchingSettingsKeys() {
-        if (mExcludeMatchingSettingsKeys != null) {
-            return mExcludeMatchingSettingsKeys;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.excludeMatchingSettingsKeys();
-        }
-
-        return new String[0];
-    }
-
-    @Override
-    /**
-     * Will return null if no value has been configured.
-     * It is up to clients to construct the recommended default value oof context.getClass().getPackage().getName() + BuildConfig.class
-     */
-    public Class buildConfigClass() {
-        if (mBuildConfigClass != null) {
-            return mBuildConfigClass;
-        }
-
-        if ((mReportsCrashes != null) && (mReportsCrashes.buildConfigClass() != null)) {
-            return mReportsCrashes.buildConfigClass();
-        }
-
-        return null;
-    }
-
-    @Override
-    public String applicationLogFile() {
-        if (mApplicationLogFile != null) {
-            return mApplicationLogFile;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.applicationLogFile();
-        }
-
-        return DEFAULT_APPLICATION_LOGFILE;
-    }
-
-    @Override
-    public int applicationLogFileLines() {
-        if (mApplicationLogFileLines != null) {
-            return mApplicationLogFileLines;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.applicationLogFileLines();
-        }
-
-        return DEFAULT_APPLICATION_LOGFILE_LINES;
-    }
-
-    @Override
-    public boolean disableSSLCertValidation() {
-        if (mDisableSSLCertValidation != null) {
-            return mDisableSSLCertValidation;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.disableSSLCertValidation();
-        }
-
-        return DEFAULT_DISABLE_SSL_CERT_VALIDATION;
-    }
-
-    @Override
-    public String httpsSocketFactoryFactoryClass() {
-        if (mHttpsSocketFactoryFactoryClass != null) {
-            return mHttpsSocketFactoryFactoryClass;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.httpsSocketFactoryFactoryClass();
-        }
-
-        return null;
-    }
-
-
-    @Override
-    public Class<? extends BaseCrashReportDialog> reportDialogClass() {
-        if (mReportDialogClass != null) {
-            return mReportDialogClass;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.reportDialogClass();
-        }
-
-        return CrashReportDialog.class;
-    }
-
-    /**
-     * @param httpsSocketFactoryFactory  HttpsSocketFactoryFactory to set.
-     */
-    @SuppressWarnings( "unused" )
-    public void setHttpsSocketFactoryFactory(HttpsSocketFactoryFactory httpsSocketFactoryFactory) {
-        this.mHttpsSocketFactoryFactory = httpsSocketFactoryFactory;
-    }
-
-    public HttpsSocketFactoryFactory getHttpSocketFactoryFactory() {
-        if (mHttpsSocketFactoryFactory != null) {
-            return mHttpsSocketFactoryFactory;
-        }
-
-        final String httpsSocketFactoryFactoryClass = httpsSocketFactoryFactoryClass();
-        if (httpsSocketFactoryFactoryClass != null) {
-            try {
-                final Object object = reflectionHelper.create(mReportsCrashes.httpsSocketFactoryFactoryClass());
-                if (object instanceof HttpsSocketFactoryFactory) {
-                    mHttpsSocketFactoryFactory = (HttpsSocketFactoryFactory) object;
-                } else {
-                    ACRA.log.w(LOG_TAG, "Using default httpsSocketFactoryFactory - not a HttpSocketFactoryFactory : " + httpsSocketFactoryFactoryClass);
-                }
-            } catch (ReflectionException e) {
-                ACRA.log.w(LOG_TAG, "Using default httpsSocketFactoryFactory - Could not construct : " + httpsSocketFactoryFactoryClass);
-            }
-        }
-
-        // If it's still null then take the default
-        if (mHttpsSocketFactoryFactoryClass == null) {
-            mHttpsSocketFactoryFactory = DefaultHttpsSocketFactoryFactory.INSTANCE;
-        }
-
-        return mHttpsSocketFactoryFactory;
-    }
-
-
-    @Override
-    public Method httpMethod() {
-        if (mHttpMethod != null) {
-            return mHttpMethod;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.httpMethod();
-        }
-
-        return Method.POST;
-    }
-
-    @Override
-    public Type reportType() {
-        if (mReportType != null) {
-            return mReportType;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.reportType();
-        }
-
-        return Type.FORM;
-    }
-
-    public KeyStore keyStore() {
-        if (mKeyStore != null) {
-            return mKeyStore;
-        }
-
-        return null;
-    }
-
-    public static boolean isNull(String aString) {
-        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
-    }
-
-}
+/*
+ *  Copyright 2011 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.config;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.ReportingInteractionMode;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.builder.NoOpReportPrimer;
+import org.acra.builder.ReportPrimer;
+import org.acra.dialog.BaseCrashReportDialog;
+import org.acra.dialog.CrashReportDialog;
+import org.acra.sender.DefaultReportSenderFactory;
+import org.acra.sender.HttpSender;
+import org.acra.sender.HttpSender.Method;
+import org.acra.sender.HttpSender.Type;
+import org.acra.sender.ReportSenderFactory;
+
+import java.io.Serializable;
+import java.lang.annotation.Annotation;
+import java.security.KeyStore;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ACRAConstants.*;
+
+/**
+ * This class is to be used if you need to apply dynamic settings. This is
+ * needed for example when using ACRA in an Android Library Project since ADT
+ * v14 where resource ids are not final anymore and can't be passed as
+ * annotation parameters values.
+ */
+public class ACRAConfiguration implements ACRAConfig, Serializable {
+
+    private String[] mAdditionalDropboxTags = null;
+
+    private String[] mAdditionalSharedPreferences = null;
+    private Integer mConnectionTimeout = null;
+    private ReportField[] mCustomReportContent = null;
+    private Boolean mDeleteUnapprovedReportsOnApplicationStart = null;
+    private Boolean mDeleteOldUnsentReportsOnApplicationStart = null;
+    private Integer mDropboxCollectionMinutes = null;
+    private Boolean mForceCloseDialogAfterToast = null;
+    private String mFormUri = null;
+    private String mFormUriBasicAuthLogin = null;
+    private String mFormUriBasicAuthPassword = null;
+    private Boolean mIncludeDropboxSystemTags = null;
+
+    private String[] mLogcatArguments = null;
+    private String mMailTo = null;
+    private ReportingInteractionMode mMode = null;
+    private ReportsCrashes mReportsCrashes = null;
+    private Class<? extends BaseCrashReportDialog> mReportDialogClass = null;
+    private Class<? extends ReportPrimer> reportPrimerClass = null;
+
+    private Integer mResDialogPositiveButtonText = null;
+    private Integer mResDialogNegativeButtonText = null;
+    private Integer mResDialogCommentPrompt = null;
+    private Integer mResDialogEmailPrompt = null;
+    private Integer mResDialogIcon = null;
+    private Integer mResDialogOkToast = null;
+    private Integer mResDialogText = null;
+    private Integer mResDialogTitle = null;
+    private Integer mResNotifIcon = null;
+    private Integer mResNotifText = null;
+    private Integer mResNotifTickerText = null;
+    private Integer mResNotifTitle = null;
+    private Integer mResToastText = null;
+    private Integer mSharedPreferenceMode = null;
+    private String mSharedPreferenceName = null;
+    private Integer mSocketTimeout = null;
+    private Boolean mLogcatFilterByPid = null;
+    private Boolean mSendReportsInDevMode = null;
+    private Boolean mSendReportsAtShutdown = null;
+
+    private String[] mExcludeMatchingSharedPreferencesKeys = null;
+    private String[] mExcludeMatchingSettingsKeys = null;
+    private Class mBuildConfigClass;
+    private String mApplicationLogFile = null;
+    private Integer mApplicationLogFileLines = null;
+
+    private Method mHttpMethod = null;
+    private Type mReportType = null;
+    private Map<String, String> mHttpHeaders;
+    private KeyStore mKeyStore;
+    private Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses;
+
+
+    /**
+     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
+     * This should be used also by third party senders.
+     * 
+     * @param headers
+     *            A map associating HTTP header names to their values.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
+        this.mHttpHeaders = headers;
+        return this;
+    }
+
+    /**
+     * Retrieve HTTP headers defined by the application developer. These should
+     * be added to requests sent by any third-party sender (over HTTP of
+     * course).
+     * 
+     * @return A map associating http header names to their values.
+     */
+    public Map<String, String> getHttpHeaders() {
+        return mHttpHeaders;
+    }
+
+    /**
+     * @return List of ReportField that ACRA will provide to the server.
+     */
+    public List<ReportField> getReportFields() {
+        final ReportField[] customReportFields = customReportContent();
+
+        final ReportField[] fieldsList;
+        if (customReportFields.length != 0) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using custom Report Fields");
+            fieldsList = customReportFields;
+        } else if (mailTo() == null || "".equals(mailTo())) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Report Fields");
+            fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
+        } else {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
+            fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
+        }
+        return Arrays.asList(fieldsList);
+    }
+
+    /**
+     * @param additionalDropboxTags
+     *            the additionalDropboxTags to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setAdditionalDropboxTags(String[] additionalDropboxTags) {
+        this.mAdditionalDropboxTags = additionalDropboxTags;
+        return this;
+    }
+
+    /**
+     * @param additionalSharedPreferences
+     *            the additionalSharedPreferences to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setAdditionalSharedPreferences(String[] additionalSharedPreferences) {
+        this.mAdditionalSharedPreferences = additionalSharedPreferences;
+        return this;
+    }
+
+    /**
+     * @param connectionTimeout
+     *            the connectionTimeout to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setConnectionTimeout(Integer connectionTimeout) {
+        this.mConnectionTimeout = connectionTimeout;
+        return this;
+    }
+
+    /**
+     * @param customReportContent
+     *            the customReportContent to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setCustomReportContent(ReportField[] customReportContent) {
+        this.mCustomReportContent = customReportContent;
+        return this;
+    }
+
+    /**
+     * @param deleteUnapprovedReportsOnApplicationStart
+     *            the deleteUnapprovedReportsOnApplicationStart to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setDeleteUnapprovedReportsOnApplicationStart(Boolean deleteUnapprovedReportsOnApplicationStart) {
+        this.mDeleteUnapprovedReportsOnApplicationStart = deleteUnapprovedReportsOnApplicationStart;
+        return this;
+    }
+
+    /**
+     * @param deleteOldUnsentReportsOnApplicationStart    When to delete old (unsent) reports on startup.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setDeleteOldUnsentReportsOnApplicationStart(Boolean deleteOldUnsentReportsOnApplicationStart) {
+        this.mDeleteOldUnsentReportsOnApplicationStart = deleteOldUnsentReportsOnApplicationStart;
+        return this;
+    }
+
+    /**
+     * @param dropboxCollectionMinutes
+     *            the dropboxCollectionMinutes to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setDropboxCollectionMinutes(Integer dropboxCollectionMinutes) {
+        this.mDropboxCollectionMinutes = dropboxCollectionMinutes;
+        return this;
+    }
+
+    /**
+     * @param forceCloseDialogAfterToast
+     *            the forceCloseDialogAfterToast to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setForceCloseDialogAfterToast(Boolean forceCloseDialogAfterToast) {
+        this.mForceCloseDialogAfterToast = forceCloseDialogAfterToast;
+        return this;
+    }
+
+    /**
+     * Modify the formUri of your backend server receiving reports.
+     * 
+     * @param formUri   formUri to set.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setFormUri(String formUri) {
+        this.mFormUri = formUri;
+        return this;
+    }
+
+    /**
+     * @param formUriBasicAuthLogin
+     *            the formUriBasicAuthLogin to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setFormUriBasicAuthLogin(String formUriBasicAuthLogin) {
+        this.mFormUriBasicAuthLogin = formUriBasicAuthLogin;
+        return this;
+    }
+
+    /**
+     * @param formUriBasicAuthPassword
+     *            the formUriBasicAuthPassword to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setFormUriBasicAuthPassword(String formUriBasicAuthPassword) {
+        this.mFormUriBasicAuthPassword = formUriBasicAuthPassword;
+        return this;
+    }
+
+    /**
+     * @param includeDropboxSystemTags
+     *            the includeDropboxSystemTags to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setIncludeDropboxSystemTags(Boolean includeDropboxSystemTags) {
+        this.mIncludeDropboxSystemTags = includeDropboxSystemTags;
+        return this;
+    }
+
+    /**
+     * @param logcatArguments
+     *            the logcatArguments to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setLogcatArguments(String[] logcatArguments) {
+        this.mLogcatArguments = logcatArguments;
+        return this;
+    }
+
+    /**
+     * Modify the mailTo of the mail account receiving reports.
+     * 
+     * @param mailTo    mailTo to set.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setMailTo(String mailTo) {
+        this.mMailTo = mailTo;
+        return this;
+    }
+
+    /**
+     * Change the current {@link ReportingInteractionMode}. You must set
+     * required configuration items first.
+     * 
+     * @param mode
+     *            the new mode to set.
+     * @return The updated ACRA configuration
+     * @throws ACRAConfigurationException
+     *             if a configuration item is missing for this mode.
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setMode(ReportingInteractionMode mode) throws ACRAConfigurationException {
+        this.mMode = mode;
+        checkCrashResources();
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogPositiveButtonText(int resId) {
+        mResDialogPositiveButtonText = resId;
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogNegativeButtonText(int resId) {
+        mResDialogNegativeButtonText = resId;
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setReportDialogClass(Class<? extends BaseCrashReportDialog> reportDialogClass) {
+        mReportDialogClass = reportDialogClass;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resDialogCommentPrompt()} comes from an Android
+     * Library Project.
+     * 
+     * @param resId
+     *            The resource id, see
+     *            {@link ReportsCrashes#resDialogCommentPrompt()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogCommentPrompt(int resId) {
+        mResDialogCommentPrompt = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resDialogEmailPrompt()} comes from an Android
+     * Library Project.
+     * 
+     * @param resId
+     *            The resource id, see
+     *            {@link ReportsCrashes#resDialogEmailPrompt()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogEmailPrompt(int resId) {
+        mResDialogEmailPrompt = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resDialogIcon()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resDialogIcon()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogIcon(int resId) {
+        mResDialogIcon = resId;
+        return this;
+    }
+
+    /**
+     * Use this method BEFORE if the id you wanted to give to
+     * {@link ReportsCrashes#resDialogOkToast()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resDialogOkToast()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogOkToast(int resId) {
+        mResDialogOkToast = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resDialogText()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resDialogText()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogText(int resId) {
+        mResDialogText = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resDialogTitle()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resDialogTitle()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogTitle(int resId) {
+        mResDialogTitle = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resNotifIcon()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resNotifIcon()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifIcon(int resId) {
+        mResNotifIcon = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resNotifText()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resNotifText()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifText(int resId) {
+        mResNotifText = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resNotifTickerText()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see
+     *            {@link ReportsCrashes#resNotifTickerText()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifTickerText(int resId) {
+        mResNotifTickerText = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resNotifTitle()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resNotifTitle()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifTitle(int resId) {
+        mResNotifTitle = resId;
+        return this;
+    }
+
+    /**
+     * Use this method if the id you wanted to give to
+     * {@link ReportsCrashes#resToastText()} comes from an Android Library
+     * Project.
+     * 
+     * @param resId
+     *            The resource id, see {@link ReportsCrashes#resToastText()}
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResToastText(int resId) {
+        mResToastText = resId;
+        return this;
+    }
+
+    /**
+     * @param sharedPreferenceMode
+     *            the sharedPreferenceMode to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSharedPreferenceMode(Integer sharedPreferenceMode) {
+        this.mSharedPreferenceMode = sharedPreferenceMode;
+        return this;
+    }
+
+    /**
+     * @param sharedPreferenceName
+     *            the sharedPreferenceName to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSharedPreferenceName(String sharedPreferenceName) {
+        this.mSharedPreferenceName = sharedPreferenceName;
+        return this;
+    }
+
+    /**
+     * @param socketTimeout
+     *            the socketTimeout to set
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSocketTimeout(Integer socketTimeout) {
+        this.mSocketTimeout = socketTimeout;
+        return this;
+    }
+
+    /**
+     * 
+     * @param filterByPid
+     *            true if you want to collect only logcat lines related to your
+     *            application process.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setLogcatFilterByPid(Boolean filterByPid) {
+        mLogcatFilterByPid = filterByPid;
+        return this;
+    }
+
+    /**
+     * 
+     * @param sendReportsInDevMode
+     *            false if you want to disable sending reports in development
+     *            mode. Reports will be sent only on signed applications.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSendReportsInDevMode(Boolean sendReportsInDevMode) {
+        mSendReportsInDevMode = sendReportsInDevMode;
+        return this;
+    }
+
+    /**
+     * 
+     * @param sendReportsAtShutdown
+     *            false if you want to disable sending reports at the time the
+     *            exception is caught. Reports will be sent when the application
+     *            is restarted.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSendReportsAtShutdown(Boolean sendReportsAtShutdown) {
+        mSendReportsAtShutdown = sendReportsAtShutdown;
+        return this;
+    }
+
+    /**
+     * 
+     * @param excludeMatchingSharedPreferencesKeys
+     *            an array of Strings containing regexp defining
+     *            SharedPreferences keys that should be excluded from the data
+     *            collection.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingSharedPreferencesKeys) {
+        mExcludeMatchingSharedPreferencesKeys = excludeMatchingSharedPreferencesKeys;
+        return this;
+    }
+
+    /**
+     * 
+     * @param excludeMatchingSettingsKeys
+     *            an array of Strings containing regexp defining
+     *            Settings.System, Settings.Secure and Settings.Global keys that
+     *            should be excluded from the data collection.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setExcludeMatchingSettingsKeys(String[] excludeMatchingSettingsKeys) {
+        mExcludeMatchingSettingsKeys = excludeMatchingSettingsKeys;
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setBuildConfigClass(Class buildConfigClass) {
+        mBuildConfigClass = buildConfigClass;
+        return this;
+    }
+    /**
+     * 
+     * @param applicationLogFile
+     *            The path and file name of your application log file, to be
+     *            used with {@link ReportField#APPLICATION_LOG}.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setApplicationLogFile(String applicationLogFile) {
+        mApplicationLogFile = applicationLogFile;
+        return this;
+    }
+
+    /**
+     * 
+     * @param applicationLogFileLines
+     *            The number of lines of your application log to be collected,
+     *            to be used with {@link ReportField#APPLICATION_LOG} and
+     *            {@link ReportsCrashes#applicationLogFile()}.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setApplicationLogFileLines(int applicationLogFileLines) {
+        mApplicationLogFileLines = applicationLogFileLines;
+        return this;
+    }
+
+    /**
+     * 
+     * @param httpMethod
+     *            The method to be used to send data to the server.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setHttpMethod(Method httpMethod) {
+        mHttpMethod = httpMethod;
+        return this;
+    }
+
+    /**
+     * 
+     * @param type
+     *            The type of content encoding to be used to send data to the
+     *            server.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setReportType(Type type) {
+        mReportType = type;
+        return this;
+    }
+
+    /**
+     * 
+     * @param keyStore
+     *            Set this to the keystore that contains the trusted certificates
+     */
+    @SuppressWarnings( "unused" )
+    public void setKeyStore(KeyStore keyStore) {
+        mKeyStore = keyStore;
+    }
+
+    /**
+     * @param defaults  Defaults with which to initialise this {@link ACRAConfiguration}.
+     */
+    public ACRAConfiguration(ReportsCrashes defaults) {
+        mReportsCrashes = defaults;
+    }
+
+    /**
+     * Empty constructor which sets no defaults.
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration(){
+        this(null);
+    }
+
+    @Override
+    public String[] additionalDropBoxTags() {
+        if (mAdditionalDropboxTags != null) {
+            return mAdditionalDropboxTags;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.additionalDropBoxTags();
+        }
+
+        return new String[0];
+    }
+
+    @Override
+    public String[] additionalSharedPreferences() {
+        if (mAdditionalSharedPreferences != null) {
+            return mAdditionalSharedPreferences;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.additionalSharedPreferences();
+        }
+
+        return new String[0];
+    }
+
+    @Override
+    public Class<? extends Annotation> annotationType() {
+        return mReportsCrashes.annotationType();
+    }
+
+    @Override
+    public int connectionTimeout() {
+        if (mConnectionTimeout != null) {
+            return mConnectionTimeout;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.connectionTimeout();
+        }
+
+        return DEFAULT_CONNECTION_TIMEOUT;
+    }
+
+    @Override
+    public ReportField[] customReportContent() {
+        if (mCustomReportContent != null) {
+            return mCustomReportContent;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.customReportContent();
+        }
+
+        return new ReportField[0];
+    }
+
+    @Override
+    public boolean deleteUnapprovedReportsOnApplicationStart() {
+        if (mDeleteUnapprovedReportsOnApplicationStart != null) {
+            return mDeleteUnapprovedReportsOnApplicationStart;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.deleteUnapprovedReportsOnApplicationStart();
+        }
+
+        return DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
+    }
+
+    @Override
+    public boolean deleteOldUnsentReportsOnApplicationStart() {
+        if (mDeleteOldUnsentReportsOnApplicationStart != null) {
+            return mDeleteOldUnsentReportsOnApplicationStart;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.deleteOldUnsentReportsOnApplicationStart();
+        }
+
+        return DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
+    }
+
+    @Override
+    public int dropboxCollectionMinutes() {
+        if (mDropboxCollectionMinutes != null) {
+            return mDropboxCollectionMinutes;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.dropboxCollectionMinutes();
+        }
+
+        return DEFAULT_DROPBOX_COLLECTION_MINUTES;
+    }
+
+    @Override
+    public boolean forceCloseDialogAfterToast() {
+        if (mForceCloseDialogAfterToast != null) {
+            return mForceCloseDialogAfterToast;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.forceCloseDialogAfterToast();
+        }
+
+        return DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST;
+    }
+
+    @Override
+    public String formUri() {
+        if (mFormUri != null) {
+            return mFormUri;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.formUri();
+        }
+
+        return DEFAULT_STRING_VALUE;
+    }
+
+    @Override
+    public String formUriBasicAuthLogin() {
+        if (mFormUriBasicAuthLogin != null) {
+            return mFormUriBasicAuthLogin;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.formUriBasicAuthLogin();
+        }
+
+        return NULL_VALUE;
+    }
+
+    @Override
+    public String formUriBasicAuthPassword() {
+        if (mFormUriBasicAuthPassword != null) {
+            return mFormUriBasicAuthPassword;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.formUriBasicAuthPassword();
+        }
+
+        return NULL_VALUE;
+    }
+
+    @Override
+    public boolean includeDropBoxSystemTags() {
+        if (mIncludeDropboxSystemTags != null) {
+            return mIncludeDropboxSystemTags;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.includeDropBoxSystemTags();
+        }
+
+        return DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
+    }
+
+    @Override
+    public String[] logcatArguments() {
+        if (mLogcatArguments != null) {
+            return mLogcatArguments;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.logcatArguments();
+        }
+
+        return new String[] { "-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time" };
+    }
+
+    @Override
+    public String mailTo() {
+        if (mMailTo != null) {
+            return mMailTo;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.mailTo();
+        }
+
+        return DEFAULT_STRING_VALUE;
+    }
+
+    @Override
+    public ReportingInteractionMode mode() {
+        if (mMode != null) {
+            return mMode;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.mode();
+        }
+
+        return ReportingInteractionMode.SILENT;
+    }
+
+    @Override
+    public int resDialogPositiveButtonText() {
+        if (mResDialogPositiveButtonText != null) {
+            return mResDialogPositiveButtonText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogPositiveButtonText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogNegativeButtonText() {
+        if (mResDialogNegativeButtonText != null) {
+            return mResDialogNegativeButtonText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogNegativeButtonText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogCommentPrompt() {
+        if (mResDialogCommentPrompt != null) {
+            return mResDialogCommentPrompt;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogCommentPrompt();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogEmailPrompt() {
+        if (mResDialogEmailPrompt != null) {
+            return mResDialogEmailPrompt;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogEmailPrompt();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogIcon() {
+        if (mResDialogIcon != null) {
+            return mResDialogIcon;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogIcon();
+        }
+
+        return DEFAULT_DIALOG_ICON;
+    }
+
+    @Override
+    public int resDialogOkToast() {
+        if (mResDialogOkToast != null) {
+            return mResDialogOkToast;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogOkToast();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogText() {
+        if (mResDialogText != null) {
+            return mResDialogText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogTitle() {
+        if (mResDialogTitle != null) {
+            return mResDialogTitle;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogTitle();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resNotifIcon() {
+        if (mResNotifIcon != null) {
+            return mResNotifIcon;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resNotifIcon();
+        }
+
+        return DEFAULT_NOTIFICATION_ICON;
+    }
+
+    @Override
+    public int resNotifText() {
+        if (mResNotifText != null) {
+            return mResNotifText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resNotifText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resNotifTickerText() {
+        if (mResNotifTickerText != null) {
+            return mResNotifTickerText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resNotifTickerText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resNotifTitle() {
+        if (mResNotifTitle != null) {
+            return mResNotifTitle;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resNotifTitle();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resToastText() {
+        if (mResToastText != null) {
+            return mResToastText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resToastText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int sharedPreferencesMode() {
+        if (mSharedPreferenceMode != null) {
+            return mSharedPreferenceMode;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.sharedPreferencesMode();
+        }
+
+        return DEFAULT_SHARED_PREFERENCES_MODE;
+    }
+
+    @Override
+    public String sharedPreferencesName() {
+        if (mSharedPreferenceName != null) {
+            return mSharedPreferenceName;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.sharedPreferencesName();
+        }
+
+        return DEFAULT_STRING_VALUE;
+    }
+
+    @Override
+    public int socketTimeout() {
+        if (mSocketTimeout != null) {
+            return mSocketTimeout;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.socketTimeout();
+        }
+
+        return DEFAULT_SOCKET_TIMEOUT;
+    }
+
+    @Override
+    public boolean logcatFilterByPid() {
+        if (mLogcatFilterByPid != null) {
+            return mLogcatFilterByPid;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.logcatFilterByPid();
+        }
+
+        return DEFAULT_LOGCAT_FILTER_BY_PID;
+    }
+
+    @Override
+    public boolean sendReportsInDevMode() {
+        if (mSendReportsInDevMode != null) {
+            return mSendReportsInDevMode;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.sendReportsInDevMode();
+        }
+
+        return DEFAULT_SEND_REPORTS_IN_DEV_MODE;
+    }
+
+    @Override
+    public boolean sendReportsAtShutdown() {
+        if (mSendReportsAtShutdown != null) {
+            return mSendReportsAtShutdown;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.sendReportsAtShutdown();
+        }
+
+        return DEFAULT_SEND_REPORTS_AT_SHUTDOWN;
+    }
+
+    @Override
+    public String[] excludeMatchingSharedPreferencesKeys() {
+        if (mExcludeMatchingSharedPreferencesKeys != null) {
+            return mExcludeMatchingSharedPreferencesKeys;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.excludeMatchingSharedPreferencesKeys();
+        }
+
+        return new String[0];
+    }
+
+    @Override
+    public String[] excludeMatchingSettingsKeys() {
+        if (mExcludeMatchingSettingsKeys != null) {
+            return mExcludeMatchingSettingsKeys;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.excludeMatchingSettingsKeys();
+        }
+
+        return new String[0];
+    }
+
+    @Override
+    /**
+     * Will return null if no value has been configured.
+     * It is up to clients to construct the recommended default value oof context.getClass().getPackage().getName() + BuildConfig.class
+     */
+    public Class buildConfigClass() {
+        if (mBuildConfigClass != null) {
+            return mBuildConfigClass;
+        }
+
+        if ((mReportsCrashes != null) && (mReportsCrashes.buildConfigClass() != null)) {
+            return mReportsCrashes.buildConfigClass();
+        }
+
+        return null;
+    }
+
+    @Override
+    public String applicationLogFile() {
+        if (mApplicationLogFile != null) {
+            return mApplicationLogFile;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.applicationLogFile();
+        }
+
+        return DEFAULT_APPLICATION_LOGFILE;
+    }
+
+    @Override
+    public int applicationLogFileLines() {
+        if (mApplicationLogFileLines != null) {
+            return mApplicationLogFileLines;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.applicationLogFileLines();
+        }
+
+        return DEFAULT_APPLICATION_LOGFILE_LINES;
+    }
+
+    @Override
+    public Class<? extends BaseCrashReportDialog> reportDialogClass() {
+        if (mReportDialogClass != null) {
+            return mReportDialogClass;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.reportDialogClass();
+        }
+
+        return CrashReportDialog.class;
+    }
+
+    @Override
+    public Class<? extends ReportPrimer> reportPrimerClass() {
+        if (reportPrimerClass != null) {
+            return reportPrimerClass;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.reportPrimerClass();
+        }
+
+        return NoOpReportPrimer.class;
+    }
+
+    @Override
+    public Method httpMethod() {
+        if (mHttpMethod != null) {
+            return mHttpMethod;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.httpMethod();
+        }
+
+        return Method.POST;
+    }
+
+    @Override
+    public Type reportType() {
+        if (mReportType != null) {
+            return mReportType;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.reportType();
+        }
+
+        return Type.FORM;
+    }
+
+    @SuppressWarnings( "unused" )
+    public void setReportSenderFactoryClasses(Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses) {
+        this.reportSenderFactoryClasses = reportSenderFactoryClasses;
+    }
+
+    @Override
+    public Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() {
+        if (reportSenderFactoryClasses != null) {
+            return reportSenderFactoryClasses;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.reportSenderFactoryClasses();
+        }
+
+        //noinspection unchecked
+        return new Class[] {DefaultReportSenderFactory.class};
+    }
+
+    @Override
+    public KeyStore keyStore() {
+        if (mKeyStore != null) {
+            return mKeyStore;
+        }
+
+        return null;
+    }
+
+    /**
+     * Checks that mandatory configuration items have been provided.
+     *
+     * @throws ACRAConfigurationException if required values are missing.
+     */
+    public void checkCrashResources() throws ACRAConfigurationException {
+        switch (mode()) {
+            case TOAST:
+                if (resToastText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            case NOTIFICATION:
+                if (resNotifTickerText() == 0 || resNotifTitle() == 0 || resNotifText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
+                }
+                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            case DIALOG:
+                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == 0) {
+                    throw new ACRAConfigurationException(
+                            "DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            default:
+                break;
+        }
+    }
+
+
+}
diff --git a/src/main/java/org/acra/ACRAConfigurationException.java b/src/main/java/org/acra/config/ACRAConfigurationException.java
similarity index 95%
rename from src/main/java/org/acra/ACRAConfigurationException.java
rename to src/main/java/org/acra/config/ACRAConfigurationException.java
index 55a27f3b..381546d7 100644
--- a/src/main/java/org/acra/ACRAConfigurationException.java
+++ b/src/main/java/org/acra/config/ACRAConfigurationException.java
@@ -1,30 +1,30 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-/**
- * A simple Exception used when required configuration items are missing.
- * 
- * @author Kevin Gaudin
- */
-public class ACRAConfigurationException extends Exception {
-
-    private static final long serialVersionUID = -7355339673505996110L;
-
-    public ACRAConfigurationException(String msg) {
-        super(msg);
-    }
-}
+/*
+ *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.config;
+
+/**
+ * A simple Exception used when required configuration items are missing.
+ * 
+ * @author Kevin Gaudin
+ */
+public class ACRAConfigurationException extends Exception {
+
+    private static final long serialVersionUID = -7355339673505996110L;
+
+    public ACRAConfigurationException(String msg) {
+        super(msg);
+    }
+}
diff --git a/src/main/java/org/acra/config/ACRAConfigurationFactory.java b/src/main/java/org/acra/config/ACRAConfigurationFactory.java
new file mode 100644
index 00000000..d7e3cd13
--- /dev/null
+++ b/src/main/java/org/acra/config/ACRAConfigurationFactory.java
@@ -0,0 +1,18 @@
+package org.acra.config;
+
+import android.app.Application;
+import org.acra.annotation.ReportsCrashes;
+
+/**
+ * Creates an {@link ACRAConfiguration} for the Application.
+ */
+public final class ACRAConfigurationFactory {
+    /**
+     * @param app   Your Application class.
+     * @return new {@link ACRAConfiguration} instance with values initialized from the {@link ReportsCrashes} annotation.
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration create(Application app) {
+        return new ACRAConfiguration(app.getClass().getAnnotation(ReportsCrashes.class));
+    }
+}
diff --git a/src/main/java/org/acra/BaseCrashReportDialog.java b/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
similarity index 59%
rename from src/main/java/org/acra/BaseCrashReportDialog.java
rename to src/main/java/org/acra/dialog/BaseCrashReportDialog.java
index bc024dbc..4c2b9dab 100644
--- a/src/main/java/org/acra/BaseCrashReportDialog.java
+++ b/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
@@ -1,11 +1,18 @@
-package org.acra;
+package org.acra.dialog;
 
 import android.app.Activity;
 import android.os.Bundle;
 import android.widget.Toast;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
 import org.acra.collector.CrashReportData;
+import org.acra.file.CrashReportPersister;
+import org.acra.file.BulkReportDeleter;
+import org.acra.config.ACRAConfig;
+import org.acra.sender.SenderServiceStarter;
 import org.acra.util.ToastSender;
 
+import java.io.File;
 import java.io.IOException;
 
 import static org.acra.ACRA.LOG_TAG;
@@ -20,43 +27,47 @@
  * The methods sendCrash(comment, usrEmail) and cancelReports() can be used to send or cancel
  * sending of reports respectively.
  *
- * This Activity will be instantiated with 2 arguments:
+ * This Activity will be instantiated with 3 arguments:
  * <ol>
  *     <li>{@link ACRAConstants#EXTRA_REPORT_FILE_NAME}</li>
  *     <li>{@link ACRAConstants#EXTRA_REPORT_EXCEPTION}</li>
+ *     <li>{@link ACRAConstants#EXTRA_REPORT_CONFIG}</li>
  * </ol>
  */
 public abstract class BaseCrashReportDialog extends Activity {
 
-    private String mReportFileName;
+    private File reportFile;
+    private ACRAConfig config;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        ACRA.log.d(LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
+
+        config = (ACRAConfig) getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_CONFIG);
 
         final boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
         if (forceCancel) {
-            ACRA.log.d(LOG_TAG, "Forced reports deletion.");
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Forced reports deletion.");
             cancelReports();
             finish();
             return;
         }
 
-        mReportFileName = getIntent().getStringExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME);
-        ACRA.log.d(LOG_TAG, "Opening CrashReportDialog for " + mReportFileName);
-        if (mReportFileName == null) {
+        reportFile = (File) getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_FILE);
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Opening CrashReportDialog for " + reportFile);
+        if (reportFile == null) {
             finish();
         }
     }
 
 
     /**
-     * Cancel any pending crash reports
+     * Cancel any pending crash reports.
      */
     protected void cancelReports() {
-        ACRA.getErrorReporter().deletePendingNonApprovedReports(false);
+        new BulkReportDeleter(getApplicationContext()).deleteReports(false, 0);
     }
 
 
@@ -66,23 +77,23 @@ protected void cancelReports() {
      * @param userEmail     Email address (may be null) provided by the client.
      */
     protected void sendCrash(String comment, String userEmail) {
-        final CrashReportPersister persister = new CrashReportPersister(getApplicationContext());
+        final CrashReportPersister persister = new CrashReportPersister();
         try {
-            ACRA.log.d(LOG_TAG, "Add user comment to " + mReportFileName);
-            final CrashReportData crashData = persister.load(mReportFileName);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Add user comment to " + reportFile);
+            final CrashReportData crashData = persister.load(reportFile);
             crashData.put(USER_COMMENT, comment == null ? "" : comment);
             crashData.put(USER_EMAIL, userEmail == null ? "" : userEmail);
-            persister.store(crashData, mReportFileName);
+            persister.store(crashData, reportFile);
         } catch (IOException e) {
             ACRA.log.w(LOG_TAG, "User comment not added: ", e);
         }
 
         // Start the report sending task
-        ACRA.log.v(LOG_TAG, "About to start SenderWorker from CrashReportDialog");
-        ACRA.getErrorReporter().startSendingReports(false, true);
+        final SenderServiceStarter starter = new SenderServiceStarter(getApplicationContext(), config);
+        starter.startService(false, true);
 
         // Optional Toast to thank the user
-        final int toastId = ACRA.getConfig().resDialogOkToast();
+        final int toastId = config.resDialogOkToast();
         if (toastId != 0) {
             ToastSender.sendToast(getApplicationContext(), toastId, Toast.LENGTH_LONG);
         }
diff --git a/src/main/java/org/acra/dialog/CrashReportDialog.java b/src/main/java/org/acra/dialog/CrashReportDialog.java
new file mode 100644
index 00000000..5ae8379e
--- /dev/null
+++ b/src/main/java/org/acra/dialog/CrashReportDialog.java
@@ -0,0 +1,238 @@
+package org.acra.dialog;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.text.InputType;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+import android.widget.TextView;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.config.ACRAConfig;
+
+
+/**
+ * This is the dialog Activity used by ACRA to get authorization from the user
+ * to send reports. Requires android:launchMode="singleInstance" in your
+ * AndroidManifest to work properly.
+ **/
+public class CrashReportDialog extends BaseCrashReportDialog implements DialogInterface.OnClickListener, DialogInterface.OnDismissListener {
+
+    private static final String STATE_EMAIL = "email";
+    private static final String STATE_COMMENT = "comment";
+
+    private LinearLayout scrollable;
+    private EditText userCommentView;
+    private EditText userEmailView;
+    private ACRAConfig config;
+    private SharedPreferencesFactory sharedPreferencesFactory;
+
+    private AlertDialog mDialog;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        scrollable = new LinearLayout(this);
+        scrollable.setOrientation(LinearLayout.VERTICAL);
+        config = (ACRAConfig) getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_CONFIG);
+        sharedPreferencesFactory = new SharedPreferencesFactory(getApplicationContext(), config);
+
+        buildAndShowDialog(savedInstanceState);
+    }
+
+    /**
+     * Build the dialog from the values in config
+     * @param savedInstanceState old state to restore
+     */
+    protected void buildAndShowDialog(Bundle savedInstanceState){
+        final AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
+        final int titleResourceId = config.resDialogTitle();
+        if (titleResourceId != 0) {
+            dialogBuilder.setTitle(titleResourceId);
+        }
+        final int iconResourceId = config.resDialogIcon();
+        if (iconResourceId != 0) {
+            dialogBuilder.setIcon(iconResourceId);
+        }
+        dialogBuilder.setView(buildCustomView(savedInstanceState));
+        dialogBuilder.setPositiveButton(getText(config.resDialogPositiveButtonText()), CrashReportDialog.this);
+        dialogBuilder.setNegativeButton(getText(config.resDialogNegativeButtonText()), CrashReportDialog.this);
+
+        mDialog = dialogBuilder.create();
+        mDialog.setCanceledOnTouchOutside(false);
+        mDialog.setOnDismissListener(this);
+        mDialog.show();
+    }
+
+    protected View buildCustomView(Bundle savedInstanceState) {
+        final LinearLayout root = new LinearLayout(this);
+        root.setOrientation(LinearLayout.VERTICAL);
+        root.setPadding(10, 10, 10, 10);
+        root.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        root.setFocusable(true);
+        root.setFocusableInTouchMode(true);
+
+        final ScrollView scroll = new ScrollView(this);
+        root.addView(scroll, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0f));
+        scroll.addView(scrollable);
+
+        addViewToDialog(getMainView());
+
+        // Add an optional prompt for user comments
+        final int commentPromptId = config.resDialogCommentPrompt();
+        if (commentPromptId != 0) {
+            String savedComment = null;
+            if (savedInstanceState != null) {
+                savedComment = savedInstanceState.getString(STATE_COMMENT);
+            }
+            userCommentView = getCommentPrompt(getText(commentPromptId), savedComment);
+            addViewToDialog(userCommentView);
+        }
+
+        // Add an optional user email field
+        final int emailPromptId = config.resDialogEmailPrompt();
+        if (emailPromptId != 0) {
+            String savedEmail = null;
+            if (savedInstanceState != null) {
+                savedEmail = savedInstanceState.getString(STATE_EMAIL);
+            }
+            userEmailView = getEmailPrompt(getText(emailPromptId), savedEmail);
+            addViewToDialog(userEmailView);
+        }
+
+        return root;
+    }
+
+    /**
+     * adds a view to the end of the dialog
+     *
+     * @param v the view to add
+     */
+    protected final void addViewToDialog(View v) {
+        scrollable.addView(v);
+    }
+
+    /**
+     * Creates a main view containing text of resDialogText
+     *
+     * @return the main view
+     */
+    protected View getMainView() {
+        final TextView text = new TextView(this);
+        final int dialogTextId = config.resDialogText();
+        if (dialogTextId != 0) {
+            text.setText(getText(dialogTextId));
+        }
+        return text;
+    }
+
+    /**
+     * creates a comment prompt
+     *
+     * @param label        the label of the prompt
+     * @param savedComment the content of the prompt (usually from a saved state)
+     * @return the comment prompt
+     */
+    protected EditText getCommentPrompt(CharSequence label, CharSequence savedComment) {
+        final TextView labelView = new TextView(this);
+        labelView.setText(label);
+
+        labelView.setPadding(labelView.getPaddingLeft(), 10, labelView.getPaddingRight(), labelView.getPaddingBottom());
+        scrollable.addView(labelView, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
+
+        EditText userCommentView = new EditText(this);
+        userCommentView.setLines(2);
+        if (savedComment != null) {
+            userCommentView.setText(savedComment);
+        }
+        return userCommentView;
+    }
+
+    /**
+     * creates an email prompt
+     *
+     * @param label      the label of the prompt
+     * @param savedEmail the content of the prompt (usually from a saved state)
+     * @return the email prompt
+     */
+    protected EditText getEmailPrompt(CharSequence label, CharSequence savedEmail) {
+        final TextView labelView = new TextView(this);
+        labelView.setText(label);
+
+        labelView.setPadding(labelView.getPaddingLeft(), 10, labelView.getPaddingRight(), labelView.getPaddingBottom());
+        scrollable.addView(labelView);
+
+        EditText userEmailView = new EditText(this);
+        userEmailView.setSingleLine();
+        userEmailView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
+
+        if (savedEmail != null) {
+            userEmailView.setText(savedEmail);
+        } else {
+            final SharedPreferences prefs = sharedPreferencesFactory.create();
+            userEmailView.setText(prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, ""));
+        }
+        return userEmailView;
+    }
+
+    @Override
+    public void onClick(DialogInterface dialog, int which) {
+        if (which == DialogInterface.BUTTON_POSITIVE) {
+            // Retrieve user comment
+            final String comment = userCommentView != null ? userCommentView.getText().toString() : "";
+
+            // Store the user email
+            final String userEmail;
+            final SharedPreferences prefs = sharedPreferencesFactory.create();
+            if (userEmailView != null) {
+                userEmail = userEmailView.getText().toString();
+                final SharedPreferences.Editor prefEditor = prefs.edit();
+                prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, userEmail);
+                prefEditor.commit();
+            } else {
+                userEmail = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "");
+            }
+            sendCrash(comment, userEmail);
+        } else {
+            cancelReports();
+        }
+
+        finish();
+    }
+
+
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+        finish();
+    }
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)
+     */
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        if (userCommentView != null && userCommentView.getText() != null) {
+            outState.putString(STATE_COMMENT, userCommentView.getText().toString());
+        }
+        if (userEmailView != null && userEmailView.getText() != null) {
+            outState.putString(STATE_EMAIL, userEmailView.getText().toString());
+        }
+    }
+
+    /**
+     * @return the AlertDialog displayed by this Activity
+     */
+    protected AlertDialog getDialog() {
+        return mDialog;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/file/BulkReportDeleter.java b/src/main/java/org/acra/file/BulkReportDeleter.java
new file mode 100644
index 00000000..a7423b46
--- /dev/null
+++ b/src/main/java/org/acra/file/BulkReportDeleter.java
@@ -0,0 +1,39 @@
+package org.acra.file;
+
+import android.content.Context;
+import org.acra.ACRA;
+import org.acra.file.LastModifiedComparator;
+import org.acra.file.ReportLocator;
+
+import java.io.File;
+import java.util.Arrays;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Deletes unsent reports.
+ */
+public final class BulkReportDeleter {
+
+    private final ReportLocator reportLocator;
+
+    public BulkReportDeleter(Context context) {
+        this.reportLocator = new ReportLocator(context);
+    }
+
+    /**
+     * @param approved  Whether to delete approved or unapproved reports.
+     * @param nrToKeep  Number of latest reports to keep.
+     */
+    public void deleteReports(boolean approved, int nrToKeep) {
+        final File[] files = approved ? reportLocator.getApprovedReports() : reportLocator.getUnapprovedReports();
+
+        Arrays.sort(files, new LastModifiedComparator());
+
+        for (int i = 0; i < files.length - nrToKeep; i++) {
+            if (!files[i].delete()) {
+                ACRA.log.w(LOG_TAG, "Could not delete report : " + files[i]);
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/acra/CrashReportFileNameParser.java b/src/main/java/org/acra/file/CrashReportFileNameParser.java
similarity index 93%
rename from src/main/java/org/acra/CrashReportFileNameParser.java
rename to src/main/java/org/acra/file/CrashReportFileNameParser.java
index 609906d0..7e815a2d 100644
--- a/src/main/java/org/acra/CrashReportFileNameParser.java
+++ b/src/main/java/org/acra/file/CrashReportFileNameParser.java
@@ -1,52 +1,55 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-/**
- * Responsible for determining the state of a Crash Report based on its file name.
- * <p/>
- * @author William Ferguson
- * @since 4.3.0
- */
-final class CrashReportFileNameParser {
-
-    /**
-     * Guess that a report is silent from its file name.
-     *
-     * @param reportFileName    Name of the report to check whether it should be sent silently.
-     * @return True if the report has been declared explicitly silent using {@link ErrorReporter#handleSilentException(Throwable)}.
-     */
-    public boolean isSilent(String reportFileName) {
-        return reportFileName.contains(ACRAConstants.SILENT_SUFFIX);
-    }
-
-    /**
-     * Returns true if the report is considered as approved.
-     * <p>
-          This includes:
-     * </p>
-     * <ul>
-     * <li>Reports which were pending when the user agreed to send a report in the NOTIFICATION mode Dialog.</li>
-     * <li>Explicit silent reports</li>
-     * </ul>
-     *
-     * @param reportFileName    Name of report to check whether it is approved to be sent.
-     * @return True if a report can be sent.
-     */
-    public boolean isApproved(String reportFileName) {
-        return isSilent(reportFileName) || reportFileName.contains(ACRAConstants.APPROVED_SUFFIX);
-    }
-}
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.file;
+
+import org.acra.ACRAConstants;
+import org.acra.ErrorReporter;
+
+/**
+ * Responsible for determining the state of a Crash Report based on its file name.
+ * <p/>
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class CrashReportFileNameParser {
+
+    /**
+     * Guess that a report is silent from its file name.
+     *
+     * @param reportFileName    Name of the report to check whether it should be sent silently.
+     * @return True if the report has been declared explicitly silent using {@link ErrorReporter#handleSilentException(Throwable)}.
+     */
+    public boolean isSilent(String reportFileName) {
+        return reportFileName.contains(ACRAConstants.SILENT_SUFFIX);
+    }
+
+    /**
+     * Returns true if the report is considered as approved.
+     * <p>
+          This includes:
+     * </p>
+     * <ul>
+     * <li>Reports which were pending when the user agreed to send a report in the NOTIFICATION mode Dialog.</li>
+     * <li>Explicit silent reports</li>
+     * </ul>
+     *
+     * @param reportFileName    Name of report to check whether it is approved to be sent.
+     * @return True if a report can be sent.
+     */
+    public boolean isApproved(String reportFileName) {
+        return isSilent(reportFileName) || reportFileName.contains(ACRAConstants.APPROVED_SUFFIX);
+    }
+}
diff --git a/src/main/java/org/acra/CrashReportPersister.java b/src/main/java/org/acra/file/CrashReportPersister.java
similarity index 89%
rename from src/main/java/org/acra/CrashReportPersister.java
rename to src/main/java/org/acra/file/CrashReportPersister.java
index aabcd107..15d31a6f 100644
--- a/src/main/java/org/acra/CrashReportPersister.java
+++ b/src/main/java/org/acra/file/CrashReportPersister.java
@@ -1,352 +1,334 @@
-/*
- * java.util.Properties.java modified by Kevin Gaudin to allow usage of enums as keys.
- *
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra;
-
-import android.content.Context;
-
-import org.acra.collector.CollectorUtil;
-import org.acra.collector.CrashReportData;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedReader;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
-import java.io.Reader;
-import java.util.Map;
-
-/**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
- * This is basically the source of {@link java.util.Properties} adapted to extend an
- * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
- * amounts of android time in the generation of a date comment when storing to
- * file.
- */
-final class CrashReportPersister {
-
-    private static final int NONE = 0, SLASH = 1, UNICODE = 2, CONTINUE = 3, KEY_DONE = 4, IGNORE = 5;
-    private static final String LINE_SEPARATOR = "\n";
-
-    private final Context context;
-
-    CrashReportPersister(Context context) {
-        this.context = context;
-    }
-
-    /**
-     * Loads properties from the specified {@code InputStream}. The encoding is
-     * ISO8859-1.
-     *
-     * @param fileName  Name of the report file from which to load the CrashData.
-     * @return CrashReportData read from the supplied InputStream.
-     * @throws java.io.IOException if error occurs during reading from the {@code InputStream}.
-     */
-    public CrashReportData load(String fileName) throws IOException {
-
-        final FileInputStream in = context.openFileInput(fileName);
-        if (in == null) {
-            throw new IllegalArgumentException("Invalid crash report fileName : " + fileName);
-        }
-
-        try {
-            final BufferedInputStream bis = new BufferedInputStream(in, ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-            return load(new InputStreamReader(bis, "ISO8859-1")); //$NON-NLS-1$
-        } finally {
-            in.close();
-        }
-    }
-
-    /**
-     * Stores the mappings in this Properties to the specified OutputStream,
-     * putting the specified comment at the beginning. The output from this
-     * method is suitable for being read by the load() method.
-     *
-     * @param crashData    CrashReportData to save.
-     * @param fileName      Name of the file to which to store the CrashReportData.
-     * @throws java.io.IOException if the CrashReportData could not be written to the OutputStream.
-     */
-    public void store(CrashReportData crashData, String fileName) throws IOException {
-
-        final OutputStream out = context.openFileOutput(fileName, Context.MODE_PRIVATE);
-        try {
-            final StringBuilder buffer = new StringBuilder(200);
-            final OutputStreamWriter writer = new OutputStreamWriter(out, "ISO8859_1"); //$NON-NLS-1$
-
-            for (final Map.Entry<ReportField, String> entry : crashData.entrySet()) {
-                final String key = entry.getKey().toString();
-                dumpString(buffer, key, true);
-                buffer.append('=');
-                dumpString(buffer, entry.getValue(), false);
-                buffer.append(LINE_SEPARATOR);
-                writer.write(buffer.toString());
-                buffer.setLength(0);
-            }
-            writer.flush();
-        } finally {
-            out.close();
-        }
-    }
-
-    /**
-     * Loads properties from the specified InputStream. The properties are of
-     * the form <code>key=value</code>, one property per line. It may be not
-     * encode as 'ISO-8859-1'.The {@code Properties} file is interpreted
-     * according to the following rules:
-     * <ul>
-     * <li>Empty lines are ignored.</li>
-     * <li>Lines starting with either a "#" or a "!" are comment lines and are
-     * ignored.</li>
-     * <li>A backslash at the end of the line escapes the following newline
-     * character ("\r", "\n", "\r\n"). If there's a whitespace after the
-     * backslash it will just escape that whitespace instead of concatenating
-     * the lines. This does not apply to comment lines.</li>
-     * <li>A property line consists of the key, the space between the key and
-     * the value, and the value. The key goes up to the first whitespace, "=" or
-     * ":" that is not escaped. The space between the key and the value contains
-     * either one whitespace, one "=" or one ":" and any number of additional
-     * whitespaces before and after that character. The value starts with the
-     * first character after the space between the key and the value.</li>
-     * <li>Following escape sequences are recognized: "\ ", "\\", "\r", "\n",
-     * "\!", "\#", "\t", "\b", "\f", and "&#92;uXXXX" (unicode character).</li>
-     * </ul>
-     *
-     * @param reader    Reader from which to read the properties of this CrashReportData.
-     * @return CrashReportData read from the supplied Reader.
-     * @throws java.io.IOException if the properties could not be read.
-     * @since 1.6
-     */
-    private synchronized CrashReportData load(Reader reader) throws IOException {
-        int mode = NONE, unicode = 0, count = 0;
-        char nextChar, buf[] = new char[40];
-        int offset = 0, keyLength = -1, intVal;
-        boolean firstChar = true;
-
-        final CrashReportData crashData = new CrashReportData();
-        final BufferedReader br = new BufferedReader(reader, ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-
-        while (true) {
-            intVal = br.read();
-            if (intVal == -1) {
-                break;
-            }
-            nextChar = (char) intVal;
-
-            if (offset == buf.length) {
-                final char[] newBuf = new char[buf.length * 2];
-                System.arraycopy(buf, 0, newBuf, 0, offset);
-                buf = newBuf;
-            }
-            if (mode == UNICODE) {
-                final int digit = Character.digit(nextChar, 16);
-                if (digit >= 0) {
-                    unicode = (unicode << 4) + digit;
-                    if (++count < 4) {
-                        continue;
-                    }
-                } else if (count <= 4) {
-                    // luni.09=Invalid Unicode sequence: illegal character
-                    throw new IllegalArgumentException("luni.09");
-                }
-                mode = NONE;
-                buf[offset++] = (char) unicode;
-                if (nextChar != '\n' && nextChar != '\u0085') {
-                    continue;
-                }
-            }
-            if (mode == SLASH) {
-                mode = NONE;
-                switch (nextChar) {
-                case '\r':
-                    mode = CONTINUE; // Look for a following \n
-                    continue;
-                case '\u0085':
-                case '\n':
-                    mode = IGNORE; // Ignore whitespace on the next line
-                    continue;
-                case 'b':
-                    nextChar = '\b';
-                    break;
-                case 'f':
-                    nextChar = '\f';
-                    break;
-                case 'n':
-                    nextChar = '\n';
-                    break;
-                case 'r':
-                    nextChar = '\r';
-                    break;
-                case 't':
-                    nextChar = '\t';
-                    break;
-                case 'u':
-                    mode = UNICODE;
-                    unicode = count = 0;
-                    continue;
-                }
-            } else {
-                switch (nextChar) {
-                case '#':
-                case '!':
-                    if (firstChar) {
-                        while (true) {
-                            intVal = br.read();
-                            if (intVal == -1) {
-                                break;
-                            }
-                            nextChar = (char) intVal; // & 0xff
-                                                      // not
-                                                      // required
-                            if (nextChar == '\r' || nextChar == '\n' || nextChar == '\u0085') {
-                                break;
-                            }
-                        }
-                        continue;
-                    }
-                    break;
-                case '\n':
-                    if (mode == CONTINUE) { // Part of a \r\n sequence
-                        mode = IGNORE; // Ignore whitespace on the next line
-                        continue;
-                    }
-                    // fall into the next case
-                case '\u0085':
-                case '\r':
-                    mode = NONE;
-                    firstChar = true;
-                    if (offset > 0 || (offset == 0 && keyLength == 0)) {
-                        if (keyLength == -1) {
-                            keyLength = offset;
-                        }
-                        final String temp = new String(buf, 0, offset);
-                        crashData.put(Enum.valueOf(ReportField.class, temp.substring(0, keyLength)), temp.substring(keyLength));
-                    }
-                    keyLength = -1;
-                    offset = 0;
-                    continue;
-                case '\\':
-                    if (mode == KEY_DONE) {
-                        keyLength = offset;
-                    }
-                    mode = SLASH;
-                    continue;
-                case ':':
-                case '=':
-                    if (keyLength == -1) { // if parsing the key
-                        mode = NONE;
-                        keyLength = offset;
-                        continue;
-                    }
-                    break;
-                }
-                if (Character.isWhitespace(nextChar)) {
-                    if (mode == CONTINUE) {
-                        mode = IGNORE;
-                    }
-                    // if key length == 0 or value length == 0
-                    if (offset == 0 || offset == keyLength || mode == IGNORE) {
-                        continue;
-                    }
-                    if (keyLength == -1) { // if parsing the key
-                        mode = KEY_DONE;
-                        continue;
-                    }
-                }
-                if (mode == IGNORE || mode == CONTINUE) {
-                    mode = NONE;
-                }
-            }
-            firstChar = false;
-            if (mode == KEY_DONE) {
-                keyLength = offset;
-                mode = NONE;
-            }
-            buf[offset++] = nextChar;
-        }
-        if (mode == UNICODE && count <= 4) {
-            // luni.08=Invalid Unicode sequence: expected format \\uxxxx
-            throw new IllegalArgumentException("luni.08");
-        }
-        if (keyLength == -1 && offset > 0) {
-            keyLength = offset;
-        }
-        if (keyLength >= 0) {
-            final String temp = new String(buf, 0, offset);
-            final ReportField key = Enum.valueOf(ReportField.class, temp.substring(0, keyLength));
-            String value = temp.substring(keyLength);
-            if (mode == SLASH) {
-                value += "\u0000";
-            }
-            crashData.put(key, value);
-        }
-
-        CollectorUtil.safeClose(reader);
-
-        return crashData;
-    }
-
-    /**
-     * Constructs a new {@code Properties} object.
-     *
-     * @param buffer    StringBuilder to populate with the supplied property.
-     * @param string    String to append to the buffer.
-     * @param key       Whether the String is a key value or not.
-     */
-    private void dumpString(StringBuilder buffer, String string, boolean key) {
-        int i = 0;
-        if (!key && i < string.length() && string.charAt(i) == ' ') {
-            buffer.append("\\ "); //$NON-NLS-1$
-            i++;
-        }
-
-        for (; i < string.length(); i++) {
-            char ch = string.charAt(i);
-            switch (ch) {
-            case '\t':
-                buffer.append("\\t"); //$NON-NLS-1$
-                break;
-            case '\n':
-                buffer.append("\\n"); //$NON-NLS-1$
-                break;
-            case '\f':
-                buffer.append("\\f"); //$NON-NLS-1$
-                break;
-            case '\r':
-                buffer.append("\\r"); //$NON-NLS-1$
-                break;
-            default:
-                if ("\\#!=:".indexOf(ch) >= 0 || (key && ch == ' ')) {
-                    buffer.append('\\');
-                }
-                if (ch >= ' ' && ch <= '~') {
-                    buffer.append(ch);
-                } else {
-                    final String hex = Integer.toHexString(ch);
-                    buffer.append("\\u"); //$NON-NLS-1$
-                    for (int j = 0; j < 4 - hex.length(); j++) {
-                        buffer.append("0"); //$NON-NLS-1$
-                    }
-                    buffer.append(hex);
-                }
-            }
-        }
-    }
-}
+/*
+ * java.util.Properties.java modified by Kevin Gaudin to allow usage of enums as keys.
+ *
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.file;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.collector.CollectorUtil;
+import org.acra.collector.CrashReportData;
+
+import java.io.*;
+import java.util.Map;
+
+/**
+ * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
+ * This is basically the source of {@link java.util.Properties} adapted to extend an
+ * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
+ * amounts of android time in the generation of a date comment when storing to
+ * file.
+ */
+public final class CrashReportPersister {
+
+    private static final int NONE = 0, SLASH = 1, UNICODE = 2, CONTINUE = 3, KEY_DONE = 4, IGNORE = 5;
+    private static final String LINE_SEPARATOR = "\n";
+
+    /**
+     * Loads properties from the specified {@code InputStream}. The encoding is ISO8859-1.
+     *
+     * @param file  Report file from which to load the CrashData.
+     * @return CrashReportData read from the supplied InputStream.
+     * @throws java.io.IOException if error occurs during reading from the {@code InputStream}.
+     */
+    public CrashReportData load(File file) throws IOException {
+
+        final FileInputStream in = new FileInputStream(file);
+        try {
+            final BufferedInputStream bis = new BufferedInputStream(in, ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+            return load(new InputStreamReader(bis, "ISO8859-1")); //$NON-NLS-1$
+        } finally {
+            in.close();
+        }
+    }
+
+    /**
+     * Stores the mappings in this Properties to the specified OutputStream,
+     * putting the specified comment at the beginning. The output from this
+     * method is suitable for being read by the load() method.
+     *
+     * @param crashData     CrashReportData to save.
+     * @param file          File into which to store the CrashReportData.
+     * @throws java.io.IOException if the CrashReportData could not be written to the OutputStream.
+     */
+    public void store(CrashReportData crashData, File file) throws IOException {
+
+        final OutputStream out = new FileOutputStream(file);
+        try {
+            final StringBuilder buffer = new StringBuilder(200);
+            final OutputStreamWriter writer = new OutputStreamWriter(out, "ISO8859_1"); //$NON-NLS-1$
+
+            for (final Map.Entry<ReportField, String> entry : crashData.entrySet()) {
+                final String key = entry.getKey().toString();
+                dumpString(buffer, key, true);
+                buffer.append('=');
+                dumpString(buffer, entry.getValue(), false);
+                buffer.append(LINE_SEPARATOR);
+                writer.write(buffer.toString());
+                buffer.setLength(0);
+            }
+            writer.flush();
+        } finally {
+            out.close();
+        }
+    }
+
+    /**
+     * Loads properties from the specified InputStream. The properties are of
+     * the form <code>key=value</code>, one property per line. It may be not
+     * encode as 'ISO-8859-1'.The {@code Properties} file is interpreted
+     * according to the following rules:
+     * <ul>
+     * <li>Empty lines are ignored.</li>
+     * <li>Lines starting with either a "#" or a "!" are comment lines and are
+     * ignored.</li>
+     * <li>A backslash at the end of the line escapes the following newline
+     * character ("\r", "\n", "\r\n"). If there's a whitespace after the
+     * backslash it will just escape that whitespace instead of concatenating
+     * the lines. This does not apply to comment lines.</li>
+     * <li>A property line consists of the key, the space between the key and
+     * the value, and the value. The key goes up to the first whitespace, "=" or
+     * ":" that is not escaped. The space between the key and the value contains
+     * either one whitespace, one "=" or one ":" and any number of additional
+     * whitespaces before and after that character. The value starts with the
+     * first character after the space between the key and the value.</li>
+     * <li>Following escape sequences are recognized: "\ ", "\\", "\r", "\n",
+     * "\!", "\#", "\t", "\b", "\f", and "&#92;uXXXX" (unicode character).</li>
+     * </ul>
+     *
+     * @param reader    Reader from which to read the properties of this CrashReportData.
+     * @return CrashReportData read from the supplied Reader.
+     * @throws java.io.IOException if the properties could not be read.
+     * @since 1.6
+     */
+    private synchronized CrashReportData load(Reader reader) throws IOException {
+        int mode = NONE, unicode = 0, count = 0;
+        char nextChar, buf[] = new char[40];
+        int offset = 0, keyLength = -1, intVal;
+        boolean firstChar = true;
+
+        final CrashReportData crashData = new CrashReportData();
+        final BufferedReader br = new BufferedReader(reader, ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+
+        while (true) {
+            intVal = br.read();
+            if (intVal == -1) {
+                break;
+            }
+            nextChar = (char) intVal;
+
+            if (offset == buf.length) {
+                final char[] newBuf = new char[buf.length * 2];
+                System.arraycopy(buf, 0, newBuf, 0, offset);
+                buf = newBuf;
+            }
+            if (mode == UNICODE) {
+                final int digit = Character.digit(nextChar, 16);
+                if (digit >= 0) {
+                    unicode = (unicode << 4) + digit;
+                    if (++count < 4) {
+                        continue;
+                    }
+                } else if (count <= 4) {
+                    // luni.09=Invalid Unicode sequence: illegal character
+                    throw new IllegalArgumentException("luni.09");
+                }
+                mode = NONE;
+                buf[offset++] = (char) unicode;
+                if (nextChar != '\n' && nextChar != '\u0085') {
+                    continue;
+                }
+            }
+            if (mode == SLASH) {
+                mode = NONE;
+                switch (nextChar) {
+                case '\r':
+                    mode = CONTINUE; // Look for a following \n
+                    continue;
+                case '\u0085':
+                case '\n':
+                    mode = IGNORE; // Ignore whitespace on the next line
+                    continue;
+                case 'b':
+                    nextChar = '\b';
+                    break;
+                case 'f':
+                    nextChar = '\f';
+                    break;
+                case 'n':
+                    nextChar = '\n';
+                    break;
+                case 'r':
+                    nextChar = '\r';
+                    break;
+                case 't':
+                    nextChar = '\t';
+                    break;
+                case 'u':
+                    mode = UNICODE;
+                    unicode = count = 0;
+                    continue;
+                }
+            } else {
+                switch (nextChar) {
+                case '#':
+                case '!':
+                    if (firstChar) {
+                        while (true) {
+                            intVal = br.read();
+                            if (intVal == -1) {
+                                break;
+                            }
+                            nextChar = (char) intVal; // & 0xff
+                                                      // not
+                                                      // required
+                            if (nextChar == '\r' || nextChar == '\n' || nextChar == '\u0085') {
+                                break;
+                            }
+                        }
+                        continue;
+                    }
+                    break;
+                case '\n':
+                    if (mode == CONTINUE) { // Part of a \r\n sequence
+                        mode = IGNORE; // Ignore whitespace on the next line
+                        continue;
+                    }
+                    // fall into the next case
+                case '\u0085':
+                case '\r':
+                    mode = NONE;
+                    firstChar = true;
+                    if (offset > 0 || (offset == 0 && keyLength == 0)) {
+                        if (keyLength == -1) {
+                            keyLength = offset;
+                        }
+                        final String temp = new String(buf, 0, offset);
+                        crashData.put(Enum.valueOf(ReportField.class, temp.substring(0, keyLength)), temp.substring(keyLength));
+                    }
+                    keyLength = -1;
+                    offset = 0;
+                    continue;
+                case '\\':
+                    if (mode == KEY_DONE) {
+                        keyLength = offset;
+                    }
+                    mode = SLASH;
+                    continue;
+                case ':':
+                case '=':
+                    if (keyLength == -1) { // if parsing the key
+                        mode = NONE;
+                        keyLength = offset;
+                        continue;
+                    }
+                    break;
+                }
+                if (Character.isWhitespace(nextChar)) {
+                    if (mode == CONTINUE) {
+                        mode = IGNORE;
+                    }
+                    // if key length == 0 or value length == 0
+                    if (offset == 0 || offset == keyLength || mode == IGNORE) {
+                        continue;
+                    }
+                    if (keyLength == -1) { // if parsing the key
+                        mode = KEY_DONE;
+                        continue;
+                    }
+                }
+                if (mode == IGNORE || mode == CONTINUE) {
+                    mode = NONE;
+                }
+            }
+            firstChar = false;
+            if (mode == KEY_DONE) {
+                keyLength = offset;
+                mode = NONE;
+            }
+            buf[offset++] = nextChar;
+        }
+        if (mode == UNICODE && count <= 4) {
+            // luni.08=Invalid Unicode sequence: expected format \\uxxxx
+            throw new IllegalArgumentException("luni.08");
+        }
+        if (keyLength == -1 && offset > 0) {
+            keyLength = offset;
+        }
+        if (keyLength >= 0) {
+            final String temp = new String(buf, 0, offset);
+            final ReportField key = Enum.valueOf(ReportField.class, temp.substring(0, keyLength));
+            String value = temp.substring(keyLength);
+            if (mode == SLASH) {
+                value += "\u0000";
+            }
+            crashData.put(key, value);
+        }
+
+        CollectorUtil.safeClose(reader);
+
+        return crashData;
+    }
+
+    /**
+     * Constructs a new {@code Properties} object.
+     *
+     * @param buffer    StringBuilder to populate with the supplied property.
+     * @param string    String to append to the buffer.
+     * @param key       Whether the String is a key value or not.
+     */
+    private void dumpString(StringBuilder buffer, String string, boolean key) {
+        int i = 0;
+        if (!key && i < string.length() && string.charAt(i) == ' ') {
+            buffer.append("\\ "); //$NON-NLS-1$
+            i++;
+        }
+
+        for (; i < string.length(); i++) {
+            char ch = string.charAt(i);
+            switch (ch) {
+            case '\t':
+                buffer.append("\\t"); //$NON-NLS-1$
+                break;
+            case '\n':
+                buffer.append("\\n"); //$NON-NLS-1$
+                break;
+            case '\f':
+                buffer.append("\\f"); //$NON-NLS-1$
+                break;
+            case '\r':
+                buffer.append("\\r"); //$NON-NLS-1$
+                break;
+            default:
+                if ("\\#!=:".indexOf(ch) >= 0 || (key && ch == ' ')) {
+                    buffer.append('\\');
+                }
+                if (ch >= ' ' && ch <= '~') {
+                    buffer.append(ch);
+                } else {
+                    final String hex = Integer.toHexString(ch);
+                    buffer.append("\\u"); //$NON-NLS-1$
+                    for (int j = 0; j < 4 - hex.length(); j++) {
+                        buffer.append("0"); //$NON-NLS-1$
+                    }
+                    buffer.append(hex);
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/acra/file/LastModifiedComparator.java b/src/main/java/org/acra/file/LastModifiedComparator.java
new file mode 100644
index 00000000..15b5c3d3
--- /dev/null
+++ b/src/main/java/org/acra/file/LastModifiedComparator.java
@@ -0,0 +1,14 @@
+package org.acra.file;
+
+import java.io.File;
+import java.util.Comparator;
+
+/**
+ * Orders files from oldest to newest based on their last modified date.
+ */
+public final class LastModifiedComparator implements Comparator<File> {
+    @Override
+    public int compare(File lhs, File rhs) {
+        return (int) (lhs.lastModified() - rhs.lastModified());
+    }
+}
diff --git a/src/main/java/org/acra/file/ReportLocator.java b/src/main/java/org/acra/file/ReportLocator.java
new file mode 100644
index 00000000..5e86f591
--- /dev/null
+++ b/src/main/java/org/acra/file/ReportLocator.java
@@ -0,0 +1,50 @@
+package org.acra.file;
+
+import android.content.Context;
+
+import java.io.File;
+import java.util.Arrays;
+import java.util.Comparator;
+
+/**
+ * Locates crash reports.
+ *
+ * @author William Ferguson
+ * @since 4.8.0
+ */
+public final class ReportLocator {
+
+    // Folders under the app folder.
+    private static final String UNAPPROVED_FOLDER_NAME = "ACRA-unapproved";
+    private static final String APPROVED_FOLDER_NAME = "ACRA-approved";
+
+    private final Context context;
+
+    public ReportLocator(Context context) {
+        this.context = context;
+    }
+
+    public File getUnapprovedFolder() {
+        return context.getDir(UNAPPROVED_FOLDER_NAME, Context.MODE_PRIVATE);
+    }
+
+    public File[] getUnapprovedReports() {
+        return getUnapprovedFolder().listFiles();
+    }
+
+    public File getApprovedFolder() {
+        return context.getDir(APPROVED_FOLDER_NAME, Context.MODE_PRIVATE);
+    }
+
+    /**
+     * @return Approved reports sorted by creation time.
+     */
+    public File[] getApprovedReports() {
+        final File[] reports = getApprovedFolder().listFiles();
+        if (reports == null) {
+            return new File[0];
+        }
+        Arrays.sort(reports, new LastModifiedComparator());
+        return reports;
+    }
+}
diff --git a/src/main/java/org/acra/legacy/ReportMigrator.java b/src/main/java/org/acra/legacy/ReportMigrator.java
new file mode 100644
index 00000000..d52615f1
--- /dev/null
+++ b/src/main/java/org/acra/legacy/ReportMigrator.java
@@ -0,0 +1,73 @@
+package org.acra.legacy;
+
+import android.content.Context;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.file.CrashReportFileNameParser;
+import org.acra.file.ReportLocator;
+
+import java.io.File;
+import java.io.FilenameFilter;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Migrates reports from the pre 4.8.0 location to the 4.8.0+ locations.
+ */
+public final class ReportMigrator {
+
+    private final Context context;
+    private final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
+    private final ReportLocator reportLocator;
+
+    public ReportMigrator(Context context) {
+        this.context = context;
+        this.reportLocator = new ReportLocator(context);
+    }
+
+    public void migrate() {
+        ACRA.log.i(LOG_TAG, "Migrating unsent ACRA reports to new file locations");
+
+        final File[] reportFiles = getCrashReportFiles();
+
+        for (final File file : reportFiles) {
+            // Move it to unapproved or approved folders.
+            final String fileName = file.getName();
+            if (fileNameParser.isApproved(fileName)) {
+                if (file.renameTo(new File(reportLocator.getApprovedFolder(), fileName))) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Cold not migrate unsent ACRA crash report : " + fileName);
+                }
+            } else {
+                if (file.renameTo(new File(reportLocator.getUnapprovedFolder(), fileName))) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Cold not migrate unsent ACRA crash report : " + fileName);
+                }
+            }
+        }
+        ACRA.log.i(LOG_TAG, "Migrated " + reportFiles.length + " unsent reports");
+    }
+
+    /**
+     * Returns an array containing the names of pending crash report files.
+     *
+     * @return an array containing the names of pending crash report files.
+     */
+    private File[] getCrashReportFiles() {
+        final File dir = context.getFilesDir();
+        if (dir == null) {
+            ACRA.log.w(LOG_TAG, "Application files directory does not exist! The application may not be installed correctly. Please try reinstalling.");
+            return new File[0];
+        }
+
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
+
+        // Filter for ".stacktrace" files
+        final FilenameFilter filter = new FilenameFilter() {
+            public boolean accept(File dir, String name) {
+                return name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
+            }
+        };
+        final File[] result = dir.listFiles(filter);
+        return (result == null) ? new File[0] : result;
+    }
+
+}
diff --git a/src/main/java/org/acra/prefs/PrefUtils.java b/src/main/java/org/acra/prefs/PrefUtils.java
new file mode 100644
index 00000000..f191580e
--- /dev/null
+++ b/src/main/java/org/acra/prefs/PrefUtils.java
@@ -0,0 +1,15 @@
+package org.acra.prefs;
+
+import android.content.SharedPreferences;
+import android.os.Build;
+
+public final class PrefUtils {
+
+    public static void save(SharedPreferences.Editor editor) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
+            editor.apply();
+        } else {
+            editor.commit();
+        }
+    }
+}
diff --git a/src/main/java/org/acra/prefs/SharedPreferencesFactory.java b/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
new file mode 100644
index 00000000..7cc570bd
--- /dev/null
+++ b/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
@@ -0,0 +1,39 @@
+package org.acra.prefs;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.config.ACRAConfig;
+
+/**
+ * Responsible for creating a SharedPreferences instance which stores ACRA settings.
+ *
+ * Retrieves the {@link SharedPreferences} instance where user adjustable
+ * settings for ACRA are stored. Default are the Application default
+ * SharedPreferences, but you can provide another SharedPreferences name
+ * with {@link ReportsCrashes#sharedPreferencesName()}.
+ */
+public class SharedPreferencesFactory {
+
+    private final Context context;
+    private final ACRAConfig config;
+
+    public SharedPreferencesFactory(Context context, ACRAConfig config) {
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
+     */
+    public SharedPreferences create() {
+        if (context == null) {
+            throw new IllegalStateException("Cannot call ACRA.getACRASharedPreferences() before ACRA.init().");
+        } else if (!"".equals(config.sharedPreferencesName())) {
+            return context.getSharedPreferences(config.sharedPreferencesName(), config.sharedPreferencesMode());
+        } else {
+            return PreferenceManager.getDefaultSharedPreferences(context);
+        }
+    }
+}
diff --git a/src/main/java/org/acra/sender/DefaultReportSenderFactory.java b/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
new file mode 100644
index 00000000..88e99b6f
--- /dev/null
+++ b/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
@@ -0,0 +1,46 @@
+package org.acra.sender;
+
+import android.Manifest;
+import android.content.Context;
+import org.acra.ACRA;
+import org.acra.config.ACRAConfig;
+import org.acra.util.PackageManagerWrapper;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Will send reports by email if the 'mailTo' parameter is configured,
+ * otherwise via HTTP if the 'formUri' parameter is configured and
+ * internet permission has been granted.
+ *
+ * If neither 'formUri' or 'mailTo' has been configured, then a NullSender will be returned.
+ */
+public final class DefaultReportSenderFactory implements ReportSenderFactory {
+
+    @Override
+    public ReportSender create(Context context, ACRAConfig config) {
+        final PackageManagerWrapper pm = new PackageManagerWrapper(context);
+        if (!"".equals(config.mailTo())) {
+            // Try to send by mail. If a mailTo address is provided, do not add other senders.
+            ACRA.log.w(LOG_TAG, context.getPackageName() + " reports will be sent by email (if accepted by user).");
+            return new EmailIntentSenderFactory().create(context, config);
+        } else if (!pm.hasPermission(Manifest.permission.INTERNET)) {
+            // NB If the PackageManager has died then this will erroneously log
+            // the error that the App doesn't have Internet (even though it does).
+            // I think that is a small price to pay to ensure that ACRA doesn't
+            // crash if the PackageManager has died.
+            ACRA.log.e(LOG_TAG,
+                    context.getPackageName()
+                            + " should be granted permission "
+                            + Manifest.permission.INTERNET
+                            + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @AcraConfig(mailTo=\"your.account@domain.com\"");
+            return new NullSender();
+        } else if (config.formUri() != null && !"".equals(config.formUri())) {
+            // If formUri is set, instantiate a sender for a generic HTTP POST form with default mapping.
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, context.getPackageName() + " reports will be sent by Http.");
+            return new HttpSenderFactory().create(context, config);
+        } else {
+            return new NullSender();
+        }
+    }
+}
diff --git a/src/main/java/org/acra/sender/EmailIntentSender.java b/src/main/java/org/acra/sender/EmailIntentSender.java
index 78cb165c..587fcae1 100644
--- a/src/main/java/org/acra/sender/EmailIntentSender.java
+++ b/src/main/java/org/acra/sender/EmailIntentSender.java
@@ -15,28 +15,30 @@
  */
 package org.acra.sender;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.collector.CrashReportData;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.collector.CrashReportData;
+import org.acra.config.ACRAConfig;
 
 /**
- * Send reports through an email intent. The user will be asked to chose his
- * preferred email client. Included report fields can be defined using
+ * Send reports through an email intent.
+ *
+ * The user will be asked to chose his preferred email client. Included report fields can be defined using
  * {@link org.acra.annotation.ReportsCrashes#customReportContent()}. Crash receiving mailbox has to be
  * defined with {@link ReportsCrashes#mailTo()}.
  */
 public class EmailIntentSender implements ReportSender {
 
     private final Context mContext;
+    private final ACRAConfig config;
 
-    public EmailIntentSender(Context ctx) {
+    public EmailIntentSender(Context ctx, ACRAConfig config) {
         mContext = ctx;
+        this.config = config;
     }
 
     @Override
@@ -46,7 +48,7 @@ public void send(Context context, CrashReportData errorContent) throws ReportSen
         final String body = buildBody(errorContent);
 
         final Intent emailIntent = new Intent(android.content.Intent.ACTION_SENDTO);
-        emailIntent.setData(Uri.fromParts("mailto", ACRA.getConfig().mailTo(), null));
+        emailIntent.setData(Uri.fromParts("mailto", config.mailTo(), null));
         emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subject);
         emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, body);
@@ -54,7 +56,7 @@ public void send(Context context, CrashReportData errorContent) throws ReportSen
     }
 
     private String buildBody(CrashReportData errorContent) {
-        ReportField[] fields = ACRA.getConfig().customReportContent();
+        ReportField[] fields = config.customReportContent();
         if(fields.length == 0) {
             fields = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
         }
diff --git a/src/main/java/org/acra/sender/EmailIntentSenderFactory.java b/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
new file mode 100644
index 00000000..b120b675
--- /dev/null
+++ b/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
@@ -0,0 +1,15 @@
+package org.acra.sender;
+
+import android.content.Context;
+import org.acra.config.ACRAConfig;
+
+/**
+ * Constructs an {@link EmailIntentSender}.
+ */
+public final class EmailIntentSenderFactory implements ReportSenderFactory {
+
+    @Override
+    public ReportSender create(Context context, ACRAConfig config) {
+        return new EmailIntentSender(context, config);
+    }
+}
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index 0579ccf0..10d04e0c 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -15,24 +15,23 @@
  */
 package org.acra.sender;
 
-import static org.acra.ACRA.LOG_TAG;
-
-import java.io.IOException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-
 import android.content.Context;
+import android.net.Uri;
 import org.acra.ACRA;
-import org.acra.ACRAConfiguration;
 import org.acra.ACRAConstants;
 import org.acra.ReportField;
 import org.acra.annotation.ReportsCrashes;
 import org.acra.collector.CrashReportData;
+import org.acra.config.ACRAConfig;
 import org.acra.util.HttpRequest;
 import org.acra.util.JSONReportBuilder.JSONReportException;
 
-import android.net.Uri;
+import java.io.IOException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
 
 /**
  * <p>
@@ -50,23 +49,8 @@
  * </p>
  * 
  * <pre>
- * &#64;ReportsCrashes(...)
- * public class myApplication extends Application {
- * 
- *     public void onCreate() {
- *         super.onCreate();
- *         ACRA.init(this);
- *         Map&lt;ReportField, String&gt; mapping = new HashMap&lt;ReportField, String&gt;();
- *         mapping.put(ReportField.APP_VERSION_CODE, &quot;myAppVerCode'); 
- *         mapping.put(ReportField.APP_VERSION_NAME, &quot;myAppVerName');
- *         //... 
- *         mapping.put(ReportField.USER_EMAIL, &quot;userEmail');
- *         // remove any default report sender
- *         ErrorReporter.getInstance().removeAllReportSenders();
- *         // create your own instance with your specific mapping
- *         ErrorReporter.getInstance().addReportSender(new ReportSender(&quot;http://my.domain.com/reports/receiver.py&quot;, mapping));
- *     }
- * }
+ * Just create and declare a {@link ReportSenderFactory} that constructs a mapping
+ * from each {@link ReportField} to another name.
  * </pre>
  * 
  */
@@ -108,6 +92,7 @@ public String getContentType() {
         public abstract String getContentType();
     }
 
+    private final ACRAConfig config;
     private final Uri mFormUri;
     private final Map<ReportField, String> mMapping;
     private final Method mMethod;
@@ -117,11 +102,10 @@ public String getContentType() {
 
     /**
      * <p>
-     * Create a new HttpSender instance with its destination taken from
-     * {@link ACRA#getConfig()} dynamically. Configuration changes to the
-     * formUri are applied automatically.
+     * Create a new HttpSender instance with its destination taken from the supplied config.
      * </p>
-     * 
+     *
+     * @param config    AcraConfig declaring the
      * @param method
      *            HTTP {@link Method} to be used to send data. Currently only
      *            {@link Method#POST} and {@link Method#PUT} are available. If
@@ -140,13 +124,8 @@ public String getContentType() {
      *            parameters will be named with the result of
      *            mapping.get(ReportField.SOME_FIELD);
      */
-    public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
-        mMethod = method;
-        mFormUri = null;
-        mMapping = mapping;
-        mType = type;
-        mUsername = null;
-        mPassword = null;
+    public HttpSender(ACRAConfig config, Method method, Type type, Map<ReportField, String> mapping) {
+        this(config, method, type, null, mapping);
     }
 
     /**
@@ -154,7 +133,8 @@ public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
      * Create a new HttpPostSender instance with a fixed destination provided as
      * a parameter. Configuration changes to the formUri are not applied.
      * </p>
-     * 
+     *
+     * @param config    AcraConfig declaring the
      * @param method
      *            HTTP {@link Method} to be used to send data. Currently only
      *            {@link Method#POST} and {@link Method#PUT} are available. If
@@ -174,9 +154,10 @@ public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
      *            parameters will be named with the result of
      *            mapping.get(ReportField.SOME_FIELD);
      */
-    public HttpSender(Method method, Type type, String formUri, Map<ReportField, String> mapping) {
+    public HttpSender(ACRAConfig config, Method method, Type type, String formUri, Map<ReportField, String> mapping) {
+        this.config = config;
         mMethod = method;
-        mFormUri = Uri.parse(formUri);
+        mFormUri = (formUri == null) ? null : Uri.parse(formUri);
         mMapping = mapping;
         mType = type;
         mUsername = null;
@@ -204,21 +185,18 @@ public void setBasicAuth(String username, String password) {
     public void send(Context context, CrashReportData report) throws ReportSenderException {
 
         try {
-            URL reportUrl = mFormUri == null ? new URL(ACRA.getConfig().formUri()) : new URL(mFormUri.toString());
-            ACRA.log.d(LOG_TAG, "Connect to " + reportUrl.toString());
+            URL reportUrl = mFormUri == null ? new URL(config.formUri()) : new URL(mFormUri.toString());
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Connect to " + reportUrl.toString());
 
-            final String login = mUsername != null ? mUsername : ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthLogin()) ? null : ACRA
-                    .getConfig().formUriBasicAuthLogin();
-            final String password = mPassword != null ? mPassword : ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthPassword()) ? null : ACRA
-                    .getConfig().formUriBasicAuthPassword();
+            final String login = mUsername != null ? mUsername : isNull(config.formUriBasicAuthLogin()) ? null : config.formUriBasicAuthLogin();
+            final String password = mPassword != null ? mPassword : isNull(config.formUriBasicAuthPassword()) ? null : config.formUriBasicAuthPassword();
 
-            final HttpRequest request = new HttpRequest();
-            request.setConnectionTimeOut(ACRA.getConfig().connectionTimeout());
-            request.setSocketTimeOut(ACRA.getConfig().socketTimeout());
-            request.setMaxNrRetries(ACRA.getConfig().maxNumberOfRequestRetries());
+            final HttpRequest request = new HttpRequest(config);
+            request.setConnectionTimeOut(config.connectionTimeout());
+            request.setSocketTimeOut(config.socketTimeout());
             request.setLogin(login);
             request.setPassword(password);
-            request.setHeaders(ACRA.getConfig().getHttpHeaders());
+            request.setHeaders(config.getHttpHeaders());
 
             // Generate report body depending on requested type
             final String reportAsString;
@@ -231,7 +209,6 @@ public void send(Context context, CrashReportData report) throws ReportSenderExc
                 final Map<String, String> finalReport = remap(report);
                 reportAsString = HttpRequest.getParamsAsFormString(finalReport);
                 break;
-
             }
 
             // Adjust URL depending on method
@@ -244,20 +221,20 @@ public void send(Context context, CrashReportData report) throws ReportSenderExc
             default:
                 throw new UnsupportedOperationException("Unknown method: " + mMethod.name());
             }
-            request.send(context, reportUrl, mMethod, reportAsString, mType);
+            request.send(reportUrl, mMethod, reportAsString, mType);
 
         } catch (IOException e) {
-            throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType()
+            throw new ReportSenderException("Error while sending " + config.reportType()
                     + " report via Http " + mMethod.name(), e);
         } catch (JSONReportException e) {
-            throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType()
+            throw new ReportSenderException("Error while sending " + config.reportType()
                     + " report via Http " + mMethod.name(), e);
         }
     }
 
     private Map<String, String> remap(Map<ReportField, String> report) {
 
-        ReportField[] fields = ACRA.getConfig().customReportContent();
+        ReportField[] fields = config.customReportContent();
         if (fields.length == 0) {
             fields = ACRAConstants.DEFAULT_REPORT_FIELDS;
         }
@@ -273,4 +250,7 @@ public void send(Context context, CrashReportData report) throws ReportSenderExc
         return finalReport;
     }
 
+    private boolean isNull(String aString) {
+        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/acra/sender/HttpSenderFactory.java b/src/main/java/org/acra/sender/HttpSenderFactory.java
new file mode 100644
index 00000000..21427584
--- /dev/null
+++ b/src/main/java/org/acra/sender/HttpSenderFactory.java
@@ -0,0 +1,15 @@
+package org.acra.sender;
+
+import android.content.Context;
+import org.acra.config.ACRAConfig;
+
+/**
+ * Constructs a {@link HttpSender} with no report field mappings.
+ */
+public final class HttpSenderFactory implements ReportSenderFactory {
+
+    @Override
+    public ReportSender create(Context context, ACRAConfig config) {
+        return new HttpSender(config, config.httpMethod(), config.reportType(), null);
+    }
+}
diff --git a/src/main/java/org/acra/sender/NullSender.java b/src/main/java/org/acra/sender/NullSender.java
new file mode 100644
index 00000000..b1891945
--- /dev/null
+++ b/src/main/java/org/acra/sender/NullSender.java
@@ -0,0 +1,17 @@
+package org.acra.sender;
+
+import android.content.Context;
+import org.acra.ACRA;
+import org.acra.collector.CrashReportData;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Sends no report.
+ */
+final class NullSender implements ReportSender {
+    @Override
+    public void send(Context context, CrashReportData errorContent) throws ReportSenderException {
+        ACRA.log.w(LOG_TAG, context.getPackageName() + " reports will NOT be sent - no valid ReportSender is configured. Try setting 'formUri' or 'mailTo'");
+    }
+}
diff --git a/src/main/java/org/acra/sender/ReportDistributor.java b/src/main/java/org/acra/sender/ReportDistributor.java
new file mode 100644
index 00000000..20ae5772
--- /dev/null
+++ b/src/main/java/org/acra/sender/ReportDistributor.java
@@ -0,0 +1,145 @@
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.sender;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import org.acra.ACRA;
+import org.acra.collector.CrashReportData;
+import org.acra.file.CrashReportPersister;
+import org.acra.config.ACRAConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Distributes reports to all Senders.
+ *
+ * @author William Ferguson
+ * @since 4.8.0
+ */
+final class ReportDistributor {
+
+    private final Context context;
+    private final ACRAConfig config;
+    private final List<ReportSender> reportSenders;
+
+    /**
+     * Creates a new {@link ReportDistributor} to try sending pending reports.
+     *
+     * @param context               ApplicationContext in which the reports are being sent.
+     * @param config                Configuration to use while sending.
+     * @param reportSenders         List of ReportSender to use to send the crash reports.
+     */
+    public ReportDistributor(Context context, ACRAConfig config, List<ReportSender> reportSenders) {
+        this.context = context;
+        this.config = config;
+        this.reportSenders = reportSenders;
+    }
+
+    /**
+     * Send report via all senders.
+     *
+     * @param reportFile    Report to send.
+     */
+    public void distribute(File reportFile) {
+
+        ACRA.log.i(LOG_TAG, "Sending report " + reportFile );
+        try {
+            final CrashReportPersister persister = new CrashReportPersister();
+            final CrashReportData previousCrashReport = persister.load(reportFile);
+            sendCrashReport(previousCrashReport);
+            deleteFile(reportFile);
+        } catch (RuntimeException e) {
+            ACRA.log.e(LOG_TAG, "Failed to send crash reports for " + reportFile, e);
+            deleteFile(reportFile);
+        } catch (IOException e) {
+            ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
+            deleteFile(reportFile);
+        } catch (ReportSenderException e) {
+            ACRA.log.e(LOG_TAG, "Failed to send crash report for " + reportFile, e);
+            // An issue occurred while sending this report but we can still try to
+            // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
+            // so there's not much to fear about overloading a failing server.
+        }
+    }
+
+    /**
+     * Sends the report with all configured ReportSenders. If at least one
+     * sender completed its job, the report is considered as sent and will not
+     * be sent again for failing senders.
+     *
+     * @param errorContent  Crash data.
+     * @throws ReportSenderException if unable to send the crash report.
+     */
+    private void sendCrashReport(CrashReportData errorContent) throws ReportSenderException {
+        if (!isDebuggable() || config.sendReportsInDevMode()) {
+            boolean sentAtLeastOnce = false;
+            ReportSenderException sendFailure = null;
+            String failedSender = null;
+            for (ReportSender sender : reportSenders) {
+                try {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Sending report using " + sender.getClass().getName());
+                    sender.send(context, errorContent);
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Sent report using " + sender.getClass().getName());
+
+                    // If at least one sender worked, don't re-send the report later.
+                    sentAtLeastOnce = true;
+                } catch (ReportSenderException e) {
+                    sendFailure = e;
+                    failedSender = sender.getClass().getName();
+                }
+            }
+
+            if (sendFailure != null) {
+                // We had some failure
+                if (!sentAtLeastOnce) {
+                    throw sendFailure; // Don't log here because we aren't dealing with the Exception here.
+                } else {
+                    ACRA.log.w(LOG_TAG,
+                               "ReportSender of class "
+                                   + failedSender
+                                   + " failed but other senders completed their task. ACRA will not send this report again.");
+                }
+            }
+        }
+    }
+
+    private void deleteFile(File file) {
+        final boolean deleted = file.delete();
+        if (!deleted) {
+            ACRA.log.w(LOG_TAG, "Could not delete error report : " + file);
+        }
+    }
+
+    /**
+     * Returns true if the application is debuggable.
+     *
+     * @return true if the application is debuggable.
+     */
+    private boolean isDebuggable() {
+        PackageManager pm = context.getPackageManager();
+        try {
+            return ((pm.getApplicationInfo(context.getPackageName(), 0).flags & ApplicationInfo.FLAG_DEBUGGABLE) > 0);
+        } catch (PackageManager.NameNotFoundException e) {
+            return false;
+        }
+    }
+}
diff --git a/src/main/java/org/acra/sender/ReportSender.java b/src/main/java/org/acra/sender/ReportSender.java
index 5271019c..30e06369 100644
--- a/src/main/java/org/acra/sender/ReportSender.java
+++ b/src/main/java/org/acra/sender/ReportSender.java
@@ -19,32 +19,30 @@
 import org.acra.collector.CrashReportData;
 
 /**
- * A simple interface for defining various crash report senders. You can reuse
- * {@link HttpSender} to send reports to your custom server-side report
+ * A simple interface for defining various crash report senders.
+ *
+ * You can reuse {@link HttpSender} to send reports to your custom server-side report
  * collection script even if you expect (or prefer) specific names for each
  * report field as {@link HttpSender#send(Context, CrashReportData)}
  * can take a {@code Map<ReportField, String>} as an input to convert each field name to
  * your preferred POST parameter name.
  * 
  * @author Kevin Gaudin
- * 
  */
 public interface ReportSender {
+
     /**
-     * Send crash report data. You don't have to take care of managing Threads,
-     * just implement what is necessary to handle the data. ACRA will use a
-     * specific Thread (not the UI Thread) to run your sender.
-     *
+     * Send crash report data.
      *
+     * Method will be called from the {@link SenderService}.
      *
      * @param context       Android Context in which to send the crash report.
-     * @param errorContent
-     *            Stores key/value pairs for each report field. A report field
-     *            is identified by a {@link org.acra.ReportField} enum value.
+     * @param errorContent  Stores key/value pairs for each report field.
+     *                      A report field is identified by a {@link org.acra.ReportField} enum value.
      * @throws ReportSenderException
      *             If anything goes fatally wrong during the handling of crash
      *             data, you can (should) throw a {@link ReportSenderException}
      *             with a custom message.
      */
-    public void send(Context context, CrashReportData errorContent) throws ReportSenderException;
+    void send(Context context, CrashReportData errorContent) throws ReportSenderException;
 }
diff --git a/src/main/java/org/acra/sender/ReportSenderFactory.java b/src/main/java/org/acra/sender/ReportSenderFactory.java
new file mode 100644
index 00000000..2bb86fc0
--- /dev/null
+++ b/src/main/java/org/acra/sender/ReportSenderFactory.java
@@ -0,0 +1,23 @@
+package org.acra.sender;
+
+import android.content.Context;
+import org.acra.config.ACRAConfig;
+
+/**
+ * Factory for creating and configuring a {@link ReportSender} instance.
+ * Implementations must have a no argument constructor.
+ *
+ * Each configured ReportSenderFactory is created within the {@link SenderService}
+ * and is used to construct and configure a single {@link ReportSender}.
+ *
+ * Created by William on 4-JAN-2016.
+ */
+public interface ReportSenderFactory {
+
+    /**
+     * @param context   Application context.
+     * @param config    Configuration to use when sending reports.
+     * @return Fully configured instance of the relevant ReportSender.
+     */
+    ReportSender create(Context context, ACRAConfig config);
+}
diff --git a/src/main/java/org/acra/sender/SenderService.java b/src/main/java/org/acra/sender/SenderService.java
new file mode 100644
index 00000000..aae7e909
--- /dev/null
+++ b/src/main/java/org/acra/sender/SenderService.java
@@ -0,0 +1,106 @@
+package org.acra.sender;
+
+import android.app.IntentService;
+import android.content.Intent;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.file.CrashReportFileNameParser;
+import org.acra.config.ACRAConfig;
+import org.acra.file.ReportLocator;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.acra.ACRA.LOG_TAG;
+
+public class SenderService extends IntentService {
+
+    public static final String EXTRA_ONLY_SEND_SILENT_REPORTS = "onlySendSilentReports";
+    public static final String EXTRA_APPROVE_REPORTS_FIRST = "approveReportsFirst";
+    public static final String EXTRA_REPORT_SENDER_FACTORIES = "reportSenderFactories";
+    public static final String EXTRA_ACRA_CONFIG = "acraConfig";
+
+    private final ReportLocator locator = new ReportLocator(this);
+
+    public SenderService() {
+        super("ACRA SenderService");
+    }
+
+    @Override
+    protected void onHandleIntent(final Intent intent) {
+
+        final boolean onlySendSilentReports = intent.getBooleanExtra(EXTRA_ONLY_SEND_SILENT_REPORTS, false);
+        final boolean approveReportsFirst = intent.getBooleanExtra(EXTRA_APPROVE_REPORTS_FIRST, false);
+
+        //noinspection unchecked
+        final Class<? extends ReportSenderFactory>[] senderFactoryClasses =
+                (Class<? extends ReportSenderFactory>[]) intent.getSerializableExtra(EXTRA_REPORT_SENDER_FACTORIES);
+
+        final ACRAConfig config = (ACRAConfig) intent.getSerializableExtra(EXTRA_ACRA_CONFIG);
+
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "About to start sending reports from SenderService");
+        try {
+            final List<ReportSender> senderInstances = getSenderInstances(config, senderFactoryClasses);
+
+            // Mark reports as approved
+            if (approveReportsFirst) {
+                markReportsAsApproved();
+            }
+
+            // Get approved reports
+            final File[] reports = locator.getApprovedReports();
+
+            final ReportDistributor reportDistributor = new ReportDistributor(this, config, senderInstances);
+
+            // Iterate over approved reports and send via all Senders.
+            int reportsSentCount = 0; // Use to rate limit sending
+            final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
+            for (final File report : reports) {
+                if (onlySendSilentReports && !fileNameParser.isSilent(report.getName())) {
+                    continue;
+                }
+
+                if (reportsSentCount >= ACRAConstants.MAX_SEND_REPORTS) {
+                    break; // send only a few reports to avoid overloading the network
+                }
+
+                reportDistributor.distribute(report);
+            }
+        } catch (Exception e) {
+            ACRA.log.e(LOG_TAG, "", e);
+        }
+
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished sending reports from SenderService");
+    }
+
+    private List<ReportSender> getSenderInstances(ACRAConfig config, Class<? extends ReportSenderFactory>[] factoryClasses) {
+        final List<ReportSender> reportSenders = new ArrayList<ReportSender>();
+        for (final Class<? extends ReportSenderFactory> factoryClass : factoryClasses) {
+            try {
+                final ReportSenderFactory factory = factoryClass.newInstance();
+                final ReportSender sender = factory.create(this.getApplication(), config);
+                reportSenders.add(sender);
+            } catch (InstantiationException e) {
+                ACRA.log.w(LOG_TAG, "Could not construct ReportSender from " + factoryClass, e);
+            } catch (IllegalAccessException e) {
+                ACRA.log.w(LOG_TAG, "Could not construct ReportSender from " + factoryClass, e);
+            }
+        }
+        return reportSenders;
+    }
+
+    /**
+     * Flag all pending reports as "approved" by the user. These reports can be sent.
+     */
+    private void markReportsAsApproved() {
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Mark all pending reports as approved.");
+
+        for (File report : locator.getUnapprovedReports()) {
+            final File approvedReport = new File(locator.getApprovedFolder(), report.getName());
+            if (!report.renameTo(approvedReport)) {
+                ACRA.log.w(LOG_TAG, "Could not rename approved report from " + report + " to " + approvedReport);
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/acra/sender/SenderServiceStarter.java b/src/main/java/org/acra/sender/SenderServiceStarter.java
new file mode 100644
index 00000000..88d4dc5b
--- /dev/null
+++ b/src/main/java/org/acra/sender/SenderServiceStarter.java
@@ -0,0 +1,38 @@
+package org.acra.sender;
+
+import android.content.Context;
+import android.content.Intent;
+import org.acra.ACRA;
+import org.acra.config.ACRAConfig;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Starts the Service(Intent)Service to process and send pending reports.
+ */
+public class SenderServiceStarter {
+
+    private final Context context;
+    private final ACRAConfig config;
+
+    public SenderServiceStarter(Context context, ACRAConfig config) {
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * Starts a Thread to start sending outstanding error reports.
+     *
+     * @param onlySendSilentReports If true then only send silent reports.
+     * @param approveReportsFirst   If true then approve unapproved reports first.
+     */
+    public void startService(boolean onlySendSilentReports, boolean approveReportsFirst) {
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "About to start SenderService");
+        final Intent intent = new Intent(context, SenderService.class);
+        intent.putExtra(SenderService.EXTRA_ONLY_SEND_SILENT_REPORTS, onlySendSilentReports);
+        intent.putExtra(SenderService.EXTRA_APPROVE_REPORTS_FIRST, approveReportsFirst);
+        intent.putExtra(SenderService.EXTRA_REPORT_SENDER_FACTORIES, config.reportSenderFactoryClasses());
+        intent.putExtra(SenderService.EXTRA_ACRA_CONFIG, config);
+        context.startService(intent);
+    }
+}
diff --git a/src/main/java/org/acra/util/ApplicationStartupProcessor.java b/src/main/java/org/acra/util/ApplicationStartupProcessor.java
new file mode 100644
index 00000000..da1144d0
--- /dev/null
+++ b/src/main/java/org/acra/util/ApplicationStartupProcessor.java
@@ -0,0 +1,100 @@
+package org.acra.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.widget.Toast;
+import org.acra.ACRA;
+import org.acra.ReportingInteractionMode;
+import org.acra.config.ACRAConfig;
+import org.acra.file.BulkReportDeleter;
+import org.acra.file.CrashReportFileNameParser;
+import org.acra.file.ReportLocator;
+import org.acra.prefs.PrefUtils;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.sender.SenderServiceStarter;
+import org.acra.util.PackageManagerWrapper;
+import org.acra.util.ToastSender;
+
+import java.io.File;
+
+/**
+ * Looks for any existing reports and starts sending them.
+ */
+public final class ApplicationStartupProcessor {
+
+    private final Context context;
+    private final ACRAConfig config;
+
+    public ApplicationStartupProcessor(Context context, ACRAConfig config) {
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * Delete any old unsent reports if this is a newer version of the app than when we last started.
+     */
+    public void deleteUnsentReportsFromOldAppVersion() {
+        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
+        final long lastVersionNr = prefs.getInt(ACRA.PREF_LAST_VERSION_NR, 0);
+        final int appVersion = getAppVersion();
+
+        if (appVersion > lastVersionNr) {
+            final BulkReportDeleter reportDeleter = new BulkReportDeleter(context);
+            reportDeleter.deleteReports(true, 0);
+            reportDeleter.deleteReports(false, 0);
+
+            final SharedPreferences.Editor prefsEditor = prefs.edit();
+            prefsEditor.putInt(ACRA.PREF_LAST_VERSION_NR, appVersion);
+            PrefUtils.save(prefsEditor);
+        }
+    }
+
+    /**
+     * Deletes all the unapproved reports except for the last one.
+     *
+     * NOTIFICATION or DIALOG mode require explicit approval by user.
+     * If latest notification/dialog has been ignored: neither accepted nor refused; they will accumulate.
+     * So destroy all unapproved reports bar the last one.
+     */
+    public void deleteAllUnapprovedReportsBarOne() {
+        new BulkReportDeleter(context).deleteReports(false, 1);
+    }
+
+    /**
+     * If ReportingInteractionMode == Toast and at least one non silent report then show a Toast.
+     * All approved reports will be sent.
+     */
+    public void sendApprovedReports() {
+
+        if (config.mode() == ReportingInteractionMode.TOAST && hasNonSilentApprovedReports()) {
+            ToastSender.sendToast(context, config.resToastText(), Toast.LENGTH_LONG);
+        }
+
+        // Send the approved reports.
+        final SenderServiceStarter starter = new SenderServiceStarter(context, config);
+        starter.startService(false, false);
+
+    }
+
+    /**
+     * @return app version or 0 if PackageInfo was not available.
+     */
+    private int getAppVersion() {
+        final PackageManagerWrapper packageManagerWrapper = new PackageManagerWrapper(context);
+        final PackageInfo packageInfo = packageManagerWrapper.getPackageInfo();
+        return (packageInfo == null) ? 0 : packageInfo.versionCode;
+    }
+
+    private boolean hasNonSilentApprovedReports() {
+        final ReportLocator reportLocator = new ReportLocator(context);
+        final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
+        final File[] reportFiles = reportLocator.getApprovedReports();
+        for (final File file : reportFiles) {
+            if (!fileNameParser.isSilent(file.getName())) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java b/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java
deleted file mode 100644
index c5b69bb3..00000000
--- a/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.acra.util;
-
-import android.content.Context;
-import org.apache.http.conn.scheme.SocketFactory;
-import org.apache.http.conn.ssl.SSLSocketFactory;
-
-/**
- * Default implementation of a HttpSocketFactoryFactory.
- */
-public final class DefaultHttpsSocketFactoryFactory implements HttpsSocketFactoryFactory {
-
-    public static final HttpsSocketFactoryFactory INSTANCE = new DefaultHttpsSocketFactoryFactory();
-
-    @Override
-    public SocketFactory create(Context context) {
-        return new TlsSniSocketFactory();
-    }
-}
diff --git a/src/main/java/org/acra/util/FakeSocketFactory.java b/src/main/java/org/acra/util/FakeSocketFactory.java
deleted file mode 100644
index 73b9a5c2..00000000
--- a/src/main/java/org/acra/util/FakeSocketFactory.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Utility class copied from http://transdroid.googlecode.com with the authorization from Eric Kok to redistribute it under Apache Software License. 
- */
-package org.acra.util;
-
-import org.apache.http.conn.scheme.LayeredSocketFactory;
-import org.apache.http.conn.scheme.SocketFactory;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.TrustManager;
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Socket;
-
-public class FakeSocketFactory implements SocketFactory, LayeredSocketFactory {
-
-    private SSLContext sslcontext = null;
-
-    private static SSLContext createEasySSLContext() throws IOException {
-        try {
-            final SSLContext context = SSLContext.getInstance("TLS");
-            context.init(null, new TrustManager[] { new NaiveTrustManager() }, null);
-            return context;
-        } catch (Exception e) {
-            throw new IOException(e.getMessage());
-        }
-    }
-
-    private SSLContext getSSLContext() throws IOException {
-        if (this.sslcontext == null) {
-            this.sslcontext = createEasySSLContext();
-        }
-        return this.sslcontext;
-    }
-
-    @Override
-    public Socket connectSocket(Socket sock, String host, int port, InetAddress localAddress, int localPort, HttpParams params) throws IOException {
-        final int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
-        final int soTimeout = HttpConnectionParams.getSoTimeout(params);
-
-        final InetSocketAddress remoteAddress = new InetSocketAddress(host, port);
-        final SSLSocket sslsock = (SSLSocket) ((sock != null) ? sock : createSocket());
-
-        if ((localAddress != null) || (localPort > 0)) {
-            // we need to bind explicitly
-            if (localPort < 0) {
-                localPort = 0; // indicates "any"
-            }
-            final InetSocketAddress isa = new InetSocketAddress(localAddress, localPort);
-            sslsock.bind(isa);
-        }
-
-        sslsock.connect(remoteAddress, connTimeout);
-        sslsock.setSoTimeout(soTimeout);
-
-        return sslsock;
-    }
-
-    @Override
-    public Socket createSocket() throws IOException {
-        return getSSLContext().getSocketFactory().createSocket();
-    }
-
-    @Override
-    public boolean isSecure(Socket arg0) throws IllegalArgumentException {
-        return true;
-    }
-
-    @Override
-    public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {
-        return getSSLContext().getSocketFactory().createSocket(socket, host, port, autoClose);
-    }
-
-}
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 20b5133e..0d738061 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -5,102 +5,40 @@
  */
 package org.acra.util;
 
+import android.util.Base64;
+import org.acra.ACRA;
+import org.acra.config.ACRAConfig;
+import org.acra.sender.HttpSender.Method;
+import org.acra.sender.HttpSender.Type;
+
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManagerFactory;
+import java.io.BufferedOutputStream;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
-import java.net.SocketTimeoutException;
+import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLEncoder;
-import java.security.KeyManagementException;
-import java.security.KeyStoreException;
-import java.security.NoSuchAlgorithmException;
-import java.security.UnrecoverableKeyException;
+import java.security.GeneralSecurityException;
 import java.util.Map;
 
-import android.content.Context;
-import org.acra.ACRA;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.apache.http.HttpResponse;
-import org.apache.http.StatusLine;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.HttpRequestRetryHandler;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.client.methods.HttpPut;
-import org.apache.http.client.params.ClientPNames;
-import org.apache.http.client.params.CookiePolicy;
-import org.apache.http.conn.ClientConnectionManager;
-import org.apache.http.conn.scheme.PlainSocketFactory;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.conn.scheme.SocketFactory;
-import org.apache.http.conn.ssl.SSLSocketFactory;
-import org.apache.http.entity.StringEntity;
-import org.apache.http.impl.auth.BasicScheme;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.SingleClientConnManager;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-import org.apache.http.protocol.BasicHttpContext;
-import org.apache.http.protocol.HttpContext;
-import org.apache.http.util.EntityUtils;
-
 import static org.acra.ACRA.LOG_TAG;
 
 public final class HttpRequest {
 
-    private static class SocketTimeOutRetryHandler implements HttpRequestRetryHandler {
-
-        private final HttpParams httpParams;
-        private final int maxNrRetries;
-
-        /**
-         * @param httpParams
-         *            HttpParams that will be used in the HttpRequest.
-         * @param maxNrRetries
-         *            Max number of times to retry Request on failure due to
-         *            SocketTimeOutException.
-         */
-        private SocketTimeOutRetryHandler(HttpParams httpParams, int maxNrRetries) {
-            this.httpParams = httpParams;
-            this.maxNrRetries = maxNrRetries;
-        }
-
-        @Override
-        public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
-            if (exception instanceof SocketTimeoutException) {
-                if (executionCount <= maxNrRetries) {
-
-                    if (httpParams != null) {
-                        final int newSocketTimeOut = HttpConnectionParams.getSoTimeout(httpParams) * 2;
-                        HttpConnectionParams.setSoTimeout(httpParams, newSocketTimeOut);
-                        ACRA.log.d(LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut
-                                + " millis and trying again");
-                    } else {
-                        ACRA.log.d(LOG_TAG,
-                                "SocketTimeOut - no HttpParams, cannot increase time out. Trying again with current settings");
-                    }
-
-                    return true;
-                }
-
-                ACRA.log.d(LOG_TAG, "SocketTimeOut but exceeded max number of retries : " + maxNrRetries);
-            }
-
-            return false; // To change body of implemented methods use File |
-                          // Settings | File Templates.
-        }
-    }
-
+    private final ACRAConfig config;
     private String login;
     private String password;
     private int connectionTimeOut = 3000;
     private int socketTimeOut = 3000;
-    private int maxNrRetries = 3;
     private Map<String,String> headers;
-    
+
+    public HttpRequest(ACRAConfig config) {
+        this.config = config;
+    }
+
     public void setLogin(String login) {
         this.login = login;
     }
@@ -122,173 +60,99 @@ public void setHeaders(Map<String,String> headers) {
     }
 
     
-    /**
-     * The default number of retries is 3.
-     * 
-     * @param maxNrRetries
-     *            Max number of times to retry Request on failure due to
-     *            SocketTimeOutException.
-     */
-    public void setMaxNrRetries(int maxNrRetries) {
-        this.maxNrRetries = maxNrRetries;
-    }
-
     /**
      * Posts to a URL.
      * 
-     *
-     * @param context   Android context for which to create the SocketFactory.
      * @param url       URL to which to post.
      * @param content   Map of parameters to post to a URL.
      * @throws IOException if the data cannot be posted.
      */
-    public void send(Context context, URL url, Method method, String content, Type type) throws IOException {
-
-        final HttpClient httpClient = getHttpClient(context);
-        final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
-
-        ACRA.log.d(LOG_TAG, "Sending request to " + url);
-        if (ACRA.DEV_LOGGING)
-            ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
-        if (ACRA.DEV_LOGGING)
-            ACRA.log.d(LOG_TAG, content);
-
-        HttpResponse response = null;
-        try {
-            response = httpClient.execute(httpRequest, new BasicHttpContext());
-            if (response != null) {
-                final StatusLine statusLine = response.getStatusLine();
-                if (statusLine != null) {
-                    final String statusCode = Integer.toString(response.getStatusLine().getStatusCode());
-    
-                    if (!statusCode.equals("409") // 409 return code means that the
-                                                  // report has been received
-                                                  // already. So we can discard it.
-                            && !statusCode.equals("403") // a 403 error code is an explicit data validation refusal
-                                                         // from the server. The request must not be repeated.
-                                                         // Discard it.
-                            && (statusCode.startsWith("4") || statusCode.startsWith("5"))) {
-                        if (ACRA.DEV_LOGGING) {
-                            ACRA.log.d(LOG_TAG, "Could not send HttpPost : " + httpRequest);
-                            ACRA.log.d(LOG_TAG, "HttpResponse Status : "
-                                    + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
-                            final String respContent = EntityUtils.toString(response.getEntity());
-                            ACRA.log.d(LOG_TAG,
-                                    "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
-                        }
-                        throw new IOException("Host returned error code " + statusCode);
-                    }
-                }
-
-                if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(LOG_TAG, "HttpResponse Status : "
-                            + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
-                final String respContent = EntityUtils.toString(response.getEntity());
-                if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(LOG_TAG,
-                            "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
-
-            } else {
-                if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(LOG_TAG, "HTTP no Response!!");
-            }
-        } finally {
-            if (response != null) {
-				response.getEntity().consumeContent();
-			}
-        }
-    }
+    public void send(URL url, Method method, String content, Type type) throws IOException {
 
-    /**
-     * @return HttpClient to use with this HttpRequest.
-     */
-    private HttpClient getHttpClient(Context context) {
-        final HttpParams httpParams = new BasicHttpParams();
-        httpParams.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
-        HttpConnectionParams.setConnectionTimeout(httpParams, connectionTimeOut);
-        HttpConnectionParams.setSoTimeout(httpParams, socketTimeOut);
-        HttpConnectionParams.setSocketBufferSize(httpParams, 8192);
-
-        final SchemeRegistry registry = new SchemeRegistry();
-        registry.register(new Scheme("http", new PlainSocketFactory(), 80));
-        if (ACRA.getConfig().disableSSLCertValidation()) {
-            registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
-        } else if (ACRA.getConfig().keyStore() != null) {
+        final HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+
+        // Configure SSL
+        if (urlConnection instanceof HttpsURLConnection) {
             try {
-                SSLSocketFactory sf = new SSLSocketFactory(ACRA.getConfig().keyStore());
-                sf.setHostnameVerifier(SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
-                registry.register(new Scheme("https", sf, 443));
-            } catch (KeyManagementException e) {
-                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-            } catch (UnrecoverableKeyException e) {
-                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-            } catch (NoSuchAlgorithmException e) {
-                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-            } catch (KeyStoreException e) {
-                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-            }
-        } else {
-            final HttpsSocketFactoryFactory factory = ACRA.getConfig().getHttpSocketFactoryFactory();
-            final SocketFactory socketFactory = factory.create(context);
-            registry.register(new Scheme("https", socketFactory, 443));
-        }
+                final HttpsURLConnection httpsUrlConnection = (HttpsURLConnection) urlConnection;
 
-        final ClientConnectionManager clientConnectionManager = new SingleClientConnManager(httpParams, registry);
-        final DefaultHttpClient httpClient = new DefaultHttpClient(clientConnectionManager, httpParams);
+                final String algorithm = TrustManagerFactory.getDefaultAlgorithm();
+                final TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
 
-        final HttpRequestRetryHandler retryHandler = new SocketTimeOutRetryHandler(httpParams, maxNrRetries);
-        httpClient.setHttpRequestRetryHandler(retryHandler);
+                tmf.init(config.keyStore());
 
-        return httpClient;
-    }
+                final SSLContext sslContext = SSLContext.getInstance("TLS");
+                sslContext.init(null, tmf.getTrustManagers(), null);
 
-    /**
-     * @return Credentials to use with this HttpRequest or null if no
-     *         credentials were supplied.
-     */
-    private UsernamePasswordCredentials getCredentials() {
-        if (login != null || password != null) {
-            return new UsernamePasswordCredentials(login, password);
+                httpsUrlConnection.setSSLSocketFactory(sslContext.getSocketFactory());
+            } catch (GeneralSecurityException e) {
+                ACRA.log.e(LOG_TAG, "Could not configure SSL for ACRA request to " + url, e);
+            }
         }
 
-        return null;
-    }
-
-    private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, String content, Type type)
-            throws UnsupportedEncodingException, UnsupportedOperationException {
-
-        final HttpEntityEnclosingRequestBase httpRequest;
-        switch (method) {
-        case POST:
-            httpRequest = new HttpPost(url.toString());
-            break;
-        case PUT:
-            httpRequest = new HttpPut(url.toString());
-            break;
-        default:
-            throw new UnsupportedOperationException("Unknown method: " + method.name());
+        // Set Credentials
+        if ((login != null) && (password != null)) {
+            final String credentials = login + ":" + password;
+            final String encoded = new String(Base64.encode(credentials.getBytes("UTF-8"), Base64.NO_WRAP), "UTF-8");
+            urlConnection.setRequestProperty("Authorization", "Basic " + encoded);
         }
 
-        final UsernamePasswordCredentials creds = getCredentials();
-        if (creds != null) {
-            httpRequest.addHeader(BasicScheme.authenticate(creds, "UTF-8", false));
-        }
-        httpRequest.setHeader("User-Agent", "Android");
-        httpRequest
-                .setHeader("Accept",
-                        "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
-        httpRequest.setHeader("Content-Type", type.getContentType());
+        urlConnection.setConnectTimeout(connectionTimeOut);
+        urlConnection.setReadTimeout(socketTimeOut);
+
+        // Set Headers
+        urlConnection.setRequestProperty("User-Agent", "Android");
+        urlConnection.setRequestProperty("Accept",
+                "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
+        urlConnection.setRequestProperty("Content-Type", type.getContentType());
 
         if(headers != null) {
             for (final String header : headers.keySet()) {
-              final String value = headers.get(header);
-              httpRequest.setHeader(header, value);
-           }
+                final String value = headers.get(header);
+                urlConnection.setRequestProperty(header, value);
+            }
+        }
+
+        final byte[] contentAsBytes = content.getBytes("UTF-8");
+
+        // write output - see http://developer.android.com/reference/java/net/HttpURLConnection.html
+        urlConnection.setRequestMethod(method.name());
+        urlConnection.setDoOutput(true);
+        urlConnection.setFixedLengthStreamingMode(contentAsBytes.length);
+
+        // Disable ConnectionPooling because otherwise OkHttp ConnectionPool will try to start a Thread on #connect
+        System.setProperty("http.keepAlive", "false");
+
+        urlConnection.connect();
+
+        final OutputStream outputStream = new BufferedOutputStream(urlConnection.getOutputStream());
+        outputStream.write(contentAsBytes);
+        outputStream.flush();
+        outputStream.close();
+
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG,"Sending request to " + url);
+        if(ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
+        if(ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, content);
+
+        final int responseCode = urlConnection.getResponseCode();
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG,"Request response : " + responseCode + " : " + urlConnection.getResponseMessage());
+        if ((responseCode >= 200) && (responseCode < 300)) {
+            // All is good
+            ACRA.log.i(LOG_TAG,"Request received by server");
+        } else if (responseCode == 403) {
+            // 403 is an explicit data validation refusal from the server. The request must not be repeated. Discard it.
+            ACRA.log.w(LOG_TAG, "Data validation error on server - request will be discarded");
+        } else if (responseCode == 409) {
+            // 409 means that the report has been received already. So we can discard it.
+            ACRA.log.w(LOG_TAG, "Server has already received this post - request will be discarded");
+        } else if ((responseCode >= 400) && (responseCode < 600)) {
+            ACRA.log.w(LOG_TAG, "Could not send ACRA Post responseCode=" + responseCode + " message=" + urlConnection.getResponseMessage());
+            throw new IOException("Host returned error code " + responseCode);
+        } else {
+            ACRA.log.w(LOG_TAG, "Could not send ACRA Post - request will be discarded responseCode=" + responseCode + " message=" + urlConnection.getResponseMessage());
         }
-        
-        httpRequest.setEntity(new StringEntity(content, "UTF-8"));
 
-        return httpRequest;
+        urlConnection.disconnect();
     }
 
     /**
@@ -316,4 +180,4 @@ public static String getParamsAsFormString(Map<?, ?> parameters) throws Unsuppor
 
         return dataBfr.toString();
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java b/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java
deleted file mode 100644
index 398975d1..00000000
--- a/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package org.acra.util;
-
-import android.content.Context;
-import org.apache.http.conn.scheme.SocketFactory;
-
-/**
- * Factory that creates an instance of a Https SocketFactory.
- */
-public interface HttpsSocketFactoryFactory {
-
-    /**
-     * @param context   Android context for which to create the SocketFactory.
-     * @return SocketFactory that was created.
-     */
-    public SocketFactory create(Context context);
-}
diff --git a/src/main/java/org/acra/util/JSONReportBuilder.java b/src/main/java/org/acra/util/JSONReportBuilder.java
index d0a19faa..f478a708 100644
--- a/src/main/java/org/acra/util/JSONReportBuilder.java
+++ b/src/main/java/org/acra/util/JSONReportBuilder.java
@@ -84,7 +84,7 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
                             addJSONFromProperty(subObject, line);
                         }
                     } catch (IOException e) {
-                        ACRA.log.e(LOG_TAG, "Error while converting " + key.name() + " to JSON.", e);
+                        ACRA.log.w(LOG_TAG, "Error while converting " + key.name() + " to JSON.", e);
                     }
                     jsonReport.accumulate(key.name(), subObject);
                 } else {
@@ -215,7 +215,7 @@ private static void addJSONSubTree(JSONObject destination, String[] keys, Object
                     }
 
                     if (intermediate == null) {
-                        ACRA.log.e(LOG_TAG, "Unknown json subtree type, see issue #186");
+                        ACRA.log.w(LOG_TAG, "Unknown json subtree type, see issue #186");
                         // We should never get here, but if we do, drop this value to still send the report
                         return;
                     }
diff --git a/src/main/java/org/acra/util/PackageManagerWrapper.java b/src/main/java/org/acra/util/PackageManagerWrapper.java
index cb9ab87c..fa31c708 100644
--- a/src/main/java/org/acra/util/PackageManagerWrapper.java
+++ b/src/main/java/org/acra/util/PackageManagerWrapper.java
@@ -63,7 +63,7 @@ public PackageInfo getPackageInfo() {
         try {
             return pm.getPackageInfo(context.getPackageName(), 0);
         } catch (PackageManager.NameNotFoundException e) {
-            ACRA.log.v(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
+            ACRA.log.w(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
             return null;
         } catch (RuntimeException e) {
             // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
diff --git a/src/main/java/org/acra/util/ReflectionException.java b/src/main/java/org/acra/util/ReflectionException.java
deleted file mode 100644
index 16bb0e26..00000000
--- a/src/main/java/org/acra/util/ReflectionException.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package org.acra.util;
-
-/**
- * Thrown when an error occurs during reflection.
- */
-public final class ReflectionException extends Exception  {
-
-    public ReflectionException(String msg, Throwable th) {
-        super(msg, th);
-    }
-}
diff --git a/src/main/java/org/acra/util/ReflectionHelper.java b/src/main/java/org/acra/util/ReflectionHelper.java
deleted file mode 100644
index 6463e309..00000000
--- a/src/main/java/org/acra/util/ReflectionHelper.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.acra.util;
-
-/**
- * Helps to construct objects via reflection.
- */
-public final class ReflectionHelper {
-
-    public Object create(String className) throws ReflectionException {
-        try {
-            final Class clazz = Class.forName(className);
-            return clazz.newInstance();
-        } catch (ClassNotFoundException e) {
-            throw new ReflectionException("Could not find class : " + className, e);
-        } catch (InstantiationException e) {
-            throw new ReflectionException("Could not instantiate class : " + className, e);
-        } catch (IllegalAccessException e) {
-            throw new ReflectionException("Could not access class : " + className, e);
-        }
-    }
-}
diff --git a/src/main/java/org/acra/util/ReportUtils.java b/src/main/java/org/acra/util/ReportUtils.java
index 39684455..3aeb57c2 100644
--- a/src/main/java/org/acra/util/ReportUtils.java
+++ b/src/main/java/org/acra/util/ReportUtils.java
@@ -1,23 +1,22 @@
 package org.acra.util;
 
+import android.content.Context;
+import android.os.Environment;
+import android.os.StatFs;
+import android.telephony.TelephonyManager;
+import android.util.SparseArray;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+
 import java.io.File;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
 import java.net.SocketException;
 import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Enumeration;
 import java.util.Locale;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-
-import android.content.Context;
-import android.os.Environment;
-import android.os.StatFs;
-import android.telephony.TelephonyManager;
-import android.text.format.Time;
-import android.util.SparseArray;
-
 import static org.acra.ACRA.LOG_TAG;
 
 /**
@@ -133,9 +132,9 @@ public static String getLocalIpAddress() {
         return result.toString();
     }
 
-    public static String getTimeString(Time time)
+    public static String getTimeString(Calendar time)
     {
         SimpleDateFormat format = new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH);
-        return format.format(time.toMillis(true));
+        return format.format(time.getTimeInMillis());
     }
 }
diff --git a/src/main/java/org/acra/util/TlsSniSocketFactory.java b/src/main/java/org/acra/util/TlsSniSocketFactory.java
deleted file mode 100644
index 06a25c45..00000000
--- a/src/main/java/org/acra/util/TlsSniSocketFactory.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/*
- * This class was copied from this blog post:
- * http://blog.dev001.net/post/67082904181/android-using-sni-and-tlsv1-2-with-apache-httpclient
- * Thanks go to Dev001!
- * Also, changes for using only secure cipher suites were included from code of DAVdroid.
- * Thankgs go to Ricki Hirner (bitfire web engineering)!
- */
-package org.acra.util;
-
-import android.net.SSLCertificateSocketFactory;
-import android.os.Build;
-import android.text.TextUtils;
-
-import org.acra.ACRA;
-import org.acra.collector.Compatibility;
-import org.apache.http.conn.scheme.LayeredSocketFactory;
-import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
-import org.apache.http.params.HttpParams;
-
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.net.InetAddress;
-import java.net.Socket;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
-
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLPeerUnverifiedException;
-import javax.net.ssl.SSLSession;
-import javax.net.ssl.SSLSocket;
-
-/**
- * Provides a SSLSocketFactory that is able to use SNI for SSL connections and
- * therefore allows multiple SSL servers on one IP address.<br/>
- *   1) socket = createSocket() is called
- *   2) reasonable encryption settings are applied to socket
- *   3) SNI is set up for socket
- *   4) handshake and certificate/host name verification
- * <p/>
- * @author Philipp Kapfer
- * @since 4.6.0
- */
-public class TlsSniSocketFactory implements LayeredSocketFactory {
-
-    private static final String TAG =  TlsSniSocketFactory.class.getSimpleName();
-    
-    private final SSLCertificateSocketFactory sslSocketFactory = (SSLCertificateSocketFactory) SSLCertificateSocketFactory.getDefault(0);
-
-    // use BrowserCompatHostnameVerifier to allow IP addresses in the Common Name
-    private final static HostnameVerifier hostnameVerifier = new BrowserCompatHostnameVerifier();
-
-    private static final List<String> ALLOWED_CIPHERS = Arrays.asList(
-        // allowed secure ciphers according to NIST.SP.800-52r1.pdf Section 3.3.1 (see http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf)
-        // TLS 1.2
-        "TLS_RSA_WITH_AES_256_GCM_SHA384",
-        "TLS_RSA_WITH_AES_128_GCM_SHA256",
-        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
-        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
-        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
-        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
-        "TLS_ECHDE_RSA_WITH_AES_128_GCM_SHA256",
-        // maximum interoperability
-        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
-        "TLS_RSA_WITH_AES_128_CBC_SHA",
-        // additionally
-        "TLS_RSA_WITH_AES_256_CBC_SHA",
-        "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
-        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
-        "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
-        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
-    );
-
-    // Plain TCP/IP (layer below TLS)
-
-    @Override
-    public Socket connectSocket(Socket s, String host, int port, InetAddress localAddress, int localPort, HttpParams params) throws IOException {
-        return null;
-    }
-
-    @Override
-    public Socket createSocket() throws IOException {
-        return null;
-    }
-
-    @Override
-    public boolean isSecure(Socket s) throws IllegalArgumentException {
-        return (s instanceof SSLSocket) && s.isConnected();
-    }
-
-
-    // TLS layer
-
-    @Override
-    public Socket createSocket(Socket plainSocket, String host, int port, boolean autoClose) throws IOException {
-        if (autoClose) {
-            // we don't need the plainSocket
-            plainSocket.close();
-        }
-
-        // create and connect SSL socket, but don't do hostname/certificate verification yet
-        final SSLSocket ssl = (SSLSocket) sslSocketFactory.createSocket(InetAddress.getByName(host), port);
-
-        // establish and verify TLS connection
-        establishAndVerify(ssl, host);
-
-        return ssl;
-    }
-    
-    /**
-     * Establishes and verifies a TLS connection to a (TCP-)connected SSLSocket:
-     *   - set TLS parameters like allowed protocols and ciphers
-     *   - set SNI host name
-     *   - verify host name
-     *   - verify certificate
-     * @param socket    unconnected SSLSocket
-     * @param host      host name for SNI
-     * @throws IOException if the connection could not be established.
-     */
-    private void establishAndVerify(SSLSocket socket, String host) throws IOException {
-        setTlsParameters(socket);
-        setSniHostname(socket, host);
-        
-        // TLS handshake, throws an exception for untrusted certificates
-        socket.startHandshake();
-
-        // verify hostname and certificate
-        SSLSession session = socket.getSession();
-        if (!hostnameVerifier.verify(host, session)) {
-            // throw exception for invalid host names
-            throw new SSLPeerUnverifiedException(host);
-        }
-
-        ACRA.log.i(TAG, "Established " + session.getProtocol() + " connection with " + session.getPeerHost() + " using " + session.getCipherSuite());
-    }
-    
-    /**
-     * Prepares a TLS/SSL connection socket by:
-     *   - setting reasonable TLS protocol versions
-     *   - setting reasonable cipher suites (if required)
-     * @param socket   unconnected SSLSocket to prepare
-     */
-    private void setTlsParameters(SSLSocket socket) {
-        // Android 5.0+ (API level21) provides reasonable default settings
-        // but it still allows SSLv3
-        // https://developer.android.com/about/versions/android-5.0-changes.html#ssl
-
-        /* set reasonable protocol versions */
-        // - enable all supported protocols (enables TLSv1.1 and TLSv1.2 on Android <5.0)
-        // - remove all SSL versions (especially SSLv3) because they're insecure now
-        final List<String> protocols = new LinkedList<String>();
-        for (String protocol : socket.getSupportedProtocols()) {
-            if (!protocol.toUpperCase().contains("SSL")) {
-                protocols.add(protocol);
-            }
-        }
-        ACRA.log.v(TAG, "Setting allowed TLS protocols: " + TextUtils.join(", ", protocols));
-        socket.setEnabledProtocols(protocols.toArray(new String[protocols.size()]));
-
-        /* set reasonable cipher suites */
-        if (Compatibility.getAPILevel() < Compatibility.VERSION_CODES.LOLLIPOP) {
-            // choose secure cipher suites
-
-            final List<String> availableCiphers = Arrays.asList(socket.getSupportedCipherSuites());
-            
-            // preferred ciphers = allowed Ciphers \ availableCiphers
-            final Set<String> preferredCiphers = new HashSet<String>(ALLOWED_CIPHERS);
-            preferredCiphers.retainAll(availableCiphers);
-            
-            // add enabled ciphers to preferred ciphers
-            // for maximum security, preferred ciphers should *replace* enabled ciphers,
-            // but for the security level of ACRA, disabling of insecure
-            // ciphers should be a server-side task
-            preferredCiphers.addAll(Arrays.asList(socket.getEnabledCipherSuites()));
-            
-            ACRA.log.v(TAG, "Setting allowed TLS ciphers: " + TextUtils.join(", ", preferredCiphers));
-            socket.setEnabledCipherSuites(preferredCiphers.toArray(new String[preferredCiphers.size()]));
-        }
-    }
-    
-    private void setSniHostname(SSLSocket socket, String hostName) {
-        // set SNI host name
-        if (Compatibility.getAPILevel() >= Compatibility.VERSION_CODES.JELLY_BEAN_MR1) {
-            ACRA.log.d(TAG, "Using documented SNI with host name " + hostName);
-            sslSocketFactory.setHostname(socket, hostName);
-        } else {
-            ACRA.log.d(TAG, "No documented SNI support on Android <4.2, trying reflection method with host name " + hostName);
-            try {
-                final Method setHostnameMethod = socket.getClass().getMethod("setHostname", String.class);
-                setHostnameMethod.invoke(socket, hostName);
-            } catch (Exception e) {
-                ACRA.log.w(TAG, "SNI not usable", e);
-            }
-        }
-    }
-}
diff --git a/src/main/java/org/acra/util/ToastSender.java b/src/main/java/org/acra/util/ToastSender.java
index a8c952ae..76295f2b 100644
--- a/src/main/java/org/acra/util/ToastSender.java
+++ b/src/main/java/org/acra/util/ToastSender.java
@@ -26,7 +26,7 @@ public static void sendToast(Context context, int toastResourceId, int toastLeng
         try {
             Toast.makeText(context, toastResourceId, toastLength).show();
         } catch (RuntimeException e) {
-            ACRA.log.e(LOG_TAG, "Could not send crash Toast", e);
+            ACRA.log.w(LOG_TAG, "Could not send crash Toast", e);
         }
     }
 }
diff --git a/src/main/proguard/proguard.cfg b/src/main/proguard/proguard.cfg
new file mode 100644
index 00000000..ed3ebd73
--- /dev/null
+++ b/src/main/proguard/proguard.cfg
@@ -0,0 +1,16 @@
+#ACRA specifics
+# Restore some Source file names and restore approximate line numbers in the stack traces,
+# otherwise the stack traces are pretty useless
+-keepattributes SourceFile,LineNumberTable
+
+# ACRA needs "annotations" so add this...
+# Note: This may already be defined in the default "proguard-android-optimize.txt"
+# file in the SDK. If it is, then you don't need to duplicate it. See your
+# "project.properties" file to get the path to the default "proguard-android-optimize.txt".
+-keepattributes *Annotation*
+
+# Keep all the ACRA classes
+-keep class org.acra.** { *; }
+
+# Don't warn about removed methods from AppCompat
+-dontwarn android.support.v4.app.NotificationCompat*
diff --git a/src/test/java/org/acra/util/HttpRequestTest.java b/src/test/java/org/acra/util/HttpRequestTest.java
deleted file mode 100644
index 10a9a1fc..00000000
--- a/src/test/java/org/acra/util/HttpRequestTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package org.acra.util;
-
-
-import java.net.SocketTimeoutException;
-import java.net.URL;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.acra.ACRA;
-import org.acra.log.NonAndroidLog;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * Responsible for testing HttpRequest.
- * <p/>
- * User: William
- * Date: 17/07/11
- * Time: 9:37 AM
- */
-public class HttpRequestTest {
-
-    // This is a form for a publicly viewable GoogleDoc
-    // The Doc is viewable at https://spreadsheets.google.com/spreadsheet/ccc?key=0Al8DtaRlEtcodDAtVDRabnhvZVdIOUxXWTFEM3gzSlE
-    private static final String FORM_KEY = "dDAtVDRabnhvZVdIOUxXWTFEM3gzSlE6MQ";
-
-    @Before
-    public void setUp() throws Exception {
-        final NonAndroidLog log = new NonAndroidLog();
-        ACRA.setLog(log);
-        ACRA.getConfig().setDisableSSLCertValidation(true);
-    }
-
-
-    @Test
-    public void testSocketTimeOutCausesRequestToBeRetriedSeveralTimes_Issue63() throws Exception {
-
-        final URL url = new URL("https://spreadsheets.google.com/formResponse?formkey=" + FORM_KEY + "&amp;ifq");
-        final Map<String, String> params = new HashMap<String, String>();
-
-        // Values observed in the GoogleDocs original html form. I presume they are required to ensure the GoogleDoc form is posted to the spreadsheet.
-        params.put("pageNumber", "0");
-        params.put("backupCache", "");
-        params.put("submit", "Envoyer");
-
-        params.put("entry.0.single", "HttpRequestTest#testIssue63");
-        params.put("entry.1.single", new Date().toString());
-
-        final HttpRequest request = new HttpRequest();
-        request.setSocketTimeOut(100); // Set a very low SocketTimeOut. Something that will almost certainly fail.
-        request.setMaxNrRetries(0);
-
-        // Context will be null because default HttpsSocketFactoryFactory doesn't require the Android Context.
-        try {
-            request.send(null /*context*/, url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
-            Assert.fail("Should not be able to get a response with an impossibly low SocketTimeOut");
-        } catch (SocketTimeoutException e) {
-            // as expected.
-        }
-
-        // Tell the HttpRequest to retry on Socket time out.
-        request.setMaxNrRetries(5);
-        try {
-            request.send(null /*context*/, url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
-        } catch (SocketTimeoutException e) {
-            Assert.fail("Should not get a SocketTimeOut when using SocketTimeOutRetryHandler");
-        }
-    }
-}
