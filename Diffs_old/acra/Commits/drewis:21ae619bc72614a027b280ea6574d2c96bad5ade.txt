diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index 31a03e77..7a27942c 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -307,7 +307,7 @@ public static SharedPreferences getACRASharedPreferences() {
     public static ACRAConfiguration getConfig() {
         if (configProxy == null) {
             if (mApplication == null) {
-                log.w(ACRA.LOG_TAG,
+                log.w(LOG_TAG,
                         "Calling ACRA.getConfig() before ACRA.init() gives you an empty configuration instance. You might prefer calling ACRA.getNewDefaultConfig(Application) to get an instance with default values taken from a @ReportsCrashes annotation.");
             }
             configProxy = getNewDefaultConfig(mApplication);
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index db5efb58..666c0f13 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -15,7 +15,6 @@
  */
 package org.acra;
 
-import android.util.Log;
 import org.acra.annotation.ReportsCrashes;
 import org.acra.sender.HttpSender;
 import org.acra.sender.HttpSender.Method;
@@ -131,13 +130,13 @@ public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
 
         final ReportField[] fieldsList;
         if (customReportFields.length != 0) {
-            Log.d(LOG_TAG, "Using custom Report Fields");
+            ACRA.log.d(LOG_TAG, "Using custom Report Fields");
             fieldsList = customReportFields;
         } else if (mailTo() == null || "".equals(mailTo())) {
-            Log.d(LOG_TAG, "Using default Report Fields");
+            ACRA.log.d(LOG_TAG, "Using default Report Fields");
             fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
         } else {
-            Log.d(LOG_TAG, "Using default Mail Report Fields");
+            ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
             fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
         }
         return Arrays.asList(fieldsList);
@@ -1304,10 +1303,10 @@ public HttpsSocketFactoryFactory getHttpSocketFactoryFactory() {
                 if (object instanceof HttpsSocketFactoryFactory) {
                     mHttpsSocketFactoryFactory = (HttpsSocketFactoryFactory) object;
                 } else {
-                    ACRA.log.w(ACRA.LOG_TAG, "Using default httpsSocketFactoryFactory - not a HttpSocketFactoryFactory : " + httpsSocketFactoryFactoryClass);
+                    ACRA.log.w(LOG_TAG, "Using default httpsSocketFactoryFactory - not a HttpSocketFactoryFactory : " + httpsSocketFactoryFactoryClass);
                 }
             } catch (ReflectionException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Using default httpsSocketFactoryFactory - Could not construct : " + httpsSocketFactoryFactoryClass);
+                ACRA.log.w(LOG_TAG, "Using default httpsSocketFactoryFactory - Could not construct : " + httpsSocketFactoryFactoryClass);
             }
         }
 
diff --git a/src/main/java/org/acra/BaseCrashReportDialog.java b/src/main/java/org/acra/BaseCrashReportDialog.java
index 6bb1f618..bc024dbc 100644
--- a/src/main/java/org/acra/BaseCrashReportDialog.java
+++ b/src/main/java/org/acra/BaseCrashReportDialog.java
@@ -2,7 +2,6 @@
 
 import android.app.Activity;
 import android.os.Bundle;
-import android.util.Log;
 import android.widget.Toast;
 import org.acra.collector.CrashReportData;
 import org.acra.util.ToastSender;
@@ -35,18 +34,18 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        ACRA.log.d(ACRA.LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
+        ACRA.log.d(LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
 
         final boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
         if (forceCancel) {
-            ACRA.log.d(ACRA.LOG_TAG, "Forced reports deletion.");
+            ACRA.log.d(LOG_TAG, "Forced reports deletion.");
             cancelReports();
             finish();
             return;
         }
 
         mReportFileName = getIntent().getStringExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME);
-        Log.d(LOG_TAG, "Opening CrashReportDialog for " + mReportFileName);
+        ACRA.log.d(LOG_TAG, "Opening CrashReportDialog for " + mReportFileName);
         if (mReportFileName == null) {
             finish();
         }
@@ -69,17 +68,17 @@ protected void cancelReports() {
     protected void sendCrash(String comment, String userEmail) {
         final CrashReportPersister persister = new CrashReportPersister(getApplicationContext());
         try {
-            Log.d(LOG_TAG, "Add user comment to " + mReportFileName);
+            ACRA.log.d(LOG_TAG, "Add user comment to " + mReportFileName);
             final CrashReportData crashData = persister.load(mReportFileName);
             crashData.put(USER_COMMENT, comment == null ? "" : comment);
             crashData.put(USER_EMAIL, userEmail == null ? "" : userEmail);
             persister.store(crashData, mReportFileName);
         } catch (IOException e) {
-            Log.w(LOG_TAG, "User comment not added: ", e);
+            ACRA.log.w(LOG_TAG, "User comment not added: ", e);
         }
 
         // Start the report sending task
-        Log.v(ACRA.LOG_TAG, "About to start SenderWorker from CrashReportDialog");
+        ACRA.log.v(LOG_TAG, "About to start SenderWorker from CrashReportDialog");
         ACRA.getErrorReporter().startSendingReports(false, true);
 
         // Optional Toast to thank the user
diff --git a/src/main/java/org/acra/CrashReportFinder.java b/src/main/java/org/acra/CrashReportFinder.java
index f7562c1b..118fb7e0 100644
--- a/src/main/java/org/acra/CrashReportFinder.java
+++ b/src/main/java/org/acra/CrashReportFinder.java
@@ -21,7 +21,6 @@
 import java.io.FilenameFilter;
 
 import android.content.Context;
-import android.util.Log;
 
 /**
  * Responsible for retrieving the location of Crash Report files.
@@ -44,17 +43,17 @@ public CrashReportFinder(Context context) {
      */
     public String[] getCrashReportFiles() {
         if (context == null) {
-            Log.e(LOG_TAG, "Trying to get ACRA reports but ACRA is not initialized.");
+            ACRA.log.e(LOG_TAG, "Trying to get ACRA reports but ACRA is not initialized.");
             return new String[0];
         }
 
         final File dir = context.getFilesDir();
         if (dir == null) {
-            Log.w(LOG_TAG, "Application files directory does not exist! The application may not be installed correctly. Please try reinstalling.");
+            ACRA.log.w(LOG_TAG, "Application files directory does not exist! The application may not be installed correctly. Please try reinstalling.");
             return new String[0];
         }
 
-        Log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
+        ACRA.log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
 
         // Filter for ".stacktrace" files
         final FilenameFilter filter = new FilenameFilter() {
diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index 3dec4909..b9d49730 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -28,7 +28,6 @@
 import android.os.Bundle;
 import android.os.Looper;
 import android.text.format.Time;
-import android.util.Log;
 import android.widget.Toast;
 import org.acra.annotation.ReportsCrashes;
 import org.acra.collector.Compatibility;
@@ -159,7 +158,7 @@ public void initializeExceptionHandler(ErrorReporter reporter) {
                 @Override
                 public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(ACRA.LOG_TAG, "onActivityCreated " + activity.getClass());
+                        ACRA.log.d(LOG_TAG, "onActivityCreated " + activity.getClass());
                     if (!(activity instanceof BaseCrashReportDialog)) {
                         // Ignore CrashReportDialog because we want the last
                         // application Activity that was started so that we can
@@ -171,37 +170,37 @@ public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                 @Override
                 public void onActivityStarted(Activity activity) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(ACRA.LOG_TAG, "onActivityStarted " + activity.getClass());
+                        ACRA.log.d(LOG_TAG, "onActivityStarted " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityResumed(Activity activity) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(ACRA.LOG_TAG, "onActivityResumed " + activity.getClass());
+                        ACRA.log.d(LOG_TAG, "onActivityResumed " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityPaused(Activity activity) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(ACRA.LOG_TAG, "onActivityPaused " + activity.getClass());
+                        ACRA.log.d(LOG_TAG, "onActivityPaused " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityStopped(Activity activity) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(ACRA.LOG_TAG, "onActivityStopped " + activity.getClass());
+                        ACRA.log.d(LOG_TAG, "onActivityStopped " + activity.getClass());
                 }
 
                 @Override
                 public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.i(ACRA.LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
+                        ACRA.log.i(LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityDestroyed(Activity activity) {
                     if (ACRA.DEV_LOGGING)
-                        ACRA.log.i(ACRA.LOG_TAG, "onActivityDestroyed " + activity.getClass());
+                        ACRA.log.i(LOG_TAG, "onActivityDestroyed " + activity.getClass());
                 }
             });
         }
@@ -409,21 +408,21 @@ public void uncaughtException(Thread t, Throwable e) {
             // defaultExceptionHandler.
             if (!enabled) {
                 if (mDfltExceptionHandler != null) {
-                    Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
+                    ACRA.log.e(LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
                         + " - forwarding uncaught Exception on to default ExceptionHandler");
                     mDfltExceptionHandler.uncaughtException(t, e);
                 } else {
-                    Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
+                    ACRA.log.e(LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
                         + " - no default ExceptionHandler");
-                    Log.e(ACRA.LOG_TAG,
+                    ACRA.log.e(LOG_TAG,
                           "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
                 }
                 return;
             }
 
-            Log.e(ACRA.LOG_TAG,
+            ACRA.log.e(LOG_TAG,
                   "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
-            Log.d(ACRA.LOG_TAG, "Building report");
+            ACRA.log.d(LOG_TAG, "Building report");
 
             // Generate and send crash report
             reportBuilder()
@@ -454,13 +453,13 @@ private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
         final boolean handlingUncaughtException = uncaughtExceptionThread != null;
         if (handlingUncaughtException && letDefaultHandlerEndApplication && (mDfltExceptionHandler != null)) {
             // Let the system default handler do it's job and display the force close dialog.
-            Log.d(ACRA.LOG_TAG, "Handing Exception on to default ExceptionHandler");
+            ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
             mDfltExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
         } else {
             // If ACRA handles user notifications with a Toast or a Notification
             // the Force Close dialog is one more notification to the user...
             // We choose to close the process ourselves using the same actions.
-            Log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + th.getMessage(), th);
+            ACRA.log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + th.getMessage(), th);
 
             // Trying to solve
             // https://github.com/ACRA/acra/issues/42#issuecomment-12134144
@@ -468,9 +467,9 @@ private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
             // it. Activity#finish (and maybe it's parent too).
             final Activity lastActivity = lastActivityCreated.get();
             if (lastActivity != null) {
-                Log.i(LOG_TAG, "Finishing the last Activity prior to killing the Process");
+                ACRA.log.i(LOG_TAG, "Finishing the last Activity prior to killing the Process");
                 lastActivity.finish();
-                Log.i(LOG_TAG, "Finished " + lastActivity.getClass());
+                ACRA.log.i(LOG_TAG, "Finished " + lastActivity.getClass());
                 lastActivityCreated.clear();
             }
 
@@ -495,11 +494,11 @@ public void handleSilentException(Throwable e) {
                 .exception(e)
                 .forceSilent()
                 .send();
-            Log.d(LOG_TAG, "ACRA sent Silent report.");
+            ACRA.log.d(LOG_TAG, "ACRA sent Silent report.");
             return;
         }
 
-        Log.d(LOG_TAG, "ACRA is disabled. Silent report not sent.");
+        ACRA.log.d(LOG_TAG, "ACRA is disabled. Silent report not sent.");
     }
 
     /**
@@ -510,7 +509,7 @@ public void handleSilentException(Throwable e) {
      *            forward them as crash reports.
      */
     public void setEnabled(boolean enabled) {
-        Log.i(ACRA.LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + mContext.getPackageName());
+        ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + mContext.getPackageName());
         this.enabled = enabled;
     }
 
@@ -596,7 +595,7 @@ public void checkReportsOnApplicationStart() {
                     ToastSender.sendToast(mContext, ACRA.getConfig().resToastText(), Toast.LENGTH_LONG);
                 }
 
-                Log.v(ACRA.LOG_TAG, "About to start ReportSenderWorker from #checkReportOnApplicationStart");
+                ACRA.log.v(LOG_TAG, "About to start ReportSenderWorker from #checkReportOnApplicationStart");
                 startSendingReports(false, false);
             }
 
@@ -697,7 +696,7 @@ private void report(final ReportBuilder reportBuilder) {
         try {
             exceptionHandlerInitializer.initializeExceptionHandler(this);
         } catch (Exception exceptionInRunnable) {
-            Log.d(ACRA.LOG_TAG, "Failed to initlize " + exceptionHandlerInitializer + " from #handleException");
+            ACRA.log.d(LOG_TAG, "Failed to initlize " + exceptionHandlerInitializer + " from #handleException");
         }
 
         boolean sendOnlySilentReports = false;
@@ -764,7 +763,7 @@ public void run() {
             || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
 
             // Approve and then send reports now
-            Log.d(ACRA.LOG_TAG, "About to start ReportSenderWorker from #handleException");
+            ACRA.log.d(LOG_TAG, "About to start ReportSenderWorker from #handleException");
             sender = startSendingReports(sendOnlySilentReports, true);
             if ((reportingInteractionMode == ReportingInteractionMode.SILENT) && !reportBuilder.mEndsApplication) {
                 // Report is being sent silently and the application is not ending.
@@ -773,7 +772,7 @@ public void run() {
             }
 
         } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
-            Log.d(ACRA.LOG_TAG, "Creating Notification.");
+            ACRA.log.d(LOG_TAG, "Creating Notification.");
             createNotification(reportFileName, reportBuilder);
         }
 
@@ -786,7 +785,7 @@ public void run() {
 
                 @Override
                 public void run() {
-                    Log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
+                    ACRA.log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
                         + " millis from " + sentToastTimeMillis.initialTimeMillis
                         + " currentMillis=" + System.currentTimeMillis());
                     while (sentToastTimeMillis.getElapsedTime() < ACRAConstants.TOAST_WAIT_DURATION) {
@@ -794,7 +793,7 @@ public void run() {
                             // Wait a bit to let the user read the toast
                             Thread.sleep(100);
                         } catch (InterruptedException e1) {
-                            Log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
+                            ACRA.log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
                         }
                     }
                     toastWaitEnded = true;
@@ -813,40 +812,40 @@ public void run() {
             @Override
             public void run() {
                 // We have to wait for the toast display to be completed.
-                Log.d(LOG_TAG, "Waiting for Toast");
+                ACRA.log.d(LOG_TAG, "Waiting for Toast");
                 while (!toastWaitEnded) {
                     try {
                         Thread.sleep(100);
                     } catch (InterruptedException e1) {
-                        Log.e(LOG_TAG, "Error : ", e1);
+                        ACRA.log.d(LOG_TAG, "Error : ", e1);
                     }
                 }
-                Log.d(LOG_TAG, "Finished waiting for Toast");
+                ACRA.log.d(LOG_TAG, "Finished waiting for Toast");
 
                 // We have to wait for the worker job to be completed.
                 if (worker != null) {
-                    Log.d(LOG_TAG, "Waiting for Worker");
+                    ACRA.log.d(LOG_TAG, "Waiting for Worker");
                     while (worker.isAlive()) {
                         try {
                             Thread.sleep(100);
                         } catch (InterruptedException e1) {
-                            Log.e(LOG_TAG, "Error : ", e1);
+                            ACRA.log.e(LOG_TAG, "Error : ", e1);
                         }
                     }
-                    Log.d(LOG_TAG, "Finished waiting for Worker");
+                    ACRA.log.d(LOG_TAG, "Finished waiting for Worker");
                 }
 
                 if (showDirectDialog) {
                     // Create a new activity task with the confirmation dialog.
                     // This new task will be persisted on application restart
                     // right after its death.
-                    Log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFileName);
+                    ACRA.log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFileName);
                     final Intent dialogIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
                     dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                     mContext.startActivity(dialogIntent);
                 }
 
-                Log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.mEndsApplication);
+                ACRA.log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.mEndsApplication);
 
                 if (reportBuilder.mEndsApplication) {
                     endApplication(reportBuilder.mUncaughtExceptionThread, reportBuilder.mException);
@@ -862,7 +861,7 @@ public void run() {
      * @param reportBuilder     ReportBuilder containing the details of the crash.
      */
     private Intent createCrashReportDialogIntent(String reportFileName, ReportBuilder reportBuilder) {
-        Log.d(LOG_TAG, "Creating DialogIntent for " + reportFileName + " exception=" + reportBuilder.mException);
+        ACRA.log.d(LOG_TAG, "Creating DialogIntent for " + reportFileName + " exception=" + reportBuilder.mException);
         final Intent dialogIntent = new Intent(mContext, ACRA.getConfig().reportDialogClass());
         dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME, reportFileName);
         dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION, reportBuilder.mException);
@@ -894,7 +893,7 @@ private void createNotification(String reportFileName, ReportBuilder reportBuild
         final CharSequence contentTitle = mContext.getText(conf.resNotifTitle());
         final CharSequence contentText = mContext.getText(conf.resNotifText());
 
-        Log.d(LOG_TAG, "Creating Notification for " + reportFileName);
+        ACRA.log.d(LOG_TAG, "Creating Notification for " + reportFileName);
         final Intent crashReportDialogIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
         final PendingIntent contentIntent = PendingIntent.getActivity(mContext, mNotificationCounter++, crashReportDialogIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 
@@ -938,11 +937,11 @@ private String getReportFileName(CrashReportData crashData) {
      */
     private void saveCrashReportFile(String fileName, CrashReportData crashData) {
         try {
-            Log.d(LOG_TAG, "Writing crash report file " + fileName + ".");
+            ACRA.log.d(LOG_TAG, "Writing crash report file " + fileName + ".");
             final CrashReportPersister persister = new CrashReportPersister(mContext);
             persister.store(crashData, fileName);
         } catch (Exception e) {
-            Log.e(LOG_TAG, "An error occurred while writing the report file...", e);
+            ACRA.log.e(LOG_TAG, "An error occurred while writing the report file...", e);
         }
     }
 
@@ -968,9 +967,9 @@ private void deletePendingReports(boolean deleteApprovedReports, boolean deleteN
             final boolean isReportApproved = fileNameParser.isApproved(fileName);
             if ((isReportApproved && deleteApprovedReports) || (!isReportApproved && deleteNonApprovedReports)) {
                 final File fileToDelete = new File(mContext.getFilesDir(), fileName);
-                ACRA.log.d(ACRA.LOG_TAG, "Deleting file " + fileName);
+                ACRA.log.d(LOG_TAG, "Deleting file " + fileName);
                 if (!fileToDelete.delete()) {
-                    Log.e(ACRA.LOG_TAG, "Could not delete report : " + fileToDelete);
+                    ACRA.log.e(LOG_TAG, "Could not delete report : " + fileToDelete);
                 }
             }
         }
@@ -1006,7 +1005,7 @@ public void setDefaultReportSenders() {
         // Try to send by mail. If a mailTo address is provided, do not add
         // other senders.
         if (!"".equals(conf.mailTo())) {
-            Log.w(LOG_TAG, mApplication.getPackageName() + " reports will be sent by email (if accepted by user).");
+            ACRA.log.w(LOG_TAG, mApplication.getPackageName() + " reports will be sent by email (if accepted by user).");
             setReportSender(new EmailIntentSender(mApplication));
             return;
         }
@@ -1018,7 +1017,7 @@ public void setDefaultReportSenders() {
             // does).
             // I think that is a small price to pay to ensure that ACRA doesn't
             // crash if the PackageManager has died.
-            Log.e(LOG_TAG,
+            ACRA.log.e(LOG_TAG,
                   mApplication.getPackageName()
                       + " should be granted permission "
                       + permission.INTERNET
diff --git a/src/main/java/org/acra/SendWorker.java b/src/main/java/org/acra/SendWorker.java
index 1f804ab7..239e6547 100644
--- a/src/main/java/org/acra/SendWorker.java
+++ b/src/main/java/org/acra/SendWorker.java
@@ -27,7 +27,6 @@
 import org.acra.sender.ReportSenderException;
 
 import android.content.Context;
-import android.util.Log;
 
 /**
  * Checks and send reports on a separate Thread.
@@ -82,7 +81,7 @@ public void run() {
      * sent.
      */
     private void approvePendingReports() {
-        Log.d(LOG_TAG, "Mark all pending reports as approved.");
+        ACRA.log.d(LOG_TAG, "Mark all pending reports as approved.");
 
         final CrashReportFinder reportFinder = new CrashReportFinder(context);
         final String[] reportFileNames = reportFinder.getCrashReportFiles();
@@ -100,7 +99,7 @@ private void approvePendingReports() {
                 // option?
                 final File newFile = new File(context.getFilesDir(), newName);
                 if (!reportFile.renameTo(newFile)) {
-                    Log.e(LOG_TAG, "Could not rename approved report from " + reportFile + " to " + newFile);
+                    ACRA.log.e(LOG_TAG, "Could not rename approved report from " + reportFile + " to " + newFile);
                 }
             }
         }
@@ -117,7 +116,7 @@ private void approvePendingReports() {
      *            {@link ErrorReporter#handleSilentException(Throwable)}.
      */
     private void checkAndSendReports(Context context, boolean sendOnlySilentReports) {
-        Log.d(LOG_TAG, "#checkAndSendReports - start");
+        ACRA.log.d(LOG_TAG, "#checkAndSendReports - start");
         final CrashReportFinder reportFinder = new CrashReportFinder(context);
         final String[] reportFiles = reportFinder.getCrashReportFiles();
         Arrays.sort(reportFiles);
@@ -134,31 +133,31 @@ private void checkAndSendReports(Context context, boolean sendOnlySilentReports)
                        // network
             }
 
-            Log.i(LOG_TAG, "Sending file " + curFileName);
+            ACRA.log.i(LOG_TAG, "Sending file " + curFileName);
             try {
                 final CrashReportPersister persister = new CrashReportPersister(context);
                 final CrashReportData previousCrashReport = persister.load(curFileName);
                 sendCrashReport(previousCrashReport);
                 deleteFile(context, curFileName);
             } catch (RuntimeException e) {
-                Log.e(ACRA.LOG_TAG, "Failed to send crash reports for " + curFileName, e);
+                ACRA.log.e(LOG_TAG, "Failed to send crash reports for " + curFileName, e);
                 deleteFile(context, curFileName);
                 break; // Something really unexpected happened. Don't try to
                        // send any more reports now.
             } catch (IOException e) {
-                Log.e(ACRA.LOG_TAG, "Failed to load crash report for " + curFileName, e);
+                ACRA.log.e(LOG_TAG, "Failed to load crash report for " + curFileName, e);
                 deleteFile(context, curFileName);
                 break; // Something unexpected happened when reading the crash
                        // report. Don't try to send any more reports now.
             } catch (ReportSenderException e) {
-                Log.e(ACRA.LOG_TAG, "Failed to send crash report for " + curFileName, e);
+                ACRA.log.e(LOG_TAG, "Failed to send crash report for " + curFileName, e);
                 // An issue occurred while sending this report but we can still try to
                 // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
                 // so there's not much to fear about overloading a failing server.
             }
             reportsSentCount++;
         }
-        Log.d(LOG_TAG, "#checkAndSendReports - finish");
+        ACRA.log.d(LOG_TAG, "#checkAndSendReports - finish");
     }
 
     /**
@@ -185,7 +184,7 @@ private void sendCrashReport(CrashReportData errorContent) throws ReportSenderEx
                         throw e; // Don't log here because we aren't dealing
                                  // with the Exception here.
                     } else {
-                        Log.w(LOG_TAG,
+                        ACRA.log.w(LOG_TAG,
                                 "ReportSender of class "
                                         + sender.getClass().getName()
                                         + " failed but other senders completed their task. ACRA will not send this report again.");
@@ -198,7 +197,7 @@ private void sendCrashReport(CrashReportData errorContent) throws ReportSenderEx
     private void deleteFile(Context context, String fileName) {
         final boolean deleted = context.deleteFile(fileName);
         if (!deleted) {
-            Log.w(ACRA.LOG_TAG, "Could not delete error report : " + fileName);
+            ACRA.log.w(LOG_TAG, "Could not delete error report : " + fileName);
         }
     }
 }
diff --git a/src/main/java/org/acra/collector/ConfigurationCollector.java b/src/main/java/org/acra/collector/ConfigurationCollector.java
index 885208be..07d03f65 100644
--- a/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/src/main/java/org/acra/collector/ConfigurationCollector.java
@@ -25,7 +25,6 @@
 
 import android.content.Context;
 import android.content.res.Configuration;
-import android.util.Log;
 import android.util.SparseArray;
 
 /**
@@ -94,9 +93,9 @@ private ConfigurationCollector() {
                         uiModeValues.put(f.getInt(null), fieldName);
                     }
                 } catch (IllegalArgumentException e) {
-                    Log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
+                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
                 } catch (IllegalAccessException e) {
-                    Log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
+                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
                 }
             }
         }
@@ -136,9 +135,9 @@ private String toString(Configuration conf) {
                     result.append('\n');
                 }
             } catch (IllegalArgumentException e) {
-                Log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
+                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
             } catch (IllegalAccessException e) {
-                Log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
+                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
             }
         }
         return result.toString();
@@ -227,7 +226,7 @@ public static String collectConfiguration(Context context) {
             final Configuration crashConf = context.getResources().getConfiguration();
             return collector.toString(crashConf);
         } catch (RuntimeException e) {
-            Log.w(ACRA.LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
             return "Couldn't retrieve crash config";
         }
     }
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
index 4f72f3d5..0122f575 100644
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -41,7 +41,6 @@
 import android.content.pm.PackageInfo;
 import android.os.Environment;
 import android.text.format.Time;
-import android.util.Log;
 
 /**
  * Responsible for creating the CrashReportData for an Exception.
@@ -311,7 +310,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             // Though, we can call logcat without any permission and still get traces related to our app.
             final boolean hasReadLogsPermission = pm.hasPermission(Manifest.permission.READ_LOGS) || (Compatibility.getAPILevel() >= 16);
             if (prefs.getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true) && hasReadLogsPermission) {
-                Log.i(ACRA.LOG_TAG, "READ_LOGS granted! ACRA can include LogCat and DropBox data.");
+                ACRA.log.i(LOG_TAG, "READ_LOGS granted! ACRA can include LogCat and DropBox data.");
                 if (crashReportFields.contains(LOGCAT)) {
                     crashReportData.put(LOGCAT, LogCatCollector.collectLogCat(null));
                 }
@@ -326,7 +325,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
                                         DropBoxCollector.read(context, ACRA.getConfig().additionalDropBoxTags()));
                 }
             } else {
-                Log.i(ACRA.LOG_TAG, "READ_LOGS not allowed. ACRA will not include LogCat and DropBox data.");
+                ACRA.log.i(LOG_TAG, "READ_LOGS not allowed. ACRA will not include LogCat and DropBox data.");
             }
 
             // Application specific log file
@@ -337,7 +336,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
                                                                            ACRA.getConfig().applicationLogFileLines());
                     crashReportData.put(APPLICATION_LOG, logFile);
                 } catch (IOException e) {
-                    Log.e(LOG_TAG, "Error while reading application log file " + ACRA.getConfig().applicationLogFile(), e);
+                    ACRA.log.e(LOG_TAG, "Error while reading application log file " + ACRA.getConfig().applicationLogFile(), e);
                 }
             }
 
@@ -357,7 +356,7 @@ public CrashReportData createCrashData(String msg, Throwable th, Map<String, Str
             }
 
         } catch (RuntimeException e) {
-            Log.e(LOG_TAG, "Error while retrieving crash data", e);
+            ACRA.log.e(LOG_TAG, "Error while retrieving crash data", e);
         }
 
         return crashReportData;
@@ -440,7 +439,7 @@ private String getStackTraceHash(Throwable th) {
         try {
             return Class.forName(className);
         } catch (ClassNotFoundException e) {
-            Log.e(ACRA.LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
+            ACRA.log.e(LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
             throw e;
         }
     }
diff --git a/src/main/java/org/acra/collector/DeviceFeaturesCollector.java b/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
index d902f51e..821e92fd 100644
--- a/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
+++ b/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
@@ -21,7 +21,8 @@
 
 import android.content.Context;
 import android.content.pm.PackageManager;
-import android.util.Log;
+
+import org.acra.ACRA;
 
 /**
  * Features declared as available on the device. Available only with API level > 5.
@@ -55,7 +56,7 @@ public static String getFeatures(Context ctx) {
                 result.append("\n");
             }
         } catch (Throwable e) {
-            Log.w(LOG_TAG, "Couldn't retrieve DeviceFeatures for " + ctx.getPackageName(), e);
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceFeatures for " + ctx.getPackageName(), e);
             result.append("Could not retrieve data: ");
             result.append(e.getMessage());
         }
diff --git a/src/main/java/org/acra/collector/DisplayManagerCollector.java b/src/main/java/org/acra/collector/DisplayManagerCollector.java
index 39141fc3..d0dc39db 100644
--- a/src/main/java/org/acra/collector/DisplayManagerCollector.java
+++ b/src/main/java/org/acra/collector/DisplayManagerCollector.java
@@ -15,6 +15,8 @@
 import android.view.Surface;
 import android.view.WindowManager;
 
+import static org.acra.ACRA.LOG_TAG;
+
 final class DisplayManagerCollector {
 
     final static SparseArray<String> mFlagsNames = new SparseArray<String>();
@@ -40,17 +42,17 @@ public static String collectDisplays(Context ctx) {
                 Method getDisplays = displayManager.getClass().getMethod("getDisplays");
                 displays = (Display[]) getDisplays.invoke(displayManager);
             } catch (IllegalArgumentException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Error while collecting DisplayManager data: ", e);
+                ACRA.log.w(LOG_TAG, "Error while collecting DisplayManager data: ", e);
             } catch (SecurityException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Error while collecting DisplayManager data: ", e);
+                ACRA.log.w(LOG_TAG, "Error while collecting DisplayManager data: ", e);
             } catch (IllegalAccessException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Error while collecting DisplayManager data: ", e);
+                ACRA.log.w(LOG_TAG, "Error while collecting DisplayManager data: ", e);
             } catch (NoSuchFieldException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Error while collecting DisplayManager data: ", e);
+                ACRA.log.w(LOG_TAG, "Error while collecting DisplayManager data: ", e);
             } catch (NoSuchMethodException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Error while collecting DisplayManager data: ", e);
+                ACRA.log.w(LOG_TAG, "Error while collecting DisplayManager data: ", e);
             } catch (InvocationTargetException e) {
-                ACRA.log.w(ACRA.LOG_TAG, "Error while collecting DisplayManager data: ", e);
+                ACRA.log.w(LOG_TAG, "Error while collecting DisplayManager data: ", e);
             }
         }
 
diff --git a/src/main/java/org/acra/collector/DropBoxCollector.java b/src/main/java/org/acra/collector/DropBoxCollector.java
index 4bf146bd..a2673d12 100644
--- a/src/main/java/org/acra/collector/DropBoxCollector.java
+++ b/src/main/java/org/acra/collector/DropBoxCollector.java
@@ -25,7 +25,8 @@
 
 import android.content.Context;
 import android.text.format.Time;
-import android.util.Log;
+
+import static org.acra.ACRA.LOG_TAG;
 
 /**
  * Collects data from the DropBoxManager introduced with Android API Level 8. A
@@ -117,17 +118,17 @@ public static String read(Context context, String[] additionalTags) {
             return dropboxContent.toString();
 
         } catch (SecurityException e) {
-            Log.i(ACRA.LOG_TAG, "DropBoxManager not available.");
+            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
         } catch (NoSuchMethodException e) {
-            Log.i(ACRA.LOG_TAG, "DropBoxManager not available.");
+            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
         } catch (IllegalArgumentException e) {
-            Log.i(ACRA.LOG_TAG, "DropBoxManager not available.");
+            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
         } catch (IllegalAccessException e) {
-            Log.i(ACRA.LOG_TAG, "DropBoxManager not available.");
+            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
         } catch (InvocationTargetException e) {
-            Log.i(ACRA.LOG_TAG, "DropBoxManager not available.");
+            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
         } catch (NoSuchFieldException e) {
-            Log.i(ACRA.LOG_TAG, "DropBoxManager not available.");
+            ACRA.log.i(LOG_TAG, "DropBoxManager not available.");
         }
 
         return NO_RESULT;
diff --git a/src/main/java/org/acra/collector/DumpSysCollector.java b/src/main/java/org/acra/collector/DumpSysCollector.java
index 774dd4ab..a6afd86e 100644
--- a/src/main/java/org/acra/collector/DumpSysCollector.java
+++ b/src/main/java/org/acra/collector/DumpSysCollector.java
@@ -15,7 +15,6 @@
  */
 package org.acra.collector;
 
-import android.util.Log;
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
 
@@ -25,6 +24,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.acra.ACRA.LOG_TAG;
+
 /**
  * Collects results of the <code>dumpsys</code> command.
  * 
@@ -62,7 +63,7 @@ public static String collectMemInfo() {
             }
 
         } catch (IOException e) {
-            Log.e(ACRA.LOG_TAG, "DumpSysCollector.meminfo could not retrieve data", e);
+            ACRA.log.e(LOG_TAG, "DumpSysCollector.meminfo could not retrieve data", e);
 		}
 
         CollectorUtil.safeClose(bufferedReader);
diff --git a/src/main/java/org/acra/collector/LogCatCollector.java b/src/main/java/org/acra/collector/LogCatCollector.java
index 325e5ebe..9334d3cb 100644
--- a/src/main/java/org/acra/collector/LogCatCollector.java
+++ b/src/main/java/org/acra/collector/LogCatCollector.java
@@ -31,7 +31,6 @@
 import org.acra.annotation.ReportsCrashes;
 import org.acra.util.BoundedLinkedList;
 
-import android.util.Log;
 
 /**
  * Executes logcat commands and collects it's output.
@@ -102,7 +101,7 @@ public static String collectLogCat(String bufferName) {
             final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
             bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
 
-            Log.d(LOG_TAG, "Retrieving logcat output...");
+            ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
 
             // Dump stderr to null
             new Thread(new Runnable() {
@@ -128,7 +127,7 @@ public void run() {
             }
 
         } catch (IOException e) {
-            Log.e(ACRA.LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
+            ACRA.log.e(LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
         } finally {
             CollectorUtil.safeClose(bufferedReader);
         }
diff --git a/src/main/java/org/acra/collector/SettingsCollector.java b/src/main/java/org/acra/collector/SettingsCollector.java
index 7b4cbf0f..0df5e3ce 100644
--- a/src/main/java/org/acra/collector/SettingsCollector.java
+++ b/src/main/java/org/acra/collector/SettingsCollector.java
@@ -27,7 +27,8 @@
 import android.provider.Settings;
 import android.provider.Settings.Secure;
 import android.provider.Settings.System;
-import android.util.Log;
+
+import static org.acra.ACRA.LOG_TAG;
 
 /**
  * Helper to collect data from {@link System} and {@link Secure} Settings
@@ -61,9 +62,9 @@ public static String collectSystemSettings(Context ctx) {
                         result.append(key.getName()).append("=").append(value).append("\n");
                     }
                 } catch (IllegalArgumentException e) {
-                    Log.w(ACRA.LOG_TAG, "Error : ", e);
+                    ACRA.log.w(LOG_TAG, "Error : ", e);
                 } catch (IllegalAccessException e) {
-                    Log.w(ACRA.LOG_TAG, "Error : ", e);
+                    ACRA.log.w(LOG_TAG, "Error : ", e);
                 }
             }
         }
@@ -91,9 +92,9 @@ public static String collectSecureSettings(Context ctx) {
                         result.append(key.getName()).append("=").append(value).append("\n");
                     }
                 } catch (IllegalArgumentException e) {
-                    Log.w(ACRA.LOG_TAG, "Error : ", e);
+                    ACRA.log.w(LOG_TAG, "Error : ", e);
                 } catch (IllegalAccessException e) {
-                    Log.w(ACRA.LOG_TAG, "Error : ", e);
+                    ACRA.log.w(LOG_TAG, "Error : ", e);
                 }
             }
         }
@@ -129,17 +130,17 @@ public static String collectGlobalSettings(Context ctx) {
                 }
             }
         } catch (IllegalArgumentException e) {
-            Log.w(ACRA.LOG_TAG, "Error : ", e);
+            ACRA.log.w(LOG_TAG, "Error : ", e);
         } catch (IllegalAccessException e) {
-            Log.w(ACRA.LOG_TAG, "Error : ", e);
+            ACRA.log.w(LOG_TAG, "Error : ", e);
         } catch (ClassNotFoundException e) {
-            Log.w(ACRA.LOG_TAG, "Error : ", e);
+            ACRA.log.w(LOG_TAG, "Error : ", e);
         } catch (SecurityException e) {
-            Log.w(ACRA.LOG_TAG, "Error : ", e);
+            ACRA.log.w(LOG_TAG, "Error : ", e);
         } catch (NoSuchMethodException e) {
-            Log.w(ACRA.LOG_TAG, "Error : ", e);
+            ACRA.log.w(LOG_TAG, "Error : ", e);
         } catch (InvocationTargetException e) {
-            Log.w(ACRA.LOG_TAG, "Error : ", e);
+            ACRA.log.w(LOG_TAG, "Error : ", e);
         }
 
         return result.toString();
diff --git a/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index 7dd91e51..d4ef0f7b 100644
--- a/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -25,6 +25,8 @@
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 
+import static org.acra.ACRA.LOG_TAG;
+
 /**
  * Collects the content (key/value pairs) of SharedPreferences, from the
  * application default preferences or any other preferences asked by the
@@ -76,7 +78,7 @@ public static String collect(Context context) {
             // Add all non-filtered preferences from that preference file.
             for (final String key : prefEntries.keySet()) {
                 if (filteredKey(key)) {
-                    ACRA.log.d(ACRA.LOG_TAG, "Filtered out sharedPreference=" + sharedPrefId + "  key=" + key + " due to filtering rule");
+                    ACRA.log.d(LOG_TAG, "Filtered out sharedPreference=" + sharedPrefId + "  key=" + key + " due to filtering rule");
                 } else {
                     final Object prefValue = prefEntries.get(key);
                     result.append(sharedPrefId).append('.').append(key).append('=');
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index 690bcbc1..0579ccf0 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -33,7 +33,6 @@
 import org.acra.util.JSONReportBuilder.JSONReportException;
 
 import android.net.Uri;
-import android.util.Log;
 
 /**
  * <p>
@@ -206,7 +205,7 @@ public void send(Context context, CrashReportData report) throws ReportSenderExc
 
         try {
             URL reportUrl = mFormUri == null ? new URL(ACRA.getConfig().formUri()) : new URL(mFormUri.toString());
-            Log.d(LOG_TAG, "Connect to " + reportUrl.toString());
+            ACRA.log.d(LOG_TAG, "Connect to " + reportUrl.toString());
 
             final String login = mUsername != null ? mUsername : ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthLogin()) ? null : ACRA
                     .getConfig().formUriBasicAuthLogin();
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 839cb0fa..20b5133e 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -47,6 +47,8 @@
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.util.EntityUtils;
 
+import static org.acra.ACRA.LOG_TAG;
+
 public final class HttpRequest {
 
     private static class SocketTimeOutRetryHandler implements HttpRequestRetryHandler {
@@ -74,17 +76,17 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
                     if (httpParams != null) {
                         final int newSocketTimeOut = HttpConnectionParams.getSoTimeout(httpParams) * 2;
                         HttpConnectionParams.setSoTimeout(httpParams, newSocketTimeOut);
-                        ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut
+                        ACRA.log.d(LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut
                                 + " millis and trying again");
                     } else {
-                        ACRA.log.d(ACRA.LOG_TAG,
+                        ACRA.log.d(LOG_TAG,
                                 "SocketTimeOut - no HttpParams, cannot increase time out. Trying again with current settings");
                     }
 
                     return true;
                 }
 
-                ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut but exceeded max number of retries : " + maxNrRetries);
+                ACRA.log.d(LOG_TAG, "SocketTimeOut but exceeded max number of retries : " + maxNrRetries);
             }
 
             return false; // To change body of implemented methods use File |
@@ -145,11 +147,11 @@ public void send(Context context, URL url, Method method, String content, Type t
         final HttpClient httpClient = getHttpClient(context);
         final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
 
-        ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
+        ACRA.log.d(LOG_TAG, "Sending request to " + url);
         if (ACRA.DEV_LOGGING)
-            ACRA.log.d(ACRA.LOG_TAG, "Http " + method.name() + " content : ");
+            ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
         if (ACRA.DEV_LOGGING)
-            ACRA.log.d(ACRA.LOG_TAG, content);
+            ACRA.log.d(LOG_TAG, content);
 
         HttpResponse response = null;
         try {
@@ -167,11 +169,11 @@ public void send(Context context, URL url, Method method, String content, Type t
                                                          // Discard it.
                             && (statusCode.startsWith("4") || statusCode.startsWith("5"))) {
                         if (ACRA.DEV_LOGGING) {
-                            ACRA.log.d(ACRA.LOG_TAG, "Could not send HttpPost : " + httpRequest);
-                            ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : "
+                            ACRA.log.d(LOG_TAG, "Could not send HttpPost : " + httpRequest);
+                            ACRA.log.d(LOG_TAG, "HttpResponse Status : "
                                     + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
                             final String respContent = EntityUtils.toString(response.getEntity());
-                            ACRA.log.d(ACRA.LOG_TAG,
+                            ACRA.log.d(LOG_TAG,
                                     "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
                         }
                         throw new IOException("Host returned error code " + statusCode);
@@ -179,16 +181,16 @@ public void send(Context context, URL url, Method method, String content, Type t
                 }
 
                 if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : "
+                    ACRA.log.d(LOG_TAG, "HttpResponse Status : "
                             + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
                 final String respContent = EntityUtils.toString(response.getEntity());
                 if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(ACRA.LOG_TAG,
+                    ACRA.log.d(LOG_TAG,
                             "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
 
             } else {
                 if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(ACRA.LOG_TAG, "HTTP no Response!!");
+                    ACRA.log.d(LOG_TAG, "HTTP no Response!!");
             }
         } finally {
             if (response != null) {
diff --git a/src/main/java/org/acra/util/Installation.java b/src/main/java/org/acra/util/Installation.java
index 54689a80..16921f38 100644
--- a/src/main/java/org/acra/util/Installation.java
+++ b/src/main/java/org/acra/util/Installation.java
@@ -13,7 +13,8 @@
 import org.acra.ACRA;
 
 import android.content.Context;
-import android.util.Log;
+
+import static org.acra.ACRA.LOG_TAG;
 
 /**
  * <p>
@@ -40,10 +41,10 @@ public synchronized static String id(Context context) {
                 }
                 sID = readInstallationFile(installation);
             } catch (IOException e) {
-                Log.w(ACRA.LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
                 return "Couldn't retrieve InstallationId";
             } catch (RuntimeException e) {
-                Log.w(ACRA.LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
                 return "Couldn't retrieve InstallationId";
             }
         }
diff --git a/src/main/java/org/acra/util/JSONReportBuilder.java b/src/main/java/org/acra/util/JSONReportBuilder.java
index 26ae0c45..d0a19faa 100644
--- a/src/main/java/org/acra/util/JSONReportBuilder.java
+++ b/src/main/java/org/acra/util/JSONReportBuilder.java
@@ -16,6 +16,8 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import static org.acra.ACRA.LOG_TAG;
+
 public class JSONReportBuilder {
     /**
      * <p>
@@ -82,7 +84,7 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
                             addJSONFromProperty(subObject, line);
                         }
                     } catch (IOException e) {
-                        ACRA.log.e(ACRA.LOG_TAG, "Error while converting " + key.name() + " to JSON.", e);
+                        ACRA.log.e(LOG_TAG, "Error while converting " + key.name() + " to JSON.", e);
                     }
                     jsonReport.accumulate(key.name(), subObject);
                 } else {
@@ -213,7 +215,7 @@ private static void addJSONSubTree(JSONObject destination, String[] keys, Object
                     }
 
                     if (intermediate == null) {
-                        ACRA.log.e(ACRA.LOG_TAG, "Unknown json subtree type, see issue #186");
+                        ACRA.log.e(LOG_TAG, "Unknown json subtree type, see issue #186");
                         // We should never get here, but if we do, drop this value to still send the report
                         return;
                     }
diff --git a/src/main/java/org/acra/util/PackageManagerWrapper.java b/src/main/java/org/acra/util/PackageManagerWrapper.java
index d5ef76c1..cb9ab87c 100644
--- a/src/main/java/org/acra/util/PackageManagerWrapper.java
+++ b/src/main/java/org/acra/util/PackageManagerWrapper.java
@@ -5,7 +5,8 @@
 import android.content.Context;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
-import android.util.Log;
+
+import org.acra.ACRA;
 
 /**
  * Responsible for wrapping calls to PackageManager to ensure that they always complete without throwing RuntimeExceptions.
@@ -62,7 +63,7 @@ public PackageInfo getPackageInfo() {
         try {
             return pm.getPackageInfo(context.getPackageName(), 0);
         } catch (PackageManager.NameNotFoundException e) {
-            Log.v(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
+            ACRA.log.v(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
             return null;
         } catch (RuntimeException e) {
             // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
diff --git a/src/main/java/org/acra/util/ReportUtils.java b/src/main/java/org/acra/util/ReportUtils.java
index 0262acd0..39684455 100644
--- a/src/main/java/org/acra/util/ReportUtils.java
+++ b/src/main/java/org/acra/util/ReportUtils.java
@@ -16,9 +16,10 @@
 import android.os.StatFs;
 import android.telephony.TelephonyManager;
 import android.text.format.Time;
-import android.util.Log;
 import android.util.SparseArray;
 
+import static org.acra.ACRA.LOG_TAG;
+
 /**
  * Responsible for providing base utilities used when constructing the report.
  * <p/>
@@ -66,7 +67,7 @@ public static String getDeviceId(Context context) {
             final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
             return tm.getDeviceId();
         } catch (RuntimeException e) {
-            Log.w(ACRA.LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
             return null;
         }
     }
@@ -77,7 +78,7 @@ public static String getApplicationFilePath(Context context) {
             return filesDir.getAbsolutePath();
         }
 
-        Log.w(ACRA.LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
+        ACRA.log.w(LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
         return "Couldn't retrieve ApplicationFilePath";
     }
     
@@ -127,7 +128,7 @@ public static String getLocalIpAddress() {
                 }
             }
         } catch (SocketException ex) {
-            ACRA.log.w(ACRA.LOG_TAG, ex.toString());
+            ACRA.log.w(LOG_TAG, ex.toString());
         }
         return result.toString();
     }
diff --git a/src/main/java/org/acra/util/TlsSniSocketFactory.java b/src/main/java/org/acra/util/TlsSniSocketFactory.java
index 5df6db09..262d26a4 100644
--- a/src/main/java/org/acra/util/TlsSniSocketFactory.java
+++ b/src/main/java/org/acra/util/TlsSniSocketFactory.java
@@ -11,8 +11,8 @@
 import android.net.SSLCertificateSocketFactory;
 import android.os.Build;
 import android.text.TextUtils;
-import android.util.Log;
 
+import org.acra.ACRA;
 import org.apache.http.conn.scheme.LayeredSocketFactory;
 import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
 import org.apache.http.params.HttpParams;
@@ -136,7 +136,7 @@ private void establishAndVerify(SSLSocket socket, String host) throws IOExceptio
             throw new SSLPeerUnverifiedException(host);
         }
 
-        Log.i(TAG, "Established " + session.getProtocol() + " connection with " + session.getPeerHost() + " using " + session.getCipherSuite());
+        ACRA.log.i(TAG, "Established " + session.getProtocol() + " connection with " + session.getPeerHost() + " using " + session.getCipherSuite());
     }
     
     /**
@@ -159,7 +159,7 @@ private void setTlsParameters(SSLSocket socket) {
                 protocols.add(protocol);
             }
         }
-        Log.v(TAG, "Setting allowed TLS protocols: " + TextUtils.join(", ", protocols));
+        ACRA.log.v(TAG, "Setting allowed TLS protocols: " + TextUtils.join(", ", protocols));
         socket.setEnabledProtocols(protocols.toArray(new String[protocols.size()]));
 
         /* set reasonable cipher suites */
@@ -178,7 +178,7 @@ private void setTlsParameters(SSLSocket socket) {
             // ciphers should be a server-side task
             preferredCiphers.addAll(Arrays.asList(socket.getEnabledCipherSuites()));
             
-            Log.v(TAG, "Setting allowed TLS ciphers: " + TextUtils.join(", ", preferredCiphers));
+            ACRA.log.v(TAG, "Setting allowed TLS ciphers: " + TextUtils.join(", ", preferredCiphers));
             socket.setEnabledCipherSuites(preferredCiphers.toArray(new String[preferredCiphers.size()]));
         }
     }
@@ -187,15 +187,15 @@ private void setTlsParameters(SSLSocket socket) {
     private void setSniHostname(SSLSocket socket, String hostName) {
         // set SNI host name
         if (Build.VERSION.SDK_INT >= VERSION_CODES_JELLY_BEAN_MR1) {
-            Log.d(TAG, "Using documented SNI with host name " + hostName);
+            ACRA.log.d(TAG, "Using documented SNI with host name " + hostName);
             sslSocketFactory.setHostname(socket, hostName);
         } else {
-            Log.d(TAG, "No documented SNI support on Android <4.2, trying reflection method with host name " + hostName);
+            ACRA.log.d(TAG, "No documented SNI support on Android <4.2, trying reflection method with host name " + hostName);
             try {
                 final Method setHostnameMethod = socket.getClass().getMethod("setHostname", String.class);
                 setHostnameMethod.invoke(socket, hostName);
             } catch (Exception e) {
-                Log.w(TAG, "SNI not usable", e);
+                ACRA.log.w(TAG, "SNI not usable", e);
             }
         }
     }
diff --git a/src/main/java/org/acra/util/ToastSender.java b/src/main/java/org/acra/util/ToastSender.java
index f1bb245f..a8c952ae 100644
--- a/src/main/java/org/acra/util/ToastSender.java
+++ b/src/main/java/org/acra/util/ToastSender.java
@@ -3,9 +3,10 @@
 import org.acra.ACRA;
 
 import android.content.Context;
-import android.util.Log;
 import android.widget.Toast;
 
+import static org.acra.ACRA.LOG_TAG;
+
 /**
  * Responsible for sending Toasts under all circumstances.
  * <p/>
@@ -25,7 +26,7 @@ public static void sendToast(Context context, int toastResourceId, int toastLeng
         try {
             Toast.makeText(context, toastResourceId, toastLength).show();
         } catch (RuntimeException e) {
-            Log.e(ACRA.LOG_TAG, "Could not send crash Toast", e);
+            ACRA.log.e(LOG_TAG, "Could not send crash Toast", e);
         }
     }
 }
diff --git a/src/test/java/org/acra/log/NonAndroidLog.java b/src/test/java/org/acra/log/NonAndroidLog.java
index a132f290..dad35e3b 100644
--- a/src/test/java/org/acra/log/NonAndroidLog.java
+++ b/src/test/java/org/acra/log/NonAndroidLog.java
@@ -6,8 +6,6 @@
 import java.io.StringWriter;
 import java.io.Writer;
 
-import android.util.Log;
-
 /**
  * Responsible for delegating calls to the Android logging system.
  * <p/>
@@ -102,7 +100,11 @@ public int w(String tag, String msg, Throwable tr) {
 
     //public native  boolean isLoggable(java.lang.String tag, int level);
     public int w(String tag, Throwable tr) {
-        return Log.w(tag, tr);
+        if (logLevel <= WARN) {
+            out.println(tag + " : ");
+            tr.printStackTrace(out);
+        }
+        return 0;
     }
 
     public int e(String tag, String msg) {
