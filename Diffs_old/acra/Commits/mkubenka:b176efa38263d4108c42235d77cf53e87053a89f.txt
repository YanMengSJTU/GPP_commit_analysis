diff --git a/README.md b/README.md
index 2d0c1da0..a8000ffc 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-[![Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !](https://pledgie.com/campaigns/18789.png?skin_name=chrome)](http://www.pledgie.com/campaigns/18789) [![Flattr this git repo](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=kevingaudin&url=http://github.com/ACRA/acra&title=ACRA&language=&tags=github&category=software)
+[![Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !](https://pledgie.com/campaigns/18789.png?skin_name=chrome)](http://www.pledgie.com/campaigns/18789) [![Flattr this project](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=kevingaudin&url=http://acra.ch&title=ACRA%20-%20Application%20Crash%20Reports%20for%20Android&language=&tags=opensource%2Candroid&category=software&description=ACRA%20%28Application%20Crash%20Reports%20for%20Android%29%20is%20an%20open%20source%20android%20library%20for%20developers%2C%20enabling%20their%20apps%20to%20send%20detailed%20reports%20when%20they%20crash.)
 
 Please tell us how you use ACRA
 ===============================
@@ -43,11 +43,11 @@ For a complete changelog, please see the [ChangeLog page](http://github.com/ACRA
 
 ACRA v4.5 - enabling the future
 ===============================
-ACRA v4.5.0 is now available as a second Release Candidate:
-https://oss.sonatype.org/content/groups/public/ch/acra/acra/4.5.0RC3/acra-4.5.0RC3.zip
-(also available in Maven Central repository)
 
-Please use it, test it, report issues. This release will be considered as stable if no major issue is reported on the 3rd of May 2013.
+**ACRA 4.5.0 is now the official stable version.**
+
+https://oss.sonatype.org/content/groups/public/ch/acra/acra/4.5.0/acra-4.5.0.zip
+(also available in Maven Central repository)
 
 The summarized changelog is here: https://github.com/ACRA/acra/wiki/ChangeLog
 
@@ -71,8 +71,6 @@ New ideas about the project are always welcome, you can open feature requests in
 ACRA v4.4 - enforcing security
 ==============================
 
-**ACRA 4.4.0 is now the official stable version.**
-
 ACRA has been named in [this report](http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf) as a potential cause of SSL vulnerability for all android apps using it.
 
 The truth is that, in order to let devs use alternative backends over an SSL connection with self-signed certificates, I chose to disable certificate validation in earlier versions of the lib. But this was done only on the scope of ACRA reports senders. Using ACRA did not imply that your app became unsafe for all its SSL communications.
diff --git a/pom.xml b/pom.xml
index 6289ee60..5cb14667 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,7 @@
     </parent>
 	<groupId>ch.acra</groupId>
 	<artifactId>acra</artifactId>
-	<version>4.5.0-SNAPSHOT</version>
+	<version>5.0.0-SNAPSHOT</version>
 
 	<name>Application Crash Report for Android</name>
 
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index 3b3a9507..cd121219 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -15,39 +15,10 @@
  */
 package org.acra;
 
-import static org.acra.ReportField.ANDROID_VERSION;
-import static org.acra.ReportField.APP_VERSION_CODE;
-import static org.acra.ReportField.APP_VERSION_NAME;
-import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
-import static org.acra.ReportField.BRAND;
-import static org.acra.ReportField.BUILD;
-import static org.acra.ReportField.CRASH_CONFIGURATION;
-import static org.acra.ReportField.CUSTOM_DATA;
-import static org.acra.ReportField.DEVICE_FEATURES;
-import static org.acra.ReportField.DISPLAY;
-import static org.acra.ReportField.DUMPSYS_MEMINFO;
-import static org.acra.ReportField.ENVIRONMENT;
-import static org.acra.ReportField.FILE_PATH;
-import static org.acra.ReportField.INITIAL_CONFIGURATION;
-import static org.acra.ReportField.INSTALLATION_ID;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.LOGCAT;
-import static org.acra.ReportField.PACKAGE_NAME;
-import static org.acra.ReportField.PHONE_MODEL;
-import static org.acra.ReportField.PRODUCT;
-import static org.acra.ReportField.REPORT_ID;
-import static org.acra.ReportField.SETTINGS_GLOBAL;
-import static org.acra.ReportField.SETTINGS_SECURE;
-import static org.acra.ReportField.SETTINGS_SYSTEM;
-import static org.acra.ReportField.SHARED_PREFERENCES;
-import static org.acra.ReportField.STACK_TRACE;
-import static org.acra.ReportField.TOTAL_MEM_SIZE;
-import static org.acra.ReportField.USER_APP_START_DATE;
-import static org.acra.ReportField.USER_COMMENT;
-import static org.acra.ReportField.USER_CRASH_DATE;
-import static org.acra.ReportField.USER_EMAIL;
 import android.content.Context;
 
+import static org.acra.ReportField.*;
+
 /**
  * Responsible for collating those constants shared among the ACRA components.
  * <p/>
@@ -161,7 +132,7 @@
      */
     public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
             PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
-            AVAILABLE_MEM_SIZE, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
+            AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
             DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
             INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES, SETTINGS_SYSTEM, SETTINGS_SECURE,
             SETTINGS_GLOBAL };
diff --git a/src/main/java/org/acra/ReportField.java b/src/main/java/org/acra/ReportField.java
index 562e6d96..857c4f03 100644
--- a/src/main/java/org/acra/ReportField.java
+++ b/src/main/java/org/acra/ReportField.java
@@ -98,6 +98,16 @@ public boolean containsKeyValuePairs() {
      * Estimation of the available device memory size based on filesystem stats.
      */
     AVAILABLE_MEM_SIZE,
+    /**
+     * Contains key = value pairs defined by the application developer during
+     * the application build.
+     */
+    BUILD_CONFIG {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
     /**
      * Contains key = value pairs defined by the application developer during
      * the application execution.
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
index ee0902cf..17273083 100644
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -17,43 +17,7 @@
 package org.acra.collector;
 
 import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.ANDROID_VERSION;
-import static org.acra.ReportField.APPLICATION_LOG;
-import static org.acra.ReportField.APP_VERSION_CODE;
-import static org.acra.ReportField.APP_VERSION_NAME;
-import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
-import static org.acra.ReportField.BRAND;
-import static org.acra.ReportField.BUILD;
-import static org.acra.ReportField.CRASH_CONFIGURATION;
-import static org.acra.ReportField.CUSTOM_DATA;
-import static org.acra.ReportField.DEVICE_FEATURES;
-import static org.acra.ReportField.DEVICE_ID;
-import static org.acra.ReportField.DISPLAY;
-import static org.acra.ReportField.DROPBOX;
-import static org.acra.ReportField.DUMPSYS_MEMINFO;
-import static org.acra.ReportField.ENVIRONMENT;
-import static org.acra.ReportField.EVENTSLOG;
-import static org.acra.ReportField.FILE_PATH;
-import static org.acra.ReportField.INITIAL_CONFIGURATION;
-import static org.acra.ReportField.INSTALLATION_ID;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.LOGCAT;
-import static org.acra.ReportField.MEDIA_CODEC_LIST;
-import static org.acra.ReportField.PACKAGE_NAME;
-import static org.acra.ReportField.PHONE_MODEL;
-import static org.acra.ReportField.PRODUCT;
-import static org.acra.ReportField.RADIOLOG;
-import static org.acra.ReportField.REPORT_ID;
-import static org.acra.ReportField.SETTINGS_SECURE;
-import static org.acra.ReportField.SETTINGS_SYSTEM;
-import static org.acra.ReportField.SETTINGS_GLOBAL;
-import static org.acra.ReportField.SHARED_PREFERENCES;
-import static org.acra.ReportField.STACK_TRACE;
-import static org.acra.ReportField.THREAD_DETAILS;
-import static org.acra.ReportField.TOTAL_MEM_SIZE;
-import static org.acra.ReportField.USER_CRASH_DATE;
-import static org.acra.ReportField.USER_EMAIL;
-import static org.acra.ReportField.USER_IP;
+import static org.acra.ReportField.*;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -156,7 +120,7 @@ public String getCustomData(String key) {
      *            Throwable that caused the crash.
      * @param isSilentReport
      *            Whether to report this report as being sent silently.
-     * @param brokenThread2
+     * @param brokenThread  Thread on which the error occurred.
      * @return CrashReportData representing the current state of the application
      *         at the instant of the Exception.
      */
@@ -259,6 +223,16 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
                 crashReportData.put(CUSTOM_DATA, createCustomInfoString());
             }
 
+            if (crashReportFields.contains(BUILD_CONFIG)) {
+                final String className = context.getPackageName() + ".BuildConfig";
+                try {
+                    final Class<?> buildConfig = Class.forName(className);
+                    crashReportData.put(BUILD_CONFIG, ReflectionCollector.collectConstants(buildConfig));
+                } catch (ClassNotFoundException e) {
+                    Log.e(ACRA.LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className);
+                }
+            }
+
             // Add user email address, if set in the app's preferences
             if (crashReportFields.contains(USER_EMAIL)) {
                 crashReportData.put(USER_EMAIL, prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "N/A"));
diff --git a/src/main/java/org/acra/collector/LogFileCollector.java b/src/main/java/org/acra/collector/LogFileCollector.java
index 80e68910..dcc7c68f 100644
--- a/src/main/java/org/acra/collector/LogFileCollector.java
+++ b/src/main/java/org/acra/collector/LogFileCollector.java
@@ -60,10 +60,14 @@ public static String collectLogFile(Context context, String fileName, int number
         } else {
             reader = new BufferedReader(new InputStreamReader(context.openFileInput(fileName)), 1024);
         }
-        String line = reader.readLine();
-        while (line != null) {
-            resultBuffer.add(line + "\n");
-            line = reader.readLine();
+        try {
+            String line = reader.readLine();
+            while (line != null) {
+                resultBuffer.add(line + "\n");
+                line = reader.readLine();
+            }
+        } finally {
+            reader.close();
         }
         return resultBuffer.toString();
     }
diff --git a/src/main/java/org/acra/collector/ReflectionCollector.java b/src/main/java/org/acra/collector/ReflectionCollector.java
index 55a34da8..ebde1088 100644
--- a/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -44,12 +44,15 @@ public static String collectConstants(Class<?> someClass, String prefix) {
 
         final Field[] fields = someClass.getFields();
         for (final Field field : fields) {
-            if(prefix != null && prefix.length() > 0) {
+            if (prefix != null && prefix.length() > 0) {
                 result.append(prefix).append('.');
             }
             result.append(field.getName()).append("=");
             try {
-                result.append(field.get(null).toString());
+                final Object value = field.get(null);
+                if (value != null) {
+                    result.append(value.toString());
+                }
             } catch (IllegalArgumentException e) {
                 result.append("N/A");
             } catch (IllegalAccessException e) {
diff --git a/src/main/java/org/acra/collector/ThreadCollector.java b/src/main/java/org/acra/collector/ThreadCollector.java
index f8d4ea13..dcb2ba6d 100644
--- a/src/main/java/org/acra/collector/ThreadCollector.java
+++ b/src/main/java/org/acra/collector/ThreadCollector.java
@@ -25,11 +25,11 @@
 public class ThreadCollector {
 
     /**
-     * Collects some data identifying a Thread, usually the Thread which
-     * crashed.
+     * Convenience method that collects some data identifying a Thread, usually the Thread which
+     * crashed and returns a string containing the thread's id, name, priority and group name.
      * 
-     * @param t
-     * @return
+     * @param the thread
+     * @return a string representation of the string including the id, name and priority of the thread.
      */
     public static String collect(Thread t) {
         StringBuilder result = new StringBuilder();
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index 416dc62c..3581140b 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -112,6 +112,8 @@ public String getContentType() {
     private final Map<ReportField, String> mMapping;
     private final Method mMethod;
     private final Type mType;
+    private String mUsername;
+    private String mPassword;
 
     /**
      * <p>
@@ -143,6 +145,8 @@ public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
         mFormUri = null;
         mMapping = mapping;
         mType = type;
+        mUsername = null;
+        mPassword = null;
     }
 
     /**
@@ -175,7 +179,25 @@ public HttpSender(Method method, Type type, String formUri, Map<ReportField, Str
         mFormUri = Uri.parse(formUri);
         mMapping = mapping;
         mType = type;
+        mUsername = null;
+        mPassword = null;        
     }
+    
+    /**
+     * <p>
+     * Set credentials for this HttpSender that override (if present) the ones
+     * set globally.
+     * </p>
+     * 
+     * @param username
+     *            The username to set for HTTP Basic Auth.
+     * @param password
+     *            The password to set for HTTP Basic Auth.
+     */
+    public void setBasicAuth(String username, String password) {
+        mUsername = username;
+        mPassword = password;
+    }    
 
     @Override
     public void send(CrashReportData report) throws ReportSenderException {
@@ -184,9 +206,9 @@ public void send(CrashReportData report) throws ReportSenderException {
             URL reportUrl = mFormUri == null ? new URL(ACRA.getConfig().formUri()) : new URL(mFormUri.toString());
             Log.d(LOG_TAG, "Connect to " + reportUrl.toString());
 
-            final String login = ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthLogin()) ? null : ACRA
+            final String login = mUsername != null ? mUsername : ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthLogin()) ? null : ACRA
                     .getConfig().formUriBasicAuthLogin();
-            final String password = ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthPassword()) ? null : ACRA
+            final String password = mPassword != null ? mPassword : ACRAConfiguration.isNull(ACRA.getConfig().formUriBasicAuthPassword()) ? null : ACRA
                     .getConfig().formUriBasicAuthPassword();
 
             final HttpRequest request = new HttpRequest();
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 1af1c3d5..502b1660 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -159,8 +159,8 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
                                                   // report has been received
                                                   // already. So we can discard it.
                             && !statusCode.equals("403") // a 403 error code is an explicit data validation refusal
-                            // from the server. The request must not be repeated.
-                            // Discard it.
+                                                         // from the server. The request must not be repeated.
+                                                         // Discard it.
                             && (statusCode.startsWith("4") || statusCode.startsWith("5"))) {
                         if (ACRA.DEV_LOGGING) {
                             ACRA.log.d(ACRA.LOG_TAG, "Could not send HttpPost : " + httpRequest);
@@ -170,7 +170,6 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
                             ACRA.log.d(ACRA.LOG_TAG,
                                     "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
                         }
-
                         throw new IOException("Host returned error code " + statusCode);
                     }
                 }
